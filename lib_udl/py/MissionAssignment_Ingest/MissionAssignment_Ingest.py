# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Platform mission assignment data.
class MissionAssignment_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MissionAssignment_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMissionAssignment_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MissionAssignment_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x49\x53\x53", size_prefixed=size_prefixed)

    # MissionAssignment_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: MISSIONASSIGNMENT-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # MissionAssignment_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # MissionAssignment_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The track ID that the status is referencing, addressee.
    # Example: /// Example: TRK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # MissionAssignment_Ingest
    def TrkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timestamp of the mission data, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-01T01:01:01.123456Z
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mission assignment discrete value.
    # Example: /// Example: MAD
    # Constraints: Minimum length = 1, Maximum length = 16
    # MissionAssignment_Ingest
    def Mad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Receipt/Compliance, values from TABLE B-9.
    # Example: /// Example: RC-123
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def Rc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Recurrence rate, receipt/compliance.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Rr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Track number objective.
    # Example: /// Example: TRACK_NUMBER
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Tno(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Threat warning environment.
    # Example: /// Example: THREAT_WARNING
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def Twenv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Origin of index number.
    # Example: /// Example: ORIGIN
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def Orginx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Environment.
    # Example: /// Example: ENV
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def Env(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Strength.
    # Example: /// Example: STRENGTH
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def Sz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Index number.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGET POSITION CONTINUATION WORD - number of associated dmpis.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C1associateddmpis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
    # Example: /// Example: C2SPC
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2spc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
    # Example: /// Example: C2AIR
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2air(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
    # Example: /// Example: C2SUR
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2sur(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
    # Example: /// Example: C2LND
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2lnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - identity.
    # Example: /// Example: C2ID
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C2id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
    # Example: /// Example: C2IDAMP
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C2idamplifyingdescriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2crs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C2spd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGET DATA CONTINUATION WORD - special interest indicator.
    # Example: /// Example: C2SPECIAL
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C2specialinterestindicator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - exercise indicator.
    # Example: /// Example: C2EXERCISE
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C2exerciseindicator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - method of fire.
    # Example: /// Example: MOF
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C2exercisemof(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C3lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C3lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C3elv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # TARGET DATA CONTINUATION WORD - point type 1.
    # Example: /// Example: C3PTL
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C3ptl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGET DATA CONTINUATION WORD - point number.
    # Example: /// Example: C3PTNUM
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C3ptnum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
    # Example: /// Example: C4TGT
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C4tgt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SURFACE ATTACK CONTINUATION WORD - target defenses.
    # Example: /// Example: C4DEF
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C4def(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4runin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4egress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4numberofstores(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - type of stores.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4typeofstores(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - time discrete.
    # Example: /// Example: C4TIMED
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C4timediscrete(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SURFACE ATTACK CONTINUATION WORD - hour.
    # Example: /// Example: 4
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4tm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - minute.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4colon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - mode of delivery.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C4mod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5haeadj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - time window.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5tw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - target bearing.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5tgtbrng(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5latlsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5lonlsb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5elevationlsbs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C5colon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGETING CONTINUATION WORD - laser illuminator code.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C6laser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGETING CONTINUATION WORD - index number, related, 0=NS.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C6intel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGETING CONTINUATION WORD - track number, related to 3.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C6tnr3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TARGETING CONTINUATION WORD - designator/seeker pulse code type.
    # Example: /// Example: C6DSPCT
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C6dspct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGETING CONTINUATION WORD - designator/seeker pulse code.
    # Example: /// Example: C6DSPC
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C6dspc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGETING CONTINUATION WORD - first pulse/last pulse mode.
    # Example: /// Example: C6FPLPM
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C6fplpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TARGETING CONTINUATION WORD - long pulse mode.
    # Example: /// Example: C6LONGPM
    # Constraints: Minimum length = 0, Maximum length = 16
    # MissionAssignment_Ingest
    def C6longpm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # THIRD PARTY CONTINUATION WORD  - track number, index originator.
    # Example: /// Example: C7TNOR
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C7tnor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # THIRD PARTY CONTINUATION WORD  - index number, third party.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C7in3p(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def C7elang2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # MissionAssignment_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # MissionAssignment_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # MissionAssignment_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # MissionAssignment_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # MissionAssignment_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # MissionAssignment_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def MissionAssignment_IngestStart(builder):
    builder.StartObject(66)

def Start(builder):
    MissionAssignment_IngestStart(builder)

def MissionAssignment_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    MissionAssignment_IngestAddId(builder, id)

def MissionAssignment_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    MissionAssignment_IngestAddClassificationMarking(builder, classificationMarking)

def MissionAssignment_IngestAddTrkId(builder, trkId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trkId), 0)

def AddTrkId(builder, trkId):
    MissionAssignment_IngestAddTrkId(builder, trkId)

def MissionAssignment_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    MissionAssignment_IngestAddTs(builder, ts)

def MissionAssignment_IngestAddMad(builder, mad):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mad), 0)

def AddMad(builder, mad):
    MissionAssignment_IngestAddMad(builder, mad)

def MissionAssignment_IngestAddRc(builder, rc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rc), 0)

def AddRc(builder, rc):
    MissionAssignment_IngestAddRc(builder, rc)

def MissionAssignment_IngestAddRr(builder, rr):
    builder.PrependInt32Slot(6, rr, 0)

def AddRr(builder, rr):
    MissionAssignment_IngestAddRr(builder, rr)

def MissionAssignment_IngestAddTno(builder, tno):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tno), 0)

def AddTno(builder, tno):
    MissionAssignment_IngestAddTno(builder, tno)

def MissionAssignment_IngestAddTwenv(builder, twenv):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(twenv), 0)

def AddTwenv(builder, twenv):
    MissionAssignment_IngestAddTwenv(builder, twenv)

def MissionAssignment_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(9, lat, 0.0)

def AddLat(builder, lat):
    MissionAssignment_IngestAddLat(builder, lat)

def MissionAssignment_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(10, lon, 0.0)

def AddLon(builder, lon):
    MissionAssignment_IngestAddLon(builder, lon)

def MissionAssignment_IngestAddOrginx(builder, orginx):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(orginx), 0)

def AddOrginx(builder, orginx):
    MissionAssignment_IngestAddOrginx(builder, orginx)

def MissionAssignment_IngestAddEnv(builder, env):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(env), 0)

def AddEnv(builder, env):
    MissionAssignment_IngestAddEnv(builder, env)

def MissionAssignment_IngestAddSz(builder, sz):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(sz), 0)

def AddSz(builder, sz):
    MissionAssignment_IngestAddSz(builder, sz)

def MissionAssignment_IngestAddIndex(builder, index):
    builder.PrependInt32Slot(14, index, 0)

def AddIndex(builder, index):
    MissionAssignment_IngestAddIndex(builder, index)

def MissionAssignment_IngestAddC1associateddmpis(builder, c1associateddmpis):
    builder.PrependInt32Slot(15, c1associateddmpis, 0)

def AddC1associateddmpis(builder, c1associateddmpis):
    MissionAssignment_IngestAddC1associateddmpis(builder, c1associateddmpis)

def MissionAssignment_IngestAddC2spc(builder, c2spc):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(c2spc), 0)

def AddC2spc(builder, c2spc):
    MissionAssignment_IngestAddC2spc(builder, c2spc)

def MissionAssignment_IngestAddC2air(builder, c2air):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(c2air), 0)

def AddC2air(builder, c2air):
    MissionAssignment_IngestAddC2air(builder, c2air)

def MissionAssignment_IngestAddC2sur(builder, c2sur):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(c2sur), 0)

def AddC2sur(builder, c2sur):
    MissionAssignment_IngestAddC2sur(builder, c2sur)

def MissionAssignment_IngestAddC2lnd(builder, c2lnd):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(c2lnd), 0)

def AddC2lnd(builder, c2lnd):
    MissionAssignment_IngestAddC2lnd(builder, c2lnd)

def MissionAssignment_IngestAddC2id(builder, c2id):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(c2id), 0)

def AddC2id(builder, c2id):
    MissionAssignment_IngestAddC2id(builder, c2id)

def MissionAssignment_IngestAddC2idamplifyingdescriptor(builder, c2idamplifyingdescriptor):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(c2idamplifyingdescriptor), 0)

def AddC2idamplifyingdescriptor(builder, c2idamplifyingdescriptor):
    MissionAssignment_IngestAddC2idamplifyingdescriptor(builder, c2idamplifyingdescriptor)

def MissionAssignment_IngestAddC2alt(builder, c2alt):
    builder.PrependInt32Slot(22, c2alt, 0)

def AddC2alt(builder, c2alt):
    MissionAssignment_IngestAddC2alt(builder, c2alt)

def MissionAssignment_IngestAddC2crs(builder, c2crs):
    builder.PrependInt32Slot(23, c2crs, 0)

def AddC2crs(builder, c2crs):
    MissionAssignment_IngestAddC2crs(builder, c2crs)

def MissionAssignment_IngestAddC2spd(builder, c2spd):
    builder.PrependInt32Slot(24, c2spd, 0)

def AddC2spd(builder, c2spd):
    MissionAssignment_IngestAddC2spd(builder, c2spd)

def MissionAssignment_IngestAddC2specialinterestindicator(builder, c2specialinterestindicator):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(c2specialinterestindicator), 0)

def AddC2specialinterestindicator(builder, c2specialinterestindicator):
    MissionAssignment_IngestAddC2specialinterestindicator(builder, c2specialinterestindicator)

def MissionAssignment_IngestAddC2exerciseindicator(builder, c2exerciseindicator):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(c2exerciseindicator), 0)

def AddC2exerciseindicator(builder, c2exerciseindicator):
    MissionAssignment_IngestAddC2exerciseindicator(builder, c2exerciseindicator)

def MissionAssignment_IngestAddC2exercisemof(builder, c2exercisemof):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(c2exercisemof), 0)

def AddC2exercisemof(builder, c2exercisemof):
    MissionAssignment_IngestAddC2exercisemof(builder, c2exercisemof)

def MissionAssignment_IngestAddC3lat(builder, c3lat):
    builder.PrependFloat64Slot(28, c3lat, 0.0)

def AddC3lat(builder, c3lat):
    MissionAssignment_IngestAddC3lat(builder, c3lat)

def MissionAssignment_IngestAddC3lon(builder, c3lon):
    builder.PrependFloat64Slot(29, c3lon, 0.0)

def AddC3lon(builder, c3lon):
    MissionAssignment_IngestAddC3lon(builder, c3lon)

def MissionAssignment_IngestAddC3elv(builder, c3elv):
    builder.PrependFloat64Slot(30, c3elv, 0.0)

def AddC3elv(builder, c3elv):
    MissionAssignment_IngestAddC3elv(builder, c3elv)

def MissionAssignment_IngestAddC3ptl(builder, c3ptl):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(c3ptl), 0)

def AddC3ptl(builder, c3ptl):
    MissionAssignment_IngestAddC3ptl(builder, c3ptl)

def MissionAssignment_IngestAddC3ptnum(builder, c3ptnum):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(c3ptnum), 0)

def AddC3ptnum(builder, c3ptnum):
    MissionAssignment_IngestAddC3ptnum(builder, c3ptnum)

def MissionAssignment_IngestAddC4tgt(builder, c4tgt):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(c4tgt), 0)

def AddC4tgt(builder, c4tgt):
    MissionAssignment_IngestAddC4tgt(builder, c4tgt)

def MissionAssignment_IngestAddC4def(builder, c4def):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(c4def), 0)

def AddC4def(builder, c4def):
    MissionAssignment_IngestAddC4def(builder, c4def)

def MissionAssignment_IngestAddC4runin(builder, c4runin):
    builder.PrependInt32Slot(35, c4runin, 0)

def AddC4runin(builder, c4runin):
    MissionAssignment_IngestAddC4runin(builder, c4runin)

def MissionAssignment_IngestAddC4egress(builder, c4egress):
    builder.PrependInt32Slot(36, c4egress, 0)

def AddC4egress(builder, c4egress):
    MissionAssignment_IngestAddC4egress(builder, c4egress)

def MissionAssignment_IngestAddC4numberofstores(builder, c4numberofstores):
    builder.PrependInt32Slot(37, c4numberofstores, 0)

def AddC4numberofstores(builder, c4numberofstores):
    MissionAssignment_IngestAddC4numberofstores(builder, c4numberofstores)

def MissionAssignment_IngestAddC4typeofstores(builder, c4typeofstores):
    builder.PrependInt32Slot(38, c4typeofstores, 0)

def AddC4typeofstores(builder, c4typeofstores):
    MissionAssignment_IngestAddC4typeofstores(builder, c4typeofstores)

def MissionAssignment_IngestAddC4timediscrete(builder, c4timediscrete):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(c4timediscrete), 0)

def AddC4timediscrete(builder, c4timediscrete):
    MissionAssignment_IngestAddC4timediscrete(builder, c4timediscrete)

def MissionAssignment_IngestAddC4tm(builder, c4tm):
    builder.PrependInt32Slot(40, c4tm, 0)

def AddC4tm(builder, c4tm):
    MissionAssignment_IngestAddC4tm(builder, c4tm)

def MissionAssignment_IngestAddC4colon(builder, c4colon):
    builder.PrependInt32Slot(41, c4colon, 0)

def AddC4colon(builder, c4colon):
    MissionAssignment_IngestAddC4colon(builder, c4colon)

def MissionAssignment_IngestAddC4mod(builder, c4mod):
    builder.PrependInt32Slot(42, c4mod, 0)

def AddC4mod(builder, c4mod):
    MissionAssignment_IngestAddC4mod(builder, c4mod)

def MissionAssignment_IngestAddC5haeadj(builder, c5haeadj):
    builder.PrependInt32Slot(43, c5haeadj, 0)

def AddC5haeadj(builder, c5haeadj):
    MissionAssignment_IngestAddC5haeadj(builder, c5haeadj)

def MissionAssignment_IngestAddC5tw(builder, c5tw):
    builder.PrependInt32Slot(44, c5tw, 0)

def AddC5tw(builder, c5tw):
    MissionAssignment_IngestAddC5tw(builder, c5tw)

def MissionAssignment_IngestAddC5tgtbrng(builder, c5tgtbrng):
    builder.PrependInt32Slot(45, c5tgtbrng, 0)

def AddC5tgtbrng(builder, c5tgtbrng):
    MissionAssignment_IngestAddC5tgtbrng(builder, c5tgtbrng)

def MissionAssignment_IngestAddC5latlsb(builder, c5latlsb):
    builder.PrependInt32Slot(46, c5latlsb, 0)

def AddC5latlsb(builder, c5latlsb):
    MissionAssignment_IngestAddC5latlsb(builder, c5latlsb)

def MissionAssignment_IngestAddC5lonlsb(builder, c5lonlsb):
    builder.PrependInt32Slot(47, c5lonlsb, 0)

def AddC5lonlsb(builder, c5lonlsb):
    MissionAssignment_IngestAddC5lonlsb(builder, c5lonlsb)

def MissionAssignment_IngestAddC5elevationlsbs(builder, c5elevationlsbs):
    builder.PrependInt32Slot(48, c5elevationlsbs, 0)

def AddC5elevationlsbs(builder, c5elevationlsbs):
    MissionAssignment_IngestAddC5elevationlsbs(builder, c5elevationlsbs)

def MissionAssignment_IngestAddC5colon(builder, c5colon):
    builder.PrependInt32Slot(49, c5colon, 0)

def AddC5colon(builder, c5colon):
    MissionAssignment_IngestAddC5colon(builder, c5colon)

def MissionAssignment_IngestAddC6laser(builder, c6laser):
    builder.PrependInt32Slot(50, c6laser, 0)

def AddC6laser(builder, c6laser):
    MissionAssignment_IngestAddC6laser(builder, c6laser)

def MissionAssignment_IngestAddC6intel(builder, c6intel):
    builder.PrependInt32Slot(51, c6intel, 0)

def AddC6intel(builder, c6intel):
    MissionAssignment_IngestAddC6intel(builder, c6intel)

def MissionAssignment_IngestAddC6tnr3(builder, c6tnr3):
    builder.PrependInt32Slot(52, c6tnr3, 0)

def AddC6tnr3(builder, c6tnr3):
    MissionAssignment_IngestAddC6tnr3(builder, c6tnr3)

def MissionAssignment_IngestAddC6dspct(builder, c6dspct):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(c6dspct), 0)

def AddC6dspct(builder, c6dspct):
    MissionAssignment_IngestAddC6dspct(builder, c6dspct)

def MissionAssignment_IngestAddC6dspc(builder, c6dspc):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(c6dspc), 0)

def AddC6dspc(builder, c6dspc):
    MissionAssignment_IngestAddC6dspc(builder, c6dspc)

def MissionAssignment_IngestAddC6fplpm(builder, c6fplpm):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(c6fplpm), 0)

def AddC6fplpm(builder, c6fplpm):
    MissionAssignment_IngestAddC6fplpm(builder, c6fplpm)

def MissionAssignment_IngestAddC6longpm(builder, c6longpm):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(c6longpm), 0)

def AddC6longpm(builder, c6longpm):
    MissionAssignment_IngestAddC6longpm(builder, c6longpm)

def MissionAssignment_IngestAddC7tnor(builder, c7tnor):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(c7tnor), 0)

def AddC7tnor(builder, c7tnor):
    MissionAssignment_IngestAddC7tnor(builder, c7tnor)

def MissionAssignment_IngestAddC7in3p(builder, c7in3p):
    builder.PrependInt32Slot(58, c7in3p, 0)

def AddC7in3p(builder, c7in3p):
    MissionAssignment_IngestAddC7in3p(builder, c7in3p)

def MissionAssignment_IngestAddC7elang2(builder, c7elang2):
    builder.PrependFloat64Slot(59, c7elang2, 0.0)

def AddC7elang2(builder, c7elang2):
    MissionAssignment_IngestAddC7elang2(builder, c7elang2)

def MissionAssignment_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    MissionAssignment_IngestAddCreatedAt(builder, createdAt)

def MissionAssignment_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    MissionAssignment_IngestAddCreatedBy(builder, createdBy)

def MissionAssignment_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    MissionAssignment_IngestAddSource(builder, source)

def MissionAssignment_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    MissionAssignment_IngestAddOrigin(builder, origin)

def MissionAssignment_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(64, dataMode, 0)

def AddDataMode(builder, dataMode):
    MissionAssignment_IngestAddDataMode(builder, dataMode)

def MissionAssignment_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    MissionAssignment_IngestAddOrigNetwork(builder, origNetwork)

def MissionAssignment_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return MissionAssignment_IngestEnd(builder)


class MissionAssignment_IngestT(object):

    # MissionAssignment_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.trkId = None  # type: str
        self.ts = None  # type: str
        self.mad = None  # type: str
        self.rc = None  # type: str
        self.rr = 0  # type: int
        self.tno = None  # type: str
        self.twenv = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.orginx = None  # type: str
        self.env = None  # type: str
        self.sz = None  # type: str
        self.index = 0  # type: int
        self.c1associateddmpis = 0  # type: int
        self.c2spc = None  # type: str
        self.c2air = None  # type: str
        self.c2sur = None  # type: str
        self.c2lnd = None  # type: str
        self.c2id = None  # type: str
        self.c2idamplifyingdescriptor = None  # type: str
        self.c2alt = 0  # type: int
        self.c2crs = 0  # type: int
        self.c2spd = 0  # type: int
        self.c2specialinterestindicator = None  # type: str
        self.c2exerciseindicator = None  # type: str
        self.c2exercisemof = None  # type: str
        self.c3lat = 0.0  # type: float
        self.c3lon = 0.0  # type: float
        self.c3elv = 0.0  # type: float
        self.c3ptl = None  # type: str
        self.c3ptnum = None  # type: str
        self.c4tgt = None  # type: str
        self.c4def = None  # type: str
        self.c4runin = 0  # type: int
        self.c4egress = 0  # type: int
        self.c4numberofstores = 0  # type: int
        self.c4typeofstores = 0  # type: int
        self.c4timediscrete = None  # type: str
        self.c4tm = 0  # type: int
        self.c4colon = 0  # type: int
        self.c4mod = 0  # type: int
        self.c5haeadj = 0  # type: int
        self.c5tw = 0  # type: int
        self.c5tgtbrng = 0  # type: int
        self.c5latlsb = 0  # type: int
        self.c5lonlsb = 0  # type: int
        self.c5elevationlsbs = 0  # type: int
        self.c5colon = 0  # type: int
        self.c6laser = 0  # type: int
        self.c6intel = 0  # type: int
        self.c6tnr3 = 0  # type: int
        self.c6dspct = None  # type: str
        self.c6dspc = None  # type: str
        self.c6fplpm = None  # type: str
        self.c6longpm = None  # type: str
        self.c7tnor = None  # type: str
        self.c7in3p = 0  # type: int
        self.c7elang2 = 0.0  # type: float
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.dataMode = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        missionAssignmentIngest = MissionAssignment_Ingest()
        missionAssignmentIngest.Init(buf, pos)
        return cls.InitFromObj(missionAssignmentIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, missionAssignmentIngest):
        x = MissionAssignment_IngestT()
        x._UnPack(missionAssignmentIngest)
        return x

    # MissionAssignment_IngestT
    def _UnPack(self, missionAssignmentIngest):
        if missionAssignmentIngest is None:
            return
        self.id = missionAssignmentIngest.Id()
        self.classificationMarking = missionAssignmentIngest.ClassificationMarking()
        self.trkId = missionAssignmentIngest.TrkId()
        self.ts = missionAssignmentIngest.Ts()
        self.mad = missionAssignmentIngest.Mad()
        self.rc = missionAssignmentIngest.Rc()
        self.rr = missionAssignmentIngest.Rr()
        self.tno = missionAssignmentIngest.Tno()
        self.twenv = missionAssignmentIngest.Twenv()
        self.lat = missionAssignmentIngest.Lat()
        self.lon = missionAssignmentIngest.Lon()
        self.orginx = missionAssignmentIngest.Orginx()
        self.env = missionAssignmentIngest.Env()
        self.sz = missionAssignmentIngest.Sz()
        self.index = missionAssignmentIngest.Index()
        self.c1associateddmpis = missionAssignmentIngest.C1associateddmpis()
        self.c2spc = missionAssignmentIngest.C2spc()
        self.c2air = missionAssignmentIngest.C2air()
        self.c2sur = missionAssignmentIngest.C2sur()
        self.c2lnd = missionAssignmentIngest.C2lnd()
        self.c2id = missionAssignmentIngest.C2id()
        self.c2idamplifyingdescriptor = missionAssignmentIngest.C2idamplifyingdescriptor()
        self.c2alt = missionAssignmentIngest.C2alt()
        self.c2crs = missionAssignmentIngest.C2crs()
        self.c2spd = missionAssignmentIngest.C2spd()
        self.c2specialinterestindicator = missionAssignmentIngest.C2specialinterestindicator()
        self.c2exerciseindicator = missionAssignmentIngest.C2exerciseindicator()
        self.c2exercisemof = missionAssignmentIngest.C2exercisemof()
        self.c3lat = missionAssignmentIngest.C3lat()
        self.c3lon = missionAssignmentIngest.C3lon()
        self.c3elv = missionAssignmentIngest.C3elv()
        self.c3ptl = missionAssignmentIngest.C3ptl()
        self.c3ptnum = missionAssignmentIngest.C3ptnum()
        self.c4tgt = missionAssignmentIngest.C4tgt()
        self.c4def = missionAssignmentIngest.C4def()
        self.c4runin = missionAssignmentIngest.C4runin()
        self.c4egress = missionAssignmentIngest.C4egress()
        self.c4numberofstores = missionAssignmentIngest.C4numberofstores()
        self.c4typeofstores = missionAssignmentIngest.C4typeofstores()
        self.c4timediscrete = missionAssignmentIngest.C4timediscrete()
        self.c4tm = missionAssignmentIngest.C4tm()
        self.c4colon = missionAssignmentIngest.C4colon()
        self.c4mod = missionAssignmentIngest.C4mod()
        self.c5haeadj = missionAssignmentIngest.C5haeadj()
        self.c5tw = missionAssignmentIngest.C5tw()
        self.c5tgtbrng = missionAssignmentIngest.C5tgtbrng()
        self.c5latlsb = missionAssignmentIngest.C5latlsb()
        self.c5lonlsb = missionAssignmentIngest.C5lonlsb()
        self.c5elevationlsbs = missionAssignmentIngest.C5elevationlsbs()
        self.c5colon = missionAssignmentIngest.C5colon()
        self.c6laser = missionAssignmentIngest.C6laser()
        self.c6intel = missionAssignmentIngest.C6intel()
        self.c6tnr3 = missionAssignmentIngest.C6tnr3()
        self.c6dspct = missionAssignmentIngest.C6dspct()
        self.c6dspc = missionAssignmentIngest.C6dspc()
        self.c6fplpm = missionAssignmentIngest.C6fplpm()
        self.c6longpm = missionAssignmentIngest.C6longpm()
        self.c7tnor = missionAssignmentIngest.C7tnor()
        self.c7in3p = missionAssignmentIngest.C7in3p()
        self.c7elang2 = missionAssignmentIngest.C7elang2()
        self.createdAt = missionAssignmentIngest.CreatedAt()
        self.createdBy = missionAssignmentIngest.CreatedBy()
        self.source = missionAssignmentIngest.Source()
        self.origin = missionAssignmentIngest.Origin()
        self.dataMode = missionAssignmentIngest.DataMode()
        self.origNetwork = missionAssignmentIngest.OrigNetwork()

    # MissionAssignment_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.trkId is not None:
            trkId = builder.CreateString(self.trkId)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.mad is not None:
            mad = builder.CreateString(self.mad)
        if self.rc is not None:
            rc = builder.CreateString(self.rc)
        if self.tno is not None:
            tno = builder.CreateString(self.tno)
        if self.twenv is not None:
            twenv = builder.CreateString(self.twenv)
        if self.orginx is not None:
            orginx = builder.CreateString(self.orginx)
        if self.env is not None:
            env = builder.CreateString(self.env)
        if self.sz is not None:
            sz = builder.CreateString(self.sz)
        if self.c2spc is not None:
            c2spc = builder.CreateString(self.c2spc)
        if self.c2air is not None:
            c2air = builder.CreateString(self.c2air)
        if self.c2sur is not None:
            c2sur = builder.CreateString(self.c2sur)
        if self.c2lnd is not None:
            c2lnd = builder.CreateString(self.c2lnd)
        if self.c2id is not None:
            c2id = builder.CreateString(self.c2id)
        if self.c2idamplifyingdescriptor is not None:
            c2idamplifyingdescriptor = builder.CreateString(self.c2idamplifyingdescriptor)
        if self.c2specialinterestindicator is not None:
            c2specialinterestindicator = builder.CreateString(self.c2specialinterestindicator)
        if self.c2exerciseindicator is not None:
            c2exerciseindicator = builder.CreateString(self.c2exerciseindicator)
        if self.c2exercisemof is not None:
            c2exercisemof = builder.CreateString(self.c2exercisemof)
        if self.c3ptl is not None:
            c3ptl = builder.CreateString(self.c3ptl)
        if self.c3ptnum is not None:
            c3ptnum = builder.CreateString(self.c3ptnum)
        if self.c4tgt is not None:
            c4tgt = builder.CreateString(self.c4tgt)
        if self.c4def is not None:
            c4def = builder.CreateString(self.c4def)
        if self.c4timediscrete is not None:
            c4timediscrete = builder.CreateString(self.c4timediscrete)
        if self.c6dspct is not None:
            c6dspct = builder.CreateString(self.c6dspct)
        if self.c6dspc is not None:
            c6dspc = builder.CreateString(self.c6dspc)
        if self.c6fplpm is not None:
            c6fplpm = builder.CreateString(self.c6fplpm)
        if self.c6longpm is not None:
            c6longpm = builder.CreateString(self.c6longpm)
        if self.c7tnor is not None:
            c7tnor = builder.CreateString(self.c7tnor)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        MissionAssignment_IngestStart(builder)
        if self.id is not None:
            MissionAssignment_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            MissionAssignment_IngestAddClassificationMarking(builder, classificationMarking)
        if self.trkId is not None:
            MissionAssignment_IngestAddTrkId(builder, trkId)
        if self.ts is not None:
            MissionAssignment_IngestAddTs(builder, ts)
        if self.mad is not None:
            MissionAssignment_IngestAddMad(builder, mad)
        if self.rc is not None:
            MissionAssignment_IngestAddRc(builder, rc)
        MissionAssignment_IngestAddRr(builder, self.rr)
        if self.tno is not None:
            MissionAssignment_IngestAddTno(builder, tno)
        if self.twenv is not None:
            MissionAssignment_IngestAddTwenv(builder, twenv)
        MissionAssignment_IngestAddLat(builder, self.lat)
        MissionAssignment_IngestAddLon(builder, self.lon)
        if self.orginx is not None:
            MissionAssignment_IngestAddOrginx(builder, orginx)
        if self.env is not None:
            MissionAssignment_IngestAddEnv(builder, env)
        if self.sz is not None:
            MissionAssignment_IngestAddSz(builder, sz)
        MissionAssignment_IngestAddIndex(builder, self.index)
        MissionAssignment_IngestAddC1associateddmpis(builder, self.c1associateddmpis)
        if self.c2spc is not None:
            MissionAssignment_IngestAddC2spc(builder, c2spc)
        if self.c2air is not None:
            MissionAssignment_IngestAddC2air(builder, c2air)
        if self.c2sur is not None:
            MissionAssignment_IngestAddC2sur(builder, c2sur)
        if self.c2lnd is not None:
            MissionAssignment_IngestAddC2lnd(builder, c2lnd)
        if self.c2id is not None:
            MissionAssignment_IngestAddC2id(builder, c2id)
        if self.c2idamplifyingdescriptor is not None:
            MissionAssignment_IngestAddC2idamplifyingdescriptor(builder, c2idamplifyingdescriptor)
        MissionAssignment_IngestAddC2alt(builder, self.c2alt)
        MissionAssignment_IngestAddC2crs(builder, self.c2crs)
        MissionAssignment_IngestAddC2spd(builder, self.c2spd)
        if self.c2specialinterestindicator is not None:
            MissionAssignment_IngestAddC2specialinterestindicator(builder, c2specialinterestindicator)
        if self.c2exerciseindicator is not None:
            MissionAssignment_IngestAddC2exerciseindicator(builder, c2exerciseindicator)
        if self.c2exercisemof is not None:
            MissionAssignment_IngestAddC2exercisemof(builder, c2exercisemof)
        MissionAssignment_IngestAddC3lat(builder, self.c3lat)
        MissionAssignment_IngestAddC3lon(builder, self.c3lon)
        MissionAssignment_IngestAddC3elv(builder, self.c3elv)
        if self.c3ptl is not None:
            MissionAssignment_IngestAddC3ptl(builder, c3ptl)
        if self.c3ptnum is not None:
            MissionAssignment_IngestAddC3ptnum(builder, c3ptnum)
        if self.c4tgt is not None:
            MissionAssignment_IngestAddC4tgt(builder, c4tgt)
        if self.c4def is not None:
            MissionAssignment_IngestAddC4def(builder, c4def)
        MissionAssignment_IngestAddC4runin(builder, self.c4runin)
        MissionAssignment_IngestAddC4egress(builder, self.c4egress)
        MissionAssignment_IngestAddC4numberofstores(builder, self.c4numberofstores)
        MissionAssignment_IngestAddC4typeofstores(builder, self.c4typeofstores)
        if self.c4timediscrete is not None:
            MissionAssignment_IngestAddC4timediscrete(builder, c4timediscrete)
        MissionAssignment_IngestAddC4tm(builder, self.c4tm)
        MissionAssignment_IngestAddC4colon(builder, self.c4colon)
        MissionAssignment_IngestAddC4mod(builder, self.c4mod)
        MissionAssignment_IngestAddC5haeadj(builder, self.c5haeadj)
        MissionAssignment_IngestAddC5tw(builder, self.c5tw)
        MissionAssignment_IngestAddC5tgtbrng(builder, self.c5tgtbrng)
        MissionAssignment_IngestAddC5latlsb(builder, self.c5latlsb)
        MissionAssignment_IngestAddC5lonlsb(builder, self.c5lonlsb)
        MissionAssignment_IngestAddC5elevationlsbs(builder, self.c5elevationlsbs)
        MissionAssignment_IngestAddC5colon(builder, self.c5colon)
        MissionAssignment_IngestAddC6laser(builder, self.c6laser)
        MissionAssignment_IngestAddC6intel(builder, self.c6intel)
        MissionAssignment_IngestAddC6tnr3(builder, self.c6tnr3)
        if self.c6dspct is not None:
            MissionAssignment_IngestAddC6dspct(builder, c6dspct)
        if self.c6dspc is not None:
            MissionAssignment_IngestAddC6dspc(builder, c6dspc)
        if self.c6fplpm is not None:
            MissionAssignment_IngestAddC6fplpm(builder, c6fplpm)
        if self.c6longpm is not None:
            MissionAssignment_IngestAddC6longpm(builder, c6longpm)
        if self.c7tnor is not None:
            MissionAssignment_IngestAddC7tnor(builder, c7tnor)
        MissionAssignment_IngestAddC7in3p(builder, self.c7in3p)
        MissionAssignment_IngestAddC7elang2(builder, self.c7elang2)
        if self.createdAt is not None:
            MissionAssignment_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            MissionAssignment_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            MissionAssignment_IngestAddSource(builder, source)
        if self.origin is not None:
            MissionAssignment_IngestAddOrigin(builder, origin)
        MissionAssignment_IngestAddDataMode(builder, self.dataMode)
        if self.origNetwork is not None:
            MissionAssignment_IngestAddOrigNetwork(builder, origNetwork)
        missionAssignmentIngest = MissionAssignment_IngestEnd(builder)
        return missionAssignmentIngest
