# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that specifies the naval flight operations for this ATO.
class NavalFlightOperations_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NavalFlightOperations_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNavalFlightOperations_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NavalFlightOperations_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4E\x41\x56\x41", size_prefixed=size_prefixed)

    # NavalFlightOperations_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
    # Example: /// Example: USS WASP
    # Constraints: Minimum length = 1, Maximum length = 48
    # NavalFlightOperations_Ingest
    def ShipName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time when flight operations begin in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # NavalFlightOperations_Ingest
    def FltOpStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The time when flight operations end in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: 2021-02-25T12:00:00.123Z
    # Constraints: No constraints specified.
    # NavalFlightOperations_Ingest
    def FltOpStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: ['2021-02-25T12:00:00.123Z']
    # Constraints: No constraints specified.
    # NavalFlightOperations_Ingest
    def SchdLaunchRcvyTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # NavalFlightOperations_Ingest
    def SchdLaunchRcvyTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NavalFlightOperations_Ingest
    def SchdLaunchRcvyTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def NavalFlightOperations_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    NavalFlightOperations_IngestStart(builder)

def NavalFlightOperations_IngestAddShipName(builder, shipName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shipName), 0)

def AddShipName(builder, shipName):
    NavalFlightOperations_IngestAddShipName(builder, shipName)

def NavalFlightOperations_IngestAddFltOpStart(builder, fltOpStart):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fltOpStart), 0)

def AddFltOpStart(builder, fltOpStart):
    NavalFlightOperations_IngestAddFltOpStart(builder, fltOpStart)

def NavalFlightOperations_IngestAddFltOpStop(builder, fltOpStop):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fltOpStop), 0)

def AddFltOpStop(builder, fltOpStop):
    NavalFlightOperations_IngestAddFltOpStop(builder, fltOpStop)

def NavalFlightOperations_IngestAddSchdLaunchRcvyTime(builder, schdLaunchRcvyTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(schdLaunchRcvyTime), 0)

def AddSchdLaunchRcvyTime(builder, schdLaunchRcvyTime):
    NavalFlightOperations_IngestAddSchdLaunchRcvyTime(builder, schdLaunchRcvyTime)

def NavalFlightOperations_IngestStartSchdLaunchRcvyTimeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSchdLaunchRcvyTimeVector(builder, numElems):
    return NavalFlightOperations_IngestStartSchdLaunchRcvyTimeVector(builder, numElems)

def NavalFlightOperations_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return NavalFlightOperations_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class NavalFlightOperations_IngestT(object):

    # NavalFlightOperations_IngestT
    def __init__(self):
        self.shipName = None  # type: str
        self.fltOpStart = None  # type: str
        self.fltOpStop = None  # type: str
        self.schdLaunchRcvyTime = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        navalFlightOperationsIngest = NavalFlightOperations_Ingest()
        navalFlightOperationsIngest.Init(buf, pos)
        return cls.InitFromObj(navalFlightOperationsIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, navalFlightOperationsIngest):
        x = NavalFlightOperations_IngestT()
        x._UnPack(navalFlightOperationsIngest)
        return x

    # NavalFlightOperations_IngestT
    def _UnPack(self, navalFlightOperationsIngest):
        if navalFlightOperationsIngest is None:
            return
        self.shipName = navalFlightOperationsIngest.ShipName()
        self.fltOpStart = navalFlightOperationsIngest.FltOpStart()
        self.fltOpStop = navalFlightOperationsIngest.FltOpStop()
        if not navalFlightOperationsIngest.SchdLaunchRcvyTimeIsNone():
            self.schdLaunchRcvyTime = []
            for i in range(navalFlightOperationsIngest.SchdLaunchRcvyTimeLength()):
                self.schdLaunchRcvyTime.append(navalFlightOperationsIngest.SchdLaunchRcvyTime(i))

    # NavalFlightOperations_IngestT
    def Pack(self, builder):
        if self.shipName is not None:
            shipName = builder.CreateString(self.shipName)
        if self.fltOpStart is not None:
            fltOpStart = builder.CreateString(self.fltOpStart)
        if self.fltOpStop is not None:
            fltOpStop = builder.CreateString(self.fltOpStop)
        if self.schdLaunchRcvyTime is not None:
            schdLaunchRcvyTimelist = []
            for i in range(len(self.schdLaunchRcvyTime)):
                schdLaunchRcvyTimelist.append(builder.CreateString(self.schdLaunchRcvyTime[i]))
            NavalFlightOperations_IngestStartSchdLaunchRcvyTimeVector(builder, len(self.schdLaunchRcvyTime))
            for i in reversed(range(len(self.schdLaunchRcvyTime))):
                builder.PrependUOffsetTRelative(schdLaunchRcvyTimelist[i])
            schdLaunchRcvyTime = builder.EndVector()
        NavalFlightOperations_IngestStart(builder)
        if self.shipName is not None:
            NavalFlightOperations_IngestAddShipName(builder, shipName)
        if self.fltOpStart is not None:
            NavalFlightOperations_IngestAddFltOpStart(builder, fltOpStart)
        if self.fltOpStop is not None:
            NavalFlightOperations_IngestAddFltOpStop(builder, fltOpStop)
        if self.schdLaunchRcvyTime is not None:
            NavalFlightOperations_IngestAddSchdLaunchRcvyTime(builder, schdLaunchRcvyTime)
        navalFlightOperationsIngest = NavalFlightOperations_IngestEnd(builder)
        return navalFlightOperationsIngest
