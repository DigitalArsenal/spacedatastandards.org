# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
class Hazard_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Hazard_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHazard_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Hazard_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x41\x5A\x41", size_prefixed=size_prefixed)

    # Hazard_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: HAZARD-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Hazard_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Hazard_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
    # Example: /// Example: Chemical
    # Constraints: Minimum length = 1, Maximum length = 32
    # Hazard_Full
    def DetectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The detect time, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2022-03-07T14:51:39.653Z
    # Constraints: No constraints specified.
    # Hazard_Full
    def DetectTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Flag indicating whether this detection is harmful to humans.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Hazard_Full
    def Harmful(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
    # Example: /// Example: ['Alarm1', 'Alarm2']
    # Constraints: No constraints specified.
    # Hazard_Full
    def Alarms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Hazard_Full
    def AlarmsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Hazard_Full
    def AlarmsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
    # Example: /// Example: [2.7, 2.9]
    # Constraints: No constraints specified.
    # Hazard_Full
    def AlarmValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Hazard_Full
    def AlarmValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Hazard_Full
    def AlarmValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    # Example: /// Example: ['Rad1', 'Rad2']
    # Constraints: No constraints specified.
    # Hazard_Full
    def Readings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Hazard_Full
    def ReadingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Hazard_Full
    def ReadingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    # Example: /// Example: ['Gray', 'Gray']
    # Constraints: No constraints specified.
    # Hazard_Full
    def ReadingUnits(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Hazard_Full
    def ReadingUnitsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Hazard_Full
    def ReadingUnitsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
    # Example: /// Example: [107.2, 124.1]
    # Constraints: No constraints specified.
    # Hazard_Full
    def ReadingValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Hazard_Full
    def ReadingValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Hazard_Full
    def ReadingValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
    # Example: /// Example: 21
    # Constraints: Minimum length = 0, Maximum length = 48
    # Hazard_Full
    def MatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
    # Example: /// Example: Nerve Agent
    # Constraints: Minimum length = 0, Maximum length = 64
    # Hazard_Full
    def MatClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The material common name associated with this detection.
    # Example: /// Example: VX
    # Constraints: Minimum length = 0, Maximum length = 64
    # Hazard_Full
    def MatName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
    # Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
    # Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
    # Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
    # Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
    # Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # Hazard_Full
    def MatCat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
    # Example: /// Example: 64-17-5
    # Constraints: Minimum length = 0, Maximum length = 24
    # Hazard_Full
    def CasRn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
    # Example: /// Example: 27129
    # Constraints: No constraints specified.
    # Hazard_Full
    def Ppm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Measure of density of the material associated with this detection, in kg/m^3.
    # Example: /// Example: 18900.2
    # Constraints: No constraints specified.
    # Hazard_Full
    def Density(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
    # Example: /// Example: 1.31
    # Constraints: No constraints specified.
    # Hazard_Full
    def RadCtrn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
    # Example: /// Example: 2.5
    # Constraints: No constraints specified.
    # Hazard_Full
    def GBar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
    # Example: /// Example: 3.1
    # Constraints: No constraints specified.
    # Hazard_Full
    def HBar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The Atomic Number of the material associated with this detection.
    # Example: /// Example: 92
    # Constraints: No constraints specified.
    # Hazard_Full
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
    # Example: /// Example: 238
    # Constraints: No constraints specified.
    # Hazard_Full
    def A(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The specific bottle ID associated with this detection.
    # Example: /// Example: 6264
    # Constraints: Minimum length = 0, Maximum length = 16
    # Hazard_Full
    def BottleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
    # Example: /// Example: Skin
    # Constraints: Minimum length = 0, Maximum length = 64
    # Hazard_Full
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The known or projected hazard duration, in seconds, associated with this material detection.
    # Example: /// Example: 14400
    # Constraints: No constraints specified.
    # Hazard_Full
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
    # Example: /// Example: 120.1
    # Constraints: No constraints specified.
    # Hazard_Full
    def Activity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The deposition measurement of the contaminant to surface area, in kg/m^2.
    # Example: /// Example: 1.084
    # Constraints: No constraints specified.
    # Hazard_Full
    def Dep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The deposition concentration of the contaminant to surface area, in becquerels/m^2.
    # Example: /// Example: 86.1
    # Constraints: No constraints specified.
    # Hazard_Full
    def DepCtrn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ratio of the chemical substance mass to the total mass of the mixture.
    # Example: /// Example: 0.029
    # Constraints: No constraints specified.
    # Hazard_Full
    def MassFrac(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    # Example: /// Example: 1.12
    # Constraints: No constraints specified.
    # Hazard_Full
    def Dose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The concentration time, in (kg/sec)/m^3, associated with this material detection.
    # Example: /// Example: 1.077
    # Constraints: No constraints specified.
    # Hazard_Full
    def CtrnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
    # Example: /// Example: 1.0000001865
    # Constraints: No constraints specified.
    # Hazard_Full
    def DoseRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ID of the Point of Interest (POI) record related to this hazard record.
    # Example: /// Example: POI-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Hazard_Full
    def IdPoi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the Track record related to this hazard record.
    # Example: /// Example: TRACK-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Hazard_Full
    def IdTrack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Hazard_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Hazard_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # Hazard_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Hazard_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Hazard_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Hazard_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Hazard_FullStart(builder):
    builder.StartObject(40)

def Start(builder):
    Hazard_FullStart(builder)

def Hazard_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Hazard_FullAddId(builder, id)

def Hazard_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Hazard_FullAddClassificationMarking(builder, classificationMarking)

def Hazard_FullAddDetectType(builder, detectType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(detectType), 0)

def AddDetectType(builder, detectType):
    Hazard_FullAddDetectType(builder, detectType)

def Hazard_FullAddDetectTime(builder, detectTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(detectTime), 0)

def AddDetectTime(builder, detectTime):
    Hazard_FullAddDetectTime(builder, detectTime)

def Hazard_FullAddHarmful(builder, harmful):
    builder.PrependBoolSlot(4, harmful, 0)

def AddHarmful(builder, harmful):
    Hazard_FullAddHarmful(builder, harmful)

def Hazard_FullAddAlarms(builder, alarms):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(alarms), 0)

def AddAlarms(builder, alarms):
    Hazard_FullAddAlarms(builder, alarms)

def Hazard_FullStartAlarmsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAlarmsVector(builder, numElems):
    return Hazard_FullStartAlarmsVector(builder, numElems)

def Hazard_FullAddAlarmValues(builder, alarmValues):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(alarmValues), 0)

def AddAlarmValues(builder, alarmValues):
    Hazard_FullAddAlarmValues(builder, alarmValues)

def Hazard_FullStartAlarmValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAlarmValuesVector(builder, numElems):
    return Hazard_FullStartAlarmValuesVector(builder, numElems)

def Hazard_FullAddReadings(builder, readings):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(readings), 0)

def AddReadings(builder, readings):
    Hazard_FullAddReadings(builder, readings)

def Hazard_FullStartReadingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReadingsVector(builder, numElems):
    return Hazard_FullStartReadingsVector(builder, numElems)

def Hazard_FullAddReadingUnits(builder, readingUnits):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(readingUnits), 0)

def AddReadingUnits(builder, readingUnits):
    Hazard_FullAddReadingUnits(builder, readingUnits)

def Hazard_FullStartReadingUnitsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReadingUnitsVector(builder, numElems):
    return Hazard_FullStartReadingUnitsVector(builder, numElems)

def Hazard_FullAddReadingValues(builder, readingValues):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(readingValues), 0)

def AddReadingValues(builder, readingValues):
    Hazard_FullAddReadingValues(builder, readingValues)

def Hazard_FullStartReadingValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReadingValuesVector(builder, numElems):
    return Hazard_FullStartReadingValuesVector(builder, numElems)

def Hazard_FullAddMatType(builder, matType):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(matType), 0)

def AddMatType(builder, matType):
    Hazard_FullAddMatType(builder, matType)

def Hazard_FullAddMatClass(builder, matClass):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(matClass), 0)

def AddMatClass(builder, matClass):
    Hazard_FullAddMatClass(builder, matClass)

def Hazard_FullAddMatName(builder, matName):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(matName), 0)

def AddMatName(builder, matName):
    Hazard_FullAddMatName(builder, matName)

def Hazard_FullAddMatCat(builder, matCat):
    builder.PrependInt32Slot(13, matCat, 0)

def AddMatCat(builder, matCat):
    Hazard_FullAddMatCat(builder, matCat)

def Hazard_FullAddCasRn(builder, casRn):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(casRn), 0)

def AddCasRn(builder, casRn):
    Hazard_FullAddCasRn(builder, casRn)

def Hazard_FullAddPpm(builder, ppm):
    builder.PrependInt32Slot(15, ppm, 0)

def AddPpm(builder, ppm):
    Hazard_FullAddPpm(builder, ppm)

def Hazard_FullAddDensity(builder, density):
    builder.PrependFloat64Slot(16, density, 0.0)

def AddDensity(builder, density):
    Hazard_FullAddDensity(builder, density)

def Hazard_FullAddRadCtrn(builder, radCtrn):
    builder.PrependFloat64Slot(17, radCtrn, 0.0)

def AddRadCtrn(builder, radCtrn):
    Hazard_FullAddRadCtrn(builder, radCtrn)

def Hazard_FullAddGBar(builder, gBar):
    builder.PrependFloat64Slot(18, gBar, 0.0)

def AddGBar(builder, gBar):
    Hazard_FullAddGBar(builder, gBar)

def Hazard_FullAddHBar(builder, hBar):
    builder.PrependFloat64Slot(19, hBar, 0.0)

def AddHBar(builder, hBar):
    Hazard_FullAddHBar(builder, hBar)

def Hazard_FullAddZ(builder, z):
    builder.PrependInt32Slot(20, z, 0)

def AddZ(builder, z):
    Hazard_FullAddZ(builder, z)

def Hazard_FullAddA(builder, a):
    builder.PrependInt32Slot(21, a, 0)

def AddA(builder, a):
    Hazard_FullAddA(builder, a)

def Hazard_FullAddBottleId(builder, bottleId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(bottleId), 0)

def AddBottleId(builder, bottleId):
    Hazard_FullAddBottleId(builder, bottleId)

def Hazard_FullAddChannel(builder, channel):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(channel), 0)

def AddChannel(builder, channel):
    Hazard_FullAddChannel(builder, channel)

def Hazard_FullAddDuration(builder, duration):
    builder.PrependInt32Slot(24, duration, 0)

def AddDuration(builder, duration):
    Hazard_FullAddDuration(builder, duration)

def Hazard_FullAddActivity(builder, activity):
    builder.PrependFloat64Slot(25, activity, 0.0)

def AddActivity(builder, activity):
    Hazard_FullAddActivity(builder, activity)

def Hazard_FullAddDep(builder, dep):
    builder.PrependFloat64Slot(26, dep, 0.0)

def AddDep(builder, dep):
    Hazard_FullAddDep(builder, dep)

def Hazard_FullAddDepCtrn(builder, depCtrn):
    builder.PrependFloat64Slot(27, depCtrn, 0.0)

def AddDepCtrn(builder, depCtrn):
    Hazard_FullAddDepCtrn(builder, depCtrn)

def Hazard_FullAddMassFrac(builder, massFrac):
    builder.PrependFloat64Slot(28, massFrac, 0.0)

def AddMassFrac(builder, massFrac):
    Hazard_FullAddMassFrac(builder, massFrac)

def Hazard_FullAddDose(builder, dose):
    builder.PrependFloat64Slot(29, dose, 0.0)

def AddDose(builder, dose):
    Hazard_FullAddDose(builder, dose)

def Hazard_FullAddCtrnTime(builder, ctrnTime):
    builder.PrependFloat64Slot(30, ctrnTime, 0.0)

def AddCtrnTime(builder, ctrnTime):
    Hazard_FullAddCtrnTime(builder, ctrnTime)

def Hazard_FullAddDoseRate(builder, doseRate):
    builder.PrependFloat64Slot(31, doseRate, 0.0)

def AddDoseRate(builder, doseRate):
    Hazard_FullAddDoseRate(builder, doseRate)

def Hazard_FullAddIdPoi(builder, idPoi):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(idPoi), 0)

def AddIdPoi(builder, idPoi):
    Hazard_FullAddIdPoi(builder, idPoi)

def Hazard_FullAddIdTrack(builder, idTrack):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(idTrack), 0)

def AddIdTrack(builder, idTrack):
    Hazard_FullAddIdTrack(builder, idTrack)

def Hazard_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Hazard_FullAddCreatedAt(builder, createdAt)

def Hazard_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Hazard_FullAddCreatedBy(builder, createdBy)

def Hazard_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Hazard_FullAddSource(builder, source)

def Hazard_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Hazard_FullAddOrigin(builder, origin)

def Hazard_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Hazard_FullAddOrigNetwork(builder, origNetwork)

def Hazard_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(39, dataMode, 0)

def AddDataMode(builder, dataMode):
    Hazard_FullAddDataMode(builder, dataMode)

def Hazard_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return Hazard_FullEnd(builder)

try:
    from typing import List
except:
    pass

class Hazard_FullT(object):

    # Hazard_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.detectType = None  # type: str
        self.detectTime = None  # type: str
        self.harmful = False  # type: bool
        self.alarms = None  # type: List[str]
        self.alarmValues = None  # type: List[str]
        self.readings = None  # type: List[str]
        self.readingUnits = None  # type: List[str]
        self.readingValues = None  # type: List[str]
        self.matType = None  # type: str
        self.matClass = None  # type: str
        self.matName = None  # type: str
        self.matCat = 0  # type: int
        self.casRn = None  # type: str
        self.ppm = 0  # type: int
        self.density = 0.0  # type: float
        self.radCtrn = 0.0  # type: float
        self.gBar = 0.0  # type: float
        self.hBar = 0.0  # type: float
        self.z = 0  # type: int
        self.a = 0  # type: int
        self.bottleId = None  # type: str
        self.channel = None  # type: str
        self.duration = 0  # type: int
        self.activity = 0.0  # type: float
        self.dep = 0.0  # type: float
        self.depCtrn = 0.0  # type: float
        self.massFrac = 0.0  # type: float
        self.dose = 0.0  # type: float
        self.ctrnTime = 0.0  # type: float
        self.doseRate = 0.0  # type: float
        self.idPoi = None  # type: str
        self.idTrack = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        hazardFull = Hazard_Full()
        hazardFull.Init(buf, pos)
        return cls.InitFromObj(hazardFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, hazardFull):
        x = Hazard_FullT()
        x._UnPack(hazardFull)
        return x

    # Hazard_FullT
    def _UnPack(self, hazardFull):
        if hazardFull is None:
            return
        self.id = hazardFull.Id()
        self.classificationMarking = hazardFull.ClassificationMarking()
        self.detectType = hazardFull.DetectType()
        self.detectTime = hazardFull.DetectTime()
        self.harmful = hazardFull.Harmful()
        if not hazardFull.AlarmsIsNone():
            self.alarms = []
            for i in range(hazardFull.AlarmsLength()):
                self.alarms.append(hazardFull.Alarms(i))
        if not hazardFull.AlarmValuesIsNone():
            self.alarmValues = []
            for i in range(hazardFull.AlarmValuesLength()):
                self.alarmValues.append(hazardFull.AlarmValues(i))
        if not hazardFull.ReadingsIsNone():
            self.readings = []
            for i in range(hazardFull.ReadingsLength()):
                self.readings.append(hazardFull.Readings(i))
        if not hazardFull.ReadingUnitsIsNone():
            self.readingUnits = []
            for i in range(hazardFull.ReadingUnitsLength()):
                self.readingUnits.append(hazardFull.ReadingUnits(i))
        if not hazardFull.ReadingValuesIsNone():
            self.readingValues = []
            for i in range(hazardFull.ReadingValuesLength()):
                self.readingValues.append(hazardFull.ReadingValues(i))
        self.matType = hazardFull.MatType()
        self.matClass = hazardFull.MatClass()
        self.matName = hazardFull.MatName()
        self.matCat = hazardFull.MatCat()
        self.casRn = hazardFull.CasRn()
        self.ppm = hazardFull.Ppm()
        self.density = hazardFull.Density()
        self.radCtrn = hazardFull.RadCtrn()
        self.gBar = hazardFull.GBar()
        self.hBar = hazardFull.HBar()
        self.z = hazardFull.Z()
        self.a = hazardFull.A()
        self.bottleId = hazardFull.BottleId()
        self.channel = hazardFull.Channel()
        self.duration = hazardFull.Duration()
        self.activity = hazardFull.Activity()
        self.dep = hazardFull.Dep()
        self.depCtrn = hazardFull.DepCtrn()
        self.massFrac = hazardFull.MassFrac()
        self.dose = hazardFull.Dose()
        self.ctrnTime = hazardFull.CtrnTime()
        self.doseRate = hazardFull.DoseRate()
        self.idPoi = hazardFull.IdPoi()
        self.idTrack = hazardFull.IdTrack()
        self.createdAt = hazardFull.CreatedAt()
        self.createdBy = hazardFull.CreatedBy()
        self.source = hazardFull.Source()
        self.origin = hazardFull.Origin()
        self.origNetwork = hazardFull.OrigNetwork()
        self.dataMode = hazardFull.DataMode()

    # Hazard_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.detectType is not None:
            detectType = builder.CreateString(self.detectType)
        if self.detectTime is not None:
            detectTime = builder.CreateString(self.detectTime)
        if self.alarms is not None:
            alarmslist = []
            for i in range(len(self.alarms)):
                alarmslist.append(builder.CreateString(self.alarms[i]))
            Hazard_FullStartAlarmsVector(builder, len(self.alarms))
            for i in reversed(range(len(self.alarms))):
                builder.PrependUOffsetTRelative(alarmslist[i])
            alarms = builder.EndVector()
        if self.alarmValues is not None:
            alarmValueslist = []
            for i in range(len(self.alarmValues)):
                alarmValueslist.append(builder.CreateString(self.alarmValues[i]))
            Hazard_FullStartAlarmValuesVector(builder, len(self.alarmValues))
            for i in reversed(range(len(self.alarmValues))):
                builder.PrependUOffsetTRelative(alarmValueslist[i])
            alarmValues = builder.EndVector()
        if self.readings is not None:
            readingslist = []
            for i in range(len(self.readings)):
                readingslist.append(builder.CreateString(self.readings[i]))
            Hazard_FullStartReadingsVector(builder, len(self.readings))
            for i in reversed(range(len(self.readings))):
                builder.PrependUOffsetTRelative(readingslist[i])
            readings = builder.EndVector()
        if self.readingUnits is not None:
            readingUnitslist = []
            for i in range(len(self.readingUnits)):
                readingUnitslist.append(builder.CreateString(self.readingUnits[i]))
            Hazard_FullStartReadingUnitsVector(builder, len(self.readingUnits))
            for i in reversed(range(len(self.readingUnits))):
                builder.PrependUOffsetTRelative(readingUnitslist[i])
            readingUnits = builder.EndVector()
        if self.readingValues is not None:
            readingValueslist = []
            for i in range(len(self.readingValues)):
                readingValueslist.append(builder.CreateString(self.readingValues[i]))
            Hazard_FullStartReadingValuesVector(builder, len(self.readingValues))
            for i in reversed(range(len(self.readingValues))):
                builder.PrependUOffsetTRelative(readingValueslist[i])
            readingValues = builder.EndVector()
        if self.matType is not None:
            matType = builder.CreateString(self.matType)
        if self.matClass is not None:
            matClass = builder.CreateString(self.matClass)
        if self.matName is not None:
            matName = builder.CreateString(self.matName)
        if self.casRn is not None:
            casRn = builder.CreateString(self.casRn)
        if self.bottleId is not None:
            bottleId = builder.CreateString(self.bottleId)
        if self.channel is not None:
            channel = builder.CreateString(self.channel)
        if self.idPoi is not None:
            idPoi = builder.CreateString(self.idPoi)
        if self.idTrack is not None:
            idTrack = builder.CreateString(self.idTrack)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Hazard_FullStart(builder)
        if self.id is not None:
            Hazard_FullAddId(builder, id)
        if self.classificationMarking is not None:
            Hazard_FullAddClassificationMarking(builder, classificationMarking)
        if self.detectType is not None:
            Hazard_FullAddDetectType(builder, detectType)
        if self.detectTime is not None:
            Hazard_FullAddDetectTime(builder, detectTime)
        Hazard_FullAddHarmful(builder, self.harmful)
        if self.alarms is not None:
            Hazard_FullAddAlarms(builder, alarms)
        if self.alarmValues is not None:
            Hazard_FullAddAlarmValues(builder, alarmValues)
        if self.readings is not None:
            Hazard_FullAddReadings(builder, readings)
        if self.readingUnits is not None:
            Hazard_FullAddReadingUnits(builder, readingUnits)
        if self.readingValues is not None:
            Hazard_FullAddReadingValues(builder, readingValues)
        if self.matType is not None:
            Hazard_FullAddMatType(builder, matType)
        if self.matClass is not None:
            Hazard_FullAddMatClass(builder, matClass)
        if self.matName is not None:
            Hazard_FullAddMatName(builder, matName)
        Hazard_FullAddMatCat(builder, self.matCat)
        if self.casRn is not None:
            Hazard_FullAddCasRn(builder, casRn)
        Hazard_FullAddPpm(builder, self.ppm)
        Hazard_FullAddDensity(builder, self.density)
        Hazard_FullAddRadCtrn(builder, self.radCtrn)
        Hazard_FullAddGBar(builder, self.gBar)
        Hazard_FullAddHBar(builder, self.hBar)
        Hazard_FullAddZ(builder, self.z)
        Hazard_FullAddA(builder, self.a)
        if self.bottleId is not None:
            Hazard_FullAddBottleId(builder, bottleId)
        if self.channel is not None:
            Hazard_FullAddChannel(builder, channel)
        Hazard_FullAddDuration(builder, self.duration)
        Hazard_FullAddActivity(builder, self.activity)
        Hazard_FullAddDep(builder, self.dep)
        Hazard_FullAddDepCtrn(builder, self.depCtrn)
        Hazard_FullAddMassFrac(builder, self.massFrac)
        Hazard_FullAddDose(builder, self.dose)
        Hazard_FullAddCtrnTime(builder, self.ctrnTime)
        Hazard_FullAddDoseRate(builder, self.doseRate)
        if self.idPoi is not None:
            Hazard_FullAddIdPoi(builder, idPoi)
        if self.idTrack is not None:
            Hazard_FullAddIdTrack(builder, idTrack)
        if self.createdAt is not None:
            Hazard_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Hazard_FullAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Hazard_FullAddSource(builder, source)
        if self.origin is not None:
            Hazard_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Hazard_FullAddOrigNetwork(builder, origNetwork)
        Hazard_FullAddDataMode(builder, self.dataMode)
        hazardFull = Hazard_FullEnd(builder)
        return hazardFull
