# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that specifies the naval flight operations for this ATO.
class IndividualAircraftTasking_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IndividualAircraftTasking_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIndividualAircraftTasking_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IndividualAircraftTasking_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x4E\x44\x49", size_prefixed=size_prefixed)

    # IndividualAircraftTasking_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The number of aircraft participating in this mission.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # IndividualAircraftTasking_Full
    def NumAcft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
    # Example: /// Example: F35A
    # Constraints: Minimum length = 1, Maximum length = 36
    # IndividualAircraftTasking_Full
    def AcftType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The call sign assigned to this mission aircraft.
    # Example: /// Example: EAGLE47
    # Constraints: Minimum length = 0, Maximum length = 24
    # IndividualAircraftTasking_Full
    def CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code that indicates the ordinance mix carried on this mission aircraft.
    # Example: /// Example: 6A2W3
    # Constraints: Minimum length = 0, Maximum length = 48
    # IndividualAircraftTasking_Full
    def PriConfigCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The code for the secondary ordinance mix carried on this mission aircraft.
    # Example: /// Example: 2S2WG
    # Constraints: Minimum length = 0, Maximum length = 48
    # IndividualAircraftTasking_Full
    def SecConfigCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
    # Example: /// Example: EE47
    # Constraints: Minimum length = 0, Maximum length = 8
    # IndividualAircraftTasking_Full
    def Link16CallSign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The TACAN channel assigned to this mission aircraft.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # IndividualAircraftTasking_Full
    def TacanChan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
    # Example: /// Example: 12345
    # Constraints: No constraints specified.
    # IndividualAircraftTasking_Full
    def JuAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # IndividualAircraftTasking_Full
    def JuAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IndividualAircraftTasking_Full
    def JuAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    # Example: /// Example: 111
    # Constraints: Minimum length = 0, Maximum length = 8
    # IndividualAircraftTasking_Full
    def IffSifMode1Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    # Example: /// Example: 20147
    # Constraints: Minimum length = 0, Maximum length = 8
    # IndividualAircraftTasking_Full
    def IffSifMode2Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
    # Example: /// Example: 30147
    # Constraints: Minimum length = 0, Maximum length = 8
    # IndividualAircraftTasking_Full
    def IffSifMode3Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def IndividualAircraftTasking_FullStart(builder):
    builder.StartObject(11)

def Start(builder):
    IndividualAircraftTasking_FullStart(builder)

def IndividualAircraftTasking_FullAddNumAcft(builder, numAcft):
    builder.PrependInt32Slot(0, numAcft, 0)

def AddNumAcft(builder, numAcft):
    IndividualAircraftTasking_FullAddNumAcft(builder, numAcft)

def IndividualAircraftTasking_FullAddAcftType(builder, acftType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(acftType), 0)

def AddAcftType(builder, acftType):
    IndividualAircraftTasking_FullAddAcftType(builder, acftType)

def IndividualAircraftTasking_FullAddCallSign(builder, callSign):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(callSign), 0)

def AddCallSign(builder, callSign):
    IndividualAircraftTasking_FullAddCallSign(builder, callSign)

def IndividualAircraftTasking_FullAddPriConfigCode(builder, priConfigCode):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(priConfigCode), 0)

def AddPriConfigCode(builder, priConfigCode):
    IndividualAircraftTasking_FullAddPriConfigCode(builder, priConfigCode)

def IndividualAircraftTasking_FullAddSecConfigCode(builder, secConfigCode):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(secConfigCode), 0)

def AddSecConfigCode(builder, secConfigCode):
    IndividualAircraftTasking_FullAddSecConfigCode(builder, secConfigCode)

def IndividualAircraftTasking_FullAddLink16CallSign(builder, link16CallSign):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(link16CallSign), 0)

def AddLink16CallSign(builder, link16CallSign):
    IndividualAircraftTasking_FullAddLink16CallSign(builder, link16CallSign)

def IndividualAircraftTasking_FullAddTacanChan(builder, tacanChan):
    builder.PrependInt32Slot(6, tacanChan, 0)

def AddTacanChan(builder, tacanChan):
    IndividualAircraftTasking_FullAddTacanChan(builder, tacanChan)

def IndividualAircraftTasking_FullAddJuAddress(builder, juAddress):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(juAddress), 0)

def AddJuAddress(builder, juAddress):
    IndividualAircraftTasking_FullAddJuAddress(builder, juAddress)

def IndividualAircraftTasking_FullStartJuAddressVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartJuAddressVector(builder, numElems):
    return IndividualAircraftTasking_FullStartJuAddressVector(builder, numElems)

def IndividualAircraftTasking_FullAddIffSifMode1Code(builder, iffSifMode1Code):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(iffSifMode1Code), 0)

def AddIffSifMode1Code(builder, iffSifMode1Code):
    IndividualAircraftTasking_FullAddIffSifMode1Code(builder, iffSifMode1Code)

def IndividualAircraftTasking_FullAddIffSifMode2Code(builder, iffSifMode2Code):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(iffSifMode2Code), 0)

def AddIffSifMode2Code(builder, iffSifMode2Code):
    IndividualAircraftTasking_FullAddIffSifMode2Code(builder, iffSifMode2Code)

def IndividualAircraftTasking_FullAddIffSifMode3Code(builder, iffSifMode3Code):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(iffSifMode3Code), 0)

def AddIffSifMode3Code(builder, iffSifMode3Code):
    IndividualAircraftTasking_FullAddIffSifMode3Code(builder, iffSifMode3Code)

def IndividualAircraftTasking_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return IndividualAircraftTasking_FullEnd(builder)

try:
    from typing import List
except:
    pass

class IndividualAircraftTasking_FullT(object):

    # IndividualAircraftTasking_FullT
    def __init__(self):
        self.numAcft = 0  # type: int
        self.acftType = None  # type: str
        self.callSign = None  # type: str
        self.priConfigCode = None  # type: str
        self.secConfigCode = None  # type: str
        self.link16CallSign = None  # type: str
        self.tacanChan = 0  # type: int
        self.juAddress = None  # type: List[str]
        self.iffSifMode1Code = None  # type: str
        self.iffSifMode2Code = None  # type: str
        self.iffSifMode3Code = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        individualAircraftTaskingFull = IndividualAircraftTasking_Full()
        individualAircraftTaskingFull.Init(buf, pos)
        return cls.InitFromObj(individualAircraftTaskingFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, individualAircraftTaskingFull):
        x = IndividualAircraftTasking_FullT()
        x._UnPack(individualAircraftTaskingFull)
        return x

    # IndividualAircraftTasking_FullT
    def _UnPack(self, individualAircraftTaskingFull):
        if individualAircraftTaskingFull is None:
            return
        self.numAcft = individualAircraftTaskingFull.NumAcft()
        self.acftType = individualAircraftTaskingFull.AcftType()
        self.callSign = individualAircraftTaskingFull.CallSign()
        self.priConfigCode = individualAircraftTaskingFull.PriConfigCode()
        self.secConfigCode = individualAircraftTaskingFull.SecConfigCode()
        self.link16CallSign = individualAircraftTaskingFull.Link16CallSign()
        self.tacanChan = individualAircraftTaskingFull.TacanChan()
        if not individualAircraftTaskingFull.JuAddressIsNone():
            self.juAddress = []
            for i in range(individualAircraftTaskingFull.JuAddressLength()):
                self.juAddress.append(individualAircraftTaskingFull.JuAddress(i))
        self.iffSifMode1Code = individualAircraftTaskingFull.IffSifMode1Code()
        self.iffSifMode2Code = individualAircraftTaskingFull.IffSifMode2Code()
        self.iffSifMode3Code = individualAircraftTaskingFull.IffSifMode3Code()

    # IndividualAircraftTasking_FullT
    def Pack(self, builder):
        if self.acftType is not None:
            acftType = builder.CreateString(self.acftType)
        if self.callSign is not None:
            callSign = builder.CreateString(self.callSign)
        if self.priConfigCode is not None:
            priConfigCode = builder.CreateString(self.priConfigCode)
        if self.secConfigCode is not None:
            secConfigCode = builder.CreateString(self.secConfigCode)
        if self.link16CallSign is not None:
            link16CallSign = builder.CreateString(self.link16CallSign)
        if self.juAddress is not None:
            juAddresslist = []
            for i in range(len(self.juAddress)):
                juAddresslist.append(builder.CreateString(self.juAddress[i]))
            IndividualAircraftTasking_FullStartJuAddressVector(builder, len(self.juAddress))
            for i in reversed(range(len(self.juAddress))):
                builder.PrependUOffsetTRelative(juAddresslist[i])
            juAddress = builder.EndVector()
        if self.iffSifMode1Code is not None:
            iffSifMode1Code = builder.CreateString(self.iffSifMode1Code)
        if self.iffSifMode2Code is not None:
            iffSifMode2Code = builder.CreateString(self.iffSifMode2Code)
        if self.iffSifMode3Code is not None:
            iffSifMode3Code = builder.CreateString(self.iffSifMode3Code)
        IndividualAircraftTasking_FullStart(builder)
        IndividualAircraftTasking_FullAddNumAcft(builder, self.numAcft)
        if self.acftType is not None:
            IndividualAircraftTasking_FullAddAcftType(builder, acftType)
        if self.callSign is not None:
            IndividualAircraftTasking_FullAddCallSign(builder, callSign)
        if self.priConfigCode is not None:
            IndividualAircraftTasking_FullAddPriConfigCode(builder, priConfigCode)
        if self.secConfigCode is not None:
            IndividualAircraftTasking_FullAddSecConfigCode(builder, secConfigCode)
        if self.link16CallSign is not None:
            IndividualAircraftTasking_FullAddLink16CallSign(builder, link16CallSign)
        IndividualAircraftTasking_FullAddTacanChan(builder, self.tacanChan)
        if self.juAddress is not None:
            IndividualAircraftTasking_FullAddJuAddress(builder, juAddress)
        if self.iffSifMode1Code is not None:
            IndividualAircraftTasking_FullAddIffSifMode1Code(builder, iffSifMode1Code)
        if self.iffSifMode2Code is not None:
            IndividualAircraftTasking_FullAddIffSifMode2Code(builder, iffSifMode2Code)
        if self.iffSifMode3Code is not None:
            IndividualAircraftTasking_FullAddIffSifMode3Code(builder, iffSifMode3Code)
        individualAircraftTaskingFull = IndividualAircraftTasking_FullEnd(builder)
        return individualAircraftTaskingFull
