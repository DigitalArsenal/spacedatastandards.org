# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Remarks associated with this LogisticsSupport record.
class LogisticsRemarks_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsRemarks_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsRemarks_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsRemarks_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsRemarks_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # User who published the remark.
    # Example: /// Example: JSMITH
    # Constraints: Minimum length = 0, Maximum length = 32
    # LogisticsRemarks_Ingest
    def Username(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Text of the remark.
    # Example: /// Example: EXAMPLE REMARK
    # Constraints: Minimum length = 0, Maximum length = 4000
    # LogisticsRemarks_Ingest
    def Remark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
    # Example: /// Example: 2023-07-17T10:30:00.123Z
    # Constraints: No constraints specified.
    # LogisticsRemarks_Ingest
    def LastChanged(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogisticsRemarks_IngestStart(builder):
    builder.StartObject(3)

def Start(builder):
    LogisticsRemarks_IngestStart(builder)

def LogisticsRemarks_IngestAddUsername(builder, username):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(username), 0)

def AddUsername(builder, username):
    LogisticsRemarks_IngestAddUsername(builder, username)

def LogisticsRemarks_IngestAddRemark(builder, remark):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(remark), 0)

def AddRemark(builder, remark):
    LogisticsRemarks_IngestAddRemark(builder, remark)

def LogisticsRemarks_IngestAddLastChanged(builder, lastChanged):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lastChanged), 0)

def AddLastChanged(builder, lastChanged):
    LogisticsRemarks_IngestAddLastChanged(builder, lastChanged)

def LogisticsRemarks_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsRemarks_IngestEnd(builder)


class LogisticsRemarks_IngestT(object):

    # LogisticsRemarks_IngestT
    def __init__(self):
        self.username = None  # type: str
        self.remark = None  # type: str
        self.lastChanged = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsRemarksIngest = LogisticsRemarks_Ingest()
        logisticsRemarksIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsRemarksIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsRemarksIngest):
        x = LogisticsRemarks_IngestT()
        x._UnPack(logisticsRemarksIngest)
        return x

    # LogisticsRemarks_IngestT
    def _UnPack(self, logisticsRemarksIngest):
        if logisticsRemarksIngest is None:
            return
        self.username = logisticsRemarksIngest.Username()
        self.remark = logisticsRemarksIngest.Remark()
        self.lastChanged = logisticsRemarksIngest.LastChanged()

    # LogisticsRemarks_IngestT
    def Pack(self, builder):
        if self.username is not None:
            username = builder.CreateString(self.username)
        if self.remark is not None:
            remark = builder.CreateString(self.remark)
        if self.lastChanged is not None:
            lastChanged = builder.CreateString(self.lastChanged)
        LogisticsRemarks_IngestStart(builder)
        if self.username is not None:
            LogisticsRemarks_IngestAddUsername(builder, username)
        if self.remark is not None:
            LogisticsRemarks_IngestAddRemark(builder, remark)
        if self.lastChanged is not None:
            LogisticsRemarks_IngestAddLastChanged(builder, lastChanged)
        logisticsRemarksIngest = LogisticsRemarks_IngestEnd(builder)
        return logisticsRemarksIngest
