# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Describes a satellite antenna beam.
class Beam_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Beam_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBeam_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Beam_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x42\x45\x41\x4D", size_prefixed=size_prefixed)

    # Beam_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: BEAM-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Beam_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Beam_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
    # Example: /// Example: BEAMNAME-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Beam_Abridged
    def BeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional notes/comments on this beam.
    # Example: /// Example: Example notes
    # Constraints: Minimum length = 0, Maximum length = 1024
    # Beam_Abridged
    def Notes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Beam_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Beam_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Beam_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Beam_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Beam_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Beam_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Beam_AbridgedStart(builder):
    builder.StartObject(10)

def Start(builder):
    Beam_AbridgedStart(builder)

def Beam_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Beam_AbridgedAddId(builder, id)

def Beam_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Beam_AbridgedAddClassificationMarking(builder, classificationMarking)

def Beam_AbridgedAddBeamName(builder, beamName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(beamName), 0)

def AddBeamName(builder, beamName):
    Beam_AbridgedAddBeamName(builder, beamName)

def Beam_AbridgedAddNotes(builder, notes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(notes), 0)

def AddNotes(builder, notes):
    Beam_AbridgedAddNotes(builder, notes)

def Beam_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Beam_AbridgedAddCreatedAt(builder, createdAt)

def Beam_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Beam_AbridgedAddCreatedBy(builder, createdBy)

def Beam_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Beam_AbridgedAddSource(builder, source)

def Beam_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Beam_AbridgedAddOrigin(builder, origin)

def Beam_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Beam_AbridgedAddOrigNetwork(builder, origNetwork)

def Beam_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(9, dataMode, 0)

def AddDataMode(builder, dataMode):
    Beam_AbridgedAddDataMode(builder, dataMode)

def Beam_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return Beam_AbridgedEnd(builder)


class Beam_AbridgedT(object):

    # Beam_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.beamName = None  # type: str
        self.notes = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        beamAbridged = Beam_Abridged()
        beamAbridged.Init(buf, pos)
        return cls.InitFromObj(beamAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, beamAbridged):
        x = Beam_AbridgedT()
        x._UnPack(beamAbridged)
        return x

    # Beam_AbridgedT
    def _UnPack(self, beamAbridged):
        if beamAbridged is None:
            return
        self.id = beamAbridged.Id()
        self.classificationMarking = beamAbridged.ClassificationMarking()
        self.beamName = beamAbridged.BeamName()
        self.notes = beamAbridged.Notes()
        self.createdAt = beamAbridged.CreatedAt()
        self.createdBy = beamAbridged.CreatedBy()
        self.source = beamAbridged.Source()
        self.origin = beamAbridged.Origin()
        self.origNetwork = beamAbridged.OrigNetwork()
        self.dataMode = beamAbridged.DataMode()

    # Beam_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.beamName is not None:
            beamName = builder.CreateString(self.beamName)
        if self.notes is not None:
            notes = builder.CreateString(self.notes)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Beam_AbridgedStart(builder)
        if self.id is not None:
            Beam_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            Beam_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.beamName is not None:
            Beam_AbridgedAddBeamName(builder, beamName)
        if self.notes is not None:
            Beam_AbridgedAddNotes(builder, notes)
        if self.createdAt is not None:
            Beam_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Beam_AbridgedAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Beam_AbridgedAddSource(builder, source)
        if self.origin is not None:
            Beam_AbridgedAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Beam_AbridgedAddOrigNetwork(builder, origNetwork)
        Beam_AbridgedAddDataMode(builder, self.dataMode)
        beamAbridged = Beam_AbridgedEnd(builder)
        return beamAbridged
