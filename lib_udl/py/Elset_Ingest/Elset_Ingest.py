# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
class Elset_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Elset_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsElset_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Elset_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x4C\x53\x45", size_prefixed=size_prefixed)

    # Elset_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ELSET-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Elset_Ingest
    def IdElset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Elset_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Satellite/catalog number of the target on-orbit object.
    # Example: /// Example: 12
    # Constraints: No constraints specified.
    # Elset_Ingest
    def SatNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Elset epoch time in ISO 8601 UTC format, with microsecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Epoch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def MeanMotion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Elset_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Uct(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
    # Example: /// Example: 0.333
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Eccentricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Inclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Raan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def ArgOfPerigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
    # Example: /// Example: 179.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def MeanAnomaly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
    # Example: /// Example: 111
    # Constraints: No constraints specified.
    # Elset_Ingest
    def RevNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def BStar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
    # Example: /// Example: 0.0126
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Agom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
    # Example: /// Example: 0.00815
    # Constraints: No constraints specified.
    # Elset_Ingest
    def BallisticCoeff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def MeanMotionDot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def MeanMotionDdot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def SemiMajorAxis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Period of the orbit equal to inverse of mean motion, in minutes.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Period(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Apogee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Perigee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
    # Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
    # Constraints: Minimum length = 0, Maximum length = 36
    # Elset_Ingest
    def IdOrbitDetermination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
    # Example: /// Example: Example line1
    # Constraints: Minimum length = 0, Maximum length = 69
    # Elset_Ingest
    def Line1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
    # Example: /// Example: Example line2
    # Constraints: Minimum length = 0, Maximum length = 69
    # Elset_Ingest
    def Line2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example description
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Elset_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Elset_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
    # Example: /// Example: Example URI
    # Constraints: Minimum length = 0, Maximum length = 256
    # Elset_Ingest
    def RawFileUri(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Elset_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Elset_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
    # Constraints: No constraints specified.
    # Elset_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Elset_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Elset_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # Optional algorithm used to produce this record.
    # Example: /// Example: Example algorithm
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def Algorithm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
    # Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
    # Constraints: No constraints specified.
    # Elset_Ingest
    def SourcedData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Elset_Ingest
    def SourcedDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Elset_Ingest
    def SourcedDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
    # Example: /// Example: ['RADAR', 'RF']
    # Constraints: No constraints specified.
    # Elset_Ingest
    def SourcedDataTypes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: TRANSACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # Elset_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ephemeris type associated with this TLE:
    # 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
    # 1:&nbsp;SGP
    # 2:&nbsp;SGP4
    # 3:&nbsp;SDP4
    # 4:&nbsp;SGP8, also referred to as SGP4-XP
    # 5:&nbsp;SDP8
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # Elset_Ingest
    def EphemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Elset_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Elset_IngestStart(builder):
    builder.StartObject(41)

def Start(builder):
    Elset_IngestStart(builder)

def Elset_IngestAddIdElset(builder, idElset):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(idElset), 0)

def AddIdElset(builder, idElset):
    Elset_IngestAddIdElset(builder, idElset)

def Elset_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Elset_IngestAddClassificationMarking(builder, classificationMarking)

def Elset_IngestAddSatNo(builder, satNo):
    builder.PrependInt32Slot(2, satNo, 0)

def AddSatNo(builder, satNo):
    Elset_IngestAddSatNo(builder, satNo)

def Elset_IngestAddEpoch(builder, epoch):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(epoch), 0)

def AddEpoch(builder, epoch):
    Elset_IngestAddEpoch(builder, epoch)

def Elset_IngestAddMeanMotion(builder, meanMotion):
    builder.PrependFloat64Slot(4, meanMotion, 0.0)

def AddMeanMotion(builder, meanMotion):
    Elset_IngestAddMeanMotion(builder, meanMotion)

def Elset_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Elset_IngestAddIdOnOrbit(builder, idOnOrbit)

def Elset_IngestAddUct(builder, uct):
    builder.PrependBoolSlot(6, uct, 0)

def AddUct(builder, uct):
    Elset_IngestAddUct(builder, uct)

def Elset_IngestAddEccentricity(builder, eccentricity):
    builder.PrependFloat64Slot(7, eccentricity, 0.0)

def AddEccentricity(builder, eccentricity):
    Elset_IngestAddEccentricity(builder, eccentricity)

def Elset_IngestAddInclination(builder, inclination):
    builder.PrependFloat64Slot(8, inclination, 0.0)

def AddInclination(builder, inclination):
    Elset_IngestAddInclination(builder, inclination)

def Elset_IngestAddRaan(builder, raan):
    builder.PrependFloat64Slot(9, raan, 0.0)

def AddRaan(builder, raan):
    Elset_IngestAddRaan(builder, raan)

def Elset_IngestAddArgOfPerigee(builder, argOfPerigee):
    builder.PrependFloat64Slot(10, argOfPerigee, 0.0)

def AddArgOfPerigee(builder, argOfPerigee):
    Elset_IngestAddArgOfPerigee(builder, argOfPerigee)

def Elset_IngestAddMeanAnomaly(builder, meanAnomaly):
    builder.PrependFloat64Slot(11, meanAnomaly, 0.0)

def AddMeanAnomaly(builder, meanAnomaly):
    Elset_IngestAddMeanAnomaly(builder, meanAnomaly)

def Elset_IngestAddRevNo(builder, revNo):
    builder.PrependInt32Slot(12, revNo, 0)

def AddRevNo(builder, revNo):
    Elset_IngestAddRevNo(builder, revNo)

def Elset_IngestAddBStar(builder, bStar):
    builder.PrependFloat64Slot(13, bStar, 0.0)

def AddBStar(builder, bStar):
    Elset_IngestAddBStar(builder, bStar)

def Elset_IngestAddAgom(builder, agom):
    builder.PrependFloat64Slot(14, agom, 0.0)

def AddAgom(builder, agom):
    Elset_IngestAddAgom(builder, agom)

def Elset_IngestAddBallisticCoeff(builder, ballisticCoeff):
    builder.PrependFloat64Slot(15, ballisticCoeff, 0.0)

def AddBallisticCoeff(builder, ballisticCoeff):
    Elset_IngestAddBallisticCoeff(builder, ballisticCoeff)

def Elset_IngestAddMeanMotionDot(builder, meanMotionDot):
    builder.PrependFloat64Slot(16, meanMotionDot, 0.0)

def AddMeanMotionDot(builder, meanMotionDot):
    Elset_IngestAddMeanMotionDot(builder, meanMotionDot)

def Elset_IngestAddMeanMotionDdot(builder, meanMotionDdot):
    builder.PrependFloat64Slot(17, meanMotionDdot, 0.0)

def AddMeanMotionDdot(builder, meanMotionDdot):
    Elset_IngestAddMeanMotionDdot(builder, meanMotionDdot)

def Elset_IngestAddSemiMajorAxis(builder, semiMajorAxis):
    builder.PrependFloat64Slot(18, semiMajorAxis, 0.0)

def AddSemiMajorAxis(builder, semiMajorAxis):
    Elset_IngestAddSemiMajorAxis(builder, semiMajorAxis)

def Elset_IngestAddPeriod(builder, period):
    builder.PrependFloat64Slot(19, period, 0.0)

def AddPeriod(builder, period):
    Elset_IngestAddPeriod(builder, period)

def Elset_IngestAddApogee(builder, apogee):
    builder.PrependFloat64Slot(20, apogee, 0.0)

def AddApogee(builder, apogee):
    Elset_IngestAddApogee(builder, apogee)

def Elset_IngestAddPerigee(builder, perigee):
    builder.PrependFloat64Slot(21, perigee, 0.0)

def AddPerigee(builder, perigee):
    Elset_IngestAddPerigee(builder, perigee)

def Elset_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    Elset_IngestAddOrigObjectId(builder, origObjectId)

def Elset_IngestAddIdOrbitDetermination(builder, idOrbitDetermination):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(idOrbitDetermination), 0)

def AddIdOrbitDetermination(builder, idOrbitDetermination):
    Elset_IngestAddIdOrbitDetermination(builder, idOrbitDetermination)

def Elset_IngestAddLine1(builder, line1):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(line1), 0)

def AddLine1(builder, line1):
    Elset_IngestAddLine1(builder, line1)

def Elset_IngestAddLine2(builder, line2):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(line2), 0)

def AddLine2(builder, line2):
    Elset_IngestAddLine2(builder, line2)

def Elset_IngestAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    Elset_IngestAddDescriptor(builder, descriptor)

def Elset_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Elset_IngestAddCreatedAt(builder, createdAt)

def Elset_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Elset_IngestAddCreatedBy(builder, createdBy)

def Elset_IngestAddRawFileUri(builder, rawFileUri):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(rawFileUri), 0)

def AddRawFileUri(builder, rawFileUri):
    Elset_IngestAddRawFileUri(builder, rawFileUri)

def Elset_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Elset_IngestAddOrigin(builder, origin)

def Elset_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    Elset_IngestAddSourceDl(builder, sourceDl)

def Elset_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Elset_IngestAddSource(builder, source)

def Elset_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(33, dataMode, 0)

def AddDataMode(builder, dataMode):
    Elset_IngestAddDataMode(builder, dataMode)

def Elset_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    Elset_IngestAddTags(builder, tags)

def Elset_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return Elset_IngestStartTagsVector(builder, numElems)

def Elset_IngestAddAlgorithm(builder, algorithm):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(algorithm), 0)

def AddAlgorithm(builder, algorithm):
    Elset_IngestAddAlgorithm(builder, algorithm)

def Elset_IngestAddSourcedData(builder, sourcedData):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(sourcedData), 0)

def AddSourcedData(builder, sourcedData):
    Elset_IngestAddSourcedData(builder, sourcedData)

def Elset_IngestStartSourcedDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSourcedDataVector(builder, numElems):
    return Elset_IngestStartSourcedDataVector(builder, numElems)

def Elset_IngestAddSourcedDataTypes(builder, sourcedDataTypes):
    builder.PrependInt8Slot(37, sourcedDataTypes, 0)

def AddSourcedDataTypes(builder, sourcedDataTypes):
    Elset_IngestAddSourcedDataTypes(builder, sourcedDataTypes)

def Elset_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    Elset_IngestAddTransactionId(builder, transactionId)

def Elset_IngestAddEphemType(builder, ephemType):
    builder.PrependInt32Slot(39, ephemType, 0)

def AddEphemType(builder, ephemType):
    Elset_IngestAddEphemType(builder, ephemType)

def Elset_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Elset_IngestAddOrigNetwork(builder, origNetwork)

def Elset_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Elset_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Elset_IngestT(object):

    # Elset_IngestT
    def __init__(self):
        self.idElset = None  # type: str
        self.classificationMarking = None  # type: str
        self.satNo = 0  # type: int
        self.epoch = None  # type: str
        self.meanMotion = 0.0  # type: float
        self.idOnOrbit = None  # type: str
        self.uct = False  # type: bool
        self.eccentricity = 0.0  # type: float
        self.inclination = 0.0  # type: float
        self.raan = 0.0  # type: float
        self.argOfPerigee = 0.0  # type: float
        self.meanAnomaly = 0.0  # type: float
        self.revNo = 0  # type: int
        self.bStar = 0.0  # type: float
        self.agom = 0.0  # type: float
        self.ballisticCoeff = 0.0  # type: float
        self.meanMotionDot = 0.0  # type: float
        self.meanMotionDdot = 0.0  # type: float
        self.semiMajorAxis = 0.0  # type: float
        self.period = 0.0  # type: float
        self.apogee = 0.0  # type: float
        self.perigee = 0.0  # type: float
        self.origObjectId = None  # type: str
        self.idOrbitDetermination = None  # type: str
        self.line1 = None  # type: str
        self.line2 = None  # type: str
        self.descriptor = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.rawFileUri = None  # type: str
        self.origin = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.tags = None  # type: List[str]
        self.algorithm = None  # type: str
        self.sourcedData = None  # type: List[str]
        self.sourcedDataTypes = 0  # type: int
        self.transactionId = None  # type: str
        self.ephemType = 0  # type: int
        self.origNetwork = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        elsetIngest = Elset_Ingest()
        elsetIngest.Init(buf, pos)
        return cls.InitFromObj(elsetIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, elsetIngest):
        x = Elset_IngestT()
        x._UnPack(elsetIngest)
        return x

    # Elset_IngestT
    def _UnPack(self, elsetIngest):
        if elsetIngest is None:
            return
        self.idElset = elsetIngest.IdElset()
        self.classificationMarking = elsetIngest.ClassificationMarking()
        self.satNo = elsetIngest.SatNo()
        self.epoch = elsetIngest.Epoch()
        self.meanMotion = elsetIngest.MeanMotion()
        self.idOnOrbit = elsetIngest.IdOnOrbit()
        self.uct = elsetIngest.Uct()
        self.eccentricity = elsetIngest.Eccentricity()
        self.inclination = elsetIngest.Inclination()
        self.raan = elsetIngest.Raan()
        self.argOfPerigee = elsetIngest.ArgOfPerigee()
        self.meanAnomaly = elsetIngest.MeanAnomaly()
        self.revNo = elsetIngest.RevNo()
        self.bStar = elsetIngest.BStar()
        self.agom = elsetIngest.Agom()
        self.ballisticCoeff = elsetIngest.BallisticCoeff()
        self.meanMotionDot = elsetIngest.MeanMotionDot()
        self.meanMotionDdot = elsetIngest.MeanMotionDdot()
        self.semiMajorAxis = elsetIngest.SemiMajorAxis()
        self.period = elsetIngest.Period()
        self.apogee = elsetIngest.Apogee()
        self.perigee = elsetIngest.Perigee()
        self.origObjectId = elsetIngest.OrigObjectId()
        self.idOrbitDetermination = elsetIngest.IdOrbitDetermination()
        self.line1 = elsetIngest.Line1()
        self.line2 = elsetIngest.Line2()
        self.descriptor = elsetIngest.Descriptor()
        self.createdAt = elsetIngest.CreatedAt()
        self.createdBy = elsetIngest.CreatedBy()
        self.rawFileUri = elsetIngest.RawFileUri()
        self.origin = elsetIngest.Origin()
        self.sourceDl = elsetIngest.SourceDl()
        self.source = elsetIngest.Source()
        self.dataMode = elsetIngest.DataMode()
        if not elsetIngest.TagsIsNone():
            self.tags = []
            for i in range(elsetIngest.TagsLength()):
                self.tags.append(elsetIngest.Tags(i))
        self.algorithm = elsetIngest.Algorithm()
        if not elsetIngest.SourcedDataIsNone():
            self.sourcedData = []
            for i in range(elsetIngest.SourcedDataLength()):
                self.sourcedData.append(elsetIngest.SourcedData(i))
        self.sourcedDataTypes = elsetIngest.SourcedDataTypes()
        self.transactionId = elsetIngest.TransactionId()
        self.ephemType = elsetIngest.EphemType()
        self.origNetwork = elsetIngest.OrigNetwork()

    # Elset_IngestT
    def Pack(self, builder):
        if self.idElset is not None:
            idElset = builder.CreateString(self.idElset)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.epoch is not None:
            epoch = builder.CreateString(self.epoch)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.idOrbitDetermination is not None:
            idOrbitDetermination = builder.CreateString(self.idOrbitDetermination)
        if self.line1 is not None:
            line1 = builder.CreateString(self.line1)
        if self.line2 is not None:
            line2 = builder.CreateString(self.line2)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.rawFileUri is not None:
            rawFileUri = builder.CreateString(self.rawFileUri)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            Elset_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.algorithm is not None:
            algorithm = builder.CreateString(self.algorithm)
        if self.sourcedData is not None:
            sourcedDatalist = []
            for i in range(len(self.sourcedData)):
                sourcedDatalist.append(builder.CreateString(self.sourcedData[i]))
            Elset_IngestStartSourcedDataVector(builder, len(self.sourcedData))
            for i in reversed(range(len(self.sourcedData))):
                builder.PrependUOffsetTRelative(sourcedDatalist[i])
            sourcedData = builder.EndVector()
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        Elset_IngestStart(builder)
        if self.idElset is not None:
            Elset_IngestAddIdElset(builder, idElset)
        if self.classificationMarking is not None:
            Elset_IngestAddClassificationMarking(builder, classificationMarking)
        Elset_IngestAddSatNo(builder, self.satNo)
        if self.epoch is not None:
            Elset_IngestAddEpoch(builder, epoch)
        Elset_IngestAddMeanMotion(builder, self.meanMotion)
        if self.idOnOrbit is not None:
            Elset_IngestAddIdOnOrbit(builder, idOnOrbit)
        Elset_IngestAddUct(builder, self.uct)
        Elset_IngestAddEccentricity(builder, self.eccentricity)
        Elset_IngestAddInclination(builder, self.inclination)
        Elset_IngestAddRaan(builder, self.raan)
        Elset_IngestAddArgOfPerigee(builder, self.argOfPerigee)
        Elset_IngestAddMeanAnomaly(builder, self.meanAnomaly)
        Elset_IngestAddRevNo(builder, self.revNo)
        Elset_IngestAddBStar(builder, self.bStar)
        Elset_IngestAddAgom(builder, self.agom)
        Elset_IngestAddBallisticCoeff(builder, self.ballisticCoeff)
        Elset_IngestAddMeanMotionDot(builder, self.meanMotionDot)
        Elset_IngestAddMeanMotionDdot(builder, self.meanMotionDdot)
        Elset_IngestAddSemiMajorAxis(builder, self.semiMajorAxis)
        Elset_IngestAddPeriod(builder, self.period)
        Elset_IngestAddApogee(builder, self.apogee)
        Elset_IngestAddPerigee(builder, self.perigee)
        if self.origObjectId is not None:
            Elset_IngestAddOrigObjectId(builder, origObjectId)
        if self.idOrbitDetermination is not None:
            Elset_IngestAddIdOrbitDetermination(builder, idOrbitDetermination)
        if self.line1 is not None:
            Elset_IngestAddLine1(builder, line1)
        if self.line2 is not None:
            Elset_IngestAddLine2(builder, line2)
        if self.descriptor is not None:
            Elset_IngestAddDescriptor(builder, descriptor)
        if self.createdAt is not None:
            Elset_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Elset_IngestAddCreatedBy(builder, createdBy)
        if self.rawFileUri is not None:
            Elset_IngestAddRawFileUri(builder, rawFileUri)
        if self.origin is not None:
            Elset_IngestAddOrigin(builder, origin)
        if self.sourceDl is not None:
            Elset_IngestAddSourceDl(builder, sourceDl)
        if self.source is not None:
            Elset_IngestAddSource(builder, source)
        Elset_IngestAddDataMode(builder, self.dataMode)
        if self.tags is not None:
            Elset_IngestAddTags(builder, tags)
        if self.algorithm is not None:
            Elset_IngestAddAlgorithm(builder, algorithm)
        if self.sourcedData is not None:
            Elset_IngestAddSourcedData(builder, sourcedData)
        Elset_IngestAddSourcedDataTypes(builder, self.sourcedDataTypes)
        if self.transactionId is not None:
            Elset_IngestAddTransactionId(builder, transactionId)
        Elset_IngestAddEphemType(builder, self.ephemType)
        if self.origNetwork is not None:
            Elset_IngestAddOrigNetwork(builder, origNetwork)
        elsetIngest = Elset_IngestEnd(builder)
        return elsetIngest
