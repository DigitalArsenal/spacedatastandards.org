# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Discrepancy information associated with this LogisticsSupport record.
class LogisticsDiscrepancyInfos_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsDiscrepancyInfos_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsDiscrepancyInfos_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsDiscrepancyInfos_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsDiscrepancyInfos_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Job Control Number of the discrepancy.
    # Example: /// Example: 231942400
    # Constraints: Minimum length = 0, Maximum length = 12
    # LogisticsDiscrepancyInfos_Ingest
    def Jcn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The aircraft discrepancy description.
    # Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
    # Constraints: Minimum length = 0, Maximum length = 680
    # LogisticsDiscrepancyInfos_Ingest
    def DiscrepancyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The job start time, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T10:30:00.123Z
    # Constraints: No constraints specified.
    # LogisticsDiscrepancyInfos_Ingest
    def JobStTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2023-07-17T10:30:00.123Z
    # Constraints: No constraints specified.
    # LogisticsDiscrepancyInfos_Ingest
    def ClosureTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogisticsDiscrepancyInfos_IngestStart(builder):
    builder.StartObject(4)

def Start(builder):
    LogisticsDiscrepancyInfos_IngestStart(builder)

def LogisticsDiscrepancyInfos_IngestAddJcn(builder, jcn):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(jcn), 0)

def AddJcn(builder, jcn):
    LogisticsDiscrepancyInfos_IngestAddJcn(builder, jcn)

def LogisticsDiscrepancyInfos_IngestAddDiscrepancyInfo(builder, discrepancyInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(discrepancyInfo), 0)

def AddDiscrepancyInfo(builder, discrepancyInfo):
    LogisticsDiscrepancyInfos_IngestAddDiscrepancyInfo(builder, discrepancyInfo)

def LogisticsDiscrepancyInfos_IngestAddJobStTime(builder, jobStTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(jobStTime), 0)

def AddJobStTime(builder, jobStTime):
    LogisticsDiscrepancyInfos_IngestAddJobStTime(builder, jobStTime)

def LogisticsDiscrepancyInfos_IngestAddClosureTime(builder, closureTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(closureTime), 0)

def AddClosureTime(builder, closureTime):
    LogisticsDiscrepancyInfos_IngestAddClosureTime(builder, closureTime)

def LogisticsDiscrepancyInfos_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsDiscrepancyInfos_IngestEnd(builder)


class LogisticsDiscrepancyInfos_IngestT(object):

    # LogisticsDiscrepancyInfos_IngestT
    def __init__(self):
        self.jcn = None  # type: str
        self.discrepancyInfo = None  # type: str
        self.jobStTime = None  # type: str
        self.closureTime = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsDiscrepancyInfosIngest = LogisticsDiscrepancyInfos_Ingest()
        logisticsDiscrepancyInfosIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsDiscrepancyInfosIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsDiscrepancyInfosIngest):
        x = LogisticsDiscrepancyInfos_IngestT()
        x._UnPack(logisticsDiscrepancyInfosIngest)
        return x

    # LogisticsDiscrepancyInfos_IngestT
    def _UnPack(self, logisticsDiscrepancyInfosIngest):
        if logisticsDiscrepancyInfosIngest is None:
            return
        self.jcn = logisticsDiscrepancyInfosIngest.Jcn()
        self.discrepancyInfo = logisticsDiscrepancyInfosIngest.DiscrepancyInfo()
        self.jobStTime = logisticsDiscrepancyInfosIngest.JobStTime()
        self.closureTime = logisticsDiscrepancyInfosIngest.ClosureTime()

    # LogisticsDiscrepancyInfos_IngestT
    def Pack(self, builder):
        if self.jcn is not None:
            jcn = builder.CreateString(self.jcn)
        if self.discrepancyInfo is not None:
            discrepancyInfo = builder.CreateString(self.discrepancyInfo)
        if self.jobStTime is not None:
            jobStTime = builder.CreateString(self.jobStTime)
        if self.closureTime is not None:
            closureTime = builder.CreateString(self.closureTime)
        LogisticsDiscrepancyInfos_IngestStart(builder)
        if self.jcn is not None:
            LogisticsDiscrepancyInfos_IngestAddJcn(builder, jcn)
        if self.discrepancyInfo is not None:
            LogisticsDiscrepancyInfos_IngestAddDiscrepancyInfo(builder, discrepancyInfo)
        if self.jobStTime is not None:
            LogisticsDiscrepancyInfos_IngestAddJobStTime(builder, jobStTime)
        if self.closureTime is not None:
            LogisticsDiscrepancyInfos_IngestAddClosureTime(builder, closureTime)
        logisticsDiscrepancyInfosIngest = LogisticsDiscrepancyInfos_IngestEnd(builder)
        return logisticsDiscrepancyInfosIngest
