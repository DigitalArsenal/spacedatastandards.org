# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The specialties required to implement this support item.
class LogisticsSpecialties_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LogisticsSpecialties_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLogisticsSpecialties_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LogisticsSpecialties_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x4F\x47\x49", size_prefixed=size_prefixed)

    # LogisticsSpecialties_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
    # Example: /// Example: ELEN
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSpecialties_Ingest
    def Specialty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Skill level of the mission response team member.
    # Example: /// Example: 3
    # Constraints: No constraints specified.
    # LogisticsSpecialties_Ingest
    def SkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The first name of the specialist.
    # Example: /// Example: JOHN
    # Constraints: Minimum length = 0, Maximum length = 20
    # LogisticsSpecialties_Ingest
    def FirstName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The last name of the specialist.
    # Example: /// Example: SMITH
    # Constraints: Minimum length = 0, Maximum length = 30
    # LogisticsSpecialties_Ingest
    def LastName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Military service rank designation.
    # Example: /// Example: MAJ
    # Constraints: Minimum length = 0, Maximum length = 6
    # LogisticsSpecialties_Ingest
    def RankCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The last four digits of the specialist's social security number.
    # Example: /// Example: 9999
    # Constraints: Minimum length = 0, Maximum length = 4
    # LogisticsSpecialties_Ingest
    def Last4Ssn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
    # Example: /// Example: TC
    # Constraints: Minimum length = 0, Maximum length = 2
    # LogisticsSpecialties_Ingest
    def RoleTypeCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LogisticsSpecialties_IngestStart(builder):
    builder.StartObject(7)

def Start(builder):
    LogisticsSpecialties_IngestStart(builder)

def LogisticsSpecialties_IngestAddSpecialty(builder, specialty):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(specialty), 0)

def AddSpecialty(builder, specialty):
    LogisticsSpecialties_IngestAddSpecialty(builder, specialty)

def LogisticsSpecialties_IngestAddSkillLevel(builder, skillLevel):
    builder.PrependInt32Slot(1, skillLevel, 0)

def AddSkillLevel(builder, skillLevel):
    LogisticsSpecialties_IngestAddSkillLevel(builder, skillLevel)

def LogisticsSpecialties_IngestAddFirstName(builder, firstName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(firstName), 0)

def AddFirstName(builder, firstName):
    LogisticsSpecialties_IngestAddFirstName(builder, firstName)

def LogisticsSpecialties_IngestAddLastName(builder, lastName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lastName), 0)

def AddLastName(builder, lastName):
    LogisticsSpecialties_IngestAddLastName(builder, lastName)

def LogisticsSpecialties_IngestAddRankCode(builder, rankCode):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rankCode), 0)

def AddRankCode(builder, rankCode):
    LogisticsSpecialties_IngestAddRankCode(builder, rankCode)

def LogisticsSpecialties_IngestAddLast4Ssn(builder, last4Ssn):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(last4Ssn), 0)

def AddLast4Ssn(builder, last4Ssn):
    LogisticsSpecialties_IngestAddLast4Ssn(builder, last4Ssn)

def LogisticsSpecialties_IngestAddRoleTypeCode(builder, roleTypeCode):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(roleTypeCode), 0)

def AddRoleTypeCode(builder, roleTypeCode):
    LogisticsSpecialties_IngestAddRoleTypeCode(builder, roleTypeCode)

def LogisticsSpecialties_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return LogisticsSpecialties_IngestEnd(builder)


class LogisticsSpecialties_IngestT(object):

    # LogisticsSpecialties_IngestT
    def __init__(self):
        self.specialty = None  # type: str
        self.skillLevel = 0  # type: int
        self.firstName = None  # type: str
        self.lastName = None  # type: str
        self.rankCode = None  # type: str
        self.last4Ssn = None  # type: str
        self.roleTypeCode = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        logisticsSpecialtiesIngest = LogisticsSpecialties_Ingest()
        logisticsSpecialtiesIngest.Init(buf, pos)
        return cls.InitFromObj(logisticsSpecialtiesIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, logisticsSpecialtiesIngest):
        x = LogisticsSpecialties_IngestT()
        x._UnPack(logisticsSpecialtiesIngest)
        return x

    # LogisticsSpecialties_IngestT
    def _UnPack(self, logisticsSpecialtiesIngest):
        if logisticsSpecialtiesIngest is None:
            return
        self.specialty = logisticsSpecialtiesIngest.Specialty()
        self.skillLevel = logisticsSpecialtiesIngest.SkillLevel()
        self.firstName = logisticsSpecialtiesIngest.FirstName()
        self.lastName = logisticsSpecialtiesIngest.LastName()
        self.rankCode = logisticsSpecialtiesIngest.RankCode()
        self.last4Ssn = logisticsSpecialtiesIngest.Last4Ssn()
        self.roleTypeCode = logisticsSpecialtiesIngest.RoleTypeCode()

    # LogisticsSpecialties_IngestT
    def Pack(self, builder):
        if self.specialty is not None:
            specialty = builder.CreateString(self.specialty)
        if self.firstName is not None:
            firstName = builder.CreateString(self.firstName)
        if self.lastName is not None:
            lastName = builder.CreateString(self.lastName)
        if self.rankCode is not None:
            rankCode = builder.CreateString(self.rankCode)
        if self.last4Ssn is not None:
            last4Ssn = builder.CreateString(self.last4Ssn)
        if self.roleTypeCode is not None:
            roleTypeCode = builder.CreateString(self.roleTypeCode)
        LogisticsSpecialties_IngestStart(builder)
        if self.specialty is not None:
            LogisticsSpecialties_IngestAddSpecialty(builder, specialty)
        LogisticsSpecialties_IngestAddSkillLevel(builder, self.skillLevel)
        if self.firstName is not None:
            LogisticsSpecialties_IngestAddFirstName(builder, firstName)
        if self.lastName is not None:
            LogisticsSpecialties_IngestAddLastName(builder, lastName)
        if self.rankCode is not None:
            LogisticsSpecialties_IngestAddRankCode(builder, rankCode)
        if self.last4Ssn is not None:
            LogisticsSpecialties_IngestAddLast4Ssn(builder, last4Ssn)
        if self.roleTypeCode is not None:
            LogisticsSpecialties_IngestAddRoleTypeCode(builder, roleTypeCode)
        logisticsSpecialtiesIngest = LogisticsSpecialties_IngestEnd(builder)
        return logisticsSpecialtiesIngest
