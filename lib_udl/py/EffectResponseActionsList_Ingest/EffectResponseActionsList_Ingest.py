# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// List of actions associated with this effect response.
class EffectResponseActionsList_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EffectResponseActionsList_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEffectResponseActionsList_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def EffectResponseActionsList_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x46\x46\x45", size_prefixed=size_prefixed)

    # EffectResponseActionsList_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # A summary string describing different aspects of the action.
    # Example: /// Example: Example summary
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EffectResponseActionsList_Ingest
    def Summary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of this action.
    # Example: /// Example: ACTION-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseActionsList_Ingest
    def ActionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The desired start time of this task, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActionStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The desired end time of this task, in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActionEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time of the asset TOT (time over target), in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def TotStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The end time of the asset TOT (time over target), in ISO8601 UTC format.
    # Example: /// Example: 2021-01-01T00:00:00.123456Z
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def TotEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
    # Example: /// Example: AIRCRAFT
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseActionsList_Ingest
    def ActionActorSrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
    # Example: /// Example: ACTIONACTORSRC-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseActionsList_Ingest
    def ActionActorSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of munition or sensor used by this asset/actor.
    # Example: /// Example: SENSOR1
    # Constraints: Minimum length = 0, Maximum length = 1024
    # EffectResponseActionsList_Ingest
    def Effector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source type of the targetId identifier (POI, TRACK).
    # Example: /// Example: POI
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseActionsList_Ingest
    def TargetSrcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
    # Example: /// Example: TARGETSRC-ID
    # Constraints: Minimum length = 0, Maximum length = 64
    # EffectResponseActionsList_Ingest
    def TargetSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActorInterceptLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 180.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActorInterceptLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActorInterceptAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def WeaponInterceptLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 180.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def WeaponInterceptLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # The WGS-84 altitude of the weapon destination location, in meters.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def WeaponInterceptAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # List of metrics associated with this action.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # EffectResponseActionsList_Ingest
    def ActionMetrics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # EffectResponseActionsList_Ingest
    def ActionMetricsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EffectResponseActionsList_Ingest
    def ActionMetricsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

def EffectResponseActionsList_IngestStart(builder):
    builder.StartObject(18)

def Start(builder):
    EffectResponseActionsList_IngestStart(builder)

def EffectResponseActionsList_IngestAddSummary(builder, summary):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(summary), 0)

def AddSummary(builder, summary):
    EffectResponseActionsList_IngestAddSummary(builder, summary)

def EffectResponseActionsList_IngestAddActionId(builder, actionId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actionId), 0)

def AddActionId(builder, actionId):
    EffectResponseActionsList_IngestAddActionId(builder, actionId)

def EffectResponseActionsList_IngestAddActionStartTime(builder, actionStartTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actionStartTime), 0)

def AddActionStartTime(builder, actionStartTime):
    EffectResponseActionsList_IngestAddActionStartTime(builder, actionStartTime)

def EffectResponseActionsList_IngestAddActionEndTime(builder, actionEndTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(actionEndTime), 0)

def AddActionEndTime(builder, actionEndTime):
    EffectResponseActionsList_IngestAddActionEndTime(builder, actionEndTime)

def EffectResponseActionsList_IngestAddTotStartTime(builder, totStartTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(totStartTime), 0)

def AddTotStartTime(builder, totStartTime):
    EffectResponseActionsList_IngestAddTotStartTime(builder, totStartTime)

def EffectResponseActionsList_IngestAddTotEndTime(builder, totEndTime):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(totEndTime), 0)

def AddTotEndTime(builder, totEndTime):
    EffectResponseActionsList_IngestAddTotEndTime(builder, totEndTime)

def EffectResponseActionsList_IngestAddActionActorSrcType(builder, actionActorSrcType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actionActorSrcType), 0)

def AddActionActorSrcType(builder, actionActorSrcType):
    EffectResponseActionsList_IngestAddActionActorSrcType(builder, actionActorSrcType)

def EffectResponseActionsList_IngestAddActionActorSrcId(builder, actionActorSrcId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actionActorSrcId), 0)

def AddActionActorSrcId(builder, actionActorSrcId):
    EffectResponseActionsList_IngestAddActionActorSrcId(builder, actionActorSrcId)

def EffectResponseActionsList_IngestAddEffector(builder, effector):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(effector), 0)

def AddEffector(builder, effector):
    EffectResponseActionsList_IngestAddEffector(builder, effector)

def EffectResponseActionsList_IngestAddTargetSrcType(builder, targetSrcType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(targetSrcType), 0)

def AddTargetSrcType(builder, targetSrcType):
    EffectResponseActionsList_IngestAddTargetSrcType(builder, targetSrcType)

def EffectResponseActionsList_IngestAddTargetSrcId(builder, targetSrcId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(targetSrcId), 0)

def AddTargetSrcId(builder, targetSrcId):
    EffectResponseActionsList_IngestAddTargetSrcId(builder, targetSrcId)

def EffectResponseActionsList_IngestAddActorInterceptLat(builder, actorInterceptLat):
    builder.PrependFloat64Slot(11, actorInterceptLat, 0.0)

def AddActorInterceptLat(builder, actorInterceptLat):
    EffectResponseActionsList_IngestAddActorInterceptLat(builder, actorInterceptLat)

def EffectResponseActionsList_IngestAddActorInterceptLon(builder, actorInterceptLon):
    builder.PrependFloat64Slot(12, actorInterceptLon, 0.0)

def AddActorInterceptLon(builder, actorInterceptLon):
    EffectResponseActionsList_IngestAddActorInterceptLon(builder, actorInterceptLon)

def EffectResponseActionsList_IngestAddActorInterceptAlt(builder, actorInterceptAlt):
    builder.PrependFloat64Slot(13, actorInterceptAlt, 0.0)

def AddActorInterceptAlt(builder, actorInterceptAlt):
    EffectResponseActionsList_IngestAddActorInterceptAlt(builder, actorInterceptAlt)

def EffectResponseActionsList_IngestAddWeaponInterceptLat(builder, weaponInterceptLat):
    builder.PrependFloat64Slot(14, weaponInterceptLat, 0.0)

def AddWeaponInterceptLat(builder, weaponInterceptLat):
    EffectResponseActionsList_IngestAddWeaponInterceptLat(builder, weaponInterceptLat)

def EffectResponseActionsList_IngestAddWeaponInterceptLon(builder, weaponInterceptLon):
    builder.PrependFloat64Slot(15, weaponInterceptLon, 0.0)

def AddWeaponInterceptLon(builder, weaponInterceptLon):
    EffectResponseActionsList_IngestAddWeaponInterceptLon(builder, weaponInterceptLon)

def EffectResponseActionsList_IngestAddWeaponInterceptAlt(builder, weaponInterceptAlt):
    builder.PrependFloat64Slot(16, weaponInterceptAlt, 0.0)

def AddWeaponInterceptAlt(builder, weaponInterceptAlt):
    EffectResponseActionsList_IngestAddWeaponInterceptAlt(builder, weaponInterceptAlt)

def EffectResponseActionsList_IngestAddActionMetrics(builder, actionMetrics):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(actionMetrics), 0)

def AddActionMetrics(builder, actionMetrics):
    EffectResponseActionsList_IngestAddActionMetrics(builder, actionMetrics)

def EffectResponseActionsList_IngestStartActionMetricsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActionMetricsVector(builder, numElems):
    return EffectResponseActionsList_IngestStartActionMetricsVector(builder, numElems)

def EffectResponseActionsList_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return EffectResponseActionsList_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class EffectResponseActionsList_IngestT(object):

    # EffectResponseActionsList_IngestT
    def __init__(self):
        self.summary = None  # type: str
        self.actionId = None  # type: str
        self.actionStartTime = None  # type: str
        self.actionEndTime = None  # type: str
        self.totStartTime = None  # type: str
        self.totEndTime = None  # type: str
        self.actionActorSrcType = None  # type: str
        self.actionActorSrcId = None  # type: str
        self.effector = None  # type: str
        self.targetSrcType = None  # type: str
        self.targetSrcId = None  # type: str
        self.actorInterceptLat = 0.0  # type: float
        self.actorInterceptLon = 0.0  # type: float
        self.actorInterceptAlt = 0.0  # type: float
        self.weaponInterceptLat = 0.0  # type: float
        self.weaponInterceptLon = 0.0  # type: float
        self.weaponInterceptAlt = 0.0  # type: float
        self.actionMetrics = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        effectResponseActionsListIngest = EffectResponseActionsList_Ingest()
        effectResponseActionsListIngest.Init(buf, pos)
        return cls.InitFromObj(effectResponseActionsListIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, effectResponseActionsListIngest):
        x = EffectResponseActionsList_IngestT()
        x._UnPack(effectResponseActionsListIngest)
        return x

    # EffectResponseActionsList_IngestT
    def _UnPack(self, effectResponseActionsListIngest):
        if effectResponseActionsListIngest is None:
            return
        self.summary = effectResponseActionsListIngest.Summary()
        self.actionId = effectResponseActionsListIngest.ActionId()
        self.actionStartTime = effectResponseActionsListIngest.ActionStartTime()
        self.actionEndTime = effectResponseActionsListIngest.ActionEndTime()
        self.totStartTime = effectResponseActionsListIngest.TotStartTime()
        self.totEndTime = effectResponseActionsListIngest.TotEndTime()
        self.actionActorSrcType = effectResponseActionsListIngest.ActionActorSrcType()
        self.actionActorSrcId = effectResponseActionsListIngest.ActionActorSrcId()
        self.effector = effectResponseActionsListIngest.Effector()
        self.targetSrcType = effectResponseActionsListIngest.TargetSrcType()
        self.targetSrcId = effectResponseActionsListIngest.TargetSrcId()
        self.actorInterceptLat = effectResponseActionsListIngest.ActorInterceptLat()
        self.actorInterceptLon = effectResponseActionsListIngest.ActorInterceptLon()
        self.actorInterceptAlt = effectResponseActionsListIngest.ActorInterceptAlt()
        self.weaponInterceptLat = effectResponseActionsListIngest.WeaponInterceptLat()
        self.weaponInterceptLon = effectResponseActionsListIngest.WeaponInterceptLon()
        self.weaponInterceptAlt = effectResponseActionsListIngest.WeaponInterceptAlt()
        if not effectResponseActionsListIngest.ActionMetricsIsNone():
            self.actionMetrics = []
            for i in range(effectResponseActionsListIngest.ActionMetricsLength()):
                self.actionMetrics.append(effectResponseActionsListIngest.ActionMetrics(i))

    # EffectResponseActionsList_IngestT
    def Pack(self, builder):
        if self.summary is not None:
            summary = builder.CreateString(self.summary)
        if self.actionId is not None:
            actionId = builder.CreateString(self.actionId)
        if self.actionStartTime is not None:
            actionStartTime = builder.CreateString(self.actionStartTime)
        if self.actionEndTime is not None:
            actionEndTime = builder.CreateString(self.actionEndTime)
        if self.totStartTime is not None:
            totStartTime = builder.CreateString(self.totStartTime)
        if self.totEndTime is not None:
            totEndTime = builder.CreateString(self.totEndTime)
        if self.actionActorSrcType is not None:
            actionActorSrcType = builder.CreateString(self.actionActorSrcType)
        if self.actionActorSrcId is not None:
            actionActorSrcId = builder.CreateString(self.actionActorSrcId)
        if self.effector is not None:
            effector = builder.CreateString(self.effector)
        if self.targetSrcType is not None:
            targetSrcType = builder.CreateString(self.targetSrcType)
        if self.targetSrcId is not None:
            targetSrcId = builder.CreateString(self.targetSrcId)
        if self.actionMetrics is not None:
            actionMetricslist = []
            for i in range(len(self.actionMetrics)):
                actionMetricslist.append(builder.CreateString(self.actionMetrics[i]))
            EffectResponseActionsList_IngestStartActionMetricsVector(builder, len(self.actionMetrics))
            for i in reversed(range(len(self.actionMetrics))):
                builder.PrependUOffsetTRelative(actionMetricslist[i])
            actionMetrics = builder.EndVector()
        EffectResponseActionsList_IngestStart(builder)
        if self.summary is not None:
            EffectResponseActionsList_IngestAddSummary(builder, summary)
        if self.actionId is not None:
            EffectResponseActionsList_IngestAddActionId(builder, actionId)
        if self.actionStartTime is not None:
            EffectResponseActionsList_IngestAddActionStartTime(builder, actionStartTime)
        if self.actionEndTime is not None:
            EffectResponseActionsList_IngestAddActionEndTime(builder, actionEndTime)
        if self.totStartTime is not None:
            EffectResponseActionsList_IngestAddTotStartTime(builder, totStartTime)
        if self.totEndTime is not None:
            EffectResponseActionsList_IngestAddTotEndTime(builder, totEndTime)
        if self.actionActorSrcType is not None:
            EffectResponseActionsList_IngestAddActionActorSrcType(builder, actionActorSrcType)
        if self.actionActorSrcId is not None:
            EffectResponseActionsList_IngestAddActionActorSrcId(builder, actionActorSrcId)
        if self.effector is not None:
            EffectResponseActionsList_IngestAddEffector(builder, effector)
        if self.targetSrcType is not None:
            EffectResponseActionsList_IngestAddTargetSrcType(builder, targetSrcType)
        if self.targetSrcId is not None:
            EffectResponseActionsList_IngestAddTargetSrcId(builder, targetSrcId)
        EffectResponseActionsList_IngestAddActorInterceptLat(builder, self.actorInterceptLat)
        EffectResponseActionsList_IngestAddActorInterceptLon(builder, self.actorInterceptLon)
        EffectResponseActionsList_IngestAddActorInterceptAlt(builder, self.actorInterceptAlt)
        EffectResponseActionsList_IngestAddWeaponInterceptLat(builder, self.weaponInterceptLat)
        EffectResponseActionsList_IngestAddWeaponInterceptLon(builder, self.weaponInterceptLon)
        EffectResponseActionsList_IngestAddWeaponInterceptAlt(builder, self.weaponInterceptAlt)
        if self.actionMetrics is not None:
            EffectResponseActionsList_IngestAddActionMetrics(builder, actionMetrics)
        effectResponseActionsListIngest = EffectResponseActionsList_IngestEnd(builder)
        return effectResponseActionsListIngest
