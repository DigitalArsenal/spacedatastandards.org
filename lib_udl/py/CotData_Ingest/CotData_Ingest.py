# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Schema for the CotData to post.
class CotData_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CotData_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCotData_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CotData_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4F\x54\x44", size_prefixed=size_prefixed)

    # CotData_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
    # Example: /// Example: POI-ID
    # Constraints: No constraints specified.
    # CotData_Ingest
    def SenderUid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # How the event point was generated, in CoT object heirarchy notation (optional, CoT).
    # Example: /// Example: h-e
    # Constraints: No constraints specified.
    # CotData_Ingest
    def How(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Ce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Height above lat/lon point, in meters (1-sigma, if representing linear error).
    # Example: /// Example: 10.23
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Le(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Stale timestamp (optional), in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Stale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time of event validity (optional), in ISO8601 UTC format.
    # Example: /// Example: 2020-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Event type, in CoT object heirarchy notation (optional, CoT).
    # Example: /// Example: a-h-G
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Point height above ellipsoid (WGS-84), in meters.
    # Example: /// Example: 5.23
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # CotData_Ingest
    def CotPositionData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # No description provided.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # CotData_Ingest
    def CotChatData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional list of call signs to send message to directly.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # CotData_Ingest
    def CallSigns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CotData_Ingest
    def CallSignsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CotData_Ingest
    def CallSignsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # Optional list of TAK user ids to send message to directly.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Uids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CotData_Ingest
    def UidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CotData_Ingest
    def UidsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # CotData_Ingest
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # CotData_Ingest
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CotData_Ingest
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def CotData_IngestStart(builder):
    builder.StartObject(15)

def Start(builder):
    CotData_IngestStart(builder)

def CotData_IngestAddSenderUid(builder, senderUid):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(senderUid), 0)

def AddSenderUid(builder, senderUid):
    CotData_IngestAddSenderUid(builder, senderUid)

def CotData_IngestAddHow(builder, how):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(how), 0)

def AddHow(builder, how):
    CotData_IngestAddHow(builder, how)

def CotData_IngestAddCe(builder, ce):
    builder.PrependFloat64Slot(2, ce, 0.0)

def AddCe(builder, ce):
    CotData_IngestAddCe(builder, ce)

def CotData_IngestAddLe(builder, le):
    builder.PrependFloat64Slot(3, le, 0.0)

def AddLe(builder, le):
    CotData_IngestAddLe(builder, le)

def CotData_IngestAddStale(builder, stale):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stale), 0)

def AddStale(builder, stale):
    CotData_IngestAddStale(builder, stale)

def CotData_IngestAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    CotData_IngestAddStart(builder, start)

def CotData_IngestAddLat(builder, lat):
    builder.PrependFloat64Slot(6, lat, 0.0)

def AddLat(builder, lat):
    CotData_IngestAddLat(builder, lat)

def CotData_IngestAddLon(builder, lon):
    builder.PrependFloat64Slot(7, lon, 0.0)

def AddLon(builder, lon):
    CotData_IngestAddLon(builder, lon)

def CotData_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    CotData_IngestAddType(builder, type)

def CotData_IngestAddAlt(builder, alt):
    builder.PrependFloat64Slot(9, alt, 0.0)

def AddAlt(builder, alt):
    CotData_IngestAddAlt(builder, alt)

def CotData_IngestAddCotPositionData(builder, cotPositionData):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(cotPositionData), 0)

def AddCotPositionData(builder, cotPositionData):
    CotData_IngestAddCotPositionData(builder, cotPositionData)

def CotData_IngestAddCotChatData(builder, cotChatData):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(cotChatData), 0)

def AddCotChatData(builder, cotChatData):
    CotData_IngestAddCotChatData(builder, cotChatData)

def CotData_IngestAddCallSigns(builder, callSigns):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(callSigns), 0)

def AddCallSigns(builder, callSigns):
    CotData_IngestAddCallSigns(builder, callSigns)

def CotData_IngestStartCallSignsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCallSignsVector(builder, numElems):
    return CotData_IngestStartCallSignsVector(builder, numElems)

def CotData_IngestAddUids(builder, uids):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(uids), 0)

def AddUids(builder, uids):
    CotData_IngestAddUids(builder, uids)

def CotData_IngestStartUidsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUidsVector(builder, numElems):
    return CotData_IngestStartUidsVector(builder, numElems)

def CotData_IngestAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def AddGroups(builder, groups):
    CotData_IngestAddGroups(builder, groups)

def CotData_IngestStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGroupsVector(builder, numElems):
    return CotData_IngestStartGroupsVector(builder, numElems)

def CotData_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return CotData_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class CotData_IngestT(object):

    # CotData_IngestT
    def __init__(self):
        self.senderUid = None  # type: str
        self.how = None  # type: str
        self.ce = 0.0  # type: float
        self.le = 0.0  # type: float
        self.stale = None  # type: str
        self.start = None  # type: str
        self.lat = 0.0  # type: float
        self.lon = 0.0  # type: float
        self.type = None  # type: str
        self.alt = 0.0  # type: float
        self.cotPositionData = None  # type: str
        self.cotChatData = None  # type: str
        self.callSigns = None  # type: List[str]
        self.uids = None  # type: List[str]
        self.groups = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        cotDataIngest = CotData_Ingest()
        cotDataIngest.Init(buf, pos)
        return cls.InitFromObj(cotDataIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, cotDataIngest):
        x = CotData_IngestT()
        x._UnPack(cotDataIngest)
        return x

    # CotData_IngestT
    def _UnPack(self, cotDataIngest):
        if cotDataIngest is None:
            return
        self.senderUid = cotDataIngest.SenderUid()
        self.how = cotDataIngest.How()
        self.ce = cotDataIngest.Ce()
        self.le = cotDataIngest.Le()
        self.stale = cotDataIngest.Stale()
        self.start = cotDataIngest.Start()
        self.lat = cotDataIngest.Lat()
        self.lon = cotDataIngest.Lon()
        self.type = cotDataIngest.Type()
        self.alt = cotDataIngest.Alt()
        self.cotPositionData = cotDataIngest.CotPositionData()
        self.cotChatData = cotDataIngest.CotChatData()
        if not cotDataIngest.CallSignsIsNone():
            self.callSigns = []
            for i in range(cotDataIngest.CallSignsLength()):
                self.callSigns.append(cotDataIngest.CallSigns(i))
        if not cotDataIngest.UidsIsNone():
            self.uids = []
            for i in range(cotDataIngest.UidsLength()):
                self.uids.append(cotDataIngest.Uids(i))
        if not cotDataIngest.GroupsIsNone():
            self.groups = []
            for i in range(cotDataIngest.GroupsLength()):
                self.groups.append(cotDataIngest.Groups(i))

    # CotData_IngestT
    def Pack(self, builder):
        if self.senderUid is not None:
            senderUid = builder.CreateString(self.senderUid)
        if self.how is not None:
            how = builder.CreateString(self.how)
        if self.stale is not None:
            stale = builder.CreateString(self.stale)
        if self.start is not None:
            start = builder.CreateString(self.start)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.cotPositionData is not None:
            cotPositionData = builder.CreateString(self.cotPositionData)
        if self.cotChatData is not None:
            cotChatData = builder.CreateString(self.cotChatData)
        if self.callSigns is not None:
            callSignslist = []
            for i in range(len(self.callSigns)):
                callSignslist.append(builder.CreateString(self.callSigns[i]))
            CotData_IngestStartCallSignsVector(builder, len(self.callSigns))
            for i in reversed(range(len(self.callSigns))):
                builder.PrependUOffsetTRelative(callSignslist[i])
            callSigns = builder.EndVector()
        if self.uids is not None:
            uidslist = []
            for i in range(len(self.uids)):
                uidslist.append(builder.CreateString(self.uids[i]))
            CotData_IngestStartUidsVector(builder, len(self.uids))
            for i in reversed(range(len(self.uids))):
                builder.PrependUOffsetTRelative(uidslist[i])
            uids = builder.EndVector()
        if self.groups is not None:
            groupslist = []
            for i in range(len(self.groups)):
                groupslist.append(builder.CreateString(self.groups[i]))
            CotData_IngestStartGroupsVector(builder, len(self.groups))
            for i in reversed(range(len(self.groups))):
                builder.PrependUOffsetTRelative(groupslist[i])
            groups = builder.EndVector()
        CotData_IngestStart(builder)
        if self.senderUid is not None:
            CotData_IngestAddSenderUid(builder, senderUid)
        if self.how is not None:
            CotData_IngestAddHow(builder, how)
        CotData_IngestAddCe(builder, self.ce)
        CotData_IngestAddLe(builder, self.le)
        if self.stale is not None:
            CotData_IngestAddStale(builder, stale)
        if self.start is not None:
            CotData_IngestAddStart(builder, start)
        CotData_IngestAddLat(builder, self.lat)
        CotData_IngestAddLon(builder, self.lon)
        if self.type is not None:
            CotData_IngestAddType(builder, type)
        CotData_IngestAddAlt(builder, self.alt)
        if self.cotPositionData is not None:
            CotData_IngestAddCotPositionData(builder, cotPositionData)
        if self.cotChatData is not None:
            CotData_IngestAddCotChatData(builder, cotChatData)
        if self.callSigns is not None:
            CotData_IngestAddCallSigns(builder, callSigns)
        if self.uids is not None:
            CotData_IngestAddUids(builder, uids)
        if self.groups is not None:
            CotData_IngestAddGroups(builder, groups)
        cotDataIngest = CotData_IngestEnd(builder)
        return cotDataIngest
