# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Properties and characteristics of a remark that is associated with an aircraft status.
class AircraftStatusRemark_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AircraftStatusRemark_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAircraftStatusRemark_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AircraftStatusRemark_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x43", size_prefixed=size_prefixed)

    # AircraftStatusRemark_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system if not provided on create operations.
    # Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftStatusRemark_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AircraftStatusRemark_Full
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The ID of the Aircraft Status to which this remark applies.
    # Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
    # Constraints: Minimum length = 1, Maximum length = 36
    # AircraftStatusRemark_Full
    def IdAircraftStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the Aircraft Status Remark record from the originating system.
    # Example: /// Example: GDSSBL022307131714250077
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatusRemark_Full
    def AltRmkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name of the remark.
    # Example: /// Example: DISCREPANCY - 202297501
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatusRemark_Full
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The text of the remark.
    # Example: /// Example: Remark text
    # Constraints: Minimum length = 1, Maximum length = 1024
    # AircraftStatusRemark_Full
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T15:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatusRemark_Full
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The name or ID of the external user that updated this remark in the originating system.
    # Example: /// Example: JOHN SMITH
    # Constraints: Minimum length = 0, Maximum length = 36
    # AircraftStatusRemark_Full
    def LastUpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
    # Example: /// Example: 2024-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatusRemark_Full
    def LastUpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2022-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatusRemark_Full
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftStatusRemark_Full
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was updated in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AircraftStatusRemark_Full
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who updated the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatusRemark_Full
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatusRemark_Full
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # AircraftStatusRemark_Full
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AircraftStatusRemark_Full
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: OPS1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftStatusRemark_Full
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AircraftStatusRemark_Full
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AircraftStatusRemark_FullStart(builder):
    builder.StartObject(18)

def Start(builder):
    AircraftStatusRemark_FullStart(builder)

def AircraftStatusRemark_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AircraftStatusRemark_FullAddId(builder, id)

def AircraftStatusRemark_FullAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AircraftStatusRemark_FullAddClassificationMarking(builder, classificationMarking)

def AircraftStatusRemark_FullAddIdAircraftStatus(builder, idAircraftStatus):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(idAircraftStatus), 0)

def AddIdAircraftStatus(builder, idAircraftStatus):
    AircraftStatusRemark_FullAddIdAircraftStatus(builder, idAircraftStatus)

def AircraftStatusRemark_FullAddAltRmkId(builder, altRmkId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(altRmkId), 0)

def AddAltRmkId(builder, altRmkId):
    AircraftStatusRemark_FullAddAltRmkId(builder, altRmkId)

def AircraftStatusRemark_FullAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    AircraftStatusRemark_FullAddName(builder, name)

def AircraftStatusRemark_FullAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    AircraftStatusRemark_FullAddText(builder, text)

def AircraftStatusRemark_FullAddTimestamp(builder, timestamp):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)

def AddTimestamp(builder, timestamp):
    AircraftStatusRemark_FullAddTimestamp(builder, timestamp)

def AircraftStatusRemark_FullAddLastUpdatedBy(builder, lastUpdatedBy):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lastUpdatedBy), 0)

def AddLastUpdatedBy(builder, lastUpdatedBy):
    AircraftStatusRemark_FullAddLastUpdatedBy(builder, lastUpdatedBy)

def AircraftStatusRemark_FullAddLastUpdatedAt(builder, lastUpdatedAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(lastUpdatedAt), 0)

def AddLastUpdatedAt(builder, lastUpdatedAt):
    AircraftStatusRemark_FullAddLastUpdatedAt(builder, lastUpdatedAt)

def AircraftStatusRemark_FullAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AircraftStatusRemark_FullAddCreatedAt(builder, createdAt)

def AircraftStatusRemark_FullAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AircraftStatusRemark_FullAddCreatedBy(builder, createdBy)

def AircraftStatusRemark_FullAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    AircraftStatusRemark_FullAddUpdatedAt(builder, updatedAt)

def AircraftStatusRemark_FullAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    AircraftStatusRemark_FullAddUpdatedBy(builder, updatedBy)

def AircraftStatusRemark_FullAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AircraftStatusRemark_FullAddSourceDl(builder, sourceDl)

def AircraftStatusRemark_FullAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AircraftStatusRemark_FullAddSource(builder, source)

def AircraftStatusRemark_FullAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AircraftStatusRemark_FullAddOrigin(builder, origin)

def AircraftStatusRemark_FullAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AircraftStatusRemark_FullAddOrigNetwork(builder, origNetwork)

def AircraftStatusRemark_FullAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    AircraftStatusRemark_FullAddDataMode(builder, dataMode)

def AircraftStatusRemark_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AircraftStatusRemark_FullEnd(builder)


class AircraftStatusRemark_FullT(object):

    # AircraftStatusRemark_FullT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.idAircraftStatus = None  # type: str
        self.altRmkId = None  # type: str
        self.name = None  # type: str
        self.text = None  # type: str
        self.timestamp = None  # type: str
        self.lastUpdatedBy = None  # type: str
        self.lastUpdatedAt = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str
        self.sourceDl = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        aircraftStatusRemarkFull = AircraftStatusRemark_Full()
        aircraftStatusRemarkFull.Init(buf, pos)
        return cls.InitFromObj(aircraftStatusRemarkFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, aircraftStatusRemarkFull):
        x = AircraftStatusRemark_FullT()
        x._UnPack(aircraftStatusRemarkFull)
        return x

    # AircraftStatusRemark_FullT
    def _UnPack(self, aircraftStatusRemarkFull):
        if aircraftStatusRemarkFull is None:
            return
        self.id = aircraftStatusRemarkFull.Id()
        self.classificationMarking = aircraftStatusRemarkFull.ClassificationMarking()
        self.idAircraftStatus = aircraftStatusRemarkFull.IdAircraftStatus()
        self.altRmkId = aircraftStatusRemarkFull.AltRmkId()
        self.name = aircraftStatusRemarkFull.Name()
        self.text = aircraftStatusRemarkFull.Text()
        self.timestamp = aircraftStatusRemarkFull.Timestamp()
        self.lastUpdatedBy = aircraftStatusRemarkFull.LastUpdatedBy()
        self.lastUpdatedAt = aircraftStatusRemarkFull.LastUpdatedAt()
        self.createdAt = aircraftStatusRemarkFull.CreatedAt()
        self.createdBy = aircraftStatusRemarkFull.CreatedBy()
        self.updatedAt = aircraftStatusRemarkFull.UpdatedAt()
        self.updatedBy = aircraftStatusRemarkFull.UpdatedBy()
        self.sourceDl = aircraftStatusRemarkFull.SourceDl()
        self.source = aircraftStatusRemarkFull.Source()
        self.origin = aircraftStatusRemarkFull.Origin()
        self.origNetwork = aircraftStatusRemarkFull.OrigNetwork()
        self.dataMode = aircraftStatusRemarkFull.DataMode()

    # AircraftStatusRemark_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.idAircraftStatus is not None:
            idAircraftStatus = builder.CreateString(self.idAircraftStatus)
        if self.altRmkId is not None:
            altRmkId = builder.CreateString(self.altRmkId)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.timestamp is not None:
            timestamp = builder.CreateString(self.timestamp)
        if self.lastUpdatedBy is not None:
            lastUpdatedBy = builder.CreateString(self.lastUpdatedBy)
        if self.lastUpdatedAt is not None:
            lastUpdatedAt = builder.CreateString(self.lastUpdatedAt)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        AircraftStatusRemark_FullStart(builder)
        if self.id is not None:
            AircraftStatusRemark_FullAddId(builder, id)
        if self.classificationMarking is not None:
            AircraftStatusRemark_FullAddClassificationMarking(builder, classificationMarking)
        if self.idAircraftStatus is not None:
            AircraftStatusRemark_FullAddIdAircraftStatus(builder, idAircraftStatus)
        if self.altRmkId is not None:
            AircraftStatusRemark_FullAddAltRmkId(builder, altRmkId)
        if self.name is not None:
            AircraftStatusRemark_FullAddName(builder, name)
        if self.text is not None:
            AircraftStatusRemark_FullAddText(builder, text)
        if self.timestamp is not None:
            AircraftStatusRemark_FullAddTimestamp(builder, timestamp)
        if self.lastUpdatedBy is not None:
            AircraftStatusRemark_FullAddLastUpdatedBy(builder, lastUpdatedBy)
        if self.lastUpdatedAt is not None:
            AircraftStatusRemark_FullAddLastUpdatedAt(builder, lastUpdatedAt)
        if self.createdAt is not None:
            AircraftStatusRemark_FullAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AircraftStatusRemark_FullAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            AircraftStatusRemark_FullAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            AircraftStatusRemark_FullAddUpdatedBy(builder, updatedBy)
        if self.sourceDl is not None:
            AircraftStatusRemark_FullAddSourceDl(builder, sourceDl)
        if self.source is not None:
            AircraftStatusRemark_FullAddSource(builder, source)
        if self.origin is not None:
            AircraftStatusRemark_FullAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AircraftStatusRemark_FullAddOrigNetwork(builder, origNetwork)
        AircraftStatusRemark_FullAddDataMode(builder, self.dataMode)
        aircraftStatusRemarkFull = AircraftStatusRemark_FullEnd(builder)
        return aircraftStatusRemarkFull
