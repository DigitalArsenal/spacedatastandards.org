# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
class AnalyticImagery_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AnalyticImagery_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAnalyticImagery_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AnalyticImagery_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x4E\x41\x4C", size_prefixed=size_prefixed)

    # AnalyticImagery_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: ANALYTIC-IMAGERY-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # AnalyticImagery_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # AnalyticImagery_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
    # Example: /// Example: CONTOUR
    # Constraints: Minimum length = 1, Maximum length = 36
    # AnalyticImagery_Ingest
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The message time of this image record, in ISO8601 UTC format with millisecond precision.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def MsgTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The type of image associated with this record (GIF, JPG, PNG, TIF).
    # Example: /// Example: JPG
    # Constraints: Minimum length = 1, Maximum length = 16
    # AnalyticImagery_Ingest
    def ImageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The image file name.
    # Example: /// Example: IMAGE-NAME
    # Constraints: Minimum length = 1, Maximum length = 128
    # AnalyticImagery_Ingest
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
    # Example: /// Example: 7654321
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Filesize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # The image width (horizontal), in pixels.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def ImgWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The image height (vertical), in pixels.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def ImgHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
    # Example: /// Example: pixels
    # Constraints: Minimum length = 0, Maximum length = 36
    # AnalyticImagery_Ingest
    def XUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
    # Example: /// Example: pixels
    # Constraints: Minimum length = 0, Maximum length = 36
    # AnalyticImagery_Ingest
    def YUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
    # Example: /// Example: pixels
    # Constraints: Minimum length = 0, Maximum length = 36
    # AnalyticImagery_Ingest
    def ZUnits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User-defined set ID of a sequence of images.  Used to associate related analytic image records.
    # Example: /// Example: IMAGE-IDS
    # Constraints: Minimum length = 0, Maximum length = 36
    # AnalyticImagery_Ingest
    def ImageSetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The number of images in an image set.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def ImageSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
    # Example: /// Example: 123
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def SequenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Description of the image content and utility.
    # Example: /// Example: Image description
    # Constraints: Minimum length = 1, Maximum length = 512
    # AnalyticImagery_Ingest
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def DataStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def DataStop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
    # Example: /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def AnnLims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def AnnLimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def AnnLimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
    # Example: /// Example: ['rec1', 'rec2']
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def AnnText(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def AnnTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def AnnTextIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Array of searchable keywords for this analytic imagery record.
    # Example: /// Example: ['Key1', 'Key2']
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Keywords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def KeywordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def KeywordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Area(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
    # Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Atext(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
    # Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Agjson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of region as projected on the ground.
    # Example: /// Example: POLYGON
    # Constraints: Minimum length = 0, Maximum length = 128
    # AnalyticImagery_Ingest
    def Atype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Number of dimensions of the geometry depicted by region.
    # Example: /// Example: 2
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Andims(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Geographical spatial_ref_sys for region.
    # Example: /// Example: 4326
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Asrid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
    # Example: /// Example: [12004, 12005]
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def SatId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def SatIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def SatIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
    # Example: /// Example: [0.98, 0.22]
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def SatIdConf(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def SatIdConfLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def SatIdConfIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
    # Example: /// Example: ['MTI', 'POI']
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def SrcTyps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def SrcTypsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def SrcTypsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
    # Example: /// Example: ['DOA_ID', 'DWELL_ID']
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def SrcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def SrcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def SrcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
    # Example: /// Example: ['TAG1', 'TAG2']
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AnalyticImagery_Ingest
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AnalyticImagery_Ingest
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
    # Example: /// Example: 123
    # Constraints: Minimum length = 0, Maximum length = 256
    # AnalyticImagery_Ingest
    def ChecksumValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier to track a commercial or marketplace transaction executed to produce this data.
    # Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
    # Constraints: Minimum length = 0, Maximum length = 64
    # AnalyticImagery_Ingest
    def TransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # AnalyticImagery_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # AnalyticImagery_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 36
    # AnalyticImagery_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: ORIGIN
    # Constraints: Minimum length = 0, Maximum length = 64
    # AnalyticImagery_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: TST1
    # Constraints: Minimum length = 1, Maximum length = 32
    # AnalyticImagery_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
    # Example: /// Example: AXE
    # Constraints: Minimum length = 0, Maximum length = 64
    # AnalyticImagery_Ingest
    def SourceDl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # AnalyticImagery_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def AnalyticImagery_IngestStart(builder):
    builder.StartObject(41)

def Start(builder):
    AnalyticImagery_IngestStart(builder)

def AnalyticImagery_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AnalyticImagery_IngestAddId(builder, id)

def AnalyticImagery_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    AnalyticImagery_IngestAddClassificationMarking(builder, classificationMarking)

def AnalyticImagery_IngestAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    AnalyticImagery_IngestAddContent(builder, content)

def AnalyticImagery_IngestAddMsgTime(builder, msgTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(msgTime), 0)

def AddMsgTime(builder, msgTime):
    AnalyticImagery_IngestAddMsgTime(builder, msgTime)

def AnalyticImagery_IngestAddImageType(builder, imageType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(imageType), 0)

def AddImageType(builder, imageType):
    AnalyticImagery_IngestAddImageType(builder, imageType)

def AnalyticImagery_IngestAddFilename(builder, filename):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)

def AddFilename(builder, filename):
    AnalyticImagery_IngestAddFilename(builder, filename)

def AnalyticImagery_IngestAddFilesize(builder, filesize):
    builder.PrependInt64Slot(6, filesize, 0)

def AddFilesize(builder, filesize):
    AnalyticImagery_IngestAddFilesize(builder, filesize)

def AnalyticImagery_IngestAddImgWidth(builder, imgWidth):
    builder.PrependInt32Slot(7, imgWidth, 0)

def AddImgWidth(builder, imgWidth):
    AnalyticImagery_IngestAddImgWidth(builder, imgWidth)

def AnalyticImagery_IngestAddImgHeight(builder, imgHeight):
    builder.PrependInt32Slot(8, imgHeight, 0)

def AddImgHeight(builder, imgHeight):
    AnalyticImagery_IngestAddImgHeight(builder, imgHeight)

def AnalyticImagery_IngestAddXUnits(builder, xUnits):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(xUnits), 0)

def AddXUnits(builder, xUnits):
    AnalyticImagery_IngestAddXUnits(builder, xUnits)

def AnalyticImagery_IngestAddYUnits(builder, yUnits):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(yUnits), 0)

def AddYUnits(builder, yUnits):
    AnalyticImagery_IngestAddYUnits(builder, yUnits)

def AnalyticImagery_IngestAddZUnits(builder, zUnits):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(zUnits), 0)

def AddZUnits(builder, zUnits):
    AnalyticImagery_IngestAddZUnits(builder, zUnits)

def AnalyticImagery_IngestAddImageSetId(builder, imageSetId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(imageSetId), 0)

def AddImageSetId(builder, imageSetId):
    AnalyticImagery_IngestAddImageSetId(builder, imageSetId)

def AnalyticImagery_IngestAddImageSetLength(builder, imageSetLength):
    builder.PrependInt32Slot(13, imageSetLength, 0)

def AddImageSetLength(builder, imageSetLength):
    AnalyticImagery_IngestAddImageSetLength(builder, imageSetLength)

def AnalyticImagery_IngestAddSequenceId(builder, sequenceId):
    builder.PrependInt32Slot(14, sequenceId, 0)

def AddSequenceId(builder, sequenceId):
    AnalyticImagery_IngestAddSequenceId(builder, sequenceId)

def AnalyticImagery_IngestAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    AnalyticImagery_IngestAddDescription(builder, description)

def AnalyticImagery_IngestAddDataStart(builder, dataStart):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(dataStart), 0)

def AddDataStart(builder, dataStart):
    AnalyticImagery_IngestAddDataStart(builder, dataStart)

def AnalyticImagery_IngestAddDataStop(builder, dataStop):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(dataStop), 0)

def AddDataStop(builder, dataStop):
    AnalyticImagery_IngestAddDataStop(builder, dataStop)

def AnalyticImagery_IngestAddAnnLims(builder, annLims):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(annLims), 0)

def AddAnnLims(builder, annLims):
    AnalyticImagery_IngestAddAnnLims(builder, annLims)

def AnalyticImagery_IngestStartAnnLimsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAnnLimsVector(builder, numElems):
    return AnalyticImagery_IngestStartAnnLimsVector(builder, numElems)

def AnalyticImagery_IngestAddAnnText(builder, annText):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(annText), 0)

def AddAnnText(builder, annText):
    AnalyticImagery_IngestAddAnnText(builder, annText)

def AnalyticImagery_IngestStartAnnTextVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAnnTextVector(builder, numElems):
    return AnalyticImagery_IngestStartAnnTextVector(builder, numElems)

def AnalyticImagery_IngestAddKeywords(builder, keywords):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(keywords), 0)

def AddKeywords(builder, keywords):
    AnalyticImagery_IngestAddKeywords(builder, keywords)

def AnalyticImagery_IngestStartKeywordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartKeywordsVector(builder, numElems):
    return AnalyticImagery_IngestStartKeywordsVector(builder, numElems)

def AnalyticImagery_IngestAddArea(builder, area):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(area), 0)

def AddArea(builder, area):
    AnalyticImagery_IngestAddArea(builder, area)

def AnalyticImagery_IngestAddAtext(builder, atext):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(atext), 0)

def AddAtext(builder, atext):
    AnalyticImagery_IngestAddAtext(builder, atext)

def AnalyticImagery_IngestAddAgjson(builder, agjson):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(agjson), 0)

def AddAgjson(builder, agjson):
    AnalyticImagery_IngestAddAgjson(builder, agjson)

def AnalyticImagery_IngestAddAtype(builder, atype):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(atype), 0)

def AddAtype(builder, atype):
    AnalyticImagery_IngestAddAtype(builder, atype)

def AnalyticImagery_IngestAddAndims(builder, andims):
    builder.PrependInt32Slot(25, andims, 0)

def AddAndims(builder, andims):
    AnalyticImagery_IngestAddAndims(builder, andims)

def AnalyticImagery_IngestAddAsrid(builder, asrid):
    builder.PrependInt32Slot(26, asrid, 0)

def AddAsrid(builder, asrid):
    AnalyticImagery_IngestAddAsrid(builder, asrid)

def AnalyticImagery_IngestAddSatId(builder, satId):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(satId), 0)

def AddSatId(builder, satId):
    AnalyticImagery_IngestAddSatId(builder, satId)

def AnalyticImagery_IngestStartSatIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSatIdVector(builder, numElems):
    return AnalyticImagery_IngestStartSatIdVector(builder, numElems)

def AnalyticImagery_IngestAddSatIdConf(builder, satIdConf):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(satIdConf), 0)

def AddSatIdConf(builder, satIdConf):
    AnalyticImagery_IngestAddSatIdConf(builder, satIdConf)

def AnalyticImagery_IngestStartSatIdConfVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSatIdConfVector(builder, numElems):
    return AnalyticImagery_IngestStartSatIdConfVector(builder, numElems)

def AnalyticImagery_IngestAddSrcTyps(builder, srcTyps):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(srcTyps), 0)

def AddSrcTyps(builder, srcTyps):
    AnalyticImagery_IngestAddSrcTyps(builder, srcTyps)

def AnalyticImagery_IngestStartSrcTypsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcTypsVector(builder, numElems):
    return AnalyticImagery_IngestStartSrcTypsVector(builder, numElems)

def AnalyticImagery_IngestAddSrcIds(builder, srcIds):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(srcIds), 0)

def AddSrcIds(builder, srcIds):
    AnalyticImagery_IngestAddSrcIds(builder, srcIds)

def AnalyticImagery_IngestStartSrcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSrcIdsVector(builder, numElems):
    return AnalyticImagery_IngestStartSrcIdsVector(builder, numElems)

def AnalyticImagery_IngestAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    AnalyticImagery_IngestAddTags(builder, tags)

def AnalyticImagery_IngestStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return AnalyticImagery_IngestStartTagsVector(builder, numElems)

def AnalyticImagery_IngestAddChecksumValue(builder, checksumValue):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(checksumValue), 0)

def AddChecksumValue(builder, checksumValue):
    AnalyticImagery_IngestAddChecksumValue(builder, checksumValue)

def AnalyticImagery_IngestAddTransactionId(builder, transactionId):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(transactionId), 0)

def AddTransactionId(builder, transactionId):
    AnalyticImagery_IngestAddTransactionId(builder, transactionId)

def AnalyticImagery_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    AnalyticImagery_IngestAddCreatedAt(builder, createdAt)

def AnalyticImagery_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    AnalyticImagery_IngestAddCreatedBy(builder, createdBy)

def AnalyticImagery_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    AnalyticImagery_IngestAddSource(builder, source)

def AnalyticImagery_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    AnalyticImagery_IngestAddOrigin(builder, origin)

def AnalyticImagery_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    AnalyticImagery_IngestAddOrigNetwork(builder, origNetwork)

def AnalyticImagery_IngestAddSourceDl(builder, sourceDl):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(sourceDl), 0)

def AddSourceDl(builder, sourceDl):
    AnalyticImagery_IngestAddSourceDl(builder, sourceDl)

def AnalyticImagery_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(40, dataMode, 0)

def AddDataMode(builder, dataMode):
    AnalyticImagery_IngestAddDataMode(builder, dataMode)

def AnalyticImagery_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return AnalyticImagery_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class AnalyticImagery_IngestT(object):

    # AnalyticImagery_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.content = None  # type: str
        self.msgTime = None  # type: str
        self.imageType = None  # type: str
        self.filename = None  # type: str
        self.filesize = 0  # type: int
        self.imgWidth = 0  # type: int
        self.imgHeight = 0  # type: int
        self.xUnits = None  # type: str
        self.yUnits = None  # type: str
        self.zUnits = None  # type: str
        self.imageSetId = None  # type: str
        self.imageSetLength = 0  # type: int
        self.sequenceId = 0  # type: int
        self.description = None  # type: str
        self.dataStart = None  # type: str
        self.dataStop = None  # type: str
        self.annLims = None  # type: List[str]
        self.annText = None  # type: List[str]
        self.keywords = None  # type: List[str]
        self.area = None  # type: str
        self.atext = None  # type: str
        self.agjson = None  # type: str
        self.atype = None  # type: str
        self.andims = 0  # type: int
        self.asrid = 0  # type: int
        self.satId = None  # type: List[str]
        self.satIdConf = None  # type: List[str]
        self.srcTyps = None  # type: List[str]
        self.srcIds = None  # type: List[str]
        self.tags = None  # type: List[str]
        self.checksumValue = None  # type: str
        self.transactionId = None  # type: str
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.sourceDl = None  # type: str
        self.dataMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        analyticImageryIngest = AnalyticImagery_Ingest()
        analyticImageryIngest.Init(buf, pos)
        return cls.InitFromObj(analyticImageryIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, analyticImageryIngest):
        x = AnalyticImagery_IngestT()
        x._UnPack(analyticImageryIngest)
        return x

    # AnalyticImagery_IngestT
    def _UnPack(self, analyticImageryIngest):
        if analyticImageryIngest is None:
            return
        self.id = analyticImageryIngest.Id()
        self.classificationMarking = analyticImageryIngest.ClassificationMarking()
        self.content = analyticImageryIngest.Content()
        self.msgTime = analyticImageryIngest.MsgTime()
        self.imageType = analyticImageryIngest.ImageType()
        self.filename = analyticImageryIngest.Filename()
        self.filesize = analyticImageryIngest.Filesize()
        self.imgWidth = analyticImageryIngest.ImgWidth()
        self.imgHeight = analyticImageryIngest.ImgHeight()
        self.xUnits = analyticImageryIngest.XUnits()
        self.yUnits = analyticImageryIngest.YUnits()
        self.zUnits = analyticImageryIngest.ZUnits()
        self.imageSetId = analyticImageryIngest.ImageSetId()
        self.imageSetLength = analyticImageryIngest.ImageSetLength()
        self.sequenceId = analyticImageryIngest.SequenceId()
        self.description = analyticImageryIngest.Description()
        self.dataStart = analyticImageryIngest.DataStart()
        self.dataStop = analyticImageryIngest.DataStop()
        if not analyticImageryIngest.AnnLimsIsNone():
            self.annLims = []
            for i in range(analyticImageryIngest.AnnLimsLength()):
                self.annLims.append(analyticImageryIngest.AnnLims(i))
        if not analyticImageryIngest.AnnTextIsNone():
            self.annText = []
            for i in range(analyticImageryIngest.AnnTextLength()):
                self.annText.append(analyticImageryIngest.AnnText(i))
        if not analyticImageryIngest.KeywordsIsNone():
            self.keywords = []
            for i in range(analyticImageryIngest.KeywordsLength()):
                self.keywords.append(analyticImageryIngest.Keywords(i))
        self.area = analyticImageryIngest.Area()
        self.atext = analyticImageryIngest.Atext()
        self.agjson = analyticImageryIngest.Agjson()
        self.atype = analyticImageryIngest.Atype()
        self.andims = analyticImageryIngest.Andims()
        self.asrid = analyticImageryIngest.Asrid()
        if not analyticImageryIngest.SatIdIsNone():
            self.satId = []
            for i in range(analyticImageryIngest.SatIdLength()):
                self.satId.append(analyticImageryIngest.SatId(i))
        if not analyticImageryIngest.SatIdConfIsNone():
            self.satIdConf = []
            for i in range(analyticImageryIngest.SatIdConfLength()):
                self.satIdConf.append(analyticImageryIngest.SatIdConf(i))
        if not analyticImageryIngest.SrcTypsIsNone():
            self.srcTyps = []
            for i in range(analyticImageryIngest.SrcTypsLength()):
                self.srcTyps.append(analyticImageryIngest.SrcTyps(i))
        if not analyticImageryIngest.SrcIdsIsNone():
            self.srcIds = []
            for i in range(analyticImageryIngest.SrcIdsLength()):
                self.srcIds.append(analyticImageryIngest.SrcIds(i))
        if not analyticImageryIngest.TagsIsNone():
            self.tags = []
            for i in range(analyticImageryIngest.TagsLength()):
                self.tags.append(analyticImageryIngest.Tags(i))
        self.checksumValue = analyticImageryIngest.ChecksumValue()
        self.transactionId = analyticImageryIngest.TransactionId()
        self.createdAt = analyticImageryIngest.CreatedAt()
        self.createdBy = analyticImageryIngest.CreatedBy()
        self.source = analyticImageryIngest.Source()
        self.origin = analyticImageryIngest.Origin()
        self.origNetwork = analyticImageryIngest.OrigNetwork()
        self.sourceDl = analyticImageryIngest.SourceDl()
        self.dataMode = analyticImageryIngest.DataMode()

    # AnalyticImagery_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.content is not None:
            content = builder.CreateString(self.content)
        if self.msgTime is not None:
            msgTime = builder.CreateString(self.msgTime)
        if self.imageType is not None:
            imageType = builder.CreateString(self.imageType)
        if self.filename is not None:
            filename = builder.CreateString(self.filename)
        if self.xUnits is not None:
            xUnits = builder.CreateString(self.xUnits)
        if self.yUnits is not None:
            yUnits = builder.CreateString(self.yUnits)
        if self.zUnits is not None:
            zUnits = builder.CreateString(self.zUnits)
        if self.imageSetId is not None:
            imageSetId = builder.CreateString(self.imageSetId)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.dataStart is not None:
            dataStart = builder.CreateString(self.dataStart)
        if self.dataStop is not None:
            dataStop = builder.CreateString(self.dataStop)
        if self.annLims is not None:
            annLimslist = []
            for i in range(len(self.annLims)):
                annLimslist.append(builder.CreateString(self.annLims[i]))
            AnalyticImagery_IngestStartAnnLimsVector(builder, len(self.annLims))
            for i in reversed(range(len(self.annLims))):
                builder.PrependUOffsetTRelative(annLimslist[i])
            annLims = builder.EndVector()
        if self.annText is not None:
            annTextlist = []
            for i in range(len(self.annText)):
                annTextlist.append(builder.CreateString(self.annText[i]))
            AnalyticImagery_IngestStartAnnTextVector(builder, len(self.annText))
            for i in reversed(range(len(self.annText))):
                builder.PrependUOffsetTRelative(annTextlist[i])
            annText = builder.EndVector()
        if self.keywords is not None:
            keywordslist = []
            for i in range(len(self.keywords)):
                keywordslist.append(builder.CreateString(self.keywords[i]))
            AnalyticImagery_IngestStartKeywordsVector(builder, len(self.keywords))
            for i in reversed(range(len(self.keywords))):
                builder.PrependUOffsetTRelative(keywordslist[i])
            keywords = builder.EndVector()
        if self.area is not None:
            area = builder.CreateString(self.area)
        if self.atext is not None:
            atext = builder.CreateString(self.atext)
        if self.agjson is not None:
            agjson = builder.CreateString(self.agjson)
        if self.atype is not None:
            atype = builder.CreateString(self.atype)
        if self.satId is not None:
            satIdlist = []
            for i in range(len(self.satId)):
                satIdlist.append(builder.CreateString(self.satId[i]))
            AnalyticImagery_IngestStartSatIdVector(builder, len(self.satId))
            for i in reversed(range(len(self.satId))):
                builder.PrependUOffsetTRelative(satIdlist[i])
            satId = builder.EndVector()
        if self.satIdConf is not None:
            satIdConflist = []
            for i in range(len(self.satIdConf)):
                satIdConflist.append(builder.CreateString(self.satIdConf[i]))
            AnalyticImagery_IngestStartSatIdConfVector(builder, len(self.satIdConf))
            for i in reversed(range(len(self.satIdConf))):
                builder.PrependUOffsetTRelative(satIdConflist[i])
            satIdConf = builder.EndVector()
        if self.srcTyps is not None:
            srcTypslist = []
            for i in range(len(self.srcTyps)):
                srcTypslist.append(builder.CreateString(self.srcTyps[i]))
            AnalyticImagery_IngestStartSrcTypsVector(builder, len(self.srcTyps))
            for i in reversed(range(len(self.srcTyps))):
                builder.PrependUOffsetTRelative(srcTypslist[i])
            srcTyps = builder.EndVector()
        if self.srcIds is not None:
            srcIdslist = []
            for i in range(len(self.srcIds)):
                srcIdslist.append(builder.CreateString(self.srcIds[i]))
            AnalyticImagery_IngestStartSrcIdsVector(builder, len(self.srcIds))
            for i in reversed(range(len(self.srcIds))):
                builder.PrependUOffsetTRelative(srcIdslist[i])
            srcIds = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            AnalyticImagery_IngestStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.checksumValue is not None:
            checksumValue = builder.CreateString(self.checksumValue)
        if self.transactionId is not None:
            transactionId = builder.CreateString(self.transactionId)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.sourceDl is not None:
            sourceDl = builder.CreateString(self.sourceDl)
        AnalyticImagery_IngestStart(builder)
        if self.id is not None:
            AnalyticImagery_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            AnalyticImagery_IngestAddClassificationMarking(builder, classificationMarking)
        if self.content is not None:
            AnalyticImagery_IngestAddContent(builder, content)
        if self.msgTime is not None:
            AnalyticImagery_IngestAddMsgTime(builder, msgTime)
        if self.imageType is not None:
            AnalyticImagery_IngestAddImageType(builder, imageType)
        if self.filename is not None:
            AnalyticImagery_IngestAddFilename(builder, filename)
        AnalyticImagery_IngestAddFilesize(builder, self.filesize)
        AnalyticImagery_IngestAddImgWidth(builder, self.imgWidth)
        AnalyticImagery_IngestAddImgHeight(builder, self.imgHeight)
        if self.xUnits is not None:
            AnalyticImagery_IngestAddXUnits(builder, xUnits)
        if self.yUnits is not None:
            AnalyticImagery_IngestAddYUnits(builder, yUnits)
        if self.zUnits is not None:
            AnalyticImagery_IngestAddZUnits(builder, zUnits)
        if self.imageSetId is not None:
            AnalyticImagery_IngestAddImageSetId(builder, imageSetId)
        AnalyticImagery_IngestAddImageSetLength(builder, self.imageSetLength)
        AnalyticImagery_IngestAddSequenceId(builder, self.sequenceId)
        if self.description is not None:
            AnalyticImagery_IngestAddDescription(builder, description)
        if self.dataStart is not None:
            AnalyticImagery_IngestAddDataStart(builder, dataStart)
        if self.dataStop is not None:
            AnalyticImagery_IngestAddDataStop(builder, dataStop)
        if self.annLims is not None:
            AnalyticImagery_IngestAddAnnLims(builder, annLims)
        if self.annText is not None:
            AnalyticImagery_IngestAddAnnText(builder, annText)
        if self.keywords is not None:
            AnalyticImagery_IngestAddKeywords(builder, keywords)
        if self.area is not None:
            AnalyticImagery_IngestAddArea(builder, area)
        if self.atext is not None:
            AnalyticImagery_IngestAddAtext(builder, atext)
        if self.agjson is not None:
            AnalyticImagery_IngestAddAgjson(builder, agjson)
        if self.atype is not None:
            AnalyticImagery_IngestAddAtype(builder, atype)
        AnalyticImagery_IngestAddAndims(builder, self.andims)
        AnalyticImagery_IngestAddAsrid(builder, self.asrid)
        if self.satId is not None:
            AnalyticImagery_IngestAddSatId(builder, satId)
        if self.satIdConf is not None:
            AnalyticImagery_IngestAddSatIdConf(builder, satIdConf)
        if self.srcTyps is not None:
            AnalyticImagery_IngestAddSrcTyps(builder, srcTyps)
        if self.srcIds is not None:
            AnalyticImagery_IngestAddSrcIds(builder, srcIds)
        if self.tags is not None:
            AnalyticImagery_IngestAddTags(builder, tags)
        if self.checksumValue is not None:
            AnalyticImagery_IngestAddChecksumValue(builder, checksumValue)
        if self.transactionId is not None:
            AnalyticImagery_IngestAddTransactionId(builder, transactionId)
        if self.createdAt is not None:
            AnalyticImagery_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            AnalyticImagery_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            AnalyticImagery_IngestAddSource(builder, source)
        if self.origin is not None:
            AnalyticImagery_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            AnalyticImagery_IngestAddOrigNetwork(builder, origNetwork)
        if self.sourceDl is not None:
            AnalyticImagery_IngestAddSourceDl(builder, sourceDl)
        AnalyticImagery_IngestAddDataMode(builder, self.dataMode)
        analyticImageryIngest = AnalyticImagery_IngestEnd(builder)
        return analyticImageryIngest
