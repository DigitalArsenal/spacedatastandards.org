# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
class AirspaceControlMeans_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AirspaceControlMeans_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAirspaceControlMeans_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AirspaceControlMeans_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x41\x49\x52\x53", size_prefixed=size_prefixed)

    # AirspaceControlMeans_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The code for the type of airspace control means.
    # Example: /// Example: ACM:ADAREA
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def CmType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Airspace control means name or designator.
    # Example: /// Example: DESIG:C34
    # Constraints: Minimum length = 0, Maximum length = 32
    # AirspaceControlMeans_Full
    def CmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Designates the geometric type that defines the airspace shape. One of CIRCLE, CORRIDOR, LINE, ORBIT, etc.
    # Example: /// Example: POLYARC
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def CmShape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Designates the means by which a defined airspace control means is to be used.
    # Example: /// Example: USE:AIRCOR
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique Link 16 identifier assigned to the airspace control means.
    # Example: /// Example: F3356
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def Link16Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The altitude at or below which the vertical position of an aircraft is controlled by reference to true altitude.
    # Example: /// Example: 18000FT
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def TransAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated, if different from the top level ACO datum.
    # Example: /// Example: NAR
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def GeoDatumAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format. The fields coord0 and coord1 should be used in the specification of any airspace control shape that requires exactly one (1) or two (2) reference points for construction. For shapes requiring one reference point, For instance, when shape is set to "APOINT," this field is required and singluarly defines the shape. Similarly, this field is required to define the center point of a "CIRCLE" shape, or the "origin of bearing" for arcs.
    # Example: /// Example: 152345N0505657E
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceControlMeans_Full
    def Coord0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format. The fields coord0 and coord1 should be used in the specification of any airspace control shape that requires exactly one (1) or two (2) reference points for construction. For shapes requiring one reference point, For instance, when shape is set to "APOINT," this field is required and singluarly defines the shape. Similarly, this field is required to define the center point of a "CIRCLE" shape, or the "origin of bearing" for arcs.
    # Example: /// Example: 1523N05057E
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceControlMeans_Full
    def Coord1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A bearing measured from true North, in angular degrees. If cmShape is set to "POLYARC" or "RADARC," this field is required and is mapped to the "beginning" radial bearing parameter.
    # Example: /// Example: 330
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def Bearing0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A bearing measured from true North, in angular degrees. If cmShape is set to "POLYARC" or "RADARC," this field is required and is mapped to the "ending" radial bearing parameter.
    # Example: /// Example: 160
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def Bearing1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or "POLYARC," one of either fields radMag0 or radMag1 is required. If cmShape is set to "RADARC," this field is required and maps to the "inner" radial magnitude arc limit. If provided, the field radMagUnit is required.
    # Example: /// Example: 30.04
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def RadMag0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # A distance that represents a radial magnitude. If cmShape is set to "CIRCLE" or "POLYARC," one of either fields radMag0 or radMag1 is required. If cmShape is set to "RADARC," this field is required and maps to the "outer" radial magnitude arc limit. If provided, the field radMagUnit is required.
    # Example: /// Example: 50.12
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def RadMag1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specifies the unit of length in which radial magnitudes are given. Use M for meters, KM for kilometers, or NM for nautical miles.
    # Example: /// Example: NM
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def RadMagUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # A set of geospatial coordinates specified in DMS (Degrees, Minutes, Seconds) format which determine the vertices of a one or two dimensional geospatial shape. When shape is set to "POLYARC" or "POLYGON," this field is required as applied in the construction of the area boundary. If cmShape is set to "COORIDOR" or "GEOLINE," this field is required and can be interpreted as an ordered set of points along a path in space.
    # Example: /// Example: ['203632N0594256E', '155000N0594815E', '155000N0591343E']
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def PolyCoord(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeans_Full
    def PolyCoordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeans_Full
    def PolyCoordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Index of a segment in an airtrack, which is defined by an ordered set of points.
    # Example: /// Example: 99
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def TrackLeg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Given an ordered pair of spatial coordinates (p0, p1), defines a distance extending into the LEFT half-plane realtive to the direction of the vector that maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define the width of the airspace track as measured from the left of the track segment line. If provided, the field widthUnit is required.
    # Example: /// Example: 5.2
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def WidthLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Given an ordered pair of spatial coordinates (p0, p1), defines a distance extending into the RIGHT half-plane relative to the direction of the vector that maps p0 to p1. If cmShape is set to "1TRACK", this field is required to define the width of the airspace track as measured from the right of the track segment line. If provided, the field widthUnit is required.
    # Example: /// Example: 10.4
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def WidthRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Used to describe the "side to side" distance of a target, object or area. If cmShape is set to "CORRIDOR" or "AORBIT", this field is required and is mapped to the width parameter. If provided, the field widthUnit is required.
    # Example: /// Example: 15.6
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Specifies the unit of length for which widths are given. Use M for meters, KM for kilometers, or NM for nautical miles.
    # Example: /// Example: KM
    # Constraints: Minimum length = 0, Maximum length = 8
    # AirspaceControlMeans_Full
    def WidthUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # An array of at least two alphanumeric symbols used to serially identify the corridor waypoints. If cmShape is set to "CORRIDOR," one of either corrWayPoints or polyCoord is required to specify the centerline of the corridor path.
    # Example: /// Example: ['POB', 'RDU', 'IAD']
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def CorrWayPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeans_Full
    def CorrWayPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeans_Full
    def CorrWayPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # Orbit alignment look-up code. Can be C=Center, L=Left, R=Right.
    # Example: /// Example: C
    # Constraints: Minimum length = 0, Maximum length = 1
    # AirspaceControlMeans_Full
    def OrbitAlignment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Description of the airspace vertical dimension.
    # Example: /// Example: BRRA:GL-100AGL
    # Constraints: Minimum length = 0, Maximum length = 16
    # AirspaceControlMeans_Full
    def EffVdim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The timePeriod set describes the effective datetime for a given airspace control means.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def AirspaceTimePeriod(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeans_Full
    def AirspaceTimePeriodLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeans_Full
    def AirspaceTimePeriodIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def AirspaceControlPoint(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeans_Full
    def AirspaceControlPointLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeans_Full
    def AirspaceControlPointIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # The commander responsible within a specified geographical area for the airspace control operation assigned to him.
    # Example: /// Example: RHEIN MAIN CP
    # Constraints: Minimum length = 0, Maximum length = 36
    # AirspaceControlMeans_Full
    def CtrlAuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The frequency for the airspace control authority. Can specify HZ, KHZ, MHZ, GHZ or a DESIG frequency designator code.
    # Example: /// Example: ['125.25MHZ']
    # Constraints: No constraints specified.
    # AirspaceControlMeans_Full
    def CtrlAuthFreqs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # AirspaceControlMeans_Full
    def CtrlAuthFreqsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # AirspaceControlMeans_Full
    def CtrlAuthFreqsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Used to provide transit intstructions for the airspace control means.
    # Example: /// Example: SITUATION
    # Constraints: Minimum length = 0, Maximum length = 64
    # AirspaceControlMeans_Full
    def GenTextInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # General informat detailing the transit instruction for the airspace control means.
    # Example: /// Example: 1. CAPACITY: MDM TK, 50 VEHICLE CONVOY. 2. CHOKE POINTS: EXIT 5
    # Constraints: Minimum length = 0, Maximum length = 128
    # AirspaceControlMeans_Full
    def FreeText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def AirspaceControlMeans_FullStart(builder):
    builder.StartObject(29)

def Start(builder):
    AirspaceControlMeans_FullStart(builder)

def AirspaceControlMeans_FullAddCmType(builder, cmType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmType), 0)

def AddCmType(builder, cmType):
    AirspaceControlMeans_FullAddCmType(builder, cmType)

def AirspaceControlMeans_FullAddCmId(builder, cmId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmId), 0)

def AddCmId(builder, cmId):
    AirspaceControlMeans_FullAddCmId(builder, cmId)

def AirspaceControlMeans_FullAddCmShape(builder, cmShape):
    builder.PrependInt8Slot(2, cmShape, 0)

def AddCmShape(builder, cmShape):
    AirspaceControlMeans_FullAddCmShape(builder, cmShape)

def AirspaceControlMeans_FullAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def AddUsage(builder, usage):
    AirspaceControlMeans_FullAddUsage(builder, usage)

def AirspaceControlMeans_FullAddLink16Id(builder, link16Id):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(link16Id), 0)

def AddLink16Id(builder, link16Id):
    AirspaceControlMeans_FullAddLink16Id(builder, link16Id)

def AirspaceControlMeans_FullAddTransAltitude(builder, transAltitude):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(transAltitude), 0)

def AddTransAltitude(builder, transAltitude):
    AirspaceControlMeans_FullAddTransAltitude(builder, transAltitude)

def AirspaceControlMeans_FullAddGeoDatumAlt(builder, geoDatumAlt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(geoDatumAlt), 0)

def AddGeoDatumAlt(builder, geoDatumAlt):
    AirspaceControlMeans_FullAddGeoDatumAlt(builder, geoDatumAlt)

def AirspaceControlMeans_FullAddCoord0(builder, coord0):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(coord0), 0)

def AddCoord0(builder, coord0):
    AirspaceControlMeans_FullAddCoord0(builder, coord0)

def AirspaceControlMeans_FullAddCoord1(builder, coord1):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(coord1), 0)

def AddCoord1(builder, coord1):
    AirspaceControlMeans_FullAddCoord1(builder, coord1)

def AirspaceControlMeans_FullAddBearing0(builder, bearing0):
    builder.PrependFloat64Slot(9, bearing0, 0.0)

def AddBearing0(builder, bearing0):
    AirspaceControlMeans_FullAddBearing0(builder, bearing0)

def AirspaceControlMeans_FullAddBearing1(builder, bearing1):
    builder.PrependFloat64Slot(10, bearing1, 0.0)

def AddBearing1(builder, bearing1):
    AirspaceControlMeans_FullAddBearing1(builder, bearing1)

def AirspaceControlMeans_FullAddRadMag0(builder, radMag0):
    builder.PrependFloat64Slot(11, radMag0, 0.0)

def AddRadMag0(builder, radMag0):
    AirspaceControlMeans_FullAddRadMag0(builder, radMag0)

def AirspaceControlMeans_FullAddRadMag1(builder, radMag1):
    builder.PrependFloat64Slot(12, radMag1, 0.0)

def AddRadMag1(builder, radMag1):
    AirspaceControlMeans_FullAddRadMag1(builder, radMag1)

def AirspaceControlMeans_FullAddRadMagUnit(builder, radMagUnit):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(radMagUnit), 0)

def AddRadMagUnit(builder, radMagUnit):
    AirspaceControlMeans_FullAddRadMagUnit(builder, radMagUnit)

def AirspaceControlMeans_FullAddPolyCoord(builder, polyCoord):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(polyCoord), 0)

def AddPolyCoord(builder, polyCoord):
    AirspaceControlMeans_FullAddPolyCoord(builder, polyCoord)

def AirspaceControlMeans_FullStartPolyCoordVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPolyCoordVector(builder, numElems):
    return AirspaceControlMeans_FullStartPolyCoordVector(builder, numElems)

def AirspaceControlMeans_FullAddTrackLeg(builder, trackLeg):
    builder.PrependInt32Slot(15, trackLeg, 0)

def AddTrackLeg(builder, trackLeg):
    AirspaceControlMeans_FullAddTrackLeg(builder, trackLeg)

def AirspaceControlMeans_FullAddWidthLeft(builder, widthLeft):
    builder.PrependFloat64Slot(16, widthLeft, 0.0)

def AddWidthLeft(builder, widthLeft):
    AirspaceControlMeans_FullAddWidthLeft(builder, widthLeft)

def AirspaceControlMeans_FullAddWidthRight(builder, widthRight):
    builder.PrependFloat64Slot(17, widthRight, 0.0)

def AddWidthRight(builder, widthRight):
    AirspaceControlMeans_FullAddWidthRight(builder, widthRight)

def AirspaceControlMeans_FullAddWidth(builder, width):
    builder.PrependFloat64Slot(18, width, 0.0)

def AddWidth(builder, width):
    AirspaceControlMeans_FullAddWidth(builder, width)

def AirspaceControlMeans_FullAddWidthUnit(builder, widthUnit):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(widthUnit), 0)

def AddWidthUnit(builder, widthUnit):
    AirspaceControlMeans_FullAddWidthUnit(builder, widthUnit)

def AirspaceControlMeans_FullAddCorrWayPoints(builder, corrWayPoints):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(corrWayPoints), 0)

def AddCorrWayPoints(builder, corrWayPoints):
    AirspaceControlMeans_FullAddCorrWayPoints(builder, corrWayPoints)

def AirspaceControlMeans_FullStartCorrWayPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCorrWayPointsVector(builder, numElems):
    return AirspaceControlMeans_FullStartCorrWayPointsVector(builder, numElems)

def AirspaceControlMeans_FullAddOrbitAlignment(builder, orbitAlignment):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(orbitAlignment), 0)

def AddOrbitAlignment(builder, orbitAlignment):
    AirspaceControlMeans_FullAddOrbitAlignment(builder, orbitAlignment)

def AirspaceControlMeans_FullAddEffVdim(builder, effVdim):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(effVdim), 0)

def AddEffVdim(builder, effVdim):
    AirspaceControlMeans_FullAddEffVdim(builder, effVdim)

def AirspaceControlMeans_FullAddAirspaceTimePeriod(builder, airspaceTimePeriod):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(airspaceTimePeriod), 0)

def AddAirspaceTimePeriod(builder, airspaceTimePeriod):
    AirspaceControlMeans_FullAddAirspaceTimePeriod(builder, airspaceTimePeriod)

def AirspaceControlMeans_FullStartAirspaceTimePeriodVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirspaceTimePeriodVector(builder, numElems):
    return AirspaceControlMeans_FullStartAirspaceTimePeriodVector(builder, numElems)

def AirspaceControlMeans_FullAddAirspaceControlPoint(builder, airspaceControlPoint):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(airspaceControlPoint), 0)

def AddAirspaceControlPoint(builder, airspaceControlPoint):
    AirspaceControlMeans_FullAddAirspaceControlPoint(builder, airspaceControlPoint)

def AirspaceControlMeans_FullStartAirspaceControlPointVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAirspaceControlPointVector(builder, numElems):
    return AirspaceControlMeans_FullStartAirspaceControlPointVector(builder, numElems)

def AirspaceControlMeans_FullAddCtrlAuth(builder, ctrlAuth):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlAuth), 0)

def AddCtrlAuth(builder, ctrlAuth):
    AirspaceControlMeans_FullAddCtrlAuth(builder, ctrlAuth)

def AirspaceControlMeans_FullAddCtrlAuthFreqs(builder, ctrlAuthFreqs):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(ctrlAuthFreqs), 0)

def AddCtrlAuthFreqs(builder, ctrlAuthFreqs):
    AirspaceControlMeans_FullAddCtrlAuthFreqs(builder, ctrlAuthFreqs)

def AirspaceControlMeans_FullStartCtrlAuthFreqsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCtrlAuthFreqsVector(builder, numElems):
    return AirspaceControlMeans_FullStartCtrlAuthFreqsVector(builder, numElems)

def AirspaceControlMeans_FullAddGenTextInd(builder, genTextInd):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(genTextInd), 0)

def AddGenTextInd(builder, genTextInd):
    AirspaceControlMeans_FullAddGenTextInd(builder, genTextInd)

def AirspaceControlMeans_FullAddFreeText(builder, freeText):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(freeText), 0)

def AddFreeText(builder, freeText):
    AirspaceControlMeans_FullAddFreeText(builder, freeText)

def AirspaceControlMeans_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return AirspaceControlMeans_FullEnd(builder)

try:
    from typing import List
except:
    pass

class AirspaceControlMeans_FullT(object):

    # AirspaceControlMeans_FullT
    def __init__(self):
        self.cmType = None  # type: str
        self.cmId = None  # type: str
        self.cmShape = 0  # type: int
        self.usage = None  # type: str
        self.link16Id = None  # type: str
        self.transAltitude = None  # type: str
        self.geoDatumAlt = None  # type: str
        self.coord0 = None  # type: str
        self.coord1 = None  # type: str
        self.bearing0 = 0.0  # type: float
        self.bearing1 = 0.0  # type: float
        self.radMag0 = 0.0  # type: float
        self.radMag1 = 0.0  # type: float
        self.radMagUnit = None  # type: str
        self.polyCoord = None  # type: List[str]
        self.trackLeg = 0  # type: int
        self.widthLeft = 0.0  # type: float
        self.widthRight = 0.0  # type: float
        self.width = 0.0  # type: float
        self.widthUnit = None  # type: str
        self.corrWayPoints = None  # type: List[str]
        self.orbitAlignment = None  # type: str
        self.effVdim = None  # type: str
        self.airspaceTimePeriod = None  # type: List[str]
        self.airspaceControlPoint = None  # type: List[str]
        self.ctrlAuth = None  # type: str
        self.ctrlAuthFreqs = None  # type: List[str]
        self.genTextInd = None  # type: str
        self.freeText = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        airspaceControlMeansFull = AirspaceControlMeans_Full()
        airspaceControlMeansFull.Init(buf, pos)
        return cls.InitFromObj(airspaceControlMeansFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, airspaceControlMeansFull):
        x = AirspaceControlMeans_FullT()
        x._UnPack(airspaceControlMeansFull)
        return x

    # AirspaceControlMeans_FullT
    def _UnPack(self, airspaceControlMeansFull):
        if airspaceControlMeansFull is None:
            return
        self.cmType = airspaceControlMeansFull.CmType()
        self.cmId = airspaceControlMeansFull.CmId()
        self.cmShape = airspaceControlMeansFull.CmShape()
        self.usage = airspaceControlMeansFull.Usage()
        self.link16Id = airspaceControlMeansFull.Link16Id()
        self.transAltitude = airspaceControlMeansFull.TransAltitude()
        self.geoDatumAlt = airspaceControlMeansFull.GeoDatumAlt()
        self.coord0 = airspaceControlMeansFull.Coord0()
        self.coord1 = airspaceControlMeansFull.Coord1()
        self.bearing0 = airspaceControlMeansFull.Bearing0()
        self.bearing1 = airspaceControlMeansFull.Bearing1()
        self.radMag0 = airspaceControlMeansFull.RadMag0()
        self.radMag1 = airspaceControlMeansFull.RadMag1()
        self.radMagUnit = airspaceControlMeansFull.RadMagUnit()
        if not airspaceControlMeansFull.PolyCoordIsNone():
            self.polyCoord = []
            for i in range(airspaceControlMeansFull.PolyCoordLength()):
                self.polyCoord.append(airspaceControlMeansFull.PolyCoord(i))
        self.trackLeg = airspaceControlMeansFull.TrackLeg()
        self.widthLeft = airspaceControlMeansFull.WidthLeft()
        self.widthRight = airspaceControlMeansFull.WidthRight()
        self.width = airspaceControlMeansFull.Width()
        self.widthUnit = airspaceControlMeansFull.WidthUnit()
        if not airspaceControlMeansFull.CorrWayPointsIsNone():
            self.corrWayPoints = []
            for i in range(airspaceControlMeansFull.CorrWayPointsLength()):
                self.corrWayPoints.append(airspaceControlMeansFull.CorrWayPoints(i))
        self.orbitAlignment = airspaceControlMeansFull.OrbitAlignment()
        self.effVdim = airspaceControlMeansFull.EffVdim()
        if not airspaceControlMeansFull.AirspaceTimePeriodIsNone():
            self.airspaceTimePeriod = []
            for i in range(airspaceControlMeansFull.AirspaceTimePeriodLength()):
                self.airspaceTimePeriod.append(airspaceControlMeansFull.AirspaceTimePeriod(i))
        if not airspaceControlMeansFull.AirspaceControlPointIsNone():
            self.airspaceControlPoint = []
            for i in range(airspaceControlMeansFull.AirspaceControlPointLength()):
                self.airspaceControlPoint.append(airspaceControlMeansFull.AirspaceControlPoint(i))
        self.ctrlAuth = airspaceControlMeansFull.CtrlAuth()
        if not airspaceControlMeansFull.CtrlAuthFreqsIsNone():
            self.ctrlAuthFreqs = []
            for i in range(airspaceControlMeansFull.CtrlAuthFreqsLength()):
                self.ctrlAuthFreqs.append(airspaceControlMeansFull.CtrlAuthFreqs(i))
        self.genTextInd = airspaceControlMeansFull.GenTextInd()
        self.freeText = airspaceControlMeansFull.FreeText()

    # AirspaceControlMeans_FullT
    def Pack(self, builder):
        if self.cmType is not None:
            cmType = builder.CreateString(self.cmType)
        if self.cmId is not None:
            cmId = builder.CreateString(self.cmId)
        if self.usage is not None:
            usage = builder.CreateString(self.usage)
        if self.link16Id is not None:
            link16Id = builder.CreateString(self.link16Id)
        if self.transAltitude is not None:
            transAltitude = builder.CreateString(self.transAltitude)
        if self.geoDatumAlt is not None:
            geoDatumAlt = builder.CreateString(self.geoDatumAlt)
        if self.coord0 is not None:
            coord0 = builder.CreateString(self.coord0)
        if self.coord1 is not None:
            coord1 = builder.CreateString(self.coord1)
        if self.radMagUnit is not None:
            radMagUnit = builder.CreateString(self.radMagUnit)
        if self.polyCoord is not None:
            polyCoordlist = []
            for i in range(len(self.polyCoord)):
                polyCoordlist.append(builder.CreateString(self.polyCoord[i]))
            AirspaceControlMeans_FullStartPolyCoordVector(builder, len(self.polyCoord))
            for i in reversed(range(len(self.polyCoord))):
                builder.PrependUOffsetTRelative(polyCoordlist[i])
            polyCoord = builder.EndVector()
        if self.widthUnit is not None:
            widthUnit = builder.CreateString(self.widthUnit)
        if self.corrWayPoints is not None:
            corrWayPointslist = []
            for i in range(len(self.corrWayPoints)):
                corrWayPointslist.append(builder.CreateString(self.corrWayPoints[i]))
            AirspaceControlMeans_FullStartCorrWayPointsVector(builder, len(self.corrWayPoints))
            for i in reversed(range(len(self.corrWayPoints))):
                builder.PrependUOffsetTRelative(corrWayPointslist[i])
            corrWayPoints = builder.EndVector()
        if self.orbitAlignment is not None:
            orbitAlignment = builder.CreateString(self.orbitAlignment)
        if self.effVdim is not None:
            effVdim = builder.CreateString(self.effVdim)
        if self.airspaceTimePeriod is not None:
            airspaceTimePeriodlist = []
            for i in range(len(self.airspaceTimePeriod)):
                airspaceTimePeriodlist.append(builder.CreateString(self.airspaceTimePeriod[i]))
            AirspaceControlMeans_FullStartAirspaceTimePeriodVector(builder, len(self.airspaceTimePeriod))
            for i in reversed(range(len(self.airspaceTimePeriod))):
                builder.PrependUOffsetTRelative(airspaceTimePeriodlist[i])
            airspaceTimePeriod = builder.EndVector()
        if self.airspaceControlPoint is not None:
            airspaceControlPointlist = []
            for i in range(len(self.airspaceControlPoint)):
                airspaceControlPointlist.append(builder.CreateString(self.airspaceControlPoint[i]))
            AirspaceControlMeans_FullStartAirspaceControlPointVector(builder, len(self.airspaceControlPoint))
            for i in reversed(range(len(self.airspaceControlPoint))):
                builder.PrependUOffsetTRelative(airspaceControlPointlist[i])
            airspaceControlPoint = builder.EndVector()
        if self.ctrlAuth is not None:
            ctrlAuth = builder.CreateString(self.ctrlAuth)
        if self.ctrlAuthFreqs is not None:
            ctrlAuthFreqslist = []
            for i in range(len(self.ctrlAuthFreqs)):
                ctrlAuthFreqslist.append(builder.CreateString(self.ctrlAuthFreqs[i]))
            AirspaceControlMeans_FullStartCtrlAuthFreqsVector(builder, len(self.ctrlAuthFreqs))
            for i in reversed(range(len(self.ctrlAuthFreqs))):
                builder.PrependUOffsetTRelative(ctrlAuthFreqslist[i])
            ctrlAuthFreqs = builder.EndVector()
        if self.genTextInd is not None:
            genTextInd = builder.CreateString(self.genTextInd)
        if self.freeText is not None:
            freeText = builder.CreateString(self.freeText)
        AirspaceControlMeans_FullStart(builder)
        if self.cmType is not None:
            AirspaceControlMeans_FullAddCmType(builder, cmType)
        if self.cmId is not None:
            AirspaceControlMeans_FullAddCmId(builder, cmId)
        AirspaceControlMeans_FullAddCmShape(builder, self.cmShape)
        if self.usage is not None:
            AirspaceControlMeans_FullAddUsage(builder, usage)
        if self.link16Id is not None:
            AirspaceControlMeans_FullAddLink16Id(builder, link16Id)
        if self.transAltitude is not None:
            AirspaceControlMeans_FullAddTransAltitude(builder, transAltitude)
        if self.geoDatumAlt is not None:
            AirspaceControlMeans_FullAddGeoDatumAlt(builder, geoDatumAlt)
        if self.coord0 is not None:
            AirspaceControlMeans_FullAddCoord0(builder, coord0)
        if self.coord1 is not None:
            AirspaceControlMeans_FullAddCoord1(builder, coord1)
        AirspaceControlMeans_FullAddBearing0(builder, self.bearing0)
        AirspaceControlMeans_FullAddBearing1(builder, self.bearing1)
        AirspaceControlMeans_FullAddRadMag0(builder, self.radMag0)
        AirspaceControlMeans_FullAddRadMag1(builder, self.radMag1)
        if self.radMagUnit is not None:
            AirspaceControlMeans_FullAddRadMagUnit(builder, radMagUnit)
        if self.polyCoord is not None:
            AirspaceControlMeans_FullAddPolyCoord(builder, polyCoord)
        AirspaceControlMeans_FullAddTrackLeg(builder, self.trackLeg)
        AirspaceControlMeans_FullAddWidthLeft(builder, self.widthLeft)
        AirspaceControlMeans_FullAddWidthRight(builder, self.widthRight)
        AirspaceControlMeans_FullAddWidth(builder, self.width)
        if self.widthUnit is not None:
            AirspaceControlMeans_FullAddWidthUnit(builder, widthUnit)
        if self.corrWayPoints is not None:
            AirspaceControlMeans_FullAddCorrWayPoints(builder, corrWayPoints)
        if self.orbitAlignment is not None:
            AirspaceControlMeans_FullAddOrbitAlignment(builder, orbitAlignment)
        if self.effVdim is not None:
            AirspaceControlMeans_FullAddEffVdim(builder, effVdim)
        if self.airspaceTimePeriod is not None:
            AirspaceControlMeans_FullAddAirspaceTimePeriod(builder, airspaceTimePeriod)
        if self.airspaceControlPoint is not None:
            AirspaceControlMeans_FullAddAirspaceControlPoint(builder, airspaceControlPoint)
        if self.ctrlAuth is not None:
            AirspaceControlMeans_FullAddCtrlAuth(builder, ctrlAuth)
        if self.ctrlAuthFreqs is not None:
            AirspaceControlMeans_FullAddCtrlAuthFreqs(builder, ctrlAuthFreqs)
        if self.genTextInd is not None:
            AirspaceControlMeans_FullAddGenTextInd(builder, genTextInd)
        if self.freeText is not None:
            AirspaceControlMeans_FullAddFreeText(builder, freeText)
        airspaceControlMeansFull = AirspaceControlMeans_FullEnd(builder)
        return airspaceControlMeansFull
