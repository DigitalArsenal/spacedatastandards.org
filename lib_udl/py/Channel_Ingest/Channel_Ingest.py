# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Channel information on a particular transponder.
class Channel_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Channel_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsChannel_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Channel_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x48\x41\x4E", size_prefixed=size_prefixed)

    # Channel_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: CHANNEL-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Channel_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the parent transponder object for this Channel.
    # Example: /// Example: REF-TRANSPONDER-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Channel_Ingest
    def IdTransponder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel name.
    # Example: /// Example: Example name
    # Constraints: Minimum length = 1, Maximum length = 128
    # Channel_Ingest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Channel_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel type.
    # Example: /// Example: Example type
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Identifier of the particular beam for this channel.
    # Example: /// Example: REF-BEAM-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Channel_Ingest
    def IdBeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
    # Example: /// Example: B8VD
    # Constraints: Minimum length = 0, Maximum length = 36
    # Channel_Ingest
    def BeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ID of the RF Band object for this channel.
    # Example: /// Example: REF-RFBAND-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Channel_Ingest
    def IdRfband(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel encryption.
    # Example: /// Example: Example encryption
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Encryption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Pkg.
    # Example: /// Example: Example pkg
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Pkg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Res.
    # Example: /// Example: Example res
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Res(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel compression.
    # Example: /// Example: Example compression
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Compression(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel vPid.
    # Example: /// Example: VP-ID
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Vpid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Channel aPid.
    # Example: /// Example: AP-ID
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Apid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SID.
    # Example: /// Example: S-ID
    # Constraints: Minimum length = 0, Maximum length = 45
    # Channel_Ingest
    def Sid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Owner.
    # Example: /// Example: example_owner
    # Constraints: Minimum length = 0, Maximum length = 128
    # Channel_Ingest
    def Owner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: system.source
    # Constraints: Minimum length = 1, Maximum length = 64
    # Channel_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: example_origin
    # Constraints: Minimum length = 0, Maximum length = 64
    # Channel_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # Channel_Ingest
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Channel_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Channel_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Channel_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Channel_IngestStart(builder):
    builder.StartObject(22)

def Start(builder):
    Channel_IngestStart(builder)

def Channel_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Channel_IngestAddId(builder, id)

def Channel_IngestAddIdTransponder(builder, idTransponder):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(idTransponder), 0)

def AddIdTransponder(builder, idTransponder):
    Channel_IngestAddIdTransponder(builder, idTransponder)

def Channel_IngestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    Channel_IngestAddName(builder, name)

def Channel_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Channel_IngestAddClassificationMarking(builder, classificationMarking)

def Channel_IngestAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    Channel_IngestAddType(builder, type)

def Channel_IngestAddIdBeam(builder, idBeam):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(idBeam), 0)

def AddIdBeam(builder, idBeam):
    Channel_IngestAddIdBeam(builder, idBeam)

def Channel_IngestAddBeamName(builder, beamName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(beamName), 0)

def AddBeamName(builder, beamName):
    Channel_IngestAddBeamName(builder, beamName)

def Channel_IngestAddIdRfband(builder, idRfband):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(idRfband), 0)

def AddIdRfband(builder, idRfband):
    Channel_IngestAddIdRfband(builder, idRfband)

def Channel_IngestAddEncryption(builder, encryption):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(encryption), 0)

def AddEncryption(builder, encryption):
    Channel_IngestAddEncryption(builder, encryption)

def Channel_IngestAddPkg(builder, pkg):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(pkg), 0)

def AddPkg(builder, pkg):
    Channel_IngestAddPkg(builder, pkg)

def Channel_IngestAddRes(builder, res):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(res), 0)

def AddRes(builder, res):
    Channel_IngestAddRes(builder, res)

def Channel_IngestAddCompression(builder, compression):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(compression), 0)

def AddCompression(builder, compression):
    Channel_IngestAddCompression(builder, compression)

def Channel_IngestAddVpid(builder, vpid):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(vpid), 0)

def AddVpid(builder, vpid):
    Channel_IngestAddVpid(builder, vpid)

def Channel_IngestAddApid(builder, apid):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(apid), 0)

def AddApid(builder, apid):
    Channel_IngestAddApid(builder, apid)

def Channel_IngestAddSid(builder, sid):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sid), 0)

def AddSid(builder, sid):
    Channel_IngestAddSid(builder, sid)

def Channel_IngestAddOwner(builder, owner):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(owner), 0)

def AddOwner(builder, owner):
    Channel_IngestAddOwner(builder, owner)

def Channel_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Channel_IngestAddSource(builder, source)

def Channel_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Channel_IngestAddOrigin(builder, origin)

def Channel_IngestAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    Channel_IngestAddOrigNetwork(builder, origNetwork)

def Channel_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(19, dataMode, 0)

def AddDataMode(builder, dataMode):
    Channel_IngestAddDataMode(builder, dataMode)

def Channel_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Channel_IngestAddCreatedAt(builder, createdAt)

def Channel_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Channel_IngestAddCreatedBy(builder, createdBy)

def Channel_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Channel_IngestEnd(builder)


class Channel_IngestT(object):

    # Channel_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.idTransponder = None  # type: str
        self.name = None  # type: str
        self.classificationMarking = None  # type: str
        self.type = None  # type: str
        self.idBeam = None  # type: str
        self.beamName = None  # type: str
        self.idRfband = None  # type: str
        self.encryption = None  # type: str
        self.pkg = None  # type: str
        self.res = None  # type: str
        self.compression = None  # type: str
        self.vpid = None  # type: str
        self.apid = None  # type: str
        self.sid = None  # type: str
        self.owner = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        channelIngest = Channel_Ingest()
        channelIngest.Init(buf, pos)
        return cls.InitFromObj(channelIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, channelIngest):
        x = Channel_IngestT()
        x._UnPack(channelIngest)
        return x

    # Channel_IngestT
    def _UnPack(self, channelIngest):
        if channelIngest is None:
            return
        self.id = channelIngest.Id()
        self.idTransponder = channelIngest.IdTransponder()
        self.name = channelIngest.Name()
        self.classificationMarking = channelIngest.ClassificationMarking()
        self.type = channelIngest.Type()
        self.idBeam = channelIngest.IdBeam()
        self.beamName = channelIngest.BeamName()
        self.idRfband = channelIngest.IdRfband()
        self.encryption = channelIngest.Encryption()
        self.pkg = channelIngest.Pkg()
        self.res = channelIngest.Res()
        self.compression = channelIngest.Compression()
        self.vpid = channelIngest.Vpid()
        self.apid = channelIngest.Apid()
        self.sid = channelIngest.Sid()
        self.owner = channelIngest.Owner()
        self.source = channelIngest.Source()
        self.origin = channelIngest.Origin()
        self.origNetwork = channelIngest.OrigNetwork()
        self.dataMode = channelIngest.DataMode()
        self.createdAt = channelIngest.CreatedAt()
        self.createdBy = channelIngest.CreatedBy()

    # Channel_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.idTransponder is not None:
            idTransponder = builder.CreateString(self.idTransponder)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.type is not None:
            type = builder.CreateString(self.type)
        if self.idBeam is not None:
            idBeam = builder.CreateString(self.idBeam)
        if self.beamName is not None:
            beamName = builder.CreateString(self.beamName)
        if self.idRfband is not None:
            idRfband = builder.CreateString(self.idRfband)
        if self.encryption is not None:
            encryption = builder.CreateString(self.encryption)
        if self.pkg is not None:
            pkg = builder.CreateString(self.pkg)
        if self.res is not None:
            res = builder.CreateString(self.res)
        if self.compression is not None:
            compression = builder.CreateString(self.compression)
        if self.vpid is not None:
            vpid = builder.CreateString(self.vpid)
        if self.apid is not None:
            apid = builder.CreateString(self.apid)
        if self.sid is not None:
            sid = builder.CreateString(self.sid)
        if self.owner is not None:
            owner = builder.CreateString(self.owner)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        Channel_IngestStart(builder)
        if self.id is not None:
            Channel_IngestAddId(builder, id)
        if self.idTransponder is not None:
            Channel_IngestAddIdTransponder(builder, idTransponder)
        if self.name is not None:
            Channel_IngestAddName(builder, name)
        if self.classificationMarking is not None:
            Channel_IngestAddClassificationMarking(builder, classificationMarking)
        if self.type is not None:
            Channel_IngestAddType(builder, type)
        if self.idBeam is not None:
            Channel_IngestAddIdBeam(builder, idBeam)
        if self.beamName is not None:
            Channel_IngestAddBeamName(builder, beamName)
        if self.idRfband is not None:
            Channel_IngestAddIdRfband(builder, idRfband)
        if self.encryption is not None:
            Channel_IngestAddEncryption(builder, encryption)
        if self.pkg is not None:
            Channel_IngestAddPkg(builder, pkg)
        if self.res is not None:
            Channel_IngestAddRes(builder, res)
        if self.compression is not None:
            Channel_IngestAddCompression(builder, compression)
        if self.vpid is not None:
            Channel_IngestAddVpid(builder, vpid)
        if self.apid is not None:
            Channel_IngestAddApid(builder, apid)
        if self.sid is not None:
            Channel_IngestAddSid(builder, sid)
        if self.owner is not None:
            Channel_IngestAddOwner(builder, owner)
        if self.source is not None:
            Channel_IngestAddSource(builder, source)
        if self.origin is not None:
            Channel_IngestAddOrigin(builder, origin)
        if self.origNetwork is not None:
            Channel_IngestAddOrigNetwork(builder, origNetwork)
        Channel_IngestAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            Channel_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Channel_IngestAddCreatedBy(builder, createdBy)
        channelIngest = Channel_IngestEnd(builder)
        return channelIngest
