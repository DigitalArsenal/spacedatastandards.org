# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
class MtiHRRScatterer_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MtiHRRScatterer_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMtiHRRScatterer_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MtiHRRScatterer_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x54\x49\x48", size_prefixed=size_prefixed)

    # MtiHRRScatterer_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Scatterer’s power magnitude.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRRScatterer_Abridged
    def H321(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Scatterer’s complex phase, in degrees.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRRScatterer_Abridged
    def H322(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRRScatterer_Abridged
    def H323(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
    # Example: /// Example: 1
    # Constraints: No constraints specified.
    # MtiHRRScatterer_Abridged
    def H324(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def MtiHRRScatterer_AbridgedStart(builder):
    builder.StartObject(4)

def Start(builder):
    MtiHRRScatterer_AbridgedStart(builder)

def MtiHRRScatterer_AbridgedAddH321(builder, h321):
    builder.PrependInt32Slot(0, h321, 0)

def AddH321(builder, h321):
    MtiHRRScatterer_AbridgedAddH321(builder, h321)

def MtiHRRScatterer_AbridgedAddH322(builder, h322):
    builder.PrependInt32Slot(1, h322, 0)

def AddH322(builder, h322):
    MtiHRRScatterer_AbridgedAddH322(builder, h322)

def MtiHRRScatterer_AbridgedAddH323(builder, h323):
    builder.PrependInt32Slot(2, h323, 0)

def AddH323(builder, h323):
    MtiHRRScatterer_AbridgedAddH323(builder, h323)

def MtiHRRScatterer_AbridgedAddH324(builder, h324):
    builder.PrependInt32Slot(3, h324, 0)

def AddH324(builder, h324):
    MtiHRRScatterer_AbridgedAddH324(builder, h324)

def MtiHRRScatterer_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return MtiHRRScatterer_AbridgedEnd(builder)


class MtiHRRScatterer_AbridgedT(object):

    # MtiHRRScatterer_AbridgedT
    def __init__(self):
        self.h321 = 0  # type: int
        self.h322 = 0  # type: int
        self.h323 = 0  # type: int
        self.h324 = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        mtiHrrscattererAbridged = MtiHRRScatterer_Abridged()
        mtiHrrscattererAbridged.Init(buf, pos)
        return cls.InitFromObj(mtiHrrscattererAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, mtiHrrscattererAbridged):
        x = MtiHRRScatterer_AbridgedT()
        x._UnPack(mtiHrrscattererAbridged)
        return x

    # MtiHRRScatterer_AbridgedT
    def _UnPack(self, mtiHrrscattererAbridged):
        if mtiHrrscattererAbridged is None:
            return
        self.h321 = mtiHrrscattererAbridged.H321()
        self.h322 = mtiHrrscattererAbridged.H322()
        self.h323 = mtiHrrscattererAbridged.H323()
        self.h324 = mtiHrrscattererAbridged.H324()

    # MtiHRRScatterer_AbridgedT
    def Pack(self, builder):
        MtiHRRScatterer_AbridgedStart(builder)
        MtiHRRScatterer_AbridgedAddH321(builder, self.h321)
        MtiHRRScatterer_AbridgedAddH322(builder, self.h322)
        MtiHRRScatterer_AbridgedAddH323(builder, self.h323)
        MtiHRRScatterer_AbridgedAddH324(builder, self.h324)
        mtiHrrscattererAbridged = MtiHRRScatterer_AbridgedEnd(builder)
        return mtiHrrscattererAbridged
