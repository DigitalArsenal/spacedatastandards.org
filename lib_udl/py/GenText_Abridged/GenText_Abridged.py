# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
class GenText_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GenText_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGenText_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GenText_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x47\x45\x4E\x54", size_prefixed=size_prefixed)

    # GenText_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
    # Example: /// Example: OPENING REMARKS
    # Constraints: Minimum length = 0, Maximum length = 64
    # GenText_Abridged
    def TextInd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The free text that describes the information specific to the text indicator.
    # Example: /// Example: FREE-TEXT
    # Constraints: Minimum length = 0, Maximum length = 1024
    # GenText_Abridged
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def GenText_AbridgedStart(builder):
    builder.StartObject(2)

def Start(builder):
    GenText_AbridgedStart(builder)

def GenText_AbridgedAddTextInd(builder, textInd):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(textInd), 0)

def AddTextInd(builder, textInd):
    GenText_AbridgedAddTextInd(builder, textInd)

def GenText_AbridgedAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    GenText_AbridgedAddText(builder, text)

def GenText_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return GenText_AbridgedEnd(builder)


class GenText_AbridgedT(object):

    # GenText_AbridgedT
    def __init__(self):
        self.textInd = None  # type: str
        self.text = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        genTextAbridged = GenText_Abridged()
        genTextAbridged.Init(buf, pos)
        return cls.InitFromObj(genTextAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, genTextAbridged):
        x = GenText_AbridgedT()
        x._UnPack(genTextAbridged)
        return x

    # GenText_AbridgedT
    def _UnPack(self, genTextAbridged):
        if genTextAbridged is None:
            return
        self.textInd = genTextAbridged.TextInd()
        self.text = genTextAbridged.Text()

    # GenText_AbridgedT
    def Pack(self, builder):
        if self.textInd is not None:
            textInd = builder.CreateString(self.textInd)
        if self.text is not None:
            text = builder.CreateString(self.text)
        GenText_AbridgedStart(builder)
        if self.textInd is not None:
            GenText_AbridgedAddTextInd(builder, textInd)
        if self.text is not None:
            GenText_AbridgedAddText(builder, text)
        genTextAbridged = GenText_AbridgedEnd(builder)
        return genTextAbridged
