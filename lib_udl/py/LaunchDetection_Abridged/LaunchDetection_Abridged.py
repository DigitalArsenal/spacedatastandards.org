# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Data to analyze launch detections.
class LaunchDetection_Abridged(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LaunchDetection_Abridged()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLaunchDetection_Abridged(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def LaunchDetection_AbridgedBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4C\x41\x55\x4E", size_prefixed=size_prefixed)

    # LaunchDetection_Abridged
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: LAUNCHDETECTION-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # LaunchDetection_Abridged
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # LaunchDetection_Abridged
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time of Launch.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def LaunchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Type of message for the data.
    # Example: /// Example: Example-Msg-Type
    # Constraints: Minimum length = 1, Maximum length = 16
    # LaunchDetection_Abridged
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def LaunchLatitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def LaunchLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Angle measured clockwise from North for the launch heading (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def LaunchAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit Right Ascension of Ascending Node (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def Raan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Orbit Inclination (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def Inclination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Time of observation.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def ObservationTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
    # Example: /// Example: 45.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def ObservationLatitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Longitude of launch vehicle at observation time (in Degrees).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def ObservationLongitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Altitude of launch vehicle at observation time (in KM).
    # Example: /// Example: 1.23
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def ObservationAltitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Flag indicating multiple observers were used.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def StereoFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
    # Example: /// Example: False
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def HighZenithAzimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Integer indicating how messages should be sequenced for a specific event.
    # Example: /// Example: 5
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def SequenceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Id to be able to correlate different messages to a specific event.
    # Example: /// Example: EVENT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # LaunchDetection_Abridged
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchDetection_Abridged
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Abridged
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional source-provided and searchable metadata or descriptor of the data.
    # Example: /// Example: Example descriptor
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Abridged
    def Descriptor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # The originating source network on which this record was created, auto-populated by the system.
    # Example: /// Example: ORIG
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchDetection_Abridged
    def OrigNetwork(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # LaunchDetection_Abridged
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Time the row was created in the database.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # LaunchDetection_Abridged
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Read-only time the row was updated in the database, set automatically by the system on update.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # LaunchDetection_Abridged
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 0, Maximum length = 64
    # LaunchDetection_Abridged
    def UpdatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def LaunchDetection_AbridgedStart(builder):
    builder.StartObject(26)

def Start(builder):
    LaunchDetection_AbridgedStart(builder)

def LaunchDetection_AbridgedAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    LaunchDetection_AbridgedAddId(builder, id)

def LaunchDetection_AbridgedAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    LaunchDetection_AbridgedAddClassificationMarking(builder, classificationMarking)

def LaunchDetection_AbridgedAddLaunchTime(builder, launchTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(launchTime), 0)

def AddLaunchTime(builder, launchTime):
    LaunchDetection_AbridgedAddLaunchTime(builder, launchTime)

def LaunchDetection_AbridgedAddMessageType(builder, messageType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(messageType), 0)

def AddMessageType(builder, messageType):
    LaunchDetection_AbridgedAddMessageType(builder, messageType)

def LaunchDetection_AbridgedAddLaunchLatitude(builder, launchLatitude):
    builder.PrependFloat64Slot(4, launchLatitude, 0.0)

def AddLaunchLatitude(builder, launchLatitude):
    LaunchDetection_AbridgedAddLaunchLatitude(builder, launchLatitude)

def LaunchDetection_AbridgedAddLaunchLongitude(builder, launchLongitude):
    builder.PrependFloat64Slot(5, launchLongitude, 0.0)

def AddLaunchLongitude(builder, launchLongitude):
    LaunchDetection_AbridgedAddLaunchLongitude(builder, launchLongitude)

def LaunchDetection_AbridgedAddLaunchAzimuth(builder, launchAzimuth):
    builder.PrependFloat64Slot(6, launchAzimuth, 0.0)

def AddLaunchAzimuth(builder, launchAzimuth):
    LaunchDetection_AbridgedAddLaunchAzimuth(builder, launchAzimuth)

def LaunchDetection_AbridgedAddRaan(builder, raan):
    builder.PrependFloat64Slot(7, raan, 0.0)

def AddRaan(builder, raan):
    LaunchDetection_AbridgedAddRaan(builder, raan)

def LaunchDetection_AbridgedAddInclination(builder, inclination):
    builder.PrependFloat64Slot(8, inclination, 0.0)

def AddInclination(builder, inclination):
    LaunchDetection_AbridgedAddInclination(builder, inclination)

def LaunchDetection_AbridgedAddObservationTime(builder, observationTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(observationTime), 0)

def AddObservationTime(builder, observationTime):
    LaunchDetection_AbridgedAddObservationTime(builder, observationTime)

def LaunchDetection_AbridgedAddObservationLatitude(builder, observationLatitude):
    builder.PrependFloat64Slot(10, observationLatitude, 0.0)

def AddObservationLatitude(builder, observationLatitude):
    LaunchDetection_AbridgedAddObservationLatitude(builder, observationLatitude)

def LaunchDetection_AbridgedAddObservationLongitude(builder, observationLongitude):
    builder.PrependFloat64Slot(11, observationLongitude, 0.0)

def AddObservationLongitude(builder, observationLongitude):
    LaunchDetection_AbridgedAddObservationLongitude(builder, observationLongitude)

def LaunchDetection_AbridgedAddObservationAltitude(builder, observationAltitude):
    builder.PrependFloat64Slot(12, observationAltitude, 0.0)

def AddObservationAltitude(builder, observationAltitude):
    LaunchDetection_AbridgedAddObservationAltitude(builder, observationAltitude)

def LaunchDetection_AbridgedAddStereoFlag(builder, stereoFlag):
    builder.PrependBoolSlot(13, stereoFlag, 0)

def AddStereoFlag(builder, stereoFlag):
    LaunchDetection_AbridgedAddStereoFlag(builder, stereoFlag)

def LaunchDetection_AbridgedAddHighZenithAzimuth(builder, highZenithAzimuth):
    builder.PrependBoolSlot(14, highZenithAzimuth, 0)

def AddHighZenithAzimuth(builder, highZenithAzimuth):
    LaunchDetection_AbridgedAddHighZenithAzimuth(builder, highZenithAzimuth)

def LaunchDetection_AbridgedAddSequenceNumber(builder, sequenceNumber):
    builder.PrependInt32Slot(15, sequenceNumber, 0)

def AddSequenceNumber(builder, sequenceNumber):
    LaunchDetection_AbridgedAddSequenceNumber(builder, sequenceNumber)

def LaunchDetection_AbridgedAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def AddEventId(builder, eventId):
    LaunchDetection_AbridgedAddEventId(builder, eventId)

def LaunchDetection_AbridgedAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    LaunchDetection_AbridgedAddSource(builder, source)

def LaunchDetection_AbridgedAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    LaunchDetection_AbridgedAddOrigin(builder, origin)

def LaunchDetection_AbridgedAddDescriptor(builder, descriptor):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(descriptor), 0)

def AddDescriptor(builder, descriptor):
    LaunchDetection_AbridgedAddDescriptor(builder, descriptor)

def LaunchDetection_AbridgedAddOrigNetwork(builder, origNetwork):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origNetwork), 0)

def AddOrigNetwork(builder, origNetwork):
    LaunchDetection_AbridgedAddOrigNetwork(builder, origNetwork)

def LaunchDetection_AbridgedAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(21, dataMode, 0)

def AddDataMode(builder, dataMode):
    LaunchDetection_AbridgedAddDataMode(builder, dataMode)

def LaunchDetection_AbridgedAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    LaunchDetection_AbridgedAddCreatedAt(builder, createdAt)

def LaunchDetection_AbridgedAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    LaunchDetection_AbridgedAddCreatedBy(builder, createdBy)

def LaunchDetection_AbridgedAddUpdatedAt(builder, updatedAt):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(updatedAt), 0)

def AddUpdatedAt(builder, updatedAt):
    LaunchDetection_AbridgedAddUpdatedAt(builder, updatedAt)

def LaunchDetection_AbridgedAddUpdatedBy(builder, updatedBy):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(updatedBy), 0)

def AddUpdatedBy(builder, updatedBy):
    LaunchDetection_AbridgedAddUpdatedBy(builder, updatedBy)

def LaunchDetection_AbridgedEnd(builder):
    return builder.EndObject()

def End(builder):
    return LaunchDetection_AbridgedEnd(builder)


class LaunchDetection_AbridgedT(object):

    # LaunchDetection_AbridgedT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.launchTime = None  # type: str
        self.messageType = None  # type: str
        self.launchLatitude = 0.0  # type: float
        self.launchLongitude = 0.0  # type: float
        self.launchAzimuth = 0.0  # type: float
        self.raan = 0.0  # type: float
        self.inclination = 0.0  # type: float
        self.observationTime = None  # type: str
        self.observationLatitude = 0.0  # type: float
        self.observationLongitude = 0.0  # type: float
        self.observationAltitude = 0.0  # type: float
        self.stereoFlag = False  # type: bool
        self.highZenithAzimuth = False  # type: bool
        self.sequenceNumber = 0  # type: int
        self.eventId = None  # type: str
        self.source = None  # type: str
        self.origin = None  # type: str
        self.descriptor = None  # type: str
        self.origNetwork = None  # type: str
        self.dataMode = 0  # type: int
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.updatedAt = None  # type: str
        self.updatedBy = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        launchDetectionAbridged = LaunchDetection_Abridged()
        launchDetectionAbridged.Init(buf, pos)
        return cls.InitFromObj(launchDetectionAbridged)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, launchDetectionAbridged):
        x = LaunchDetection_AbridgedT()
        x._UnPack(launchDetectionAbridged)
        return x

    # LaunchDetection_AbridgedT
    def _UnPack(self, launchDetectionAbridged):
        if launchDetectionAbridged is None:
            return
        self.id = launchDetectionAbridged.Id()
        self.classificationMarking = launchDetectionAbridged.ClassificationMarking()
        self.launchTime = launchDetectionAbridged.LaunchTime()
        self.messageType = launchDetectionAbridged.MessageType()
        self.launchLatitude = launchDetectionAbridged.LaunchLatitude()
        self.launchLongitude = launchDetectionAbridged.LaunchLongitude()
        self.launchAzimuth = launchDetectionAbridged.LaunchAzimuth()
        self.raan = launchDetectionAbridged.Raan()
        self.inclination = launchDetectionAbridged.Inclination()
        self.observationTime = launchDetectionAbridged.ObservationTime()
        self.observationLatitude = launchDetectionAbridged.ObservationLatitude()
        self.observationLongitude = launchDetectionAbridged.ObservationLongitude()
        self.observationAltitude = launchDetectionAbridged.ObservationAltitude()
        self.stereoFlag = launchDetectionAbridged.StereoFlag()
        self.highZenithAzimuth = launchDetectionAbridged.HighZenithAzimuth()
        self.sequenceNumber = launchDetectionAbridged.SequenceNumber()
        self.eventId = launchDetectionAbridged.EventId()
        self.source = launchDetectionAbridged.Source()
        self.origin = launchDetectionAbridged.Origin()
        self.descriptor = launchDetectionAbridged.Descriptor()
        self.origNetwork = launchDetectionAbridged.OrigNetwork()
        self.dataMode = launchDetectionAbridged.DataMode()
        self.createdAt = launchDetectionAbridged.CreatedAt()
        self.createdBy = launchDetectionAbridged.CreatedBy()
        self.updatedAt = launchDetectionAbridged.UpdatedAt()
        self.updatedBy = launchDetectionAbridged.UpdatedBy()

    # LaunchDetection_AbridgedT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.launchTime is not None:
            launchTime = builder.CreateString(self.launchTime)
        if self.messageType is not None:
            messageType = builder.CreateString(self.messageType)
        if self.observationTime is not None:
            observationTime = builder.CreateString(self.observationTime)
        if self.eventId is not None:
            eventId = builder.CreateString(self.eventId)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        if self.descriptor is not None:
            descriptor = builder.CreateString(self.descriptor)
        if self.origNetwork is not None:
            origNetwork = builder.CreateString(self.origNetwork)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.updatedAt is not None:
            updatedAt = builder.CreateString(self.updatedAt)
        if self.updatedBy is not None:
            updatedBy = builder.CreateString(self.updatedBy)
        LaunchDetection_AbridgedStart(builder)
        if self.id is not None:
            LaunchDetection_AbridgedAddId(builder, id)
        if self.classificationMarking is not None:
            LaunchDetection_AbridgedAddClassificationMarking(builder, classificationMarking)
        if self.launchTime is not None:
            LaunchDetection_AbridgedAddLaunchTime(builder, launchTime)
        if self.messageType is not None:
            LaunchDetection_AbridgedAddMessageType(builder, messageType)
        LaunchDetection_AbridgedAddLaunchLatitude(builder, self.launchLatitude)
        LaunchDetection_AbridgedAddLaunchLongitude(builder, self.launchLongitude)
        LaunchDetection_AbridgedAddLaunchAzimuth(builder, self.launchAzimuth)
        LaunchDetection_AbridgedAddRaan(builder, self.raan)
        LaunchDetection_AbridgedAddInclination(builder, self.inclination)
        if self.observationTime is not None:
            LaunchDetection_AbridgedAddObservationTime(builder, observationTime)
        LaunchDetection_AbridgedAddObservationLatitude(builder, self.observationLatitude)
        LaunchDetection_AbridgedAddObservationLongitude(builder, self.observationLongitude)
        LaunchDetection_AbridgedAddObservationAltitude(builder, self.observationAltitude)
        LaunchDetection_AbridgedAddStereoFlag(builder, self.stereoFlag)
        LaunchDetection_AbridgedAddHighZenithAzimuth(builder, self.highZenithAzimuth)
        LaunchDetection_AbridgedAddSequenceNumber(builder, self.sequenceNumber)
        if self.eventId is not None:
            LaunchDetection_AbridgedAddEventId(builder, eventId)
        if self.source is not None:
            LaunchDetection_AbridgedAddSource(builder, source)
        if self.origin is not None:
            LaunchDetection_AbridgedAddOrigin(builder, origin)
        if self.descriptor is not None:
            LaunchDetection_AbridgedAddDescriptor(builder, descriptor)
        if self.origNetwork is not None:
            LaunchDetection_AbridgedAddOrigNetwork(builder, origNetwork)
        LaunchDetection_AbridgedAddDataMode(builder, self.dataMode)
        if self.createdAt is not None:
            LaunchDetection_AbridgedAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            LaunchDetection_AbridgedAddCreatedBy(builder, createdBy)
        if self.updatedAt is not None:
            LaunchDetection_AbridgedAddUpdatedAt(builder, updatedAt)
        if self.updatedBy is not None:
            LaunchDetection_AbridgedAddUpdatedBy(builder, updatedBy)
        launchDetectionAbridged = LaunchDetection_AbridgedEnd(builder)
        return launchDetectionAbridged
