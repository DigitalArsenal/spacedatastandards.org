# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
class Ephemeris_Ingest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Ephemeris_Ingest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsEphemeris_Ingest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Ephemeris_IngestBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x45\x50\x48\x45", size_prefixed=size_prefixed)

    # Ephemeris_Ingest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique identifier of the record, auto-generated by the system.
    # Example: /// Example: EPHEMERIS-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Ephemeris_Ingest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Classification marking of the data in IC/CAPCO Portion-marked format.
    # Example: /// Example: U
    # Constraints: Minimum length = 1, Maximum length = 128
    # Ephemeris_Ingest
    def ClassificationMarking(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
    # Example: /// Example: ES-ID
    # Constraints: Minimum length = 1, Maximum length = 36
    # Ephemeris_Ingest
    def EsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Time associated with the Ephemeris Point, in ISO8601 UTC format.
    # Example: /// Example: 2018-01-01T16:00:00.123456Z
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Xpos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Ypos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Zpos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Xvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Yvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Zvel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Xaccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Yaccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
    # Example: /// Example: 1.1
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Zaccel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
    # The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
    # &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
    # x&nbsp;&nbsp;&nbsp;&nbsp;1
    # y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
    # z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
    # x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
    # y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
    # z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
    # The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
    # Example: /// Example: No example provided.
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def Cov(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Ephemeris_Ingest
    def CovLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Ephemeris_Ingest
    def CovIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # Time the row was created in the database, auto-populated by the system.
    # Example: /// Example: 2018-01-01T16:00:00.123Z
    # Constraints: No constraints specified.
    # Ephemeris_Ingest
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Application user who created the row in the database, auto-populated by the system.
    # Example: /// Example: some.user
    # Constraints: Minimum length = 1, Maximum length = 64
    # Ephemeris_Ingest
    def CreatedBy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Source of the data.
    # Example: /// Example: Bluestaq
    # Constraints: Minimum length = 1, Maximum length = 64
    # Ephemeris_Ingest
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
    # EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
    # REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
    # SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
    # TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
    # Example: /// Example: TEST
    # Constraints: Minimum length = 1, Maximum length = 32
    # Ephemeris_Ingest
    def DataMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Unique identifier of the on-orbit satellite object.
    # Example: /// Example: ONORBIT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Ephemeris_Ingest
    def IdOnOrbit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
    # Example: /// Example: ORIGOBJECT-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # Ephemeris_Ingest
    def OrigObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
    # Example: /// Example: THIRD_PARTY_DATASOURCE
    # Constraints: Minimum length = 0, Maximum length = 64
    # Ephemeris_Ingest
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Ephemeris_IngestStart(builder):
    builder.StartObject(21)

def Start(builder):
    Ephemeris_IngestStart(builder)

def Ephemeris_IngestAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    Ephemeris_IngestAddId(builder, id)

def Ephemeris_IngestAddClassificationMarking(builder, classificationMarking):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(classificationMarking), 0)

def AddClassificationMarking(builder, classificationMarking):
    Ephemeris_IngestAddClassificationMarking(builder, classificationMarking)

def Ephemeris_IngestAddEsId(builder, esId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(esId), 0)

def AddEsId(builder, esId):
    Ephemeris_IngestAddEsId(builder, esId)

def Ephemeris_IngestAddTs(builder, ts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ts), 0)

def AddTs(builder, ts):
    Ephemeris_IngestAddTs(builder, ts)

def Ephemeris_IngestAddXpos(builder, xpos):
    builder.PrependFloat64Slot(4, xpos, 0.0)

def AddXpos(builder, xpos):
    Ephemeris_IngestAddXpos(builder, xpos)

def Ephemeris_IngestAddYpos(builder, ypos):
    builder.PrependFloat64Slot(5, ypos, 0.0)

def AddYpos(builder, ypos):
    Ephemeris_IngestAddYpos(builder, ypos)

def Ephemeris_IngestAddZpos(builder, zpos):
    builder.PrependFloat64Slot(6, zpos, 0.0)

def AddZpos(builder, zpos):
    Ephemeris_IngestAddZpos(builder, zpos)

def Ephemeris_IngestAddXvel(builder, xvel):
    builder.PrependFloat64Slot(7, xvel, 0.0)

def AddXvel(builder, xvel):
    Ephemeris_IngestAddXvel(builder, xvel)

def Ephemeris_IngestAddYvel(builder, yvel):
    builder.PrependFloat64Slot(8, yvel, 0.0)

def AddYvel(builder, yvel):
    Ephemeris_IngestAddYvel(builder, yvel)

def Ephemeris_IngestAddZvel(builder, zvel):
    builder.PrependFloat64Slot(9, zvel, 0.0)

def AddZvel(builder, zvel):
    Ephemeris_IngestAddZvel(builder, zvel)

def Ephemeris_IngestAddXaccel(builder, xaccel):
    builder.PrependFloat64Slot(10, xaccel, 0.0)

def AddXaccel(builder, xaccel):
    Ephemeris_IngestAddXaccel(builder, xaccel)

def Ephemeris_IngestAddYaccel(builder, yaccel):
    builder.PrependFloat64Slot(11, yaccel, 0.0)

def AddYaccel(builder, yaccel):
    Ephemeris_IngestAddYaccel(builder, yaccel)

def Ephemeris_IngestAddZaccel(builder, zaccel):
    builder.PrependFloat64Slot(12, zaccel, 0.0)

def AddZaccel(builder, zaccel):
    Ephemeris_IngestAddZaccel(builder, zaccel)

def Ephemeris_IngestAddCov(builder, cov):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(cov), 0)

def AddCov(builder, cov):
    Ephemeris_IngestAddCov(builder, cov)

def Ephemeris_IngestStartCovVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCovVector(builder, numElems):
    return Ephemeris_IngestStartCovVector(builder, numElems)

def Ephemeris_IngestAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    Ephemeris_IngestAddCreatedAt(builder, createdAt)

def Ephemeris_IngestAddCreatedBy(builder, createdBy):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(createdBy), 0)

def AddCreatedBy(builder, createdBy):
    Ephemeris_IngestAddCreatedBy(builder, createdBy)

def Ephemeris_IngestAddSource(builder, source):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(source), 0)

def AddSource(builder, source):
    Ephemeris_IngestAddSource(builder, source)

def Ephemeris_IngestAddDataMode(builder, dataMode):
    builder.PrependInt8Slot(17, dataMode, 0)

def AddDataMode(builder, dataMode):
    Ephemeris_IngestAddDataMode(builder, dataMode)

def Ephemeris_IngestAddIdOnOrbit(builder, idOnOrbit):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(idOnOrbit), 0)

def AddIdOnOrbit(builder, idOnOrbit):
    Ephemeris_IngestAddIdOnOrbit(builder, idOnOrbit)

def Ephemeris_IngestAddOrigObjectId(builder, origObjectId):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(origObjectId), 0)

def AddOrigObjectId(builder, origObjectId):
    Ephemeris_IngestAddOrigObjectId(builder, origObjectId)

def Ephemeris_IngestAddOrigin(builder, origin):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)

def AddOrigin(builder, origin):
    Ephemeris_IngestAddOrigin(builder, origin)

def Ephemeris_IngestEnd(builder):
    return builder.EndObject()

def End(builder):
    return Ephemeris_IngestEnd(builder)

try:
    from typing import List
except:
    pass

class Ephemeris_IngestT(object):

    # Ephemeris_IngestT
    def __init__(self):
        self.id = None  # type: str
        self.classificationMarking = None  # type: str
        self.esId = None  # type: str
        self.ts = None  # type: str
        self.xpos = 0.0  # type: float
        self.ypos = 0.0  # type: float
        self.zpos = 0.0  # type: float
        self.xvel = 0.0  # type: float
        self.yvel = 0.0  # type: float
        self.zvel = 0.0  # type: float
        self.xaccel = 0.0  # type: float
        self.yaccel = 0.0  # type: float
        self.zaccel = 0.0  # type: float
        self.cov = None  # type: List[str]
        self.createdAt = None  # type: str
        self.createdBy = None  # type: str
        self.source = None  # type: str
        self.dataMode = 0  # type: int
        self.idOnOrbit = None  # type: str
        self.origObjectId = None  # type: str
        self.origin = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ephemerisIngest = Ephemeris_Ingest()
        ephemerisIngest.Init(buf, pos)
        return cls.InitFromObj(ephemerisIngest)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ephemerisIngest):
        x = Ephemeris_IngestT()
        x._UnPack(ephemerisIngest)
        return x

    # Ephemeris_IngestT
    def _UnPack(self, ephemerisIngest):
        if ephemerisIngest is None:
            return
        self.id = ephemerisIngest.Id()
        self.classificationMarking = ephemerisIngest.ClassificationMarking()
        self.esId = ephemerisIngest.EsId()
        self.ts = ephemerisIngest.Ts()
        self.xpos = ephemerisIngest.Xpos()
        self.ypos = ephemerisIngest.Ypos()
        self.zpos = ephemerisIngest.Zpos()
        self.xvel = ephemerisIngest.Xvel()
        self.yvel = ephemerisIngest.Yvel()
        self.zvel = ephemerisIngest.Zvel()
        self.xaccel = ephemerisIngest.Xaccel()
        self.yaccel = ephemerisIngest.Yaccel()
        self.zaccel = ephemerisIngest.Zaccel()
        if not ephemerisIngest.CovIsNone():
            self.cov = []
            for i in range(ephemerisIngest.CovLength()):
                self.cov.append(ephemerisIngest.Cov(i))
        self.createdAt = ephemerisIngest.CreatedAt()
        self.createdBy = ephemerisIngest.CreatedBy()
        self.source = ephemerisIngest.Source()
        self.dataMode = ephemerisIngest.DataMode()
        self.idOnOrbit = ephemerisIngest.IdOnOrbit()
        self.origObjectId = ephemerisIngest.OrigObjectId()
        self.origin = ephemerisIngest.Origin()

    # Ephemeris_IngestT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.classificationMarking is not None:
            classificationMarking = builder.CreateString(self.classificationMarking)
        if self.esId is not None:
            esId = builder.CreateString(self.esId)
        if self.ts is not None:
            ts = builder.CreateString(self.ts)
        if self.cov is not None:
            covlist = []
            for i in range(len(self.cov)):
                covlist.append(builder.CreateString(self.cov[i]))
            Ephemeris_IngestStartCovVector(builder, len(self.cov))
            for i in reversed(range(len(self.cov))):
                builder.PrependUOffsetTRelative(covlist[i])
            cov = builder.EndVector()
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        if self.createdBy is not None:
            createdBy = builder.CreateString(self.createdBy)
        if self.source is not None:
            source = builder.CreateString(self.source)
        if self.idOnOrbit is not None:
            idOnOrbit = builder.CreateString(self.idOnOrbit)
        if self.origObjectId is not None:
            origObjectId = builder.CreateString(self.origObjectId)
        if self.origin is not None:
            origin = builder.CreateString(self.origin)
        Ephemeris_IngestStart(builder)
        if self.id is not None:
            Ephemeris_IngestAddId(builder, id)
        if self.classificationMarking is not None:
            Ephemeris_IngestAddClassificationMarking(builder, classificationMarking)
        if self.esId is not None:
            Ephemeris_IngestAddEsId(builder, esId)
        if self.ts is not None:
            Ephemeris_IngestAddTs(builder, ts)
        Ephemeris_IngestAddXpos(builder, self.xpos)
        Ephemeris_IngestAddYpos(builder, self.ypos)
        Ephemeris_IngestAddZpos(builder, self.zpos)
        Ephemeris_IngestAddXvel(builder, self.xvel)
        Ephemeris_IngestAddYvel(builder, self.yvel)
        Ephemeris_IngestAddZvel(builder, self.zvel)
        Ephemeris_IngestAddXaccel(builder, self.xaccel)
        Ephemeris_IngestAddYaccel(builder, self.yaccel)
        Ephemeris_IngestAddZaccel(builder, self.zaccel)
        if self.cov is not None:
            Ephemeris_IngestAddCov(builder, cov)
        if self.createdAt is not None:
            Ephemeris_IngestAddCreatedAt(builder, createdAt)
        if self.createdBy is not None:
            Ephemeris_IngestAddCreatedBy(builder, createdBy)
        if self.source is not None:
            Ephemeris_IngestAddSource(builder, source)
        Ephemeris_IngestAddDataMode(builder, self.dataMode)
        if self.idOnOrbit is not None:
            Ephemeris_IngestAddIdOnOrbit(builder, idOnOrbit)
        if self.origObjectId is not None:
            Ephemeris_IngestAddOrigObjectId(builder, origObjectId)
        if self.origin is not None:
            Ephemeris_IngestAddOrigin(builder, origin)
        ephemerisIngest = Ephemeris_IngestEnd(builder)
        return ephemerisIngest
