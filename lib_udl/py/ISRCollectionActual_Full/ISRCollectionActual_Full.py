# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

# /// Actual start and stop for the collection.
class ISRCollectionActual_Full(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ISRCollectionActual_Full()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsISRCollectionActual_Full(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ISRCollectionActual_FullBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x49\x53\x52\x43", size_prefixed=size_prefixed)

    # ISRCollectionActual_Full
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unique Identifier of actual collection period for historical archive.
    # Example: /// Example: ISRCOLLECTIONACTUAL-ID
    # Constraints: Minimum length = 0, Maximum length = 36
    # ISRCollectionActual_Full
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Start time the collection actually occurred, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionActual_Full
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Stop time the collection actually occurred, in ISO 8601 UTC format.
    # Example: /// Example: 2021-01-19T01:01:15.001Z
    # Constraints: No constraints specified.
    # ISRCollectionActual_Full
    def Stop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ISRCollectionActual_FullStart(builder):
    builder.StartObject(3)

def Start(builder):
    ISRCollectionActual_FullStart(builder)

def ISRCollectionActual_FullAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    ISRCollectionActual_FullAddId(builder, id)

def ISRCollectionActual_FullAddStart(builder, start):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)

def AddStart(builder, start):
    ISRCollectionActual_FullAddStart(builder, start)

def ISRCollectionActual_FullAddStop(builder, stop):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stop), 0)

def AddStop(builder, stop):
    ISRCollectionActual_FullAddStop(builder, stop)

def ISRCollectionActual_FullEnd(builder):
    return builder.EndObject()

def End(builder):
    return ISRCollectionActual_FullEnd(builder)


class ISRCollectionActual_FullT(object):

    # ISRCollectionActual_FullT
    def __init__(self):
        self.id = None  # type: str
        self.start = None  # type: str
        self.stop = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        isrcollectionActualFull = ISRCollectionActual_Full()
        isrcollectionActualFull.Init(buf, pos)
        return cls.InitFromObj(isrcollectionActualFull)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, isrcollectionActualFull):
        x = ISRCollectionActual_FullT()
        x._UnPack(isrcollectionActualFull)
        return x

    # ISRCollectionActual_FullT
    def _UnPack(self, isrcollectionActualFull):
        if isrcollectionActualFull is None:
            return
        self.id = isrcollectionActualFull.Id()
        self.start = isrcollectionActualFull.Start()
        self.stop = isrcollectionActualFull.Stop()

    # ISRCollectionActual_FullT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.start is not None:
            start = builder.CreateString(self.start)
        if self.stop is not None:
            stop = builder.CreateString(self.stop)
        ISRCollectionActual_FullStart(builder)
        if self.id is not None:
            ISRCollectionActual_FullAddId(builder, id)
        if self.start is not None:
            ISRCollectionActual_FullAddStart(builder, start)
        if self.stop is not None:
            ISRCollectionActual_FullAddStop(builder, stop)
        isrcollectionActualFull = ISRCollectionActual_FullEnd(builder)
        return isrcollectionActualFull
