// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection that specifies the naval flight operations for this ATO.
public struct IndividualAircraftTasking_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static IndividualAircraftTasking_Abridged GetRootAsIndividualAircraftTasking_Abridged(ByteBuffer _bb) { return GetRootAsIndividualAircraftTasking_Abridged(_bb, new IndividualAircraftTasking_Abridged()); }
  public static IndividualAircraftTasking_Abridged GetRootAsIndividualAircraftTasking_Abridged(ByteBuffer _bb, IndividualAircraftTasking_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IndividualAircraftTasking_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "INDI"); }
  public static bool VerifyIndividualAircraftTasking_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("INDI", false, IndividualAircraftTasking_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IndividualAircraftTasking_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The number of aircraft participating in this mission.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumAcft { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
  /// Example: /// Example: F35A
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string AcftType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAcftTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetAcftTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetAcftTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// The call sign assigned to this mission aircraft.
  /// Example: /// Example: EAGLE47
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CallSign { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(8); }
  /// The code that indicates the ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 6A2W3
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string PriConfigCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriConfigCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPriConfigCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPriConfigCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// The code for the secondary ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 2S2WG
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string SecConfigCode { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSecConfigCodeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSecConfigCodeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSecConfigCodeArray() { return __p.__vector_as_array<byte>(12); }
  /// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
  /// Example: /// Example: EE47
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Link16CallSign { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLink16CallSignBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLink16CallSignBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLink16CallSignArray() { return __p.__vector_as_array<byte>(14); }
  /// The TACAN channel assigned to this mission aircraft.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int TacanChan { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  public string JuAddress(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int JuAddressLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 111
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string IffSifMode1Code { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIffSifMode1CodeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIffSifMode1CodeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIffSifMode1CodeArray() { return __p.__vector_as_array<byte>(20); }
  /// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 20147
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string IffSifMode2Code { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIffSifMode2CodeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIffSifMode2CodeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIffSifMode2CodeArray() { return __p.__vector_as_array<byte>(22); }
  /// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 30147
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string IffSifMode3Code { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIffSifMode3CodeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIffSifMode3CodeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIffSifMode3CodeArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<IndividualAircraftTasking_Abridged> CreateIndividualAircraftTasking_Abridged(FlatBufferBuilder builder,
      int numAcft = 0,
      StringOffset acftTypeOffset = default(StringOffset),
      StringOffset callSignOffset = default(StringOffset),
      StringOffset priConfigCodeOffset = default(StringOffset),
      StringOffset secConfigCodeOffset = default(StringOffset),
      StringOffset link16CallSignOffset = default(StringOffset),
      int tacanChan = 0,
      VectorOffset juAddressOffset = default(VectorOffset),
      StringOffset iffSifMode1CodeOffset = default(StringOffset),
      StringOffset iffSifMode2CodeOffset = default(StringOffset),
      StringOffset iffSifMode3CodeOffset = default(StringOffset)) {
    builder.StartTable(11);
    IndividualAircraftTasking_Abridged.AddIffSifMode3Code(builder, iffSifMode3CodeOffset);
    IndividualAircraftTasking_Abridged.AddIffSifMode2Code(builder, iffSifMode2CodeOffset);
    IndividualAircraftTasking_Abridged.AddIffSifMode1Code(builder, iffSifMode1CodeOffset);
    IndividualAircraftTasking_Abridged.AddJuAddress(builder, juAddressOffset);
    IndividualAircraftTasking_Abridged.AddTacanChan(builder, tacanChan);
    IndividualAircraftTasking_Abridged.AddLink16CallSign(builder, link16CallSignOffset);
    IndividualAircraftTasking_Abridged.AddSecConfigCode(builder, secConfigCodeOffset);
    IndividualAircraftTasking_Abridged.AddPriConfigCode(builder, priConfigCodeOffset);
    IndividualAircraftTasking_Abridged.AddCallSign(builder, callSignOffset);
    IndividualAircraftTasking_Abridged.AddAcftType(builder, acftTypeOffset);
    IndividualAircraftTasking_Abridged.AddNumAcft(builder, numAcft);
    return IndividualAircraftTasking_Abridged.EndIndividualAircraftTasking_Abridged(builder);
  }

  public static void StartIndividualAircraftTasking_Abridged(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddNumAcft(FlatBufferBuilder builder, int numAcft) { builder.AddInt(0, numAcft, 0); }
  public static void AddAcftType(FlatBufferBuilder builder, StringOffset acftTypeOffset) { builder.AddOffset(1, acftTypeOffset.Value, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(2, callSignOffset.Value, 0); }
  public static void AddPriConfigCode(FlatBufferBuilder builder, StringOffset priConfigCodeOffset) { builder.AddOffset(3, priConfigCodeOffset.Value, 0); }
  public static void AddSecConfigCode(FlatBufferBuilder builder, StringOffset secConfigCodeOffset) { builder.AddOffset(4, secConfigCodeOffset.Value, 0); }
  public static void AddLink16CallSign(FlatBufferBuilder builder, StringOffset link16CallSignOffset) { builder.AddOffset(5, link16CallSignOffset.Value, 0); }
  public static void AddTacanChan(FlatBufferBuilder builder, int tacanChan) { builder.AddInt(6, tacanChan, 0); }
  public static void AddJuAddress(FlatBufferBuilder builder, VectorOffset juAddressOffset) { builder.AddOffset(7, juAddressOffset.Value, 0); }
  public static VectorOffset CreateJuAddressVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateJuAddressVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateJuAddressVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateJuAddressVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartJuAddressVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIffSifMode1Code(FlatBufferBuilder builder, StringOffset iffSifMode1CodeOffset) { builder.AddOffset(8, iffSifMode1CodeOffset.Value, 0); }
  public static void AddIffSifMode2Code(FlatBufferBuilder builder, StringOffset iffSifMode2CodeOffset) { builder.AddOffset(9, iffSifMode2CodeOffset.Value, 0); }
  public static void AddIffSifMode3Code(FlatBufferBuilder builder, StringOffset iffSifMode3CodeOffset) { builder.AddOffset(10, iffSifMode3CodeOffset.Value, 0); }
  public static Offset<IndividualAircraftTasking_Abridged> EndIndividualAircraftTasking_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IndividualAircraftTasking_Abridged>(o);
  }
  public static void FinishIndividualAircraftTasking_AbridgedBuffer(FlatBufferBuilder builder, Offset<IndividualAircraftTasking_Abridged> offset) { builder.Finish(offset.Value, "INDI"); }
  public static void FinishSizePrefixedIndividualAircraftTasking_AbridgedBuffer(FlatBufferBuilder builder, Offset<IndividualAircraftTasking_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "INDI"); }
  public IndividualAircraftTasking_AbridgedT UnPack() {
    var _o = new IndividualAircraftTasking_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IndividualAircraftTasking_AbridgedT _o) {
    _o.NumAcft = this.NumAcft;
    _o.AcftType = this.AcftType;
    _o.CallSign = this.CallSign;
    _o.PriConfigCode = this.PriConfigCode;
    _o.SecConfigCode = this.SecConfigCode;
    _o.Link16CallSign = this.Link16CallSign;
    _o.TacanChan = this.TacanChan;
    _o.JuAddress = new List<string>();
    for (var _j = 0; _j < this.JuAddressLength; ++_j) {_o.JuAddress.Add(this.JuAddress(_j));}
    _o.IffSifMode1Code = this.IffSifMode1Code;
    _o.IffSifMode2Code = this.IffSifMode2Code;
    _o.IffSifMode3Code = this.IffSifMode3Code;
  }
  public static Offset<IndividualAircraftTasking_Abridged> Pack(FlatBufferBuilder builder, IndividualAircraftTasking_AbridgedT _o) {
    if (_o == null) return default(Offset<IndividualAircraftTasking_Abridged>);
    var _acftType = _o.AcftType == null ? default(StringOffset) : builder.CreateString(_o.AcftType);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _priConfigCode = _o.PriConfigCode == null ? default(StringOffset) : builder.CreateString(_o.PriConfigCode);
    var _secConfigCode = _o.SecConfigCode == null ? default(StringOffset) : builder.CreateString(_o.SecConfigCode);
    var _link16CallSign = _o.Link16CallSign == null ? default(StringOffset) : builder.CreateString(_o.Link16CallSign);
    var _juAddress = default(VectorOffset);
    if (_o.JuAddress != null) {
      var __juAddress = new StringOffset[_o.JuAddress.Count];
      for (var _j = 0; _j < __juAddress.Length; ++_j) { __juAddress[_j] = builder.CreateString(_o.JuAddress[_j]); }
      _juAddress = CreateJuAddressVector(builder, __juAddress);
    }
    var _iffSifMode1Code = _o.IffSifMode1Code == null ? default(StringOffset) : builder.CreateString(_o.IffSifMode1Code);
    var _iffSifMode2Code = _o.IffSifMode2Code == null ? default(StringOffset) : builder.CreateString(_o.IffSifMode2Code);
    var _iffSifMode3Code = _o.IffSifMode3Code == null ? default(StringOffset) : builder.CreateString(_o.IffSifMode3Code);
    return CreateIndividualAircraftTasking_Abridged(
      builder,
      _o.NumAcft,
      _acftType,
      _callSign,
      _priConfigCode,
      _secConfigCode,
      _link16CallSign,
      _o.TacanChan,
      _juAddress,
      _iffSifMode1Code,
      _iffSifMode2Code,
      _iffSifMode3Code);
  }
}

public class IndividualAircraftTasking_AbridgedT
{
  public int NumAcft { get; set; }
  public string AcftType { get; set; }
  public string CallSign { get; set; }
  public string PriConfigCode { get; set; }
  public string SecConfigCode { get; set; }
  public string Link16CallSign { get; set; }
  public int TacanChan { get; set; }
  public List<string> JuAddress { get; set; }
  public string IffSifMode1Code { get; set; }
  public string IffSifMode2Code { get; set; }
  public string IffSifMode3Code { get; set; }

  public IndividualAircraftTasking_AbridgedT() {
    this.NumAcft = 0;
    this.AcftType = null;
    this.CallSign = null;
    this.PriConfigCode = null;
    this.SecConfigCode = null;
    this.Link16CallSign = null;
    this.TacanChan = 0;
    this.JuAddress = null;
    this.IffSifMode1Code = null;
    this.IffSifMode2Code = null;
    this.IffSifMode3Code = null;
  }
  public static IndividualAircraftTasking_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return IndividualAircraftTasking_Abridged.GetRootAsIndividualAircraftTasking_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IndividualAircraftTasking_Abridged.FinishIndividualAircraftTasking_AbridgedBuffer(fbb, IndividualAircraftTasking_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IndividualAircraftTasking_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*NumAcft*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*AcftType*/, false)
      && verifier.VerifyString(tablePos, 8 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 10 /*PriConfigCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*SecConfigCode*/, false)
      && verifier.VerifyString(tablePos, 14 /*Link16CallSign*/, false)
      && verifier.VerifyField(tablePos, 16 /*TacanChan*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*JuAddress*/, false)
      && verifier.VerifyString(tablePos, 20 /*IffSifMode1Code*/, false)
      && verifier.VerifyString(tablePos, 22 /*IffSifMode2Code*/, false)
      && verifier.VerifyString(tablePos, 24 /*IffSifMode3Code*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
