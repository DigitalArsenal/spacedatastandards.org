// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
public struct Track_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Track_Abridged GetRootAsTrack_Abridged(ByteBuffer _bb) { return GetRootAsTrack_Abridged(_bb, new Track_Abridged()); }
  public static Track_Abridged GetRootAsTrack_Abridged(ByteBuffer _bb, Track_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Track_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TRAC"); }
  public static bool VerifyTrack_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("TRAC", false, Track_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Track_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Cntct { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCntctBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCntctBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCntctArray() { return __p.__vector_as_array<byte>(8); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(10); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(12); }
  /// Message Timestamp.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string MsgTs { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgTsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMsgTsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMsgTsArray() { return __p.__vector_as_array<byte>(14); }
  /// Mission ID related to the track.
  /// Example: /// Example: msnId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MsnId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMsnIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMsnIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AssetNat { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetNatBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAssetNatBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAssetNatArray() { return __p.__vector_as_array<byte>(18); }
  /// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
  /// Example: /// Example: asset
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Asset { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAssetBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAssetArray() { return __p.__vector_as_array<byte>(20); }
  /// Id/name of sensor providing the track data.
  /// Example: /// Example: sen
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Sen { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSenBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSenArray() { return __p.__vector_as_array<byte>(22); }
  /// Sensor quality.
  /// Example: /// Example: senQual
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string SenQual { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenQualBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSenQualBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSenQualArray() { return __p.__vector_as_array<byte>(24); }
  /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  /// Example: /// Example: trkId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrkId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTrkIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTrkIdArray() { return __p.__vector_as_array<byte>(26); }
  /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  /// Example: /// Example: trkNum
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TrkNum { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkNumBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTrkNumBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTrkNumArray() { return __p.__vector_as_array<byte>(28); }
  /// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
  /// Example: /// Example: INITIATING
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TrkStat { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkStatBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTrkStatBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTrkStatArray() { return __p.__vector_as_array<byte>(30); }
  /// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: NATO
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ObjNat { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjNatBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetObjNatBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetObjNatArray() { return __p.__vector_as_array<byte>(32); }
  /// The UID or designation of the tracked object.
  /// Example: /// Example: objId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ObjId { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjIdBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetObjIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetObjIdArray() { return __p.__vector_as_array<byte>(34); }
  /// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  /// Example: /// Example: WATERCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjType { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjTypeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetObjTypeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetObjTypeArray() { return __p.__vector_as_array<byte>(36); }
  /// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjSpec { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjSpecBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetObjSpecBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetObjSpecArray() { return __p.__vector_as_array<byte>(38); }
  /// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjPlat { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjPlatBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetObjPlatBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetObjPlatArray() { return __p.__vector_as_array<byte>(40); }
  /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  /// Example: /// Example: HOLDING
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjAct { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjActBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetObjActBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetObjActArray() { return __p.__vector_as_array<byte>(42); }
  /// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
  /// AIS: Derived from an automated identification system source.
  /// BFT: Derived from a blue force tracking source.
  /// BIOMETRICS: Derived from a biometrics source.
  /// COMINT: Derived from a communications intelligence source.
  /// DOPPLER: Derived from a radar doppler source.
  /// ELINT: Derived from an electronics intelligence source.
  /// HRR: Derived from a radar high range resolution source.
  /// HUMINT: Derived from a human intelligence source.
  /// IMAGE: Derived from a still or motion imagery source.
  /// MASINT: Derived from a measurement and signals intelligence source.
  /// MIXED: Derived from a combination of two or more sources.
  /// OSINT: Derived from an open source intelligence source.
  /// OTHER: Derived from other types of unspecified sources.
  /// Example: /// Example: MASINT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ModType { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModTypeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetModTypeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetModTypeArray() { return __p.__vector_as_array<byte>(44); }
  /// UUID of the track item object, applies to STANAG-4676 messages.
  /// Example: /// Example: trkItmId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrkItmId { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkItmIdBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetTrkItmIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetTrkItmIdArray() { return __p.__vector_as_array<byte>(46); }
  /// Track timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2021-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(48); }
  /// Value indicating track quality (not standardized).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int TrkQual { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
  /// Example: /// Example: MEASURED
  /// Constraints: No constraints specified.
  public string TrkPtType { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkPtTypeBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetTrkPtTypeBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetTrkPtTypeArray() { return __p.__vector_as_array<byte>(52); }
  /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjIdent { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjIdentBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetObjIdentBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetObjIdentArray() { return __p.__vector_as_array<byte>(54); }
  /// Track object identity credibility.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int IdentCred { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Track object identity reliability.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int IdentRel { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// KILO: Friendly high-value object.
  /// TRAVELLER: Suspect land or surface track following a recognized traffic route.
  /// ZOMBIE: Suspect track, object, or entity of special interest.
  /// Example: /// Example: ZOMBIE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string IdentAmp { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentAmpBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetIdentAmpBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetIdentAmpArray() { return __p.__vector_as_array<byte>(60); }
  /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  /// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// LAND: On the surface of dry land.
  /// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// SURFACE: On the surface of a body of water.
  /// SUBSURFACE: Below the surface of a body of water.
  /// UNKNOWN: Environment is not known.
  /// Example: /// Example: LAND
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Env { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnvBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetEnvBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetEnvArray() { return __p.__vector_as_array<byte>(62); }
  /// Track environment confidence estimate (not standardized).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double EnvConf { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double TrkConf { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string EcefPos(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EcefPosLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string EcefVel(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EcefVelLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string EcefAcc(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EcefAccLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track object spd, in meters/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Spd { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The track object heading, in degrees clockwise from true North at the object location.
  /// Example: /// Example: 19.7
  /// Constraints: No constraints specified.
  public double Hdng { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  /// Example: /// Example: 88.37
  /// Constraints: No constraints specified.
  public double Course { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string Lco(int j) { int o = __p.__offset(86); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LcoLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string Lcs(int j) { int o = __p.__offset(88); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LcsLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string LcPos(int j) { int o = __p.__offset(90); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LcPosLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string LcVel(int j) { int o = __p.__offset(92); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LcVelLength { get { int o = __p.__offset(92); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string LcAcc(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LcAccLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string ENUVel(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ENUVelLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string ENUPos(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ENUPosLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Covariance matrix, in meter and second based units, for the defined cartesian system.
  /// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  /// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  public string Cov(int j) { int o = __p.__offset(100); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CovLength { get { int o = __p.__offset(100); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  public string ErrEllp(int j) { int o = __p.__offset(102); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ErrEllpLength { get { int o = __p.__offset(102); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['MTI', 'POI']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(104); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(104); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
  /// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(106); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The call sign currently assigned to this track object.
  /// Example: /// Example: callSign
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CallSign { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(108); }
  /// Flag indicating that this track is fused from multiple sensor sources.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool MultiSource { get { int o = __p.__offset(110); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The J-series message type, if this track is derived from a J-series message.
  /// Example: /// Example: J12.5
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string JSeries { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJSeriesBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetJSeriesBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetJSeriesArray() { return __p.__vector_as_array<byte>(112); }
  /// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  public int Strength { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  public int M1 { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-1 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int M1v { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-2 interrogation response (military identification code).
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  public int M2 { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-2 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int M2v { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
  /// Example: /// Example: 2636
  /// Constraints: No constraints specified.
  public int M3a { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Mode-3/A validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int M3av { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(128); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(128); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(130); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(132); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(134); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Track_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(136); return o != 0 ? (Track_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Track_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(138); }

  public static Offset<Track_Abridged> CreateTrack_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset cntctOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset msgTsOffset = default(StringOffset),
      StringOffset msnIdOffset = default(StringOffset),
      StringOffset assetNatOffset = default(StringOffset),
      StringOffset assetOffset = default(StringOffset),
      StringOffset senOffset = default(StringOffset),
      StringOffset senQualOffset = default(StringOffset),
      StringOffset trkIdOffset = default(StringOffset),
      StringOffset trkNumOffset = default(StringOffset),
      StringOffset trkStatOffset = default(StringOffset),
      StringOffset objNatOffset = default(StringOffset),
      StringOffset objIdOffset = default(StringOffset),
      StringOffset objTypeOffset = default(StringOffset),
      StringOffset objSpecOffset = default(StringOffset),
      StringOffset objPlatOffset = default(StringOffset),
      StringOffset objActOffset = default(StringOffset),
      StringOffset modTypeOffset = default(StringOffset),
      StringOffset trkItmIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      int trkQual = 0,
      StringOffset trkPtTypeOffset = default(StringOffset),
      StringOffset objIdentOffset = default(StringOffset),
      int identCred = 0,
      int identRel = 0,
      StringOffset identAmpOffset = default(StringOffset),
      StringOffset envOffset = default(StringOffset),
      double envConf = 0.0,
      double trkConf = 0.0,
      VectorOffset ecefPosOffset = default(VectorOffset),
      VectorOffset ecefVelOffset = default(VectorOffset),
      VectorOffset ecefAccOffset = default(VectorOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double spd = 0.0,
      double hdng = 0.0,
      double course = 0.0,
      VectorOffset lcoOffset = default(VectorOffset),
      VectorOffset lcsOffset = default(VectorOffset),
      VectorOffset lcPosOffset = default(VectorOffset),
      VectorOffset lcVelOffset = default(VectorOffset),
      VectorOffset lcAccOffset = default(VectorOffset),
      VectorOffset eNUVelOffset = default(VectorOffset),
      VectorOffset eNUPosOffset = default(VectorOffset),
      VectorOffset covOffset = default(VectorOffset),
      VectorOffset errEllpOffset = default(VectorOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset callSignOffset = default(StringOffset),
      bool multiSource = false,
      StringOffset jSeriesOffset = default(StringOffset),
      int strength = 0,
      int m1 = 0,
      int m1v = 0,
      int m2 = 0,
      int m2v = 0,
      int m3a = 0,
      int m3av = 0,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Track_Abridged_dataMode_Enum dataMode = Track_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(68);
    Track_Abridged.AddCourse(builder, course);
    Track_Abridged.AddHdng(builder, hdng);
    Track_Abridged.AddSpd(builder, spd);
    Track_Abridged.AddAlt(builder, alt);
    Track_Abridged.AddLon(builder, lon);
    Track_Abridged.AddLat(builder, lat);
    Track_Abridged.AddTrkConf(builder, trkConf);
    Track_Abridged.AddEnvConf(builder, envConf);
    Track_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Track_Abridged.AddOrigin(builder, originOffset);
    Track_Abridged.AddSource(builder, sourceOffset);
    Track_Abridged.AddSourceDL(builder, sourceDLOffset);
    Track_Abridged.AddTags(builder, tagsOffset);
    Track_Abridged.AddM3av(builder, m3av);
    Track_Abridged.AddM3a(builder, m3a);
    Track_Abridged.AddM2v(builder, m2v);
    Track_Abridged.AddM2(builder, m2);
    Track_Abridged.AddM1v(builder, m1v);
    Track_Abridged.AddM1(builder, m1);
    Track_Abridged.AddStrength(builder, strength);
    Track_Abridged.AddJSeries(builder, jSeriesOffset);
    Track_Abridged.AddCallSign(builder, callSignOffset);
    Track_Abridged.AddSrcIds(builder, srcIdsOffset);
    Track_Abridged.AddSrcTyps(builder, srcTypsOffset);
    Track_Abridged.AddErrEllp(builder, errEllpOffset);
    Track_Abridged.AddCov(builder, covOffset);
    Track_Abridged.AddENUPos(builder, eNUPosOffset);
    Track_Abridged.AddENUVel(builder, eNUVelOffset);
    Track_Abridged.AddLcAcc(builder, lcAccOffset);
    Track_Abridged.AddLcVel(builder, lcVelOffset);
    Track_Abridged.AddLcPos(builder, lcPosOffset);
    Track_Abridged.AddLcs(builder, lcsOffset);
    Track_Abridged.AddLco(builder, lcoOffset);
    Track_Abridged.AddEcefAcc(builder, ecefAccOffset);
    Track_Abridged.AddEcefVel(builder, ecefVelOffset);
    Track_Abridged.AddEcefPos(builder, ecefPosOffset);
    Track_Abridged.AddEnv(builder, envOffset);
    Track_Abridged.AddIdentAmp(builder, identAmpOffset);
    Track_Abridged.AddIdentRel(builder, identRel);
    Track_Abridged.AddIdentCred(builder, identCred);
    Track_Abridged.AddObjIdent(builder, objIdentOffset);
    Track_Abridged.AddTrkPtType(builder, trkPtTypeOffset);
    Track_Abridged.AddTrkQual(builder, trkQual);
    Track_Abridged.AddTs(builder, tsOffset);
    Track_Abridged.AddTrkItmId(builder, trkItmIdOffset);
    Track_Abridged.AddModType(builder, modTypeOffset);
    Track_Abridged.AddObjAct(builder, objActOffset);
    Track_Abridged.AddObjPlat(builder, objPlatOffset);
    Track_Abridged.AddObjSpec(builder, objSpecOffset);
    Track_Abridged.AddObjType(builder, objTypeOffset);
    Track_Abridged.AddObjId(builder, objIdOffset);
    Track_Abridged.AddObjNat(builder, objNatOffset);
    Track_Abridged.AddTrkStat(builder, trkStatOffset);
    Track_Abridged.AddTrkNum(builder, trkNumOffset);
    Track_Abridged.AddTrkId(builder, trkIdOffset);
    Track_Abridged.AddSenQual(builder, senQualOffset);
    Track_Abridged.AddSen(builder, senOffset);
    Track_Abridged.AddAsset(builder, assetOffset);
    Track_Abridged.AddAssetNat(builder, assetNatOffset);
    Track_Abridged.AddMsnId(builder, msnIdOffset);
    Track_Abridged.AddMsgTs(builder, msgTsOffset);
    Track_Abridged.AddCreatedBy(builder, createdByOffset);
    Track_Abridged.AddCreatedAt(builder, createdAtOffset);
    Track_Abridged.AddCntct(builder, cntctOffset);
    Track_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Track_Abridged.AddId(builder, idOffset);
    Track_Abridged.AddDataMode(builder, dataMode);
    Track_Abridged.AddMultiSource(builder, multiSource);
    return Track_Abridged.EndTrack_Abridged(builder);
  }

  public static void StartTrack_Abridged(FlatBufferBuilder builder) { builder.StartTable(68); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddCntct(FlatBufferBuilder builder, StringOffset cntctOffset) { builder.AddOffset(2, cntctOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(3, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(4, createdByOffset.Value, 0); }
  public static void AddMsgTs(FlatBufferBuilder builder, StringOffset msgTsOffset) { builder.AddOffset(5, msgTsOffset.Value, 0); }
  public static void AddMsnId(FlatBufferBuilder builder, StringOffset msnIdOffset) { builder.AddOffset(6, msnIdOffset.Value, 0); }
  public static void AddAssetNat(FlatBufferBuilder builder, StringOffset assetNatOffset) { builder.AddOffset(7, assetNatOffset.Value, 0); }
  public static void AddAsset(FlatBufferBuilder builder, StringOffset assetOffset) { builder.AddOffset(8, assetOffset.Value, 0); }
  public static void AddSen(FlatBufferBuilder builder, StringOffset senOffset) { builder.AddOffset(9, senOffset.Value, 0); }
  public static void AddSenQual(FlatBufferBuilder builder, StringOffset senQualOffset) { builder.AddOffset(10, senQualOffset.Value, 0); }
  public static void AddTrkId(FlatBufferBuilder builder, StringOffset trkIdOffset) { builder.AddOffset(11, trkIdOffset.Value, 0); }
  public static void AddTrkNum(FlatBufferBuilder builder, StringOffset trkNumOffset) { builder.AddOffset(12, trkNumOffset.Value, 0); }
  public static void AddTrkStat(FlatBufferBuilder builder, StringOffset trkStatOffset) { builder.AddOffset(13, trkStatOffset.Value, 0); }
  public static void AddObjNat(FlatBufferBuilder builder, StringOffset objNatOffset) { builder.AddOffset(14, objNatOffset.Value, 0); }
  public static void AddObjId(FlatBufferBuilder builder, StringOffset objIdOffset) { builder.AddOffset(15, objIdOffset.Value, 0); }
  public static void AddObjType(FlatBufferBuilder builder, StringOffset objTypeOffset) { builder.AddOffset(16, objTypeOffset.Value, 0); }
  public static void AddObjSpec(FlatBufferBuilder builder, StringOffset objSpecOffset) { builder.AddOffset(17, objSpecOffset.Value, 0); }
  public static void AddObjPlat(FlatBufferBuilder builder, StringOffset objPlatOffset) { builder.AddOffset(18, objPlatOffset.Value, 0); }
  public static void AddObjAct(FlatBufferBuilder builder, StringOffset objActOffset) { builder.AddOffset(19, objActOffset.Value, 0); }
  public static void AddModType(FlatBufferBuilder builder, StringOffset modTypeOffset) { builder.AddOffset(20, modTypeOffset.Value, 0); }
  public static void AddTrkItmId(FlatBufferBuilder builder, StringOffset trkItmIdOffset) { builder.AddOffset(21, trkItmIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(22, tsOffset.Value, 0); }
  public static void AddTrkQual(FlatBufferBuilder builder, int trkQual) { builder.AddInt(23, trkQual, 0); }
  public static void AddTrkPtType(FlatBufferBuilder builder, StringOffset trkPtTypeOffset) { builder.AddOffset(24, trkPtTypeOffset.Value, 0); }
  public static void AddObjIdent(FlatBufferBuilder builder, StringOffset objIdentOffset) { builder.AddOffset(25, objIdentOffset.Value, 0); }
  public static void AddIdentCred(FlatBufferBuilder builder, int identCred) { builder.AddInt(26, identCred, 0); }
  public static void AddIdentRel(FlatBufferBuilder builder, int identRel) { builder.AddInt(27, identRel, 0); }
  public static void AddIdentAmp(FlatBufferBuilder builder, StringOffset identAmpOffset) { builder.AddOffset(28, identAmpOffset.Value, 0); }
  public static void AddEnv(FlatBufferBuilder builder, StringOffset envOffset) { builder.AddOffset(29, envOffset.Value, 0); }
  public static void AddEnvConf(FlatBufferBuilder builder, double envConf) { builder.AddDouble(30, envConf, 0.0); }
  public static void AddTrkConf(FlatBufferBuilder builder, double trkConf) { builder.AddDouble(31, trkConf, 0.0); }
  public static void AddEcefPos(FlatBufferBuilder builder, VectorOffset ecefPosOffset) { builder.AddOffset(32, ecefPosOffset.Value, 0); }
  public static VectorOffset CreateEcefPosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEcefPosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefPosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEcefPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEcefVel(FlatBufferBuilder builder, VectorOffset ecefVelOffset) { builder.AddOffset(33, ecefVelOffset.Value, 0); }
  public static VectorOffset CreateEcefVelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEcefVelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefVelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefVelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEcefVelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEcefAcc(FlatBufferBuilder builder, VectorOffset ecefAccOffset) { builder.AddOffset(34, ecefAccOffset.Value, 0); }
  public static VectorOffset CreateEcefAccVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEcefAccVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefAccVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEcefAccVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEcefAccVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(35, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(36, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(37, alt, 0.0); }
  public static void AddSpd(FlatBufferBuilder builder, double spd) { builder.AddDouble(38, spd, 0.0); }
  public static void AddHdng(FlatBufferBuilder builder, double hdng) { builder.AddDouble(39, hdng, 0.0); }
  public static void AddCourse(FlatBufferBuilder builder, double course) { builder.AddDouble(40, course, 0.0); }
  public static void AddLco(FlatBufferBuilder builder, VectorOffset lcoOffset) { builder.AddOffset(41, lcoOffset.Value, 0); }
  public static VectorOffset CreateLcoVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLcoVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcoVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLcoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLcs(FlatBufferBuilder builder, VectorOffset lcsOffset) { builder.AddOffset(42, lcsOffset.Value, 0); }
  public static VectorOffset CreateLcsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLcsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLcsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLcPos(FlatBufferBuilder builder, VectorOffset lcPosOffset) { builder.AddOffset(43, lcPosOffset.Value, 0); }
  public static VectorOffset CreateLcPosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLcPosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcPosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLcPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLcVel(FlatBufferBuilder builder, VectorOffset lcVelOffset) { builder.AddOffset(44, lcVelOffset.Value, 0); }
  public static VectorOffset CreateLcVelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLcVelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcVelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcVelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLcVelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLcAcc(FlatBufferBuilder builder, VectorOffset lcAccOffset) { builder.AddOffset(45, lcAccOffset.Value, 0); }
  public static VectorOffset CreateLcAccVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLcAccVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcAccVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLcAccVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLcAccVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddENUVel(FlatBufferBuilder builder, VectorOffset eNUVelOffset) { builder.AddOffset(46, eNUVelOffset.Value, 0); }
  public static VectorOffset CreateENUVelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateENUVelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENUVelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENUVelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartENUVelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddENUPos(FlatBufferBuilder builder, VectorOffset eNUPosOffset) { builder.AddOffset(47, eNUPosOffset.Value, 0); }
  public static VectorOffset CreateENUPosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateENUPosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENUPosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateENUPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartENUPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCov(FlatBufferBuilder builder, VectorOffset covOffset) { builder.AddOffset(48, covOffset.Value, 0); }
  public static VectorOffset CreateCovVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCovVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddErrEllp(FlatBufferBuilder builder, VectorOffset errEllpOffset) { builder.AddOffset(49, errEllpOffset.Value, 0); }
  public static VectorOffset CreateErrEllpVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateErrEllpVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateErrEllpVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateErrEllpVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartErrEllpVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(50, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(51, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(52, callSignOffset.Value, 0); }
  public static void AddMultiSource(FlatBufferBuilder builder, bool multiSource) { builder.AddBool(53, multiSource, false); }
  public static void AddJSeries(FlatBufferBuilder builder, StringOffset jSeriesOffset) { builder.AddOffset(54, jSeriesOffset.Value, 0); }
  public static void AddStrength(FlatBufferBuilder builder, int strength) { builder.AddInt(55, strength, 0); }
  public static void AddM1(FlatBufferBuilder builder, int m1) { builder.AddInt(56, m1, 0); }
  public static void AddM1v(FlatBufferBuilder builder, int m1v) { builder.AddInt(57, m1v, 0); }
  public static void AddM2(FlatBufferBuilder builder, int m2) { builder.AddInt(58, m2, 0); }
  public static void AddM2v(FlatBufferBuilder builder, int m2v) { builder.AddInt(59, m2v, 0); }
  public static void AddM3a(FlatBufferBuilder builder, int m3a) { builder.AddInt(60, m3a, 0); }
  public static void AddM3av(FlatBufferBuilder builder, int m3av) { builder.AddInt(61, m3av, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(62, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(63, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(64, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(65, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Track_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(66, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(67, origNetworkOffset.Value, 0); }
  public static Offset<Track_Abridged> EndTrack_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Track_Abridged>(o);
  }
  public static void FinishTrack_AbridgedBuffer(FlatBufferBuilder builder, Offset<Track_Abridged> offset) { builder.Finish(offset.Value, "TRAC"); }
  public static void FinishSizePrefixedTrack_AbridgedBuffer(FlatBufferBuilder builder, Offset<Track_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "TRAC"); }
  public Track_AbridgedT UnPack() {
    var _o = new Track_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Track_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Cntct = this.Cntct;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.MsgTs = this.MsgTs;
    _o.MsnId = this.MsnId;
    _o.AssetNat = this.AssetNat;
    _o.Asset = this.Asset;
    _o.Sen = this.Sen;
    _o.SenQual = this.SenQual;
    _o.TrkId = this.TrkId;
    _o.TrkNum = this.TrkNum;
    _o.TrkStat = this.TrkStat;
    _o.ObjNat = this.ObjNat;
    _o.ObjId = this.ObjId;
    _o.ObjType = this.ObjType;
    _o.ObjSpec = this.ObjSpec;
    _o.ObjPlat = this.ObjPlat;
    _o.ObjAct = this.ObjAct;
    _o.ModType = this.ModType;
    _o.TrkItmId = this.TrkItmId;
    _o.Ts = this.Ts;
    _o.TrkQual = this.TrkQual;
    _o.TrkPtType = this.TrkPtType;
    _o.ObjIdent = this.ObjIdent;
    _o.IdentCred = this.IdentCred;
    _o.IdentRel = this.IdentRel;
    _o.IdentAmp = this.IdentAmp;
    _o.Env = this.Env;
    _o.EnvConf = this.EnvConf;
    _o.TrkConf = this.TrkConf;
    _o.EcefPos = new List<string>();
    for (var _j = 0; _j < this.EcefPosLength; ++_j) {_o.EcefPos.Add(this.EcefPos(_j));}
    _o.EcefVel = new List<string>();
    for (var _j = 0; _j < this.EcefVelLength; ++_j) {_o.EcefVel.Add(this.EcefVel(_j));}
    _o.EcefAcc = new List<string>();
    for (var _j = 0; _j < this.EcefAccLength; ++_j) {_o.EcefAcc.Add(this.EcefAcc(_j));}
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.Spd = this.Spd;
    _o.Hdng = this.Hdng;
    _o.Course = this.Course;
    _o.Lco = new List<string>();
    for (var _j = 0; _j < this.LcoLength; ++_j) {_o.Lco.Add(this.Lco(_j));}
    _o.Lcs = new List<string>();
    for (var _j = 0; _j < this.LcsLength; ++_j) {_o.Lcs.Add(this.Lcs(_j));}
    _o.LcPos = new List<string>();
    for (var _j = 0; _j < this.LcPosLength; ++_j) {_o.LcPos.Add(this.LcPos(_j));}
    _o.LcVel = new List<string>();
    for (var _j = 0; _j < this.LcVelLength; ++_j) {_o.LcVel.Add(this.LcVel(_j));}
    _o.LcAcc = new List<string>();
    for (var _j = 0; _j < this.LcAccLength; ++_j) {_o.LcAcc.Add(this.LcAcc(_j));}
    _o.ENUVel = new List<string>();
    for (var _j = 0; _j < this.ENUVelLength; ++_j) {_o.ENUVel.Add(this.ENUVel(_j));}
    _o.ENUPos = new List<string>();
    for (var _j = 0; _j < this.ENUPosLength; ++_j) {_o.ENUPos.Add(this.ENUPos(_j));}
    _o.Cov = new List<string>();
    for (var _j = 0; _j < this.CovLength; ++_j) {_o.Cov.Add(this.Cov(_j));}
    _o.ErrEllp = new List<string>();
    for (var _j = 0; _j < this.ErrEllpLength; ++_j) {_o.ErrEllp.Add(this.ErrEllp(_j));}
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.CallSign = this.CallSign;
    _o.MultiSource = this.MultiSource;
    _o.JSeries = this.JSeries;
    _o.Strength = this.Strength;
    _o.M1 = this.M1;
    _o.M1v = this.M1v;
    _o.M2 = this.M2;
    _o.M2v = this.M2v;
    _o.M3a = this.M3a;
    _o.M3av = this.M3av;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Track_Abridged> Pack(FlatBufferBuilder builder, Track_AbridgedT _o) {
    if (_o == null) return default(Offset<Track_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _cntct = _o.Cntct == null ? default(StringOffset) : builder.CreateString(_o.Cntct);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _msgTs = _o.MsgTs == null ? default(StringOffset) : builder.CreateString(_o.MsgTs);
    var _msnId = _o.MsnId == null ? default(StringOffset) : builder.CreateString(_o.MsnId);
    var _assetNat = _o.AssetNat == null ? default(StringOffset) : builder.CreateString(_o.AssetNat);
    var _asset = _o.Asset == null ? default(StringOffset) : builder.CreateString(_o.Asset);
    var _sen = _o.Sen == null ? default(StringOffset) : builder.CreateString(_o.Sen);
    var _senQual = _o.SenQual == null ? default(StringOffset) : builder.CreateString(_o.SenQual);
    var _trkId = _o.TrkId == null ? default(StringOffset) : builder.CreateString(_o.TrkId);
    var _trkNum = _o.TrkNum == null ? default(StringOffset) : builder.CreateString(_o.TrkNum);
    var _trkStat = _o.TrkStat == null ? default(StringOffset) : builder.CreateString(_o.TrkStat);
    var _objNat = _o.ObjNat == null ? default(StringOffset) : builder.CreateString(_o.ObjNat);
    var _objId = _o.ObjId == null ? default(StringOffset) : builder.CreateString(_o.ObjId);
    var _objType = _o.ObjType == null ? default(StringOffset) : builder.CreateString(_o.ObjType);
    var _objSpec = _o.ObjSpec == null ? default(StringOffset) : builder.CreateString(_o.ObjSpec);
    var _objPlat = _o.ObjPlat == null ? default(StringOffset) : builder.CreateString(_o.ObjPlat);
    var _objAct = _o.ObjAct == null ? default(StringOffset) : builder.CreateString(_o.ObjAct);
    var _modType = _o.ModType == null ? default(StringOffset) : builder.CreateString(_o.ModType);
    var _trkItmId = _o.TrkItmId == null ? default(StringOffset) : builder.CreateString(_o.TrkItmId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _trkPtType = _o.TrkPtType == null ? default(StringOffset) : builder.CreateString(_o.TrkPtType);
    var _objIdent = _o.ObjIdent == null ? default(StringOffset) : builder.CreateString(_o.ObjIdent);
    var _identAmp = _o.IdentAmp == null ? default(StringOffset) : builder.CreateString(_o.IdentAmp);
    var _env = _o.Env == null ? default(StringOffset) : builder.CreateString(_o.Env);
    var _ecefPos = default(VectorOffset);
    if (_o.EcefPos != null) {
      var __ecefPos = new StringOffset[_o.EcefPos.Count];
      for (var _j = 0; _j < __ecefPos.Length; ++_j) { __ecefPos[_j] = builder.CreateString(_o.EcefPos[_j]); }
      _ecefPos = CreateEcefPosVector(builder, __ecefPos);
    }
    var _ecefVel = default(VectorOffset);
    if (_o.EcefVel != null) {
      var __ecefVel = new StringOffset[_o.EcefVel.Count];
      for (var _j = 0; _j < __ecefVel.Length; ++_j) { __ecefVel[_j] = builder.CreateString(_o.EcefVel[_j]); }
      _ecefVel = CreateEcefVelVector(builder, __ecefVel);
    }
    var _ecefAcc = default(VectorOffset);
    if (_o.EcefAcc != null) {
      var __ecefAcc = new StringOffset[_o.EcefAcc.Count];
      for (var _j = 0; _j < __ecefAcc.Length; ++_j) { __ecefAcc[_j] = builder.CreateString(_o.EcefAcc[_j]); }
      _ecefAcc = CreateEcefAccVector(builder, __ecefAcc);
    }
    var _lco = default(VectorOffset);
    if (_o.Lco != null) {
      var __lco = new StringOffset[_o.Lco.Count];
      for (var _j = 0; _j < __lco.Length; ++_j) { __lco[_j] = builder.CreateString(_o.Lco[_j]); }
      _lco = CreateLcoVector(builder, __lco);
    }
    var _lcs = default(VectorOffset);
    if (_o.Lcs != null) {
      var __lcs = new StringOffset[_o.Lcs.Count];
      for (var _j = 0; _j < __lcs.Length; ++_j) { __lcs[_j] = builder.CreateString(_o.Lcs[_j]); }
      _lcs = CreateLcsVector(builder, __lcs);
    }
    var _lcPos = default(VectorOffset);
    if (_o.LcPos != null) {
      var __lcPos = new StringOffset[_o.LcPos.Count];
      for (var _j = 0; _j < __lcPos.Length; ++_j) { __lcPos[_j] = builder.CreateString(_o.LcPos[_j]); }
      _lcPos = CreateLcPosVector(builder, __lcPos);
    }
    var _lcVel = default(VectorOffset);
    if (_o.LcVel != null) {
      var __lcVel = new StringOffset[_o.LcVel.Count];
      for (var _j = 0; _j < __lcVel.Length; ++_j) { __lcVel[_j] = builder.CreateString(_o.LcVel[_j]); }
      _lcVel = CreateLcVelVector(builder, __lcVel);
    }
    var _lcAcc = default(VectorOffset);
    if (_o.LcAcc != null) {
      var __lcAcc = new StringOffset[_o.LcAcc.Count];
      for (var _j = 0; _j < __lcAcc.Length; ++_j) { __lcAcc[_j] = builder.CreateString(_o.LcAcc[_j]); }
      _lcAcc = CreateLcAccVector(builder, __lcAcc);
    }
    var _eNUVel = default(VectorOffset);
    if (_o.ENUVel != null) {
      var __eNUVel = new StringOffset[_o.ENUVel.Count];
      for (var _j = 0; _j < __eNUVel.Length; ++_j) { __eNUVel[_j] = builder.CreateString(_o.ENUVel[_j]); }
      _eNUVel = CreateENUVelVector(builder, __eNUVel);
    }
    var _eNUPos = default(VectorOffset);
    if (_o.ENUPos != null) {
      var __eNUPos = new StringOffset[_o.ENUPos.Count];
      for (var _j = 0; _j < __eNUPos.Length; ++_j) { __eNUPos[_j] = builder.CreateString(_o.ENUPos[_j]); }
      _eNUPos = CreateENUPosVector(builder, __eNUPos);
    }
    var _cov = default(VectorOffset);
    if (_o.Cov != null) {
      var __cov = new StringOffset[_o.Cov.Count];
      for (var _j = 0; _j < __cov.Length; ++_j) { __cov[_j] = builder.CreateString(_o.Cov[_j]); }
      _cov = CreateCovVector(builder, __cov);
    }
    var _errEllp = default(VectorOffset);
    if (_o.ErrEllp != null) {
      var __errEllp = new StringOffset[_o.ErrEllp.Count];
      for (var _j = 0; _j < __errEllp.Length; ++_j) { __errEllp[_j] = builder.CreateString(_o.ErrEllp[_j]); }
      _errEllp = CreateErrEllpVector(builder, __errEllp);
    }
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _jSeries = _o.JSeries == null ? default(StringOffset) : builder.CreateString(_o.JSeries);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateTrack_Abridged(
      builder,
      _id,
      _classificationMarking,
      _cntct,
      _createdAt,
      _createdBy,
      _msgTs,
      _msnId,
      _assetNat,
      _asset,
      _sen,
      _senQual,
      _trkId,
      _trkNum,
      _trkStat,
      _objNat,
      _objId,
      _objType,
      _objSpec,
      _objPlat,
      _objAct,
      _modType,
      _trkItmId,
      _ts,
      _o.TrkQual,
      _trkPtType,
      _objIdent,
      _o.IdentCred,
      _o.IdentRel,
      _identAmp,
      _env,
      _o.EnvConf,
      _o.TrkConf,
      _ecefPos,
      _ecefVel,
      _ecefAcc,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.Spd,
      _o.Hdng,
      _o.Course,
      _lco,
      _lcs,
      _lcPos,
      _lcVel,
      _lcAcc,
      _eNUVel,
      _eNUPos,
      _cov,
      _errEllp,
      _srcTyps,
      _srcIds,
      _callSign,
      _o.MultiSource,
      _jSeries,
      _o.Strength,
      _o.M1,
      _o.M1v,
      _o.M2,
      _o.M2v,
      _o.M3a,
      _o.M3av,
      _tags,
      _sourceDL,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class Track_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Cntct { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string MsgTs { get; set; }
  public string MsnId { get; set; }
  public string AssetNat { get; set; }
  public string Asset { get; set; }
  public string Sen { get; set; }
  public string SenQual { get; set; }
  public string TrkId { get; set; }
  public string TrkNum { get; set; }
  public string TrkStat { get; set; }
  public string ObjNat { get; set; }
  public string ObjId { get; set; }
  public string ObjType { get; set; }
  public string ObjSpec { get; set; }
  public string ObjPlat { get; set; }
  public string ObjAct { get; set; }
  public string ModType { get; set; }
  public string TrkItmId { get; set; }
  public string Ts { get; set; }
  public int TrkQual { get; set; }
  public string TrkPtType { get; set; }
  public string ObjIdent { get; set; }
  public int IdentCred { get; set; }
  public int IdentRel { get; set; }
  public string IdentAmp { get; set; }
  public string Env { get; set; }
  public double EnvConf { get; set; }
  public double TrkConf { get; set; }
  public List<string> EcefPos { get; set; }
  public List<string> EcefVel { get; set; }
  public List<string> EcefAcc { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double Spd { get; set; }
  public double Hdng { get; set; }
  public double Course { get; set; }
  public List<string> Lco { get; set; }
  public List<string> Lcs { get; set; }
  public List<string> LcPos { get; set; }
  public List<string> LcVel { get; set; }
  public List<string> LcAcc { get; set; }
  public List<string> ENUVel { get; set; }
  public List<string> ENUPos { get; set; }
  public List<string> Cov { get; set; }
  public List<string> ErrEllp { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string CallSign { get; set; }
  public bool MultiSource { get; set; }
  public string JSeries { get; set; }
  public int Strength { get; set; }
  public int M1 { get; set; }
  public int M1v { get; set; }
  public int M2 { get; set; }
  public int M2v { get; set; }
  public int M3a { get; set; }
  public int M3av { get; set; }
  public List<string> Tags { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Track_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public Track_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Cntct = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.MsgTs = null;
    this.MsnId = null;
    this.AssetNat = null;
    this.Asset = null;
    this.Sen = null;
    this.SenQual = null;
    this.TrkId = null;
    this.TrkNum = null;
    this.TrkStat = null;
    this.ObjNat = null;
    this.ObjId = null;
    this.ObjType = null;
    this.ObjSpec = null;
    this.ObjPlat = null;
    this.ObjAct = null;
    this.ModType = null;
    this.TrkItmId = null;
    this.Ts = null;
    this.TrkQual = 0;
    this.TrkPtType = null;
    this.ObjIdent = null;
    this.IdentCred = 0;
    this.IdentRel = 0;
    this.IdentAmp = null;
    this.Env = null;
    this.EnvConf = 0.0;
    this.TrkConf = 0.0;
    this.EcefPos = null;
    this.EcefVel = null;
    this.EcefAcc = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.Spd = 0.0;
    this.Hdng = 0.0;
    this.Course = 0.0;
    this.Lco = null;
    this.Lcs = null;
    this.LcPos = null;
    this.LcVel = null;
    this.LcAcc = null;
    this.ENUVel = null;
    this.ENUPos = null;
    this.Cov = null;
    this.ErrEllp = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.CallSign = null;
    this.MultiSource = false;
    this.JSeries = null;
    this.Strength = 0;
    this.M1 = 0;
    this.M1v = 0;
    this.M2 = 0;
    this.M2v = 0;
    this.M3a = 0;
    this.M3av = 0;
    this.Tags = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Track_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static Track_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Track_Abridged.GetRootAsTrack_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Track_Abridged.FinishTrack_AbridgedBuffer(fbb, Track_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Track_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Cntct*/, false)
      && verifier.VerifyString(tablePos, 10 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 12 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 14 /*MsgTs*/, false)
      && verifier.VerifyString(tablePos, 16 /*MsnId*/, false)
      && verifier.VerifyString(tablePos, 18 /*AssetNat*/, false)
      && verifier.VerifyString(tablePos, 20 /*Asset*/, false)
      && verifier.VerifyString(tablePos, 22 /*Sen*/, false)
      && verifier.VerifyString(tablePos, 24 /*SenQual*/, false)
      && verifier.VerifyString(tablePos, 26 /*TrkId*/, false)
      && verifier.VerifyString(tablePos, 28 /*TrkNum*/, false)
      && verifier.VerifyString(tablePos, 30 /*TrkStat*/, false)
      && verifier.VerifyString(tablePos, 32 /*ObjNat*/, false)
      && verifier.VerifyString(tablePos, 34 /*ObjId*/, false)
      && verifier.VerifyString(tablePos, 36 /*ObjType*/, false)
      && verifier.VerifyString(tablePos, 38 /*ObjSpec*/, false)
      && verifier.VerifyString(tablePos, 40 /*ObjPlat*/, false)
      && verifier.VerifyString(tablePos, 42 /*ObjAct*/, false)
      && verifier.VerifyString(tablePos, 44 /*ModType*/, false)
      && verifier.VerifyString(tablePos, 46 /*TrkItmId*/, false)
      && verifier.VerifyString(tablePos, 48 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 50 /*TrkQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 52 /*TrkPtType*/, false)
      && verifier.VerifyString(tablePos, 54 /*ObjIdent*/, false)
      && verifier.VerifyField(tablePos, 56 /*IdentCred*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*IdentRel*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*IdentAmp*/, false)
      && verifier.VerifyString(tablePos, 62 /*Env*/, false)
      && verifier.VerifyField(tablePos, 64 /*EnvConf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*TrkConf*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*EcefPos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*EcefVel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*EcefAcc*/, false)
      && verifier.VerifyField(tablePos, 74 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Spd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Hdng*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*Course*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 86 /*Lco*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 88 /*Lcs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 90 /*LcPos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 92 /*LcVel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*LcAcc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 96 /*ENUVel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 98 /*ENUPos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 100 /*Cov*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 102 /*ErrEllp*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 104 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 106 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 108 /*CallSign*/, false)
      && verifier.VerifyField(tablePos, 110 /*MultiSource*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 112 /*JSeries*/, false)
      && verifier.VerifyField(tablePos, 114 /*Strength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*M1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 118 /*M1v*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 120 /*M2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*M2v*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 124 /*M3a*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 126 /*M3av*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 128 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 130 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 132 /*Source*/, false)
      && verifier.VerifyString(tablePos, 134 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 136 /*DataMode*/, 1 /*Track_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 138 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
