// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
public struct Transponder_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Transponder_Ingest GetRootAsTransponder_Ingest(ByteBuffer _bb) { return GetRootAsTransponder_Ingest(_bb, new Transponder_Ingest()); }
  public static Transponder_Ingest GetRootAsTransponder_Ingest(ByteBuffer _bb, Transponder_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Transponder_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TRAN"); }
  public static bool VerifyTransponder_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("TRAN", false, Transponder_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Transponder_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TRANSPONDER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// ID of the parent Comm object for this transponder.
  /// Example: /// Example: REF-COMM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdComm { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdCommBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdCommBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdCommArray() { return __p.__vector_as_array<byte>(6); }
  /// Optional name of the transponder.
  /// Example: /// Example: AA10
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional external network id as provided data source.
  /// Example: /// Example: N-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Nid { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNidBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNidBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNidArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional external transponder id as provided data source.
  /// Example: /// Example: T-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Tid { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTidBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTidBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTidArray() { return __p.__vector_as_array<byte>(14); }
  /// Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
  /// Example: /// Example: 1.53261520047876
  /// Constraints: No constraints specified.
  public double Ttf { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
  /// Example: /// Example: 4.0
  /// Constraints: No constraints specified.
  public double SymbolRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int Fec { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Transponder modulation, e.g. Auto, QPSK, 8PSK.
  /// Example: /// Example: Auto
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string Modulation { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModulationBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetModulationBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetModulationArray() { return __p.__vector_as_array<byte>(22); }
  /// Format.
  /// Example: /// Example: format
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Format { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFormatBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFormatBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFormatArray() { return __p.__vector_as_array<byte>(24); }
  /// Transponder system, e.g. DVB-S, DVB-S2.
  /// Example: /// Example: DVB-S
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string System { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSystemBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSystemBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSystemArray() { return __p.__vector_as_array<byte>(26); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(28); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(30); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(32); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Transponder_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(34); return o != 0 ? (Transponder_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Transponder_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(36); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(38); }

  public static Offset<Transponder_Ingest> CreateTransponder_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idCommOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset nidOffset = default(StringOffset),
      StringOffset tidOffset = default(StringOffset),
      double ttf = 0.0,
      double symbolRate = 0.0,
      int fec = 0,
      StringOffset modulationOffset = default(StringOffset),
      StringOffset formatOffset = default(StringOffset),
      StringOffset systemOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Transponder_Ingest_dataMode_Enum dataMode = Transponder_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(18);
    Transponder_Ingest.AddSymbolRate(builder, symbolRate);
    Transponder_Ingest.AddTtf(builder, ttf);
    Transponder_Ingest.AddCreatedBy(builder, createdByOffset);
    Transponder_Ingest.AddCreatedAt(builder, createdAtOffset);
    Transponder_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Transponder_Ingest.AddOrigin(builder, originOffset);
    Transponder_Ingest.AddSource(builder, sourceOffset);
    Transponder_Ingest.AddSystem(builder, systemOffset);
    Transponder_Ingest.AddFormat(builder, formatOffset);
    Transponder_Ingest.AddModulation(builder, modulationOffset);
    Transponder_Ingest.AddFec(builder, fec);
    Transponder_Ingest.AddTid(builder, tidOffset);
    Transponder_Ingest.AddNid(builder, nidOffset);
    Transponder_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Transponder_Ingest.AddName(builder, nameOffset);
    Transponder_Ingest.AddIdComm(builder, idCommOffset);
    Transponder_Ingest.AddId(builder, idOffset);
    Transponder_Ingest.AddDataMode(builder, dataMode);
    return Transponder_Ingest.EndTransponder_Ingest(builder);
  }

  public static void StartTransponder_Ingest(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdComm(FlatBufferBuilder builder, StringOffset idCommOffset) { builder.AddOffset(1, idCommOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(3, classificationMarkingOffset.Value, 0); }
  public static void AddNid(FlatBufferBuilder builder, StringOffset nidOffset) { builder.AddOffset(4, nidOffset.Value, 0); }
  public static void AddTid(FlatBufferBuilder builder, StringOffset tidOffset) { builder.AddOffset(5, tidOffset.Value, 0); }
  public static void AddTtf(FlatBufferBuilder builder, double ttf) { builder.AddDouble(6, ttf, 0.0); }
  public static void AddSymbolRate(FlatBufferBuilder builder, double symbolRate) { builder.AddDouble(7, symbolRate, 0.0); }
  public static void AddFec(FlatBufferBuilder builder, int fec) { builder.AddInt(8, fec, 0); }
  public static void AddModulation(FlatBufferBuilder builder, StringOffset modulationOffset) { builder.AddOffset(9, modulationOffset.Value, 0); }
  public static void AddFormat(FlatBufferBuilder builder, StringOffset formatOffset) { builder.AddOffset(10, formatOffset.Value, 0); }
  public static void AddSystem(FlatBufferBuilder builder, StringOffset systemOffset) { builder.AddOffset(11, systemOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(12, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(13, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(14, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Transponder_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(15, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(16, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(17, createdByOffset.Value, 0); }
  public static Offset<Transponder_Ingest> EndTransponder_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Transponder_Ingest>(o);
  }
  public static void FinishTransponder_IngestBuffer(FlatBufferBuilder builder, Offset<Transponder_Ingest> offset) { builder.Finish(offset.Value, "TRAN"); }
  public static void FinishSizePrefixedTransponder_IngestBuffer(FlatBufferBuilder builder, Offset<Transponder_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "TRAN"); }
  public Transponder_IngestT UnPack() {
    var _o = new Transponder_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Transponder_IngestT _o) {
    _o.Id = this.Id;
    _o.IdComm = this.IdComm;
    _o.Name = this.Name;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Nid = this.Nid;
    _o.Tid = this.Tid;
    _o.Ttf = this.Ttf;
    _o.SymbolRate = this.SymbolRate;
    _o.Fec = this.Fec;
    _o.Modulation = this.Modulation;
    _o.Format = this.Format;
    _o.System = this.System;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<Transponder_Ingest> Pack(FlatBufferBuilder builder, Transponder_IngestT _o) {
    if (_o == null) return default(Offset<Transponder_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idComm = _o.IdComm == null ? default(StringOffset) : builder.CreateString(_o.IdComm);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _nid = _o.Nid == null ? default(StringOffset) : builder.CreateString(_o.Nid);
    var _tid = _o.Tid == null ? default(StringOffset) : builder.CreateString(_o.Tid);
    var _modulation = _o.Modulation == null ? default(StringOffset) : builder.CreateString(_o.Modulation);
    var _format = _o.Format == null ? default(StringOffset) : builder.CreateString(_o.Format);
    var _system = _o.System == null ? default(StringOffset) : builder.CreateString(_o.System);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateTransponder_Ingest(
      builder,
      _id,
      _idComm,
      _name,
      _classificationMarking,
      _nid,
      _tid,
      _o.Ttf,
      _o.SymbolRate,
      _o.Fec,
      _modulation,
      _format,
      _system,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class Transponder_IngestT
{
  public string Id { get; set; }
  public string IdComm { get; set; }
  public string Name { get; set; }
  public string ClassificationMarking { get; set; }
  public string Nid { get; set; }
  public string Tid { get; set; }
  public double Ttf { get; set; }
  public double SymbolRate { get; set; }
  public int Fec { get; set; }
  public string Modulation { get; set; }
  public string Format { get; set; }
  public string System { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Transponder_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public Transponder_IngestT() {
    this.Id = null;
    this.IdComm = null;
    this.Name = null;
    this.ClassificationMarking = null;
    this.Nid = null;
    this.Tid = null;
    this.Ttf = 0.0;
    this.SymbolRate = 0.0;
    this.Fec = 0;
    this.Modulation = null;
    this.Format = null;
    this.System = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Transponder_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static Transponder_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Transponder_Ingest.GetRootAsTransponder_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Transponder_Ingest.FinishTransponder_IngestBuffer(fbb, Transponder_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Transponder_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdComm*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 12 /*Nid*/, false)
      && verifier.VerifyString(tablePos, 14 /*Tid*/, false)
      && verifier.VerifyField(tablePos, 16 /*Ttf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*SymbolRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Fec*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*Modulation*/, false)
      && verifier.VerifyString(tablePos, 24 /*Format*/, false)
      && verifier.VerifyString(tablePos, 26 /*System*/, false)
      && verifier.VerifyString(tablePos, 28 /*Source*/, false)
      && verifier.VerifyString(tablePos, 30 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 32 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 34 /*DataMode*/, 1 /*Transponder_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 36 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 38 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
