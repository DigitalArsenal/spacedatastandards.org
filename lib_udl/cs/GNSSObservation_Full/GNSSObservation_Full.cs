// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
public struct GNSSObservation_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GNSSObservation_Full GetRootAsGNSSObservation_Full(ByteBuffer _bb) { return GetRootAsGNSSObservation_Full(_bb, new GNSSObservation_Full()); }
  public static GNSSObservation_Full GetRootAsGNSSObservation_Full(ByteBuffer _bb, GNSSObservation_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GNSSObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "GNSS"); }
  public static bool VerifyGNSSObservation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("GNSS", false, GNSSObservation_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GNSSObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
  /// G - GPS (NN = PRN)
  /// R - GLONASS (NN = Slot Number)
  /// S - SBAS Payload (NN = PRN-100)
  /// E - Galileo (NN = PRN)
  /// C - BeiDou (NN = PRN)
  /// J - QZSS (NN = PRN - 1923)
  /// I - IRNSS (NN = PRN)
  /// Example: /// Example: GEJ
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string GnssSatId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGnssSatIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGnssSatIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGnssSatIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int TrackingStatus { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// GNSS Automatic Gain Control State.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int AgcState { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
  /// Example: /// Example: ['S1C', 'C1C', 'C1D']
  /// Constraints: No constraints specified.
  public string ObsCodeSet(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObsCodeSetLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
  /// Example: /// Example: [42.1, 1000.0, 0.9]
  /// Constraints: No constraints specified.
  public string Ob(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GNSSObservation_Full> CreateGNSSObservation_Full(FlatBufferBuilder builder,
      StringOffset gnssSatIdOffset = default(StringOffset),
      int trackingStatus = 0,
      int agcState = 0,
      VectorOffset obsCodeSetOffset = default(VectorOffset),
      VectorOffset obOffset = default(VectorOffset)) {
    builder.StartTable(5);
    GNSSObservation_Full.AddOb(builder, obOffset);
    GNSSObservation_Full.AddObsCodeSet(builder, obsCodeSetOffset);
    GNSSObservation_Full.AddAgcState(builder, agcState);
    GNSSObservation_Full.AddTrackingStatus(builder, trackingStatus);
    GNSSObservation_Full.AddGnssSatId(builder, gnssSatIdOffset);
    return GNSSObservation_Full.EndGNSSObservation_Full(builder);
  }

  public static void StartGNSSObservation_Full(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddGnssSatId(FlatBufferBuilder builder, StringOffset gnssSatIdOffset) { builder.AddOffset(0, gnssSatIdOffset.Value, 0); }
  public static void AddTrackingStatus(FlatBufferBuilder builder, int trackingStatus) { builder.AddInt(1, trackingStatus, 0); }
  public static void AddAgcState(FlatBufferBuilder builder, int agcState) { builder.AddInt(2, agcState, 0); }
  public static void AddObsCodeSet(FlatBufferBuilder builder, VectorOffset obsCodeSetOffset) { builder.AddOffset(3, obsCodeSetOffset.Value, 0); }
  public static VectorOffset CreateObsCodeSetVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObsCodeSetVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObsCodeSetVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObsCodeSetVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObsCodeSetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOb(FlatBufferBuilder builder, VectorOffset obOffset) { builder.AddOffset(4, obOffset.Value, 0); }
  public static VectorOffset CreateObVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GNSSObservation_Full> EndGNSSObservation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GNSSObservation_Full>(o);
  }
  public static void FinishGNSSObservation_FullBuffer(FlatBufferBuilder builder, Offset<GNSSObservation_Full> offset) { builder.Finish(offset.Value, "GNSS"); }
  public static void FinishSizePrefixedGNSSObservation_FullBuffer(FlatBufferBuilder builder, Offset<GNSSObservation_Full> offset) { builder.FinishSizePrefixed(offset.Value, "GNSS"); }
  public GNSSObservation_FullT UnPack() {
    var _o = new GNSSObservation_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GNSSObservation_FullT _o) {
    _o.GnssSatId = this.GnssSatId;
    _o.TrackingStatus = this.TrackingStatus;
    _o.AgcState = this.AgcState;
    _o.ObsCodeSet = new List<string>();
    for (var _j = 0; _j < this.ObsCodeSetLength; ++_j) {_o.ObsCodeSet.Add(this.ObsCodeSet(_j));}
    _o.Ob = new List<string>();
    for (var _j = 0; _j < this.ObLength; ++_j) {_o.Ob.Add(this.Ob(_j));}
  }
  public static Offset<GNSSObservation_Full> Pack(FlatBufferBuilder builder, GNSSObservation_FullT _o) {
    if (_o == null) return default(Offset<GNSSObservation_Full>);
    var _gnssSatId = _o.GnssSatId == null ? default(StringOffset) : builder.CreateString(_o.GnssSatId);
    var _obsCodeSet = default(VectorOffset);
    if (_o.ObsCodeSet != null) {
      var __obsCodeSet = new StringOffset[_o.ObsCodeSet.Count];
      for (var _j = 0; _j < __obsCodeSet.Length; ++_j) { __obsCodeSet[_j] = builder.CreateString(_o.ObsCodeSet[_j]); }
      _obsCodeSet = CreateObsCodeSetVector(builder, __obsCodeSet);
    }
    var _ob = default(VectorOffset);
    if (_o.Ob != null) {
      var __ob = new StringOffset[_o.Ob.Count];
      for (var _j = 0; _j < __ob.Length; ++_j) { __ob[_j] = builder.CreateString(_o.Ob[_j]); }
      _ob = CreateObVector(builder, __ob);
    }
    return CreateGNSSObservation_Full(
      builder,
      _gnssSatId,
      _o.TrackingStatus,
      _o.AgcState,
      _obsCodeSet,
      _ob);
  }
}

public class GNSSObservation_FullT
{
  public string GnssSatId { get; set; }
  public int TrackingStatus { get; set; }
  public int AgcState { get; set; }
  public List<string> ObsCodeSet { get; set; }
  public List<string> Ob { get; set; }

  public GNSSObservation_FullT() {
    this.GnssSatId = null;
    this.TrackingStatus = 0;
    this.AgcState = 0;
    this.ObsCodeSet = null;
    this.Ob = null;
  }
  public static GNSSObservation_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return GNSSObservation_Full.GetRootAsGNSSObservation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GNSSObservation_Full.FinishGNSSObservation_FullBuffer(fbb, GNSSObservation_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GNSSObservation_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*GnssSatId*/, false)
      && verifier.VerifyField(tablePos, 6 /*TrackingStatus*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*AgcState*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*ObsCodeSet*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Ob*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
