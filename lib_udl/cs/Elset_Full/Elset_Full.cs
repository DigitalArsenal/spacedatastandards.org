// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
public struct Elset_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Elset_Full GetRootAsElset_Full(ByteBuffer _bb) { return GetRootAsElset_Full(_bb, new Elset_Full()); }
  public static Elset_Full GetRootAsElset_Full(ByteBuffer _bb, Elset_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Elset_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ELSE"); }
  public static bool VerifyElset_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ELSE", false, Elset_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Elset_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdElset { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdElsetBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdElsetBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdElsetArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Epoch { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEpochBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEpochBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEpochArray() { return __p.__vector_as_array<byte>(10); }
  /// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MeanMotion { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(14); }
  /// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.333
  /// Constraints: No constraints specified.
  public double Eccentricity { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double Inclination { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Raan { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ArgOfPerigee { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double MeanAnomaly { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 111
  /// Constraints: No constraints specified.
  public int RevNo { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double BStar { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
  /// Example: /// Example: 0.0126
  /// Constraints: No constraints specified.
  public double Agom { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
  /// Example: /// Example: 0.00815
  /// Constraints: No constraints specified.
  public double BallisticCoeff { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MeanMotionDot { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MeanMotionDDot { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SemiMajorAxis { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Period of the orbit equal to inverse of mean motion, in minutes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Period { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Apogee { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Perigee { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(48); }
  /// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOrbitDetermination { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOrbitDeterminationBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetIdOrbitDeterminationBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetIdOrbitDeterminationArray() { return __p.__vector_as_array<byte>(50); }
  /// Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EffectiveFrom { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectiveFromBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetEffectiveFromBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetEffectiveFromArray() { return __p.__vector_as_array<byte>(52); }
  /// Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EffectiveUntil { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectiveUntilBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetEffectiveUntilBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetEffectiveUntilArray() { return __p.__vector_as_array<byte>(54); }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line1
  /// Constraints: Minimum length = 0, Maximum length = 69
  public string Line1 { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLine1Bytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetLine1Bytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetLine1Array() { return __p.__vector_as_array<byte>(56); }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line2
  /// Constraints: Minimum length = 0, Maximum length = 69
  public string Line2 { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLine2Bytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetLine2Bytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetLine2Array() { return __p.__vector_as_array<byte>(58); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(60); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(62); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(64); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(66); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(68); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(70); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(72); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Elset_Full_dataMode_Enum DataMode { get { int o = __p.__offset(74); return o != 0 ? (Elset_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Elset_Full_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(76); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional algorithm used to produce this record.
  /// Example: /// Example: Example algorithm
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Algorithm { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlgorithmBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetAlgorithmBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetAlgorithmArray() { return __p.__vector_as_array<byte>(78); }
  /// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
  /// Constraints: No constraints specified.
  public string SourcedData(int j) { int o = __p.__offset(80); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SourcedDataLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  /// Example: /// Example: ['RADAR', 'RF']
  /// Constraints: No constraints specified.
  public Elset_Full_sourcedDataTypes_Enum SourcedDataTypes { get { int o = __p.__offset(82); return o != 0 ? (Elset_Full_sourcedDataTypes_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Elset_Full_sourcedDataTypes_Enum.EO; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(84); }
  /// The ephemeris type associated with this TLE:
  /// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
  /// 1:&nbsp;SGP
  /// 2:&nbsp;SGP4
  /// 3:&nbsp;SDP4
  /// 4:&nbsp;SGP8, also referred to as SGP4-XP
  /// 5:&nbsp;SDP8
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int EphemType { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(88); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(90); }

  public static Offset<Elset_Full> CreateElset_Full(FlatBufferBuilder builder,
      StringOffset idElsetOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int satNo = 0,
      StringOffset epochOffset = default(StringOffset),
      double meanMotion = 0.0,
      StringOffset idOnOrbitOffset = default(StringOffset),
      bool uct = false,
      double eccentricity = 0.0,
      double inclination = 0.0,
      double raan = 0.0,
      double argOfPerigee = 0.0,
      double meanAnomaly = 0.0,
      int revNo = 0,
      double bStar = 0.0,
      double agom = 0.0,
      double ballisticCoeff = 0.0,
      double meanMotionDot = 0.0,
      double meanMotionDDot = 0.0,
      double semiMajorAxis = 0.0,
      double period = 0.0,
      double apogee = 0.0,
      double perigee = 0.0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idOrbitDeterminationOffset = default(StringOffset),
      StringOffset effectiveFromOffset = default(StringOffset),
      StringOffset effectiveUntilOffset = default(StringOffset),
      StringOffset line1Offset = default(StringOffset),
      StringOffset line2Offset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      Elset_Full_dataMode_Enum dataMode = Elset_Full_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset algorithmOffset = default(StringOffset),
      VectorOffset sourcedDataOffset = default(VectorOffset),
      Elset_Full_sourcedDataTypes_Enum sourcedDataTypes = Elset_Full_sourcedDataTypes_Enum.EO,
      StringOffset transactionIdOffset = default(StringOffset),
      int ephemType = 0,
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset onOrbitOffset = default(StringOffset)) {
    builder.StartTable(44);
    Elset_Full.AddPerigee(builder, perigee);
    Elset_Full.AddApogee(builder, apogee);
    Elset_Full.AddPeriod(builder, period);
    Elset_Full.AddSemiMajorAxis(builder, semiMajorAxis);
    Elset_Full.AddMeanMotionDDot(builder, meanMotionDDot);
    Elset_Full.AddMeanMotionDot(builder, meanMotionDot);
    Elset_Full.AddBallisticCoeff(builder, ballisticCoeff);
    Elset_Full.AddAgom(builder, agom);
    Elset_Full.AddBStar(builder, bStar);
    Elset_Full.AddMeanAnomaly(builder, meanAnomaly);
    Elset_Full.AddArgOfPerigee(builder, argOfPerigee);
    Elset_Full.AddRaan(builder, raan);
    Elset_Full.AddInclination(builder, inclination);
    Elset_Full.AddEccentricity(builder, eccentricity);
    Elset_Full.AddMeanMotion(builder, meanMotion);
    Elset_Full.AddOnOrbit(builder, onOrbitOffset);
    Elset_Full.AddOrigNetwork(builder, origNetworkOffset);
    Elset_Full.AddEphemType(builder, ephemType);
    Elset_Full.AddTransactionId(builder, transactionIdOffset);
    Elset_Full.AddSourcedData(builder, sourcedDataOffset);
    Elset_Full.AddAlgorithm(builder, algorithmOffset);
    Elset_Full.AddTags(builder, tagsOffset);
    Elset_Full.AddSource(builder, sourceOffset);
    Elset_Full.AddSourceDL(builder, sourceDLOffset);
    Elset_Full.AddOrigin(builder, originOffset);
    Elset_Full.AddRawFileURI(builder, rawFileURIOffset);
    Elset_Full.AddCreatedBy(builder, createdByOffset);
    Elset_Full.AddCreatedAt(builder, createdAtOffset);
    Elset_Full.AddDescriptor(builder, descriptorOffset);
    Elset_Full.AddLine2(builder, line2Offset);
    Elset_Full.AddLine1(builder, line1Offset);
    Elset_Full.AddEffectiveUntil(builder, effectiveUntilOffset);
    Elset_Full.AddEffectiveFrom(builder, effectiveFromOffset);
    Elset_Full.AddIdOrbitDetermination(builder, idOrbitDeterminationOffset);
    Elset_Full.AddOrigObjectId(builder, origObjectIdOffset);
    Elset_Full.AddRevNo(builder, revNo);
    Elset_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    Elset_Full.AddEpoch(builder, epochOffset);
    Elset_Full.AddSatNo(builder, satNo);
    Elset_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Elset_Full.AddIdElset(builder, idElsetOffset);
    Elset_Full.AddSourcedDataTypes(builder, sourcedDataTypes);
    Elset_Full.AddDataMode(builder, dataMode);
    Elset_Full.AddUct(builder, uct);
    return Elset_Full.EndElset_Full(builder);
  }

  public static void StartElset_Full(FlatBufferBuilder builder) { builder.StartTable(44); }
  public static void AddIdElset(FlatBufferBuilder builder, StringOffset idElsetOffset) { builder.AddOffset(0, idElsetOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(2, satNo, 0); }
  public static void AddEpoch(FlatBufferBuilder builder, StringOffset epochOffset) { builder.AddOffset(3, epochOffset.Value, 0); }
  public static void AddMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.AddDouble(4, meanMotion, 0.0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(5, idOnOrbitOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(6, uct, false); }
  public static void AddEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.AddDouble(7, eccentricity, 0.0); }
  public static void AddInclination(FlatBufferBuilder builder, double inclination) { builder.AddDouble(8, inclination, 0.0); }
  public static void AddRaan(FlatBufferBuilder builder, double raan) { builder.AddDouble(9, raan, 0.0); }
  public static void AddArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.AddDouble(10, argOfPerigee, 0.0); }
  public static void AddMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.AddDouble(11, meanAnomaly, 0.0); }
  public static void AddRevNo(FlatBufferBuilder builder, int revNo) { builder.AddInt(12, revNo, 0); }
  public static void AddBStar(FlatBufferBuilder builder, double bStar) { builder.AddDouble(13, bStar, 0.0); }
  public static void AddAgom(FlatBufferBuilder builder, double agom) { builder.AddDouble(14, agom, 0.0); }
  public static void AddBallisticCoeff(FlatBufferBuilder builder, double ballisticCoeff) { builder.AddDouble(15, ballisticCoeff, 0.0); }
  public static void AddMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.AddDouble(16, meanMotionDot, 0.0); }
  public static void AddMeanMotionDDot(FlatBufferBuilder builder, double meanMotionDDot) { builder.AddDouble(17, meanMotionDDot, 0.0); }
  public static void AddSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.AddDouble(18, semiMajorAxis, 0.0); }
  public static void AddPeriod(FlatBufferBuilder builder, double period) { builder.AddDouble(19, period, 0.0); }
  public static void AddApogee(FlatBufferBuilder builder, double apogee) { builder.AddDouble(20, apogee, 0.0); }
  public static void AddPerigee(FlatBufferBuilder builder, double perigee) { builder.AddDouble(21, perigee, 0.0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(22, origObjectIdOffset.Value, 0); }
  public static void AddIdOrbitDetermination(FlatBufferBuilder builder, StringOffset idOrbitDeterminationOffset) { builder.AddOffset(23, idOrbitDeterminationOffset.Value, 0); }
  public static void AddEffectiveFrom(FlatBufferBuilder builder, StringOffset effectiveFromOffset) { builder.AddOffset(24, effectiveFromOffset.Value, 0); }
  public static void AddEffectiveUntil(FlatBufferBuilder builder, StringOffset effectiveUntilOffset) { builder.AddOffset(25, effectiveUntilOffset.Value, 0); }
  public static void AddLine1(FlatBufferBuilder builder, StringOffset line1Offset) { builder.AddOffset(26, line1Offset.Value, 0); }
  public static void AddLine2(FlatBufferBuilder builder, StringOffset line2Offset) { builder.AddOffset(27, line2Offset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(28, descriptorOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(29, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(30, createdByOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(31, rawFileURIOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(32, originOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(33, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(34, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Elset_Full_dataMode_Enum dataMode) { builder.AddSbyte(35, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(36, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAlgorithm(FlatBufferBuilder builder, StringOffset algorithmOffset) { builder.AddOffset(37, algorithmOffset.Value, 0); }
  public static void AddSourcedData(FlatBufferBuilder builder, VectorOffset sourcedDataOffset) { builder.AddOffset(38, sourcedDataOffset.Value, 0); }
  public static VectorOffset CreateSourcedDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSourcedDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSourcedDataTypes(FlatBufferBuilder builder, Elset_Full_sourcedDataTypes_Enum sourcedDataTypes) { builder.AddSbyte(39, (sbyte)sourcedDataTypes, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(40, transactionIdOffset.Value, 0); }
  public static void AddEphemType(FlatBufferBuilder builder, int ephemType) { builder.AddInt(41, ephemType, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(42, origNetworkOffset.Value, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(43, onOrbitOffset.Value, 0); }
  public static Offset<Elset_Full> EndElset_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Elset_Full>(o);
  }
  public static void FinishElset_FullBuffer(FlatBufferBuilder builder, Offset<Elset_Full> offset) { builder.Finish(offset.Value, "ELSE"); }
  public static void FinishSizePrefixedElset_FullBuffer(FlatBufferBuilder builder, Offset<Elset_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ELSE"); }
  public Elset_FullT UnPack() {
    var _o = new Elset_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Elset_FullT _o) {
    _o.IdElset = this.IdElset;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SatNo = this.SatNo;
    _o.Epoch = this.Epoch;
    _o.MeanMotion = this.MeanMotion;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.Uct = this.Uct;
    _o.Eccentricity = this.Eccentricity;
    _o.Inclination = this.Inclination;
    _o.Raan = this.Raan;
    _o.ArgOfPerigee = this.ArgOfPerigee;
    _o.MeanAnomaly = this.MeanAnomaly;
    _o.RevNo = this.RevNo;
    _o.BStar = this.BStar;
    _o.Agom = this.Agom;
    _o.BallisticCoeff = this.BallisticCoeff;
    _o.MeanMotionDot = this.MeanMotionDot;
    _o.MeanMotionDDot = this.MeanMotionDDot;
    _o.SemiMajorAxis = this.SemiMajorAxis;
    _o.Period = this.Period;
    _o.Apogee = this.Apogee;
    _o.Perigee = this.Perigee;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdOrbitDetermination = this.IdOrbitDetermination;
    _o.EffectiveFrom = this.EffectiveFrom;
    _o.EffectiveUntil = this.EffectiveUntil;
    _o.Line1 = this.Line1;
    _o.Line2 = this.Line2;
    _o.Descriptor = this.Descriptor;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.RawFileURI = this.RawFileURI;
    _o.Origin = this.Origin;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Algorithm = this.Algorithm;
    _o.SourcedData = new List<string>();
    for (var _j = 0; _j < this.SourcedDataLength; ++_j) {_o.SourcedData.Add(this.SourcedData(_j));}
    _o.SourcedDataTypes = this.SourcedDataTypes;
    _o.TransactionId = this.TransactionId;
    _o.EphemType = this.EphemType;
    _o.OrigNetwork = this.OrigNetwork;
    _o.OnOrbit = this.OnOrbit;
  }
  public static Offset<Elset_Full> Pack(FlatBufferBuilder builder, Elset_FullT _o) {
    if (_o == null) return default(Offset<Elset_Full>);
    var _idElset = _o.IdElset == null ? default(StringOffset) : builder.CreateString(_o.IdElset);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _epoch = _o.Epoch == null ? default(StringOffset) : builder.CreateString(_o.Epoch);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idOrbitDetermination = _o.IdOrbitDetermination == null ? default(StringOffset) : builder.CreateString(_o.IdOrbitDetermination);
    var _effectiveFrom = _o.EffectiveFrom == null ? default(StringOffset) : builder.CreateString(_o.EffectiveFrom);
    var _effectiveUntil = _o.EffectiveUntil == null ? default(StringOffset) : builder.CreateString(_o.EffectiveUntil);
    var _line1 = _o.Line1 == null ? default(StringOffset) : builder.CreateString(_o.Line1);
    var _line2 = _o.Line2 == null ? default(StringOffset) : builder.CreateString(_o.Line2);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _algorithm = _o.Algorithm == null ? default(StringOffset) : builder.CreateString(_o.Algorithm);
    var _sourcedData = default(VectorOffset);
    if (_o.SourcedData != null) {
      var __sourcedData = new StringOffset[_o.SourcedData.Count];
      for (var _j = 0; _j < __sourcedData.Length; ++_j) { __sourcedData[_j] = builder.CreateString(_o.SourcedData[_j]); }
      _sourcedData = CreateSourcedDataVector(builder, __sourcedData);
    }
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    return CreateElset_Full(
      builder,
      _idElset,
      _classificationMarking,
      _o.SatNo,
      _epoch,
      _o.MeanMotion,
      _idOnOrbit,
      _o.Uct,
      _o.Eccentricity,
      _o.Inclination,
      _o.Raan,
      _o.ArgOfPerigee,
      _o.MeanAnomaly,
      _o.RevNo,
      _o.BStar,
      _o.Agom,
      _o.BallisticCoeff,
      _o.MeanMotionDot,
      _o.MeanMotionDDot,
      _o.SemiMajorAxis,
      _o.Period,
      _o.Apogee,
      _o.Perigee,
      _origObjectId,
      _idOrbitDetermination,
      _effectiveFrom,
      _effectiveUntil,
      _line1,
      _line2,
      _descriptor,
      _createdAt,
      _createdBy,
      _rawFileURI,
      _origin,
      _sourceDL,
      _source,
      _o.DataMode,
      _tags,
      _algorithm,
      _sourcedData,
      _o.SourcedDataTypes,
      _transactionId,
      _o.EphemType,
      _origNetwork,
      _onOrbit);
  }
}

public class Elset_FullT
{
  public string IdElset { get; set; }
  public string ClassificationMarking { get; set; }
  public int SatNo { get; set; }
  public string Epoch { get; set; }
  public double MeanMotion { get; set; }
  public string IdOnOrbit { get; set; }
  public bool Uct { get; set; }
  public double Eccentricity { get; set; }
  public double Inclination { get; set; }
  public double Raan { get; set; }
  public double ArgOfPerigee { get; set; }
  public double MeanAnomaly { get; set; }
  public int RevNo { get; set; }
  public double BStar { get; set; }
  public double Agom { get; set; }
  public double BallisticCoeff { get; set; }
  public double MeanMotionDot { get; set; }
  public double MeanMotionDDot { get; set; }
  public double SemiMajorAxis { get; set; }
  public double Period { get; set; }
  public double Apogee { get; set; }
  public double Perigee { get; set; }
  public string OrigObjectId { get; set; }
  public string IdOrbitDetermination { get; set; }
  public string EffectiveFrom { get; set; }
  public string EffectiveUntil { get; set; }
  public string Line1 { get; set; }
  public string Line2 { get; set; }
  public string Descriptor { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string RawFileURI { get; set; }
  public string Origin { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public Elset_Full_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }
  public string Algorithm { get; set; }
  public List<string> SourcedData { get; set; }
  public Elset_Full_sourcedDataTypes_Enum SourcedDataTypes { get; set; }
  public string TransactionId { get; set; }
  public int EphemType { get; set; }
  public string OrigNetwork { get; set; }
  public string OnOrbit { get; set; }

  public Elset_FullT() {
    this.IdElset = null;
    this.ClassificationMarking = null;
    this.SatNo = 0;
    this.Epoch = null;
    this.MeanMotion = 0.0;
    this.IdOnOrbit = null;
    this.Uct = false;
    this.Eccentricity = 0.0;
    this.Inclination = 0.0;
    this.Raan = 0.0;
    this.ArgOfPerigee = 0.0;
    this.MeanAnomaly = 0.0;
    this.RevNo = 0;
    this.BStar = 0.0;
    this.Agom = 0.0;
    this.BallisticCoeff = 0.0;
    this.MeanMotionDot = 0.0;
    this.MeanMotionDDot = 0.0;
    this.SemiMajorAxis = 0.0;
    this.Period = 0.0;
    this.Apogee = 0.0;
    this.Perigee = 0.0;
    this.OrigObjectId = null;
    this.IdOrbitDetermination = null;
    this.EffectiveFrom = null;
    this.EffectiveUntil = null;
    this.Line1 = null;
    this.Line2 = null;
    this.Descriptor = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.RawFileURI = null;
    this.Origin = null;
    this.SourceDL = null;
    this.Source = null;
    this.DataMode = Elset_Full_dataMode_Enum.REAL;
    this.Tags = null;
    this.Algorithm = null;
    this.SourcedData = null;
    this.SourcedDataTypes = Elset_Full_sourcedDataTypes_Enum.EO;
    this.TransactionId = null;
    this.EphemType = 0;
    this.OrigNetwork = null;
    this.OnOrbit = null;
  }
  public static Elset_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Elset_Full.GetRootAsElset_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Elset_Full.FinishElset_FullBuffer(fbb, Elset_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Elset_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdElset*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 8 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Epoch*/, false)
      && verifier.VerifyField(tablePos, 12 /*MeanMotion*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 16 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*Eccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Inclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Raan*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*ArgOfPerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*MeanAnomaly*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*RevNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*BStar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Agom*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*BallisticCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*MeanMotionDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*MeanMotionDDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*SemiMajorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Period*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Apogee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Perigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 50 /*IdOrbitDetermination*/, false)
      && verifier.VerifyString(tablePos, 52 /*EffectiveFrom*/, false)
      && verifier.VerifyString(tablePos, 54 /*EffectiveUntil*/, false)
      && verifier.VerifyString(tablePos, 56 /*Line1*/, false)
      && verifier.VerifyString(tablePos, 58 /*Line2*/, false)
      && verifier.VerifyString(tablePos, 60 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 64 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 66 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 68 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 70 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 72 /*Source*/, false)
      && verifier.VerifyField(tablePos, 74 /*DataMode*/, 1 /*Elset_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 76 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 78 /*Algorithm*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 80 /*SourcedData*/, false)
      && verifier.VerifyField(tablePos, 82 /*SourcedDataTypes*/, 1 /*Elset_Full_sourcedDataTypes_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 84 /*TransactionId*/, false)
      && verifier.VerifyField(tablePos, 86 /*EphemType*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 88 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 90 /*OnOrbit*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
