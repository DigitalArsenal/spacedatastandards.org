// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Object for data dissemination.
public struct ISRCollectionTransit_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionTransit_Ingest GetRootAsISRCollectionTransit_Ingest(ByteBuffer _bb) { return GetRootAsISRCollectionTransit_Ingest(_bb, new ISRCollectionTransit_Ingest()); }
  public static ISRCollectionTransit_Ingest GetRootAsISRCollectionTransit_Ingest(ByteBuffer _bb, ISRCollectionTransit_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollectionTransit_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollectionTransit_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollectionTransit_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollectionTransit_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Transit Unique Identifier.
  /// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Military Base to transmit the dissemination of this data.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Base { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBaseBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBaseBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBaseArray() { return __p.__vector_as_array<byte>(6); }
  /// Length of mission in milliseconds.
  /// Example: /// Example: 200.23
  /// Constraints: No constraints specified.
  public double Duration { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<ISRCollectionTransit_Ingest> CreateISRCollectionTransit_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset @baseOffset = default(StringOffset),
      double duration = 0.0) {
    builder.StartTable(3);
    ISRCollectionTransit_Ingest.AddDuration(builder, duration);
    ISRCollectionTransit_Ingest.AddBase(builder, @baseOffset);
    ISRCollectionTransit_Ingest.AddId(builder, idOffset);
    return ISRCollectionTransit_Ingest.EndISRCollectionTransit_Ingest(builder);
  }

  public static void StartISRCollectionTransit_Ingest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddBase(FlatBufferBuilder builder, StringOffset baseOffset) { builder.AddOffset(1, baseOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, double duration) { builder.AddDouble(2, duration, 0.0); }
  public static Offset<ISRCollectionTransit_Ingest> EndISRCollectionTransit_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollectionTransit_Ingest>(o);
  }
  public static void FinishISRCollectionTransit_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionTransit_Ingest> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollectionTransit_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionTransit_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollectionTransit_IngestT UnPack() {
    var _o = new ISRCollectionTransit_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollectionTransit_IngestT _o) {
    _o.Id = this.Id;
    _o.Base = this.Base;
    _o.Duration = this.Duration;
  }
  public static Offset<ISRCollectionTransit_Ingest> Pack(FlatBufferBuilder builder, ISRCollectionTransit_IngestT _o) {
    if (_o == null) return default(Offset<ISRCollectionTransit_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _base = _o.Base == null ? default(StringOffset) : builder.CreateString(_o.Base);
    return CreateISRCollectionTransit_Ingest(
      builder,
      _id,
      _base,
      _o.Duration);
  }
}

public class ISRCollectionTransit_IngestT
{
  public string Id { get; set; }
  public string Base { get; set; }
  public double Duration { get; set; }

  public ISRCollectionTransit_IngestT() {
    this.Id = null;
    this.Base = null;
    this.Duration = 0.0;
  }
  public static ISRCollectionTransit_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollectionTransit_Ingest.GetRootAsISRCollectionTransit_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollectionTransit_Ingest.FinishISRCollectionTransit_IngestBuffer(fbb, ISRCollectionTransit_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollectionTransit_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Base*/, false)
      && verifier.VerifyField(tablePos, 8 /*Duration*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
