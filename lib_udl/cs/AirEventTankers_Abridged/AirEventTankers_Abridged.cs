// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of tanker aircraft associated with this Air Event.
public struct AirEventTankers_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirEventTankers_Abridged GetRootAsAirEventTankers_Abridged(ByteBuffer _bb) { return GetRootAsAirEventTankers_Abridged(_bb, new AirEventTankers_Abridged()); }
  public static AirEventTankers_Abridged GetRootAsAirEventTankers_Abridged(ByteBuffer _bb, AirEventTankers_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirEventTankers_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRE"); }
  public static bool VerifyAirEventTankers_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRE", false, AirEventTankers_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirEventTankers_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The UDL ID of the aircraft sortie this tanker is associated with for this event.
  /// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdTankerSortie { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdTankerSortieBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdTankerSortieBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdTankerSortieArray() { return __p.__vector_as_array<byte>(4); }
  /// The UDL ID of the mission this tanker is associated with for this event.
  /// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdTankerMission { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdTankerMissionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdTankerMissionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdTankerMissionArray() { return __p.__vector_as_array<byte>(6); }
  /// The UDL ID of the airfield this tanker is associated with for this event.
  /// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdTankerAirfield { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdTankerAirfieldBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdTankerAirfieldBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdTankerAirfieldArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalTankerId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalTankerIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExternalTankerIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExternalTankerIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Coordination record identifier of this tanker.
  /// Example: /// Example: TTC601
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string TankerCoord { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerCoordBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTankerCoordBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTankerCoordArray() { return __p.__vector_as_array<byte>(12); }
  /// The Model Design Series designation of this tanker.
  /// Example: /// Example: KC135R
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string TankerMDS { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerMDSBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTankerMDSBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTankerMDSArray() { return __p.__vector_as_array<byte>(14); }
  /// The Air Mobility Command (AMC) mission identifier of this tanker.
  /// Example: /// Example: 8PH000B1S052
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcTankerMissionId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcTankerMissionIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAmcTankerMissionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAmcTankerMissionIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Alternate mission identifier of this tanker provided by source.
  /// Example: /// Example: 1UN05201L121
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string AltTankerMissionId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltTankerMissionIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAltTankerMissionIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAltTankerMissionIdArray() { return __p.__vector_as_array<byte>(18); }
  /// The call sign assigned to this tanker.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string TankerCallSign { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerCallSignBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTankerCallSignBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTankerCallSignArray() { return __p.__vector_as_array<byte>(20); }
  /// The wing or unit that owns this tanker.
  /// Example: /// Example: 117ARW
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string TankerOwner { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerOwnerBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTankerOwnerBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTankerOwnerArray() { return __p.__vector_as_array<byte>(22); }
  /// The name and/or number of the point of contact for this tanker.
  /// Example: /// Example: JOHN SMITH (555)555-5555
  /// Constraints: Minimum length = 0, Maximum length = 68
  public string TankerPOC { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerPOCBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTankerPOCBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTankerPOCArray() { return __p.__vector_as_array<byte>(24); }
  /// Identifies the itinerary point of a mission that this tanker is linked to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  public int TankerLegNum { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Location the tanker has been deployed to in preparation for an air refueling event.
  /// Example: /// Example: KOFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string TankerDeployedICAO { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerDeployedICAOBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTankerDeployedICAOBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTankerDeployedICAOArray() { return __p.__vector_as_array<byte>(28); }
  /// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
  /// Example: /// Example: DROGUE
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string TankerDeliveryMethod { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerDeliveryMethodBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTankerDeliveryMethodBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTankerDeliveryMethodArray() { return __p.__vector_as_array<byte>(30); }
  /// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
  /// Example: /// Example: 15000000.1
  /// Constraints: No constraints specified.
  public double FuelOff { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Position of this tanker within a group of tankers in an air refueling event.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int TankerCellPosition { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Type of fuel being transferred from the tanker in an air refueling event.
  /// Example: /// Example: JP8
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string TankerFuelType { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankerFuelTypeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetTankerFuelTypeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetTankerFuelTypeArray() { return __p.__vector_as_array<byte>(36); }
  /// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool DualRole { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<AirEventTankers_Abridged> CreateAirEventTankers_Abridged(FlatBufferBuilder builder,
      StringOffset idTankerSortieOffset = default(StringOffset),
      StringOffset idTankerMissionOffset = default(StringOffset),
      StringOffset idTankerAirfieldOffset = default(StringOffset),
      StringOffset externalTankerIdOffset = default(StringOffset),
      StringOffset tankerCoordOffset = default(StringOffset),
      StringOffset tankerMDSOffset = default(StringOffset),
      StringOffset amcTankerMissionIdOffset = default(StringOffset),
      StringOffset altTankerMissionIdOffset = default(StringOffset),
      StringOffset tankerCallSignOffset = default(StringOffset),
      StringOffset tankerOwnerOffset = default(StringOffset),
      StringOffset tankerPOCOffset = default(StringOffset),
      int tankerLegNum = 0,
      StringOffset tankerDeployedICAOOffset = default(StringOffset),
      StringOffset tankerDeliveryMethodOffset = default(StringOffset),
      double fuelOff = 0.0,
      int tankerCellPosition = 0,
      StringOffset tankerFuelTypeOffset = default(StringOffset),
      bool dualRole = false) {
    builder.StartTable(18);
    AirEventTankers_Abridged.AddFuelOff(builder, fuelOff);
    AirEventTankers_Abridged.AddTankerFuelType(builder, tankerFuelTypeOffset);
    AirEventTankers_Abridged.AddTankerCellPosition(builder, tankerCellPosition);
    AirEventTankers_Abridged.AddTankerDeliveryMethod(builder, tankerDeliveryMethodOffset);
    AirEventTankers_Abridged.AddTankerDeployedICAO(builder, tankerDeployedICAOOffset);
    AirEventTankers_Abridged.AddTankerLegNum(builder, tankerLegNum);
    AirEventTankers_Abridged.AddTankerPOC(builder, tankerPOCOffset);
    AirEventTankers_Abridged.AddTankerOwner(builder, tankerOwnerOffset);
    AirEventTankers_Abridged.AddTankerCallSign(builder, tankerCallSignOffset);
    AirEventTankers_Abridged.AddAltTankerMissionId(builder, altTankerMissionIdOffset);
    AirEventTankers_Abridged.AddAmcTankerMissionId(builder, amcTankerMissionIdOffset);
    AirEventTankers_Abridged.AddTankerMDS(builder, tankerMDSOffset);
    AirEventTankers_Abridged.AddTankerCoord(builder, tankerCoordOffset);
    AirEventTankers_Abridged.AddExternalTankerId(builder, externalTankerIdOffset);
    AirEventTankers_Abridged.AddIdTankerAirfield(builder, idTankerAirfieldOffset);
    AirEventTankers_Abridged.AddIdTankerMission(builder, idTankerMissionOffset);
    AirEventTankers_Abridged.AddIdTankerSortie(builder, idTankerSortieOffset);
    AirEventTankers_Abridged.AddDualRole(builder, dualRole);
    return AirEventTankers_Abridged.EndAirEventTankers_Abridged(builder);
  }

  public static void StartAirEventTankers_Abridged(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddIdTankerSortie(FlatBufferBuilder builder, StringOffset idTankerSortieOffset) { builder.AddOffset(0, idTankerSortieOffset.Value, 0); }
  public static void AddIdTankerMission(FlatBufferBuilder builder, StringOffset idTankerMissionOffset) { builder.AddOffset(1, idTankerMissionOffset.Value, 0); }
  public static void AddIdTankerAirfield(FlatBufferBuilder builder, StringOffset idTankerAirfieldOffset) { builder.AddOffset(2, idTankerAirfieldOffset.Value, 0); }
  public static void AddExternalTankerId(FlatBufferBuilder builder, StringOffset externalTankerIdOffset) { builder.AddOffset(3, externalTankerIdOffset.Value, 0); }
  public static void AddTankerCoord(FlatBufferBuilder builder, StringOffset tankerCoordOffset) { builder.AddOffset(4, tankerCoordOffset.Value, 0); }
  public static void AddTankerMDS(FlatBufferBuilder builder, StringOffset tankerMDSOffset) { builder.AddOffset(5, tankerMDSOffset.Value, 0); }
  public static void AddAmcTankerMissionId(FlatBufferBuilder builder, StringOffset amcTankerMissionIdOffset) { builder.AddOffset(6, amcTankerMissionIdOffset.Value, 0); }
  public static void AddAltTankerMissionId(FlatBufferBuilder builder, StringOffset altTankerMissionIdOffset) { builder.AddOffset(7, altTankerMissionIdOffset.Value, 0); }
  public static void AddTankerCallSign(FlatBufferBuilder builder, StringOffset tankerCallSignOffset) { builder.AddOffset(8, tankerCallSignOffset.Value, 0); }
  public static void AddTankerOwner(FlatBufferBuilder builder, StringOffset tankerOwnerOffset) { builder.AddOffset(9, tankerOwnerOffset.Value, 0); }
  public static void AddTankerPOC(FlatBufferBuilder builder, StringOffset tankerPOCOffset) { builder.AddOffset(10, tankerPOCOffset.Value, 0); }
  public static void AddTankerLegNum(FlatBufferBuilder builder, int tankerLegNum) { builder.AddInt(11, tankerLegNum, 0); }
  public static void AddTankerDeployedICAO(FlatBufferBuilder builder, StringOffset tankerDeployedICAOOffset) { builder.AddOffset(12, tankerDeployedICAOOffset.Value, 0); }
  public static void AddTankerDeliveryMethod(FlatBufferBuilder builder, StringOffset tankerDeliveryMethodOffset) { builder.AddOffset(13, tankerDeliveryMethodOffset.Value, 0); }
  public static void AddFuelOff(FlatBufferBuilder builder, double fuelOff) { builder.AddDouble(14, fuelOff, 0.0); }
  public static void AddTankerCellPosition(FlatBufferBuilder builder, int tankerCellPosition) { builder.AddInt(15, tankerCellPosition, 0); }
  public static void AddTankerFuelType(FlatBufferBuilder builder, StringOffset tankerFuelTypeOffset) { builder.AddOffset(16, tankerFuelTypeOffset.Value, 0); }
  public static void AddDualRole(FlatBufferBuilder builder, bool dualRole) { builder.AddBool(17, dualRole, false); }
  public static Offset<AirEventTankers_Abridged> EndAirEventTankers_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirEventTankers_Abridged>(o);
  }
  public static void FinishAirEventTankers_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirEventTankers_Abridged> offset) { builder.Finish(offset.Value, "AIRE"); }
  public static void FinishSizePrefixedAirEventTankers_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirEventTankers_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRE"); }
  public AirEventTankers_AbridgedT UnPack() {
    var _o = new AirEventTankers_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirEventTankers_AbridgedT _o) {
    _o.IdTankerSortie = this.IdTankerSortie;
    _o.IdTankerMission = this.IdTankerMission;
    _o.IdTankerAirfield = this.IdTankerAirfield;
    _o.ExternalTankerId = this.ExternalTankerId;
    _o.TankerCoord = this.TankerCoord;
    _o.TankerMDS = this.TankerMDS;
    _o.AmcTankerMissionId = this.AmcTankerMissionId;
    _o.AltTankerMissionId = this.AltTankerMissionId;
    _o.TankerCallSign = this.TankerCallSign;
    _o.TankerOwner = this.TankerOwner;
    _o.TankerPOC = this.TankerPOC;
    _o.TankerLegNum = this.TankerLegNum;
    _o.TankerDeployedICAO = this.TankerDeployedICAO;
    _o.TankerDeliveryMethod = this.TankerDeliveryMethod;
    _o.FuelOff = this.FuelOff;
    _o.TankerCellPosition = this.TankerCellPosition;
    _o.TankerFuelType = this.TankerFuelType;
    _o.DualRole = this.DualRole;
  }
  public static Offset<AirEventTankers_Abridged> Pack(FlatBufferBuilder builder, AirEventTankers_AbridgedT _o) {
    if (_o == null) return default(Offset<AirEventTankers_Abridged>);
    var _idTankerSortie = _o.IdTankerSortie == null ? default(StringOffset) : builder.CreateString(_o.IdTankerSortie);
    var _idTankerMission = _o.IdTankerMission == null ? default(StringOffset) : builder.CreateString(_o.IdTankerMission);
    var _idTankerAirfield = _o.IdTankerAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdTankerAirfield);
    var _externalTankerId = _o.ExternalTankerId == null ? default(StringOffset) : builder.CreateString(_o.ExternalTankerId);
    var _tankerCoord = _o.TankerCoord == null ? default(StringOffset) : builder.CreateString(_o.TankerCoord);
    var _tankerMDS = _o.TankerMDS == null ? default(StringOffset) : builder.CreateString(_o.TankerMDS);
    var _amcTankerMissionId = _o.AmcTankerMissionId == null ? default(StringOffset) : builder.CreateString(_o.AmcTankerMissionId);
    var _altTankerMissionId = _o.AltTankerMissionId == null ? default(StringOffset) : builder.CreateString(_o.AltTankerMissionId);
    var _tankerCallSign = _o.TankerCallSign == null ? default(StringOffset) : builder.CreateString(_o.TankerCallSign);
    var _tankerOwner = _o.TankerOwner == null ? default(StringOffset) : builder.CreateString(_o.TankerOwner);
    var _tankerPOC = _o.TankerPOC == null ? default(StringOffset) : builder.CreateString(_o.TankerPOC);
    var _tankerDeployedICAO = _o.TankerDeployedICAO == null ? default(StringOffset) : builder.CreateString(_o.TankerDeployedICAO);
    var _tankerDeliveryMethod = _o.TankerDeliveryMethod == null ? default(StringOffset) : builder.CreateString(_o.TankerDeliveryMethod);
    var _tankerFuelType = _o.TankerFuelType == null ? default(StringOffset) : builder.CreateString(_o.TankerFuelType);
    return CreateAirEventTankers_Abridged(
      builder,
      _idTankerSortie,
      _idTankerMission,
      _idTankerAirfield,
      _externalTankerId,
      _tankerCoord,
      _tankerMDS,
      _amcTankerMissionId,
      _altTankerMissionId,
      _tankerCallSign,
      _tankerOwner,
      _tankerPOC,
      _o.TankerLegNum,
      _tankerDeployedICAO,
      _tankerDeliveryMethod,
      _o.FuelOff,
      _o.TankerCellPosition,
      _tankerFuelType,
      _o.DualRole);
  }
}

public class AirEventTankers_AbridgedT
{
  public string IdTankerSortie { get; set; }
  public string IdTankerMission { get; set; }
  public string IdTankerAirfield { get; set; }
  public string ExternalTankerId { get; set; }
  public string TankerCoord { get; set; }
  public string TankerMDS { get; set; }
  public string AmcTankerMissionId { get; set; }
  public string AltTankerMissionId { get; set; }
  public string TankerCallSign { get; set; }
  public string TankerOwner { get; set; }
  public string TankerPOC { get; set; }
  public int TankerLegNum { get; set; }
  public string TankerDeployedICAO { get; set; }
  public string TankerDeliveryMethod { get; set; }
  public double FuelOff { get; set; }
  public int TankerCellPosition { get; set; }
  public string TankerFuelType { get; set; }
  public bool DualRole { get; set; }

  public AirEventTankers_AbridgedT() {
    this.IdTankerSortie = null;
    this.IdTankerMission = null;
    this.IdTankerAirfield = null;
    this.ExternalTankerId = null;
    this.TankerCoord = null;
    this.TankerMDS = null;
    this.AmcTankerMissionId = null;
    this.AltTankerMissionId = null;
    this.TankerCallSign = null;
    this.TankerOwner = null;
    this.TankerPOC = null;
    this.TankerLegNum = 0;
    this.TankerDeployedICAO = null;
    this.TankerDeliveryMethod = null;
    this.FuelOff = 0.0;
    this.TankerCellPosition = 0;
    this.TankerFuelType = null;
    this.DualRole = false;
  }
  public static AirEventTankers_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AirEventTankers_Abridged.GetRootAsAirEventTankers_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirEventTankers_Abridged.FinishAirEventTankers_AbridgedBuffer(fbb, AirEventTankers_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirEventTankers_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdTankerSortie*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdTankerMission*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdTankerAirfield*/, false)
      && verifier.VerifyString(tablePos, 10 /*ExternalTankerId*/, false)
      && verifier.VerifyString(tablePos, 12 /*TankerCoord*/, false)
      && verifier.VerifyString(tablePos, 14 /*TankerMDS*/, false)
      && verifier.VerifyString(tablePos, 16 /*AmcTankerMissionId*/, false)
      && verifier.VerifyString(tablePos, 18 /*AltTankerMissionId*/, false)
      && verifier.VerifyString(tablePos, 20 /*TankerCallSign*/, false)
      && verifier.VerifyString(tablePos, 22 /*TankerOwner*/, false)
      && verifier.VerifyString(tablePos, 24 /*TankerPOC*/, false)
      && verifier.VerifyField(tablePos, 26 /*TankerLegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*TankerDeployedICAO*/, false)
      && verifier.VerifyString(tablePos, 30 /*TankerDeliveryMethod*/, false)
      && verifier.VerifyField(tablePos, 32 /*FuelOff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*TankerCellPosition*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*TankerFuelType*/, false)
      && verifier.VerifyField(tablePos, 38 /*DualRole*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
