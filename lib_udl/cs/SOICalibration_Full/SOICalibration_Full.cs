// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Schema for SOI Calibration data.
public struct SOICalibration_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SOICalibration_Full GetRootAsSOICalibration_Full(ByteBuffer _bb) { return GetRootAsSOICalibration_Full(_bb, new SOICalibration_Full()); }
  public static SOICalibration_Full GetRootAsSOICalibration_Full(ByteBuffer _bb, SOICalibration_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SOICalibration_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SOIC"); }
  public static bool VerifySOICalibration_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SOIC", false, SOICalibration_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SOICalibration_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  public double CalExtinctionCoeff { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: 30086.25
  /// Constraints: No constraints specified.
  public double CalSkyBg { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double CalBgIntensity { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 19.23664587
  /// Constraints: No constraints specified.
  public double CalSpectralFilterSolarMag { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 25.15682157
  /// Constraints: No constraints specified.
  public double CalZeroPoint { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int CalNumDetectedStars { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int CalNumCorrelatedStars { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.06474939
  /// Constraints: No constraints specified.
  public double CalExtinctionCoeffUnc { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.19708838
  /// Constraints: No constraints specified.
  public double CalExtinctionCoeffMaxUnc { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
  /// Example: /// Example: 2023-01-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CalTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCalTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCalTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCalTimeArray() { return __p.__vector_as_array<byte>(22); }
  /// Type of calibration (e.g. PRE, MID, POST).
  /// Example: /// Example: PRE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CalType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCalTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCalTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCalTypeArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<SOICalibration_Full> CreateSOICalibration_Full(FlatBufferBuilder builder,
      double calExtinctionCoeff = 0.0,
      double calSkyBg = 0.0,
      double calBgIntensity = 0.0,
      double calSpectralFilterSolarMag = 0.0,
      double calZeroPoint = 0.0,
      int calNumDetectedStars = 0,
      int calNumCorrelatedStars = 0,
      double calExtinctionCoeffUnc = 0.0,
      double calExtinctionCoeffMaxUnc = 0.0,
      StringOffset calTimeOffset = default(StringOffset),
      StringOffset calTypeOffset = default(StringOffset)) {
    builder.StartTable(11);
    SOICalibration_Full.AddCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc);
    SOICalibration_Full.AddCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc);
    SOICalibration_Full.AddCalZeroPoint(builder, calZeroPoint);
    SOICalibration_Full.AddCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag);
    SOICalibration_Full.AddCalBgIntensity(builder, calBgIntensity);
    SOICalibration_Full.AddCalSkyBg(builder, calSkyBg);
    SOICalibration_Full.AddCalExtinctionCoeff(builder, calExtinctionCoeff);
    SOICalibration_Full.AddCalType(builder, calTypeOffset);
    SOICalibration_Full.AddCalTime(builder, calTimeOffset);
    SOICalibration_Full.AddCalNumCorrelatedStars(builder, calNumCorrelatedStars);
    SOICalibration_Full.AddCalNumDetectedStars(builder, calNumDetectedStars);
    return SOICalibration_Full.EndSOICalibration_Full(builder);
  }

  public static void StartSOICalibration_Full(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddCalExtinctionCoeff(FlatBufferBuilder builder, double calExtinctionCoeff) { builder.AddDouble(0, calExtinctionCoeff, 0.0); }
  public static void AddCalSkyBg(FlatBufferBuilder builder, double calSkyBg) { builder.AddDouble(1, calSkyBg, 0.0); }
  public static void AddCalBgIntensity(FlatBufferBuilder builder, double calBgIntensity) { builder.AddDouble(2, calBgIntensity, 0.0); }
  public static void AddCalSpectralFilterSolarMag(FlatBufferBuilder builder, double calSpectralFilterSolarMag) { builder.AddDouble(3, calSpectralFilterSolarMag, 0.0); }
  public static void AddCalZeroPoint(FlatBufferBuilder builder, double calZeroPoint) { builder.AddDouble(4, calZeroPoint, 0.0); }
  public static void AddCalNumDetectedStars(FlatBufferBuilder builder, int calNumDetectedStars) { builder.AddInt(5, calNumDetectedStars, 0); }
  public static void AddCalNumCorrelatedStars(FlatBufferBuilder builder, int calNumCorrelatedStars) { builder.AddInt(6, calNumCorrelatedStars, 0); }
  public static void AddCalExtinctionCoeffUnc(FlatBufferBuilder builder, double calExtinctionCoeffUnc) { builder.AddDouble(7, calExtinctionCoeffUnc, 0.0); }
  public static void AddCalExtinctionCoeffMaxUnc(FlatBufferBuilder builder, double calExtinctionCoeffMaxUnc) { builder.AddDouble(8, calExtinctionCoeffMaxUnc, 0.0); }
  public static void AddCalTime(FlatBufferBuilder builder, StringOffset calTimeOffset) { builder.AddOffset(9, calTimeOffset.Value, 0); }
  public static void AddCalType(FlatBufferBuilder builder, StringOffset calTypeOffset) { builder.AddOffset(10, calTypeOffset.Value, 0); }
  public static Offset<SOICalibration_Full> EndSOICalibration_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SOICalibration_Full>(o);
  }
  public static void FinishSOICalibration_FullBuffer(FlatBufferBuilder builder, Offset<SOICalibration_Full> offset) { builder.Finish(offset.Value, "SOIC"); }
  public static void FinishSizePrefixedSOICalibration_FullBuffer(FlatBufferBuilder builder, Offset<SOICalibration_Full> offset) { builder.FinishSizePrefixed(offset.Value, "SOIC"); }
  public SOICalibration_FullT UnPack() {
    var _o = new SOICalibration_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SOICalibration_FullT _o) {
    _o.CalExtinctionCoeff = this.CalExtinctionCoeff;
    _o.CalSkyBg = this.CalSkyBg;
    _o.CalBgIntensity = this.CalBgIntensity;
    _o.CalSpectralFilterSolarMag = this.CalSpectralFilterSolarMag;
    _o.CalZeroPoint = this.CalZeroPoint;
    _o.CalNumDetectedStars = this.CalNumDetectedStars;
    _o.CalNumCorrelatedStars = this.CalNumCorrelatedStars;
    _o.CalExtinctionCoeffUnc = this.CalExtinctionCoeffUnc;
    _o.CalExtinctionCoeffMaxUnc = this.CalExtinctionCoeffMaxUnc;
    _o.CalTime = this.CalTime;
    _o.CalType = this.CalType;
  }
  public static Offset<SOICalibration_Full> Pack(FlatBufferBuilder builder, SOICalibration_FullT _o) {
    if (_o == null) return default(Offset<SOICalibration_Full>);
    var _calTime = _o.CalTime == null ? default(StringOffset) : builder.CreateString(_o.CalTime);
    var _calType = _o.CalType == null ? default(StringOffset) : builder.CreateString(_o.CalType);
    return CreateSOICalibration_Full(
      builder,
      _o.CalExtinctionCoeff,
      _o.CalSkyBg,
      _o.CalBgIntensity,
      _o.CalSpectralFilterSolarMag,
      _o.CalZeroPoint,
      _o.CalNumDetectedStars,
      _o.CalNumCorrelatedStars,
      _o.CalExtinctionCoeffUnc,
      _o.CalExtinctionCoeffMaxUnc,
      _calTime,
      _calType);
  }
}

public class SOICalibration_FullT
{
  public double CalExtinctionCoeff { get; set; }
  public double CalSkyBg { get; set; }
  public double CalBgIntensity { get; set; }
  public double CalSpectralFilterSolarMag { get; set; }
  public double CalZeroPoint { get; set; }
  public int CalNumDetectedStars { get; set; }
  public int CalNumCorrelatedStars { get; set; }
  public double CalExtinctionCoeffUnc { get; set; }
  public double CalExtinctionCoeffMaxUnc { get; set; }
  public string CalTime { get; set; }
  public string CalType { get; set; }

  public SOICalibration_FullT() {
    this.CalExtinctionCoeff = 0.0;
    this.CalSkyBg = 0.0;
    this.CalBgIntensity = 0.0;
    this.CalSpectralFilterSolarMag = 0.0;
    this.CalZeroPoint = 0.0;
    this.CalNumDetectedStars = 0;
    this.CalNumCorrelatedStars = 0;
    this.CalExtinctionCoeffUnc = 0.0;
    this.CalExtinctionCoeffMaxUnc = 0.0;
    this.CalTime = null;
    this.CalType = null;
  }
  public static SOICalibration_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return SOICalibration_Full.GetRootAsSOICalibration_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SOICalibration_Full.FinishSOICalibration_FullBuffer(fbb, SOICalibration_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SOICalibration_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CalExtinctionCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CalSkyBg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*CalBgIntensity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CalSpectralFilterSolarMag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*CalZeroPoint*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*CalNumDetectedStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CalNumCorrelatedStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*CalExtinctionCoeffUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*CalExtinctionCoeffMaxUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*CalTime*/, false)
      && verifier.VerifyString(tablePos, 24 /*CalType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
