// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
public struct ManifoldElset_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ManifoldElset_Full GetRootAsManifoldElset_Full(ByteBuffer _bb) { return GetRootAsManifoldElset_Full(_bb, new ManifoldElset_Full()); }
  public static ManifoldElset_Full GetRootAsManifoldElset_Full(ByteBuffer _bb, ManifoldElset_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ManifoldElset_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MANI"); }
  public static bool VerifyManifoldElset_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MANI", false, ManifoldElset_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ManifoldElset_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MANIFOLDELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the parent Manifold record.
  /// Example: /// Example: REF-MANIFOLD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdManifold { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdManifoldBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdManifoldBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdManifoldArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// A placeholder satellite number and not a true NORAD catalog number.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int TmpSatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Epoch { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEpochBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEpochBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEpochArray() { return __p.__vector_as_array<byte>(12); }
  /// The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MeanMotion { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double Eccentricity { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  public double Inclination { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Raan { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double ArgOfPerigee { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MeanAnomaly { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int RevNo { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double BStar { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MeanMotionDot { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MeanMotionDDot { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double SemiMajorAxis { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Period of the orbit equal to inverse of mean motion.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Period { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Apogee { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Perigee { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  public string Line1 { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLine1Bytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetLine1Bytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetLine1Array() { return __p.__vector_as_array<byte>(42); }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  public string Line2 { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLine2Bytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetLine2Bytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetLine2Array() { return __p.__vector_as_array<byte>(44); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(46); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(48); }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(50); }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(52); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(54); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(56); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public ManifoldElset_Full_dataMode_Enum DataMode { get { int o = __p.__offset(58); return o != 0 ? (ManifoldElset_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ManifoldElset_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(60); }

  public static Offset<ManifoldElset_Full> CreateManifoldElset_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idManifoldOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int tmpSatNo = 0,
      StringOffset epochOffset = default(StringOffset),
      double meanMotion = 0.0,
      double eccentricity = 0.0,
      double inclination = 0.0,
      double raan = 0.0,
      double argOfPerigee = 0.0,
      double meanAnomaly = 0.0,
      int revNo = 0,
      double bStar = 0.0,
      double meanMotionDot = 0.0,
      double meanMotionDDot = 0.0,
      double semiMajorAxis = 0.0,
      double period = 0.0,
      double apogee = 0.0,
      double perigee = 0.0,
      StringOffset line1Offset = default(StringOffset),
      StringOffset line2Offset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      ManifoldElset_Full_dataMode_Enum dataMode = ManifoldElset_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(29);
    ManifoldElset_Full.AddPerigee(builder, perigee);
    ManifoldElset_Full.AddApogee(builder, apogee);
    ManifoldElset_Full.AddPeriod(builder, period);
    ManifoldElset_Full.AddSemiMajorAxis(builder, semiMajorAxis);
    ManifoldElset_Full.AddMeanMotionDDot(builder, meanMotionDDot);
    ManifoldElset_Full.AddMeanMotionDot(builder, meanMotionDot);
    ManifoldElset_Full.AddBStar(builder, bStar);
    ManifoldElset_Full.AddMeanAnomaly(builder, meanAnomaly);
    ManifoldElset_Full.AddArgOfPerigee(builder, argOfPerigee);
    ManifoldElset_Full.AddRaan(builder, raan);
    ManifoldElset_Full.AddInclination(builder, inclination);
    ManifoldElset_Full.AddEccentricity(builder, eccentricity);
    ManifoldElset_Full.AddMeanMotion(builder, meanMotion);
    ManifoldElset_Full.AddOrigNetwork(builder, origNetworkOffset);
    ManifoldElset_Full.AddOrigin(builder, originOffset);
    ManifoldElset_Full.AddSource(builder, sourceOffset);
    ManifoldElset_Full.AddUpdatedBy(builder, updatedByOffset);
    ManifoldElset_Full.AddUpdatedAt(builder, updatedAtOffset);
    ManifoldElset_Full.AddCreatedBy(builder, createdByOffset);
    ManifoldElset_Full.AddCreatedAt(builder, createdAtOffset);
    ManifoldElset_Full.AddLine2(builder, line2Offset);
    ManifoldElset_Full.AddLine1(builder, line1Offset);
    ManifoldElset_Full.AddRevNo(builder, revNo);
    ManifoldElset_Full.AddEpoch(builder, epochOffset);
    ManifoldElset_Full.AddTmpSatNo(builder, tmpSatNo);
    ManifoldElset_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    ManifoldElset_Full.AddIdManifold(builder, idManifoldOffset);
    ManifoldElset_Full.AddId(builder, idOffset);
    ManifoldElset_Full.AddDataMode(builder, dataMode);
    return ManifoldElset_Full.EndManifoldElset_Full(builder);
  }

  public static void StartManifoldElset_Full(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdManifold(FlatBufferBuilder builder, StringOffset idManifoldOffset) { builder.AddOffset(1, idManifoldOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddTmpSatNo(FlatBufferBuilder builder, int tmpSatNo) { builder.AddInt(3, tmpSatNo, 0); }
  public static void AddEpoch(FlatBufferBuilder builder, StringOffset epochOffset) { builder.AddOffset(4, epochOffset.Value, 0); }
  public static void AddMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.AddDouble(5, meanMotion, 0.0); }
  public static void AddEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.AddDouble(6, eccentricity, 0.0); }
  public static void AddInclination(FlatBufferBuilder builder, double inclination) { builder.AddDouble(7, inclination, 0.0); }
  public static void AddRaan(FlatBufferBuilder builder, double raan) { builder.AddDouble(8, raan, 0.0); }
  public static void AddArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.AddDouble(9, argOfPerigee, 0.0); }
  public static void AddMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.AddDouble(10, meanAnomaly, 0.0); }
  public static void AddRevNo(FlatBufferBuilder builder, int revNo) { builder.AddInt(11, revNo, 0); }
  public static void AddBStar(FlatBufferBuilder builder, double bStar) { builder.AddDouble(12, bStar, 0.0); }
  public static void AddMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.AddDouble(13, meanMotionDot, 0.0); }
  public static void AddMeanMotionDDot(FlatBufferBuilder builder, double meanMotionDDot) { builder.AddDouble(14, meanMotionDDot, 0.0); }
  public static void AddSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.AddDouble(15, semiMajorAxis, 0.0); }
  public static void AddPeriod(FlatBufferBuilder builder, double period) { builder.AddDouble(16, period, 0.0); }
  public static void AddApogee(FlatBufferBuilder builder, double apogee) { builder.AddDouble(17, apogee, 0.0); }
  public static void AddPerigee(FlatBufferBuilder builder, double perigee) { builder.AddDouble(18, perigee, 0.0); }
  public static void AddLine1(FlatBufferBuilder builder, StringOffset line1Offset) { builder.AddOffset(19, line1Offset.Value, 0); }
  public static void AddLine2(FlatBufferBuilder builder, StringOffset line2Offset) { builder.AddOffset(20, line2Offset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(21, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(22, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(23, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(24, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(25, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(26, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, ManifoldElset_Full_dataMode_Enum dataMode) { builder.AddSbyte(27, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(28, origNetworkOffset.Value, 0); }
  public static Offset<ManifoldElset_Full> EndManifoldElset_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ManifoldElset_Full>(o);
  }
  public static void FinishManifoldElset_FullBuffer(FlatBufferBuilder builder, Offset<ManifoldElset_Full> offset) { builder.Finish(offset.Value, "MANI"); }
  public static void FinishSizePrefixedManifoldElset_FullBuffer(FlatBufferBuilder builder, Offset<ManifoldElset_Full> offset) { builder.FinishSizePrefixed(offset.Value, "MANI"); }
  public ManifoldElset_FullT UnPack() {
    var _o = new ManifoldElset_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ManifoldElset_FullT _o) {
    _o.Id = this.Id;
    _o.IdManifold = this.IdManifold;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.TmpSatNo = this.TmpSatNo;
    _o.Epoch = this.Epoch;
    _o.MeanMotion = this.MeanMotion;
    _o.Eccentricity = this.Eccentricity;
    _o.Inclination = this.Inclination;
    _o.Raan = this.Raan;
    _o.ArgOfPerigee = this.ArgOfPerigee;
    _o.MeanAnomaly = this.MeanAnomaly;
    _o.RevNo = this.RevNo;
    _o.BStar = this.BStar;
    _o.MeanMotionDot = this.MeanMotionDot;
    _o.MeanMotionDDot = this.MeanMotionDDot;
    _o.SemiMajorAxis = this.SemiMajorAxis;
    _o.Period = this.Period;
    _o.Apogee = this.Apogee;
    _o.Perigee = this.Perigee;
    _o.Line1 = this.Line1;
    _o.Line2 = this.Line2;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<ManifoldElset_Full> Pack(FlatBufferBuilder builder, ManifoldElset_FullT _o) {
    if (_o == null) return default(Offset<ManifoldElset_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idManifold = _o.IdManifold == null ? default(StringOffset) : builder.CreateString(_o.IdManifold);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _epoch = _o.Epoch == null ? default(StringOffset) : builder.CreateString(_o.Epoch);
    var _line1 = _o.Line1 == null ? default(StringOffset) : builder.CreateString(_o.Line1);
    var _line2 = _o.Line2 == null ? default(StringOffset) : builder.CreateString(_o.Line2);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateManifoldElset_Full(
      builder,
      _id,
      _idManifold,
      _classificationMarking,
      _o.TmpSatNo,
      _epoch,
      _o.MeanMotion,
      _o.Eccentricity,
      _o.Inclination,
      _o.Raan,
      _o.ArgOfPerigee,
      _o.MeanAnomaly,
      _o.RevNo,
      _o.BStar,
      _o.MeanMotionDot,
      _o.MeanMotionDDot,
      _o.SemiMajorAxis,
      _o.Period,
      _o.Apogee,
      _o.Perigee,
      _line1,
      _line2,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class ManifoldElset_FullT
{
  public string Id { get; set; }
  public string IdManifold { get; set; }
  public string ClassificationMarking { get; set; }
  public int TmpSatNo { get; set; }
  public string Epoch { get; set; }
  public double MeanMotion { get; set; }
  public double Eccentricity { get; set; }
  public double Inclination { get; set; }
  public double Raan { get; set; }
  public double ArgOfPerigee { get; set; }
  public double MeanAnomaly { get; set; }
  public int RevNo { get; set; }
  public double BStar { get; set; }
  public double MeanMotionDot { get; set; }
  public double MeanMotionDDot { get; set; }
  public double SemiMajorAxis { get; set; }
  public double Period { get; set; }
  public double Apogee { get; set; }
  public double Perigee { get; set; }
  public string Line1 { get; set; }
  public string Line2 { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public ManifoldElset_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public ManifoldElset_FullT() {
    this.Id = null;
    this.IdManifold = null;
    this.ClassificationMarking = null;
    this.TmpSatNo = 0;
    this.Epoch = null;
    this.MeanMotion = 0.0;
    this.Eccentricity = 0.0;
    this.Inclination = 0.0;
    this.Raan = 0.0;
    this.ArgOfPerigee = 0.0;
    this.MeanAnomaly = 0.0;
    this.RevNo = 0;
    this.BStar = 0.0;
    this.MeanMotionDot = 0.0;
    this.MeanMotionDDot = 0.0;
    this.SemiMajorAxis = 0.0;
    this.Period = 0.0;
    this.Apogee = 0.0;
    this.Perigee = 0.0;
    this.Line1 = null;
    this.Line2 = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = ManifoldElset_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static ManifoldElset_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return ManifoldElset_Full.GetRootAsManifoldElset_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ManifoldElset_Full.FinishManifoldElset_FullBuffer(fbb, ManifoldElset_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ManifoldElset_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdManifold*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 10 /*TmpSatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Epoch*/, false)
      && verifier.VerifyField(tablePos, 14 /*MeanMotion*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Eccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Inclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Raan*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*ArgOfPerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*MeanAnomaly*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*RevNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*BStar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*MeanMotionDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*MeanMotionDDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*SemiMajorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Period*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Apogee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*Perigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 42 /*Line1*/, false)
      && verifier.VerifyString(tablePos, 44 /*Line2*/, false)
      && verifier.VerifyString(tablePos, 46 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 48 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 50 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 52 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 54 /*Source*/, false)
      && verifier.VerifyString(tablePos, 56 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 58 /*DataMode*/, 1 /*ManifoldElset_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 60 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
