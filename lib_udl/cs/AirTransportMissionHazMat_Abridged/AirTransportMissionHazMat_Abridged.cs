// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of Hazardous Material information associated with this Air Transport Mission.
public struct AirTransportMissionHazMat_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirTransportMissionHazMat_Abridged GetRootAsAirTransportMissionHazMat_Abridged(ByteBuffer _bb) { return GetRootAsAirTransportMissionHazMat_Abridged(_bb, new AirTransportMissionHazMat_Abridged()); }
  public static AirTransportMissionHazMat_Abridged GetRootAsAirTransportMissionHazMat_Abridged(ByteBuffer _bb, AirTransportMissionHazMat_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirTransportMissionHazMat_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRT"); }
  public static bool VerifyAirTransportMissionHazMat_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRT", false, AirTransportMissionHazMat_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirTransportMissionHazMat_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The hazMat identifier provided by the originating source.
  /// Example: /// Example: cb6289e0f38534e01291ab6421d42724
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExtHazMatId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtHazMatIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetExtHazMatIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetExtHazMatIdArray() { return __p.__vector_as_array<byte>(4); }
  /// United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  /// Example: /// Example: LITHIUM METAL BATTERIES
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string ItemName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetItemNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetItemNameArray() { return __p.__vector_as_array<byte>(6); }
  /// United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  /// Example: /// Example: 0181
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string UnNum { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnNumBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUnNumBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUnNumArray() { return __p.__vector_as_array<byte>(8); }
  /// Number of pieces of hazardous cargo.
  /// Example: /// Example: 29
  /// Constraints: No constraints specified.
  public int Pieces { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
  /// Example: /// Example: 22.1
  /// Constraints: No constraints specified.
  public double Weight { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Net explosive weight of the hazardous material, in kilograms.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  public double NetExpWt { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ClassDiv { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string Cgc { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCgcBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCgcBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCgcArray() { return __p.__vector_as_array<byte>(18); }
  /// Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
  /// Example: /// Example: 4,5,7,8
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string Cgn { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCgnBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCgnBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCgnArray() { return __p.__vector_as_array<byte>(20); }
  /// Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
  /// Example: /// Example: 11,12
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string ApplicableNotes { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApplicableNotesBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetApplicableNotesBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetApplicableNotesArray() { return __p.__vector_as_array<byte>(22); }
  /// Itinerary number that identifies where the hazardous material is loaded.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int OnItin { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
  /// Example: /// Example: LIRQ
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string OnICAO { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnICAOBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOnICAOBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOnICAOArray() { return __p.__vector_as_array<byte>(26); }
  /// Itinerary number that identifies where the hazardous material is unloaded.
  /// Example: /// Example: 300
  /// Constraints: No constraints specified.
  public int OffItin { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
  /// Example: /// Example: MBPV
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string OffICAO { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffICAOBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOffICAOBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOffICAOArray() { return __p.__vector_as_array<byte>(30); }
  /// Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string Planned { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetPlannedBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetPlannedArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<AirTransportMissionHazMat_Abridged> CreateAirTransportMissionHazMat_Abridged(FlatBufferBuilder builder,
      StringOffset extHazMatIdOffset = default(StringOffset),
      StringOffset itemNameOffset = default(StringOffset),
      StringOffset unNumOffset = default(StringOffset),
      int pieces = 0,
      double weight = 0.0,
      double netExpWt = 0.0,
      double classDiv = 0.0,
      StringOffset cgcOffset = default(StringOffset),
      StringOffset cgnOffset = default(StringOffset),
      StringOffset applicableNotesOffset = default(StringOffset),
      int onItin = 0,
      StringOffset onICAOOffset = default(StringOffset),
      int offItin = 0,
      StringOffset offICAOOffset = default(StringOffset),
      StringOffset plannedOffset = default(StringOffset)) {
    builder.StartTable(15);
    AirTransportMissionHazMat_Abridged.AddClassDiv(builder, classDiv);
    AirTransportMissionHazMat_Abridged.AddNetExpWt(builder, netExpWt);
    AirTransportMissionHazMat_Abridged.AddWeight(builder, weight);
    AirTransportMissionHazMat_Abridged.AddPlanned(builder, plannedOffset);
    AirTransportMissionHazMat_Abridged.AddOffICAO(builder, offICAOOffset);
    AirTransportMissionHazMat_Abridged.AddOffItin(builder, offItin);
    AirTransportMissionHazMat_Abridged.AddOnICAO(builder, onICAOOffset);
    AirTransportMissionHazMat_Abridged.AddOnItin(builder, onItin);
    AirTransportMissionHazMat_Abridged.AddApplicableNotes(builder, applicableNotesOffset);
    AirTransportMissionHazMat_Abridged.AddCgn(builder, cgnOffset);
    AirTransportMissionHazMat_Abridged.AddCgc(builder, cgcOffset);
    AirTransportMissionHazMat_Abridged.AddPieces(builder, pieces);
    AirTransportMissionHazMat_Abridged.AddUnNum(builder, unNumOffset);
    AirTransportMissionHazMat_Abridged.AddItemName(builder, itemNameOffset);
    AirTransportMissionHazMat_Abridged.AddExtHazMatId(builder, extHazMatIdOffset);
    return AirTransportMissionHazMat_Abridged.EndAirTransportMissionHazMat_Abridged(builder);
  }

  public static void StartAirTransportMissionHazMat_Abridged(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddExtHazMatId(FlatBufferBuilder builder, StringOffset extHazMatIdOffset) { builder.AddOffset(0, extHazMatIdOffset.Value, 0); }
  public static void AddItemName(FlatBufferBuilder builder, StringOffset itemNameOffset) { builder.AddOffset(1, itemNameOffset.Value, 0); }
  public static void AddUnNum(FlatBufferBuilder builder, StringOffset unNumOffset) { builder.AddOffset(2, unNumOffset.Value, 0); }
  public static void AddPieces(FlatBufferBuilder builder, int pieces) { builder.AddInt(3, pieces, 0); }
  public static void AddWeight(FlatBufferBuilder builder, double weight) { builder.AddDouble(4, weight, 0.0); }
  public static void AddNetExpWt(FlatBufferBuilder builder, double netExpWt) { builder.AddDouble(5, netExpWt, 0.0); }
  public static void AddClassDiv(FlatBufferBuilder builder, double classDiv) { builder.AddDouble(6, classDiv, 0.0); }
  public static void AddCgc(FlatBufferBuilder builder, StringOffset cgcOffset) { builder.AddOffset(7, cgcOffset.Value, 0); }
  public static void AddCgn(FlatBufferBuilder builder, StringOffset cgnOffset) { builder.AddOffset(8, cgnOffset.Value, 0); }
  public static void AddApplicableNotes(FlatBufferBuilder builder, StringOffset applicableNotesOffset) { builder.AddOffset(9, applicableNotesOffset.Value, 0); }
  public static void AddOnItin(FlatBufferBuilder builder, int onItin) { builder.AddInt(10, onItin, 0); }
  public static void AddOnICAO(FlatBufferBuilder builder, StringOffset onICAOOffset) { builder.AddOffset(11, onICAOOffset.Value, 0); }
  public static void AddOffItin(FlatBufferBuilder builder, int offItin) { builder.AddInt(12, offItin, 0); }
  public static void AddOffICAO(FlatBufferBuilder builder, StringOffset offICAOOffset) { builder.AddOffset(13, offICAOOffset.Value, 0); }
  public static void AddPlanned(FlatBufferBuilder builder, StringOffset plannedOffset) { builder.AddOffset(14, plannedOffset.Value, 0); }
  public static Offset<AirTransportMissionHazMat_Abridged> EndAirTransportMissionHazMat_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirTransportMissionHazMat_Abridged>(o);
  }
  public static void FinishAirTransportMissionHazMat_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirTransportMissionHazMat_Abridged> offset) { builder.Finish(offset.Value, "AIRT"); }
  public static void FinishSizePrefixedAirTransportMissionHazMat_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirTransportMissionHazMat_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRT"); }
  public AirTransportMissionHazMat_AbridgedT UnPack() {
    var _o = new AirTransportMissionHazMat_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirTransportMissionHazMat_AbridgedT _o) {
    _o.ExtHazMatId = this.ExtHazMatId;
    _o.ItemName = this.ItemName;
    _o.UnNum = this.UnNum;
    _o.Pieces = this.Pieces;
    _o.Weight = this.Weight;
    _o.NetExpWt = this.NetExpWt;
    _o.ClassDiv = this.ClassDiv;
    _o.Cgc = this.Cgc;
    _o.Cgn = this.Cgn;
    _o.ApplicableNotes = this.ApplicableNotes;
    _o.OnItin = this.OnItin;
    _o.OnICAO = this.OnICAO;
    _o.OffItin = this.OffItin;
    _o.OffICAO = this.OffICAO;
    _o.Planned = this.Planned;
  }
  public static Offset<AirTransportMissionHazMat_Abridged> Pack(FlatBufferBuilder builder, AirTransportMissionHazMat_AbridgedT _o) {
    if (_o == null) return default(Offset<AirTransportMissionHazMat_Abridged>);
    var _extHazMatId = _o.ExtHazMatId == null ? default(StringOffset) : builder.CreateString(_o.ExtHazMatId);
    var _itemName = _o.ItemName == null ? default(StringOffset) : builder.CreateString(_o.ItemName);
    var _unNum = _o.UnNum == null ? default(StringOffset) : builder.CreateString(_o.UnNum);
    var _cgc = _o.Cgc == null ? default(StringOffset) : builder.CreateString(_o.Cgc);
    var _cgn = _o.Cgn == null ? default(StringOffset) : builder.CreateString(_o.Cgn);
    var _applicableNotes = _o.ApplicableNotes == null ? default(StringOffset) : builder.CreateString(_o.ApplicableNotes);
    var _onICAO = _o.OnICAO == null ? default(StringOffset) : builder.CreateString(_o.OnICAO);
    var _offICAO = _o.OffICAO == null ? default(StringOffset) : builder.CreateString(_o.OffICAO);
    var _planned = _o.Planned == null ? default(StringOffset) : builder.CreateString(_o.Planned);
    return CreateAirTransportMissionHazMat_Abridged(
      builder,
      _extHazMatId,
      _itemName,
      _unNum,
      _o.Pieces,
      _o.Weight,
      _o.NetExpWt,
      _o.ClassDiv,
      _cgc,
      _cgn,
      _applicableNotes,
      _o.OnItin,
      _onICAO,
      _o.OffItin,
      _offICAO,
      _planned);
  }
}

public class AirTransportMissionHazMat_AbridgedT
{
  public string ExtHazMatId { get; set; }
  public string ItemName { get; set; }
  public string UnNum { get; set; }
  public int Pieces { get; set; }
  public double Weight { get; set; }
  public double NetExpWt { get; set; }
  public double ClassDiv { get; set; }
  public string Cgc { get; set; }
  public string Cgn { get; set; }
  public string ApplicableNotes { get; set; }
  public int OnItin { get; set; }
  public string OnICAO { get; set; }
  public int OffItin { get; set; }
  public string OffICAO { get; set; }
  public string Planned { get; set; }

  public AirTransportMissionHazMat_AbridgedT() {
    this.ExtHazMatId = null;
    this.ItemName = null;
    this.UnNum = null;
    this.Pieces = 0;
    this.Weight = 0.0;
    this.NetExpWt = 0.0;
    this.ClassDiv = 0.0;
    this.Cgc = null;
    this.Cgn = null;
    this.ApplicableNotes = null;
    this.OnItin = 0;
    this.OnICAO = null;
    this.OffItin = 0;
    this.OffICAO = null;
    this.Planned = null;
  }
  public static AirTransportMissionHazMat_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AirTransportMissionHazMat_Abridged.GetRootAsAirTransportMissionHazMat_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirTransportMissionHazMat_Abridged.FinishAirTransportMissionHazMat_AbridgedBuffer(fbb, AirTransportMissionHazMat_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirTransportMissionHazMat_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ExtHazMatId*/, false)
      && verifier.VerifyString(tablePos, 6 /*ItemName*/, false)
      && verifier.VerifyString(tablePos, 8 /*UnNum*/, false)
      && verifier.VerifyField(tablePos, 10 /*Pieces*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Weight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*NetExpWt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*ClassDiv*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*Cgc*/, false)
      && verifier.VerifyString(tablePos, 20 /*Cgn*/, false)
      && verifier.VerifyString(tablePos, 22 /*ApplicableNotes*/, false)
      && verifier.VerifyField(tablePos, 24 /*OnItin*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*OnICAO*/, false)
      && verifier.VerifyField(tablePos, 28 /*OffItin*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*OffICAO*/, false)
      && verifier.VerifyString(tablePos, 32 /*Planned*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
