// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
public struct FlightPlanPointGroups_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanPointGroups_Abridged GetRootAsFlightPlanPointGroups_Abridged(ByteBuffer _bb) { return GetRootAsFlightPlanPointGroups_Abridged(_bb, new FlightPlanPointGroups_Abridged()); }
  public static FlightPlanPointGroups_Abridged GetRootAsFlightPlanPointGroups_Abridged(ByteBuffer _bb, FlightPlanPointGroups_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FlightPlanPointGroups_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "FLIG"); }
  public static bool VerifyFlightPlanPointGroups_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("FLIG", false, FlightPlanPointGroups_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlightPlanPointGroups_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
  /// Example: /// Example: ETOPS_CF_POINT_1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PointGroupName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointGroupNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPointGroupNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPointGroupNameArray() { return __p.__vector_as_array<byte>(4); }
  /// Specifies which Point Group case requires the most fuel.
  /// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string WorstFuelCase { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorstFuelCaseBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetWorstFuelCaseBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetWorstFuelCaseArray() { return __p.__vector_as_array<byte>(6); }
  /// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: LPPD
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string LsafName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLsafNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLsafNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLsafNameArray() { return __p.__vector_as_array<byte>(8); }
  /// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  public double LsafDistance { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  public double FsafDistance { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  public double EtopsDistance { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string LsafTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLsafTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLsafTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLsafTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string FsafTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFsafTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetFsafTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetFsafTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string EtopsTime { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEtopsTimeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEtopsTimeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEtopsTimeArray() { return __p.__vector_as_array<byte>(20); }
  /// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
  /// Example: /// Example: 13.1
  /// Constraints: No constraints specified.
  public double LsafAvgWindFactor { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double FsafAvgWindFactor { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double EtopsAvgWindFactor { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  public double LsafTempDev { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  public double FsafTempDev { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  public double EtopsTempDev { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
  /// Example: /// Example: 50787.1
  /// Constraints: No constraints specified.
  public double LsafReqFuel { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
  /// Example: /// Example: 50380.1
  /// Constraints: No constraints specified.
  public double FsafReqFuel { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
  /// Example: /// Example: 4412.1
  /// Constraints: No constraints specified.
  public double EtopsReqFuel { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total time from takeoff when the point is reached expressed in HH:MM format.
  /// Example: /// Example: 07:29
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string FromTakeoffTime { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFromTakeoffTimeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetFromTakeoffTimeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetFromTakeoffTimeArray() { return __p.__vector_as_array<byte>(40); }
  /// Amount of planned fuel on board when the point is reached in pounds.
  /// Example: /// Example: 190319.1
  /// Constraints: No constraints specified.
  public double PlannedFuel { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flight level of the point at which the fuel was calculated in feet.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double FuelCalcAlt { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True airspeed at which the fuel was calculated in knots.
  /// Example: /// Example: 365.1
  /// Constraints: No constraints specified.
  public double FuelCalcSpd { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average fuel flow at which the fuel was calculated in pounds per hour.
  /// Example: /// Example: 19693.1
  /// Constraints: No constraints specified.
  public double AvgFuelFlow { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of point data for this Point Group.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string FlightPlanPoints(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FlightPlanPointsLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlightPlanPointGroups_Abridged> CreateFlightPlanPointGroups_Abridged(FlatBufferBuilder builder,
      StringOffset pointGroupNameOffset = default(StringOffset),
      StringOffset worstFuelCaseOffset = default(StringOffset),
      StringOffset lsafNameOffset = default(StringOffset),
      double lsafDistance = 0.0,
      double fsafDistance = 0.0,
      double etopsDistance = 0.0,
      StringOffset lsafTimeOffset = default(StringOffset),
      StringOffset fsafTimeOffset = default(StringOffset),
      StringOffset etopsTimeOffset = default(StringOffset),
      double lsafAvgWindFactor = 0.0,
      double fsafAvgWindFactor = 0.0,
      double etopsAvgWindFactor = 0.0,
      double lsafTempDev = 0.0,
      double fsafTempDev = 0.0,
      double etopsTempDev = 0.0,
      double lsafReqFuel = 0.0,
      double fsafReqFuel = 0.0,
      double etopsReqFuel = 0.0,
      StringOffset fromTakeoffTimeOffset = default(StringOffset),
      double plannedFuel = 0.0,
      double fuelCalcAlt = 0.0,
      double fuelCalcSpd = 0.0,
      double avgFuelFlow = 0.0,
      VectorOffset flightPlanPointsOffset = default(VectorOffset)) {
    builder.StartTable(24);
    FlightPlanPointGroups_Abridged.AddAvgFuelFlow(builder, avgFuelFlow);
    FlightPlanPointGroups_Abridged.AddFuelCalcSpd(builder, fuelCalcSpd);
    FlightPlanPointGroups_Abridged.AddFuelCalcAlt(builder, fuelCalcAlt);
    FlightPlanPointGroups_Abridged.AddPlannedFuel(builder, plannedFuel);
    FlightPlanPointGroups_Abridged.AddEtopsReqFuel(builder, etopsReqFuel);
    FlightPlanPointGroups_Abridged.AddFsafReqFuel(builder, fsafReqFuel);
    FlightPlanPointGroups_Abridged.AddLsafReqFuel(builder, lsafReqFuel);
    FlightPlanPointGroups_Abridged.AddEtopsTempDev(builder, etopsTempDev);
    FlightPlanPointGroups_Abridged.AddFsafTempDev(builder, fsafTempDev);
    FlightPlanPointGroups_Abridged.AddLsafTempDev(builder, lsafTempDev);
    FlightPlanPointGroups_Abridged.AddEtopsAvgWindFactor(builder, etopsAvgWindFactor);
    FlightPlanPointGroups_Abridged.AddFsafAvgWindFactor(builder, fsafAvgWindFactor);
    FlightPlanPointGroups_Abridged.AddLsafAvgWindFactor(builder, lsafAvgWindFactor);
    FlightPlanPointGroups_Abridged.AddEtopsDistance(builder, etopsDistance);
    FlightPlanPointGroups_Abridged.AddFsafDistance(builder, fsafDistance);
    FlightPlanPointGroups_Abridged.AddLsafDistance(builder, lsafDistance);
    FlightPlanPointGroups_Abridged.AddFlightPlanPoints(builder, flightPlanPointsOffset);
    FlightPlanPointGroups_Abridged.AddFromTakeoffTime(builder, fromTakeoffTimeOffset);
    FlightPlanPointGroups_Abridged.AddEtopsTime(builder, etopsTimeOffset);
    FlightPlanPointGroups_Abridged.AddFsafTime(builder, fsafTimeOffset);
    FlightPlanPointGroups_Abridged.AddLsafTime(builder, lsafTimeOffset);
    FlightPlanPointGroups_Abridged.AddLsafName(builder, lsafNameOffset);
    FlightPlanPointGroups_Abridged.AddWorstFuelCase(builder, worstFuelCaseOffset);
    FlightPlanPointGroups_Abridged.AddPointGroupName(builder, pointGroupNameOffset);
    return FlightPlanPointGroups_Abridged.EndFlightPlanPointGroups_Abridged(builder);
  }

  public static void StartFlightPlanPointGroups_Abridged(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddPointGroupName(FlatBufferBuilder builder, StringOffset pointGroupNameOffset) { builder.AddOffset(0, pointGroupNameOffset.Value, 0); }
  public static void AddWorstFuelCase(FlatBufferBuilder builder, StringOffset worstFuelCaseOffset) { builder.AddOffset(1, worstFuelCaseOffset.Value, 0); }
  public static void AddLsafName(FlatBufferBuilder builder, StringOffset lsafNameOffset) { builder.AddOffset(2, lsafNameOffset.Value, 0); }
  public static void AddLsafDistance(FlatBufferBuilder builder, double lsafDistance) { builder.AddDouble(3, lsafDistance, 0.0); }
  public static void AddFsafDistance(FlatBufferBuilder builder, double fsafDistance) { builder.AddDouble(4, fsafDistance, 0.0); }
  public static void AddEtopsDistance(FlatBufferBuilder builder, double etopsDistance) { builder.AddDouble(5, etopsDistance, 0.0); }
  public static void AddLsafTime(FlatBufferBuilder builder, StringOffset lsafTimeOffset) { builder.AddOffset(6, lsafTimeOffset.Value, 0); }
  public static void AddFsafTime(FlatBufferBuilder builder, StringOffset fsafTimeOffset) { builder.AddOffset(7, fsafTimeOffset.Value, 0); }
  public static void AddEtopsTime(FlatBufferBuilder builder, StringOffset etopsTimeOffset) { builder.AddOffset(8, etopsTimeOffset.Value, 0); }
  public static void AddLsafAvgWindFactor(FlatBufferBuilder builder, double lsafAvgWindFactor) { builder.AddDouble(9, lsafAvgWindFactor, 0.0); }
  public static void AddFsafAvgWindFactor(FlatBufferBuilder builder, double fsafAvgWindFactor) { builder.AddDouble(10, fsafAvgWindFactor, 0.0); }
  public static void AddEtopsAvgWindFactor(FlatBufferBuilder builder, double etopsAvgWindFactor) { builder.AddDouble(11, etopsAvgWindFactor, 0.0); }
  public static void AddLsafTempDev(FlatBufferBuilder builder, double lsafTempDev) { builder.AddDouble(12, lsafTempDev, 0.0); }
  public static void AddFsafTempDev(FlatBufferBuilder builder, double fsafTempDev) { builder.AddDouble(13, fsafTempDev, 0.0); }
  public static void AddEtopsTempDev(FlatBufferBuilder builder, double etopsTempDev) { builder.AddDouble(14, etopsTempDev, 0.0); }
  public static void AddLsafReqFuel(FlatBufferBuilder builder, double lsafReqFuel) { builder.AddDouble(15, lsafReqFuel, 0.0); }
  public static void AddFsafReqFuel(FlatBufferBuilder builder, double fsafReqFuel) { builder.AddDouble(16, fsafReqFuel, 0.0); }
  public static void AddEtopsReqFuel(FlatBufferBuilder builder, double etopsReqFuel) { builder.AddDouble(17, etopsReqFuel, 0.0); }
  public static void AddFromTakeoffTime(FlatBufferBuilder builder, StringOffset fromTakeoffTimeOffset) { builder.AddOffset(18, fromTakeoffTimeOffset.Value, 0); }
  public static void AddPlannedFuel(FlatBufferBuilder builder, double plannedFuel) { builder.AddDouble(19, plannedFuel, 0.0); }
  public static void AddFuelCalcAlt(FlatBufferBuilder builder, double fuelCalcAlt) { builder.AddDouble(20, fuelCalcAlt, 0.0); }
  public static void AddFuelCalcSpd(FlatBufferBuilder builder, double fuelCalcSpd) { builder.AddDouble(21, fuelCalcSpd, 0.0); }
  public static void AddAvgFuelFlow(FlatBufferBuilder builder, double avgFuelFlow) { builder.AddDouble(22, avgFuelFlow, 0.0); }
  public static void AddFlightPlanPoints(FlatBufferBuilder builder, VectorOffset flightPlanPointsOffset) { builder.AddOffset(23, flightPlanPointsOffset.Value, 0); }
  public static VectorOffset CreateFlightPlanPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFlightPlanPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlightPlanPointGroups_Abridged> EndFlightPlanPointGroups_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlightPlanPointGroups_Abridged>(o);
  }
  public static void FinishFlightPlanPointGroups_AbridgedBuffer(FlatBufferBuilder builder, Offset<FlightPlanPointGroups_Abridged> offset) { builder.Finish(offset.Value, "FLIG"); }
  public static void FinishSizePrefixedFlightPlanPointGroups_AbridgedBuffer(FlatBufferBuilder builder, Offset<FlightPlanPointGroups_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "FLIG"); }
  public FlightPlanPointGroups_AbridgedT UnPack() {
    var _o = new FlightPlanPointGroups_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlightPlanPointGroups_AbridgedT _o) {
    _o.PointGroupName = this.PointGroupName;
    _o.WorstFuelCase = this.WorstFuelCase;
    _o.LsafName = this.LsafName;
    _o.LsafDistance = this.LsafDistance;
    _o.FsafDistance = this.FsafDistance;
    _o.EtopsDistance = this.EtopsDistance;
    _o.LsafTime = this.LsafTime;
    _o.FsafTime = this.FsafTime;
    _o.EtopsTime = this.EtopsTime;
    _o.LsafAvgWindFactor = this.LsafAvgWindFactor;
    _o.FsafAvgWindFactor = this.FsafAvgWindFactor;
    _o.EtopsAvgWindFactor = this.EtopsAvgWindFactor;
    _o.LsafTempDev = this.LsafTempDev;
    _o.FsafTempDev = this.FsafTempDev;
    _o.EtopsTempDev = this.EtopsTempDev;
    _o.LsafReqFuel = this.LsafReqFuel;
    _o.FsafReqFuel = this.FsafReqFuel;
    _o.EtopsReqFuel = this.EtopsReqFuel;
    _o.FromTakeoffTime = this.FromTakeoffTime;
    _o.PlannedFuel = this.PlannedFuel;
    _o.FuelCalcAlt = this.FuelCalcAlt;
    _o.FuelCalcSpd = this.FuelCalcSpd;
    _o.AvgFuelFlow = this.AvgFuelFlow;
    _o.FlightPlanPoints = new List<string>();
    for (var _j = 0; _j < this.FlightPlanPointsLength; ++_j) {_o.FlightPlanPoints.Add(this.FlightPlanPoints(_j));}
  }
  public static Offset<FlightPlanPointGroups_Abridged> Pack(FlatBufferBuilder builder, FlightPlanPointGroups_AbridgedT _o) {
    if (_o == null) return default(Offset<FlightPlanPointGroups_Abridged>);
    var _pointGroupName = _o.PointGroupName == null ? default(StringOffset) : builder.CreateString(_o.PointGroupName);
    var _worstFuelCase = _o.WorstFuelCase == null ? default(StringOffset) : builder.CreateString(_o.WorstFuelCase);
    var _lsafName = _o.LsafName == null ? default(StringOffset) : builder.CreateString(_o.LsafName);
    var _lsafTime = _o.LsafTime == null ? default(StringOffset) : builder.CreateString(_o.LsafTime);
    var _fsafTime = _o.FsafTime == null ? default(StringOffset) : builder.CreateString(_o.FsafTime);
    var _etopsTime = _o.EtopsTime == null ? default(StringOffset) : builder.CreateString(_o.EtopsTime);
    var _fromTakeoffTime = _o.FromTakeoffTime == null ? default(StringOffset) : builder.CreateString(_o.FromTakeoffTime);
    var _flightPlanPoints = default(VectorOffset);
    if (_o.FlightPlanPoints != null) {
      var __flightPlanPoints = new StringOffset[_o.FlightPlanPoints.Count];
      for (var _j = 0; _j < __flightPlanPoints.Length; ++_j) { __flightPlanPoints[_j] = builder.CreateString(_o.FlightPlanPoints[_j]); }
      _flightPlanPoints = CreateFlightPlanPointsVector(builder, __flightPlanPoints);
    }
    return CreateFlightPlanPointGroups_Abridged(
      builder,
      _pointGroupName,
      _worstFuelCase,
      _lsafName,
      _o.LsafDistance,
      _o.FsafDistance,
      _o.EtopsDistance,
      _lsafTime,
      _fsafTime,
      _etopsTime,
      _o.LsafAvgWindFactor,
      _o.FsafAvgWindFactor,
      _o.EtopsAvgWindFactor,
      _o.LsafTempDev,
      _o.FsafTempDev,
      _o.EtopsTempDev,
      _o.LsafReqFuel,
      _o.FsafReqFuel,
      _o.EtopsReqFuel,
      _fromTakeoffTime,
      _o.PlannedFuel,
      _o.FuelCalcAlt,
      _o.FuelCalcSpd,
      _o.AvgFuelFlow,
      _flightPlanPoints);
  }
}

public class FlightPlanPointGroups_AbridgedT
{
  public string PointGroupName { get; set; }
  public string WorstFuelCase { get; set; }
  public string LsafName { get; set; }
  public double LsafDistance { get; set; }
  public double FsafDistance { get; set; }
  public double EtopsDistance { get; set; }
  public string LsafTime { get; set; }
  public string FsafTime { get; set; }
  public string EtopsTime { get; set; }
  public double LsafAvgWindFactor { get; set; }
  public double FsafAvgWindFactor { get; set; }
  public double EtopsAvgWindFactor { get; set; }
  public double LsafTempDev { get; set; }
  public double FsafTempDev { get; set; }
  public double EtopsTempDev { get; set; }
  public double LsafReqFuel { get; set; }
  public double FsafReqFuel { get; set; }
  public double EtopsReqFuel { get; set; }
  public string FromTakeoffTime { get; set; }
  public double PlannedFuel { get; set; }
  public double FuelCalcAlt { get; set; }
  public double FuelCalcSpd { get; set; }
  public double AvgFuelFlow { get; set; }
  public List<string> FlightPlanPoints { get; set; }

  public FlightPlanPointGroups_AbridgedT() {
    this.PointGroupName = null;
    this.WorstFuelCase = null;
    this.LsafName = null;
    this.LsafDistance = 0.0;
    this.FsafDistance = 0.0;
    this.EtopsDistance = 0.0;
    this.LsafTime = null;
    this.FsafTime = null;
    this.EtopsTime = null;
    this.LsafAvgWindFactor = 0.0;
    this.FsafAvgWindFactor = 0.0;
    this.EtopsAvgWindFactor = 0.0;
    this.LsafTempDev = 0.0;
    this.FsafTempDev = 0.0;
    this.EtopsTempDev = 0.0;
    this.LsafReqFuel = 0.0;
    this.FsafReqFuel = 0.0;
    this.EtopsReqFuel = 0.0;
    this.FromTakeoffTime = null;
    this.PlannedFuel = 0.0;
    this.FuelCalcAlt = 0.0;
    this.FuelCalcSpd = 0.0;
    this.AvgFuelFlow = 0.0;
    this.FlightPlanPoints = null;
  }
  public static FlightPlanPointGroups_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return FlightPlanPointGroups_Abridged.GetRootAsFlightPlanPointGroups_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FlightPlanPointGroups_Abridged.FinishFlightPlanPointGroups_AbridgedBuffer(fbb, FlightPlanPointGroups_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class FlightPlanPointGroups_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PointGroupName*/, false)
      && verifier.VerifyString(tablePos, 6 /*WorstFuelCase*/, false)
      && verifier.VerifyString(tablePos, 8 /*LsafName*/, false)
      && verifier.VerifyField(tablePos, 10 /*LsafDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*FsafDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*EtopsDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*LsafTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*FsafTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*EtopsTime*/, false)
      && verifier.VerifyField(tablePos, 22 /*LsafAvgWindFactor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*FsafAvgWindFactor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*EtopsAvgWindFactor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*LsafTempDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*FsafTempDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*EtopsTempDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*LsafReqFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*FsafReqFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*EtopsReqFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 40 /*FromTakeoffTime*/, false)
      && verifier.VerifyField(tablePos, 42 /*PlannedFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*FuelCalcAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*FuelCalcSpd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*AvgFuelFlow*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*FlightPlanPoints*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
