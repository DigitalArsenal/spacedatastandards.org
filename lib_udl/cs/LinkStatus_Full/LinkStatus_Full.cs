// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Captures link status.
public struct LinkStatus_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LinkStatus_Full GetRootAsLinkStatus_Full(ByteBuffer _bb) { return GetRootAsLinkStatus_Full(_bb, new LinkStatus_Full()); }
  public static LinkStatus_Full GetRootAsLinkStatus_Full(ByteBuffer _bb, LinkStatus_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LinkStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LINK"); }
  public static bool VerifyLinkStatus_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LINK", false, LinkStatus_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LinkStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LINKSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
  /// Example: /// Example: REF-ONORBIT1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbit1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbit1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbit1Array() { return __p.__vector_as_array<byte>(8); }
  /// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
  /// Example: /// Example: REF-ONORBIT2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit2 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbit2Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbit2Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbit2Array() { return __p.__vector_as_array<byte>(10); }
  /// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LinkStartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLinkStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLinkStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LinkStopTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkStopTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLinkStopTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLinkStopTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
  /// Example: /// Example: Fornax
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Constellation { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConstellationBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetConstellationBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetConstellationArray() { return __p.__vector_as_array<byte>(16); }
  /// The name or description of the link.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string LinkName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLinkNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLinkNameArray() { return __p.__vector_as_array<byte>(18); }
  /// The type of the link.
  /// Example: /// Example: Example link
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string LinkType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLinkTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLinkTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
  /// Example: /// Example: MIL-KA
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Band { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBandBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBandBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBandArray() { return __p.__vector_as_array<byte>(22); }
  /// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
  /// Example: /// Example: REF-BEAM1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdBeam1 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBeam1Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIdBeam1Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIdBeam1Array() { return __p.__vector_as_array<byte>(24); }
  /// The name or description of link endpoint-1, corresponding to beam-1.
  /// Example: /// Example: Example endpoint
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string EndPoint1Name { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndPoint1NameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEndPoint1NameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEndPoint1NameArray() { return __p.__vector_as_array<byte>(26); }
  /// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double EndPoint1Lat { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  public double EndPoint1Lon { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
  /// Example: /// Example: REF-BEAM2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdBeam2 { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBeam2Bytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetIdBeam2Bytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetIdBeam2Array() { return __p.__vector_as_array<byte>(32); }
  /// The name or description of link endpoint-2, corresponding to beam-2.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string EndPoint2Name { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndPoint2NameBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEndPoint2NameBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEndPoint2NameArray() { return __p.__vector_as_array<byte>(34); }
  /// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double EndPoint2Lat { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  public double EndPoint2Lon { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The endpoint-1 to endpoint-2 data rate, in kbps.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double DataRate1To2 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The endpoint-2 to endpoint-1 data rate, in kbps.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double DataRate2To1 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
  /// Example: /// Example: DEGRADED-WEATHER
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string LinkState { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinkStateBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetLinkStateBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetLinkStateArray() { return __p.__vector_as_array<byte>(44); }
  /// The SYSCAP mission status of the system(s) forming the link.
  /// Example: /// Example: Example status
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string SysCap { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSysCapBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSysCapBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSysCapArray() { return __p.__vector_as_array<byte>(46); }
  /// The OPSCAP mission status of the system(s) forming the link.
  /// Example: /// Example: Example status
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string OpsCap { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpsCapBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOpsCapBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOpsCapArray() { return __p.__vector_as_array<byte>(48); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(50); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(52); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(54); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(56); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(58); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public LinkStatus_Full_dataMode_Enum DataMode { get { int o = __p.__offset(60); return o != 0 ? (LinkStatus_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : LinkStatus_Full_dataMode_Enum.REAL; } }
  /// Satellite/catalog number of the target on-orbit primary object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SatNo1 { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Satellite/catalog number of the target on-orbit secondary object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int SatNo2 { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<LinkStatus_Full> CreateLinkStatus_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbit1Offset = default(StringOffset),
      StringOffset idOnOrbit2Offset = default(StringOffset),
      StringOffset linkStartTimeOffset = default(StringOffset),
      StringOffset linkStopTimeOffset = default(StringOffset),
      StringOffset constellationOffset = default(StringOffset),
      StringOffset linkNameOffset = default(StringOffset),
      StringOffset linkTypeOffset = default(StringOffset),
      StringOffset bandOffset = default(StringOffset),
      StringOffset idBeam1Offset = default(StringOffset),
      StringOffset endPoint1NameOffset = default(StringOffset),
      double endPoint1Lat = 0.0,
      double endPoint1Lon = 0.0,
      StringOffset idBeam2Offset = default(StringOffset),
      StringOffset endPoint2NameOffset = default(StringOffset),
      double endPoint2Lat = 0.0,
      double endPoint2Lon = 0.0,
      double dataRate1To2 = 0.0,
      double dataRate2To1 = 0.0,
      StringOffset linkStateOffset = default(StringOffset),
      StringOffset sysCapOffset = default(StringOffset),
      StringOffset opsCapOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      LinkStatus_Full_dataMode_Enum dataMode = LinkStatus_Full_dataMode_Enum.REAL,
      int satNo1 = 0,
      int satNo2 = 0) {
    builder.StartTable(31);
    LinkStatus_Full.AddDataRate2To1(builder, dataRate2To1);
    LinkStatus_Full.AddDataRate1To2(builder, dataRate1To2);
    LinkStatus_Full.AddEndPoint2Lon(builder, endPoint2Lon);
    LinkStatus_Full.AddEndPoint2Lat(builder, endPoint2Lat);
    LinkStatus_Full.AddEndPoint1Lon(builder, endPoint1Lon);
    LinkStatus_Full.AddEndPoint1Lat(builder, endPoint1Lat);
    LinkStatus_Full.AddSatNo2(builder, satNo2);
    LinkStatus_Full.AddSatNo1(builder, satNo1);
    LinkStatus_Full.AddOrigNetwork(builder, origNetworkOffset);
    LinkStatus_Full.AddOrigin(builder, originOffset);
    LinkStatus_Full.AddSource(builder, sourceOffset);
    LinkStatus_Full.AddCreatedBy(builder, createdByOffset);
    LinkStatus_Full.AddCreatedAt(builder, createdAtOffset);
    LinkStatus_Full.AddOpsCap(builder, opsCapOffset);
    LinkStatus_Full.AddSysCap(builder, sysCapOffset);
    LinkStatus_Full.AddLinkState(builder, linkStateOffset);
    LinkStatus_Full.AddEndPoint2Name(builder, endPoint2NameOffset);
    LinkStatus_Full.AddIdBeam2(builder, idBeam2Offset);
    LinkStatus_Full.AddEndPoint1Name(builder, endPoint1NameOffset);
    LinkStatus_Full.AddIdBeam1(builder, idBeam1Offset);
    LinkStatus_Full.AddBand(builder, bandOffset);
    LinkStatus_Full.AddLinkType(builder, linkTypeOffset);
    LinkStatus_Full.AddLinkName(builder, linkNameOffset);
    LinkStatus_Full.AddConstellation(builder, constellationOffset);
    LinkStatus_Full.AddLinkStopTime(builder, linkStopTimeOffset);
    LinkStatus_Full.AddLinkStartTime(builder, linkStartTimeOffset);
    LinkStatus_Full.AddIdOnOrbit2(builder, idOnOrbit2Offset);
    LinkStatus_Full.AddIdOnOrbit1(builder, idOnOrbit1Offset);
    LinkStatus_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    LinkStatus_Full.AddId(builder, idOffset);
    LinkStatus_Full.AddDataMode(builder, dataMode);
    return LinkStatus_Full.EndLinkStatus_Full(builder);
  }

  public static void StartLinkStatus_Full(FlatBufferBuilder builder) { builder.StartTable(31); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit1(FlatBufferBuilder builder, StringOffset idOnOrbit1Offset) { builder.AddOffset(2, idOnOrbit1Offset.Value, 0); }
  public static void AddIdOnOrbit2(FlatBufferBuilder builder, StringOffset idOnOrbit2Offset) { builder.AddOffset(3, idOnOrbit2Offset.Value, 0); }
  public static void AddLinkStartTime(FlatBufferBuilder builder, StringOffset linkStartTimeOffset) { builder.AddOffset(4, linkStartTimeOffset.Value, 0); }
  public static void AddLinkStopTime(FlatBufferBuilder builder, StringOffset linkStopTimeOffset) { builder.AddOffset(5, linkStopTimeOffset.Value, 0); }
  public static void AddConstellation(FlatBufferBuilder builder, StringOffset constellationOffset) { builder.AddOffset(6, constellationOffset.Value, 0); }
  public static void AddLinkName(FlatBufferBuilder builder, StringOffset linkNameOffset) { builder.AddOffset(7, linkNameOffset.Value, 0); }
  public static void AddLinkType(FlatBufferBuilder builder, StringOffset linkTypeOffset) { builder.AddOffset(8, linkTypeOffset.Value, 0); }
  public static void AddBand(FlatBufferBuilder builder, StringOffset bandOffset) { builder.AddOffset(9, bandOffset.Value, 0); }
  public static void AddIdBeam1(FlatBufferBuilder builder, StringOffset idBeam1Offset) { builder.AddOffset(10, idBeam1Offset.Value, 0); }
  public static void AddEndPoint1Name(FlatBufferBuilder builder, StringOffset endPoint1NameOffset) { builder.AddOffset(11, endPoint1NameOffset.Value, 0); }
  public static void AddEndPoint1Lat(FlatBufferBuilder builder, double endPoint1Lat) { builder.AddDouble(12, endPoint1Lat, 0.0); }
  public static void AddEndPoint1Lon(FlatBufferBuilder builder, double endPoint1Lon) { builder.AddDouble(13, endPoint1Lon, 0.0); }
  public static void AddIdBeam2(FlatBufferBuilder builder, StringOffset idBeam2Offset) { builder.AddOffset(14, idBeam2Offset.Value, 0); }
  public static void AddEndPoint2Name(FlatBufferBuilder builder, StringOffset endPoint2NameOffset) { builder.AddOffset(15, endPoint2NameOffset.Value, 0); }
  public static void AddEndPoint2Lat(FlatBufferBuilder builder, double endPoint2Lat) { builder.AddDouble(16, endPoint2Lat, 0.0); }
  public static void AddEndPoint2Lon(FlatBufferBuilder builder, double endPoint2Lon) { builder.AddDouble(17, endPoint2Lon, 0.0); }
  public static void AddDataRate1To2(FlatBufferBuilder builder, double dataRate1To2) { builder.AddDouble(18, dataRate1To2, 0.0); }
  public static void AddDataRate2To1(FlatBufferBuilder builder, double dataRate2To1) { builder.AddDouble(19, dataRate2To1, 0.0); }
  public static void AddLinkState(FlatBufferBuilder builder, StringOffset linkStateOffset) { builder.AddOffset(20, linkStateOffset.Value, 0); }
  public static void AddSysCap(FlatBufferBuilder builder, StringOffset sysCapOffset) { builder.AddOffset(21, sysCapOffset.Value, 0); }
  public static void AddOpsCap(FlatBufferBuilder builder, StringOffset opsCapOffset) { builder.AddOffset(22, opsCapOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(23, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(24, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(25, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(26, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(27, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, LinkStatus_Full_dataMode_Enum dataMode) { builder.AddSbyte(28, (sbyte)dataMode, 0); }
  public static void AddSatNo1(FlatBufferBuilder builder, int satNo1) { builder.AddInt(29, satNo1, 0); }
  public static void AddSatNo2(FlatBufferBuilder builder, int satNo2) { builder.AddInt(30, satNo2, 0); }
  public static Offset<LinkStatus_Full> EndLinkStatus_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LinkStatus_Full>(o);
  }
  public static void FinishLinkStatus_FullBuffer(FlatBufferBuilder builder, Offset<LinkStatus_Full> offset) { builder.Finish(offset.Value, "LINK"); }
  public static void FinishSizePrefixedLinkStatus_FullBuffer(FlatBufferBuilder builder, Offset<LinkStatus_Full> offset) { builder.FinishSizePrefixed(offset.Value, "LINK"); }
  public LinkStatus_FullT UnPack() {
    var _o = new LinkStatus_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LinkStatus_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit1 = this.IdOnOrbit1;
    _o.IdOnOrbit2 = this.IdOnOrbit2;
    _o.LinkStartTime = this.LinkStartTime;
    _o.LinkStopTime = this.LinkStopTime;
    _o.Constellation = this.Constellation;
    _o.LinkName = this.LinkName;
    _o.LinkType = this.LinkType;
    _o.Band = this.Band;
    _o.IdBeam1 = this.IdBeam1;
    _o.EndPoint1Name = this.EndPoint1Name;
    _o.EndPoint1Lat = this.EndPoint1Lat;
    _o.EndPoint1Lon = this.EndPoint1Lon;
    _o.IdBeam2 = this.IdBeam2;
    _o.EndPoint2Name = this.EndPoint2Name;
    _o.EndPoint2Lat = this.EndPoint2Lat;
    _o.EndPoint2Lon = this.EndPoint2Lon;
    _o.DataRate1To2 = this.DataRate1To2;
    _o.DataRate2To1 = this.DataRate2To1;
    _o.LinkState = this.LinkState;
    _o.SysCap = this.SysCap;
    _o.OpsCap = this.OpsCap;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.SatNo1 = this.SatNo1;
    _o.SatNo2 = this.SatNo2;
  }
  public static Offset<LinkStatus_Full> Pack(FlatBufferBuilder builder, LinkStatus_FullT _o) {
    if (_o == null) return default(Offset<LinkStatus_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit1 = _o.IdOnOrbit1 == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit1);
    var _idOnOrbit2 = _o.IdOnOrbit2 == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit2);
    var _linkStartTime = _o.LinkStartTime == null ? default(StringOffset) : builder.CreateString(_o.LinkStartTime);
    var _linkStopTime = _o.LinkStopTime == null ? default(StringOffset) : builder.CreateString(_o.LinkStopTime);
    var _constellation = _o.Constellation == null ? default(StringOffset) : builder.CreateString(_o.Constellation);
    var _linkName = _o.LinkName == null ? default(StringOffset) : builder.CreateString(_o.LinkName);
    var _linkType = _o.LinkType == null ? default(StringOffset) : builder.CreateString(_o.LinkType);
    var _band = _o.Band == null ? default(StringOffset) : builder.CreateString(_o.Band);
    var _idBeam1 = _o.IdBeam1 == null ? default(StringOffset) : builder.CreateString(_o.IdBeam1);
    var _endPoint1Name = _o.EndPoint1Name == null ? default(StringOffset) : builder.CreateString(_o.EndPoint1Name);
    var _idBeam2 = _o.IdBeam2 == null ? default(StringOffset) : builder.CreateString(_o.IdBeam2);
    var _endPoint2Name = _o.EndPoint2Name == null ? default(StringOffset) : builder.CreateString(_o.EndPoint2Name);
    var _linkState = _o.LinkState == null ? default(StringOffset) : builder.CreateString(_o.LinkState);
    var _sysCap = _o.SysCap == null ? default(StringOffset) : builder.CreateString(_o.SysCap);
    var _opsCap = _o.OpsCap == null ? default(StringOffset) : builder.CreateString(_o.OpsCap);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateLinkStatus_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit1,
      _idOnOrbit2,
      _linkStartTime,
      _linkStopTime,
      _constellation,
      _linkName,
      _linkType,
      _band,
      _idBeam1,
      _endPoint1Name,
      _o.EndPoint1Lat,
      _o.EndPoint1Lon,
      _idBeam2,
      _endPoint2Name,
      _o.EndPoint2Lat,
      _o.EndPoint2Lon,
      _o.DataRate1To2,
      _o.DataRate2To1,
      _linkState,
      _sysCap,
      _opsCap,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _o.SatNo1,
      _o.SatNo2);
  }
}

public class LinkStatus_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit1 { get; set; }
  public string IdOnOrbit2 { get; set; }
  public string LinkStartTime { get; set; }
  public string LinkStopTime { get; set; }
  public string Constellation { get; set; }
  public string LinkName { get; set; }
  public string LinkType { get; set; }
  public string Band { get; set; }
  public string IdBeam1 { get; set; }
  public string EndPoint1Name { get; set; }
  public double EndPoint1Lat { get; set; }
  public double EndPoint1Lon { get; set; }
  public string IdBeam2 { get; set; }
  public string EndPoint2Name { get; set; }
  public double EndPoint2Lat { get; set; }
  public double EndPoint2Lon { get; set; }
  public double DataRate1To2 { get; set; }
  public double DataRate2To1 { get; set; }
  public string LinkState { get; set; }
  public string SysCap { get; set; }
  public string OpsCap { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public LinkStatus_Full_dataMode_Enum DataMode { get; set; }
  public int SatNo1 { get; set; }
  public int SatNo2 { get; set; }

  public LinkStatus_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit1 = null;
    this.IdOnOrbit2 = null;
    this.LinkStartTime = null;
    this.LinkStopTime = null;
    this.Constellation = null;
    this.LinkName = null;
    this.LinkType = null;
    this.Band = null;
    this.IdBeam1 = null;
    this.EndPoint1Name = null;
    this.EndPoint1Lat = 0.0;
    this.EndPoint1Lon = 0.0;
    this.IdBeam2 = null;
    this.EndPoint2Name = null;
    this.EndPoint2Lat = 0.0;
    this.EndPoint2Lon = 0.0;
    this.DataRate1To2 = 0.0;
    this.DataRate2To1 = 0.0;
    this.LinkState = null;
    this.SysCap = null;
    this.OpsCap = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = LinkStatus_Full_dataMode_Enum.REAL;
    this.SatNo1 = 0;
    this.SatNo2 = 0;
  }
  public static LinkStatus_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return LinkStatus_Full.GetRootAsLinkStatus_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LinkStatus_Full.FinishLinkStatus_FullBuffer(fbb, LinkStatus_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LinkStatus_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit1*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit2*/, false)
      && verifier.VerifyString(tablePos, 12 /*LinkStartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*LinkStopTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*Constellation*/, false)
      && verifier.VerifyString(tablePos, 18 /*LinkName*/, false)
      && verifier.VerifyString(tablePos, 20 /*LinkType*/, false)
      && verifier.VerifyString(tablePos, 22 /*Band*/, false)
      && verifier.VerifyString(tablePos, 24 /*IdBeam1*/, false)
      && verifier.VerifyString(tablePos, 26 /*EndPoint1Name*/, false)
      && verifier.VerifyField(tablePos, 28 /*EndPoint1Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*EndPoint1Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*IdBeam2*/, false)
      && verifier.VerifyString(tablePos, 34 /*EndPoint2Name*/, false)
      && verifier.VerifyField(tablePos, 36 /*EndPoint2Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*EndPoint2Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*DataRate1To2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DataRate2To1*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 44 /*LinkState*/, false)
      && verifier.VerifyString(tablePos, 46 /*SysCap*/, false)
      && verifier.VerifyString(tablePos, 48 /*OpsCap*/, false)
      && verifier.VerifyString(tablePos, 50 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 52 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 54 /*Source*/, false)
      && verifier.VerifyString(tablePos, 56 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 58 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 60 /*DataMode*/, 1 /*LinkStatus_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 62 /*SatNo1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*SatNo2*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
