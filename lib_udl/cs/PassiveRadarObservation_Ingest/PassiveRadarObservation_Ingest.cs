// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
public struct PassiveRadarObservation_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PassiveRadarObservation_Ingest GetRootAsPassiveRadarObservation_Ingest(ByteBuffer _bb) { return GetRootAsPassiveRadarObservation_Ingest(_bb, new PassiveRadarObservation_Ingest()); }
  public static PassiveRadarObservation_Ingest GetRootAsPassiveRadarObservation_Ingest(ByteBuffer _bb, PassiveRadarObservation_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PassiveRadarObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "PASS"); }
  public static bool VerifyPassiveRadarObservation_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("PASS", false, PassiveRadarObservation_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PassiveRadarObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-01-24T23:35:26.518152Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  /// Example: /// Example: 40699
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 40699
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OCULUSA
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(16); }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RED_CLIFFS_3ABCRN
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdRFEmitter { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdRFEmitterBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIdRFEmitterBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIdRFEmitterArray() { return __p.__vector_as_array<byte>(20); }
  /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OculusRef1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensorRefReceiver { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorRefReceiverBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIdSensorRefReceiverBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIdSensorRefReceiverArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional external observation identifier provided by the source.
  /// Example: /// Example: 26892
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExtObservationId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtObservationIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetExtObservationIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetExtObservationIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Unique identifier of a track that represents a tracklet for this observation.
  /// Example: /// Example: 12212
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(28); }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ObPosition { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObPositionBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetObPositionBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetObPositionArray() { return __p.__vector_as_array<byte>(30); }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 134.5
  /// Constraints: No constraints specified.
  public double Azimuth { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double AzimuthUnc { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double AzimuthBias { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double AzimuthRate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 76.1
  /// Constraints: No constraints specified.
  public double Elevation { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double ElevationUnc { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double ElevationBias { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double ElevationRate { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
  /// Example: /// Example: 0.00505820232809312
  /// Constraints: No constraints specified.
  public double Delay { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the delay measurement, in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  public double DelayUnc { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Delay bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  public double DelayBias { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
  /// Example: /// Example: 754.8212
  /// Constraints: No constraints specified.
  public double BistaticRange { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in bistatic range in kilometers.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  public double BistaticRangeUnc { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor bistatic range bias in kilometers.
  /// Example: /// Example: 2.34
  /// Constraints: No constraints specified.
  public double BistaticRangeBias { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: -0.30222
  /// Constraints: No constraints specified.
  public double BistaticRangeRate { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double BistaticRangeRateUnc { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bistatic range acceleration in kilometers/sec^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double BistaticRangeAccel { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double BistaticRangeAccelUnc { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Doppler measurement in hertz.
  /// Example: /// Example: -101.781641000597
  /// Constraints: No constraints specified.
  public double Doppler { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the Doppler measurement in hertz.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  public double DopplerUnc { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Coning angle in degrees.
  /// Example: /// Example: 60.1
  /// Constraints: No constraints specified.
  public double Coning { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the coning angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double ConingUnc { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
  /// Example: /// Example: 0.00592856674135648
  /// Constraints: No constraints specified.
  public double Tof { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in time of flight in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  public double TofUnc { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Time of Flight (TOF) bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  public double TofBias { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The target Acceleration measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Accel { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double AccelUnc { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Declination { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -35.1181763996856
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 139.613567052763
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
  /// Example: /// Example: 478.056378
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// X velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Xvel { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.21
  /// Constraints: No constraints specified.
  public double Yvel { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.12
  /// Constraints: No constraints specified.
  public double Zvel { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Rcs { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RcsUnc { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double OrthogonalRcs { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double OrthogonalRcsUnc { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 17.292053
  /// Constraints: No constraints specified.
  public double Snr { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double TimingBias { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(116); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(116); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(118); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(120); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(122); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(124); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(126); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(128); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(130); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(132); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public PassiveRadarObservation_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(134); return o != 0 ? (PassiveRadarObservation_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : PassiveRadarObservation_Ingest_dataMode_Enum.REAL; } }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  public string Type { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(136); }

  public static Offset<PassiveRadarObservation_Ingest> CreatePassiveRadarObservation_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset idRFEmitterOffset = default(StringOffset),
      StringOffset idSensorRefReceiverOffset = default(StringOffset),
      StringOffset extObservationIdOffset = default(StringOffset),
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset obPositionOffset = default(StringOffset),
      bool uct = false,
      double azimuth = 0.0,
      double azimuthUnc = 0.0,
      double azimuthBias = 0.0,
      double azimuthRate = 0.0,
      double elevation = 0.0,
      double elevationUnc = 0.0,
      double elevationBias = 0.0,
      double elevationRate = 0.0,
      double delay = 0.0,
      double delayUnc = 0.0,
      double delayBias = 0.0,
      double bistaticRange = 0.0,
      double bistaticRangeUnc = 0.0,
      double bistaticRangeBias = 0.0,
      double bistaticRangeRate = 0.0,
      double bistaticRangeRateUnc = 0.0,
      double bistaticRangeAccel = 0.0,
      double bistaticRangeAccelUnc = 0.0,
      double doppler = 0.0,
      double dopplerUnc = 0.0,
      double coning = 0.0,
      double coningUnc = 0.0,
      double tof = 0.0,
      double tofUnc = 0.0,
      double tofBias = 0.0,
      double accel = 0.0,
      double accelUnc = 0.0,
      double ra = 0.0,
      double declination = 0.0,
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double xvel = 0.0,
      double yvel = 0.0,
      double zvel = 0.0,
      double rcs = 0.0,
      double rcsUnc = 0.0,
      double orthogonalRcs = 0.0,
      double orthogonalRcsUnc = 0.0,
      double snr = 0.0,
      double timingBias = 0.0,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      PassiveRadarObservation_Ingest_dataMode_Enum dataMode = PassiveRadarObservation_Ingest_dataMode_Enum.REAL,
      StringOffset typeOffset = default(StringOffset)) {
    builder.StartTable(67);
    PassiveRadarObservation_Ingest.AddTimingBias(builder, timingBias);
    PassiveRadarObservation_Ingest.AddSnr(builder, snr);
    PassiveRadarObservation_Ingest.AddOrthogonalRcsUnc(builder, orthogonalRcsUnc);
    PassiveRadarObservation_Ingest.AddOrthogonalRcs(builder, orthogonalRcs);
    PassiveRadarObservation_Ingest.AddRcsUnc(builder, rcsUnc);
    PassiveRadarObservation_Ingest.AddRcs(builder, rcs);
    PassiveRadarObservation_Ingest.AddZvel(builder, zvel);
    PassiveRadarObservation_Ingest.AddYvel(builder, yvel);
    PassiveRadarObservation_Ingest.AddXvel(builder, xvel);
    PassiveRadarObservation_Ingest.AddAlt(builder, alt);
    PassiveRadarObservation_Ingest.AddLon(builder, lon);
    PassiveRadarObservation_Ingest.AddLat(builder, lat);
    PassiveRadarObservation_Ingest.AddDeclination(builder, declination);
    PassiveRadarObservation_Ingest.AddRa(builder, ra);
    PassiveRadarObservation_Ingest.AddAccelUnc(builder, accelUnc);
    PassiveRadarObservation_Ingest.AddAccel(builder, accel);
    PassiveRadarObservation_Ingest.AddTofBias(builder, tofBias);
    PassiveRadarObservation_Ingest.AddTofUnc(builder, tofUnc);
    PassiveRadarObservation_Ingest.AddTof(builder, tof);
    PassiveRadarObservation_Ingest.AddConingUnc(builder, coningUnc);
    PassiveRadarObservation_Ingest.AddConing(builder, coning);
    PassiveRadarObservation_Ingest.AddDopplerUnc(builder, dopplerUnc);
    PassiveRadarObservation_Ingest.AddDoppler(builder, doppler);
    PassiveRadarObservation_Ingest.AddBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc);
    PassiveRadarObservation_Ingest.AddBistaticRangeAccel(builder, bistaticRangeAccel);
    PassiveRadarObservation_Ingest.AddBistaticRangeRateUnc(builder, bistaticRangeRateUnc);
    PassiveRadarObservation_Ingest.AddBistaticRangeRate(builder, bistaticRangeRate);
    PassiveRadarObservation_Ingest.AddBistaticRangeBias(builder, bistaticRangeBias);
    PassiveRadarObservation_Ingest.AddBistaticRangeUnc(builder, bistaticRangeUnc);
    PassiveRadarObservation_Ingest.AddBistaticRange(builder, bistaticRange);
    PassiveRadarObservation_Ingest.AddDelayBias(builder, delayBias);
    PassiveRadarObservation_Ingest.AddDelayUnc(builder, delayUnc);
    PassiveRadarObservation_Ingest.AddDelay(builder, delay);
    PassiveRadarObservation_Ingest.AddElevationRate(builder, elevationRate);
    PassiveRadarObservation_Ingest.AddElevationBias(builder, elevationBias);
    PassiveRadarObservation_Ingest.AddElevationUnc(builder, elevationUnc);
    PassiveRadarObservation_Ingest.AddElevation(builder, elevation);
    PassiveRadarObservation_Ingest.AddAzimuthRate(builder, azimuthRate);
    PassiveRadarObservation_Ingest.AddAzimuthBias(builder, azimuthBias);
    PassiveRadarObservation_Ingest.AddAzimuthUnc(builder, azimuthUnc);
    PassiveRadarObservation_Ingest.AddAzimuth(builder, azimuth);
    PassiveRadarObservation_Ingest.AddType(builder, typeOffset);
    PassiveRadarObservation_Ingest.AddSourceDL(builder, sourceDLOffset);
    PassiveRadarObservation_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    PassiveRadarObservation_Ingest.AddOrigin(builder, originOffset);
    PassiveRadarObservation_Ingest.AddSource(builder, sourceOffset);
    PassiveRadarObservation_Ingest.AddCreatedBy(builder, createdByOffset);
    PassiveRadarObservation_Ingest.AddCreatedAt(builder, createdAtOffset);
    PassiveRadarObservation_Ingest.AddDescriptor(builder, descriptorOffset);
    PassiveRadarObservation_Ingest.AddTransactionId(builder, transactionIdOffset);
    PassiveRadarObservation_Ingest.AddTags(builder, tagsOffset);
    PassiveRadarObservation_Ingest.AddObPosition(builder, obPositionOffset);
    PassiveRadarObservation_Ingest.AddTrackId(builder, trackIdOffset);
    PassiveRadarObservation_Ingest.AddTaskId(builder, taskIdOffset);
    PassiveRadarObservation_Ingest.AddExtObservationId(builder, extObservationIdOffset);
    PassiveRadarObservation_Ingest.AddIdSensorRefReceiver(builder, idSensorRefReceiverOffset);
    PassiveRadarObservation_Ingest.AddIdRFEmitter(builder, idRFEmitterOffset);
    PassiveRadarObservation_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    PassiveRadarObservation_Ingest.AddIdSensor(builder, idSensorOffset);
    PassiveRadarObservation_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    PassiveRadarObservation_Ingest.AddSatNo(builder, satNo);
    PassiveRadarObservation_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    PassiveRadarObservation_Ingest.AddObTime(builder, obTimeOffset);
    PassiveRadarObservation_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    PassiveRadarObservation_Ingest.AddId(builder, idOffset);
    PassiveRadarObservation_Ingest.AddDataMode(builder, dataMode);
    PassiveRadarObservation_Ingest.AddUct(builder, uct);
    return PassiveRadarObservation_Ingest.EndPassiveRadarObservation_Ingest(builder);
  }

  public static void StartPassiveRadarObservation_Ingest(FlatBufferBuilder builder) { builder.StartTable(67); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(4, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(5, origObjectIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(6, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(7, origSensorIdOffset.Value, 0); }
  public static void AddIdRFEmitter(FlatBufferBuilder builder, StringOffset idRFEmitterOffset) { builder.AddOffset(8, idRFEmitterOffset.Value, 0); }
  public static void AddIdSensorRefReceiver(FlatBufferBuilder builder, StringOffset idSensorRefReceiverOffset) { builder.AddOffset(9, idSensorRefReceiverOffset.Value, 0); }
  public static void AddExtObservationId(FlatBufferBuilder builder, StringOffset extObservationIdOffset) { builder.AddOffset(10, extObservationIdOffset.Value, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(11, taskIdOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(12, trackIdOffset.Value, 0); }
  public static void AddObPosition(FlatBufferBuilder builder, StringOffset obPositionOffset) { builder.AddOffset(13, obPositionOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(14, uct, false); }
  public static void AddAzimuth(FlatBufferBuilder builder, double azimuth) { builder.AddDouble(15, azimuth, 0.0); }
  public static void AddAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.AddDouble(16, azimuthUnc, 0.0); }
  public static void AddAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.AddDouble(17, azimuthBias, 0.0); }
  public static void AddAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.AddDouble(18, azimuthRate, 0.0); }
  public static void AddElevation(FlatBufferBuilder builder, double elevation) { builder.AddDouble(19, elevation, 0.0); }
  public static void AddElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.AddDouble(20, elevationUnc, 0.0); }
  public static void AddElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.AddDouble(21, elevationBias, 0.0); }
  public static void AddElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.AddDouble(22, elevationRate, 0.0); }
  public static void AddDelay(FlatBufferBuilder builder, double delay) { builder.AddDouble(23, delay, 0.0); }
  public static void AddDelayUnc(FlatBufferBuilder builder, double delayUnc) { builder.AddDouble(24, delayUnc, 0.0); }
  public static void AddDelayBias(FlatBufferBuilder builder, double delayBias) { builder.AddDouble(25, delayBias, 0.0); }
  public static void AddBistaticRange(FlatBufferBuilder builder, double bistaticRange) { builder.AddDouble(26, bistaticRange, 0.0); }
  public static void AddBistaticRangeUnc(FlatBufferBuilder builder, double bistaticRangeUnc) { builder.AddDouble(27, bistaticRangeUnc, 0.0); }
  public static void AddBistaticRangeBias(FlatBufferBuilder builder, double bistaticRangeBias) { builder.AddDouble(28, bistaticRangeBias, 0.0); }
  public static void AddBistaticRangeRate(FlatBufferBuilder builder, double bistaticRangeRate) { builder.AddDouble(29, bistaticRangeRate, 0.0); }
  public static void AddBistaticRangeRateUnc(FlatBufferBuilder builder, double bistaticRangeRateUnc) { builder.AddDouble(30, bistaticRangeRateUnc, 0.0); }
  public static void AddBistaticRangeAccel(FlatBufferBuilder builder, double bistaticRangeAccel) { builder.AddDouble(31, bistaticRangeAccel, 0.0); }
  public static void AddBistaticRangeAccelUnc(FlatBufferBuilder builder, double bistaticRangeAccelUnc) { builder.AddDouble(32, bistaticRangeAccelUnc, 0.0); }
  public static void AddDoppler(FlatBufferBuilder builder, double doppler) { builder.AddDouble(33, doppler, 0.0); }
  public static void AddDopplerUnc(FlatBufferBuilder builder, double dopplerUnc) { builder.AddDouble(34, dopplerUnc, 0.0); }
  public static void AddConing(FlatBufferBuilder builder, double coning) { builder.AddDouble(35, coning, 0.0); }
  public static void AddConingUnc(FlatBufferBuilder builder, double coningUnc) { builder.AddDouble(36, coningUnc, 0.0); }
  public static void AddTof(FlatBufferBuilder builder, double tof) { builder.AddDouble(37, tof, 0.0); }
  public static void AddTofUnc(FlatBufferBuilder builder, double tofUnc) { builder.AddDouble(38, tofUnc, 0.0); }
  public static void AddTofBias(FlatBufferBuilder builder, double tofBias) { builder.AddDouble(39, tofBias, 0.0); }
  public static void AddAccel(FlatBufferBuilder builder, double accel) { builder.AddDouble(40, accel, 0.0); }
  public static void AddAccelUnc(FlatBufferBuilder builder, double accelUnc) { builder.AddDouble(41, accelUnc, 0.0); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(42, ra, 0.0); }
  public static void AddDeclination(FlatBufferBuilder builder, double declination) { builder.AddDouble(43, declination, 0.0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(44, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(45, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(46, alt, 0.0); }
  public static void AddXvel(FlatBufferBuilder builder, double xvel) { builder.AddDouble(47, xvel, 0.0); }
  public static void AddYvel(FlatBufferBuilder builder, double yvel) { builder.AddDouble(48, yvel, 0.0); }
  public static void AddZvel(FlatBufferBuilder builder, double zvel) { builder.AddDouble(49, zvel, 0.0); }
  public static void AddRcs(FlatBufferBuilder builder, double rcs) { builder.AddDouble(50, rcs, 0.0); }
  public static void AddRcsUnc(FlatBufferBuilder builder, double rcsUnc) { builder.AddDouble(51, rcsUnc, 0.0); }
  public static void AddOrthogonalRcs(FlatBufferBuilder builder, double orthogonalRcs) { builder.AddDouble(52, orthogonalRcs, 0.0); }
  public static void AddOrthogonalRcsUnc(FlatBufferBuilder builder, double orthogonalRcsUnc) { builder.AddDouble(53, orthogonalRcsUnc, 0.0); }
  public static void AddSnr(FlatBufferBuilder builder, double snr) { builder.AddDouble(54, snr, 0.0); }
  public static void AddTimingBias(FlatBufferBuilder builder, double timingBias) { builder.AddDouble(55, timingBias, 0.0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(56, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(57, transactionIdOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(58, descriptorOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(59, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(60, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(61, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(62, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(63, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(64, sourceDLOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, PassiveRadarObservation_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(65, (sbyte)dataMode, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(66, typeOffset.Value, 0); }
  public static Offset<PassiveRadarObservation_Ingest> EndPassiveRadarObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PassiveRadarObservation_Ingest>(o);
  }
  public static void FinishPassiveRadarObservation_IngestBuffer(FlatBufferBuilder builder, Offset<PassiveRadarObservation_Ingest> offset) { builder.Finish(offset.Value, "PASS"); }
  public static void FinishSizePrefixedPassiveRadarObservation_IngestBuffer(FlatBufferBuilder builder, Offset<PassiveRadarObservation_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "PASS"); }
  public PassiveRadarObservation_IngestT UnPack() {
    var _o = new PassiveRadarObservation_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PassiveRadarObservation_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.IdRFEmitter = this.IdRFEmitter;
    _o.IdSensorRefReceiver = this.IdSensorRefReceiver;
    _o.ExtObservationId = this.ExtObservationId;
    _o.TaskId = this.TaskId;
    _o.TrackId = this.TrackId;
    _o.ObPosition = this.ObPosition;
    _o.Uct = this.Uct;
    _o.Azimuth = this.Azimuth;
    _o.AzimuthUnc = this.AzimuthUnc;
    _o.AzimuthBias = this.AzimuthBias;
    _o.AzimuthRate = this.AzimuthRate;
    _o.Elevation = this.Elevation;
    _o.ElevationUnc = this.ElevationUnc;
    _o.ElevationBias = this.ElevationBias;
    _o.ElevationRate = this.ElevationRate;
    _o.Delay = this.Delay;
    _o.DelayUnc = this.DelayUnc;
    _o.DelayBias = this.DelayBias;
    _o.BistaticRange = this.BistaticRange;
    _o.BistaticRangeUnc = this.BistaticRangeUnc;
    _o.BistaticRangeBias = this.BistaticRangeBias;
    _o.BistaticRangeRate = this.BistaticRangeRate;
    _o.BistaticRangeRateUnc = this.BistaticRangeRateUnc;
    _o.BistaticRangeAccel = this.BistaticRangeAccel;
    _o.BistaticRangeAccelUnc = this.BistaticRangeAccelUnc;
    _o.Doppler = this.Doppler;
    _o.DopplerUnc = this.DopplerUnc;
    _o.Coning = this.Coning;
    _o.ConingUnc = this.ConingUnc;
    _o.Tof = this.Tof;
    _o.TofUnc = this.TofUnc;
    _o.TofBias = this.TofBias;
    _o.Accel = this.Accel;
    _o.AccelUnc = this.AccelUnc;
    _o.Ra = this.Ra;
    _o.Declination = this.Declination;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.Xvel = this.Xvel;
    _o.Yvel = this.Yvel;
    _o.Zvel = this.Zvel;
    _o.Rcs = this.Rcs;
    _o.RcsUnc = this.RcsUnc;
    _o.OrthogonalRcs = this.OrthogonalRcs;
    _o.OrthogonalRcsUnc = this.OrthogonalRcsUnc;
    _o.Snr = this.Snr;
    _o.TimingBias = this.TimingBias;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.TransactionId = this.TransactionId;
    _o.Descriptor = this.Descriptor;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.DataMode = this.DataMode;
    _o.Type = this.Type;
  }
  public static Offset<PassiveRadarObservation_Ingest> Pack(FlatBufferBuilder builder, PassiveRadarObservation_IngestT _o) {
    if (_o == null) return default(Offset<PassiveRadarObservation_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _idRFEmitter = _o.IdRFEmitter == null ? default(StringOffset) : builder.CreateString(_o.IdRFEmitter);
    var _idSensorRefReceiver = _o.IdSensorRefReceiver == null ? default(StringOffset) : builder.CreateString(_o.IdSensorRefReceiver);
    var _extObservationId = _o.ExtObservationId == null ? default(StringOffset) : builder.CreateString(_o.ExtObservationId);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _obPosition = _o.ObPosition == null ? default(StringOffset) : builder.CreateString(_o.ObPosition);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    return CreatePassiveRadarObservation_Ingest(
      builder,
      _id,
      _classificationMarking,
      _obTime,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _idSensor,
      _origSensorId,
      _idRFEmitter,
      _idSensorRefReceiver,
      _extObservationId,
      _taskId,
      _trackId,
      _obPosition,
      _o.Uct,
      _o.Azimuth,
      _o.AzimuthUnc,
      _o.AzimuthBias,
      _o.AzimuthRate,
      _o.Elevation,
      _o.ElevationUnc,
      _o.ElevationBias,
      _o.ElevationRate,
      _o.Delay,
      _o.DelayUnc,
      _o.DelayBias,
      _o.BistaticRange,
      _o.BistaticRangeUnc,
      _o.BistaticRangeBias,
      _o.BistaticRangeRate,
      _o.BistaticRangeRateUnc,
      _o.BistaticRangeAccel,
      _o.BistaticRangeAccelUnc,
      _o.Doppler,
      _o.DopplerUnc,
      _o.Coning,
      _o.ConingUnc,
      _o.Tof,
      _o.TofUnc,
      _o.TofBias,
      _o.Accel,
      _o.AccelUnc,
      _o.Ra,
      _o.Declination,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.Xvel,
      _o.Yvel,
      _o.Zvel,
      _o.Rcs,
      _o.RcsUnc,
      _o.OrthogonalRcs,
      _o.OrthogonalRcsUnc,
      _o.Snr,
      _o.TimingBias,
      _tags,
      _transactionId,
      _descriptor,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _o.DataMode,
      _type);
  }
}

public class PassiveRadarObservation_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string IdRFEmitter { get; set; }
  public string IdSensorRefReceiver { get; set; }
  public string ExtObservationId { get; set; }
  public string TaskId { get; set; }
  public string TrackId { get; set; }
  public string ObPosition { get; set; }
  public bool Uct { get; set; }
  public double Azimuth { get; set; }
  public double AzimuthUnc { get; set; }
  public double AzimuthBias { get; set; }
  public double AzimuthRate { get; set; }
  public double Elevation { get; set; }
  public double ElevationUnc { get; set; }
  public double ElevationBias { get; set; }
  public double ElevationRate { get; set; }
  public double Delay { get; set; }
  public double DelayUnc { get; set; }
  public double DelayBias { get; set; }
  public double BistaticRange { get; set; }
  public double BistaticRangeUnc { get; set; }
  public double BistaticRangeBias { get; set; }
  public double BistaticRangeRate { get; set; }
  public double BistaticRangeRateUnc { get; set; }
  public double BistaticRangeAccel { get; set; }
  public double BistaticRangeAccelUnc { get; set; }
  public double Doppler { get; set; }
  public double DopplerUnc { get; set; }
  public double Coning { get; set; }
  public double ConingUnc { get; set; }
  public double Tof { get; set; }
  public double TofUnc { get; set; }
  public double TofBias { get; set; }
  public double Accel { get; set; }
  public double AccelUnc { get; set; }
  public double Ra { get; set; }
  public double Declination { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double Xvel { get; set; }
  public double Yvel { get; set; }
  public double Zvel { get; set; }
  public double Rcs { get; set; }
  public double RcsUnc { get; set; }
  public double OrthogonalRcs { get; set; }
  public double OrthogonalRcsUnc { get; set; }
  public double Snr { get; set; }
  public double TimingBias { get; set; }
  public List<string> Tags { get; set; }
  public string TransactionId { get; set; }
  public string Descriptor { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public PassiveRadarObservation_Ingest_dataMode_Enum DataMode { get; set; }
  public string Type { get; set; }

  public PassiveRadarObservation_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.IdRFEmitter = null;
    this.IdSensorRefReceiver = null;
    this.ExtObservationId = null;
    this.TaskId = null;
    this.TrackId = null;
    this.ObPosition = null;
    this.Uct = false;
    this.Azimuth = 0.0;
    this.AzimuthUnc = 0.0;
    this.AzimuthBias = 0.0;
    this.AzimuthRate = 0.0;
    this.Elevation = 0.0;
    this.ElevationUnc = 0.0;
    this.ElevationBias = 0.0;
    this.ElevationRate = 0.0;
    this.Delay = 0.0;
    this.DelayUnc = 0.0;
    this.DelayBias = 0.0;
    this.BistaticRange = 0.0;
    this.BistaticRangeUnc = 0.0;
    this.BistaticRangeBias = 0.0;
    this.BistaticRangeRate = 0.0;
    this.BistaticRangeRateUnc = 0.0;
    this.BistaticRangeAccel = 0.0;
    this.BistaticRangeAccelUnc = 0.0;
    this.Doppler = 0.0;
    this.DopplerUnc = 0.0;
    this.Coning = 0.0;
    this.ConingUnc = 0.0;
    this.Tof = 0.0;
    this.TofUnc = 0.0;
    this.TofBias = 0.0;
    this.Accel = 0.0;
    this.AccelUnc = 0.0;
    this.Ra = 0.0;
    this.Declination = 0.0;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.Xvel = 0.0;
    this.Yvel = 0.0;
    this.Zvel = 0.0;
    this.Rcs = 0.0;
    this.RcsUnc = 0.0;
    this.OrthogonalRcs = 0.0;
    this.OrthogonalRcsUnc = 0.0;
    this.Snr = 0.0;
    this.TimingBias = 0.0;
    this.Tags = null;
    this.TransactionId = null;
    this.Descriptor = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.DataMode = PassiveRadarObservation_Ingest_dataMode_Enum.REAL;
    this.Type = null;
  }
  public static PassiveRadarObservation_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return PassiveRadarObservation_Ingest.GetRootAsPassiveRadarObservation_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PassiveRadarObservation_Ingest.FinishPassiveRadarObservation_IngestBuffer(fbb, PassiveRadarObservation_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PassiveRadarObservation_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 12 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 18 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 20 /*IdRFEmitter*/, false)
      && verifier.VerifyString(tablePos, 22 /*IdSensorRefReceiver*/, false)
      && verifier.VerifyString(tablePos, 24 /*ExtObservationId*/, false)
      && verifier.VerifyString(tablePos, 26 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 28 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 30 /*ObPosition*/, false)
      && verifier.VerifyField(tablePos, 32 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*Azimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*AzimuthUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*AzimuthBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*AzimuthRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Elevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*ElevationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*ElevationBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*ElevationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Delay*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*DelayUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*DelayBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*BistaticRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*BistaticRangeUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*BistaticRangeBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*BistaticRangeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*BistaticRangeRateUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*BistaticRangeAccel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*BistaticRangeAccelUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*Doppler*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*DopplerUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*Coning*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*ConingUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Tof*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*TofUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*TofBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*Accel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*AccelUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*Declination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*Xvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*Yvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*Zvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*Rcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*RcsUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*OrthogonalRcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*OrthogonalRcsUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*Snr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*TimingBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 116 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 118 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 120 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 122 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 124 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 126 /*Source*/, false)
      && verifier.VerifyString(tablePos, 128 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 130 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 132 /*SourceDL*/, false)
      && verifier.VerifyField(tablePos, 134 /*DataMode*/, 1 /*PassiveRadarObservation_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 136 /*Type*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
