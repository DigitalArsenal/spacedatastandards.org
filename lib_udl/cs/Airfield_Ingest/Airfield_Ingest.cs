// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
public struct Airfield_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Airfield_Ingest GetRootAsAirfield_Ingest(ByteBuffer _bb) { return GetRootAsAirfield_Ingest(_bb, new Airfield_Ingest()); }
  public static Airfield_Ingest GetRootAsAirfield_Ingest(ByteBuffer _bb, Airfield_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Airfield_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRF"); }
  public static bool VerifyAirfield_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRF", false, Airfield_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Airfield_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The ID of the parent site.
  /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSite { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSiteBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSiteBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSiteArray() { return __p.__vector_as_array<byte>(8); }
  /// Alternate Airfield identifier provided by source.
  /// Example: /// Example: 45301
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltAirfieldId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAirfieldIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAltAirfieldIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAltAirfieldIdArray() { return __p.__vector_as_array<byte>(10); }
  /// The airfield's World Area Code installation number (WAC-INNR).
  /// Example: /// Example: 0409-00039
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string WacINNR { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacINNRBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWacINNRBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWacINNRArray() { return __p.__vector_as_array<byte>(12); }
  /// Air Mobility Command (AMC) Zone availability Report identifier.
  /// Example: /// Example: 231
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ZarId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZarIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetZarIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetZarIdArray() { return __p.__vector_as_array<byte>(14); }
  /// The International Civil Aviation Organization (ICAO) code of the airfield.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Icao { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcaoBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIcaoBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIcaoArray() { return __p.__vector_as_array<byte>(16); }
  /// The International Aviation Transport Association (IATA) code of the airfield.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Iata { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIataBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIataArray() { return __p.__vector_as_array<byte>(18); }
  /// The Federal Aviation Administration (FAA) location identifier of this airfield.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Faa { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFaaBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetFaaBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetFaaArray() { return __p.__vector_as_array<byte>(20); }
  /// The host nation code of this airfield, used for non-DoD/FAA locations.
  /// Example: /// Example: ZPU
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string HostNatCode { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHostNatCodeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetHostNatCodeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetHostNatCodeArray() { return __p.__vector_as_array<byte>(22); }
  /// The name of the airfield.
  /// Example: /// Example: USAF Academy AFLD
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Name { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(24); }
  /// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string Type { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(26); }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Elevation of the airfield above mean sea level, in feet.
  /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 33.562
  /// Constraints: No constraints specified.
  public double ElevFt { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Elevation of the airfield above mean sea level, in meters.
  /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 10.29
  /// Constraints: No constraints specified.
  public double ElevM { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
  /// Example: /// Example: 7.35
  /// Constraints: No constraints specified.
  public double MagDec { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Region where the airfield resides.
  /// Example: /// Example: North America
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string RegionName { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionNameBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetRegionNameBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetRegionNameArray() { return __p.__vector_as_array<byte>(38); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(40); }
  /// Closest city to the airfield's location.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string City { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCityBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCityBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCityArray() { return __p.__vector_as_array<byte>(42); }
  /// State or province of the airfield's location.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string State { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(44); }
  /// Air Force geographic location code of the airfield.
  /// Example: /// Example: XLSX
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Geoloc { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeolocBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetGeolocBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetGeolocArray() { return __p.__vector_as_array<byte>(46); }
  /// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
  /// Example: /// Example: -4:30
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string GmtOffset { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGmtOffsetBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetGmtOffsetBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetGmtOffsetArray() { return __p.__vector_as_array<byte>(48); }
  /// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  /// Example: /// Example: ABCDEF
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SuitabilityCodes { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuitabilityCodesBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSuitabilityCodesBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSuitabilityCodesArray() { return __p.__vector_as_array<byte>(50); }
  /// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  /// Example: /// Example: AMZ
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MiscCodes { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiscCodesBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetMiscCodesBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetMiscCodesArray() { return __p.__vector_as_array<byte>(52); }
  /// The number of runways at the site.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int Runways { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The length of the longest runway at this airfield in feet.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int MaxRunwayLength { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The URL link to information about airfield.
  /// Example: /// Example: URL Link to the Airfield
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string InfoURL { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInfoURLBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetInfoURLBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetInfoURLArray() { return __p.__vector_as_array<byte>(58); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(60); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(62); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(64); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(66); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(68); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(70); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Airfield_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(72); return o != 0 ? (Airfield_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Airfield_Ingest_dataMode_Enum.REAL; } }

  public static Offset<Airfield_Ingest> CreateAirfield_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idSiteOffset = default(StringOffset),
      StringOffset altAirfieldIdOffset = default(StringOffset),
      StringOffset wacINNROffset = default(StringOffset),
      StringOffset zarIdOffset = default(StringOffset),
      StringOffset icaoOffset = default(StringOffset),
      StringOffset iataOffset = default(StringOffset),
      StringOffset faaOffset = default(StringOffset),
      StringOffset hostNatCodeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double elevFt = 0.0,
      double elevM = 0.0,
      double magDec = 0.0,
      StringOffset regionNameOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset cityOffset = default(StringOffset),
      StringOffset stateOffset = default(StringOffset),
      StringOffset geolocOffset = default(StringOffset),
      StringOffset gmtOffsetOffset = default(StringOffset),
      StringOffset suitabilityCodesOffset = default(StringOffset),
      StringOffset miscCodesOffset = default(StringOffset),
      int runways = 0,
      int maxRunwayLength = 0,
      StringOffset infoURLOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Airfield_Ingest_dataMode_Enum dataMode = Airfield_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(35);
    Airfield_Ingest.AddMagDec(builder, magDec);
    Airfield_Ingest.AddElevM(builder, elevM);
    Airfield_Ingest.AddElevFt(builder, elevFt);
    Airfield_Ingest.AddLon(builder, lon);
    Airfield_Ingest.AddLat(builder, lat);
    Airfield_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Airfield_Ingest.AddOrigin(builder, originOffset);
    Airfield_Ingest.AddSource(builder, sourceOffset);
    Airfield_Ingest.AddSourceDL(builder, sourceDLOffset);
    Airfield_Ingest.AddCreatedBy(builder, createdByOffset);
    Airfield_Ingest.AddCreatedAt(builder, createdAtOffset);
    Airfield_Ingest.AddInfoURL(builder, infoURLOffset);
    Airfield_Ingest.AddMaxRunwayLength(builder, maxRunwayLength);
    Airfield_Ingest.AddRunways(builder, runways);
    Airfield_Ingest.AddMiscCodes(builder, miscCodesOffset);
    Airfield_Ingest.AddSuitabilityCodes(builder, suitabilityCodesOffset);
    Airfield_Ingest.AddGmtOffset(builder, gmtOffsetOffset);
    Airfield_Ingest.AddGeoloc(builder, geolocOffset);
    Airfield_Ingest.AddState(builder, stateOffset);
    Airfield_Ingest.AddCity(builder, cityOffset);
    Airfield_Ingest.AddCountryCode(builder, countryCodeOffset);
    Airfield_Ingest.AddRegionName(builder, regionNameOffset);
    Airfield_Ingest.AddType(builder, typeOffset);
    Airfield_Ingest.AddName(builder, nameOffset);
    Airfield_Ingest.AddHostNatCode(builder, hostNatCodeOffset);
    Airfield_Ingest.AddFaa(builder, faaOffset);
    Airfield_Ingest.AddIata(builder, iataOffset);
    Airfield_Ingest.AddIcao(builder, icaoOffset);
    Airfield_Ingest.AddZarId(builder, zarIdOffset);
    Airfield_Ingest.AddWacINNR(builder, wacINNROffset);
    Airfield_Ingest.AddAltAirfieldId(builder, altAirfieldIdOffset);
    Airfield_Ingest.AddIdSite(builder, idSiteOffset);
    Airfield_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Airfield_Ingest.AddId(builder, idOffset);
    Airfield_Ingest.AddDataMode(builder, dataMode);
    return Airfield_Ingest.EndAirfield_Ingest(builder);
  }

  public static void StartAirfield_Ingest(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdSite(FlatBufferBuilder builder, StringOffset idSiteOffset) { builder.AddOffset(2, idSiteOffset.Value, 0); }
  public static void AddAltAirfieldId(FlatBufferBuilder builder, StringOffset altAirfieldIdOffset) { builder.AddOffset(3, altAirfieldIdOffset.Value, 0); }
  public static void AddWacINNR(FlatBufferBuilder builder, StringOffset wacINNROffset) { builder.AddOffset(4, wacINNROffset.Value, 0); }
  public static void AddZarId(FlatBufferBuilder builder, StringOffset zarIdOffset) { builder.AddOffset(5, zarIdOffset.Value, 0); }
  public static void AddIcao(FlatBufferBuilder builder, StringOffset icaoOffset) { builder.AddOffset(6, icaoOffset.Value, 0); }
  public static void AddIata(FlatBufferBuilder builder, StringOffset iataOffset) { builder.AddOffset(7, iataOffset.Value, 0); }
  public static void AddFaa(FlatBufferBuilder builder, StringOffset faaOffset) { builder.AddOffset(8, faaOffset.Value, 0); }
  public static void AddHostNatCode(FlatBufferBuilder builder, StringOffset hostNatCodeOffset) { builder.AddOffset(9, hostNatCodeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(10, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(11, typeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(12, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(13, lon, 0.0); }
  public static void AddElevFt(FlatBufferBuilder builder, double elevFt) { builder.AddDouble(14, elevFt, 0.0); }
  public static void AddElevM(FlatBufferBuilder builder, double elevM) { builder.AddDouble(15, elevM, 0.0); }
  public static void AddMagDec(FlatBufferBuilder builder, double magDec) { builder.AddDouble(16, magDec, 0.0); }
  public static void AddRegionName(FlatBufferBuilder builder, StringOffset regionNameOffset) { builder.AddOffset(17, regionNameOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(18, countryCodeOffset.Value, 0); }
  public static void AddCity(FlatBufferBuilder builder, StringOffset cityOffset) { builder.AddOffset(19, cityOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(20, stateOffset.Value, 0); }
  public static void AddGeoloc(FlatBufferBuilder builder, StringOffset geolocOffset) { builder.AddOffset(21, geolocOffset.Value, 0); }
  public static void AddGmtOffset(FlatBufferBuilder builder, StringOffset gmtOffsetOffset) { builder.AddOffset(22, gmtOffsetOffset.Value, 0); }
  public static void AddSuitabilityCodes(FlatBufferBuilder builder, StringOffset suitabilityCodesOffset) { builder.AddOffset(23, suitabilityCodesOffset.Value, 0); }
  public static void AddMiscCodes(FlatBufferBuilder builder, StringOffset miscCodesOffset) { builder.AddOffset(24, miscCodesOffset.Value, 0); }
  public static void AddRunways(FlatBufferBuilder builder, int runways) { builder.AddInt(25, runways, 0); }
  public static void AddMaxRunwayLength(FlatBufferBuilder builder, int maxRunwayLength) { builder.AddInt(26, maxRunwayLength, 0); }
  public static void AddInfoURL(FlatBufferBuilder builder, StringOffset infoURLOffset) { builder.AddOffset(27, infoURLOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(28, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(29, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(30, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(31, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(32, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(33, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Airfield_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(34, (sbyte)dataMode, 0); }
  public static Offset<Airfield_Ingest> EndAirfield_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Airfield_Ingest>(o);
  }
  public static void FinishAirfield_IngestBuffer(FlatBufferBuilder builder, Offset<Airfield_Ingest> offset) { builder.Finish(offset.Value, "AIRF"); }
  public static void FinishSizePrefixedAirfield_IngestBuffer(FlatBufferBuilder builder, Offset<Airfield_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "AIRF"); }
  public Airfield_IngestT UnPack() {
    var _o = new Airfield_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Airfield_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdSite = this.IdSite;
    _o.AltAirfieldId = this.AltAirfieldId;
    _o.WacINNR = this.WacINNR;
    _o.ZarId = this.ZarId;
    _o.Icao = this.Icao;
    _o.Iata = this.Iata;
    _o.Faa = this.Faa;
    _o.HostNatCode = this.HostNatCode;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.ElevFt = this.ElevFt;
    _o.ElevM = this.ElevM;
    _o.MagDec = this.MagDec;
    _o.RegionName = this.RegionName;
    _o.CountryCode = this.CountryCode;
    _o.City = this.City;
    _o.State = this.State;
    _o.Geoloc = this.Geoloc;
    _o.GmtOffset = this.GmtOffset;
    _o.SuitabilityCodes = this.SuitabilityCodes;
    _o.MiscCodes = this.MiscCodes;
    _o.Runways = this.Runways;
    _o.MaxRunwayLength = this.MaxRunwayLength;
    _o.InfoURL = this.InfoURL;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Airfield_Ingest> Pack(FlatBufferBuilder builder, Airfield_IngestT _o) {
    if (_o == null) return default(Offset<Airfield_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idSite = _o.IdSite == null ? default(StringOffset) : builder.CreateString(_o.IdSite);
    var _altAirfieldId = _o.AltAirfieldId == null ? default(StringOffset) : builder.CreateString(_o.AltAirfieldId);
    var _wacINNR = _o.WacINNR == null ? default(StringOffset) : builder.CreateString(_o.WacINNR);
    var _zarId = _o.ZarId == null ? default(StringOffset) : builder.CreateString(_o.ZarId);
    var _icao = _o.Icao == null ? default(StringOffset) : builder.CreateString(_o.Icao);
    var _iata = _o.Iata == null ? default(StringOffset) : builder.CreateString(_o.Iata);
    var _faa = _o.Faa == null ? default(StringOffset) : builder.CreateString(_o.Faa);
    var _hostNatCode = _o.HostNatCode == null ? default(StringOffset) : builder.CreateString(_o.HostNatCode);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _regionName = _o.RegionName == null ? default(StringOffset) : builder.CreateString(_o.RegionName);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _city = _o.City == null ? default(StringOffset) : builder.CreateString(_o.City);
    var _state = _o.State == null ? default(StringOffset) : builder.CreateString(_o.State);
    var _geoloc = _o.Geoloc == null ? default(StringOffset) : builder.CreateString(_o.Geoloc);
    var _gmtOffset = _o.GmtOffset == null ? default(StringOffset) : builder.CreateString(_o.GmtOffset);
    var _suitabilityCodes = _o.SuitabilityCodes == null ? default(StringOffset) : builder.CreateString(_o.SuitabilityCodes);
    var _miscCodes = _o.MiscCodes == null ? default(StringOffset) : builder.CreateString(_o.MiscCodes);
    var _infoURL = _o.InfoURL == null ? default(StringOffset) : builder.CreateString(_o.InfoURL);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirfield_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idSite,
      _altAirfieldId,
      _wacINNR,
      _zarId,
      _icao,
      _iata,
      _faa,
      _hostNatCode,
      _name,
      _type,
      _o.Lat,
      _o.Lon,
      _o.ElevFt,
      _o.ElevM,
      _o.MagDec,
      _regionName,
      _countryCode,
      _city,
      _state,
      _geoloc,
      _gmtOffset,
      _suitabilityCodes,
      _miscCodes,
      _o.Runways,
      _o.MaxRunwayLength,
      _infoURL,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Airfield_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdSite { get; set; }
  public string AltAirfieldId { get; set; }
  public string WacINNR { get; set; }
  public string ZarId { get; set; }
  public string Icao { get; set; }
  public string Iata { get; set; }
  public string Faa { get; set; }
  public string HostNatCode { get; set; }
  public string Name { get; set; }
  public string Type { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double ElevFt { get; set; }
  public double ElevM { get; set; }
  public double MagDec { get; set; }
  public string RegionName { get; set; }
  public string CountryCode { get; set; }
  public string City { get; set; }
  public string State { get; set; }
  public string Geoloc { get; set; }
  public string GmtOffset { get; set; }
  public string SuitabilityCodes { get; set; }
  public string MiscCodes { get; set; }
  public int Runways { get; set; }
  public int MaxRunwayLength { get; set; }
  public string InfoURL { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Airfield_Ingest_dataMode_Enum DataMode { get; set; }

  public Airfield_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdSite = null;
    this.AltAirfieldId = null;
    this.WacINNR = null;
    this.ZarId = null;
    this.Icao = null;
    this.Iata = null;
    this.Faa = null;
    this.HostNatCode = null;
    this.Name = null;
    this.Type = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.ElevFt = 0.0;
    this.ElevM = 0.0;
    this.MagDec = 0.0;
    this.RegionName = null;
    this.CountryCode = null;
    this.City = null;
    this.State = null;
    this.Geoloc = null;
    this.GmtOffset = null;
    this.SuitabilityCodes = null;
    this.MiscCodes = null;
    this.Runways = 0;
    this.MaxRunwayLength = 0;
    this.InfoURL = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Airfield_Ingest_dataMode_Enum.REAL;
  }
  public static Airfield_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Airfield_Ingest.GetRootAsAirfield_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Airfield_Ingest.FinishAirfield_IngestBuffer(fbb, Airfield_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Airfield_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSite*/, false)
      && verifier.VerifyString(tablePos, 10 /*AltAirfieldId*/, false)
      && verifier.VerifyString(tablePos, 12 /*WacINNR*/, false)
      && verifier.VerifyString(tablePos, 14 /*ZarId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icao*/, false)
      && verifier.VerifyString(tablePos, 18 /*Iata*/, false)
      && verifier.VerifyString(tablePos, 20 /*Faa*/, false)
      && verifier.VerifyString(tablePos, 22 /*HostNatCode*/, false)
      && verifier.VerifyString(tablePos, 24 /*Name*/, false)
      && verifier.VerifyString(tablePos, 26 /*Type*/, false)
      && verifier.VerifyField(tablePos, 28 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*ElevFt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*ElevM*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*MagDec*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 38 /*RegionName*/, false)
      && verifier.VerifyString(tablePos, 40 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 42 /*City*/, false)
      && verifier.VerifyString(tablePos, 44 /*State*/, false)
      && verifier.VerifyString(tablePos, 46 /*Geoloc*/, false)
      && verifier.VerifyString(tablePos, 48 /*GmtOffset*/, false)
      && verifier.VerifyString(tablePos, 50 /*SuitabilityCodes*/, false)
      && verifier.VerifyString(tablePos, 52 /*MiscCodes*/, false)
      && verifier.VerifyField(tablePos, 54 /*Runways*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*MaxRunwayLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*InfoURL*/, false)
      && verifier.VerifyString(tablePos, 60 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 64 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 66 /*Source*/, false)
      && verifier.VerifyString(tablePos, 68 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 70 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 72 /*DataMode*/, 1 /*Airfield_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
