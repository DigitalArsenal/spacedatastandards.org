// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Contains details of the OnOrbit object.
public struct OnorbitDetails_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OnorbitDetails_Full GetRootAsOnorbitDetails_Full(ByteBuffer _bb) { return GetRootAsOnorbitDetails_Full(_bb, new OnorbitDetails_Full()); }
  public static OnorbitDetails_Full GetRootAsOnorbitDetails_Full(ByteBuffer _bb, OnorbitDetails_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OnorbitDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ONOR"); }
  public static bool VerifyOnorbitDetails_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ONOR", false, OnorbitDetails_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OnorbitDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LastObTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLastObTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLastObTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// Current/latest visual magnitude in M.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Vismag { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum visual magnitude in M.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double VismagMin { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum visual magnitude in M.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  public double VismagMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mean visual magnitude in M.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double VismagMean { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Current/latest radar cross section in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Rcs { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum radar cross section in meters squared.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double RcsMin { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum radar cross section in meters squared.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  public double RcsMax { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mean radar cross section in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double RcsMean { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total beginning of life delta V of the spacecraft, in meters per second.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  public double BolDeltaV { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum delta V available for this on-orbit spacecraft, in meters per second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxDeltaV { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  public double DeltaVUnc { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated maximum burn duration for the object, in seconds.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double EstDeltaVDuration { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of distinct missions the spacecraft performs.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumMission { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
  /// Example: /// Example: ['Weather', 'Space Weather']
  /// Constraints: No constraints specified.
  public string MissionTypes(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MissionTypesLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Type of the bus on the spacecraft.
  /// Example: /// Example: A2100
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string BusType { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBusTypeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetBusTypeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetBusTypeArray() { return __p.__vector_as_array<byte>(40); }
  /// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  public double GeoSlot { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// GEO drift rate, if applicable in degrees per day.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double DriftRate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft dry mass (without fuel or disposables) in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double DryMass { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mass of fuel and disposables at launch time in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double AdditionalMass { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double LaunchMassMin { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Nominal mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double LaunchMass { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  public double LaunchMassMax { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double BolFuelMass { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated total current mass of the spacecraft, in kilograms.
  /// Example: /// Example: 500
  /// Constraints: No constraints specified.
  public double CurrentMass { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  public double TotalMassUnc { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft deployed area of solar array in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double SolarArrayArea { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Maneuverable { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Estimated remaining fuel for the object in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double FuelRemaining { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average cross sectional area in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double CrossSection { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average cross sectional area of the bus in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double BusCrossSection { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxRadius { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double ColaRadius { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double AdeptRadius { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of sub-satellites or deployable objects on the spacecraft.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumDeployable { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: ['GOES-18A', 'GOES-18B']
  /// Constraints: No constraints specified.
  public string DepNames(int j) { int o = __p.__offset(80); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DepNamesLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: [20, 21]
  /// Constraints: No constraints specified.
  public string DepEstMasses(int j) { int o = __p.__offset(82); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DepEstMassesLength { get { int o = __p.__offset(82); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: [10, 5]
  /// Constraints: No constraints specified.
  public string DepMassUncs(int j) { int o = __p.__offset(84); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DepMassUncsLength { get { int o = __p.__offset(84); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(86); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(88); }
  /// The name of the source who last provided an observation for this idOnOrbit.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string LastObSource { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObSourceBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetLastObSourceBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetLastObSourceArray() { return __p.__vector_as_array<byte>(90); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public OnorbitDetails_Full_dataMode_Enum DataMode { get { int o = __p.__offset(92); return o != 0 ? (OnorbitDetails_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnorbitDetails_Full_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(94); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(96); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(98); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(100); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(102); }

  public static Offset<OnorbitDetails_Full> CreateOnorbitDetails_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset lastObTimeOffset = default(StringOffset),
      double vismag = 0.0,
      double vismagMin = 0.0,
      double vismagMax = 0.0,
      double vismagMean = 0.0,
      double rcs = 0.0,
      double rcsMin = 0.0,
      double rcsMax = 0.0,
      double rcsMean = 0.0,
      double bolDeltaV = 0.0,
      double maxDeltaV = 0.0,
      double deltaVUnc = 0.0,
      double estDeltaVDuration = 0.0,
      int numMission = 0,
      VectorOffset missionTypesOffset = default(VectorOffset),
      StringOffset busTypeOffset = default(StringOffset),
      double geoSlot = 0.0,
      double driftRate = 0.0,
      double dryMass = 0.0,
      double additionalMass = 0.0,
      double launchMassMin = 0.0,
      double launchMass = 0.0,
      double launchMassMax = 0.0,
      double bolFuelMass = 0.0,
      double currentMass = 0.0,
      double totalMassUnc = 0.0,
      double solarArrayArea = 0.0,
      bool maneuverable = false,
      double fuelRemaining = 0.0,
      double crossSection = 0.0,
      double busCrossSection = 0.0,
      double maxRadius = 0.0,
      double colaRadius = 0.0,
      double adeptRadius = 0.0,
      int numDeployable = 0,
      VectorOffset depNamesOffset = default(VectorOffset),
      VectorOffset depEstMassesOffset = default(VectorOffset),
      VectorOffset depMassUncsOffset = default(VectorOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset lastObSourceOffset = default(StringOffset),
      OnorbitDetails_Full_dataMode_Enum dataMode = OnorbitDetails_Full_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(50);
    OnorbitDetails_Full.AddAdeptRadius(builder, adeptRadius);
    OnorbitDetails_Full.AddColaRadius(builder, colaRadius);
    OnorbitDetails_Full.AddMaxRadius(builder, maxRadius);
    OnorbitDetails_Full.AddBusCrossSection(builder, busCrossSection);
    OnorbitDetails_Full.AddCrossSection(builder, crossSection);
    OnorbitDetails_Full.AddFuelRemaining(builder, fuelRemaining);
    OnorbitDetails_Full.AddSolarArrayArea(builder, solarArrayArea);
    OnorbitDetails_Full.AddTotalMassUnc(builder, totalMassUnc);
    OnorbitDetails_Full.AddCurrentMass(builder, currentMass);
    OnorbitDetails_Full.AddBolFuelMass(builder, bolFuelMass);
    OnorbitDetails_Full.AddLaunchMassMax(builder, launchMassMax);
    OnorbitDetails_Full.AddLaunchMass(builder, launchMass);
    OnorbitDetails_Full.AddLaunchMassMin(builder, launchMassMin);
    OnorbitDetails_Full.AddAdditionalMass(builder, additionalMass);
    OnorbitDetails_Full.AddDryMass(builder, dryMass);
    OnorbitDetails_Full.AddDriftRate(builder, driftRate);
    OnorbitDetails_Full.AddGeoSlot(builder, geoSlot);
    OnorbitDetails_Full.AddEstDeltaVDuration(builder, estDeltaVDuration);
    OnorbitDetails_Full.AddDeltaVUnc(builder, deltaVUnc);
    OnorbitDetails_Full.AddMaxDeltaV(builder, maxDeltaV);
    OnorbitDetails_Full.AddBolDeltaV(builder, bolDeltaV);
    OnorbitDetails_Full.AddRcsMean(builder, rcsMean);
    OnorbitDetails_Full.AddRcsMax(builder, rcsMax);
    OnorbitDetails_Full.AddRcsMin(builder, rcsMin);
    OnorbitDetails_Full.AddRcs(builder, rcs);
    OnorbitDetails_Full.AddVismagMean(builder, vismagMean);
    OnorbitDetails_Full.AddVismagMax(builder, vismagMax);
    OnorbitDetails_Full.AddVismagMin(builder, vismagMin);
    OnorbitDetails_Full.AddVismag(builder, vismag);
    OnorbitDetails_Full.AddOrigNetwork(builder, origNetworkOffset);
    OnorbitDetails_Full.AddUpdatedBy(builder, updatedByOffset);
    OnorbitDetails_Full.AddUpdatedAt(builder, updatedAtOffset);
    OnorbitDetails_Full.AddCreatedBy(builder, createdByOffset);
    OnorbitDetails_Full.AddCreatedAt(builder, createdAtOffset);
    OnorbitDetails_Full.AddLastObSource(builder, lastObSourceOffset);
    OnorbitDetails_Full.AddOrigin(builder, originOffset);
    OnorbitDetails_Full.AddSource(builder, sourceOffset);
    OnorbitDetails_Full.AddDepMassUncs(builder, depMassUncsOffset);
    OnorbitDetails_Full.AddDepEstMasses(builder, depEstMassesOffset);
    OnorbitDetails_Full.AddDepNames(builder, depNamesOffset);
    OnorbitDetails_Full.AddNumDeployable(builder, numDeployable);
    OnorbitDetails_Full.AddBusType(builder, busTypeOffset);
    OnorbitDetails_Full.AddMissionTypes(builder, missionTypesOffset);
    OnorbitDetails_Full.AddNumMission(builder, numMission);
    OnorbitDetails_Full.AddLastObTime(builder, lastObTimeOffset);
    OnorbitDetails_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    OnorbitDetails_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    OnorbitDetails_Full.AddId(builder, idOffset);
    OnorbitDetails_Full.AddDataMode(builder, dataMode);
    OnorbitDetails_Full.AddManeuverable(builder, maneuverable);
    return OnorbitDetails_Full.EndOnorbitDetails_Full(builder);
  }

  public static void StartOnorbitDetails_Full(FlatBufferBuilder builder) { builder.StartTable(50); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(1, idOnOrbitOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddLastObTime(FlatBufferBuilder builder, StringOffset lastObTimeOffset) { builder.AddOffset(3, lastObTimeOffset.Value, 0); }
  public static void AddVismag(FlatBufferBuilder builder, double vismag) { builder.AddDouble(4, vismag, 0.0); }
  public static void AddVismagMin(FlatBufferBuilder builder, double vismagMin) { builder.AddDouble(5, vismagMin, 0.0); }
  public static void AddVismagMax(FlatBufferBuilder builder, double vismagMax) { builder.AddDouble(6, vismagMax, 0.0); }
  public static void AddVismagMean(FlatBufferBuilder builder, double vismagMean) { builder.AddDouble(7, vismagMean, 0.0); }
  public static void AddRcs(FlatBufferBuilder builder, double rcs) { builder.AddDouble(8, rcs, 0.0); }
  public static void AddRcsMin(FlatBufferBuilder builder, double rcsMin) { builder.AddDouble(9, rcsMin, 0.0); }
  public static void AddRcsMax(FlatBufferBuilder builder, double rcsMax) { builder.AddDouble(10, rcsMax, 0.0); }
  public static void AddRcsMean(FlatBufferBuilder builder, double rcsMean) { builder.AddDouble(11, rcsMean, 0.0); }
  public static void AddBolDeltaV(FlatBufferBuilder builder, double bolDeltaV) { builder.AddDouble(12, bolDeltaV, 0.0); }
  public static void AddMaxDeltaV(FlatBufferBuilder builder, double maxDeltaV) { builder.AddDouble(13, maxDeltaV, 0.0); }
  public static void AddDeltaVUnc(FlatBufferBuilder builder, double deltaVUnc) { builder.AddDouble(14, deltaVUnc, 0.0); }
  public static void AddEstDeltaVDuration(FlatBufferBuilder builder, double estDeltaVDuration) { builder.AddDouble(15, estDeltaVDuration, 0.0); }
  public static void AddNumMission(FlatBufferBuilder builder, int numMission) { builder.AddInt(16, numMission, 0); }
  public static void AddMissionTypes(FlatBufferBuilder builder, VectorOffset missionTypesOffset) { builder.AddOffset(17, missionTypesOffset.Value, 0); }
  public static VectorOffset CreateMissionTypesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMissionTypesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissionTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissionTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBusType(FlatBufferBuilder builder, StringOffset busTypeOffset) { builder.AddOffset(18, busTypeOffset.Value, 0); }
  public static void AddGeoSlot(FlatBufferBuilder builder, double geoSlot) { builder.AddDouble(19, geoSlot, 0.0); }
  public static void AddDriftRate(FlatBufferBuilder builder, double driftRate) { builder.AddDouble(20, driftRate, 0.0); }
  public static void AddDryMass(FlatBufferBuilder builder, double dryMass) { builder.AddDouble(21, dryMass, 0.0); }
  public static void AddAdditionalMass(FlatBufferBuilder builder, double additionalMass) { builder.AddDouble(22, additionalMass, 0.0); }
  public static void AddLaunchMassMin(FlatBufferBuilder builder, double launchMassMin) { builder.AddDouble(23, launchMassMin, 0.0); }
  public static void AddLaunchMass(FlatBufferBuilder builder, double launchMass) { builder.AddDouble(24, launchMass, 0.0); }
  public static void AddLaunchMassMax(FlatBufferBuilder builder, double launchMassMax) { builder.AddDouble(25, launchMassMax, 0.0); }
  public static void AddBolFuelMass(FlatBufferBuilder builder, double bolFuelMass) { builder.AddDouble(26, bolFuelMass, 0.0); }
  public static void AddCurrentMass(FlatBufferBuilder builder, double currentMass) { builder.AddDouble(27, currentMass, 0.0); }
  public static void AddTotalMassUnc(FlatBufferBuilder builder, double totalMassUnc) { builder.AddDouble(28, totalMassUnc, 0.0); }
  public static void AddSolarArrayArea(FlatBufferBuilder builder, double solarArrayArea) { builder.AddDouble(29, solarArrayArea, 0.0); }
  public static void AddManeuverable(FlatBufferBuilder builder, bool maneuverable) { builder.AddBool(30, maneuverable, false); }
  public static void AddFuelRemaining(FlatBufferBuilder builder, double fuelRemaining) { builder.AddDouble(31, fuelRemaining, 0.0); }
  public static void AddCrossSection(FlatBufferBuilder builder, double crossSection) { builder.AddDouble(32, crossSection, 0.0); }
  public static void AddBusCrossSection(FlatBufferBuilder builder, double busCrossSection) { builder.AddDouble(33, busCrossSection, 0.0); }
  public static void AddMaxRadius(FlatBufferBuilder builder, double maxRadius) { builder.AddDouble(34, maxRadius, 0.0); }
  public static void AddColaRadius(FlatBufferBuilder builder, double colaRadius) { builder.AddDouble(35, colaRadius, 0.0); }
  public static void AddAdeptRadius(FlatBufferBuilder builder, double adeptRadius) { builder.AddDouble(36, adeptRadius, 0.0); }
  public static void AddNumDeployable(FlatBufferBuilder builder, int numDeployable) { builder.AddInt(37, numDeployable, 0); }
  public static void AddDepNames(FlatBufferBuilder builder, VectorOffset depNamesOffset) { builder.AddOffset(38, depNamesOffset.Value, 0); }
  public static VectorOffset CreateDepNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDepNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepNamesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepNamesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDepNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDepEstMasses(FlatBufferBuilder builder, VectorOffset depEstMassesOffset) { builder.AddOffset(39, depEstMassesOffset.Value, 0); }
  public static VectorOffset CreateDepEstMassesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDepEstMassesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepEstMassesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepEstMassesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDepEstMassesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDepMassUncs(FlatBufferBuilder builder, VectorOffset depMassUncsOffset) { builder.AddOffset(40, depMassUncsOffset.Value, 0); }
  public static VectorOffset CreateDepMassUncsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDepMassUncsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepMassUncsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepMassUncsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDepMassUncsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(41, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(42, originOffset.Value, 0); }
  public static void AddLastObSource(FlatBufferBuilder builder, StringOffset lastObSourceOffset) { builder.AddOffset(43, lastObSourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OnorbitDetails_Full_dataMode_Enum dataMode) { builder.AddSbyte(44, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(45, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(46, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(47, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(48, updatedByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(49, origNetworkOffset.Value, 0); }
  public static Offset<OnorbitDetails_Full> EndOnorbitDetails_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OnorbitDetails_Full>(o);
  }
  public static void FinishOnorbitDetails_FullBuffer(FlatBufferBuilder builder, Offset<OnorbitDetails_Full> offset) { builder.Finish(offset.Value, "ONOR"); }
  public static void FinishSizePrefixedOnorbitDetails_FullBuffer(FlatBufferBuilder builder, Offset<OnorbitDetails_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ONOR"); }
  public OnorbitDetails_FullT UnPack() {
    var _o = new OnorbitDetails_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OnorbitDetails_FullT _o) {
    _o.Id = this.Id;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.LastObTime = this.LastObTime;
    _o.Vismag = this.Vismag;
    _o.VismagMin = this.VismagMin;
    _o.VismagMax = this.VismagMax;
    _o.VismagMean = this.VismagMean;
    _o.Rcs = this.Rcs;
    _o.RcsMin = this.RcsMin;
    _o.RcsMax = this.RcsMax;
    _o.RcsMean = this.RcsMean;
    _o.BolDeltaV = this.BolDeltaV;
    _o.MaxDeltaV = this.MaxDeltaV;
    _o.DeltaVUnc = this.DeltaVUnc;
    _o.EstDeltaVDuration = this.EstDeltaVDuration;
    _o.NumMission = this.NumMission;
    _o.MissionTypes = new List<string>();
    for (var _j = 0; _j < this.MissionTypesLength; ++_j) {_o.MissionTypes.Add(this.MissionTypes(_j));}
    _o.BusType = this.BusType;
    _o.GeoSlot = this.GeoSlot;
    _o.DriftRate = this.DriftRate;
    _o.DryMass = this.DryMass;
    _o.AdditionalMass = this.AdditionalMass;
    _o.LaunchMassMin = this.LaunchMassMin;
    _o.LaunchMass = this.LaunchMass;
    _o.LaunchMassMax = this.LaunchMassMax;
    _o.BolFuelMass = this.BolFuelMass;
    _o.CurrentMass = this.CurrentMass;
    _o.TotalMassUnc = this.TotalMassUnc;
    _o.SolarArrayArea = this.SolarArrayArea;
    _o.Maneuverable = this.Maneuverable;
    _o.FuelRemaining = this.FuelRemaining;
    _o.CrossSection = this.CrossSection;
    _o.BusCrossSection = this.BusCrossSection;
    _o.MaxRadius = this.MaxRadius;
    _o.ColaRadius = this.ColaRadius;
    _o.AdeptRadius = this.AdeptRadius;
    _o.NumDeployable = this.NumDeployable;
    _o.DepNames = new List<string>();
    for (var _j = 0; _j < this.DepNamesLength; ++_j) {_o.DepNames.Add(this.DepNames(_j));}
    _o.DepEstMasses = new List<string>();
    for (var _j = 0; _j < this.DepEstMassesLength; ++_j) {_o.DepEstMasses.Add(this.DepEstMasses(_j));}
    _o.DepMassUncs = new List<string>();
    for (var _j = 0; _j < this.DepMassUncsLength; ++_j) {_o.DepMassUncs.Add(this.DepMassUncs(_j));}
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.LastObSource = this.LastObSource;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<OnorbitDetails_Full> Pack(FlatBufferBuilder builder, OnorbitDetails_FullT _o) {
    if (_o == null) return default(Offset<OnorbitDetails_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _lastObTime = _o.LastObTime == null ? default(StringOffset) : builder.CreateString(_o.LastObTime);
    var _missionTypes = default(VectorOffset);
    if (_o.MissionTypes != null) {
      var __missionTypes = new StringOffset[_o.MissionTypes.Count];
      for (var _j = 0; _j < __missionTypes.Length; ++_j) { __missionTypes[_j] = builder.CreateString(_o.MissionTypes[_j]); }
      _missionTypes = CreateMissionTypesVector(builder, __missionTypes);
    }
    var _busType = _o.BusType == null ? default(StringOffset) : builder.CreateString(_o.BusType);
    var _depNames = default(VectorOffset);
    if (_o.DepNames != null) {
      var __depNames = new StringOffset[_o.DepNames.Count];
      for (var _j = 0; _j < __depNames.Length; ++_j) { __depNames[_j] = builder.CreateString(_o.DepNames[_j]); }
      _depNames = CreateDepNamesVector(builder, __depNames);
    }
    var _depEstMasses = default(VectorOffset);
    if (_o.DepEstMasses != null) {
      var __depEstMasses = new StringOffset[_o.DepEstMasses.Count];
      for (var _j = 0; _j < __depEstMasses.Length; ++_j) { __depEstMasses[_j] = builder.CreateString(_o.DepEstMasses[_j]); }
      _depEstMasses = CreateDepEstMassesVector(builder, __depEstMasses);
    }
    var _depMassUncs = default(VectorOffset);
    if (_o.DepMassUncs != null) {
      var __depMassUncs = new StringOffset[_o.DepMassUncs.Count];
      for (var _j = 0; _j < __depMassUncs.Length; ++_j) { __depMassUncs[_j] = builder.CreateString(_o.DepMassUncs[_j]); }
      _depMassUncs = CreateDepMassUncsVector(builder, __depMassUncs);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _lastObSource = _o.LastObSource == null ? default(StringOffset) : builder.CreateString(_o.LastObSource);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnorbitDetails_Full(
      builder,
      _id,
      _idOnOrbit,
      _classificationMarking,
      _lastObTime,
      _o.Vismag,
      _o.VismagMin,
      _o.VismagMax,
      _o.VismagMean,
      _o.Rcs,
      _o.RcsMin,
      _o.RcsMax,
      _o.RcsMean,
      _o.BolDeltaV,
      _o.MaxDeltaV,
      _o.DeltaVUnc,
      _o.EstDeltaVDuration,
      _o.NumMission,
      _missionTypes,
      _busType,
      _o.GeoSlot,
      _o.DriftRate,
      _o.DryMass,
      _o.AdditionalMass,
      _o.LaunchMassMin,
      _o.LaunchMass,
      _o.LaunchMassMax,
      _o.BolFuelMass,
      _o.CurrentMass,
      _o.TotalMassUnc,
      _o.SolarArrayArea,
      _o.Maneuverable,
      _o.FuelRemaining,
      _o.CrossSection,
      _o.BusCrossSection,
      _o.MaxRadius,
      _o.ColaRadius,
      _o.AdeptRadius,
      _o.NumDeployable,
      _depNames,
      _depEstMasses,
      _depMassUncs,
      _source,
      _origin,
      _lastObSource,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _origNetwork);
  }
}

public class OnorbitDetails_FullT
{
  public string Id { get; set; }
  public string IdOnOrbit { get; set; }
  public string ClassificationMarking { get; set; }
  public string LastObTime { get; set; }
  public double Vismag { get; set; }
  public double VismagMin { get; set; }
  public double VismagMax { get; set; }
  public double VismagMean { get; set; }
  public double Rcs { get; set; }
  public double RcsMin { get; set; }
  public double RcsMax { get; set; }
  public double RcsMean { get; set; }
  public double BolDeltaV { get; set; }
  public double MaxDeltaV { get; set; }
  public double DeltaVUnc { get; set; }
  public double EstDeltaVDuration { get; set; }
  public int NumMission { get; set; }
  public List<string> MissionTypes { get; set; }
  public string BusType { get; set; }
  public double GeoSlot { get; set; }
  public double DriftRate { get; set; }
  public double DryMass { get; set; }
  public double AdditionalMass { get; set; }
  public double LaunchMassMin { get; set; }
  public double LaunchMass { get; set; }
  public double LaunchMassMax { get; set; }
  public double BolFuelMass { get; set; }
  public double CurrentMass { get; set; }
  public double TotalMassUnc { get; set; }
  public double SolarArrayArea { get; set; }
  public bool Maneuverable { get; set; }
  public double FuelRemaining { get; set; }
  public double CrossSection { get; set; }
  public double BusCrossSection { get; set; }
  public double MaxRadius { get; set; }
  public double ColaRadius { get; set; }
  public double AdeptRadius { get; set; }
  public int NumDeployable { get; set; }
  public List<string> DepNames { get; set; }
  public List<string> DepEstMasses { get; set; }
  public List<string> DepMassUncs { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string LastObSource { get; set; }
  public OnorbitDetails_Full_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public OnorbitDetails_FullT() {
    this.Id = null;
    this.IdOnOrbit = null;
    this.ClassificationMarking = null;
    this.LastObTime = null;
    this.Vismag = 0.0;
    this.VismagMin = 0.0;
    this.VismagMax = 0.0;
    this.VismagMean = 0.0;
    this.Rcs = 0.0;
    this.RcsMin = 0.0;
    this.RcsMax = 0.0;
    this.RcsMean = 0.0;
    this.BolDeltaV = 0.0;
    this.MaxDeltaV = 0.0;
    this.DeltaVUnc = 0.0;
    this.EstDeltaVDuration = 0.0;
    this.NumMission = 0;
    this.MissionTypes = null;
    this.BusType = null;
    this.GeoSlot = 0.0;
    this.DriftRate = 0.0;
    this.DryMass = 0.0;
    this.AdditionalMass = 0.0;
    this.LaunchMassMin = 0.0;
    this.LaunchMass = 0.0;
    this.LaunchMassMax = 0.0;
    this.BolFuelMass = 0.0;
    this.CurrentMass = 0.0;
    this.TotalMassUnc = 0.0;
    this.SolarArrayArea = 0.0;
    this.Maneuverable = false;
    this.FuelRemaining = 0.0;
    this.CrossSection = 0.0;
    this.BusCrossSection = 0.0;
    this.MaxRadius = 0.0;
    this.ColaRadius = 0.0;
    this.AdeptRadius = 0.0;
    this.NumDeployable = 0;
    this.DepNames = null;
    this.DepEstMasses = null;
    this.DepMassUncs = null;
    this.Source = null;
    this.Origin = null;
    this.LastObSource = null;
    this.DataMode = OnorbitDetails_Full_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.OrigNetwork = null;
  }
  public static OnorbitDetails_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return OnorbitDetails_Full.GetRootAsOnorbitDetails_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OnorbitDetails_Full.FinishOnorbitDetails_FullBuffer(fbb, OnorbitDetails_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OnorbitDetails_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*LastObTime*/, false)
      && verifier.VerifyField(tablePos, 12 /*Vismag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*VismagMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*VismagMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*VismagMean*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Rcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*RcsMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*RcsMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*RcsMean*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*BolDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*MaxDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*DeltaVUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*EstDeltaVDuration*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*NumMission*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*MissionTypes*/, false)
      && verifier.VerifyString(tablePos, 40 /*BusType*/, false)
      && verifier.VerifyField(tablePos, 42 /*GeoSlot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DriftRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*DryMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*AdditionalMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*LaunchMassMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*LaunchMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*LaunchMassMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*BolFuelMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*CurrentMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*TotalMassUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*SolarArrayArea*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*Maneuverable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 66 /*FuelRemaining*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*CrossSection*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*BusCrossSection*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*MaxRadius*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*ColaRadius*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*AdeptRadius*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*NumDeployable*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 80 /*DepNames*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 82 /*DepEstMasses*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 84 /*DepMassUncs*/, false)
      && verifier.VerifyString(tablePos, 86 /*Source*/, false)
      && verifier.VerifyString(tablePos, 88 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 90 /*LastObSource*/, false)
      && verifier.VerifyField(tablePos, 92 /*DataMode*/, 1 /*OnorbitDetails_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 94 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 96 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 98 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 100 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 102 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
