// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
public struct AirEvent_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirEvent_Ingest GetRootAsAirEvent_Ingest(ByteBuffer _bb) { return GetRootAsAirEvent_Ingest(_bb, new AirEvent_Ingest()); }
  public static AirEvent_Ingest GetRootAsAirEvent_Ingest(ByteBuffer _bb, AirEvent_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirEvent_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRE"); }
  public static bool VerifyAirEvent_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRE", false, AirEvent_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirEvent_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
  /// Example: /// Example: FUEL TRANSFER
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string Type { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The UDL unique identifier of the sortie associated with this air event.
  /// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSortie { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSortieBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSortieBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSortieArray() { return __p.__vector_as_array<byte>(10); }
  /// The UDL unique identifier of the mission associated with this air event.
  /// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdMission { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdMissionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdMissionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdMissionArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: MB014313032022407540
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalAirEventId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalAirEventIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetExternalAirEventIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetExternalAirEventIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Identifies the Itinerary point of a sortie where an air event occurs.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  public int LegNum { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
  /// Example: /// Example: 901EW
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Location { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLocationBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLocationArray() { return __p.__vector_as_array<byte>(18); }
  /// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ArrPurpose { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrPurposeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetArrPurposeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetArrPurposeArray() { return __p.__vector_as_array<byte>(20); }
  /// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string PlannedArrTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedArrTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPlannedArrTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPlannedArrTimeArray() { return __p.__vector_as_array<byte>(22); }
  /// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:59:48.123Z
  /// Constraints: No constraints specified.
  public string EstArrTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstArrTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetEstArrTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetEstArrTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:00:03.123Z
  /// Constraints: No constraints specified.
  public string ActualArrTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualArrTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetActualArrTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetActualArrTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: Q
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DepPurpose { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepPurposeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetDepPurposeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetDepPurposeArray() { return __p.__vector_as_array<byte>(28); }
  /// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:15:43.123Z
  /// Constraints: No constraints specified.
  public string PlannedDepTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedDepTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetPlannedDepTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetPlannedDepTimeArray() { return __p.__vector_as_array<byte>(30); }
  /// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:19:48.123Z
  /// Constraints: No constraints specified.
  public string EstDepTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstDepTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEstDepTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEstDepTimeArray() { return __p.__vector_as_array<byte>(32); }
  /// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:17:03.123Z
  /// Constraints: No constraints specified.
  public string ActualDepTime { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualDepTimeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetActualDepTimeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetActualDepTimeArray() { return __p.__vector_as_array<byte>(34); }
  /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalARTrackId { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalARTrackIdBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetExternalARTrackIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetExternalARTrackIdArray() { return __p.__vector_as_array<byte>(36); }
  /// Identifier of the air refueling track, if applicable.
  /// Example: /// Example: CH61
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string ArTrackId { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArTrackIdBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetArTrackIdBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetArTrackIdArray() { return __p.__vector_as_array<byte>(38); }
  /// Name of the air refueling track, if applicable.
  /// Example: /// Example: CH61 POST
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string ArTrackName { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArTrackNameBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetArTrackNameBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetArTrackNameArray() { return __p.__vector_as_array<byte>(40); }
  /// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string Rzct { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRzctBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetRzctBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetRzctArray() { return __p.__vector_as_array<byte>(42); }
  /// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T15:11:27.123Z
  /// Constraints: No constraints specified.
  public string Arct { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArctBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetArctBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetArctArray() { return __p.__vector_as_array<byte>(44); }
  /// Altitude of this air event, in feet.
  /// Example: /// Example: 28000.1
  /// Constraints: No constraints specified.
  public double BaseAlt { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Priority of this air event.
  /// Example: /// Example: 1A2
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Priority { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriorityBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPriorityBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPriorityArray() { return __p.__vector_as_array<byte>(48); }
  /// Length of time the receiver unit has requested for an air event, in hours.
  /// Example: /// Example: 1.5
  /// Constraints: No constraints specified.
  public double TrackTime { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string StatusCode { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusCodeBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetStatusCodeBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetStatusCodeArray() { return __p.__vector_as_array<byte>(52); }
  /// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
  /// Example: /// Example: AN
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string RzPoint { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRzPointBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetRzPointBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetRzPointArray() { return __p.__vector_as_array<byte>(54); }
  /// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
  /// Example: /// Example: PP
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string RzType { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRzTypeBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetRzTypeBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetRzTypeArray() { return __p.__vector_as_array<byte>(56); }
  /// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string ArEventType { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArEventTypeBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetArEventTypeBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetArEventTypeArray() { return __p.__vector_as_array<byte>(58); }
  /// The number of tankers requested for an air refueling event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumTankers { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool RevTrack { get { int o = __p.__offset(62); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool ShortTrack { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this air refueling event has been cancelled.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Cancelled { get { int o = __p.__offset(66); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Collection of tanker aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Tankers(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TankersLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of receiver aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Receivers(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReceiversLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of remarks associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Remarks(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemarksLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(74); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(76); }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(78); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(80); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(82); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(84); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(86); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(88); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirEvent_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(90); return o != 0 ? (AirEvent_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirEvent_Ingest_dataMode_Enum.REAL; } }

  public static Offset<AirEvent_Ingest> CreateAirEvent_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset idSortieOffset = default(StringOffset),
      StringOffset idMissionOffset = default(StringOffset),
      StringOffset externalAirEventIdOffset = default(StringOffset),
      int legNum = 0,
      StringOffset locationOffset = default(StringOffset),
      StringOffset arrPurposeOffset = default(StringOffset),
      StringOffset plannedArrTimeOffset = default(StringOffset),
      StringOffset estArrTimeOffset = default(StringOffset),
      StringOffset actualArrTimeOffset = default(StringOffset),
      StringOffset depPurposeOffset = default(StringOffset),
      StringOffset plannedDepTimeOffset = default(StringOffset),
      StringOffset estDepTimeOffset = default(StringOffset),
      StringOffset actualDepTimeOffset = default(StringOffset),
      StringOffset externalARTrackIdOffset = default(StringOffset),
      StringOffset arTrackIdOffset = default(StringOffset),
      StringOffset arTrackNameOffset = default(StringOffset),
      StringOffset rzctOffset = default(StringOffset),
      StringOffset arctOffset = default(StringOffset),
      double baseAlt = 0.0,
      StringOffset priorityOffset = default(StringOffset),
      double trackTime = 0.0,
      StringOffset statusCodeOffset = default(StringOffset),
      StringOffset rzPointOffset = default(StringOffset),
      StringOffset rzTypeOffset = default(StringOffset),
      StringOffset arEventTypeOffset = default(StringOffset),
      int numTankers = 0,
      bool revTrack = false,
      bool shortTrack = false,
      bool cancelled = false,
      VectorOffset tankersOffset = default(VectorOffset),
      VectorOffset receiversOffset = default(VectorOffset),
      VectorOffset remarksOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirEvent_Ingest_dataMode_Enum dataMode = AirEvent_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(44);
    AirEvent_Ingest.AddTrackTime(builder, trackTime);
    AirEvent_Ingest.AddBaseAlt(builder, baseAlt);
    AirEvent_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    AirEvent_Ingest.AddOrigin(builder, originOffset);
    AirEvent_Ingest.AddSource(builder, sourceOffset);
    AirEvent_Ingest.AddSourceDL(builder, sourceDLOffset);
    AirEvent_Ingest.AddUpdatedBy(builder, updatedByOffset);
    AirEvent_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    AirEvent_Ingest.AddCreatedBy(builder, createdByOffset);
    AirEvent_Ingest.AddCreatedAt(builder, createdAtOffset);
    AirEvent_Ingest.AddRemarks(builder, remarksOffset);
    AirEvent_Ingest.AddReceivers(builder, receiversOffset);
    AirEvent_Ingest.AddTankers(builder, tankersOffset);
    AirEvent_Ingest.AddNumTankers(builder, numTankers);
    AirEvent_Ingest.AddArEventType(builder, arEventTypeOffset);
    AirEvent_Ingest.AddRzType(builder, rzTypeOffset);
    AirEvent_Ingest.AddRzPoint(builder, rzPointOffset);
    AirEvent_Ingest.AddStatusCode(builder, statusCodeOffset);
    AirEvent_Ingest.AddPriority(builder, priorityOffset);
    AirEvent_Ingest.AddArct(builder, arctOffset);
    AirEvent_Ingest.AddRzct(builder, rzctOffset);
    AirEvent_Ingest.AddArTrackName(builder, arTrackNameOffset);
    AirEvent_Ingest.AddArTrackId(builder, arTrackIdOffset);
    AirEvent_Ingest.AddExternalARTrackId(builder, externalARTrackIdOffset);
    AirEvent_Ingest.AddActualDepTime(builder, actualDepTimeOffset);
    AirEvent_Ingest.AddEstDepTime(builder, estDepTimeOffset);
    AirEvent_Ingest.AddPlannedDepTime(builder, plannedDepTimeOffset);
    AirEvent_Ingest.AddDepPurpose(builder, depPurposeOffset);
    AirEvent_Ingest.AddActualArrTime(builder, actualArrTimeOffset);
    AirEvent_Ingest.AddEstArrTime(builder, estArrTimeOffset);
    AirEvent_Ingest.AddPlannedArrTime(builder, plannedArrTimeOffset);
    AirEvent_Ingest.AddArrPurpose(builder, arrPurposeOffset);
    AirEvent_Ingest.AddLocation(builder, locationOffset);
    AirEvent_Ingest.AddLegNum(builder, legNum);
    AirEvent_Ingest.AddExternalAirEventId(builder, externalAirEventIdOffset);
    AirEvent_Ingest.AddIdMission(builder, idMissionOffset);
    AirEvent_Ingest.AddIdSortie(builder, idSortieOffset);
    AirEvent_Ingest.AddType(builder, typeOffset);
    AirEvent_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    AirEvent_Ingest.AddId(builder, idOffset);
    AirEvent_Ingest.AddDataMode(builder, dataMode);
    AirEvent_Ingest.AddCancelled(builder, cancelled);
    AirEvent_Ingest.AddShortTrack(builder, shortTrack);
    AirEvent_Ingest.AddRevTrack(builder, revTrack);
    return AirEvent_Ingest.EndAirEvent_Ingest(builder);
  }

  public static void StartAirEvent_Ingest(FlatBufferBuilder builder) { builder.StartTable(44); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static void AddIdSortie(FlatBufferBuilder builder, StringOffset idSortieOffset) { builder.AddOffset(3, idSortieOffset.Value, 0); }
  public static void AddIdMission(FlatBufferBuilder builder, StringOffset idMissionOffset) { builder.AddOffset(4, idMissionOffset.Value, 0); }
  public static void AddExternalAirEventId(FlatBufferBuilder builder, StringOffset externalAirEventIdOffset) { builder.AddOffset(5, externalAirEventIdOffset.Value, 0); }
  public static void AddLegNum(FlatBufferBuilder builder, int legNum) { builder.AddInt(6, legNum, 0); }
  public static void AddLocation(FlatBufferBuilder builder, StringOffset locationOffset) { builder.AddOffset(7, locationOffset.Value, 0); }
  public static void AddArrPurpose(FlatBufferBuilder builder, StringOffset arrPurposeOffset) { builder.AddOffset(8, arrPurposeOffset.Value, 0); }
  public static void AddPlannedArrTime(FlatBufferBuilder builder, StringOffset plannedArrTimeOffset) { builder.AddOffset(9, plannedArrTimeOffset.Value, 0); }
  public static void AddEstArrTime(FlatBufferBuilder builder, StringOffset estArrTimeOffset) { builder.AddOffset(10, estArrTimeOffset.Value, 0); }
  public static void AddActualArrTime(FlatBufferBuilder builder, StringOffset actualArrTimeOffset) { builder.AddOffset(11, actualArrTimeOffset.Value, 0); }
  public static void AddDepPurpose(FlatBufferBuilder builder, StringOffset depPurposeOffset) { builder.AddOffset(12, depPurposeOffset.Value, 0); }
  public static void AddPlannedDepTime(FlatBufferBuilder builder, StringOffset plannedDepTimeOffset) { builder.AddOffset(13, plannedDepTimeOffset.Value, 0); }
  public static void AddEstDepTime(FlatBufferBuilder builder, StringOffset estDepTimeOffset) { builder.AddOffset(14, estDepTimeOffset.Value, 0); }
  public static void AddActualDepTime(FlatBufferBuilder builder, StringOffset actualDepTimeOffset) { builder.AddOffset(15, actualDepTimeOffset.Value, 0); }
  public static void AddExternalARTrackId(FlatBufferBuilder builder, StringOffset externalARTrackIdOffset) { builder.AddOffset(16, externalARTrackIdOffset.Value, 0); }
  public static void AddArTrackId(FlatBufferBuilder builder, StringOffset arTrackIdOffset) { builder.AddOffset(17, arTrackIdOffset.Value, 0); }
  public static void AddArTrackName(FlatBufferBuilder builder, StringOffset arTrackNameOffset) { builder.AddOffset(18, arTrackNameOffset.Value, 0); }
  public static void AddRzct(FlatBufferBuilder builder, StringOffset rzctOffset) { builder.AddOffset(19, rzctOffset.Value, 0); }
  public static void AddArct(FlatBufferBuilder builder, StringOffset arctOffset) { builder.AddOffset(20, arctOffset.Value, 0); }
  public static void AddBaseAlt(FlatBufferBuilder builder, double baseAlt) { builder.AddDouble(21, baseAlt, 0.0); }
  public static void AddPriority(FlatBufferBuilder builder, StringOffset priorityOffset) { builder.AddOffset(22, priorityOffset.Value, 0); }
  public static void AddTrackTime(FlatBufferBuilder builder, double trackTime) { builder.AddDouble(23, trackTime, 0.0); }
  public static void AddStatusCode(FlatBufferBuilder builder, StringOffset statusCodeOffset) { builder.AddOffset(24, statusCodeOffset.Value, 0); }
  public static void AddRzPoint(FlatBufferBuilder builder, StringOffset rzPointOffset) { builder.AddOffset(25, rzPointOffset.Value, 0); }
  public static void AddRzType(FlatBufferBuilder builder, StringOffset rzTypeOffset) { builder.AddOffset(26, rzTypeOffset.Value, 0); }
  public static void AddArEventType(FlatBufferBuilder builder, StringOffset arEventTypeOffset) { builder.AddOffset(27, arEventTypeOffset.Value, 0); }
  public static void AddNumTankers(FlatBufferBuilder builder, int numTankers) { builder.AddInt(28, numTankers, 0); }
  public static void AddRevTrack(FlatBufferBuilder builder, bool revTrack) { builder.AddBool(29, revTrack, false); }
  public static void AddShortTrack(FlatBufferBuilder builder, bool shortTrack) { builder.AddBool(30, shortTrack, false); }
  public static void AddCancelled(FlatBufferBuilder builder, bool cancelled) { builder.AddBool(31, cancelled, false); }
  public static void AddTankers(FlatBufferBuilder builder, VectorOffset tankersOffset) { builder.AddOffset(32, tankersOffset.Value, 0); }
  public static VectorOffset CreateTankersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTankersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTankersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTankersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTankersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReceivers(FlatBufferBuilder builder, VectorOffset receiversOffset) { builder.AddOffset(33, receiversOffset.Value, 0); }
  public static VectorOffset CreateReceiversVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReceiversVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReceiversVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReceiversVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReceiversVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemarks(FlatBufferBuilder builder, VectorOffset remarksOffset) { builder.AddOffset(34, remarksOffset.Value, 0); }
  public static VectorOffset CreateRemarksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(35, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(36, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(37, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(38, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(39, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(40, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(41, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(42, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirEvent_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(43, (sbyte)dataMode, 0); }
  public static Offset<AirEvent_Ingest> EndAirEvent_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirEvent_Ingest>(o);
  }
  public static void FinishAirEvent_IngestBuffer(FlatBufferBuilder builder, Offset<AirEvent_Ingest> offset) { builder.Finish(offset.Value, "AIRE"); }
  public static void FinishSizePrefixedAirEvent_IngestBuffer(FlatBufferBuilder builder, Offset<AirEvent_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "AIRE"); }
  public AirEvent_IngestT UnPack() {
    var _o = new AirEvent_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirEvent_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.IdSortie = this.IdSortie;
    _o.IdMission = this.IdMission;
    _o.ExternalAirEventId = this.ExternalAirEventId;
    _o.LegNum = this.LegNum;
    _o.Location = this.Location;
    _o.ArrPurpose = this.ArrPurpose;
    _o.PlannedArrTime = this.PlannedArrTime;
    _o.EstArrTime = this.EstArrTime;
    _o.ActualArrTime = this.ActualArrTime;
    _o.DepPurpose = this.DepPurpose;
    _o.PlannedDepTime = this.PlannedDepTime;
    _o.EstDepTime = this.EstDepTime;
    _o.ActualDepTime = this.ActualDepTime;
    _o.ExternalARTrackId = this.ExternalARTrackId;
    _o.ArTrackId = this.ArTrackId;
    _o.ArTrackName = this.ArTrackName;
    _o.Rzct = this.Rzct;
    _o.Arct = this.Arct;
    _o.BaseAlt = this.BaseAlt;
    _o.Priority = this.Priority;
    _o.TrackTime = this.TrackTime;
    _o.StatusCode = this.StatusCode;
    _o.RzPoint = this.RzPoint;
    _o.RzType = this.RzType;
    _o.ArEventType = this.ArEventType;
    _o.NumTankers = this.NumTankers;
    _o.RevTrack = this.RevTrack;
    _o.ShortTrack = this.ShortTrack;
    _o.Cancelled = this.Cancelled;
    _o.Tankers = new List<string>();
    for (var _j = 0; _j < this.TankersLength; ++_j) {_o.Tankers.Add(this.Tankers(_j));}
    _o.Receivers = new List<string>();
    for (var _j = 0; _j < this.ReceiversLength; ++_j) {_o.Receivers.Add(this.Receivers(_j));}
    _o.Remarks = new List<string>();
    for (var _j = 0; _j < this.RemarksLength; ++_j) {_o.Remarks.Add(this.Remarks(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirEvent_Ingest> Pack(FlatBufferBuilder builder, AirEvent_IngestT _o) {
    if (_o == null) return default(Offset<AirEvent_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _idSortie = _o.IdSortie == null ? default(StringOffset) : builder.CreateString(_o.IdSortie);
    var _idMission = _o.IdMission == null ? default(StringOffset) : builder.CreateString(_o.IdMission);
    var _externalAirEventId = _o.ExternalAirEventId == null ? default(StringOffset) : builder.CreateString(_o.ExternalAirEventId);
    var _location = _o.Location == null ? default(StringOffset) : builder.CreateString(_o.Location);
    var _arrPurpose = _o.ArrPurpose == null ? default(StringOffset) : builder.CreateString(_o.ArrPurpose);
    var _plannedArrTime = _o.PlannedArrTime == null ? default(StringOffset) : builder.CreateString(_o.PlannedArrTime);
    var _estArrTime = _o.EstArrTime == null ? default(StringOffset) : builder.CreateString(_o.EstArrTime);
    var _actualArrTime = _o.ActualArrTime == null ? default(StringOffset) : builder.CreateString(_o.ActualArrTime);
    var _depPurpose = _o.DepPurpose == null ? default(StringOffset) : builder.CreateString(_o.DepPurpose);
    var _plannedDepTime = _o.PlannedDepTime == null ? default(StringOffset) : builder.CreateString(_o.PlannedDepTime);
    var _estDepTime = _o.EstDepTime == null ? default(StringOffset) : builder.CreateString(_o.EstDepTime);
    var _actualDepTime = _o.ActualDepTime == null ? default(StringOffset) : builder.CreateString(_o.ActualDepTime);
    var _externalARTrackId = _o.ExternalARTrackId == null ? default(StringOffset) : builder.CreateString(_o.ExternalARTrackId);
    var _arTrackId = _o.ArTrackId == null ? default(StringOffset) : builder.CreateString(_o.ArTrackId);
    var _arTrackName = _o.ArTrackName == null ? default(StringOffset) : builder.CreateString(_o.ArTrackName);
    var _rzct = _o.Rzct == null ? default(StringOffset) : builder.CreateString(_o.Rzct);
    var _arct = _o.Arct == null ? default(StringOffset) : builder.CreateString(_o.Arct);
    var _priority = _o.Priority == null ? default(StringOffset) : builder.CreateString(_o.Priority);
    var _statusCode = _o.StatusCode == null ? default(StringOffset) : builder.CreateString(_o.StatusCode);
    var _rzPoint = _o.RzPoint == null ? default(StringOffset) : builder.CreateString(_o.RzPoint);
    var _rzType = _o.RzType == null ? default(StringOffset) : builder.CreateString(_o.RzType);
    var _arEventType = _o.ArEventType == null ? default(StringOffset) : builder.CreateString(_o.ArEventType);
    var _tankers = default(VectorOffset);
    if (_o.Tankers != null) {
      var __tankers = new StringOffset[_o.Tankers.Count];
      for (var _j = 0; _j < __tankers.Length; ++_j) { __tankers[_j] = builder.CreateString(_o.Tankers[_j]); }
      _tankers = CreateTankersVector(builder, __tankers);
    }
    var _receivers = default(VectorOffset);
    if (_o.Receivers != null) {
      var __receivers = new StringOffset[_o.Receivers.Count];
      for (var _j = 0; _j < __receivers.Length; ++_j) { __receivers[_j] = builder.CreateString(_o.Receivers[_j]); }
      _receivers = CreateReceiversVector(builder, __receivers);
    }
    var _remarks = default(VectorOffset);
    if (_o.Remarks != null) {
      var __remarks = new StringOffset[_o.Remarks.Count];
      for (var _j = 0; _j < __remarks.Length; ++_j) { __remarks[_j] = builder.CreateString(_o.Remarks[_j]); }
      _remarks = CreateRemarksVector(builder, __remarks);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirEvent_Ingest(
      builder,
      _id,
      _classificationMarking,
      _type,
      _idSortie,
      _idMission,
      _externalAirEventId,
      _o.LegNum,
      _location,
      _arrPurpose,
      _plannedArrTime,
      _estArrTime,
      _actualArrTime,
      _depPurpose,
      _plannedDepTime,
      _estDepTime,
      _actualDepTime,
      _externalARTrackId,
      _arTrackId,
      _arTrackName,
      _rzct,
      _arct,
      _o.BaseAlt,
      _priority,
      _o.TrackTime,
      _statusCode,
      _rzPoint,
      _rzType,
      _arEventType,
      _o.NumTankers,
      _o.RevTrack,
      _o.ShortTrack,
      _o.Cancelled,
      _tankers,
      _receivers,
      _remarks,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirEvent_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string IdSortie { get; set; }
  public string IdMission { get; set; }
  public string ExternalAirEventId { get; set; }
  public int LegNum { get; set; }
  public string Location { get; set; }
  public string ArrPurpose { get; set; }
  public string PlannedArrTime { get; set; }
  public string EstArrTime { get; set; }
  public string ActualArrTime { get; set; }
  public string DepPurpose { get; set; }
  public string PlannedDepTime { get; set; }
  public string EstDepTime { get; set; }
  public string ActualDepTime { get; set; }
  public string ExternalARTrackId { get; set; }
  public string ArTrackId { get; set; }
  public string ArTrackName { get; set; }
  public string Rzct { get; set; }
  public string Arct { get; set; }
  public double BaseAlt { get; set; }
  public string Priority { get; set; }
  public double TrackTime { get; set; }
  public string StatusCode { get; set; }
  public string RzPoint { get; set; }
  public string RzType { get; set; }
  public string ArEventType { get; set; }
  public int NumTankers { get; set; }
  public bool RevTrack { get; set; }
  public bool ShortTrack { get; set; }
  public bool Cancelled { get; set; }
  public List<string> Tankers { get; set; }
  public List<string> Receivers { get; set; }
  public List<string> Remarks { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirEvent_Ingest_dataMode_Enum DataMode { get; set; }

  public AirEvent_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.IdSortie = null;
    this.IdMission = null;
    this.ExternalAirEventId = null;
    this.LegNum = 0;
    this.Location = null;
    this.ArrPurpose = null;
    this.PlannedArrTime = null;
    this.EstArrTime = null;
    this.ActualArrTime = null;
    this.DepPurpose = null;
    this.PlannedDepTime = null;
    this.EstDepTime = null;
    this.ActualDepTime = null;
    this.ExternalARTrackId = null;
    this.ArTrackId = null;
    this.ArTrackName = null;
    this.Rzct = null;
    this.Arct = null;
    this.BaseAlt = 0.0;
    this.Priority = null;
    this.TrackTime = 0.0;
    this.StatusCode = null;
    this.RzPoint = null;
    this.RzType = null;
    this.ArEventType = null;
    this.NumTankers = 0;
    this.RevTrack = false;
    this.ShortTrack = false;
    this.Cancelled = false;
    this.Tankers = null;
    this.Receivers = null;
    this.Remarks = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirEvent_Ingest_dataMode_Enum.REAL;
  }
  public static AirEvent_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return AirEvent_Ingest.GetRootAsAirEvent_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirEvent_Ingest.FinishAirEvent_IngestBuffer(fbb, AirEvent_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirEvent_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Type*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSortie*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdMission*/, false)
      && verifier.VerifyString(tablePos, 14 /*ExternalAirEventId*/, false)
      && verifier.VerifyField(tablePos, 16 /*LegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*Location*/, false)
      && verifier.VerifyString(tablePos, 20 /*ArrPurpose*/, false)
      && verifier.VerifyString(tablePos, 22 /*PlannedArrTime*/, false)
      && verifier.VerifyString(tablePos, 24 /*EstArrTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*ActualArrTime*/, false)
      && verifier.VerifyString(tablePos, 28 /*DepPurpose*/, false)
      && verifier.VerifyString(tablePos, 30 /*PlannedDepTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*EstDepTime*/, false)
      && verifier.VerifyString(tablePos, 34 /*ActualDepTime*/, false)
      && verifier.VerifyString(tablePos, 36 /*ExternalARTrackId*/, false)
      && verifier.VerifyString(tablePos, 38 /*ArTrackId*/, false)
      && verifier.VerifyString(tablePos, 40 /*ArTrackName*/, false)
      && verifier.VerifyString(tablePos, 42 /*Rzct*/, false)
      && verifier.VerifyString(tablePos, 44 /*Arct*/, false)
      && verifier.VerifyField(tablePos, 46 /*BaseAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*Priority*/, false)
      && verifier.VerifyField(tablePos, 50 /*TrackTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 52 /*StatusCode*/, false)
      && verifier.VerifyString(tablePos, 54 /*RzPoint*/, false)
      && verifier.VerifyString(tablePos, 56 /*RzType*/, false)
      && verifier.VerifyString(tablePos, 58 /*ArEventType*/, false)
      && verifier.VerifyField(tablePos, 60 /*NumTankers*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*RevTrack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 64 /*ShortTrack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 66 /*Cancelled*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*Tankers*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*Receivers*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*Remarks*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 76 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 78 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 80 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 82 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 84 /*Source*/, false)
      && verifier.VerifyString(tablePos, 86 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 88 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 90 /*DataMode*/, 1 /*AirEvent_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
