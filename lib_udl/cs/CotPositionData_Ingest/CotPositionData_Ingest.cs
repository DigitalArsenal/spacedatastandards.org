// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Schema for the CotPositionData to post.
public struct CotPositionData_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CotPositionData_Ingest GetRootAsCotPositionData_Ingest(ByteBuffer _bb) { return GetRootAsCotPositionData_Ingest(_bb, new CotPositionData_Ingest()); }
  public static CotPositionData_Ingest GetRootAsCotPositionData_Ingest(ByteBuffer _bb, CotPositionData_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool CotPositionData_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "COTP"); }
  public static bool VerifyCotPositionData_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("COTP", false, CotPositionData_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CotPositionData_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Name of the POI target Object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  public string CallSign { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(4); }
  /// Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
  /// Example: /// Example: Team Member
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  public string TeamRole { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamRoleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTeamRoleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTeamRoleArray() { return __p.__vector_as_array<byte>(6); }
  /// Description of the POI target Object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  public string Team { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTeamBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTeamBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTeamArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<CotPositionData_Ingest> CreateCotPositionData_Ingest(FlatBufferBuilder builder,
      StringOffset callSignOffset = default(StringOffset),
      StringOffset teamRoleOffset = default(StringOffset),
      StringOffset teamOffset = default(StringOffset)) {
    builder.StartTable(3);
    CotPositionData_Ingest.AddTeam(builder, teamOffset);
    CotPositionData_Ingest.AddTeamRole(builder, teamRoleOffset);
    CotPositionData_Ingest.AddCallSign(builder, callSignOffset);
    return CotPositionData_Ingest.EndCotPositionData_Ingest(builder);
  }

  public static void StartCotPositionData_Ingest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(0, callSignOffset.Value, 0); }
  public static void AddTeamRole(FlatBufferBuilder builder, StringOffset teamRoleOffset) { builder.AddOffset(1, teamRoleOffset.Value, 0); }
  public static void AddTeam(FlatBufferBuilder builder, StringOffset teamOffset) { builder.AddOffset(2, teamOffset.Value, 0); }
  public static Offset<CotPositionData_Ingest> EndCotPositionData_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CotPositionData_Ingest>(o);
  }
  public static void FinishCotPositionData_IngestBuffer(FlatBufferBuilder builder, Offset<CotPositionData_Ingest> offset) { builder.Finish(offset.Value, "COTP"); }
  public static void FinishSizePrefixedCotPositionData_IngestBuffer(FlatBufferBuilder builder, Offset<CotPositionData_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "COTP"); }
  public CotPositionData_IngestT UnPack() {
    var _o = new CotPositionData_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CotPositionData_IngestT _o) {
    _o.CallSign = this.CallSign;
    _o.TeamRole = this.TeamRole;
    _o.Team = this.Team;
  }
  public static Offset<CotPositionData_Ingest> Pack(FlatBufferBuilder builder, CotPositionData_IngestT _o) {
    if (_o == null) return default(Offset<CotPositionData_Ingest>);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _teamRole = _o.TeamRole == null ? default(StringOffset) : builder.CreateString(_o.TeamRole);
    var _team = _o.Team == null ? default(StringOffset) : builder.CreateString(_o.Team);
    return CreateCotPositionData_Ingest(
      builder,
      _callSign,
      _teamRole,
      _team);
  }
}

public class CotPositionData_IngestT
{
  public string CallSign { get; set; }
  public string TeamRole { get; set; }
  public string Team { get; set; }

  public CotPositionData_IngestT() {
    this.CallSign = null;
    this.TeamRole = null;
    this.Team = null;
  }
  public static CotPositionData_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return CotPositionData_Ingest.GetRootAsCotPositionData_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CotPositionData_Ingest.FinishCotPositionData_IngestBuffer(fbb, CotPositionData_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class CotPositionData_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 6 /*TeamRole*/, false)
      && verifier.VerifyString(tablePos, 8 /*Team*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
