// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
public struct MtiHRR_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MtiHRR_Abridged GetRootAsMtiHRR_Abridged(ByteBuffer _bb) { return GetRootAsMtiHRR_Abridged(_bb, new MtiHRR_Abridged()); }
  public static MtiHRR_Abridged GetRootAsMtiHRR_Abridged(ByteBuffer _bb, MtiHRR_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MtiHRR_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MTIH"); }
  public static bool VerifyMtiHRR_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MTIH", false, MtiHRR_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MtiHRR_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Sequential count of a revisit of the bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H2 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H3 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag to indicate the last dwell of the revisit.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool H4 { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Sequential index of the associated MTI Report.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H5 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H6 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Range Bins/Samples in a Range Doppler Chip.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H7 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Doppler bins in a Range-Doppler chip.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int H8 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H9 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H10 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 3dB range impulse response of the radar, expressed in centimeters.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H11 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Slant Range pixel spacing after over sampling, expressed in centimeters.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H12 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 3dB Doppler resolution of the radar, expressed in Hertz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H13 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Doppler pixel spacing after over sampling, expressed in Hertz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H14 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Center Frequency of the radar in GHz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H15 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Enumeration table denoting the compression technique used.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string H16 { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetH16Bytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetH16Bytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetH16Array() { return __p.__vector_as_array<byte>(32); }
  /// Enumeration table indicating the spectral weighting used in the range compression process.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string H17 { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetH17Bytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetH17Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetH17Array() { return __p.__vector_as_array<byte>(34); }
  /// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string H18 { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetH18Bytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetH18Bytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetH18Array() { return __p.__vector_as_array<byte>(36); }
  /// Initial power of the peak scatterer, expressed in dB.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double H19 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// RCS of the peak scatterer, expressed in half-decibels (dB/2).
  /// Example: /// Example: 117
  /// Constraints: No constraints specified.
  public int H20 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H21 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H22 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Enumeration field which designates the type of data being delivered.
  /// Example: /// Example: FIELD
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string H23 { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetH23Bytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetH23Bytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetH23Array() { return __p.__vector_as_array<byte>(46); }
  /// Flag field to indicate the additional signal processing techniques applied to the data.
  /// Example: /// Example: FLAG
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string H24 { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetH24Bytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetH24Bytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetH24Array() { return __p.__vector_as_array<byte>(48); }
  /// Number of pixels in the range dimension of the chip.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H27 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  public long H28 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// Relative velocity to skin line.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int H29 { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Computed object length based upon HRR profile, in meters.
  /// Example: /// Example: 22
  /// Constraints: No constraints specified.
  public int H30 { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of estimate of the object length, expressed in meters.
  /// Example: /// Example: 55
  /// Constraints: No constraints specified.
  public int H31 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of estimate of the object length, expressed in meters.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string H32(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int H32Length { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<MtiHRR_Abridged> CreateMtiHRR_Abridged(FlatBufferBuilder builder,
      int h2 = 0,
      int h3 = 0,
      bool h4 = false,
      int h5 = 0,
      int h6 = 0,
      int h7 = 0,
      int h8 = 0,
      int h9 = 0,
      int h10 = 0,
      double h11 = 0.0,
      double h12 = 0.0,
      double h13 = 0.0,
      double h14 = 0.0,
      double h15 = 0.0,
      StringOffset h16Offset = default(StringOffset),
      StringOffset h17Offset = default(StringOffset),
      StringOffset h18Offset = default(StringOffset),
      double h19 = 0.0,
      int h20 = 0,
      int h21 = 0,
      int h22 = 0,
      StringOffset h23Offset = default(StringOffset),
      StringOffset h24Offset = default(StringOffset),
      int h27 = 0,
      long h28 = 0,
      int h29 = 0,
      int h30 = 0,
      int h31 = 0,
      VectorOffset h32Offset = default(VectorOffset)) {
    builder.StartTable(29);
    MtiHRR_Abridged.AddH28(builder, h28);
    MtiHRR_Abridged.AddH19(builder, h19);
    MtiHRR_Abridged.AddH15(builder, h15);
    MtiHRR_Abridged.AddH14(builder, h14);
    MtiHRR_Abridged.AddH13(builder, h13);
    MtiHRR_Abridged.AddH12(builder, h12);
    MtiHRR_Abridged.AddH11(builder, h11);
    MtiHRR_Abridged.AddH32(builder, h32Offset);
    MtiHRR_Abridged.AddH31(builder, h31);
    MtiHRR_Abridged.AddH30(builder, h30);
    MtiHRR_Abridged.AddH29(builder, h29);
    MtiHRR_Abridged.AddH27(builder, h27);
    MtiHRR_Abridged.AddH24(builder, h24Offset);
    MtiHRR_Abridged.AddH23(builder, h23Offset);
    MtiHRR_Abridged.AddH22(builder, h22);
    MtiHRR_Abridged.AddH21(builder, h21);
    MtiHRR_Abridged.AddH20(builder, h20);
    MtiHRR_Abridged.AddH18(builder, h18Offset);
    MtiHRR_Abridged.AddH17(builder, h17Offset);
    MtiHRR_Abridged.AddH16(builder, h16Offset);
    MtiHRR_Abridged.AddH10(builder, h10);
    MtiHRR_Abridged.AddH9(builder, h9);
    MtiHRR_Abridged.AddH8(builder, h8);
    MtiHRR_Abridged.AddH7(builder, h7);
    MtiHRR_Abridged.AddH6(builder, h6);
    MtiHRR_Abridged.AddH5(builder, h5);
    MtiHRR_Abridged.AddH3(builder, h3);
    MtiHRR_Abridged.AddH2(builder, h2);
    MtiHRR_Abridged.AddH4(builder, h4);
    return MtiHRR_Abridged.EndMtiHRR_Abridged(builder);
  }

  public static void StartMtiHRR_Abridged(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddH2(FlatBufferBuilder builder, int h2) { builder.AddInt(0, h2, 0); }
  public static void AddH3(FlatBufferBuilder builder, int h3) { builder.AddInt(1, h3, 0); }
  public static void AddH4(FlatBufferBuilder builder, bool h4) { builder.AddBool(2, h4, false); }
  public static void AddH5(FlatBufferBuilder builder, int h5) { builder.AddInt(3, h5, 0); }
  public static void AddH6(FlatBufferBuilder builder, int h6) { builder.AddInt(4, h6, 0); }
  public static void AddH7(FlatBufferBuilder builder, int h7) { builder.AddInt(5, h7, 0); }
  public static void AddH8(FlatBufferBuilder builder, int h8) { builder.AddInt(6, h8, 0); }
  public static void AddH9(FlatBufferBuilder builder, int h9) { builder.AddInt(7, h9, 0); }
  public static void AddH10(FlatBufferBuilder builder, int h10) { builder.AddInt(8, h10, 0); }
  public static void AddH11(FlatBufferBuilder builder, double h11) { builder.AddDouble(9, h11, 0.0); }
  public static void AddH12(FlatBufferBuilder builder, double h12) { builder.AddDouble(10, h12, 0.0); }
  public static void AddH13(FlatBufferBuilder builder, double h13) { builder.AddDouble(11, h13, 0.0); }
  public static void AddH14(FlatBufferBuilder builder, double h14) { builder.AddDouble(12, h14, 0.0); }
  public static void AddH15(FlatBufferBuilder builder, double h15) { builder.AddDouble(13, h15, 0.0); }
  public static void AddH16(FlatBufferBuilder builder, StringOffset h16Offset) { builder.AddOffset(14, h16Offset.Value, 0); }
  public static void AddH17(FlatBufferBuilder builder, StringOffset h17Offset) { builder.AddOffset(15, h17Offset.Value, 0); }
  public static void AddH18(FlatBufferBuilder builder, StringOffset h18Offset) { builder.AddOffset(16, h18Offset.Value, 0); }
  public static void AddH19(FlatBufferBuilder builder, double h19) { builder.AddDouble(17, h19, 0.0); }
  public static void AddH20(FlatBufferBuilder builder, int h20) { builder.AddInt(18, h20, 0); }
  public static void AddH21(FlatBufferBuilder builder, int h21) { builder.AddInt(19, h21, 0); }
  public static void AddH22(FlatBufferBuilder builder, int h22) { builder.AddInt(20, h22, 0); }
  public static void AddH23(FlatBufferBuilder builder, StringOffset h23Offset) { builder.AddOffset(21, h23Offset.Value, 0); }
  public static void AddH24(FlatBufferBuilder builder, StringOffset h24Offset) { builder.AddOffset(22, h24Offset.Value, 0); }
  public static void AddH27(FlatBufferBuilder builder, int h27) { builder.AddInt(23, h27, 0); }
  public static void AddH28(FlatBufferBuilder builder, long h28) { builder.AddLong(24, h28, 0); }
  public static void AddH29(FlatBufferBuilder builder, int h29) { builder.AddInt(25, h29, 0); }
  public static void AddH30(FlatBufferBuilder builder, int h30) { builder.AddInt(26, h30, 0); }
  public static void AddH31(FlatBufferBuilder builder, int h31) { builder.AddInt(27, h31, 0); }
  public static void AddH32(FlatBufferBuilder builder, VectorOffset h32Offset) { builder.AddOffset(28, h32Offset.Value, 0); }
  public static VectorOffset CreateH32Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateH32VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateH32VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateH32VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartH32Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<MtiHRR_Abridged> EndMtiHRR_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MtiHRR_Abridged>(o);
  }
  public static void FinishMtiHRR_AbridgedBuffer(FlatBufferBuilder builder, Offset<MtiHRR_Abridged> offset) { builder.Finish(offset.Value, "MTIH"); }
  public static void FinishSizePrefixedMtiHRR_AbridgedBuffer(FlatBufferBuilder builder, Offset<MtiHRR_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "MTIH"); }
  public MtiHRR_AbridgedT UnPack() {
    var _o = new MtiHRR_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MtiHRR_AbridgedT _o) {
    _o.H2 = this.H2;
    _o.H3 = this.H3;
    _o.H4 = this.H4;
    _o.H5 = this.H5;
    _o.H6 = this.H6;
    _o.H7 = this.H7;
    _o.H8 = this.H8;
    _o.H9 = this.H9;
    _o.H10 = this.H10;
    _o.H11 = this.H11;
    _o.H12 = this.H12;
    _o.H13 = this.H13;
    _o.H14 = this.H14;
    _o.H15 = this.H15;
    _o.H16 = this.H16;
    _o.H17 = this.H17;
    _o.H18 = this.H18;
    _o.H19 = this.H19;
    _o.H20 = this.H20;
    _o.H21 = this.H21;
    _o.H22 = this.H22;
    _o.H23 = this.H23;
    _o.H24 = this.H24;
    _o.H27 = this.H27;
    _o.H28 = this.H28;
    _o.H29 = this.H29;
    _o.H30 = this.H30;
    _o.H31 = this.H31;
    _o.H32 = new List<string>();
    for (var _j = 0; _j < this.H32Length; ++_j) {_o.H32.Add(this.H32(_j));}
  }
  public static Offset<MtiHRR_Abridged> Pack(FlatBufferBuilder builder, MtiHRR_AbridgedT _o) {
    if (_o == null) return default(Offset<MtiHRR_Abridged>);
    var _h16 = _o.H16 == null ? default(StringOffset) : builder.CreateString(_o.H16);
    var _h17 = _o.H17 == null ? default(StringOffset) : builder.CreateString(_o.H17);
    var _h18 = _o.H18 == null ? default(StringOffset) : builder.CreateString(_o.H18);
    var _h23 = _o.H23 == null ? default(StringOffset) : builder.CreateString(_o.H23);
    var _h24 = _o.H24 == null ? default(StringOffset) : builder.CreateString(_o.H24);
    var _h32 = default(VectorOffset);
    if (_o.H32 != null) {
      var __h32 = new StringOffset[_o.H32.Count];
      for (var _j = 0; _j < __h32.Length; ++_j) { __h32[_j] = builder.CreateString(_o.H32[_j]); }
      _h32 = CreateH32Vector(builder, __h32);
    }
    return CreateMtiHRR_Abridged(
      builder,
      _o.H2,
      _o.H3,
      _o.H4,
      _o.H5,
      _o.H6,
      _o.H7,
      _o.H8,
      _o.H9,
      _o.H10,
      _o.H11,
      _o.H12,
      _o.H13,
      _o.H14,
      _o.H15,
      _h16,
      _h17,
      _h18,
      _o.H19,
      _o.H20,
      _o.H21,
      _o.H22,
      _h23,
      _h24,
      _o.H27,
      _o.H28,
      _o.H29,
      _o.H30,
      _o.H31,
      _h32);
  }
}

public class MtiHRR_AbridgedT
{
  public int H2 { get; set; }
  public int H3 { get; set; }
  public bool H4 { get; set; }
  public int H5 { get; set; }
  public int H6 { get; set; }
  public int H7 { get; set; }
  public int H8 { get; set; }
  public int H9 { get; set; }
  public int H10 { get; set; }
  public double H11 { get; set; }
  public double H12 { get; set; }
  public double H13 { get; set; }
  public double H14 { get; set; }
  public double H15 { get; set; }
  public string H16 { get; set; }
  public string H17 { get; set; }
  public string H18 { get; set; }
  public double H19 { get; set; }
  public int H20 { get; set; }
  public int H21 { get; set; }
  public int H22 { get; set; }
  public string H23 { get; set; }
  public string H24 { get; set; }
  public int H27 { get; set; }
  public long H28 { get; set; }
  public int H29 { get; set; }
  public int H30 { get; set; }
  public int H31 { get; set; }
  public List<string> H32 { get; set; }

  public MtiHRR_AbridgedT() {
    this.H2 = 0;
    this.H3 = 0;
    this.H4 = false;
    this.H5 = 0;
    this.H6 = 0;
    this.H7 = 0;
    this.H8 = 0;
    this.H9 = 0;
    this.H10 = 0;
    this.H11 = 0.0;
    this.H12 = 0.0;
    this.H13 = 0.0;
    this.H14 = 0.0;
    this.H15 = 0.0;
    this.H16 = null;
    this.H17 = null;
    this.H18 = null;
    this.H19 = 0.0;
    this.H20 = 0;
    this.H21 = 0;
    this.H22 = 0;
    this.H23 = null;
    this.H24 = null;
    this.H27 = 0;
    this.H28 = 0;
    this.H29 = 0;
    this.H30 = 0;
    this.H31 = 0;
    this.H32 = null;
  }
  public static MtiHRR_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return MtiHRR_Abridged.GetRootAsMtiHRR_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MtiHRR_Abridged.FinishMtiHRR_AbridgedBuffer(fbb, MtiHRR_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MtiHRR_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*H2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*H3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*H4*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*H5*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*H6*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*H7*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*H8*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*H9*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*H10*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*H11*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*H12*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*H13*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*H14*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*H15*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*H16*/, false)
      && verifier.VerifyString(tablePos, 34 /*H17*/, false)
      && verifier.VerifyString(tablePos, 36 /*H18*/, false)
      && verifier.VerifyField(tablePos, 38 /*H19*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*H20*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*H21*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*H22*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 46 /*H23*/, false)
      && verifier.VerifyString(tablePos, 48 /*H24*/, false)
      && verifier.VerifyField(tablePos, 50 /*H27*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*H28*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*H29*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*H30*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*H31*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*H32*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
