// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Individual taskings to complete the mission.
public struct ISRCollectionTaskings_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionTaskings_Ingest GetRootAsISRCollectionTaskings_Ingest(ByteBuffer _bb) { return GetRootAsISRCollectionTaskings_Ingest(_bb, new ISRCollectionTaskings_Ingest()); }
  public static ISRCollectionTaskings_Ingest GetRootAsISRCollectionTaskings_Ingest(ByteBuffer _bb, ISRCollectionTaskings_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollectionTaskings_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollectionTaskings_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollectionTaskings_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollectionTaskings_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Tasking Unique Identifier.
  /// Example: /// Example: ISRCOLLECTIONTASKINGS-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Type of tasking.
  /// Example: /// Example: Deliberate
  /// Constraints: Minimum length = 1, Maximum length = 16
  public ISRCollectionTaskings_Ingest_type_Enum Type { get { int o = __p.__offset(6); return o != 0 ? (ISRCollectionTaskings_Ingest_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE; } }
  /// Type of collection tasked.
  /// Example: /// Example: Simultaneous
  /// Constraints: Minimum length = 1, Maximum length = 16
  public ISRCollectionTaskings_Ingest_collectionType_Enum CollectionType { get { int o = __p.__offset(8); return o != 0 ? (ISRCollectionTaskings_Ingest_collectionType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS; } }
  /// Human readable definition of this taskings Area Of Responsibility.
  /// Example: /// Example: Kandahar
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingAOR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingAORBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTaskingAORBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTaskingAORArray() { return __p.__vector_as_array<byte>(10); }
  /// Eight line.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string EightLine { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEightLineBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEightLineBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEightLineArray() { return __p.__vector_as_array<byte>(12); }
  /// Primary type of intelligence to be collected during the mission.
  /// Example: /// Example: Sig
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingPrimaryIntelDiscipline { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingPrimaryIntelDisciplineBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTaskingPrimaryIntelDisciplineBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTaskingPrimaryIntelDisciplineArray() { return __p.__vector_as_array<byte>(14); }
  /// Sub category of primary intelligence to be collected.
  /// Example: /// Example: FMV
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingPrimarySubCategory { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingPrimarySubCategoryBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTaskingPrimarySubCategoryBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTaskingPrimarySubCategoryArray() { return __p.__vector_as_array<byte>(16); }
  /// Type of tasking intelligence to be collected second.
  /// Example: /// Example: Intelligence_2
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingSecondaryIntelDiscipline { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingSecondaryIntelDisciplineBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTaskingSecondaryIntelDisciplineBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTaskingSecondaryIntelDisciplineArray() { return __p.__vector_as_array<byte>(18); }
  /// Mission sub category for secondary intelligence discipline to be collected.
  /// Example: /// Example: Convoy
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingSecondarySubCategory { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingSecondarySubCategoryBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTaskingSecondarySubCategoryBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTaskingSecondarySubCategoryArray() { return __p.__vector_as_array<byte>(20); }
  /// What is the primary objective(Role) of this task.
  /// Example: /// Example: Provide Targeting of Lead Vehicle
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingRole { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingRoleBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTaskingRoleBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTaskingRoleArray() { return __p.__vector_as_array<byte>(22); }
  /// Tasking operation name.
  /// Example: /// Example: OP-HONEY-BADGER
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingOperation { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingOperationBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTaskingOperationBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTaskingOperationArray() { return __p.__vector_as_array<byte>(24); }
  /// Tasking Priority (1-n).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double TaskingPriority { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Military Base to transmit the dissemination of this data.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingSupportedUnit { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingSupportedUnitBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTaskingSupportedUnitBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTaskingSupportedUnitArray() { return __p.__vector_as_array<byte>(28); }
  /// Tasking emphasis.
  /// Example: /// Example: EMPHASIS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingEmphasis { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingEmphasisBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTaskingEmphasisBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTaskingEmphasisArray() { return __p.__vector_as_array<byte>(30); }
  /// Time of retasking, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  public string TaskingRetaskTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingRetaskTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetTaskingRetaskTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetTaskingRetaskTimeArray() { return __p.__vector_as_array<byte>(32); }
  /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double TaskingStartPointLat { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double TaskingStartPointLong { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Tasking geographical collection area.
  /// Example: /// Example: AREA
  /// Constraints: No constraints specified.
  public string TaskingCollectionArea { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingCollectionAreaBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetTaskingCollectionAreaBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetTaskingCollectionAreaArray() { return __p.__vector_as_array<byte>(38); }
  /// Joint Operations Area.
  /// Example: /// Example: AREA
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingJoa { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingJoaBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetTaskingJoaBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetTaskingJoaArray() { return __p.__vector_as_array<byte>(40); }
  /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
  /// Example: /// Example: MATRIX
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingSyncMatrixBin { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingSyncMatrixBinBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTaskingSyncMatrixBinBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTaskingSyncMatrixBinArray() { return __p.__vector_as_array<byte>(42); }
  /// Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
  /// Example: /// Example: CODE
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string TaskingCountry { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingCountryBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetTaskingCountryBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetTaskingCountryArray() { return __p.__vector_as_array<byte>(44); }
  /// Region of the tasking.
  /// Example: /// Example: REGION
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingRegion { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingRegionBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetTaskingRegionBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetTaskingRegionArray() { return __p.__vector_as_array<byte>(46); }
  /// Subregion of the tasking.
  /// Example: /// Example: SUBREGION
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TaskingSubRegion { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskingSubRegionBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetTaskingSubRegionBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetTaskingSubRegionArray() { return __p.__vector_as_array<byte>(48); }
  /// Value of the Sensitive Reconnaissance Operations Track.
  /// Example: /// Example: SRO
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string SroTrack { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSroTrackBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSroTrackBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSroTrackArray() { return __p.__vector_as_array<byte>(50); }
  /// Free text field for the user to specify special instructions needed for this collection.
  /// Example: /// Example: TEXT
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string SpecialComGuidance { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecialComGuidanceBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetSpecialComGuidanceBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetSpecialComGuidanceArray() { return __p.__vector_as_array<byte>(52); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CollectionPeriods { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionPeriodsBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetCollectionPeriodsBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetCollectionPeriodsArray() { return __p.__vector_as_array<byte>(54); }
  /// Tasking desired collection requirements.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string TaskingCollectionRequirements(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TaskingCollectionRequirementsLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ISRCollectionTaskings_Ingest> CreateISRCollectionTaskings_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      ISRCollectionTaskings_Ingest_type_Enum type = ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE,
      ISRCollectionTaskings_Ingest_collectionType_Enum collectionType = ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS,
      StringOffset taskingAOROffset = default(StringOffset),
      StringOffset eightLineOffset = default(StringOffset),
      StringOffset taskingPrimaryIntelDisciplineOffset = default(StringOffset),
      StringOffset taskingPrimarySubCategoryOffset = default(StringOffset),
      StringOffset taskingSecondaryIntelDisciplineOffset = default(StringOffset),
      StringOffset taskingSecondarySubCategoryOffset = default(StringOffset),
      StringOffset taskingRoleOffset = default(StringOffset),
      StringOffset taskingOperationOffset = default(StringOffset),
      double taskingPriority = 0.0,
      StringOffset taskingSupportedUnitOffset = default(StringOffset),
      StringOffset taskingEmphasisOffset = default(StringOffset),
      StringOffset taskingRetaskTimeOffset = default(StringOffset),
      double taskingStartPointLat = 0.0,
      double taskingStartPointLong = 0.0,
      StringOffset taskingCollectionAreaOffset = default(StringOffset),
      StringOffset taskingJoaOffset = default(StringOffset),
      StringOffset taskingSyncMatrixBinOffset = default(StringOffset),
      StringOffset taskingCountryOffset = default(StringOffset),
      StringOffset taskingRegionOffset = default(StringOffset),
      StringOffset taskingSubRegionOffset = default(StringOffset),
      StringOffset sroTrackOffset = default(StringOffset),
      StringOffset specialComGuidanceOffset = default(StringOffset),
      StringOffset collectionPeriodsOffset = default(StringOffset),
      VectorOffset taskingCollectionRequirementsOffset = default(VectorOffset)) {
    builder.StartTable(27);
    ISRCollectionTaskings_Ingest.AddTaskingStartPointLong(builder, taskingStartPointLong);
    ISRCollectionTaskings_Ingest.AddTaskingStartPointLat(builder, taskingStartPointLat);
    ISRCollectionTaskings_Ingest.AddTaskingPriority(builder, taskingPriority);
    ISRCollectionTaskings_Ingest.AddTaskingCollectionRequirements(builder, taskingCollectionRequirementsOffset);
    ISRCollectionTaskings_Ingest.AddCollectionPeriods(builder, collectionPeriodsOffset);
    ISRCollectionTaskings_Ingest.AddSpecialComGuidance(builder, specialComGuidanceOffset);
    ISRCollectionTaskings_Ingest.AddSroTrack(builder, sroTrackOffset);
    ISRCollectionTaskings_Ingest.AddTaskingSubRegion(builder, taskingSubRegionOffset);
    ISRCollectionTaskings_Ingest.AddTaskingRegion(builder, taskingRegionOffset);
    ISRCollectionTaskings_Ingest.AddTaskingCountry(builder, taskingCountryOffset);
    ISRCollectionTaskings_Ingest.AddTaskingSyncMatrixBin(builder, taskingSyncMatrixBinOffset);
    ISRCollectionTaskings_Ingest.AddTaskingJoa(builder, taskingJoaOffset);
    ISRCollectionTaskings_Ingest.AddTaskingCollectionArea(builder, taskingCollectionAreaOffset);
    ISRCollectionTaskings_Ingest.AddTaskingRetaskTime(builder, taskingRetaskTimeOffset);
    ISRCollectionTaskings_Ingest.AddTaskingEmphasis(builder, taskingEmphasisOffset);
    ISRCollectionTaskings_Ingest.AddTaskingSupportedUnit(builder, taskingSupportedUnitOffset);
    ISRCollectionTaskings_Ingest.AddTaskingOperation(builder, taskingOperationOffset);
    ISRCollectionTaskings_Ingest.AddTaskingRole(builder, taskingRoleOffset);
    ISRCollectionTaskings_Ingest.AddTaskingSecondarySubCategory(builder, taskingSecondarySubCategoryOffset);
    ISRCollectionTaskings_Ingest.AddTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDisciplineOffset);
    ISRCollectionTaskings_Ingest.AddTaskingPrimarySubCategory(builder, taskingPrimarySubCategoryOffset);
    ISRCollectionTaskings_Ingest.AddTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDisciplineOffset);
    ISRCollectionTaskings_Ingest.AddEightLine(builder, eightLineOffset);
    ISRCollectionTaskings_Ingest.AddTaskingAOR(builder, taskingAOROffset);
    ISRCollectionTaskings_Ingest.AddId(builder, idOffset);
    ISRCollectionTaskings_Ingest.AddCollectionType(builder, collectionType);
    ISRCollectionTaskings_Ingest.AddType(builder, type);
    return ISRCollectionTaskings_Ingest.EndISRCollectionTaskings_Ingest(builder);
  }

  public static void StartISRCollectionTaskings_Ingest(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, ISRCollectionTaskings_Ingest_type_Enum type) { builder.AddSbyte(1, (sbyte)type, 0); }
  public static void AddCollectionType(FlatBufferBuilder builder, ISRCollectionTaskings_Ingest_collectionType_Enum collectionType) { builder.AddSbyte(2, (sbyte)collectionType, 0); }
  public static void AddTaskingAOR(FlatBufferBuilder builder, StringOffset taskingAOROffset) { builder.AddOffset(3, taskingAOROffset.Value, 0); }
  public static void AddEightLine(FlatBufferBuilder builder, StringOffset eightLineOffset) { builder.AddOffset(4, eightLineOffset.Value, 0); }
  public static void AddTaskingPrimaryIntelDiscipline(FlatBufferBuilder builder, StringOffset taskingPrimaryIntelDisciplineOffset) { builder.AddOffset(5, taskingPrimaryIntelDisciplineOffset.Value, 0); }
  public static void AddTaskingPrimarySubCategory(FlatBufferBuilder builder, StringOffset taskingPrimarySubCategoryOffset) { builder.AddOffset(6, taskingPrimarySubCategoryOffset.Value, 0); }
  public static void AddTaskingSecondaryIntelDiscipline(FlatBufferBuilder builder, StringOffset taskingSecondaryIntelDisciplineOffset) { builder.AddOffset(7, taskingSecondaryIntelDisciplineOffset.Value, 0); }
  public static void AddTaskingSecondarySubCategory(FlatBufferBuilder builder, StringOffset taskingSecondarySubCategoryOffset) { builder.AddOffset(8, taskingSecondarySubCategoryOffset.Value, 0); }
  public static void AddTaskingRole(FlatBufferBuilder builder, StringOffset taskingRoleOffset) { builder.AddOffset(9, taskingRoleOffset.Value, 0); }
  public static void AddTaskingOperation(FlatBufferBuilder builder, StringOffset taskingOperationOffset) { builder.AddOffset(10, taskingOperationOffset.Value, 0); }
  public static void AddTaskingPriority(FlatBufferBuilder builder, double taskingPriority) { builder.AddDouble(11, taskingPriority, 0.0); }
  public static void AddTaskingSupportedUnit(FlatBufferBuilder builder, StringOffset taskingSupportedUnitOffset) { builder.AddOffset(12, taskingSupportedUnitOffset.Value, 0); }
  public static void AddTaskingEmphasis(FlatBufferBuilder builder, StringOffset taskingEmphasisOffset) { builder.AddOffset(13, taskingEmphasisOffset.Value, 0); }
  public static void AddTaskingRetaskTime(FlatBufferBuilder builder, StringOffset taskingRetaskTimeOffset) { builder.AddOffset(14, taskingRetaskTimeOffset.Value, 0); }
  public static void AddTaskingStartPointLat(FlatBufferBuilder builder, double taskingStartPointLat) { builder.AddDouble(15, taskingStartPointLat, 0.0); }
  public static void AddTaskingStartPointLong(FlatBufferBuilder builder, double taskingStartPointLong) { builder.AddDouble(16, taskingStartPointLong, 0.0); }
  public static void AddTaskingCollectionArea(FlatBufferBuilder builder, StringOffset taskingCollectionAreaOffset) { builder.AddOffset(17, taskingCollectionAreaOffset.Value, 0); }
  public static void AddTaskingJoa(FlatBufferBuilder builder, StringOffset taskingJoaOffset) { builder.AddOffset(18, taskingJoaOffset.Value, 0); }
  public static void AddTaskingSyncMatrixBin(FlatBufferBuilder builder, StringOffset taskingSyncMatrixBinOffset) { builder.AddOffset(19, taskingSyncMatrixBinOffset.Value, 0); }
  public static void AddTaskingCountry(FlatBufferBuilder builder, StringOffset taskingCountryOffset) { builder.AddOffset(20, taskingCountryOffset.Value, 0); }
  public static void AddTaskingRegion(FlatBufferBuilder builder, StringOffset taskingRegionOffset) { builder.AddOffset(21, taskingRegionOffset.Value, 0); }
  public static void AddTaskingSubRegion(FlatBufferBuilder builder, StringOffset taskingSubRegionOffset) { builder.AddOffset(22, taskingSubRegionOffset.Value, 0); }
  public static void AddSroTrack(FlatBufferBuilder builder, StringOffset sroTrackOffset) { builder.AddOffset(23, sroTrackOffset.Value, 0); }
  public static void AddSpecialComGuidance(FlatBufferBuilder builder, StringOffset specialComGuidanceOffset) { builder.AddOffset(24, specialComGuidanceOffset.Value, 0); }
  public static void AddCollectionPeriods(FlatBufferBuilder builder, StringOffset collectionPeriodsOffset) { builder.AddOffset(25, collectionPeriodsOffset.Value, 0); }
  public static void AddTaskingCollectionRequirements(FlatBufferBuilder builder, VectorOffset taskingCollectionRequirementsOffset) { builder.AddOffset(26, taskingCollectionRequirementsOffset.Value, 0); }
  public static VectorOffset CreateTaskingCollectionRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTaskingCollectionRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskingCollectionRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskingCollectionRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskingCollectionRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ISRCollectionTaskings_Ingest> EndISRCollectionTaskings_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollectionTaskings_Ingest>(o);
  }
  public static void FinishISRCollectionTaskings_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionTaskings_Ingest> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollectionTaskings_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionTaskings_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollectionTaskings_IngestT UnPack() {
    var _o = new ISRCollectionTaskings_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollectionTaskings_IngestT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.CollectionType = this.CollectionType;
    _o.TaskingAOR = this.TaskingAOR;
    _o.EightLine = this.EightLine;
    _o.TaskingPrimaryIntelDiscipline = this.TaskingPrimaryIntelDiscipline;
    _o.TaskingPrimarySubCategory = this.TaskingPrimarySubCategory;
    _o.TaskingSecondaryIntelDiscipline = this.TaskingSecondaryIntelDiscipline;
    _o.TaskingSecondarySubCategory = this.TaskingSecondarySubCategory;
    _o.TaskingRole = this.TaskingRole;
    _o.TaskingOperation = this.TaskingOperation;
    _o.TaskingPriority = this.TaskingPriority;
    _o.TaskingSupportedUnit = this.TaskingSupportedUnit;
    _o.TaskingEmphasis = this.TaskingEmphasis;
    _o.TaskingRetaskTime = this.TaskingRetaskTime;
    _o.TaskingStartPointLat = this.TaskingStartPointLat;
    _o.TaskingStartPointLong = this.TaskingStartPointLong;
    _o.TaskingCollectionArea = this.TaskingCollectionArea;
    _o.TaskingJoa = this.TaskingJoa;
    _o.TaskingSyncMatrixBin = this.TaskingSyncMatrixBin;
    _o.TaskingCountry = this.TaskingCountry;
    _o.TaskingRegion = this.TaskingRegion;
    _o.TaskingSubRegion = this.TaskingSubRegion;
    _o.SroTrack = this.SroTrack;
    _o.SpecialComGuidance = this.SpecialComGuidance;
    _o.CollectionPeriods = this.CollectionPeriods;
    _o.TaskingCollectionRequirements = new List<string>();
    for (var _j = 0; _j < this.TaskingCollectionRequirementsLength; ++_j) {_o.TaskingCollectionRequirements.Add(this.TaskingCollectionRequirements(_j));}
  }
  public static Offset<ISRCollectionTaskings_Ingest> Pack(FlatBufferBuilder builder, ISRCollectionTaskings_IngestT _o) {
    if (_o == null) return default(Offset<ISRCollectionTaskings_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _taskingAOR = _o.TaskingAOR == null ? default(StringOffset) : builder.CreateString(_o.TaskingAOR);
    var _eightLine = _o.EightLine == null ? default(StringOffset) : builder.CreateString(_o.EightLine);
    var _taskingPrimaryIntelDiscipline = _o.TaskingPrimaryIntelDiscipline == null ? default(StringOffset) : builder.CreateString(_o.TaskingPrimaryIntelDiscipline);
    var _taskingPrimarySubCategory = _o.TaskingPrimarySubCategory == null ? default(StringOffset) : builder.CreateString(_o.TaskingPrimarySubCategory);
    var _taskingSecondaryIntelDiscipline = _o.TaskingSecondaryIntelDiscipline == null ? default(StringOffset) : builder.CreateString(_o.TaskingSecondaryIntelDiscipline);
    var _taskingSecondarySubCategory = _o.TaskingSecondarySubCategory == null ? default(StringOffset) : builder.CreateString(_o.TaskingSecondarySubCategory);
    var _taskingRole = _o.TaskingRole == null ? default(StringOffset) : builder.CreateString(_o.TaskingRole);
    var _taskingOperation = _o.TaskingOperation == null ? default(StringOffset) : builder.CreateString(_o.TaskingOperation);
    var _taskingSupportedUnit = _o.TaskingSupportedUnit == null ? default(StringOffset) : builder.CreateString(_o.TaskingSupportedUnit);
    var _taskingEmphasis = _o.TaskingEmphasis == null ? default(StringOffset) : builder.CreateString(_o.TaskingEmphasis);
    var _taskingRetaskTime = _o.TaskingRetaskTime == null ? default(StringOffset) : builder.CreateString(_o.TaskingRetaskTime);
    var _taskingCollectionArea = _o.TaskingCollectionArea == null ? default(StringOffset) : builder.CreateString(_o.TaskingCollectionArea);
    var _taskingJoa = _o.TaskingJoa == null ? default(StringOffset) : builder.CreateString(_o.TaskingJoa);
    var _taskingSyncMatrixBin = _o.TaskingSyncMatrixBin == null ? default(StringOffset) : builder.CreateString(_o.TaskingSyncMatrixBin);
    var _taskingCountry = _o.TaskingCountry == null ? default(StringOffset) : builder.CreateString(_o.TaskingCountry);
    var _taskingRegion = _o.TaskingRegion == null ? default(StringOffset) : builder.CreateString(_o.TaskingRegion);
    var _taskingSubRegion = _o.TaskingSubRegion == null ? default(StringOffset) : builder.CreateString(_o.TaskingSubRegion);
    var _sroTrack = _o.SroTrack == null ? default(StringOffset) : builder.CreateString(_o.SroTrack);
    var _specialComGuidance = _o.SpecialComGuidance == null ? default(StringOffset) : builder.CreateString(_o.SpecialComGuidance);
    var _collectionPeriods = _o.CollectionPeriods == null ? default(StringOffset) : builder.CreateString(_o.CollectionPeriods);
    var _taskingCollectionRequirements = default(VectorOffset);
    if (_o.TaskingCollectionRequirements != null) {
      var __taskingCollectionRequirements = new StringOffset[_o.TaskingCollectionRequirements.Count];
      for (var _j = 0; _j < __taskingCollectionRequirements.Length; ++_j) { __taskingCollectionRequirements[_j] = builder.CreateString(_o.TaskingCollectionRequirements[_j]); }
      _taskingCollectionRequirements = CreateTaskingCollectionRequirementsVector(builder, __taskingCollectionRequirements);
    }
    return CreateISRCollectionTaskings_Ingest(
      builder,
      _id,
      _o.Type,
      _o.CollectionType,
      _taskingAOR,
      _eightLine,
      _taskingPrimaryIntelDiscipline,
      _taskingPrimarySubCategory,
      _taskingSecondaryIntelDiscipline,
      _taskingSecondarySubCategory,
      _taskingRole,
      _taskingOperation,
      _o.TaskingPriority,
      _taskingSupportedUnit,
      _taskingEmphasis,
      _taskingRetaskTime,
      _o.TaskingStartPointLat,
      _o.TaskingStartPointLong,
      _taskingCollectionArea,
      _taskingJoa,
      _taskingSyncMatrixBin,
      _taskingCountry,
      _taskingRegion,
      _taskingSubRegion,
      _sroTrack,
      _specialComGuidance,
      _collectionPeriods,
      _taskingCollectionRequirements);
  }
}

public class ISRCollectionTaskings_IngestT
{
  public string Id { get; set; }
  public ISRCollectionTaskings_Ingest_type_Enum Type { get; set; }
  public ISRCollectionTaskings_Ingest_collectionType_Enum CollectionType { get; set; }
  public string TaskingAOR { get; set; }
  public string EightLine { get; set; }
  public string TaskingPrimaryIntelDiscipline { get; set; }
  public string TaskingPrimarySubCategory { get; set; }
  public string TaskingSecondaryIntelDiscipline { get; set; }
  public string TaskingSecondarySubCategory { get; set; }
  public string TaskingRole { get; set; }
  public string TaskingOperation { get; set; }
  public double TaskingPriority { get; set; }
  public string TaskingSupportedUnit { get; set; }
  public string TaskingEmphasis { get; set; }
  public string TaskingRetaskTime { get; set; }
  public double TaskingStartPointLat { get; set; }
  public double TaskingStartPointLong { get; set; }
  public string TaskingCollectionArea { get; set; }
  public string TaskingJoa { get; set; }
  public string TaskingSyncMatrixBin { get; set; }
  public string TaskingCountry { get; set; }
  public string TaskingRegion { get; set; }
  public string TaskingSubRegion { get; set; }
  public string SroTrack { get; set; }
  public string SpecialComGuidance { get; set; }
  public string CollectionPeriods { get; set; }
  public List<string> TaskingCollectionRequirements { get; set; }

  public ISRCollectionTaskings_IngestT() {
    this.Id = null;
    this.Type = ISRCollectionTaskings_Ingest_type_Enum.DELIBERATE;
    this.CollectionType = ISRCollectionTaskings_Ingest_collectionType_Enum.SIMULTANEOUS;
    this.TaskingAOR = null;
    this.EightLine = null;
    this.TaskingPrimaryIntelDiscipline = null;
    this.TaskingPrimarySubCategory = null;
    this.TaskingSecondaryIntelDiscipline = null;
    this.TaskingSecondarySubCategory = null;
    this.TaskingRole = null;
    this.TaskingOperation = null;
    this.TaskingPriority = 0.0;
    this.TaskingSupportedUnit = null;
    this.TaskingEmphasis = null;
    this.TaskingRetaskTime = null;
    this.TaskingStartPointLat = 0.0;
    this.TaskingStartPointLong = 0.0;
    this.TaskingCollectionArea = null;
    this.TaskingJoa = null;
    this.TaskingSyncMatrixBin = null;
    this.TaskingCountry = null;
    this.TaskingRegion = null;
    this.TaskingSubRegion = null;
    this.SroTrack = null;
    this.SpecialComGuidance = null;
    this.CollectionPeriods = null;
    this.TaskingCollectionRequirements = null;
  }
  public static ISRCollectionTaskings_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollectionTaskings_Ingest.GetRootAsISRCollectionTaskings_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollectionTaskings_Ingest.FinishISRCollectionTaskings_IngestBuffer(fbb, ISRCollectionTaskings_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollectionTaskings_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 1 /*ISRCollectionTaskings_Ingest_type_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*CollectionType*/, 1 /*ISRCollectionTaskings_Ingest_collectionType_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 10 /*TaskingAOR*/, false)
      && verifier.VerifyString(tablePos, 12 /*EightLine*/, false)
      && verifier.VerifyString(tablePos, 14 /*TaskingPrimaryIntelDiscipline*/, false)
      && verifier.VerifyString(tablePos, 16 /*TaskingPrimarySubCategory*/, false)
      && verifier.VerifyString(tablePos, 18 /*TaskingSecondaryIntelDiscipline*/, false)
      && verifier.VerifyString(tablePos, 20 /*TaskingSecondarySubCategory*/, false)
      && verifier.VerifyString(tablePos, 22 /*TaskingRole*/, false)
      && verifier.VerifyString(tablePos, 24 /*TaskingOperation*/, false)
      && verifier.VerifyField(tablePos, 26 /*TaskingPriority*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 28 /*TaskingSupportedUnit*/, false)
      && verifier.VerifyString(tablePos, 30 /*TaskingEmphasis*/, false)
      && verifier.VerifyString(tablePos, 32 /*TaskingRetaskTime*/, false)
      && verifier.VerifyField(tablePos, 34 /*TaskingStartPointLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*TaskingStartPointLong*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 38 /*TaskingCollectionArea*/, false)
      && verifier.VerifyString(tablePos, 40 /*TaskingJoa*/, false)
      && verifier.VerifyString(tablePos, 42 /*TaskingSyncMatrixBin*/, false)
      && verifier.VerifyString(tablePos, 44 /*TaskingCountry*/, false)
      && verifier.VerifyString(tablePos, 46 /*TaskingRegion*/, false)
      && verifier.VerifyString(tablePos, 48 /*TaskingSubRegion*/, false)
      && verifier.VerifyString(tablePos, 50 /*SroTrack*/, false)
      && verifier.VerifyString(tablePos, 52 /*SpecialComGuidance*/, false)
      && verifier.VerifyString(tablePos, 54 /*CollectionPeriods*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*TaskingCollectionRequirements*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
