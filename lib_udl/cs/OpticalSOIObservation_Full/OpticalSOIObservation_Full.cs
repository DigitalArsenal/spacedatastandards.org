// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
public struct OpticalSOIObservation_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OpticalSOIObservation_Full GetRootAsOpticalSOIObservation_Full(ByteBuffer _bb) { return GetRootAsOpticalSOIObservation_Full(_bb, new OpticalSOIObservation_Full()); }
  public static OpticalSOIObservation_Full GetRootAsOpticalSOIObservation_Full(ByteBuffer _bb, OpticalSOIObservation_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OpticalSOIObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "OPTI"); }
  public static bool VerifyOpticalSOIObservation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("OPTI", false, OpticalSOIObservation_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OpticalSOIObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Observation detection start time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.888456Z
  /// Constraints: No constraints specified.
  public string ObStartTime { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObStartTimeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetObStartTimeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetObStartTimeArray() { return __p.__vector_as_array<byte>(4); }
  /// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
  /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
  /// Constraints: No constraints specified.
  public string IntensityTimes(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntensityTimesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int CurrentSpectralFilterNum { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Image exposure duration in seconds.
  /// Example: /// Example: 0.455
  /// Constraints: No constraints specified.
  public double ExpDuration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
  /// Example: /// Example: [1.1, 1.1, 1.1]
  /// Constraints: No constraints specified.
  public string Intensities(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntensitiesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
  /// Example: /// Example: [0.32, 0.32, 0.32]
  /// Constraints: No constraints specified.
  public string ExtinctionCoeffs(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtinctionCoeffsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: [0.06, 0.06, 0.06]
  /// Constraints: No constraints specified.
  public string ExtinctionCoeffsUnc(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtinctionCoeffsUncLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  public string SkyBgs(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SkyBgsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  public string LocalSkyBgs(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LocalSkyBgsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
  /// Example: /// Example: [0.065, 0.065, 0.065]
  /// Constraints: No constraints specified.
  public string LocalSkyBgsUnc(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LocalSkyBgsUncLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [6, 6, 6]
  /// Constraints: No constraints specified.
  public string NumDetectedStars(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NumDetectedStarsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [3, 3, 3]
  /// Constraints: No constraints specified.
  public string NumCorrelatedStars(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NumCorrelatedStarsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
  /// Example: /// Example: [24.711, 24.711, 24.711]
  /// Constraints: No constraints specified.
  public string ZeroPoints(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZeroPointsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
  /// Example: /// Example: [107.4, 107.4, 107.4]
  /// Constraints: No constraints specified.
  public string Ras(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RasLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [-0.45, -0.45, -0.45]
  /// Constraints: No constraints specified.
  public string Declinations(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeclinationsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [0, 0, 0]
  /// Constraints: No constraints specified.
  public string RaRates(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RaRatesLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
  /// Example: /// Example: [0.1, 0.2, 1]
  /// Constraints: No constraints specified.
  public string PercentSats(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PercentSatsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<OpticalSOIObservation_Full> CreateOpticalSOIObservation_Full(FlatBufferBuilder builder,
      StringOffset obStartTimeOffset = default(StringOffset),
      VectorOffset intensityTimesOffset = default(VectorOffset),
      int currentSpectralFilterNum = 0,
      double expDuration = 0.0,
      VectorOffset intensitiesOffset = default(VectorOffset),
      VectorOffset extinctionCoeffsOffset = default(VectorOffset),
      VectorOffset extinctionCoeffsUncOffset = default(VectorOffset),
      VectorOffset skyBgsOffset = default(VectorOffset),
      VectorOffset localSkyBgsOffset = default(VectorOffset),
      VectorOffset localSkyBgsUncOffset = default(VectorOffset),
      VectorOffset numDetectedStarsOffset = default(VectorOffset),
      VectorOffset numCorrelatedStarsOffset = default(VectorOffset),
      VectorOffset zeroPointsOffset = default(VectorOffset),
      VectorOffset rasOffset = default(VectorOffset),
      VectorOffset declinationsOffset = default(VectorOffset),
      VectorOffset raRatesOffset = default(VectorOffset),
      VectorOffset percentSatsOffset = default(VectorOffset)) {
    builder.StartTable(17);
    OpticalSOIObservation_Full.AddExpDuration(builder, expDuration);
    OpticalSOIObservation_Full.AddPercentSats(builder, percentSatsOffset);
    OpticalSOIObservation_Full.AddRaRates(builder, raRatesOffset);
    OpticalSOIObservation_Full.AddDeclinations(builder, declinationsOffset);
    OpticalSOIObservation_Full.AddRas(builder, rasOffset);
    OpticalSOIObservation_Full.AddZeroPoints(builder, zeroPointsOffset);
    OpticalSOIObservation_Full.AddNumCorrelatedStars(builder, numCorrelatedStarsOffset);
    OpticalSOIObservation_Full.AddNumDetectedStars(builder, numDetectedStarsOffset);
    OpticalSOIObservation_Full.AddLocalSkyBgsUnc(builder, localSkyBgsUncOffset);
    OpticalSOIObservation_Full.AddLocalSkyBgs(builder, localSkyBgsOffset);
    OpticalSOIObservation_Full.AddSkyBgs(builder, skyBgsOffset);
    OpticalSOIObservation_Full.AddExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset);
    OpticalSOIObservation_Full.AddExtinctionCoeffs(builder, extinctionCoeffsOffset);
    OpticalSOIObservation_Full.AddIntensities(builder, intensitiesOffset);
    OpticalSOIObservation_Full.AddCurrentSpectralFilterNum(builder, currentSpectralFilterNum);
    OpticalSOIObservation_Full.AddIntensityTimes(builder, intensityTimesOffset);
    OpticalSOIObservation_Full.AddObStartTime(builder, obStartTimeOffset);
    return OpticalSOIObservation_Full.EndOpticalSOIObservation_Full(builder);
  }

  public static void StartOpticalSOIObservation_Full(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddObStartTime(FlatBufferBuilder builder, StringOffset obStartTimeOffset) { builder.AddOffset(0, obStartTimeOffset.Value, 0); }
  public static void AddIntensityTimes(FlatBufferBuilder builder, VectorOffset intensityTimesOffset) { builder.AddOffset(1, intensityTimesOffset.Value, 0); }
  public static VectorOffset CreateIntensityTimesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntensityTimesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensityTimesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensityTimesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntensityTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCurrentSpectralFilterNum(FlatBufferBuilder builder, int currentSpectralFilterNum) { builder.AddInt(2, currentSpectralFilterNum, 0); }
  public static void AddExpDuration(FlatBufferBuilder builder, double expDuration) { builder.AddDouble(3, expDuration, 0.0); }
  public static void AddIntensities(FlatBufferBuilder builder, VectorOffset intensitiesOffset) { builder.AddOffset(4, intensitiesOffset.Value, 0); }
  public static VectorOffset CreateIntensitiesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntensitiesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensitiesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntensitiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntensitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtinctionCoeffs(FlatBufferBuilder builder, VectorOffset extinctionCoeffsOffset) { builder.AddOffset(5, extinctionCoeffsOffset.Value, 0); }
  public static VectorOffset CreateExtinctionCoeffsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtinctionCoeffsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtinctionCoeffsUnc(FlatBufferBuilder builder, VectorOffset extinctionCoeffsUncOffset) { builder.AddOffset(6, extinctionCoeffsUncOffset.Value, 0); }
  public static VectorOffset CreateExtinctionCoeffsUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtinctionCoeffsUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSkyBgs(FlatBufferBuilder builder, VectorOffset skyBgsOffset) { builder.AddOffset(7, skyBgsOffset.Value, 0); }
  public static VectorOffset CreateSkyBgsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkyBgsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkyBgsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkyBgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkyBgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocalSkyBgs(FlatBufferBuilder builder, VectorOffset localSkyBgsOffset) { builder.AddOffset(8, localSkyBgsOffset.Value, 0); }
  public static VectorOffset CreateLocalSkyBgsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLocalSkyBgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLocalSkyBgsUnc(FlatBufferBuilder builder, VectorOffset localSkyBgsUncOffset) { builder.AddOffset(9, localSkyBgsUncOffset.Value, 0); }
  public static VectorOffset CreateLocalSkyBgsUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLocalSkyBgsUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLocalSkyBgsUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumDetectedStars(FlatBufferBuilder builder, VectorOffset numDetectedStarsOffset) { builder.AddOffset(10, numDetectedStarsOffset.Value, 0); }
  public static VectorOffset CreateNumDetectedStarsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNumDetectedStarsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNumDetectedStarsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNumDetectedStarsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNumDetectedStarsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumCorrelatedStars(FlatBufferBuilder builder, VectorOffset numCorrelatedStarsOffset) { builder.AddOffset(11, numCorrelatedStarsOffset.Value, 0); }
  public static VectorOffset CreateNumCorrelatedStarsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNumCorrelatedStarsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNumCorrelatedStarsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNumCorrelatedStarsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNumCorrelatedStarsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZeroPoints(FlatBufferBuilder builder, VectorOffset zeroPointsOffset) { builder.AddOffset(12, zeroPointsOffset.Value, 0); }
  public static VectorOffset CreateZeroPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZeroPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRas(FlatBufferBuilder builder, VectorOffset rasOffset) { builder.AddOffset(13, rasOffset.Value, 0); }
  public static VectorOffset CreateRasVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRasVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRasVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeclinations(FlatBufferBuilder builder, VectorOffset declinationsOffset) { builder.AddOffset(14, declinationsOffset.Value, 0); }
  public static VectorOffset CreateDeclinationsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeclinationsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeclinationsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeclinationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeclinationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRaRates(FlatBufferBuilder builder, VectorOffset raRatesOffset) { builder.AddOffset(15, raRatesOffset.Value, 0); }
  public static VectorOffset CreateRaRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRaRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRaRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRaRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRaRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPercentSats(FlatBufferBuilder builder, VectorOffset percentSatsOffset) { builder.AddOffset(16, percentSatsOffset.Value, 0); }
  public static VectorOffset CreatePercentSatsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePercentSatsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercentSatsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePercentSatsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPercentSatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<OpticalSOIObservation_Full> EndOpticalSOIObservation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OpticalSOIObservation_Full>(o);
  }
  public static void FinishOpticalSOIObservation_FullBuffer(FlatBufferBuilder builder, Offset<OpticalSOIObservation_Full> offset) { builder.Finish(offset.Value, "OPTI"); }
  public static void FinishSizePrefixedOpticalSOIObservation_FullBuffer(FlatBufferBuilder builder, Offset<OpticalSOIObservation_Full> offset) { builder.FinishSizePrefixed(offset.Value, "OPTI"); }
  public OpticalSOIObservation_FullT UnPack() {
    var _o = new OpticalSOIObservation_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OpticalSOIObservation_FullT _o) {
    _o.ObStartTime = this.ObStartTime;
    _o.IntensityTimes = new List<string>();
    for (var _j = 0; _j < this.IntensityTimesLength; ++_j) {_o.IntensityTimes.Add(this.IntensityTimes(_j));}
    _o.CurrentSpectralFilterNum = this.CurrentSpectralFilterNum;
    _o.ExpDuration = this.ExpDuration;
    _o.Intensities = new List<string>();
    for (var _j = 0; _j < this.IntensitiesLength; ++_j) {_o.Intensities.Add(this.Intensities(_j));}
    _o.ExtinctionCoeffs = new List<string>();
    for (var _j = 0; _j < this.ExtinctionCoeffsLength; ++_j) {_o.ExtinctionCoeffs.Add(this.ExtinctionCoeffs(_j));}
    _o.ExtinctionCoeffsUnc = new List<string>();
    for (var _j = 0; _j < this.ExtinctionCoeffsUncLength; ++_j) {_o.ExtinctionCoeffsUnc.Add(this.ExtinctionCoeffsUnc(_j));}
    _o.SkyBgs = new List<string>();
    for (var _j = 0; _j < this.SkyBgsLength; ++_j) {_o.SkyBgs.Add(this.SkyBgs(_j));}
    _o.LocalSkyBgs = new List<string>();
    for (var _j = 0; _j < this.LocalSkyBgsLength; ++_j) {_o.LocalSkyBgs.Add(this.LocalSkyBgs(_j));}
    _o.LocalSkyBgsUnc = new List<string>();
    for (var _j = 0; _j < this.LocalSkyBgsUncLength; ++_j) {_o.LocalSkyBgsUnc.Add(this.LocalSkyBgsUnc(_j));}
    _o.NumDetectedStars = new List<string>();
    for (var _j = 0; _j < this.NumDetectedStarsLength; ++_j) {_o.NumDetectedStars.Add(this.NumDetectedStars(_j));}
    _o.NumCorrelatedStars = new List<string>();
    for (var _j = 0; _j < this.NumCorrelatedStarsLength; ++_j) {_o.NumCorrelatedStars.Add(this.NumCorrelatedStars(_j));}
    _o.ZeroPoints = new List<string>();
    for (var _j = 0; _j < this.ZeroPointsLength; ++_j) {_o.ZeroPoints.Add(this.ZeroPoints(_j));}
    _o.Ras = new List<string>();
    for (var _j = 0; _j < this.RasLength; ++_j) {_o.Ras.Add(this.Ras(_j));}
    _o.Declinations = new List<string>();
    for (var _j = 0; _j < this.DeclinationsLength; ++_j) {_o.Declinations.Add(this.Declinations(_j));}
    _o.RaRates = new List<string>();
    for (var _j = 0; _j < this.RaRatesLength; ++_j) {_o.RaRates.Add(this.RaRates(_j));}
    _o.PercentSats = new List<string>();
    for (var _j = 0; _j < this.PercentSatsLength; ++_j) {_o.PercentSats.Add(this.PercentSats(_j));}
  }
  public static Offset<OpticalSOIObservation_Full> Pack(FlatBufferBuilder builder, OpticalSOIObservation_FullT _o) {
    if (_o == null) return default(Offset<OpticalSOIObservation_Full>);
    var _obStartTime = _o.ObStartTime == null ? default(StringOffset) : builder.CreateString(_o.ObStartTime);
    var _intensityTimes = default(VectorOffset);
    if (_o.IntensityTimes != null) {
      var __intensityTimes = new StringOffset[_o.IntensityTimes.Count];
      for (var _j = 0; _j < __intensityTimes.Length; ++_j) { __intensityTimes[_j] = builder.CreateString(_o.IntensityTimes[_j]); }
      _intensityTimes = CreateIntensityTimesVector(builder, __intensityTimes);
    }
    var _intensities = default(VectorOffset);
    if (_o.Intensities != null) {
      var __intensities = new StringOffset[_o.Intensities.Count];
      for (var _j = 0; _j < __intensities.Length; ++_j) { __intensities[_j] = builder.CreateString(_o.Intensities[_j]); }
      _intensities = CreateIntensitiesVector(builder, __intensities);
    }
    var _extinctionCoeffs = default(VectorOffset);
    if (_o.ExtinctionCoeffs != null) {
      var __extinctionCoeffs = new StringOffset[_o.ExtinctionCoeffs.Count];
      for (var _j = 0; _j < __extinctionCoeffs.Length; ++_j) { __extinctionCoeffs[_j] = builder.CreateString(_o.ExtinctionCoeffs[_j]); }
      _extinctionCoeffs = CreateExtinctionCoeffsVector(builder, __extinctionCoeffs);
    }
    var _extinctionCoeffsUnc = default(VectorOffset);
    if (_o.ExtinctionCoeffsUnc != null) {
      var __extinctionCoeffsUnc = new StringOffset[_o.ExtinctionCoeffsUnc.Count];
      for (var _j = 0; _j < __extinctionCoeffsUnc.Length; ++_j) { __extinctionCoeffsUnc[_j] = builder.CreateString(_o.ExtinctionCoeffsUnc[_j]); }
      _extinctionCoeffsUnc = CreateExtinctionCoeffsUncVector(builder, __extinctionCoeffsUnc);
    }
    var _skyBgs = default(VectorOffset);
    if (_o.SkyBgs != null) {
      var __skyBgs = new StringOffset[_o.SkyBgs.Count];
      for (var _j = 0; _j < __skyBgs.Length; ++_j) { __skyBgs[_j] = builder.CreateString(_o.SkyBgs[_j]); }
      _skyBgs = CreateSkyBgsVector(builder, __skyBgs);
    }
    var _localSkyBgs = default(VectorOffset);
    if (_o.LocalSkyBgs != null) {
      var __localSkyBgs = new StringOffset[_o.LocalSkyBgs.Count];
      for (var _j = 0; _j < __localSkyBgs.Length; ++_j) { __localSkyBgs[_j] = builder.CreateString(_o.LocalSkyBgs[_j]); }
      _localSkyBgs = CreateLocalSkyBgsVector(builder, __localSkyBgs);
    }
    var _localSkyBgsUnc = default(VectorOffset);
    if (_o.LocalSkyBgsUnc != null) {
      var __localSkyBgsUnc = new StringOffset[_o.LocalSkyBgsUnc.Count];
      for (var _j = 0; _j < __localSkyBgsUnc.Length; ++_j) { __localSkyBgsUnc[_j] = builder.CreateString(_o.LocalSkyBgsUnc[_j]); }
      _localSkyBgsUnc = CreateLocalSkyBgsUncVector(builder, __localSkyBgsUnc);
    }
    var _numDetectedStars = default(VectorOffset);
    if (_o.NumDetectedStars != null) {
      var __numDetectedStars = new StringOffset[_o.NumDetectedStars.Count];
      for (var _j = 0; _j < __numDetectedStars.Length; ++_j) { __numDetectedStars[_j] = builder.CreateString(_o.NumDetectedStars[_j]); }
      _numDetectedStars = CreateNumDetectedStarsVector(builder, __numDetectedStars);
    }
    var _numCorrelatedStars = default(VectorOffset);
    if (_o.NumCorrelatedStars != null) {
      var __numCorrelatedStars = new StringOffset[_o.NumCorrelatedStars.Count];
      for (var _j = 0; _j < __numCorrelatedStars.Length; ++_j) { __numCorrelatedStars[_j] = builder.CreateString(_o.NumCorrelatedStars[_j]); }
      _numCorrelatedStars = CreateNumCorrelatedStarsVector(builder, __numCorrelatedStars);
    }
    var _zeroPoints = default(VectorOffset);
    if (_o.ZeroPoints != null) {
      var __zeroPoints = new StringOffset[_o.ZeroPoints.Count];
      for (var _j = 0; _j < __zeroPoints.Length; ++_j) { __zeroPoints[_j] = builder.CreateString(_o.ZeroPoints[_j]); }
      _zeroPoints = CreateZeroPointsVector(builder, __zeroPoints);
    }
    var _ras = default(VectorOffset);
    if (_o.Ras != null) {
      var __ras = new StringOffset[_o.Ras.Count];
      for (var _j = 0; _j < __ras.Length; ++_j) { __ras[_j] = builder.CreateString(_o.Ras[_j]); }
      _ras = CreateRasVector(builder, __ras);
    }
    var _declinations = default(VectorOffset);
    if (_o.Declinations != null) {
      var __declinations = new StringOffset[_o.Declinations.Count];
      for (var _j = 0; _j < __declinations.Length; ++_j) { __declinations[_j] = builder.CreateString(_o.Declinations[_j]); }
      _declinations = CreateDeclinationsVector(builder, __declinations);
    }
    var _raRates = default(VectorOffset);
    if (_o.RaRates != null) {
      var __raRates = new StringOffset[_o.RaRates.Count];
      for (var _j = 0; _j < __raRates.Length; ++_j) { __raRates[_j] = builder.CreateString(_o.RaRates[_j]); }
      _raRates = CreateRaRatesVector(builder, __raRates);
    }
    var _percentSats = default(VectorOffset);
    if (_o.PercentSats != null) {
      var __percentSats = new StringOffset[_o.PercentSats.Count];
      for (var _j = 0; _j < __percentSats.Length; ++_j) { __percentSats[_j] = builder.CreateString(_o.PercentSats[_j]); }
      _percentSats = CreatePercentSatsVector(builder, __percentSats);
    }
    return CreateOpticalSOIObservation_Full(
      builder,
      _obStartTime,
      _intensityTimes,
      _o.CurrentSpectralFilterNum,
      _o.ExpDuration,
      _intensities,
      _extinctionCoeffs,
      _extinctionCoeffsUnc,
      _skyBgs,
      _localSkyBgs,
      _localSkyBgsUnc,
      _numDetectedStars,
      _numCorrelatedStars,
      _zeroPoints,
      _ras,
      _declinations,
      _raRates,
      _percentSats);
  }
}

public class OpticalSOIObservation_FullT
{
  public string ObStartTime { get; set; }
  public List<string> IntensityTimes { get; set; }
  public int CurrentSpectralFilterNum { get; set; }
  public double ExpDuration { get; set; }
  public List<string> Intensities { get; set; }
  public List<string> ExtinctionCoeffs { get; set; }
  public List<string> ExtinctionCoeffsUnc { get; set; }
  public List<string> SkyBgs { get; set; }
  public List<string> LocalSkyBgs { get; set; }
  public List<string> LocalSkyBgsUnc { get; set; }
  public List<string> NumDetectedStars { get; set; }
  public List<string> NumCorrelatedStars { get; set; }
  public List<string> ZeroPoints { get; set; }
  public List<string> Ras { get; set; }
  public List<string> Declinations { get; set; }
  public List<string> RaRates { get; set; }
  public List<string> PercentSats { get; set; }

  public OpticalSOIObservation_FullT() {
    this.ObStartTime = null;
    this.IntensityTimes = null;
    this.CurrentSpectralFilterNum = 0;
    this.ExpDuration = 0.0;
    this.Intensities = null;
    this.ExtinctionCoeffs = null;
    this.ExtinctionCoeffsUnc = null;
    this.SkyBgs = null;
    this.LocalSkyBgs = null;
    this.LocalSkyBgsUnc = null;
    this.NumDetectedStars = null;
    this.NumCorrelatedStars = null;
    this.ZeroPoints = null;
    this.Ras = null;
    this.Declinations = null;
    this.RaRates = null;
    this.PercentSats = null;
  }
  public static OpticalSOIObservation_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return OpticalSOIObservation_Full.GetRootAsOpticalSOIObservation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OpticalSOIObservation_Full.FinishOpticalSOIObservation_FullBuffer(fbb, OpticalSOIObservation_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OpticalSOIObservation_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ObStartTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*IntensityTimes*/, false)
      && verifier.VerifyField(tablePos, 8 /*CurrentSpectralFilterNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ExpDuration*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Intensities*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*ExtinctionCoeffs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*ExtinctionCoeffsUnc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*SkyBgs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*LocalSkyBgs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*LocalSkyBgsUnc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*NumDetectedStars*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*NumCorrelatedStars*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*ZeroPoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Ras*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*Declinations*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*RaRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*PercentSats*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
