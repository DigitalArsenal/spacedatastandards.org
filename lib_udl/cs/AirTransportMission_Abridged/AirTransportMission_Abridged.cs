// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
public struct AirTransportMission_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirTransportMission_Abridged GetRootAsAirTransportMission_Abridged(ByteBuffer _bb) { return GetRootAsAirTransportMission_Abridged(_bb, new AirTransportMission_Abridged()); }
  public static AirTransportMission_Abridged GetRootAsAirTransportMission_Abridged(ByteBuffer _bb, AirTransportMission_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirTransportMission_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRT"); }
  public static bool VerifyAirTransportMission_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRT", false, AirTransportMission_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirTransportMission_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The mission identifier provided by the originating source.
  /// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigMissionId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigMissionIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOrigMissionIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOrigMissionIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcMissionId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcMissionIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAmcMissionIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAmcMissionIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Global Decision Support System (GDSS) mission unique identifier.
  /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string GdssMissionId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGdssMissionIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGdssMissionIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGdssMissionIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PrevMissionId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrevMissionIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPrevMissionIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPrevMissionIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1122
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PrevAMCMissionId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrevAMCMissionIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPrevAMCMissionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPrevAMCMissionIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string NextMissionId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNextMissionIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNextMissionIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNextMissionIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1124
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string NextAMCMissionId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNextAMCMissionIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNextAMCMissionIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNextAMCMissionIdArray() { return __p.__vector_as_array<byte>(20); }
  /// A description of this mission's objective.
  /// Example: /// Example: Deliver water to island X.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Objective { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectiveBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetObjectiveBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetObjectiveArray() { return __p.__vector_as_array<byte>(22); }
  /// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
  /// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Purpose { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurposeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPurposeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPurposeArray() { return __p.__vector_as_array<byte>(24); }
  /// Highest Joint Chiefs of Staff priority of this mission.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 3, Maximum length = 3
  public string JcsPriority { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJcsPriorityBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetJcsPriorityBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetJcsPriorityArray() { return __p.__vector_as_array<byte>(26); }
  /// Flag indicating this is a close watch mission.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Cw { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Type { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(30); }
  /// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
  /// Example: /// Example: KFAY
  /// Constraints: Minimum length = 4, Maximum length = 4
  public string FirstPickUp { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFirstPickUpBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetFirstPickUpBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetFirstPickUpArray() { return __p.__vector_as_array<byte>(32); }
  /// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
  /// Example: /// Example: PGUA
  /// Constraints: Minimum length = 4, Maximum length = 4
  public string LastDropOff { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastDropOffBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetLastDropOffBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetLastDropOffArray() { return __p.__vector_as_array<byte>(34); }
  /// Mission alias.
  /// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string Alias { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAliasBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetAliasBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetAliasArray() { return __p.__vector_as_array<byte>(36); }
  /// The call sign for this mission.
  /// Example: /// Example: RCH123
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CallSign { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(38); }
  /// The name of the operation that this mission supports.
  /// Example: /// Example: Golden Eye
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string Operation { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperationBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOperationBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOperationArray() { return __p.__vector_as_array<byte>(40); }
  /// Numbered Air Force (NAF) organization that owns the mission.
  /// Example: /// Example: 18AF
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string Naf { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNafBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetNafBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetNafArray() { return __p.__vector_as_array<byte>(42); }
  /// The unit the mission is allocated to.
  /// Example: /// Example: 437 AEW
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string AllocatedUnit { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllocatedUnitBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetAllocatedUnitBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetAllocatedUnitArray() { return __p.__vector_as_array<byte>(44); }
  /// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
  /// Example: /// Example: MIXED
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string LoadCategoryType { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadCategoryTypeBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetLoadCategoryTypeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetLoadCategoryTypeArray() { return __p.__vector_as_array<byte>(46); }
  /// Current state of the mission.
  /// Example: /// Example: EXECUTION
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string State { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(48); }
  /// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
  /// Example: /// Example: -90.12
  /// Constraints: No constraints specified.
  public double SourceSysDeviation { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
  /// Example: /// Example: 1083034
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ApacsId { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApacsIdBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetApacsIdBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetApacsIdArray() { return __p.__vector_as_array<byte>(52); }
  /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  /// Example: /// Example: G2-182402-AB
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string DipWorksheetName { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDipWorksheetNameBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetDipWorksheetNameBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetDipWorksheetNameArray() { return __p.__vector_as_array<byte>(54); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(56); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(58); }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(60); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(62); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(64); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(66); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(68); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirTransportMission_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(70); return o != 0 ? (AirTransportMission_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirTransportMission_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(72); }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Requirements(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RequirementsLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Remarks(int j) { int o = __p.__offset(76); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemarksLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of Hazardous Material information associated with this Air Transport Mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string HazMat(int j) { int o = __p.__offset(78); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HazMatLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AirTransportMission_Abridged> CreateAirTransportMission_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origMissionIdOffset = default(StringOffset),
      StringOffset amcMissionIdOffset = default(StringOffset),
      StringOffset gdssMissionIdOffset = default(StringOffset),
      StringOffset prevMissionIdOffset = default(StringOffset),
      StringOffset prevAMCMissionIdOffset = default(StringOffset),
      StringOffset nextMissionIdOffset = default(StringOffset),
      StringOffset nextAMCMissionIdOffset = default(StringOffset),
      StringOffset objectiveOffset = default(StringOffset),
      StringOffset purposeOffset = default(StringOffset),
      StringOffset jcsPriorityOffset = default(StringOffset),
      bool cw = false,
      StringOffset typeOffset = default(StringOffset),
      StringOffset firstPickUpOffset = default(StringOffset),
      StringOffset lastDropOffOffset = default(StringOffset),
      StringOffset aliasOffset = default(StringOffset),
      StringOffset callSignOffset = default(StringOffset),
      StringOffset operationOffset = default(StringOffset),
      StringOffset nafOffset = default(StringOffset),
      StringOffset allocatedUnitOffset = default(StringOffset),
      StringOffset loadCategoryTypeOffset = default(StringOffset),
      StringOffset stateOffset = default(StringOffset),
      double sourceSysDeviation = 0.0,
      StringOffset apacsIdOffset = default(StringOffset),
      StringOffset dipWorksheetNameOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      AirTransportMission_Abridged_dataMode_Enum dataMode = AirTransportMission_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset),
      VectorOffset requirementsOffset = default(VectorOffset),
      VectorOffset remarksOffset = default(VectorOffset),
      VectorOffset hazMatOffset = default(VectorOffset)) {
    builder.StartTable(38);
    AirTransportMission_Abridged.AddSourceSysDeviation(builder, sourceSysDeviation);
    AirTransportMission_Abridged.AddHazMat(builder, hazMatOffset);
    AirTransportMission_Abridged.AddRemarks(builder, remarksOffset);
    AirTransportMission_Abridged.AddRequirements(builder, requirementsOffset);
    AirTransportMission_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AirTransportMission_Abridged.AddOrigin(builder, originOffset);
    AirTransportMission_Abridged.AddSource(builder, sourceOffset);
    AirTransportMission_Abridged.AddSourceDL(builder, sourceDLOffset);
    AirTransportMission_Abridged.AddUpdatedBy(builder, updatedByOffset);
    AirTransportMission_Abridged.AddUpdatedAt(builder, updatedAtOffset);
    AirTransportMission_Abridged.AddCreatedBy(builder, createdByOffset);
    AirTransportMission_Abridged.AddCreatedAt(builder, createdAtOffset);
    AirTransportMission_Abridged.AddDipWorksheetName(builder, dipWorksheetNameOffset);
    AirTransportMission_Abridged.AddApacsId(builder, apacsIdOffset);
    AirTransportMission_Abridged.AddState(builder, stateOffset);
    AirTransportMission_Abridged.AddLoadCategoryType(builder, loadCategoryTypeOffset);
    AirTransportMission_Abridged.AddAllocatedUnit(builder, allocatedUnitOffset);
    AirTransportMission_Abridged.AddNaf(builder, nafOffset);
    AirTransportMission_Abridged.AddOperation(builder, operationOffset);
    AirTransportMission_Abridged.AddCallSign(builder, callSignOffset);
    AirTransportMission_Abridged.AddAlias(builder, aliasOffset);
    AirTransportMission_Abridged.AddLastDropOff(builder, lastDropOffOffset);
    AirTransportMission_Abridged.AddFirstPickUp(builder, firstPickUpOffset);
    AirTransportMission_Abridged.AddType(builder, typeOffset);
    AirTransportMission_Abridged.AddJcsPriority(builder, jcsPriorityOffset);
    AirTransportMission_Abridged.AddPurpose(builder, purposeOffset);
    AirTransportMission_Abridged.AddObjective(builder, objectiveOffset);
    AirTransportMission_Abridged.AddNextAMCMissionId(builder, nextAMCMissionIdOffset);
    AirTransportMission_Abridged.AddNextMissionId(builder, nextMissionIdOffset);
    AirTransportMission_Abridged.AddPrevAMCMissionId(builder, prevAMCMissionIdOffset);
    AirTransportMission_Abridged.AddPrevMissionId(builder, prevMissionIdOffset);
    AirTransportMission_Abridged.AddGdssMissionId(builder, gdssMissionIdOffset);
    AirTransportMission_Abridged.AddAmcMissionId(builder, amcMissionIdOffset);
    AirTransportMission_Abridged.AddOrigMissionId(builder, origMissionIdOffset);
    AirTransportMission_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AirTransportMission_Abridged.AddId(builder, idOffset);
    AirTransportMission_Abridged.AddDataMode(builder, dataMode);
    AirTransportMission_Abridged.AddCw(builder, cw);
    return AirTransportMission_Abridged.EndAirTransportMission_Abridged(builder);
  }

  public static void StartAirTransportMission_Abridged(FlatBufferBuilder builder) { builder.StartTable(38); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOrigMissionId(FlatBufferBuilder builder, StringOffset origMissionIdOffset) { builder.AddOffset(2, origMissionIdOffset.Value, 0); }
  public static void AddAmcMissionId(FlatBufferBuilder builder, StringOffset amcMissionIdOffset) { builder.AddOffset(3, amcMissionIdOffset.Value, 0); }
  public static void AddGdssMissionId(FlatBufferBuilder builder, StringOffset gdssMissionIdOffset) { builder.AddOffset(4, gdssMissionIdOffset.Value, 0); }
  public static void AddPrevMissionId(FlatBufferBuilder builder, StringOffset prevMissionIdOffset) { builder.AddOffset(5, prevMissionIdOffset.Value, 0); }
  public static void AddPrevAMCMissionId(FlatBufferBuilder builder, StringOffset prevAMCMissionIdOffset) { builder.AddOffset(6, prevAMCMissionIdOffset.Value, 0); }
  public static void AddNextMissionId(FlatBufferBuilder builder, StringOffset nextMissionIdOffset) { builder.AddOffset(7, nextMissionIdOffset.Value, 0); }
  public static void AddNextAMCMissionId(FlatBufferBuilder builder, StringOffset nextAMCMissionIdOffset) { builder.AddOffset(8, nextAMCMissionIdOffset.Value, 0); }
  public static void AddObjective(FlatBufferBuilder builder, StringOffset objectiveOffset) { builder.AddOffset(9, objectiveOffset.Value, 0); }
  public static void AddPurpose(FlatBufferBuilder builder, StringOffset purposeOffset) { builder.AddOffset(10, purposeOffset.Value, 0); }
  public static void AddJcsPriority(FlatBufferBuilder builder, StringOffset jcsPriorityOffset) { builder.AddOffset(11, jcsPriorityOffset.Value, 0); }
  public static void AddCw(FlatBufferBuilder builder, bool cw) { builder.AddBool(12, cw, false); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(13, typeOffset.Value, 0); }
  public static void AddFirstPickUp(FlatBufferBuilder builder, StringOffset firstPickUpOffset) { builder.AddOffset(14, firstPickUpOffset.Value, 0); }
  public static void AddLastDropOff(FlatBufferBuilder builder, StringOffset lastDropOffOffset) { builder.AddOffset(15, lastDropOffOffset.Value, 0); }
  public static void AddAlias(FlatBufferBuilder builder, StringOffset aliasOffset) { builder.AddOffset(16, aliasOffset.Value, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(17, callSignOffset.Value, 0); }
  public static void AddOperation(FlatBufferBuilder builder, StringOffset operationOffset) { builder.AddOffset(18, operationOffset.Value, 0); }
  public static void AddNaf(FlatBufferBuilder builder, StringOffset nafOffset) { builder.AddOffset(19, nafOffset.Value, 0); }
  public static void AddAllocatedUnit(FlatBufferBuilder builder, StringOffset allocatedUnitOffset) { builder.AddOffset(20, allocatedUnitOffset.Value, 0); }
  public static void AddLoadCategoryType(FlatBufferBuilder builder, StringOffset loadCategoryTypeOffset) { builder.AddOffset(21, loadCategoryTypeOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(22, stateOffset.Value, 0); }
  public static void AddSourceSysDeviation(FlatBufferBuilder builder, double sourceSysDeviation) { builder.AddDouble(23, sourceSysDeviation, 0.0); }
  public static void AddApacsId(FlatBufferBuilder builder, StringOffset apacsIdOffset) { builder.AddOffset(24, apacsIdOffset.Value, 0); }
  public static void AddDipWorksheetName(FlatBufferBuilder builder, StringOffset dipWorksheetNameOffset) { builder.AddOffset(25, dipWorksheetNameOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(26, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(27, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(28, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(29, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(30, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(31, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(32, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirTransportMission_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(33, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(34, origNetworkOffset.Value, 0); }
  public static void AddRequirements(FlatBufferBuilder builder, VectorOffset requirementsOffset) { builder.AddOffset(35, requirementsOffset.Value, 0); }
  public static VectorOffset CreateRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemarks(FlatBufferBuilder builder, VectorOffset remarksOffset) { builder.AddOffset(36, remarksOffset.Value, 0); }
  public static VectorOffset CreateRemarksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHazMat(FlatBufferBuilder builder, VectorOffset hazMatOffset) { builder.AddOffset(37, hazMatOffset.Value, 0); }
  public static VectorOffset CreateHazMatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHazMatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHazMatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHazMatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHazMatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AirTransportMission_Abridged> EndAirTransportMission_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirTransportMission_Abridged>(o);
  }
  public static void FinishAirTransportMission_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirTransportMission_Abridged> offset) { builder.Finish(offset.Value, "AIRT"); }
  public static void FinishSizePrefixedAirTransportMission_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirTransportMission_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRT"); }
  public AirTransportMission_AbridgedT UnPack() {
    var _o = new AirTransportMission_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirTransportMission_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigMissionId = this.OrigMissionId;
    _o.AmcMissionId = this.AmcMissionId;
    _o.GdssMissionId = this.GdssMissionId;
    _o.PrevMissionId = this.PrevMissionId;
    _o.PrevAMCMissionId = this.PrevAMCMissionId;
    _o.NextMissionId = this.NextMissionId;
    _o.NextAMCMissionId = this.NextAMCMissionId;
    _o.Objective = this.Objective;
    _o.Purpose = this.Purpose;
    _o.JcsPriority = this.JcsPriority;
    _o.Cw = this.Cw;
    _o.Type = this.Type;
    _o.FirstPickUp = this.FirstPickUp;
    _o.LastDropOff = this.LastDropOff;
    _o.Alias = this.Alias;
    _o.CallSign = this.CallSign;
    _o.Operation = this.Operation;
    _o.Naf = this.Naf;
    _o.AllocatedUnit = this.AllocatedUnit;
    _o.LoadCategoryType = this.LoadCategoryType;
    _o.State = this.State;
    _o.SourceSysDeviation = this.SourceSysDeviation;
    _o.ApacsId = this.ApacsId;
    _o.DipWorksheetName = this.DipWorksheetName;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
    _o.Requirements = new List<string>();
    for (var _j = 0; _j < this.RequirementsLength; ++_j) {_o.Requirements.Add(this.Requirements(_j));}
    _o.Remarks = new List<string>();
    for (var _j = 0; _j < this.RemarksLength; ++_j) {_o.Remarks.Add(this.Remarks(_j));}
    _o.HazMat = new List<string>();
    for (var _j = 0; _j < this.HazMatLength; ++_j) {_o.HazMat.Add(this.HazMat(_j));}
  }
  public static Offset<AirTransportMission_Abridged> Pack(FlatBufferBuilder builder, AirTransportMission_AbridgedT _o) {
    if (_o == null) return default(Offset<AirTransportMission_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origMissionId = _o.OrigMissionId == null ? default(StringOffset) : builder.CreateString(_o.OrigMissionId);
    var _amcMissionId = _o.AmcMissionId == null ? default(StringOffset) : builder.CreateString(_o.AmcMissionId);
    var _gdssMissionId = _o.GdssMissionId == null ? default(StringOffset) : builder.CreateString(_o.GdssMissionId);
    var _prevMissionId = _o.PrevMissionId == null ? default(StringOffset) : builder.CreateString(_o.PrevMissionId);
    var _prevAMCMissionId = _o.PrevAMCMissionId == null ? default(StringOffset) : builder.CreateString(_o.PrevAMCMissionId);
    var _nextMissionId = _o.NextMissionId == null ? default(StringOffset) : builder.CreateString(_o.NextMissionId);
    var _nextAMCMissionId = _o.NextAMCMissionId == null ? default(StringOffset) : builder.CreateString(_o.NextAMCMissionId);
    var _objective = _o.Objective == null ? default(StringOffset) : builder.CreateString(_o.Objective);
    var _purpose = _o.Purpose == null ? default(StringOffset) : builder.CreateString(_o.Purpose);
    var _jcsPriority = _o.JcsPriority == null ? default(StringOffset) : builder.CreateString(_o.JcsPriority);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _firstPickUp = _o.FirstPickUp == null ? default(StringOffset) : builder.CreateString(_o.FirstPickUp);
    var _lastDropOff = _o.LastDropOff == null ? default(StringOffset) : builder.CreateString(_o.LastDropOff);
    var _alias = _o.Alias == null ? default(StringOffset) : builder.CreateString(_o.Alias);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _operation = _o.Operation == null ? default(StringOffset) : builder.CreateString(_o.Operation);
    var _naf = _o.Naf == null ? default(StringOffset) : builder.CreateString(_o.Naf);
    var _allocatedUnit = _o.AllocatedUnit == null ? default(StringOffset) : builder.CreateString(_o.AllocatedUnit);
    var _loadCategoryType = _o.LoadCategoryType == null ? default(StringOffset) : builder.CreateString(_o.LoadCategoryType);
    var _state = _o.State == null ? default(StringOffset) : builder.CreateString(_o.State);
    var _apacsId = _o.ApacsId == null ? default(StringOffset) : builder.CreateString(_o.ApacsId);
    var _dipWorksheetName = _o.DipWorksheetName == null ? default(StringOffset) : builder.CreateString(_o.DipWorksheetName);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _requirements = default(VectorOffset);
    if (_o.Requirements != null) {
      var __requirements = new StringOffset[_o.Requirements.Count];
      for (var _j = 0; _j < __requirements.Length; ++_j) { __requirements[_j] = builder.CreateString(_o.Requirements[_j]); }
      _requirements = CreateRequirementsVector(builder, __requirements);
    }
    var _remarks = default(VectorOffset);
    if (_o.Remarks != null) {
      var __remarks = new StringOffset[_o.Remarks.Count];
      for (var _j = 0; _j < __remarks.Length; ++_j) { __remarks[_j] = builder.CreateString(_o.Remarks[_j]); }
      _remarks = CreateRemarksVector(builder, __remarks);
    }
    var _hazMat = default(VectorOffset);
    if (_o.HazMat != null) {
      var __hazMat = new StringOffset[_o.HazMat.Count];
      for (var _j = 0; _j < __hazMat.Length; ++_j) { __hazMat[_j] = builder.CreateString(_o.HazMat[_j]); }
      _hazMat = CreateHazMatVector(builder, __hazMat);
    }
    return CreateAirTransportMission_Abridged(
      builder,
      _id,
      _classificationMarking,
      _origMissionId,
      _amcMissionId,
      _gdssMissionId,
      _prevMissionId,
      _prevAMCMissionId,
      _nextMissionId,
      _nextAMCMissionId,
      _objective,
      _purpose,
      _jcsPriority,
      _o.Cw,
      _type,
      _firstPickUp,
      _lastDropOff,
      _alias,
      _callSign,
      _operation,
      _naf,
      _allocatedUnit,
      _loadCategoryType,
      _state,
      _o.SourceSysDeviation,
      _apacsId,
      _dipWorksheetName,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork,
      _requirements,
      _remarks,
      _hazMat);
  }
}

public class AirTransportMission_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigMissionId { get; set; }
  public string AmcMissionId { get; set; }
  public string GdssMissionId { get; set; }
  public string PrevMissionId { get; set; }
  public string PrevAMCMissionId { get; set; }
  public string NextMissionId { get; set; }
  public string NextAMCMissionId { get; set; }
  public string Objective { get; set; }
  public string Purpose { get; set; }
  public string JcsPriority { get; set; }
  public bool Cw { get; set; }
  public string Type { get; set; }
  public string FirstPickUp { get; set; }
  public string LastDropOff { get; set; }
  public string Alias { get; set; }
  public string CallSign { get; set; }
  public string Operation { get; set; }
  public string Naf { get; set; }
  public string AllocatedUnit { get; set; }
  public string LoadCategoryType { get; set; }
  public string State { get; set; }
  public double SourceSysDeviation { get; set; }
  public string ApacsId { get; set; }
  public string DipWorksheetName { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public AirTransportMission_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }
  public List<string> Requirements { get; set; }
  public List<string> Remarks { get; set; }
  public List<string> HazMat { get; set; }

  public AirTransportMission_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.OrigMissionId = null;
    this.AmcMissionId = null;
    this.GdssMissionId = null;
    this.PrevMissionId = null;
    this.PrevAMCMissionId = null;
    this.NextMissionId = null;
    this.NextAMCMissionId = null;
    this.Objective = null;
    this.Purpose = null;
    this.JcsPriority = null;
    this.Cw = false;
    this.Type = null;
    this.FirstPickUp = null;
    this.LastDropOff = null;
    this.Alias = null;
    this.CallSign = null;
    this.Operation = null;
    this.Naf = null;
    this.AllocatedUnit = null;
    this.LoadCategoryType = null;
    this.State = null;
    this.SourceSysDeviation = 0.0;
    this.ApacsId = null;
    this.DipWorksheetName = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = AirTransportMission_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
    this.Requirements = null;
    this.Remarks = null;
    this.HazMat = null;
  }
  public static AirTransportMission_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AirTransportMission_Abridged.GetRootAsAirTransportMission_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirTransportMission_Abridged.FinishAirTransportMission_AbridgedBuffer(fbb, AirTransportMission_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirTransportMission_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OrigMissionId*/, false)
      && verifier.VerifyString(tablePos, 10 /*AmcMissionId*/, false)
      && verifier.VerifyString(tablePos, 12 /*GdssMissionId*/, false)
      && verifier.VerifyString(tablePos, 14 /*PrevMissionId*/, false)
      && verifier.VerifyString(tablePos, 16 /*PrevAMCMissionId*/, false)
      && verifier.VerifyString(tablePos, 18 /*NextMissionId*/, false)
      && verifier.VerifyString(tablePos, 20 /*NextAMCMissionId*/, false)
      && verifier.VerifyString(tablePos, 22 /*Objective*/, false)
      && verifier.VerifyString(tablePos, 24 /*Purpose*/, false)
      && verifier.VerifyString(tablePos, 26 /*JcsPriority*/, false)
      && verifier.VerifyField(tablePos, 28 /*Cw*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 30 /*Type*/, false)
      && verifier.VerifyString(tablePos, 32 /*FirstPickUp*/, false)
      && verifier.VerifyString(tablePos, 34 /*LastDropOff*/, false)
      && verifier.VerifyString(tablePos, 36 /*Alias*/, false)
      && verifier.VerifyString(tablePos, 38 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 40 /*Operation*/, false)
      && verifier.VerifyString(tablePos, 42 /*Naf*/, false)
      && verifier.VerifyString(tablePos, 44 /*AllocatedUnit*/, false)
      && verifier.VerifyString(tablePos, 46 /*LoadCategoryType*/, false)
      && verifier.VerifyString(tablePos, 48 /*State*/, false)
      && verifier.VerifyField(tablePos, 50 /*SourceSysDeviation*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 52 /*ApacsId*/, false)
      && verifier.VerifyString(tablePos, 54 /*DipWorksheetName*/, false)
      && verifier.VerifyString(tablePos, 56 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 58 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 60 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 62 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 64 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 66 /*Source*/, false)
      && verifier.VerifyString(tablePos, 68 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 70 /*DataMode*/, 1 /*AirTransportMission_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 72 /*OrigNetwork*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 74 /*Requirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 76 /*Remarks*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 78 /*HazMat*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
