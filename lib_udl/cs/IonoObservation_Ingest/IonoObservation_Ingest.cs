// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
public struct IonoObservation_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static IonoObservation_Ingest GetRootAsIonoObservation_Ingest(ByteBuffer _bb) { return GetRootAsIonoObservation_Ingest(_bb, new IonoObservation_Ingest()); }
  public static IonoObservation_Ingest GetRootAsIonoObservation_Ingest(ByteBuffer _bb, IonoObservation_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IonoObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "IONO"); }
  public static bool VerifyIonoObservation_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("IONO", false, IonoObservation_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IonoObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: IONOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Ionosonde hardware type or data collection type together with possible additional descriptors.
  /// Example: /// Example: Example hardware type
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string System { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSystemBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSystemBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSystemArray() { return __p.__vector_as_array<byte>(12); }
  /// Name of the algorithm used for the electron density profile.
  /// Example: /// Example: NH
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string NeProfileName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNeProfileNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNeProfileNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNeProfileNameArray() { return __p.__vector_as_array<byte>(14); }
  /// Version of the algorithm used for the electron density profile.
  /// Example: /// Example: 4.32
  /// Constraints: No constraints specified.
  public double NeProfileVersion { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string ScalerInfo { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScalerInfoBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetScalerInfoBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetScalerInfoArray() { return __p.__vector_as_array<byte>(18); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string DensityProfile { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDensityProfileBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDensityProfileBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDensityProfileArray() { return __p.__vector_as_array<byte>(20); }
  /// URSI code for station or stations producing the ionosonde.
  /// Example: /// Example: STATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string StationId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStationIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetStationIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetStationIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Sounding Start time in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string StartTimeUTC { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeUTCBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStartTimeUTCBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStartTimeUTCArray() { return __p.__vector_as_array<byte>(24); }
  /// Names of settings.
  /// Example: /// Example: Example settings
  /// Constraints: Minimum length = 1, Maximum length = 1024
  public string SystemInfo { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSystemInfoBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSystemInfoBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSystemInfoArray() { return __p.__vector_as_array<byte>(26); }
  /// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string SystemNotes { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSystemNotesBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSystemNotesBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSystemNotesArray() { return __p.__vector_as_array<byte>(28); }
  /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  /// Constraints: No constraints specified.
  public string TransmitCoordinates(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TransmitCoordinatesLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Enums: Mobile, Static.
  /// Example: /// Example: Mobile
  /// Constraints: Minimum length = 0, Maximum length = 16
  public IonoObservation_Ingest_transmitSensorType_Enum TransmitSensorType { get { int o = __p.__offset(32); return o != 0 ? (IonoObservation_Ingest_transmitSensorType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : IonoObservation_Ingest_transmitSensorType_Enum.MOBILE; } }
  /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  /// Constraints: No constraints specified.
  public string ReceiveCoordinates(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReceiveCoordinatesLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Enums: Mobile, Static.
  /// Example: /// Example: Mobile
  /// Constraints: Minimum length = 0, Maximum length = 16
  public IonoObservation_Ingest_receiveSensorType_Enum ReceiveSensorType { get { int o = __p.__offset(36); return o != 0 ? (IonoObservation_Ingest_receiveSensorType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : IonoObservation_Ingest_receiveSensorType_Enum.MOBILE; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AntennaElementPosition { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAntennaElementPositionBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetAntennaElementPositionBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetAntennaElementPositionArray() { return __p.__vector_as_array<byte>(38); }
  /// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 32
  public IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum AntennaElementPositionCoordinateSystem { get { int o = __p.__offset(40); return o != 0 ? (IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum.J2000; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Power { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPowerBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetPowerBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetPowerArray() { return __p.__vector_as_array<byte>(42); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Range { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRangeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetRangeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetRangeArray() { return __p.__vector_as_array<byte>(44); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Frequency { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFrequencyBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetFrequencyBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetFrequencyArray() { return __p.__vector_as_array<byte>(46); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Polarization { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPolarizationBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPolarizationBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPolarizationArray() { return __p.__vector_as_array<byte>(48); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Azimuth { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAzimuthBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetAzimuthBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetAzimuthArray() { return __p.__vector_as_array<byte>(50); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Elevation { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElevationBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetElevationBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetElevationArray() { return __p.__vector_as_array<byte>(52); }
  /// Array of restricted frequencies.
  /// Example: /// Example: [12.5, 34.5, 45.3]
  /// Constraints: No constraints specified.
  public string RestrictedFrequency(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RestrictedFrequencyLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Notes for the restrictedFrequency data.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string RestrictedFrequencyNotes { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRestrictedFrequencyNotesBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetRestrictedFrequencyNotesBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetRestrictedFrequencyNotesArray() { return __p.__vector_as_array<byte>(56); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Doppler { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDopplerBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetDopplerBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetDopplerArray() { return __p.__vector_as_array<byte>(58); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Time { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetTimeArray() { return __p.__vector_as_array<byte>(60); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Stokes { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStokesBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetStokesBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetStokesArray() { return __p.__vector_as_array<byte>(62); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Amplitude { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmplitudeBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetAmplitudeBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetAmplitudeArray() { return __p.__vector_as_array<byte>(64); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Phase { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhaseBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetPhaseBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetPhaseArray() { return __p.__vector_as_array<byte>(66); }
  /// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
  /// Example: /// Example: 6.75
  /// Constraints: No constraints specified.
  public double FoF2 { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
  /// Example: /// Example: 8.2
  /// Constraints: No constraints specified.
  public double FoF1 { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
  /// Example: /// Example: 4.5
  /// Constraints: No constraints specified.
  public double FxF2 { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
  /// Example: /// Example: 4.2
  /// Constraints: No constraints specified.
  public double FxF1 { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MUF(D)/foF2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Md { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lowest usable frequency.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Luf { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum Usable Frequency for ground distance D in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Mufd { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
  /// Example: /// Example: 2.025
  /// Constraints: No constraints specified.
  public double Fmin { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
  /// Example: /// Example: 2.35
  /// Constraints: No constraints specified.
  public double FoEs { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
  /// Example: /// Example: 2.7
  /// Constraints: No constraints specified.
  public double FminF { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
  /// Example: /// Example: 2.025
  /// Constraints: No constraints specified.
  public double FminE { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FoE { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FxE { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
  /// Example: /// Example: 7.525
  /// Constraints: No constraints specified.
  public double FxI { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
  /// Example: /// Example: 238.5
  /// Constraints: No constraints specified.
  public double HprimeF { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
  /// Example: /// Example: 238.5
  /// Constraints: No constraints specified.
  public double HprimeF2 { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
  /// Example: /// Example: 230.1
  /// Constraints: No constraints specified.
  public double HprimeF1 { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
  /// Example: /// Example: 98.47
  /// Constraints: No constraints specified.
  public double HprimeE { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum height of the trace used to give foEs in km. URSI ID: 34.
  /// Example: /// Example: 95
  /// Constraints: No constraints specified.
  public double HprimeEs { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peak height of E-layer in km. URSI ID: 90.
  /// Example: /// Example: 91.744
  /// Constraints: No constraints specified.
  public double ZmE { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Parabolic E layer semi-thickness in km. URSI ID: 83.
  /// Example: /// Example: 1.722
  /// Constraints: No constraints specified.
  public double YE { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average range spread of F layer in km. URSI ID: 84.
  /// Example: /// Example: 1.83
  /// Constraints: No constraints specified.
  public double Qf { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average range spread of E layer in km. URSI ID: 85.
  /// Example: /// Example: 0.95
  /// Constraints: No constraints specified.
  public double Qe { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lowering of F trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DownF { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lowering of E trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DownE { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Lowering of Es trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DownEs { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
  /// Example: /// Example: 0.075
  /// Constraints: No constraints specified.
  public double Ff { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Frequency spread beyond foE in MHz. URSI ID: 87.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Fe { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance for MUF calculation in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double D { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// MUF/OblFactor in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Fmuf { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Virtual height at MUF/OblFactor frequency in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double HprimefMUF { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Adjustment to the scaled foF2 during profile inversion in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeltafoF2 { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted value of foE in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FoEp { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  public double FhprimeF { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  public double FhprimeF2 { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted value of foF1 in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FoF1p { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted value of foF2 in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FoF2p { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True height of the F2 peak in km. URSI ID: AE.
  /// Example: /// Example: 240.498
  /// Constraints: No constraints specified.
  public double HmF2 { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True height of the F1 peak in km. URSI ID: BE.
  /// Example: /// Example: 230.128
  /// Constraints: No constraints specified.
  public double HmF1 { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True height of the E peak in km. URSI ID: CE.
  /// Example: /// Example: 215.643
  /// Constraints: No constraints specified.
  public double HmE { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
  /// Example: /// Example: 240.498
  /// Constraints: No constraints specified.
  public double ZhalfNm { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum frequency of Es layer in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FminEs { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
  /// Example: /// Example: 62.178
  /// Constraints: No constraints specified.
  public double YF2 { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
  /// Example: /// Example: 55.645
  /// Constraints: No constraints specified.
  public double YF1 { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
  /// Example: /// Example: 24.673
  /// Constraints: No constraints specified.
  public double Tec { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
  /// Example: /// Example: 35.613
  /// Constraints: No constraints specified.
  public double ScaleHeightF2Peak { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// IRI thickness parameter in km. URSI ID: D0.
  /// Example: /// Example: 68.07
  /// Constraints: No constraints specified.
  public double B0 { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// IRI profile shape parameter. URSI ID: D1.
  /// Example: /// Example: 1.87
  /// Constraints: No constraints specified.
  public double B1 { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// IRI profile shape parameter, F1 layer. URSI ID: D2.
  /// Example: /// Example: 1.94
  /// Constraints: No constraints specified.
  public double D1 { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
  /// Example: /// Example: 45.764
  /// Constraints: No constraints specified.
  public double FoEa { get { int o = __p.__offset(166); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
  /// Example: /// Example: 102.6
  /// Constraints: No constraints specified.
  public double HprimeEa { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
  /// Example: /// Example: 87.21
  /// Constraints: No constraints specified.
  public double FoP { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
  /// Example: /// Example: 89.45
  /// Constraints: No constraints specified.
  public double HprimeP { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
  /// Example: /// Example: 34.867
  /// Constraints: No constraints specified.
  public double FbEs { get { int o = __p.__offset(174); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Characterization of the shape of Es trace. URSI ID: 36.
  /// Example: /// Example: Auroral
  /// Constraints: Minimum length = 0, Maximum length = 25
  public string TypeEs { get { int o = __p.__offset(176); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeEsBytes() { return __p.__vector_as_span<byte>(176, 1); }
#else
  public ArraySegment<byte>? GetTypeEsBytes() { return __p.__vector_as_arraysegment(176); }
#endif
  public byte[] GetTypeEsArray() { return __p.__vector_as_array<byte>(176); }
  /// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
  /// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CharAtts(int j) { int o = __p.__offset(178); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CharAttsLength { get { int o = __p.__offset(178); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string Height(int j) { int o = __p.__offset(180); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HeightLength { get { int o = __p.__offset(180); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string PlasmaFrequency(int j) { int o = __p.__offset(182); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PlasmaFrequencyLength { get { int o = __p.__offset(182); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
  /// Example: /// Example: [0.8, 0.2, 0.5]
  /// Constraints: No constraints specified.
  public string PlasmaFrequencyUncertainty(int j) { int o = __p.__offset(184); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PlasmaFrequencyUncertaintyLength { get { int o = __p.__offset(184); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ElectronDensity(int j) { int o = __p.__offset(186); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElectronDensityLength { get { int o = __p.__offset(186); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
  /// Example: /// Example: [0.8, 0.2, 0.5]
  /// Constraints: No constraints specified.
  public string ElectronDensityUncertainty(int j) { int o = __p.__offset(188); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElectronDensityUncertaintyLength { get { int o = __p.__offset(188); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Legacy Artist Flags.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  public string ArtistFlags(int j) { int o = __p.__offset(190); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ArtistFlagsLength { get { int o = __p.__offset(190); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string TraceGeneric { get { int o = __p.__offset(192); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTraceGenericBytes() { return __p.__vector_as_span<byte>(192, 1); }
#else
  public ArraySegment<byte>? GetTraceGenericBytes() { return __p.__vector_as_arraysegment(192); }
#endif
  public byte[] GetTraceGenericArray() { return __p.__vector_as_array<byte>(192); }
  /// Array of speed in m/s at which the disturbance travels through the ionosphere.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string TidPhaseSpeeds(int j) { int o = __p.__offset(194); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TidPhaseSpeedsLength { get { int o = __p.__offset(194); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of degrees clockwise from true North of the TID.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string TidAzimuth(int j) { int o = __p.__offset(196); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TidAzimuthLength { get { int o = __p.__offset(196); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of 1/frequency of the TID wave.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string TidPeriods(int j) { int o = __p.__offset(198); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TidPeriodsLength { get { int o = __p.__offset(198); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Datum { get { int o = __p.__offset(200); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDatumBytes() { return __p.__vector_as_span<byte>(200, 1); }
#else
  public ArraySegment<byte>? GetDatumBytes() { return __p.__vector_as_arraysegment(200); }
#endif
  public byte[] GetDatumArray() { return __p.__vector_as_array<byte>(200); }
  /// Equipment location.
  /// Example: /// Example: Millstone Hill
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string PlatformName { get { int o = __p.__offset(202); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformNameBytes() { return __p.__vector_as_span<byte>(202, 1); }
#else
  public ArraySegment<byte>? GetPlatformNameBytes() { return __p.__vector_as_arraysegment(202); }
#endif
  public byte[] GetPlatformNameArray() { return __p.__vector_as_array<byte>(202); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(204); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(204, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(204); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(204); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(206); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(206, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(206); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(206); }
  /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(208); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(208, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(208); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(208); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(210); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(210, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(210); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(210); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(212); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(212, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(212); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(212); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(214); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(214, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(214); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(214); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public IonoObservation_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(216); return o != 0 ? (IonoObservation_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : IonoObservation_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(218); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(218, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(218); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(218); }

  public static Offset<IonoObservation_Ingest> CreateIonoObservation_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset systemOffset = default(StringOffset),
      StringOffset neProfileNameOffset = default(StringOffset),
      double neProfileVersion = 0.0,
      StringOffset scalerInfoOffset = default(StringOffset),
      StringOffset densityProfileOffset = default(StringOffset),
      StringOffset stationIdOffset = default(StringOffset),
      StringOffset startTimeUTCOffset = default(StringOffset),
      StringOffset systemInfoOffset = default(StringOffset),
      StringOffset systemNotesOffset = default(StringOffset),
      VectorOffset transmitCoordinatesOffset = default(VectorOffset),
      IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType = IonoObservation_Ingest_transmitSensorType_Enum.MOBILE,
      VectorOffset receiveCoordinatesOffset = default(VectorOffset),
      IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType = IonoObservation_Ingest_receiveSensorType_Enum.MOBILE,
      StringOffset antennaElementPositionOffset = default(StringOffset),
      IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum.J2000,
      StringOffset powerOffset = default(StringOffset),
      StringOffset rangeOffset = default(StringOffset),
      StringOffset frequencyOffset = default(StringOffset),
      StringOffset polarizationOffset = default(StringOffset),
      StringOffset azimuthOffset = default(StringOffset),
      StringOffset elevationOffset = default(StringOffset),
      VectorOffset restrictedFrequencyOffset = default(VectorOffset),
      StringOffset restrictedFrequencyNotesOffset = default(StringOffset),
      StringOffset dopplerOffset = default(StringOffset),
      StringOffset timeOffset = default(StringOffset),
      StringOffset stokesOffset = default(StringOffset),
      StringOffset amplitudeOffset = default(StringOffset),
      StringOffset phaseOffset = default(StringOffset),
      double foF2 = 0.0,
      double foF1 = 0.0,
      double fxF2 = 0.0,
      double fxF1 = 0.0,
      double md = 0.0,
      double luf = 0.0,
      double mufd = 0.0,
      double fmin = 0.0,
      double foEs = 0.0,
      double fminF = 0.0,
      double fminE = 0.0,
      double foE = 0.0,
      double fxE = 0.0,
      double fxI = 0.0,
      double hprimeF = 0.0,
      double hprimeF2 = 0.0,
      double hprimeF1 = 0.0,
      double hprimeE = 0.0,
      double hprimeEs = 0.0,
      double zmE = 0.0,
      double yE = 0.0,
      double qf = 0.0,
      double qe = 0.0,
      double downF = 0.0,
      double downE = 0.0,
      double downEs = 0.0,
      double ff = 0.0,
      double fe = 0.0,
      double d = 0.0,
      double fmuf = 0.0,
      double hprimefMUF = 0.0,
      double deltafoF2 = 0.0,
      double foEp = 0.0,
      double fhprimeF = 0.0,
      double fhprimeF2 = 0.0,
      double foF1p = 0.0,
      double foF2p = 0.0,
      double hmF2 = 0.0,
      double hmF1 = 0.0,
      double hmE = 0.0,
      double zhalfNm = 0.0,
      double fminEs = 0.0,
      double yF2 = 0.0,
      double yF1 = 0.0,
      double tec = 0.0,
      double scaleHeightF2Peak = 0.0,
      double b0 = 0.0,
      double b1 = 0.0,
      double d1 = 0.0,
      double foEa = 0.0,
      double hprimeEa = 0.0,
      double foP = 0.0,
      double hprimeP = 0.0,
      double fbEs = 0.0,
      StringOffset typeEsOffset = default(StringOffset),
      VectorOffset charAttsOffset = default(VectorOffset),
      VectorOffset heightOffset = default(VectorOffset),
      VectorOffset plasmaFrequencyOffset = default(VectorOffset),
      VectorOffset plasmaFrequencyUncertaintyOffset = default(VectorOffset),
      VectorOffset electronDensityOffset = default(VectorOffset),
      VectorOffset electronDensityUncertaintyOffset = default(VectorOffset),
      VectorOffset artistFlagsOffset = default(VectorOffset),
      StringOffset traceGenericOffset = default(StringOffset),
      VectorOffset tidPhaseSpeedsOffset = default(VectorOffset),
      VectorOffset tidAzimuthOffset = default(VectorOffset),
      VectorOffset tidPeriodsOffset = default(VectorOffset),
      StringOffset datumOffset = default(StringOffset),
      StringOffset platformNameOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      IonoObservation_Ingest_dataMode_Enum dataMode = IonoObservation_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(108);
    IonoObservation_Ingest.AddFbEs(builder, fbEs);
    IonoObservation_Ingest.AddHprimeP(builder, hprimeP);
    IonoObservation_Ingest.AddFoP(builder, foP);
    IonoObservation_Ingest.AddHprimeEa(builder, hprimeEa);
    IonoObservation_Ingest.AddFoEa(builder, foEa);
    IonoObservation_Ingest.AddD1(builder, d1);
    IonoObservation_Ingest.AddB1(builder, b1);
    IonoObservation_Ingest.AddB0(builder, b0);
    IonoObservation_Ingest.AddScaleHeightF2Peak(builder, scaleHeightF2Peak);
    IonoObservation_Ingest.AddTec(builder, tec);
    IonoObservation_Ingest.AddYF1(builder, yF1);
    IonoObservation_Ingest.AddYF2(builder, yF2);
    IonoObservation_Ingest.AddFminEs(builder, fminEs);
    IonoObservation_Ingest.AddZhalfNm(builder, zhalfNm);
    IonoObservation_Ingest.AddHmE(builder, hmE);
    IonoObservation_Ingest.AddHmF1(builder, hmF1);
    IonoObservation_Ingest.AddHmF2(builder, hmF2);
    IonoObservation_Ingest.AddFoF2p(builder, foF2p);
    IonoObservation_Ingest.AddFoF1p(builder, foF1p);
    IonoObservation_Ingest.AddFhprimeF2(builder, fhprimeF2);
    IonoObservation_Ingest.AddFhprimeF(builder, fhprimeF);
    IonoObservation_Ingest.AddFoEp(builder, foEp);
    IonoObservation_Ingest.AddDeltafoF2(builder, deltafoF2);
    IonoObservation_Ingest.AddHprimefMUF(builder, hprimefMUF);
    IonoObservation_Ingest.AddFmuf(builder, fmuf);
    IonoObservation_Ingest.AddD(builder, d);
    IonoObservation_Ingest.AddFe(builder, fe);
    IonoObservation_Ingest.AddFf(builder, ff);
    IonoObservation_Ingest.AddDownEs(builder, downEs);
    IonoObservation_Ingest.AddDownE(builder, downE);
    IonoObservation_Ingest.AddDownF(builder, downF);
    IonoObservation_Ingest.AddQe(builder, qe);
    IonoObservation_Ingest.AddQf(builder, qf);
    IonoObservation_Ingest.AddYE(builder, yE);
    IonoObservation_Ingest.AddZmE(builder, zmE);
    IonoObservation_Ingest.AddHprimeEs(builder, hprimeEs);
    IonoObservation_Ingest.AddHprimeE(builder, hprimeE);
    IonoObservation_Ingest.AddHprimeF1(builder, hprimeF1);
    IonoObservation_Ingest.AddHprimeF2(builder, hprimeF2);
    IonoObservation_Ingest.AddHprimeF(builder, hprimeF);
    IonoObservation_Ingest.AddFxI(builder, fxI);
    IonoObservation_Ingest.AddFxE(builder, fxE);
    IonoObservation_Ingest.AddFoE(builder, foE);
    IonoObservation_Ingest.AddFminE(builder, fminE);
    IonoObservation_Ingest.AddFminF(builder, fminF);
    IonoObservation_Ingest.AddFoEs(builder, foEs);
    IonoObservation_Ingest.AddFmin(builder, fmin);
    IonoObservation_Ingest.AddMufd(builder, mufd);
    IonoObservation_Ingest.AddLuf(builder, luf);
    IonoObservation_Ingest.AddMd(builder, md);
    IonoObservation_Ingest.AddFxF1(builder, fxF1);
    IonoObservation_Ingest.AddFxF2(builder, fxF2);
    IonoObservation_Ingest.AddFoF1(builder, foF1);
    IonoObservation_Ingest.AddFoF2(builder, foF2);
    IonoObservation_Ingest.AddNeProfileVersion(builder, neProfileVersion);
    IonoObservation_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    IonoObservation_Ingest.AddOrigin(builder, originOffset);
    IonoObservation_Ingest.AddSource(builder, sourceOffset);
    IonoObservation_Ingest.AddUpdatedBy(builder, updatedByOffset);
    IonoObservation_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    IonoObservation_Ingest.AddCreatedBy(builder, createdByOffset);
    IonoObservation_Ingest.AddCreatedAt(builder, createdAtOffset);
    IonoObservation_Ingest.AddPlatformName(builder, platformNameOffset);
    IonoObservation_Ingest.AddDatum(builder, datumOffset);
    IonoObservation_Ingest.AddTidPeriods(builder, tidPeriodsOffset);
    IonoObservation_Ingest.AddTidAzimuth(builder, tidAzimuthOffset);
    IonoObservation_Ingest.AddTidPhaseSpeeds(builder, tidPhaseSpeedsOffset);
    IonoObservation_Ingest.AddTraceGeneric(builder, traceGenericOffset);
    IonoObservation_Ingest.AddArtistFlags(builder, artistFlagsOffset);
    IonoObservation_Ingest.AddElectronDensityUncertainty(builder, electronDensityUncertaintyOffset);
    IonoObservation_Ingest.AddElectronDensity(builder, electronDensityOffset);
    IonoObservation_Ingest.AddPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertaintyOffset);
    IonoObservation_Ingest.AddPlasmaFrequency(builder, plasmaFrequencyOffset);
    IonoObservation_Ingest.AddHeight(builder, heightOffset);
    IonoObservation_Ingest.AddCharAtts(builder, charAttsOffset);
    IonoObservation_Ingest.AddTypeEs(builder, typeEsOffset);
    IonoObservation_Ingest.AddPhase(builder, phaseOffset);
    IonoObservation_Ingest.AddAmplitude(builder, amplitudeOffset);
    IonoObservation_Ingest.AddStokes(builder, stokesOffset);
    IonoObservation_Ingest.AddTime(builder, timeOffset);
    IonoObservation_Ingest.AddDoppler(builder, dopplerOffset);
    IonoObservation_Ingest.AddRestrictedFrequencyNotes(builder, restrictedFrequencyNotesOffset);
    IonoObservation_Ingest.AddRestrictedFrequency(builder, restrictedFrequencyOffset);
    IonoObservation_Ingest.AddElevation(builder, elevationOffset);
    IonoObservation_Ingest.AddAzimuth(builder, azimuthOffset);
    IonoObservation_Ingest.AddPolarization(builder, polarizationOffset);
    IonoObservation_Ingest.AddFrequency(builder, frequencyOffset);
    IonoObservation_Ingest.AddRange(builder, rangeOffset);
    IonoObservation_Ingest.AddPower(builder, powerOffset);
    IonoObservation_Ingest.AddAntennaElementPosition(builder, antennaElementPositionOffset);
    IonoObservation_Ingest.AddReceiveCoordinates(builder, receiveCoordinatesOffset);
    IonoObservation_Ingest.AddTransmitCoordinates(builder, transmitCoordinatesOffset);
    IonoObservation_Ingest.AddSystemNotes(builder, systemNotesOffset);
    IonoObservation_Ingest.AddSystemInfo(builder, systemInfoOffset);
    IonoObservation_Ingest.AddStartTimeUTC(builder, startTimeUTCOffset);
    IonoObservation_Ingest.AddStationId(builder, stationIdOffset);
    IonoObservation_Ingest.AddDensityProfile(builder, densityProfileOffset);
    IonoObservation_Ingest.AddScalerInfo(builder, scalerInfoOffset);
    IonoObservation_Ingest.AddNeProfileName(builder, neProfileNameOffset);
    IonoObservation_Ingest.AddSystem(builder, systemOffset);
    IonoObservation_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    IonoObservation_Ingest.AddIdSensor(builder, idSensorOffset);
    IonoObservation_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    IonoObservation_Ingest.AddId(builder, idOffset);
    IonoObservation_Ingest.AddDataMode(builder, dataMode);
    IonoObservation_Ingest.AddAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem);
    IonoObservation_Ingest.AddReceiveSensorType(builder, receiveSensorType);
    IonoObservation_Ingest.AddTransmitSensorType(builder, transmitSensorType);
    return IonoObservation_Ingest.EndIonoObservation_Ingest(builder);
  }

  public static void StartIonoObservation_Ingest(FlatBufferBuilder builder) { builder.StartTable(108); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(2, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(3, origSensorIdOffset.Value, 0); }
  public static void AddSystem(FlatBufferBuilder builder, StringOffset systemOffset) { builder.AddOffset(4, systemOffset.Value, 0); }
  public static void AddNeProfileName(FlatBufferBuilder builder, StringOffset neProfileNameOffset) { builder.AddOffset(5, neProfileNameOffset.Value, 0); }
  public static void AddNeProfileVersion(FlatBufferBuilder builder, double neProfileVersion) { builder.AddDouble(6, neProfileVersion, 0.0); }
  public static void AddScalerInfo(FlatBufferBuilder builder, StringOffset scalerInfoOffset) { builder.AddOffset(7, scalerInfoOffset.Value, 0); }
  public static void AddDensityProfile(FlatBufferBuilder builder, StringOffset densityProfileOffset) { builder.AddOffset(8, densityProfileOffset.Value, 0); }
  public static void AddStationId(FlatBufferBuilder builder, StringOffset stationIdOffset) { builder.AddOffset(9, stationIdOffset.Value, 0); }
  public static void AddStartTimeUTC(FlatBufferBuilder builder, StringOffset startTimeUTCOffset) { builder.AddOffset(10, startTimeUTCOffset.Value, 0); }
  public static void AddSystemInfo(FlatBufferBuilder builder, StringOffset systemInfoOffset) { builder.AddOffset(11, systemInfoOffset.Value, 0); }
  public static void AddSystemNotes(FlatBufferBuilder builder, StringOffset systemNotesOffset) { builder.AddOffset(12, systemNotesOffset.Value, 0); }
  public static void AddTransmitCoordinates(FlatBufferBuilder builder, VectorOffset transmitCoordinatesOffset) { builder.AddOffset(13, transmitCoordinatesOffset.Value, 0); }
  public static VectorOffset CreateTransmitCoordinatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransmitCoordinatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransmitCoordinatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransmitCoordinatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTransmitCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransmitSensorType(FlatBufferBuilder builder, IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType) { builder.AddSbyte(14, (sbyte)transmitSensorType, 0); }
  public static void AddReceiveCoordinates(FlatBufferBuilder builder, VectorOffset receiveCoordinatesOffset) { builder.AddOffset(15, receiveCoordinatesOffset.Value, 0); }
  public static VectorOffset CreateReceiveCoordinatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReceiveCoordinatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReceiveCoordinatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReceiveCoordinatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReceiveCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReceiveSensorType(FlatBufferBuilder builder, IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType) { builder.AddSbyte(16, (sbyte)receiveSensorType, 0); }
  public static void AddAntennaElementPosition(FlatBufferBuilder builder, StringOffset antennaElementPositionOffset) { builder.AddOffset(17, antennaElementPositionOffset.Value, 0); }
  public static void AddAntennaElementPositionCoordinateSystem(FlatBufferBuilder builder, IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem) { builder.AddSbyte(18, (sbyte)antennaElementPositionCoordinateSystem, 0); }
  public static void AddPower(FlatBufferBuilder builder, StringOffset powerOffset) { builder.AddOffset(19, powerOffset.Value, 0); }
  public static void AddRange(FlatBufferBuilder builder, StringOffset rangeOffset) { builder.AddOffset(20, rangeOffset.Value, 0); }
  public static void AddFrequency(FlatBufferBuilder builder, StringOffset frequencyOffset) { builder.AddOffset(21, frequencyOffset.Value, 0); }
  public static void AddPolarization(FlatBufferBuilder builder, StringOffset polarizationOffset) { builder.AddOffset(22, polarizationOffset.Value, 0); }
  public static void AddAzimuth(FlatBufferBuilder builder, StringOffset azimuthOffset) { builder.AddOffset(23, azimuthOffset.Value, 0); }
  public static void AddElevation(FlatBufferBuilder builder, StringOffset elevationOffset) { builder.AddOffset(24, elevationOffset.Value, 0); }
  public static void AddRestrictedFrequency(FlatBufferBuilder builder, VectorOffset restrictedFrequencyOffset) { builder.AddOffset(25, restrictedFrequencyOffset.Value, 0); }
  public static VectorOffset CreateRestrictedFrequencyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRestrictedFrequencyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRestrictedFrequencyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRestrictedFrequencyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRestrictedFrequencyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRestrictedFrequencyNotes(FlatBufferBuilder builder, StringOffset restrictedFrequencyNotesOffset) { builder.AddOffset(26, restrictedFrequencyNotesOffset.Value, 0); }
  public static void AddDoppler(FlatBufferBuilder builder, StringOffset dopplerOffset) { builder.AddOffset(27, dopplerOffset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset timeOffset) { builder.AddOffset(28, timeOffset.Value, 0); }
  public static void AddStokes(FlatBufferBuilder builder, StringOffset stokesOffset) { builder.AddOffset(29, stokesOffset.Value, 0); }
  public static void AddAmplitude(FlatBufferBuilder builder, StringOffset amplitudeOffset) { builder.AddOffset(30, amplitudeOffset.Value, 0); }
  public static void AddPhase(FlatBufferBuilder builder, StringOffset phaseOffset) { builder.AddOffset(31, phaseOffset.Value, 0); }
  public static void AddFoF2(FlatBufferBuilder builder, double foF2) { builder.AddDouble(32, foF2, 0.0); }
  public static void AddFoF1(FlatBufferBuilder builder, double foF1) { builder.AddDouble(33, foF1, 0.0); }
  public static void AddFxF2(FlatBufferBuilder builder, double fxF2) { builder.AddDouble(34, fxF2, 0.0); }
  public static void AddFxF1(FlatBufferBuilder builder, double fxF1) { builder.AddDouble(35, fxF1, 0.0); }
  public static void AddMd(FlatBufferBuilder builder, double md) { builder.AddDouble(36, md, 0.0); }
  public static void AddLuf(FlatBufferBuilder builder, double luf) { builder.AddDouble(37, luf, 0.0); }
  public static void AddMufd(FlatBufferBuilder builder, double mufd) { builder.AddDouble(38, mufd, 0.0); }
  public static void AddFmin(FlatBufferBuilder builder, double fmin) { builder.AddDouble(39, fmin, 0.0); }
  public static void AddFoEs(FlatBufferBuilder builder, double foEs) { builder.AddDouble(40, foEs, 0.0); }
  public static void AddFminF(FlatBufferBuilder builder, double fminF) { builder.AddDouble(41, fminF, 0.0); }
  public static void AddFminE(FlatBufferBuilder builder, double fminE) { builder.AddDouble(42, fminE, 0.0); }
  public static void AddFoE(FlatBufferBuilder builder, double foE) { builder.AddDouble(43, foE, 0.0); }
  public static void AddFxE(FlatBufferBuilder builder, double fxE) { builder.AddDouble(44, fxE, 0.0); }
  public static void AddFxI(FlatBufferBuilder builder, double fxI) { builder.AddDouble(45, fxI, 0.0); }
  public static void AddHprimeF(FlatBufferBuilder builder, double hprimeF) { builder.AddDouble(46, hprimeF, 0.0); }
  public static void AddHprimeF2(FlatBufferBuilder builder, double hprimeF2) { builder.AddDouble(47, hprimeF2, 0.0); }
  public static void AddHprimeF1(FlatBufferBuilder builder, double hprimeF1) { builder.AddDouble(48, hprimeF1, 0.0); }
  public static void AddHprimeE(FlatBufferBuilder builder, double hprimeE) { builder.AddDouble(49, hprimeE, 0.0); }
  public static void AddHprimeEs(FlatBufferBuilder builder, double hprimeEs) { builder.AddDouble(50, hprimeEs, 0.0); }
  public static void AddZmE(FlatBufferBuilder builder, double zmE) { builder.AddDouble(51, zmE, 0.0); }
  public static void AddYE(FlatBufferBuilder builder, double yE) { builder.AddDouble(52, yE, 0.0); }
  public static void AddQf(FlatBufferBuilder builder, double qf) { builder.AddDouble(53, qf, 0.0); }
  public static void AddQe(FlatBufferBuilder builder, double qe) { builder.AddDouble(54, qe, 0.0); }
  public static void AddDownF(FlatBufferBuilder builder, double downF) { builder.AddDouble(55, downF, 0.0); }
  public static void AddDownE(FlatBufferBuilder builder, double downE) { builder.AddDouble(56, downE, 0.0); }
  public static void AddDownEs(FlatBufferBuilder builder, double downEs) { builder.AddDouble(57, downEs, 0.0); }
  public static void AddFf(FlatBufferBuilder builder, double ff) { builder.AddDouble(58, ff, 0.0); }
  public static void AddFe(FlatBufferBuilder builder, double fe) { builder.AddDouble(59, fe, 0.0); }
  public static void AddD(FlatBufferBuilder builder, double d) { builder.AddDouble(60, d, 0.0); }
  public static void AddFmuf(FlatBufferBuilder builder, double fmuf) { builder.AddDouble(61, fmuf, 0.0); }
  public static void AddHprimefMUF(FlatBufferBuilder builder, double hprimefMUF) { builder.AddDouble(62, hprimefMUF, 0.0); }
  public static void AddDeltafoF2(FlatBufferBuilder builder, double deltafoF2) { builder.AddDouble(63, deltafoF2, 0.0); }
  public static void AddFoEp(FlatBufferBuilder builder, double foEp) { builder.AddDouble(64, foEp, 0.0); }
  public static void AddFhprimeF(FlatBufferBuilder builder, double fhprimeF) { builder.AddDouble(65, fhprimeF, 0.0); }
  public static void AddFhprimeF2(FlatBufferBuilder builder, double fhprimeF2) { builder.AddDouble(66, fhprimeF2, 0.0); }
  public static void AddFoF1p(FlatBufferBuilder builder, double foF1p) { builder.AddDouble(67, foF1p, 0.0); }
  public static void AddFoF2p(FlatBufferBuilder builder, double foF2p) { builder.AddDouble(68, foF2p, 0.0); }
  public static void AddHmF2(FlatBufferBuilder builder, double hmF2) { builder.AddDouble(69, hmF2, 0.0); }
  public static void AddHmF1(FlatBufferBuilder builder, double hmF1) { builder.AddDouble(70, hmF1, 0.0); }
  public static void AddHmE(FlatBufferBuilder builder, double hmE) { builder.AddDouble(71, hmE, 0.0); }
  public static void AddZhalfNm(FlatBufferBuilder builder, double zhalfNm) { builder.AddDouble(72, zhalfNm, 0.0); }
  public static void AddFminEs(FlatBufferBuilder builder, double fminEs) { builder.AddDouble(73, fminEs, 0.0); }
  public static void AddYF2(FlatBufferBuilder builder, double yF2) { builder.AddDouble(74, yF2, 0.0); }
  public static void AddYF1(FlatBufferBuilder builder, double yF1) { builder.AddDouble(75, yF1, 0.0); }
  public static void AddTec(FlatBufferBuilder builder, double tec) { builder.AddDouble(76, tec, 0.0); }
  public static void AddScaleHeightF2Peak(FlatBufferBuilder builder, double scaleHeightF2Peak) { builder.AddDouble(77, scaleHeightF2Peak, 0.0); }
  public static void AddB0(FlatBufferBuilder builder, double b0) { builder.AddDouble(78, b0, 0.0); }
  public static void AddB1(FlatBufferBuilder builder, double b1) { builder.AddDouble(79, b1, 0.0); }
  public static void AddD1(FlatBufferBuilder builder, double d1) { builder.AddDouble(80, d1, 0.0); }
  public static void AddFoEa(FlatBufferBuilder builder, double foEa) { builder.AddDouble(81, foEa, 0.0); }
  public static void AddHprimeEa(FlatBufferBuilder builder, double hprimeEa) { builder.AddDouble(82, hprimeEa, 0.0); }
  public static void AddFoP(FlatBufferBuilder builder, double foP) { builder.AddDouble(83, foP, 0.0); }
  public static void AddHprimeP(FlatBufferBuilder builder, double hprimeP) { builder.AddDouble(84, hprimeP, 0.0); }
  public static void AddFbEs(FlatBufferBuilder builder, double fbEs) { builder.AddDouble(85, fbEs, 0.0); }
  public static void AddTypeEs(FlatBufferBuilder builder, StringOffset typeEsOffset) { builder.AddOffset(86, typeEsOffset.Value, 0); }
  public static void AddCharAtts(FlatBufferBuilder builder, VectorOffset charAttsOffset) { builder.AddOffset(87, charAttsOffset.Value, 0); }
  public static VectorOffset CreateCharAttsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCharAttsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharAttsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCharAttsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCharAttsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHeight(FlatBufferBuilder builder, VectorOffset heightOffset) { builder.AddOffset(88, heightOffset.Value, 0); }
  public static VectorOffset CreateHeightVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHeightVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHeightVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHeightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlasmaFrequency(FlatBufferBuilder builder, VectorOffset plasmaFrequencyOffset) { builder.AddOffset(89, plasmaFrequencyOffset.Value, 0); }
  public static VectorOffset CreatePlasmaFrequencyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlasmaFrequencyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPlasmaFrequencyUncertainty(FlatBufferBuilder builder, VectorOffset plasmaFrequencyUncertaintyOffset) { builder.AddOffset(90, plasmaFrequencyUncertaintyOffset.Value, 0); }
  public static VectorOffset CreatePlasmaFrequencyUncertaintyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyUncertaintyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyUncertaintyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePlasmaFrequencyUncertaintyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPlasmaFrequencyUncertaintyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElectronDensity(FlatBufferBuilder builder, VectorOffset electronDensityOffset) { builder.AddOffset(91, electronDensityOffset.Value, 0); }
  public static VectorOffset CreateElectronDensityVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElectronDensityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElectronDensityUncertainty(FlatBufferBuilder builder, VectorOffset electronDensityUncertaintyOffset) { builder.AddOffset(92, electronDensityUncertaintyOffset.Value, 0); }
  public static VectorOffset CreateElectronDensityUncertaintyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityUncertaintyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityUncertaintyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElectronDensityUncertaintyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElectronDensityUncertaintyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArtistFlags(FlatBufferBuilder builder, VectorOffset artistFlagsOffset) { builder.AddOffset(93, artistFlagsOffset.Value, 0); }
  public static VectorOffset CreateArtistFlagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateArtistFlagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtistFlagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateArtistFlagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartArtistFlagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTraceGeneric(FlatBufferBuilder builder, StringOffset traceGenericOffset) { builder.AddOffset(94, traceGenericOffset.Value, 0); }
  public static void AddTidPhaseSpeeds(FlatBufferBuilder builder, VectorOffset tidPhaseSpeedsOffset) { builder.AddOffset(95, tidPhaseSpeedsOffset.Value, 0); }
  public static VectorOffset CreateTidPhaseSpeedsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTidPhaseSpeedsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidPhaseSpeedsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidPhaseSpeedsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTidPhaseSpeedsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTidAzimuth(FlatBufferBuilder builder, VectorOffset tidAzimuthOffset) { builder.AddOffset(96, tidAzimuthOffset.Value, 0); }
  public static VectorOffset CreateTidAzimuthVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTidAzimuthVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidAzimuthVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidAzimuthVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTidAzimuthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTidPeriods(FlatBufferBuilder builder, VectorOffset tidPeriodsOffset) { builder.AddOffset(97, tidPeriodsOffset.Value, 0); }
  public static VectorOffset CreateTidPeriodsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTidPeriodsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidPeriodsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTidPeriodsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTidPeriodsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDatum(FlatBufferBuilder builder, StringOffset datumOffset) { builder.AddOffset(98, datumOffset.Value, 0); }
  public static void AddPlatformName(FlatBufferBuilder builder, StringOffset platformNameOffset) { builder.AddOffset(99, platformNameOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(100, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(101, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(102, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(103, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(104, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(105, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, IonoObservation_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(106, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(107, origNetworkOffset.Value, 0); }
  public static Offset<IonoObservation_Ingest> EndIonoObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IonoObservation_Ingest>(o);
  }
  public static void FinishIonoObservation_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservation_Ingest> offset) { builder.Finish(offset.Value, "IONO"); }
  public static void FinishSizePrefixedIonoObservation_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservation_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "IONO"); }
  public IonoObservation_IngestT UnPack() {
    var _o = new IonoObservation_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IonoObservation_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.System = this.System;
    _o.NeProfileName = this.NeProfileName;
    _o.NeProfileVersion = this.NeProfileVersion;
    _o.ScalerInfo = this.ScalerInfo;
    _o.DensityProfile = this.DensityProfile;
    _o.StationId = this.StationId;
    _o.StartTimeUTC = this.StartTimeUTC;
    _o.SystemInfo = this.SystemInfo;
    _o.SystemNotes = this.SystemNotes;
    _o.TransmitCoordinates = new List<string>();
    for (var _j = 0; _j < this.TransmitCoordinatesLength; ++_j) {_o.TransmitCoordinates.Add(this.TransmitCoordinates(_j));}
    _o.TransmitSensorType = this.TransmitSensorType;
    _o.ReceiveCoordinates = new List<string>();
    for (var _j = 0; _j < this.ReceiveCoordinatesLength; ++_j) {_o.ReceiveCoordinates.Add(this.ReceiveCoordinates(_j));}
    _o.ReceiveSensorType = this.ReceiveSensorType;
    _o.AntennaElementPosition = this.AntennaElementPosition;
    _o.AntennaElementPositionCoordinateSystem = this.AntennaElementPositionCoordinateSystem;
    _o.Power = this.Power;
    _o.Range = this.Range;
    _o.Frequency = this.Frequency;
    _o.Polarization = this.Polarization;
    _o.Azimuth = this.Azimuth;
    _o.Elevation = this.Elevation;
    _o.RestrictedFrequency = new List<string>();
    for (var _j = 0; _j < this.RestrictedFrequencyLength; ++_j) {_o.RestrictedFrequency.Add(this.RestrictedFrequency(_j));}
    _o.RestrictedFrequencyNotes = this.RestrictedFrequencyNotes;
    _o.Doppler = this.Doppler;
    _o.Time = this.Time;
    _o.Stokes = this.Stokes;
    _o.Amplitude = this.Amplitude;
    _o.Phase = this.Phase;
    _o.FoF2 = this.FoF2;
    _o.FoF1 = this.FoF1;
    _o.FxF2 = this.FxF2;
    _o.FxF1 = this.FxF1;
    _o.Md = this.Md;
    _o.Luf = this.Luf;
    _o.Mufd = this.Mufd;
    _o.Fmin = this.Fmin;
    _o.FoEs = this.FoEs;
    _o.FminF = this.FminF;
    _o.FminE = this.FminE;
    _o.FoE = this.FoE;
    _o.FxE = this.FxE;
    _o.FxI = this.FxI;
    _o.HprimeF = this.HprimeF;
    _o.HprimeF2 = this.HprimeF2;
    _o.HprimeF1 = this.HprimeF1;
    _o.HprimeE = this.HprimeE;
    _o.HprimeEs = this.HprimeEs;
    _o.ZmE = this.ZmE;
    _o.YE = this.YE;
    _o.Qf = this.Qf;
    _o.Qe = this.Qe;
    _o.DownF = this.DownF;
    _o.DownE = this.DownE;
    _o.DownEs = this.DownEs;
    _o.Ff = this.Ff;
    _o.Fe = this.Fe;
    _o.D = this.D;
    _o.Fmuf = this.Fmuf;
    _o.HprimefMUF = this.HprimefMUF;
    _o.DeltafoF2 = this.DeltafoF2;
    _o.FoEp = this.FoEp;
    _o.FhprimeF = this.FhprimeF;
    _o.FhprimeF2 = this.FhprimeF2;
    _o.FoF1p = this.FoF1p;
    _o.FoF2p = this.FoF2p;
    _o.HmF2 = this.HmF2;
    _o.HmF1 = this.HmF1;
    _o.HmE = this.HmE;
    _o.ZhalfNm = this.ZhalfNm;
    _o.FminEs = this.FminEs;
    _o.YF2 = this.YF2;
    _o.YF1 = this.YF1;
    _o.Tec = this.Tec;
    _o.ScaleHeightF2Peak = this.ScaleHeightF2Peak;
    _o.B0 = this.B0;
    _o.B1 = this.B1;
    _o.D1 = this.D1;
    _o.FoEa = this.FoEa;
    _o.HprimeEa = this.HprimeEa;
    _o.FoP = this.FoP;
    _o.HprimeP = this.HprimeP;
    _o.FbEs = this.FbEs;
    _o.TypeEs = this.TypeEs;
    _o.CharAtts = new List<string>();
    for (var _j = 0; _j < this.CharAttsLength; ++_j) {_o.CharAtts.Add(this.CharAtts(_j));}
    _o.Height = new List<string>();
    for (var _j = 0; _j < this.HeightLength; ++_j) {_o.Height.Add(this.Height(_j));}
    _o.PlasmaFrequency = new List<string>();
    for (var _j = 0; _j < this.PlasmaFrequencyLength; ++_j) {_o.PlasmaFrequency.Add(this.PlasmaFrequency(_j));}
    _o.PlasmaFrequencyUncertainty = new List<string>();
    for (var _j = 0; _j < this.PlasmaFrequencyUncertaintyLength; ++_j) {_o.PlasmaFrequencyUncertainty.Add(this.PlasmaFrequencyUncertainty(_j));}
    _o.ElectronDensity = new List<string>();
    for (var _j = 0; _j < this.ElectronDensityLength; ++_j) {_o.ElectronDensity.Add(this.ElectronDensity(_j));}
    _o.ElectronDensityUncertainty = new List<string>();
    for (var _j = 0; _j < this.ElectronDensityUncertaintyLength; ++_j) {_o.ElectronDensityUncertainty.Add(this.ElectronDensityUncertainty(_j));}
    _o.ArtistFlags = new List<string>();
    for (var _j = 0; _j < this.ArtistFlagsLength; ++_j) {_o.ArtistFlags.Add(this.ArtistFlags(_j));}
    _o.TraceGeneric = this.TraceGeneric;
    _o.TidPhaseSpeeds = new List<string>();
    for (var _j = 0; _j < this.TidPhaseSpeedsLength; ++_j) {_o.TidPhaseSpeeds.Add(this.TidPhaseSpeeds(_j));}
    _o.TidAzimuth = new List<string>();
    for (var _j = 0; _j < this.TidAzimuthLength; ++_j) {_o.TidAzimuth.Add(this.TidAzimuth(_j));}
    _o.TidPeriods = new List<string>();
    for (var _j = 0; _j < this.TidPeriodsLength; ++_j) {_o.TidPeriods.Add(this.TidPeriods(_j));}
    _o.Datum = this.Datum;
    _o.PlatformName = this.PlatformName;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<IonoObservation_Ingest> Pack(FlatBufferBuilder builder, IonoObservation_IngestT _o) {
    if (_o == null) return default(Offset<IonoObservation_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _system = _o.System == null ? default(StringOffset) : builder.CreateString(_o.System);
    var _neProfileName = _o.NeProfileName == null ? default(StringOffset) : builder.CreateString(_o.NeProfileName);
    var _scalerInfo = _o.ScalerInfo == null ? default(StringOffset) : builder.CreateString(_o.ScalerInfo);
    var _densityProfile = _o.DensityProfile == null ? default(StringOffset) : builder.CreateString(_o.DensityProfile);
    var _stationId = _o.StationId == null ? default(StringOffset) : builder.CreateString(_o.StationId);
    var _startTimeUTC = _o.StartTimeUTC == null ? default(StringOffset) : builder.CreateString(_o.StartTimeUTC);
    var _systemInfo = _o.SystemInfo == null ? default(StringOffset) : builder.CreateString(_o.SystemInfo);
    var _systemNotes = _o.SystemNotes == null ? default(StringOffset) : builder.CreateString(_o.SystemNotes);
    var _transmitCoordinates = default(VectorOffset);
    if (_o.TransmitCoordinates != null) {
      var __transmitCoordinates = new StringOffset[_o.TransmitCoordinates.Count];
      for (var _j = 0; _j < __transmitCoordinates.Length; ++_j) { __transmitCoordinates[_j] = builder.CreateString(_o.TransmitCoordinates[_j]); }
      _transmitCoordinates = CreateTransmitCoordinatesVector(builder, __transmitCoordinates);
    }
    var _receiveCoordinates = default(VectorOffset);
    if (_o.ReceiveCoordinates != null) {
      var __receiveCoordinates = new StringOffset[_o.ReceiveCoordinates.Count];
      for (var _j = 0; _j < __receiveCoordinates.Length; ++_j) { __receiveCoordinates[_j] = builder.CreateString(_o.ReceiveCoordinates[_j]); }
      _receiveCoordinates = CreateReceiveCoordinatesVector(builder, __receiveCoordinates);
    }
    var _antennaElementPosition = _o.AntennaElementPosition == null ? default(StringOffset) : builder.CreateString(_o.AntennaElementPosition);
    var _power = _o.Power == null ? default(StringOffset) : builder.CreateString(_o.Power);
    var _range = _o.Range == null ? default(StringOffset) : builder.CreateString(_o.Range);
    var _frequency = _o.Frequency == null ? default(StringOffset) : builder.CreateString(_o.Frequency);
    var _polarization = _o.Polarization == null ? default(StringOffset) : builder.CreateString(_o.Polarization);
    var _azimuth = _o.Azimuth == null ? default(StringOffset) : builder.CreateString(_o.Azimuth);
    var _elevation = _o.Elevation == null ? default(StringOffset) : builder.CreateString(_o.Elevation);
    var _restrictedFrequency = default(VectorOffset);
    if (_o.RestrictedFrequency != null) {
      var __restrictedFrequency = new StringOffset[_o.RestrictedFrequency.Count];
      for (var _j = 0; _j < __restrictedFrequency.Length; ++_j) { __restrictedFrequency[_j] = builder.CreateString(_o.RestrictedFrequency[_j]); }
      _restrictedFrequency = CreateRestrictedFrequencyVector(builder, __restrictedFrequency);
    }
    var _restrictedFrequencyNotes = _o.RestrictedFrequencyNotes == null ? default(StringOffset) : builder.CreateString(_o.RestrictedFrequencyNotes);
    var _doppler = _o.Doppler == null ? default(StringOffset) : builder.CreateString(_o.Doppler);
    var _time = _o.Time == null ? default(StringOffset) : builder.CreateString(_o.Time);
    var _stokes = _o.Stokes == null ? default(StringOffset) : builder.CreateString(_o.Stokes);
    var _amplitude = _o.Amplitude == null ? default(StringOffset) : builder.CreateString(_o.Amplitude);
    var _phase = _o.Phase == null ? default(StringOffset) : builder.CreateString(_o.Phase);
    var _typeEs = _o.TypeEs == null ? default(StringOffset) : builder.CreateString(_o.TypeEs);
    var _charAtts = default(VectorOffset);
    if (_o.CharAtts != null) {
      var __charAtts = new StringOffset[_o.CharAtts.Count];
      for (var _j = 0; _j < __charAtts.Length; ++_j) { __charAtts[_j] = builder.CreateString(_o.CharAtts[_j]); }
      _charAtts = CreateCharAttsVector(builder, __charAtts);
    }
    var _height = default(VectorOffset);
    if (_o.Height != null) {
      var __height = new StringOffset[_o.Height.Count];
      for (var _j = 0; _j < __height.Length; ++_j) { __height[_j] = builder.CreateString(_o.Height[_j]); }
      _height = CreateHeightVector(builder, __height);
    }
    var _plasmaFrequency = default(VectorOffset);
    if (_o.PlasmaFrequency != null) {
      var __plasmaFrequency = new StringOffset[_o.PlasmaFrequency.Count];
      for (var _j = 0; _j < __plasmaFrequency.Length; ++_j) { __plasmaFrequency[_j] = builder.CreateString(_o.PlasmaFrequency[_j]); }
      _plasmaFrequency = CreatePlasmaFrequencyVector(builder, __plasmaFrequency);
    }
    var _plasmaFrequencyUncertainty = default(VectorOffset);
    if (_o.PlasmaFrequencyUncertainty != null) {
      var __plasmaFrequencyUncertainty = new StringOffset[_o.PlasmaFrequencyUncertainty.Count];
      for (var _j = 0; _j < __plasmaFrequencyUncertainty.Length; ++_j) { __plasmaFrequencyUncertainty[_j] = builder.CreateString(_o.PlasmaFrequencyUncertainty[_j]); }
      _plasmaFrequencyUncertainty = CreatePlasmaFrequencyUncertaintyVector(builder, __plasmaFrequencyUncertainty);
    }
    var _electronDensity = default(VectorOffset);
    if (_o.ElectronDensity != null) {
      var __electronDensity = new StringOffset[_o.ElectronDensity.Count];
      for (var _j = 0; _j < __electronDensity.Length; ++_j) { __electronDensity[_j] = builder.CreateString(_o.ElectronDensity[_j]); }
      _electronDensity = CreateElectronDensityVector(builder, __electronDensity);
    }
    var _electronDensityUncertainty = default(VectorOffset);
    if (_o.ElectronDensityUncertainty != null) {
      var __electronDensityUncertainty = new StringOffset[_o.ElectronDensityUncertainty.Count];
      for (var _j = 0; _j < __electronDensityUncertainty.Length; ++_j) { __electronDensityUncertainty[_j] = builder.CreateString(_o.ElectronDensityUncertainty[_j]); }
      _electronDensityUncertainty = CreateElectronDensityUncertaintyVector(builder, __electronDensityUncertainty);
    }
    var _artistFlags = default(VectorOffset);
    if (_o.ArtistFlags != null) {
      var __artistFlags = new StringOffset[_o.ArtistFlags.Count];
      for (var _j = 0; _j < __artistFlags.Length; ++_j) { __artistFlags[_j] = builder.CreateString(_o.ArtistFlags[_j]); }
      _artistFlags = CreateArtistFlagsVector(builder, __artistFlags);
    }
    var _traceGeneric = _o.TraceGeneric == null ? default(StringOffset) : builder.CreateString(_o.TraceGeneric);
    var _tidPhaseSpeeds = default(VectorOffset);
    if (_o.TidPhaseSpeeds != null) {
      var __tidPhaseSpeeds = new StringOffset[_o.TidPhaseSpeeds.Count];
      for (var _j = 0; _j < __tidPhaseSpeeds.Length; ++_j) { __tidPhaseSpeeds[_j] = builder.CreateString(_o.TidPhaseSpeeds[_j]); }
      _tidPhaseSpeeds = CreateTidPhaseSpeedsVector(builder, __tidPhaseSpeeds);
    }
    var _tidAzimuth = default(VectorOffset);
    if (_o.TidAzimuth != null) {
      var __tidAzimuth = new StringOffset[_o.TidAzimuth.Count];
      for (var _j = 0; _j < __tidAzimuth.Length; ++_j) { __tidAzimuth[_j] = builder.CreateString(_o.TidAzimuth[_j]); }
      _tidAzimuth = CreateTidAzimuthVector(builder, __tidAzimuth);
    }
    var _tidPeriods = default(VectorOffset);
    if (_o.TidPeriods != null) {
      var __tidPeriods = new StringOffset[_o.TidPeriods.Count];
      for (var _j = 0; _j < __tidPeriods.Length; ++_j) { __tidPeriods[_j] = builder.CreateString(_o.TidPeriods[_j]); }
      _tidPeriods = CreateTidPeriodsVector(builder, __tidPeriods);
    }
    var _datum = _o.Datum == null ? default(StringOffset) : builder.CreateString(_o.Datum);
    var _platformName = _o.PlatformName == null ? default(StringOffset) : builder.CreateString(_o.PlatformName);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateIonoObservation_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idSensor,
      _origSensorId,
      _system,
      _neProfileName,
      _o.NeProfileVersion,
      _scalerInfo,
      _densityProfile,
      _stationId,
      _startTimeUTC,
      _systemInfo,
      _systemNotes,
      _transmitCoordinates,
      _o.TransmitSensorType,
      _receiveCoordinates,
      _o.ReceiveSensorType,
      _antennaElementPosition,
      _o.AntennaElementPositionCoordinateSystem,
      _power,
      _range,
      _frequency,
      _polarization,
      _azimuth,
      _elevation,
      _restrictedFrequency,
      _restrictedFrequencyNotes,
      _doppler,
      _time,
      _stokes,
      _amplitude,
      _phase,
      _o.FoF2,
      _o.FoF1,
      _o.FxF2,
      _o.FxF1,
      _o.Md,
      _o.Luf,
      _o.Mufd,
      _o.Fmin,
      _o.FoEs,
      _o.FminF,
      _o.FminE,
      _o.FoE,
      _o.FxE,
      _o.FxI,
      _o.HprimeF,
      _o.HprimeF2,
      _o.HprimeF1,
      _o.HprimeE,
      _o.HprimeEs,
      _o.ZmE,
      _o.YE,
      _o.Qf,
      _o.Qe,
      _o.DownF,
      _o.DownE,
      _o.DownEs,
      _o.Ff,
      _o.Fe,
      _o.D,
      _o.Fmuf,
      _o.HprimefMUF,
      _o.DeltafoF2,
      _o.FoEp,
      _o.FhprimeF,
      _o.FhprimeF2,
      _o.FoF1p,
      _o.FoF2p,
      _o.HmF2,
      _o.HmF1,
      _o.HmE,
      _o.ZhalfNm,
      _o.FminEs,
      _o.YF2,
      _o.YF1,
      _o.Tec,
      _o.ScaleHeightF2Peak,
      _o.B0,
      _o.B1,
      _o.D1,
      _o.FoEa,
      _o.HprimeEa,
      _o.FoP,
      _o.HprimeP,
      _o.FbEs,
      _typeEs,
      _charAtts,
      _height,
      _plasmaFrequency,
      _plasmaFrequencyUncertainty,
      _electronDensity,
      _electronDensityUncertainty,
      _artistFlags,
      _traceGeneric,
      _tidPhaseSpeeds,
      _tidAzimuth,
      _tidPeriods,
      _datum,
      _platformName,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class IonoObservation_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string System { get; set; }
  public string NeProfileName { get; set; }
  public double NeProfileVersion { get; set; }
  public string ScalerInfo { get; set; }
  public string DensityProfile { get; set; }
  public string StationId { get; set; }
  public string StartTimeUTC { get; set; }
  public string SystemInfo { get; set; }
  public string SystemNotes { get; set; }
  public List<string> TransmitCoordinates { get; set; }
  public IonoObservation_Ingest_transmitSensorType_Enum TransmitSensorType { get; set; }
  public List<string> ReceiveCoordinates { get; set; }
  public IonoObservation_Ingest_receiveSensorType_Enum ReceiveSensorType { get; set; }
  public string AntennaElementPosition { get; set; }
  public IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum AntennaElementPositionCoordinateSystem { get; set; }
  public string Power { get; set; }
  public string Range { get; set; }
  public string Frequency { get; set; }
  public string Polarization { get; set; }
  public string Azimuth { get; set; }
  public string Elevation { get; set; }
  public List<string> RestrictedFrequency { get; set; }
  public string RestrictedFrequencyNotes { get; set; }
  public string Doppler { get; set; }
  public string Time { get; set; }
  public string Stokes { get; set; }
  public string Amplitude { get; set; }
  public string Phase { get; set; }
  public double FoF2 { get; set; }
  public double FoF1 { get; set; }
  public double FxF2 { get; set; }
  public double FxF1 { get; set; }
  public double Md { get; set; }
  public double Luf { get; set; }
  public double Mufd { get; set; }
  public double Fmin { get; set; }
  public double FoEs { get; set; }
  public double FminF { get; set; }
  public double FminE { get; set; }
  public double FoE { get; set; }
  public double FxE { get; set; }
  public double FxI { get; set; }
  public double HprimeF { get; set; }
  public double HprimeF2 { get; set; }
  public double HprimeF1 { get; set; }
  public double HprimeE { get; set; }
  public double HprimeEs { get; set; }
  public double ZmE { get; set; }
  public double YE { get; set; }
  public double Qf { get; set; }
  public double Qe { get; set; }
  public double DownF { get; set; }
  public double DownE { get; set; }
  public double DownEs { get; set; }
  public double Ff { get; set; }
  public double Fe { get; set; }
  public double D { get; set; }
  public double Fmuf { get; set; }
  public double HprimefMUF { get; set; }
  public double DeltafoF2 { get; set; }
  public double FoEp { get; set; }
  public double FhprimeF { get; set; }
  public double FhprimeF2 { get; set; }
  public double FoF1p { get; set; }
  public double FoF2p { get; set; }
  public double HmF2 { get; set; }
  public double HmF1 { get; set; }
  public double HmE { get; set; }
  public double ZhalfNm { get; set; }
  public double FminEs { get; set; }
  public double YF2 { get; set; }
  public double YF1 { get; set; }
  public double Tec { get; set; }
  public double ScaleHeightF2Peak { get; set; }
  public double B0 { get; set; }
  public double B1 { get; set; }
  public double D1 { get; set; }
  public double FoEa { get; set; }
  public double HprimeEa { get; set; }
  public double FoP { get; set; }
  public double HprimeP { get; set; }
  public double FbEs { get; set; }
  public string TypeEs { get; set; }
  public List<string> CharAtts { get; set; }
  public List<string> Height { get; set; }
  public List<string> PlasmaFrequency { get; set; }
  public List<string> PlasmaFrequencyUncertainty { get; set; }
  public List<string> ElectronDensity { get; set; }
  public List<string> ElectronDensityUncertainty { get; set; }
  public List<string> ArtistFlags { get; set; }
  public string TraceGeneric { get; set; }
  public List<string> TidPhaseSpeeds { get; set; }
  public List<string> TidAzimuth { get; set; }
  public List<string> TidPeriods { get; set; }
  public string Datum { get; set; }
  public string PlatformName { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public IonoObservation_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public IonoObservation_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.System = null;
    this.NeProfileName = null;
    this.NeProfileVersion = 0.0;
    this.ScalerInfo = null;
    this.DensityProfile = null;
    this.StationId = null;
    this.StartTimeUTC = null;
    this.SystemInfo = null;
    this.SystemNotes = null;
    this.TransmitCoordinates = null;
    this.TransmitSensorType = IonoObservation_Ingest_transmitSensorType_Enum.MOBILE;
    this.ReceiveCoordinates = null;
    this.ReceiveSensorType = IonoObservation_Ingest_receiveSensorType_Enum.MOBILE;
    this.AntennaElementPosition = null;
    this.AntennaElementPositionCoordinateSystem = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum.J2000;
    this.Power = null;
    this.Range = null;
    this.Frequency = null;
    this.Polarization = null;
    this.Azimuth = null;
    this.Elevation = null;
    this.RestrictedFrequency = null;
    this.RestrictedFrequencyNotes = null;
    this.Doppler = null;
    this.Time = null;
    this.Stokes = null;
    this.Amplitude = null;
    this.Phase = null;
    this.FoF2 = 0.0;
    this.FoF1 = 0.0;
    this.FxF2 = 0.0;
    this.FxF1 = 0.0;
    this.Md = 0.0;
    this.Luf = 0.0;
    this.Mufd = 0.0;
    this.Fmin = 0.0;
    this.FoEs = 0.0;
    this.FminF = 0.0;
    this.FminE = 0.0;
    this.FoE = 0.0;
    this.FxE = 0.0;
    this.FxI = 0.0;
    this.HprimeF = 0.0;
    this.HprimeF2 = 0.0;
    this.HprimeF1 = 0.0;
    this.HprimeE = 0.0;
    this.HprimeEs = 0.0;
    this.ZmE = 0.0;
    this.YE = 0.0;
    this.Qf = 0.0;
    this.Qe = 0.0;
    this.DownF = 0.0;
    this.DownE = 0.0;
    this.DownEs = 0.0;
    this.Ff = 0.0;
    this.Fe = 0.0;
    this.D = 0.0;
    this.Fmuf = 0.0;
    this.HprimefMUF = 0.0;
    this.DeltafoF2 = 0.0;
    this.FoEp = 0.0;
    this.FhprimeF = 0.0;
    this.FhprimeF2 = 0.0;
    this.FoF1p = 0.0;
    this.FoF2p = 0.0;
    this.HmF2 = 0.0;
    this.HmF1 = 0.0;
    this.HmE = 0.0;
    this.ZhalfNm = 0.0;
    this.FminEs = 0.0;
    this.YF2 = 0.0;
    this.YF1 = 0.0;
    this.Tec = 0.0;
    this.ScaleHeightF2Peak = 0.0;
    this.B0 = 0.0;
    this.B1 = 0.0;
    this.D1 = 0.0;
    this.FoEa = 0.0;
    this.HprimeEa = 0.0;
    this.FoP = 0.0;
    this.HprimeP = 0.0;
    this.FbEs = 0.0;
    this.TypeEs = null;
    this.CharAtts = null;
    this.Height = null;
    this.PlasmaFrequency = null;
    this.PlasmaFrequencyUncertainty = null;
    this.ElectronDensity = null;
    this.ElectronDensityUncertainty = null;
    this.ArtistFlags = null;
    this.TraceGeneric = null;
    this.TidPhaseSpeeds = null;
    this.TidAzimuth = null;
    this.TidPeriods = null;
    this.Datum = null;
    this.PlatformName = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = IonoObservation_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static IonoObservation_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return IonoObservation_Ingest.GetRootAsIonoObservation_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IonoObservation_Ingest.FinishIonoObservation_IngestBuffer(fbb, IonoObservation_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IonoObservation_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 12 /*System*/, false)
      && verifier.VerifyString(tablePos, 14 /*NeProfileName*/, false)
      && verifier.VerifyField(tablePos, 16 /*NeProfileVersion*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*ScalerInfo*/, false)
      && verifier.VerifyString(tablePos, 20 /*DensityProfile*/, false)
      && verifier.VerifyString(tablePos, 22 /*StationId*/, false)
      && verifier.VerifyString(tablePos, 24 /*StartTimeUTC*/, false)
      && verifier.VerifyString(tablePos, 26 /*SystemInfo*/, false)
      && verifier.VerifyString(tablePos, 28 /*SystemNotes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*TransmitCoordinates*/, false)
      && verifier.VerifyField(tablePos, 32 /*TransmitSensorType*/, 1 /*IonoObservation_Ingest_transmitSensorType_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*ReceiveCoordinates*/, false)
      && verifier.VerifyField(tablePos, 36 /*ReceiveSensorType*/, 1 /*IonoObservation_Ingest_receiveSensorType_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 38 /*AntennaElementPosition*/, false)
      && verifier.VerifyField(tablePos, 40 /*AntennaElementPositionCoordinateSystem*/, 1 /*IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*Power*/, false)
      && verifier.VerifyString(tablePos, 44 /*Range*/, false)
      && verifier.VerifyString(tablePos, 46 /*Frequency*/, false)
      && verifier.VerifyString(tablePos, 48 /*Polarization*/, false)
      && verifier.VerifyString(tablePos, 50 /*Azimuth*/, false)
      && verifier.VerifyString(tablePos, 52 /*Elevation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*RestrictedFrequency*/, false)
      && verifier.VerifyString(tablePos, 56 /*RestrictedFrequencyNotes*/, false)
      && verifier.VerifyString(tablePos, 58 /*Doppler*/, false)
      && verifier.VerifyString(tablePos, 60 /*Time*/, false)
      && verifier.VerifyString(tablePos, 62 /*Stokes*/, false)
      && verifier.VerifyString(tablePos, 64 /*Amplitude*/, false)
      && verifier.VerifyString(tablePos, 66 /*Phase*/, false)
      && verifier.VerifyField(tablePos, 68 /*FoF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*FoF1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*FxF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*FxF1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*Md*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Luf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Mufd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Fmin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*FoEs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*FminF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*FminE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*FoE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*FxE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*FxI*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*HprimeF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*HprimeF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*HprimeF1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*HprimeE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*HprimeEs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*ZmE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*YE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*Qf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*Qe*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*DownF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*DownE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*DownEs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*Ff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*Fe*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*D*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*Fmuf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*HprimefMUF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*DeltafoF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*FoEp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*FhprimeF*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*FhprimeF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*FoF1p*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*FoF2p*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*HmF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*HmF1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*HmE*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*ZhalfNm*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*FminEs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*YF2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*YF1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*Tec*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*ScaleHeightF2Peak*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 160 /*B0*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 162 /*B1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 164 /*D1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 166 /*FoEa*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 168 /*HprimeEa*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 170 /*FoP*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 172 /*HprimeP*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 174 /*FbEs*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 176 /*TypeEs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 178 /*CharAtts*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 180 /*Height*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 182 /*PlasmaFrequency*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 184 /*PlasmaFrequencyUncertainty*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 186 /*ElectronDensity*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 188 /*ElectronDensityUncertainty*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 190 /*ArtistFlags*/, false)
      && verifier.VerifyString(tablePos, 192 /*TraceGeneric*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 194 /*TidPhaseSpeeds*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 196 /*TidAzimuth*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 198 /*TidPeriods*/, false)
      && verifier.VerifyString(tablePos, 200 /*Datum*/, false)
      && verifier.VerifyString(tablePos, 202 /*PlatformName*/, false)
      && verifier.VerifyString(tablePos, 204 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 206 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 208 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 210 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 212 /*Source*/, false)
      && verifier.VerifyString(tablePos, 214 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 216 /*DataMode*/, 1 /*IonoObservation_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 218 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
