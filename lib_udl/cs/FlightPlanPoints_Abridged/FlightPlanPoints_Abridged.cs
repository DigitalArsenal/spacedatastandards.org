// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Array of point data for this Point Group.
public struct FlightPlanPoints_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanPoints_Abridged GetRootAsFlightPlanPoints_Abridged(ByteBuffer _bb) { return GetRootAsFlightPlanPoints_Abridged(_bb, new FlightPlanPoints_Abridged()); }
  public static FlightPlanPoints_Abridged GetRootAsFlightPlanPoints_Abridged(ByteBuffer _bb, FlightPlanPoints_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FlightPlanPoints_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "FLIG"); }
  public static bool VerifyFlightPlanPoints_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("FLIG", false, FlightPlanPoints_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlightPlanPoints_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Name of this point.
  /// Example: /// Example: CRUISE ALTITUDE ETP
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PointName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPointNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPointNameArray() { return __p.__vector_as_array<byte>(4); }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double FppLat { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double FppLon { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  public string FppEta { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFppEtaBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFppEtaBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFppEtaArray() { return __p.__vector_as_array<byte>(10); }
  /// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
  /// Example: /// Example: 4250.1
  /// Constraints: No constraints specified.
  public double FppReqFuel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FlightPlanPoints_Abridged> CreateFlightPlanPoints_Abridged(FlatBufferBuilder builder,
      StringOffset pointNameOffset = default(StringOffset),
      double fppLat = 0.0,
      double fppLon = 0.0,
      StringOffset fppEtaOffset = default(StringOffset),
      double fppReqFuel = 0.0) {
    builder.StartTable(5);
    FlightPlanPoints_Abridged.AddFppReqFuel(builder, fppReqFuel);
    FlightPlanPoints_Abridged.AddFppLon(builder, fppLon);
    FlightPlanPoints_Abridged.AddFppLat(builder, fppLat);
    FlightPlanPoints_Abridged.AddFppEta(builder, fppEtaOffset);
    FlightPlanPoints_Abridged.AddPointName(builder, pointNameOffset);
    return FlightPlanPoints_Abridged.EndFlightPlanPoints_Abridged(builder);
  }

  public static void StartFlightPlanPoints_Abridged(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPointName(FlatBufferBuilder builder, StringOffset pointNameOffset) { builder.AddOffset(0, pointNameOffset.Value, 0); }
  public static void AddFppLat(FlatBufferBuilder builder, double fppLat) { builder.AddDouble(1, fppLat, 0.0); }
  public static void AddFppLon(FlatBufferBuilder builder, double fppLon) { builder.AddDouble(2, fppLon, 0.0); }
  public static void AddFppEta(FlatBufferBuilder builder, StringOffset fppEtaOffset) { builder.AddOffset(3, fppEtaOffset.Value, 0); }
  public static void AddFppReqFuel(FlatBufferBuilder builder, double fppReqFuel) { builder.AddDouble(4, fppReqFuel, 0.0); }
  public static Offset<FlightPlanPoints_Abridged> EndFlightPlanPoints_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlightPlanPoints_Abridged>(o);
  }
  public static void FinishFlightPlanPoints_AbridgedBuffer(FlatBufferBuilder builder, Offset<FlightPlanPoints_Abridged> offset) { builder.Finish(offset.Value, "FLIG"); }
  public static void FinishSizePrefixedFlightPlanPoints_AbridgedBuffer(FlatBufferBuilder builder, Offset<FlightPlanPoints_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "FLIG"); }
  public FlightPlanPoints_AbridgedT UnPack() {
    var _o = new FlightPlanPoints_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlightPlanPoints_AbridgedT _o) {
    _o.PointName = this.PointName;
    _o.FppLat = this.FppLat;
    _o.FppLon = this.FppLon;
    _o.FppEta = this.FppEta;
    _o.FppReqFuel = this.FppReqFuel;
  }
  public static Offset<FlightPlanPoints_Abridged> Pack(FlatBufferBuilder builder, FlightPlanPoints_AbridgedT _o) {
    if (_o == null) return default(Offset<FlightPlanPoints_Abridged>);
    var _pointName = _o.PointName == null ? default(StringOffset) : builder.CreateString(_o.PointName);
    var _fppEta = _o.FppEta == null ? default(StringOffset) : builder.CreateString(_o.FppEta);
    return CreateFlightPlanPoints_Abridged(
      builder,
      _pointName,
      _o.FppLat,
      _o.FppLon,
      _fppEta,
      _o.FppReqFuel);
  }
}

public class FlightPlanPoints_AbridgedT
{
  public string PointName { get; set; }
  public double FppLat { get; set; }
  public double FppLon { get; set; }
  public string FppEta { get; set; }
  public double FppReqFuel { get; set; }

  public FlightPlanPoints_AbridgedT() {
    this.PointName = null;
    this.FppLat = 0.0;
    this.FppLon = 0.0;
    this.FppEta = null;
    this.FppReqFuel = 0.0;
  }
  public static FlightPlanPoints_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return FlightPlanPoints_Abridged.GetRootAsFlightPlanPoints_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FlightPlanPoints_Abridged.FinishFlightPlanPoints_AbridgedBuffer(fbb, FlightPlanPoints_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class FlightPlanPoints_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PointName*/, false)
      && verifier.VerifyField(tablePos, 6 /*FppLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*FppLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*FppEta*/, false)
      && verifier.VerifyField(tablePos, 12 /*FppReqFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
