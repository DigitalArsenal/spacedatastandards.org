// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
public struct Aircraft_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Aircraft_Full GetRootAsAircraft_Full(ByteBuffer _bb) { return GetRootAsAircraft_Full(_bb, new Aircraft_Full()); }
  public static Aircraft_Full GetRootAsAircraft_Full(ByteBuffer _bb, Aircraft_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Aircraft_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraft_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, Aircraft_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Aircraft_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Entity { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEntityBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEntityArray() { return __p.__vector_as_array<byte>(8); }
  /// ID of the parent entity for this aircraft.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(10); }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: E-2C HAWKEYE
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string AircraftMDS { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftMDSBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAircraftMDSBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAircraftMDSArray() { return __p.__vector_as_array<byte>(12); }
  /// The tail number of this aircraft.
  /// Example: /// Example: N702JG
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TailNumber { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTailNumberBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTailNumberBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTailNumberArray() { return __p.__vector_as_array<byte>(14); }
  /// Full serial number of the aircraft.
  /// Example: /// Example: 7007187
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string SerialNumber { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumberBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSerialNumberBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSerialNumberArray() { return __p.__vector_as_array<byte>(16); }
  /// The wing or unit that owns the aircraft.
  /// Example: /// Example: 437AW
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Owner { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnerBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOwnerBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOwnerArray() { return __p.__vector_as_array<byte>(18); }
  /// The Air Force major command (MAJCOM) overseeing the aircraft.
  /// Example: /// Example: HQACC
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Command { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommandBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCommandBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCommandArray() { return __p.__vector_as_array<byte>(20); }
  /// The category of aircraft (e.g. M = Military, C = Commercial).
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string Category { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(22); }
  /// Military data network data transfer device ID for this aircraft.
  /// Example: /// Example: 005
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Dtd { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDtdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDtdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDtdArray() { return __p.__vector_as_array<byte>(24); }
  /// The cruise speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 915
  /// Constraints: No constraints specified.
  public double CruiseSpeed { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum air speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 2655.1
  /// Constraints: No constraints specified.
  public double MaxSpeed { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int MinReqRunwayM { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 3000
  /// Constraints: No constraints specified.
  public int MinReqRunwayFt { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The nominal turnaround time for this aircraft, in minutes.
  /// Example: /// Example: 500
  /// Constraints: No constraints specified.
  public int NominalTATime { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional notes/comments for this aircraft.
  /// Example: /// Example: Notes for this aircraft
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(36); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(38); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(40); }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(42); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(44); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(46); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(48); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(50); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  public Aircraft_Full_dataMode_Enum DataMode { get { int o = __p.__offset(52); return o != 0 ? (Aircraft_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Aircraft_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(54); }

  public static Offset<Aircraft_Full> CreateAircraft_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset entityOffset = default(StringOffset),
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset aircraftMDSOffset = default(StringOffset),
      StringOffset tailNumberOffset = default(StringOffset),
      StringOffset serialNumberOffset = default(StringOffset),
      StringOffset ownerOffset = default(StringOffset),
      StringOffset commandOffset = default(StringOffset),
      StringOffset categoryOffset = default(StringOffset),
      StringOffset dtdOffset = default(StringOffset),
      double cruiseSpeed = 0.0,
      double maxSpeed = 0.0,
      int minReqRunwayM = 0,
      int minReqRunwayFt = 0,
      int nominalTATime = 0,
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Aircraft_Full_dataMode_Enum dataMode = Aircraft_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(26);
    Aircraft_Full.AddMaxSpeed(builder, maxSpeed);
    Aircraft_Full.AddCruiseSpeed(builder, cruiseSpeed);
    Aircraft_Full.AddOrigNetwork(builder, origNetworkOffset);
    Aircraft_Full.AddOrigin(builder, originOffset);
    Aircraft_Full.AddSource(builder, sourceOffset);
    Aircraft_Full.AddSourceDL(builder, sourceDLOffset);
    Aircraft_Full.AddUpdatedBy(builder, updatedByOffset);
    Aircraft_Full.AddUpdatedAt(builder, updatedAtOffset);
    Aircraft_Full.AddCreatedBy(builder, createdByOffset);
    Aircraft_Full.AddCreatedAt(builder, createdAtOffset);
    Aircraft_Full.AddNotes(builder, notesOffset);
    Aircraft_Full.AddNominalTATime(builder, nominalTATime);
    Aircraft_Full.AddMinReqRunwayFt(builder, minReqRunwayFt);
    Aircraft_Full.AddMinReqRunwayM(builder, minReqRunwayM);
    Aircraft_Full.AddDtd(builder, dtdOffset);
    Aircraft_Full.AddCategory(builder, categoryOffset);
    Aircraft_Full.AddCommand(builder, commandOffset);
    Aircraft_Full.AddOwner(builder, ownerOffset);
    Aircraft_Full.AddSerialNumber(builder, serialNumberOffset);
    Aircraft_Full.AddTailNumber(builder, tailNumberOffset);
    Aircraft_Full.AddAircraftMDS(builder, aircraftMDSOffset);
    Aircraft_Full.AddIdEntity(builder, idEntityOffset);
    Aircraft_Full.AddEntity(builder, entityOffset);
    Aircraft_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Aircraft_Full.AddId(builder, idOffset);
    Aircraft_Full.AddDataMode(builder, dataMode);
    return Aircraft_Full.EndAircraft_Full(builder);
  }

  public static void StartAircraft_Full(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddEntity(FlatBufferBuilder builder, StringOffset entityOffset) { builder.AddOffset(2, entityOffset.Value, 0); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(3, idEntityOffset.Value, 0); }
  public static void AddAircraftMDS(FlatBufferBuilder builder, StringOffset aircraftMDSOffset) { builder.AddOffset(4, aircraftMDSOffset.Value, 0); }
  public static void AddTailNumber(FlatBufferBuilder builder, StringOffset tailNumberOffset) { builder.AddOffset(5, tailNumberOffset.Value, 0); }
  public static void AddSerialNumber(FlatBufferBuilder builder, StringOffset serialNumberOffset) { builder.AddOffset(6, serialNumberOffset.Value, 0); }
  public static void AddOwner(FlatBufferBuilder builder, StringOffset ownerOffset) { builder.AddOffset(7, ownerOffset.Value, 0); }
  public static void AddCommand(FlatBufferBuilder builder, StringOffset commandOffset) { builder.AddOffset(8, commandOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(9, categoryOffset.Value, 0); }
  public static void AddDtd(FlatBufferBuilder builder, StringOffset dtdOffset) { builder.AddOffset(10, dtdOffset.Value, 0); }
  public static void AddCruiseSpeed(FlatBufferBuilder builder, double cruiseSpeed) { builder.AddDouble(11, cruiseSpeed, 0.0); }
  public static void AddMaxSpeed(FlatBufferBuilder builder, double maxSpeed) { builder.AddDouble(12, maxSpeed, 0.0); }
  public static void AddMinReqRunwayM(FlatBufferBuilder builder, int minReqRunwayM) { builder.AddInt(13, minReqRunwayM, 0); }
  public static void AddMinReqRunwayFt(FlatBufferBuilder builder, int minReqRunwayFt) { builder.AddInt(14, minReqRunwayFt, 0); }
  public static void AddNominalTATime(FlatBufferBuilder builder, int nominalTATime) { builder.AddInt(15, nominalTATime, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(16, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(17, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(18, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(19, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(20, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(21, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(22, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(23, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Aircraft_Full_dataMode_Enum dataMode) { builder.AddSbyte(24, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(25, origNetworkOffset.Value, 0); }
  public static Offset<Aircraft_Full> EndAircraft_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Aircraft_Full>(o);
  }
  public static void FinishAircraft_FullBuffer(FlatBufferBuilder builder, Offset<Aircraft_Full> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraft_FullBuffer(FlatBufferBuilder builder, Offset<Aircraft_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public Aircraft_FullT UnPack() {
    var _o = new Aircraft_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Aircraft_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Entity = this.Entity;
    _o.IdEntity = this.IdEntity;
    _o.AircraftMDS = this.AircraftMDS;
    _o.TailNumber = this.TailNumber;
    _o.SerialNumber = this.SerialNumber;
    _o.Owner = this.Owner;
    _o.Command = this.Command;
    _o.Category = this.Category;
    _o.Dtd = this.Dtd;
    _o.CruiseSpeed = this.CruiseSpeed;
    _o.MaxSpeed = this.MaxSpeed;
    _o.MinReqRunwayM = this.MinReqRunwayM;
    _o.MinReqRunwayFt = this.MinReqRunwayFt;
    _o.NominalTATime = this.NominalTATime;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Aircraft_Full> Pack(FlatBufferBuilder builder, Aircraft_FullT _o) {
    if (_o == null) return default(Offset<Aircraft_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _entity = _o.Entity == null ? default(StringOffset) : builder.CreateString(_o.Entity);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _aircraftMDS = _o.AircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.AircraftMDS);
    var _tailNumber = _o.TailNumber == null ? default(StringOffset) : builder.CreateString(_o.TailNumber);
    var _serialNumber = _o.SerialNumber == null ? default(StringOffset) : builder.CreateString(_o.SerialNumber);
    var _owner = _o.Owner == null ? default(StringOffset) : builder.CreateString(_o.Owner);
    var _command = _o.Command == null ? default(StringOffset) : builder.CreateString(_o.Command);
    var _category = _o.Category == null ? default(StringOffset) : builder.CreateString(_o.Category);
    var _dtd = _o.Dtd == null ? default(StringOffset) : builder.CreateString(_o.Dtd);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAircraft_Full(
      builder,
      _id,
      _classificationMarking,
      _entity,
      _idEntity,
      _aircraftMDS,
      _tailNumber,
      _serialNumber,
      _owner,
      _command,
      _category,
      _dtd,
      _o.CruiseSpeed,
      _o.MaxSpeed,
      _o.MinReqRunwayM,
      _o.MinReqRunwayFt,
      _o.NominalTATime,
      _notes,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class Aircraft_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Entity { get; set; }
  public string IdEntity { get; set; }
  public string AircraftMDS { get; set; }
  public string TailNumber { get; set; }
  public string SerialNumber { get; set; }
  public string Owner { get; set; }
  public string Command { get; set; }
  public string Category { get; set; }
  public string Dtd { get; set; }
  public double CruiseSpeed { get; set; }
  public double MaxSpeed { get; set; }
  public int MinReqRunwayM { get; set; }
  public int MinReqRunwayFt { get; set; }
  public int NominalTATime { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Aircraft_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public Aircraft_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Entity = null;
    this.IdEntity = null;
    this.AircraftMDS = null;
    this.TailNumber = null;
    this.SerialNumber = null;
    this.Owner = null;
    this.Command = null;
    this.Category = null;
    this.Dtd = null;
    this.CruiseSpeed = 0.0;
    this.MaxSpeed = 0.0;
    this.MinReqRunwayM = 0;
    this.MinReqRunwayFt = 0;
    this.NominalTATime = 0;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Aircraft_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static Aircraft_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Aircraft_Full.GetRootAsAircraft_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Aircraft_Full.FinishAircraft_FullBuffer(fbb, Aircraft_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Aircraft_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Entity*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 12 /*AircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 14 /*TailNumber*/, false)
      && verifier.VerifyString(tablePos, 16 /*SerialNumber*/, false)
      && verifier.VerifyString(tablePos, 18 /*Owner*/, false)
      && verifier.VerifyString(tablePos, 20 /*Command*/, false)
      && verifier.VerifyString(tablePos, 22 /*Category*/, false)
      && verifier.VerifyString(tablePos, 24 /*Dtd*/, false)
      && verifier.VerifyField(tablePos, 26 /*CruiseSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*MaxSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*MinReqRunwayM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*MinReqRunwayFt*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*NominalTATime*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 38 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 42 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 44 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 46 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 48 /*Source*/, false)
      && verifier.VerifyString(tablePos, 50 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 52 /*DataMode*/, 1 /*Aircraft_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 54 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
