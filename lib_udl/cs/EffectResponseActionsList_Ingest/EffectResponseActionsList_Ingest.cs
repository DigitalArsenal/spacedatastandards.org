// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// List of actions associated with this effect response.
public struct EffectResponseActionsList_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EffectResponseActionsList_Ingest GetRootAsEffectResponseActionsList_Ingest(ByteBuffer _bb) { return GetRootAsEffectResponseActionsList_Ingest(_bb, new EffectResponseActionsList_Ingest()); }
  public static EffectResponseActionsList_Ingest GetRootAsEffectResponseActionsList_Ingest(ByteBuffer _bb, EffectResponseActionsList_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EffectResponseActionsList_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EFFE"); }
  public static bool VerifyEffectResponseActionsList_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EFFE", false, EffectResponseActionsList_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectResponseActionsList_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// A summary string describing different aspects of the action.
  /// Example: /// Example: Example summary
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Summary { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSummaryBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSummaryArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of this action.
  /// Example: /// Example: ACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ActionId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetActionIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetActionIdArray() { return __p.__vector_as_array<byte>(6); }
  /// The desired start time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ActionStartTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionStartTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetActionStartTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetActionStartTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// The desired end time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ActionEndTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionEndTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetActionEndTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetActionEndTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// The start time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  public string TotStartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTotStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTotStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTotStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// The end time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  public string TotEndTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTotEndTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTotEndTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTotEndTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  /// Example: /// Example: AIRCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ActionActorSrcType { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionActorSrcTypeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetActionActorSrcTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetActionActorSrcTypeArray() { return __p.__vector_as_array<byte>(16); }
  /// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
  /// Example: /// Example: ACTIONACTORSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ActionActorSrcId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionActorSrcIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetActionActorSrcIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetActionActorSrcIdArray() { return __p.__vector_as_array<byte>(18); }
  /// The type of munition or sensor used by this asset/actor.
  /// Example: /// Example: SENSOR1
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Effector { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectorBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEffectorBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEffectorArray() { return __p.__vector_as_array<byte>(20); }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TargetSrcType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetSrcTypeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTargetSrcTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTargetSrcTypeArray() { return __p.__vector_as_array<byte>(22); }
  /// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TargetSrcId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetSrcIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTargetSrcIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTargetSrcIdArray() { return __p.__vector_as_array<byte>(24); }
  /// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double ActorInterceptLat { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  public double ActorInterceptLon { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ActorInterceptAlt { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double WeaponInterceptLat { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  public double WeaponInterceptLon { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The WGS-84 altitude of the weapon destination location, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double WeaponInterceptAlt { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// List of metrics associated with this action.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string ActionMetrics(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ActionMetricsLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<EffectResponseActionsList_Ingest> CreateEffectResponseActionsList_Ingest(FlatBufferBuilder builder,
      StringOffset summaryOffset = default(StringOffset),
      StringOffset actionIdOffset = default(StringOffset),
      StringOffset actionStartTimeOffset = default(StringOffset),
      StringOffset actionEndTimeOffset = default(StringOffset),
      StringOffset totStartTimeOffset = default(StringOffset),
      StringOffset totEndTimeOffset = default(StringOffset),
      StringOffset actionActorSrcTypeOffset = default(StringOffset),
      StringOffset actionActorSrcIdOffset = default(StringOffset),
      StringOffset effectorOffset = default(StringOffset),
      StringOffset targetSrcTypeOffset = default(StringOffset),
      StringOffset targetSrcIdOffset = default(StringOffset),
      double actorInterceptLat = 0.0,
      double actorInterceptLon = 0.0,
      double actorInterceptAlt = 0.0,
      double weaponInterceptLat = 0.0,
      double weaponInterceptLon = 0.0,
      double weaponInterceptAlt = 0.0,
      VectorOffset actionMetricsOffset = default(VectorOffset)) {
    builder.StartTable(18);
    EffectResponseActionsList_Ingest.AddWeaponInterceptAlt(builder, weaponInterceptAlt);
    EffectResponseActionsList_Ingest.AddWeaponInterceptLon(builder, weaponInterceptLon);
    EffectResponseActionsList_Ingest.AddWeaponInterceptLat(builder, weaponInterceptLat);
    EffectResponseActionsList_Ingest.AddActorInterceptAlt(builder, actorInterceptAlt);
    EffectResponseActionsList_Ingest.AddActorInterceptLon(builder, actorInterceptLon);
    EffectResponseActionsList_Ingest.AddActorInterceptLat(builder, actorInterceptLat);
    EffectResponseActionsList_Ingest.AddActionMetrics(builder, actionMetricsOffset);
    EffectResponseActionsList_Ingest.AddTargetSrcId(builder, targetSrcIdOffset);
    EffectResponseActionsList_Ingest.AddTargetSrcType(builder, targetSrcTypeOffset);
    EffectResponseActionsList_Ingest.AddEffector(builder, effectorOffset);
    EffectResponseActionsList_Ingest.AddActionActorSrcId(builder, actionActorSrcIdOffset);
    EffectResponseActionsList_Ingest.AddActionActorSrcType(builder, actionActorSrcTypeOffset);
    EffectResponseActionsList_Ingest.AddTotEndTime(builder, totEndTimeOffset);
    EffectResponseActionsList_Ingest.AddTotStartTime(builder, totStartTimeOffset);
    EffectResponseActionsList_Ingest.AddActionEndTime(builder, actionEndTimeOffset);
    EffectResponseActionsList_Ingest.AddActionStartTime(builder, actionStartTimeOffset);
    EffectResponseActionsList_Ingest.AddActionId(builder, actionIdOffset);
    EffectResponseActionsList_Ingest.AddSummary(builder, summaryOffset);
    return EffectResponseActionsList_Ingest.EndEffectResponseActionsList_Ingest(builder);
  }

  public static void StartEffectResponseActionsList_Ingest(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddSummary(FlatBufferBuilder builder, StringOffset summaryOffset) { builder.AddOffset(0, summaryOffset.Value, 0); }
  public static void AddActionId(FlatBufferBuilder builder, StringOffset actionIdOffset) { builder.AddOffset(1, actionIdOffset.Value, 0); }
  public static void AddActionStartTime(FlatBufferBuilder builder, StringOffset actionStartTimeOffset) { builder.AddOffset(2, actionStartTimeOffset.Value, 0); }
  public static void AddActionEndTime(FlatBufferBuilder builder, StringOffset actionEndTimeOffset) { builder.AddOffset(3, actionEndTimeOffset.Value, 0); }
  public static void AddTotStartTime(FlatBufferBuilder builder, StringOffset totStartTimeOffset) { builder.AddOffset(4, totStartTimeOffset.Value, 0); }
  public static void AddTotEndTime(FlatBufferBuilder builder, StringOffset totEndTimeOffset) { builder.AddOffset(5, totEndTimeOffset.Value, 0); }
  public static void AddActionActorSrcType(FlatBufferBuilder builder, StringOffset actionActorSrcTypeOffset) { builder.AddOffset(6, actionActorSrcTypeOffset.Value, 0); }
  public static void AddActionActorSrcId(FlatBufferBuilder builder, StringOffset actionActorSrcIdOffset) { builder.AddOffset(7, actionActorSrcIdOffset.Value, 0); }
  public static void AddEffector(FlatBufferBuilder builder, StringOffset effectorOffset) { builder.AddOffset(8, effectorOffset.Value, 0); }
  public static void AddTargetSrcType(FlatBufferBuilder builder, StringOffset targetSrcTypeOffset) { builder.AddOffset(9, targetSrcTypeOffset.Value, 0); }
  public static void AddTargetSrcId(FlatBufferBuilder builder, StringOffset targetSrcIdOffset) { builder.AddOffset(10, targetSrcIdOffset.Value, 0); }
  public static void AddActorInterceptLat(FlatBufferBuilder builder, double actorInterceptLat) { builder.AddDouble(11, actorInterceptLat, 0.0); }
  public static void AddActorInterceptLon(FlatBufferBuilder builder, double actorInterceptLon) { builder.AddDouble(12, actorInterceptLon, 0.0); }
  public static void AddActorInterceptAlt(FlatBufferBuilder builder, double actorInterceptAlt) { builder.AddDouble(13, actorInterceptAlt, 0.0); }
  public static void AddWeaponInterceptLat(FlatBufferBuilder builder, double weaponInterceptLat) { builder.AddDouble(14, weaponInterceptLat, 0.0); }
  public static void AddWeaponInterceptLon(FlatBufferBuilder builder, double weaponInterceptLon) { builder.AddDouble(15, weaponInterceptLon, 0.0); }
  public static void AddWeaponInterceptAlt(FlatBufferBuilder builder, double weaponInterceptAlt) { builder.AddDouble(16, weaponInterceptAlt, 0.0); }
  public static void AddActionMetrics(FlatBufferBuilder builder, VectorOffset actionMetricsOffset) { builder.AddOffset(17, actionMetricsOffset.Value, 0); }
  public static VectorOffset CreateActionMetricsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActionMetricsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionMetricsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionMetricsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActionMetricsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EffectResponseActionsList_Ingest> EndEffectResponseActionsList_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EffectResponseActionsList_Ingest>(o);
  }
  public static void FinishEffectResponseActionsList_IngestBuffer(FlatBufferBuilder builder, Offset<EffectResponseActionsList_Ingest> offset) { builder.Finish(offset.Value, "EFFE"); }
  public static void FinishSizePrefixedEffectResponseActionsList_IngestBuffer(FlatBufferBuilder builder, Offset<EffectResponseActionsList_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EFFE"); }
  public EffectResponseActionsList_IngestT UnPack() {
    var _o = new EffectResponseActionsList_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectResponseActionsList_IngestT _o) {
    _o.Summary = this.Summary;
    _o.ActionId = this.ActionId;
    _o.ActionStartTime = this.ActionStartTime;
    _o.ActionEndTime = this.ActionEndTime;
    _o.TotStartTime = this.TotStartTime;
    _o.TotEndTime = this.TotEndTime;
    _o.ActionActorSrcType = this.ActionActorSrcType;
    _o.ActionActorSrcId = this.ActionActorSrcId;
    _o.Effector = this.Effector;
    _o.TargetSrcType = this.TargetSrcType;
    _o.TargetSrcId = this.TargetSrcId;
    _o.ActorInterceptLat = this.ActorInterceptLat;
    _o.ActorInterceptLon = this.ActorInterceptLon;
    _o.ActorInterceptAlt = this.ActorInterceptAlt;
    _o.WeaponInterceptLat = this.WeaponInterceptLat;
    _o.WeaponInterceptLon = this.WeaponInterceptLon;
    _o.WeaponInterceptAlt = this.WeaponInterceptAlt;
    _o.ActionMetrics = new List<string>();
    for (var _j = 0; _j < this.ActionMetricsLength; ++_j) {_o.ActionMetrics.Add(this.ActionMetrics(_j));}
  }
  public static Offset<EffectResponseActionsList_Ingest> Pack(FlatBufferBuilder builder, EffectResponseActionsList_IngestT _o) {
    if (_o == null) return default(Offset<EffectResponseActionsList_Ingest>);
    var _summary = _o.Summary == null ? default(StringOffset) : builder.CreateString(_o.Summary);
    var _actionId = _o.ActionId == null ? default(StringOffset) : builder.CreateString(_o.ActionId);
    var _actionStartTime = _o.ActionStartTime == null ? default(StringOffset) : builder.CreateString(_o.ActionStartTime);
    var _actionEndTime = _o.ActionEndTime == null ? default(StringOffset) : builder.CreateString(_o.ActionEndTime);
    var _totStartTime = _o.TotStartTime == null ? default(StringOffset) : builder.CreateString(_o.TotStartTime);
    var _totEndTime = _o.TotEndTime == null ? default(StringOffset) : builder.CreateString(_o.TotEndTime);
    var _actionActorSrcType = _o.ActionActorSrcType == null ? default(StringOffset) : builder.CreateString(_o.ActionActorSrcType);
    var _actionActorSrcId = _o.ActionActorSrcId == null ? default(StringOffset) : builder.CreateString(_o.ActionActorSrcId);
    var _effector = _o.Effector == null ? default(StringOffset) : builder.CreateString(_o.Effector);
    var _targetSrcType = _o.TargetSrcType == null ? default(StringOffset) : builder.CreateString(_o.TargetSrcType);
    var _targetSrcId = _o.TargetSrcId == null ? default(StringOffset) : builder.CreateString(_o.TargetSrcId);
    var _actionMetrics = default(VectorOffset);
    if (_o.ActionMetrics != null) {
      var __actionMetrics = new StringOffset[_o.ActionMetrics.Count];
      for (var _j = 0; _j < __actionMetrics.Length; ++_j) { __actionMetrics[_j] = builder.CreateString(_o.ActionMetrics[_j]); }
      _actionMetrics = CreateActionMetricsVector(builder, __actionMetrics);
    }
    return CreateEffectResponseActionsList_Ingest(
      builder,
      _summary,
      _actionId,
      _actionStartTime,
      _actionEndTime,
      _totStartTime,
      _totEndTime,
      _actionActorSrcType,
      _actionActorSrcId,
      _effector,
      _targetSrcType,
      _targetSrcId,
      _o.ActorInterceptLat,
      _o.ActorInterceptLon,
      _o.ActorInterceptAlt,
      _o.WeaponInterceptLat,
      _o.WeaponInterceptLon,
      _o.WeaponInterceptAlt,
      _actionMetrics);
  }
}

public class EffectResponseActionsList_IngestT
{
  public string Summary { get; set; }
  public string ActionId { get; set; }
  public string ActionStartTime { get; set; }
  public string ActionEndTime { get; set; }
  public string TotStartTime { get; set; }
  public string TotEndTime { get; set; }
  public string ActionActorSrcType { get; set; }
  public string ActionActorSrcId { get; set; }
  public string Effector { get; set; }
  public string TargetSrcType { get; set; }
  public string TargetSrcId { get; set; }
  public double ActorInterceptLat { get; set; }
  public double ActorInterceptLon { get; set; }
  public double ActorInterceptAlt { get; set; }
  public double WeaponInterceptLat { get; set; }
  public double WeaponInterceptLon { get; set; }
  public double WeaponInterceptAlt { get; set; }
  public List<string> ActionMetrics { get; set; }

  public EffectResponseActionsList_IngestT() {
    this.Summary = null;
    this.ActionId = null;
    this.ActionStartTime = null;
    this.ActionEndTime = null;
    this.TotStartTime = null;
    this.TotEndTime = null;
    this.ActionActorSrcType = null;
    this.ActionActorSrcId = null;
    this.Effector = null;
    this.TargetSrcType = null;
    this.TargetSrcId = null;
    this.ActorInterceptLat = 0.0;
    this.ActorInterceptLon = 0.0;
    this.ActorInterceptAlt = 0.0;
    this.WeaponInterceptLat = 0.0;
    this.WeaponInterceptLon = 0.0;
    this.WeaponInterceptAlt = 0.0;
    this.ActionMetrics = null;
  }
  public static EffectResponseActionsList_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EffectResponseActionsList_Ingest.GetRootAsEffectResponseActionsList_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EffectResponseActionsList_Ingest.FinishEffectResponseActionsList_IngestBuffer(fbb, EffectResponseActionsList_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EffectResponseActionsList_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Summary*/, false)
      && verifier.VerifyString(tablePos, 6 /*ActionId*/, false)
      && verifier.VerifyString(tablePos, 8 /*ActionStartTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*ActionEndTime*/, false)
      && verifier.VerifyString(tablePos, 12 /*TotStartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*TotEndTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*ActionActorSrcType*/, false)
      && verifier.VerifyString(tablePos, 18 /*ActionActorSrcId*/, false)
      && verifier.VerifyString(tablePos, 20 /*Effector*/, false)
      && verifier.VerifyString(tablePos, 22 /*TargetSrcType*/, false)
      && verifier.VerifyString(tablePos, 24 /*TargetSrcId*/, false)
      && verifier.VerifyField(tablePos, 26 /*ActorInterceptLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ActorInterceptLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*ActorInterceptAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*WeaponInterceptLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*WeaponInterceptLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*WeaponInterceptAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*ActionMetrics*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
