// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
public struct RFEmitterDetails_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFEmitterDetails_Full GetRootAsRFEmitterDetails_Full(ByteBuffer _bb) { return GetRootAsRFEmitterDetails_Full(_bb, new RFEmitterDetails_Full()); }
  public static RFEmitterDetails_Full GetRootAsRFEmitterDetails_Full(ByteBuffer _bb, RFEmitterDetails_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFEmitterDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RFEM"); }
  public static bool VerifyRFEmitterDetails_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RFEM", false, RFEmitterDetails_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFEmitterDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFEMITTERDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier of the parent RF Emitter.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdRFEmitter { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdRFEmitterBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdRFEmitterBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdRFEmitterArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Designator of this RF Emitter.
  /// Example: /// Example: DESIGNATOR
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Designator { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesignatorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDesignatorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDesignatorArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional alternate name or alias for this RF Emitter.
  /// Example: /// Example: ALTERNATE_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AltName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAltNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAltNameArray() { return __p.__vector_as_array<byte>(12); }
  /// Family of this RF Emitter type.
  /// Example: /// Example: FAMILY
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Family { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFamilyBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetFamilyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetFamilyArray() { return __p.__vector_as_array<byte>(14); }
  /// Name of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTION_FACILITY
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ProductionFacilityName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductionFacilityNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetProductionFacilityNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetProductionFacilityNameArray() { return __p.__vector_as_array<byte>(16); }
  /// Alternate facility name for this RF Emitter.
  /// Example: /// Example: ALTERNATE_FACILITY_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AlternateFacilityName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlternateFacilityNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAlternateFacilityNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAlternateFacilityNameArray() { return __p.__vector_as_array<byte>(18); }
  /// Unique identifier of the organization which manufactures this RF Emitter.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Unique identifier of the location of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ProductionFacilityLocationId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductionFacilityLocationIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetProductionFacilityLocationIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetProductionFacilityLocationIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double SystemSensitivityStart { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
  /// Example: /// Example: 150.23
  /// Constraints: No constraints specified.
  public double SystemSensitivityEnd { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Type or name of receiver.
  /// Example: /// Example: RECEIVER_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ReceiverType { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverTypeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetReceiverTypeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetReceiverTypeArray() { return __p.__vector_as_array<byte>(28); }
  /// Receiver sensitivity in dBm.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double ReceiverSensitivity { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Receiver bandwidth in Mhz.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  public double ReceiverBandwidth { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transmitter frequency in Mhz.
  /// Example: /// Example: 105.9
  /// Constraints: No constraints specified.
  public double TransmitterFrequency { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transmitter bandwidth in Mhz.
  /// Example: /// Example: 0.125
  /// Constraints: No constraints specified.
  public double TransmitterBandwidth { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transmit power in Watts.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double TransmitPower { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Barrage noise bandwidth in Mhz.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double BarrageNoiseBandwidth { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Doppler noise value in Mhz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double DopplerNoise { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double DrfmInstantaneousBandwidth { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of channels.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumChannels { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of bits.
  /// Example: /// Example: 256
  /// Constraints: No constraints specified.
  public int NumBits { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string AntennaSize(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AntennaSizeLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// For parabolic/dish antennas, the diameter of the antenna in meters.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double AntennaDiameter { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Notes on the RF Emitter.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string Notes { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(54); }
  /// Secondary notes on the RF Emitter.
  /// Example: /// Example: MORE_NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string SecondaryNotes { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSecondaryNotesBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetSecondaryNotesBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetSecondaryNotesArray() { return __p.__vector_as_array<byte>(56); }
  /// Detailed description of the RF Emitter.
  /// Example: /// Example: DESCRIPTION
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string Description { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(58); }
  /// Array of URLs containing additional information on this RF Emitter.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Urls(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UrlsLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(62); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(64); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(66); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RFEmitterDetails_Full_dataMode_Enum DataMode { get { int o = __p.__offset(68); return o != 0 ? (RFEmitterDetails_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFEmitterDetails_Full_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(70); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(72); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(74); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(76); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string ProductionFacilityLocation { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductionFacilityLocationBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetProductionFacilityLocationBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetProductionFacilityLocationArray() { return __p.__vector_as_array<byte>(78); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string ManufacturerOrg { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetManufacturerOrgArray() { return __p.__vector_as_array<byte>(80); }

  public static Offset<RFEmitterDetails_Full> CreateRFEmitterDetails_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idRFEmitterOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset designatorOffset = default(StringOffset),
      StringOffset altNameOffset = default(StringOffset),
      StringOffset familyOffset = default(StringOffset),
      StringOffset productionFacilityNameOffset = default(StringOffset),
      StringOffset alternateFacilityNameOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      StringOffset productionFacilityLocationIdOffset = default(StringOffset),
      double systemSensitivityStart = 0.0,
      double systemSensitivityEnd = 0.0,
      StringOffset receiverTypeOffset = default(StringOffset),
      double receiverSensitivity = 0.0,
      double receiverBandwidth = 0.0,
      double transmitterFrequency = 0.0,
      double transmitterBandwidth = 0.0,
      double transmitPower = 0.0,
      double barrageNoiseBandwidth = 0.0,
      double dopplerNoise = 0.0,
      double drfmInstantaneousBandwidth = 0.0,
      int numChannels = 0,
      int numBits = 0,
      VectorOffset antennaSizeOffset = default(VectorOffset),
      double antennaDiameter = 0.0,
      StringOffset notesOffset = default(StringOffset),
      StringOffset secondaryNotesOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset urlsOffset = default(VectorOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      RFEmitterDetails_Full_dataMode_Enum dataMode = RFEmitterDetails_Full_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset productionFacilityLocationOffset = default(StringOffset),
      StringOffset manufacturerOrgOffset = default(StringOffset)) {
    builder.StartTable(39);
    RFEmitterDetails_Full.AddAntennaDiameter(builder, antennaDiameter);
    RFEmitterDetails_Full.AddDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth);
    RFEmitterDetails_Full.AddDopplerNoise(builder, dopplerNoise);
    RFEmitterDetails_Full.AddBarrageNoiseBandwidth(builder, barrageNoiseBandwidth);
    RFEmitterDetails_Full.AddTransmitPower(builder, transmitPower);
    RFEmitterDetails_Full.AddTransmitterBandwidth(builder, transmitterBandwidth);
    RFEmitterDetails_Full.AddTransmitterFrequency(builder, transmitterFrequency);
    RFEmitterDetails_Full.AddReceiverBandwidth(builder, receiverBandwidth);
    RFEmitterDetails_Full.AddReceiverSensitivity(builder, receiverSensitivity);
    RFEmitterDetails_Full.AddSystemSensitivityEnd(builder, systemSensitivityEnd);
    RFEmitterDetails_Full.AddSystemSensitivityStart(builder, systemSensitivityStart);
    RFEmitterDetails_Full.AddManufacturerOrg(builder, manufacturerOrgOffset);
    RFEmitterDetails_Full.AddProductionFacilityLocation(builder, productionFacilityLocationOffset);
    RFEmitterDetails_Full.AddUpdatedBy(builder, updatedByOffset);
    RFEmitterDetails_Full.AddUpdatedAt(builder, updatedAtOffset);
    RFEmitterDetails_Full.AddCreatedBy(builder, createdByOffset);
    RFEmitterDetails_Full.AddCreatedAt(builder, createdAtOffset);
    RFEmitterDetails_Full.AddOrigNetwork(builder, origNetworkOffset);
    RFEmitterDetails_Full.AddOrigin(builder, originOffset);
    RFEmitterDetails_Full.AddSource(builder, sourceOffset);
    RFEmitterDetails_Full.AddUrls(builder, urlsOffset);
    RFEmitterDetails_Full.AddDescription(builder, descriptionOffset);
    RFEmitterDetails_Full.AddSecondaryNotes(builder, secondaryNotesOffset);
    RFEmitterDetails_Full.AddNotes(builder, notesOffset);
    RFEmitterDetails_Full.AddAntennaSize(builder, antennaSizeOffset);
    RFEmitterDetails_Full.AddNumBits(builder, numBits);
    RFEmitterDetails_Full.AddNumChannels(builder, numChannels);
    RFEmitterDetails_Full.AddReceiverType(builder, receiverTypeOffset);
    RFEmitterDetails_Full.AddProductionFacilityLocationId(builder, productionFacilityLocationIdOffset);
    RFEmitterDetails_Full.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    RFEmitterDetails_Full.AddAlternateFacilityName(builder, alternateFacilityNameOffset);
    RFEmitterDetails_Full.AddProductionFacilityName(builder, productionFacilityNameOffset);
    RFEmitterDetails_Full.AddFamily(builder, familyOffset);
    RFEmitterDetails_Full.AddAltName(builder, altNameOffset);
    RFEmitterDetails_Full.AddDesignator(builder, designatorOffset);
    RFEmitterDetails_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    RFEmitterDetails_Full.AddIdRFEmitter(builder, idRFEmitterOffset);
    RFEmitterDetails_Full.AddId(builder, idOffset);
    RFEmitterDetails_Full.AddDataMode(builder, dataMode);
    return RFEmitterDetails_Full.EndRFEmitterDetails_Full(builder);
  }

  public static void StartRFEmitterDetails_Full(FlatBufferBuilder builder) { builder.StartTable(39); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdRFEmitter(FlatBufferBuilder builder, StringOffset idRFEmitterOffset) { builder.AddOffset(1, idRFEmitterOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddDesignator(FlatBufferBuilder builder, StringOffset designatorOffset) { builder.AddOffset(3, designatorOffset.Value, 0); }
  public static void AddAltName(FlatBufferBuilder builder, StringOffset altNameOffset) { builder.AddOffset(4, altNameOffset.Value, 0); }
  public static void AddFamily(FlatBufferBuilder builder, StringOffset familyOffset) { builder.AddOffset(5, familyOffset.Value, 0); }
  public static void AddProductionFacilityName(FlatBufferBuilder builder, StringOffset productionFacilityNameOffset) { builder.AddOffset(6, productionFacilityNameOffset.Value, 0); }
  public static void AddAlternateFacilityName(FlatBufferBuilder builder, StringOffset alternateFacilityNameOffset) { builder.AddOffset(7, alternateFacilityNameOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(8, manufacturerOrgIdOffset.Value, 0); }
  public static void AddProductionFacilityLocationId(FlatBufferBuilder builder, StringOffset productionFacilityLocationIdOffset) { builder.AddOffset(9, productionFacilityLocationIdOffset.Value, 0); }
  public static void AddSystemSensitivityStart(FlatBufferBuilder builder, double systemSensitivityStart) { builder.AddDouble(10, systemSensitivityStart, 0.0); }
  public static void AddSystemSensitivityEnd(FlatBufferBuilder builder, double systemSensitivityEnd) { builder.AddDouble(11, systemSensitivityEnd, 0.0); }
  public static void AddReceiverType(FlatBufferBuilder builder, StringOffset receiverTypeOffset) { builder.AddOffset(12, receiverTypeOffset.Value, 0); }
  public static void AddReceiverSensitivity(FlatBufferBuilder builder, double receiverSensitivity) { builder.AddDouble(13, receiverSensitivity, 0.0); }
  public static void AddReceiverBandwidth(FlatBufferBuilder builder, double receiverBandwidth) { builder.AddDouble(14, receiverBandwidth, 0.0); }
  public static void AddTransmitterFrequency(FlatBufferBuilder builder, double transmitterFrequency) { builder.AddDouble(15, transmitterFrequency, 0.0); }
  public static void AddTransmitterBandwidth(FlatBufferBuilder builder, double transmitterBandwidth) { builder.AddDouble(16, transmitterBandwidth, 0.0); }
  public static void AddTransmitPower(FlatBufferBuilder builder, double transmitPower) { builder.AddDouble(17, transmitPower, 0.0); }
  public static void AddBarrageNoiseBandwidth(FlatBufferBuilder builder, double barrageNoiseBandwidth) { builder.AddDouble(18, barrageNoiseBandwidth, 0.0); }
  public static void AddDopplerNoise(FlatBufferBuilder builder, double dopplerNoise) { builder.AddDouble(19, dopplerNoise, 0.0); }
  public static void AddDrfmInstantaneousBandwidth(FlatBufferBuilder builder, double drfmInstantaneousBandwidth) { builder.AddDouble(20, drfmInstantaneousBandwidth, 0.0); }
  public static void AddNumChannels(FlatBufferBuilder builder, int numChannels) { builder.AddInt(21, numChannels, 0); }
  public static void AddNumBits(FlatBufferBuilder builder, int numBits) { builder.AddInt(22, numBits, 0); }
  public static void AddAntennaSize(FlatBufferBuilder builder, VectorOffset antennaSizeOffset) { builder.AddOffset(23, antennaSizeOffset.Value, 0); }
  public static VectorOffset CreateAntennaSizeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAntennaSizeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAntennaSizeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAntennaSizeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAntennaSizeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntennaDiameter(FlatBufferBuilder builder, double antennaDiameter) { builder.AddDouble(24, antennaDiameter, 0.0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(25, notesOffset.Value, 0); }
  public static void AddSecondaryNotes(FlatBufferBuilder builder, StringOffset secondaryNotesOffset) { builder.AddOffset(26, secondaryNotesOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(27, descriptionOffset.Value, 0); }
  public static void AddUrls(FlatBufferBuilder builder, VectorOffset urlsOffset) { builder.AddOffset(28, urlsOffset.Value, 0); }
  public static VectorOffset CreateUrlsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUrlsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(29, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(30, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(31, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RFEmitterDetails_Full_dataMode_Enum dataMode) { builder.AddSbyte(32, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(33, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(34, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(35, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(36, updatedByOffset.Value, 0); }
  public static void AddProductionFacilityLocation(FlatBufferBuilder builder, StringOffset productionFacilityLocationOffset) { builder.AddOffset(37, productionFacilityLocationOffset.Value, 0); }
  public static void AddManufacturerOrg(FlatBufferBuilder builder, StringOffset manufacturerOrgOffset) { builder.AddOffset(38, manufacturerOrgOffset.Value, 0); }
  public static Offset<RFEmitterDetails_Full> EndRFEmitterDetails_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFEmitterDetails_Full>(o);
  }
  public static void FinishRFEmitterDetails_FullBuffer(FlatBufferBuilder builder, Offset<RFEmitterDetails_Full> offset) { builder.Finish(offset.Value, "RFEM"); }
  public static void FinishSizePrefixedRFEmitterDetails_FullBuffer(FlatBufferBuilder builder, Offset<RFEmitterDetails_Full> offset) { builder.FinishSizePrefixed(offset.Value, "RFEM"); }
  public RFEmitterDetails_FullT UnPack() {
    var _o = new RFEmitterDetails_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFEmitterDetails_FullT _o) {
    _o.Id = this.Id;
    _o.IdRFEmitter = this.IdRFEmitter;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Designator = this.Designator;
    _o.AltName = this.AltName;
    _o.Family = this.Family;
    _o.ProductionFacilityName = this.ProductionFacilityName;
    _o.AlternateFacilityName = this.AlternateFacilityName;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.ProductionFacilityLocationId = this.ProductionFacilityLocationId;
    _o.SystemSensitivityStart = this.SystemSensitivityStart;
    _o.SystemSensitivityEnd = this.SystemSensitivityEnd;
    _o.ReceiverType = this.ReceiverType;
    _o.ReceiverSensitivity = this.ReceiverSensitivity;
    _o.ReceiverBandwidth = this.ReceiverBandwidth;
    _o.TransmitterFrequency = this.TransmitterFrequency;
    _o.TransmitterBandwidth = this.TransmitterBandwidth;
    _o.TransmitPower = this.TransmitPower;
    _o.BarrageNoiseBandwidth = this.BarrageNoiseBandwidth;
    _o.DopplerNoise = this.DopplerNoise;
    _o.DrfmInstantaneousBandwidth = this.DrfmInstantaneousBandwidth;
    _o.NumChannels = this.NumChannels;
    _o.NumBits = this.NumBits;
    _o.AntennaSize = new List<string>();
    for (var _j = 0; _j < this.AntennaSizeLength; ++_j) {_o.AntennaSize.Add(this.AntennaSize(_j));}
    _o.AntennaDiameter = this.AntennaDiameter;
    _o.Notes = this.Notes;
    _o.SecondaryNotes = this.SecondaryNotes;
    _o.Description = this.Description;
    _o.Urls = new List<string>();
    for (var _j = 0; _j < this.UrlsLength; ++_j) {_o.Urls.Add(this.Urls(_j));}
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.ProductionFacilityLocation = this.ProductionFacilityLocation;
    _o.ManufacturerOrg = this.ManufacturerOrg;
  }
  public static Offset<RFEmitterDetails_Full> Pack(FlatBufferBuilder builder, RFEmitterDetails_FullT _o) {
    if (_o == null) return default(Offset<RFEmitterDetails_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idRFEmitter = _o.IdRFEmitter == null ? default(StringOffset) : builder.CreateString(_o.IdRFEmitter);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _designator = _o.Designator == null ? default(StringOffset) : builder.CreateString(_o.Designator);
    var _altName = _o.AltName == null ? default(StringOffset) : builder.CreateString(_o.AltName);
    var _family = _o.Family == null ? default(StringOffset) : builder.CreateString(_o.Family);
    var _productionFacilityName = _o.ProductionFacilityName == null ? default(StringOffset) : builder.CreateString(_o.ProductionFacilityName);
    var _alternateFacilityName = _o.AlternateFacilityName == null ? default(StringOffset) : builder.CreateString(_o.AlternateFacilityName);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _productionFacilityLocationId = _o.ProductionFacilityLocationId == null ? default(StringOffset) : builder.CreateString(_o.ProductionFacilityLocationId);
    var _receiverType = _o.ReceiverType == null ? default(StringOffset) : builder.CreateString(_o.ReceiverType);
    var _antennaSize = default(VectorOffset);
    if (_o.AntennaSize != null) {
      var __antennaSize = new StringOffset[_o.AntennaSize.Count];
      for (var _j = 0; _j < __antennaSize.Length; ++_j) { __antennaSize[_j] = builder.CreateString(_o.AntennaSize[_j]); }
      _antennaSize = CreateAntennaSizeVector(builder, __antennaSize);
    }
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _secondaryNotes = _o.SecondaryNotes == null ? default(StringOffset) : builder.CreateString(_o.SecondaryNotes);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _urls = default(VectorOffset);
    if (_o.Urls != null) {
      var __urls = new StringOffset[_o.Urls.Count];
      for (var _j = 0; _j < __urls.Length; ++_j) { __urls[_j] = builder.CreateString(_o.Urls[_j]); }
      _urls = CreateUrlsVector(builder, __urls);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _productionFacilityLocation = _o.ProductionFacilityLocation == null ? default(StringOffset) : builder.CreateString(_o.ProductionFacilityLocation);
    var _manufacturerOrg = _o.ManufacturerOrg == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrg);
    return CreateRFEmitterDetails_Full(
      builder,
      _id,
      _idRFEmitter,
      _classificationMarking,
      _designator,
      _altName,
      _family,
      _productionFacilityName,
      _alternateFacilityName,
      _manufacturerOrgId,
      _productionFacilityLocationId,
      _o.SystemSensitivityStart,
      _o.SystemSensitivityEnd,
      _receiverType,
      _o.ReceiverSensitivity,
      _o.ReceiverBandwidth,
      _o.TransmitterFrequency,
      _o.TransmitterBandwidth,
      _o.TransmitPower,
      _o.BarrageNoiseBandwidth,
      _o.DopplerNoise,
      _o.DrfmInstantaneousBandwidth,
      _o.NumChannels,
      _o.NumBits,
      _antennaSize,
      _o.AntennaDiameter,
      _notes,
      _secondaryNotes,
      _description,
      _urls,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _productionFacilityLocation,
      _manufacturerOrg);
  }
}

public class RFEmitterDetails_FullT
{
  public string Id { get; set; }
  public string IdRFEmitter { get; set; }
  public string ClassificationMarking { get; set; }
  public string Designator { get; set; }
  public string AltName { get; set; }
  public string Family { get; set; }
  public string ProductionFacilityName { get; set; }
  public string AlternateFacilityName { get; set; }
  public string ManufacturerOrgId { get; set; }
  public string ProductionFacilityLocationId { get; set; }
  public double SystemSensitivityStart { get; set; }
  public double SystemSensitivityEnd { get; set; }
  public string ReceiverType { get; set; }
  public double ReceiverSensitivity { get; set; }
  public double ReceiverBandwidth { get; set; }
  public double TransmitterFrequency { get; set; }
  public double TransmitterBandwidth { get; set; }
  public double TransmitPower { get; set; }
  public double BarrageNoiseBandwidth { get; set; }
  public double DopplerNoise { get; set; }
  public double DrfmInstantaneousBandwidth { get; set; }
  public int NumChannels { get; set; }
  public int NumBits { get; set; }
  public List<string> AntennaSize { get; set; }
  public double AntennaDiameter { get; set; }
  public string Notes { get; set; }
  public string SecondaryNotes { get; set; }
  public string Description { get; set; }
  public List<string> Urls { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public RFEmitterDetails_Full_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string ProductionFacilityLocation { get; set; }
  public string ManufacturerOrg { get; set; }

  public RFEmitterDetails_FullT() {
    this.Id = null;
    this.IdRFEmitter = null;
    this.ClassificationMarking = null;
    this.Designator = null;
    this.AltName = null;
    this.Family = null;
    this.ProductionFacilityName = null;
    this.AlternateFacilityName = null;
    this.ManufacturerOrgId = null;
    this.ProductionFacilityLocationId = null;
    this.SystemSensitivityStart = 0.0;
    this.SystemSensitivityEnd = 0.0;
    this.ReceiverType = null;
    this.ReceiverSensitivity = 0.0;
    this.ReceiverBandwidth = 0.0;
    this.TransmitterFrequency = 0.0;
    this.TransmitterBandwidth = 0.0;
    this.TransmitPower = 0.0;
    this.BarrageNoiseBandwidth = 0.0;
    this.DopplerNoise = 0.0;
    this.DrfmInstantaneousBandwidth = 0.0;
    this.NumChannels = 0;
    this.NumBits = 0;
    this.AntennaSize = null;
    this.AntennaDiameter = 0.0;
    this.Notes = null;
    this.SecondaryNotes = null;
    this.Description = null;
    this.Urls = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = RFEmitterDetails_Full_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.ProductionFacilityLocation = null;
    this.ManufacturerOrg = null;
  }
  public static RFEmitterDetails_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return RFEmitterDetails_Full.GetRootAsRFEmitterDetails_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFEmitterDetails_Full.FinishRFEmitterDetails_FullBuffer(fbb, RFEmitterDetails_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFEmitterDetails_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdRFEmitter*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Designator*/, false)
      && verifier.VerifyString(tablePos, 12 /*AltName*/, false)
      && verifier.VerifyString(tablePos, 14 /*Family*/, false)
      && verifier.VerifyString(tablePos, 16 /*ProductionFacilityName*/, false)
      && verifier.VerifyString(tablePos, 18 /*AlternateFacilityName*/, false)
      && verifier.VerifyString(tablePos, 20 /*ManufacturerOrgId*/, false)
      && verifier.VerifyString(tablePos, 22 /*ProductionFacilityLocationId*/, false)
      && verifier.VerifyField(tablePos, 24 /*SystemSensitivityStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*SystemSensitivityEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 28 /*ReceiverType*/, false)
      && verifier.VerifyField(tablePos, 30 /*ReceiverSensitivity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*ReceiverBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*TransmitterFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*TransmitterBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*TransmitPower*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*BarrageNoiseBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DopplerNoise*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DrfmInstantaneousBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*NumChannels*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*NumBits*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*AntennaSize*/, false)
      && verifier.VerifyField(tablePos, 52 /*AntennaDiameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 56 /*SecondaryNotes*/, false)
      && verifier.VerifyString(tablePos, 58 /*Description*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*Urls*/, false)
      && verifier.VerifyString(tablePos, 62 /*Source*/, false)
      && verifier.VerifyString(tablePos, 64 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 66 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 68 /*DataMode*/, 1 /*RFEmitterDetails_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 70 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 74 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 76 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 78 /*ProductionFacilityLocation*/, false)
      && verifier.VerifyString(tablePos, 80 /*ManufacturerOrg*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
