// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The airfield status contains dynamic data of an airfield's capabilities.
public struct AirfieldStatus_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirfieldStatus_Abridged GetRootAsAirfieldStatus_Abridged(ByteBuffer _bb) { return GetRootAsAirfieldStatus_Abridged(_bb, new AirfieldStatus_Abridged()); }
  public static AirfieldStatus_Abridged GetRootAsAirfieldStatus_Abridged(ByteBuffer _bb, AirfieldStatus_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirfieldStatus_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRF"); }
  public static bool VerifyAirfieldStatus_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRF", false, AirfieldStatus_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirfieldStatus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the Airfield for which this status is referencing.
  /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdAirfield { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAirfieldBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdAirfieldBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdAirfieldArray() { return __p.__vector_as_array<byte>(8); }
  /// Alternate airfield identifier provided by the source.
  /// Example: /// Example: AIRFIELD-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AltAirfieldId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAirfieldIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAltAirfieldIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAltAirfieldIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int PassengerServiceMOG { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int FleetServiceMOG { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int CargoMOG { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  public int FuelMOG { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
  /// Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
  /// Constraints: No constraints specified.
  public string FuelTypes(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FuelTypesLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
  /// Example: /// Example: [263083.6, 286674.9, 18143.69]
  /// Constraints: No constraints specified.
  public string FuelQtys(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FuelQtysLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int MxMOG { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int OperatingMOG { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of aircraft that are currently on ground (COG) at the airfield.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumCOG { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int WideWorkingMOG { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int WideParkingMOG { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int NarrowWorkingMOG { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int NarrowParkingMOG { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
  /// Example: /// Example: ['30k', 'AT', '60k']
  /// Constraints: No constraints specified.
  public string MheTypes(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MheTypesLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
  /// Example: /// Example: [1, 3, 1]
  /// Constraints: No constraints specified.
  public string MheQtys(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MheQtysLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The level of medical support and capabilities available at the airfield.
  /// Example: /// Example: Large Field Hospital
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MedCap { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMedCapBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetMedCapBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetMedCapArray() { return __p.__vector_as_array<byte>(42); }
  /// The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
  /// Example: /// Example: FAA-A
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ArffCat { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArffCatBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetArffCatBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetArffCatArray() { return __p.__vector_as_array<byte>(44); }
  /// The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int GseTime { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number or ID of primary runway at the airfield.
  /// Example: /// Example: 35R
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PriRwyNum { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriRwyNumBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPriRwyNumBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPriRwyNumArray() { return __p.__vector_as_array<byte>(48); }
  /// The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  public int RwyCondReading { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int RwyFrictionFactor { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of markings currently on the primary runway.
  /// Example: /// Example: ['Aiming Point', 'Threshold']
  /// Constraints: No constraints specified.
  public string RwyMarkings(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RwyMarkingsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Description of the current status of the airfield.
  /// Example: /// Example: Status message about the airfield.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Message { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetMessageArray() { return __p.__vector_as_array<byte>(56); }
  /// The primary frequency which the airfield is currently operating, in megahertz.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  public double PriFreq { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
  /// Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
  /// Constraints: No constraints specified.
  public string SlotTypesReq(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SlotTypesReqLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(62); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(64); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(66); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(68); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(70); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(72); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirfieldStatus_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(74); return o != 0 ? (AirfieldStatus_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirfieldStatus_Abridged_dataMode_Enum.REAL; } }

  public static Offset<AirfieldStatus_Abridged> CreateAirfieldStatus_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idAirfieldOffset = default(StringOffset),
      StringOffset altAirfieldIdOffset = default(StringOffset),
      int passengerServiceMOG = 0,
      int fleetServiceMOG = 0,
      int cargoMOG = 0,
      int fuelMOG = 0,
      VectorOffset fuelTypesOffset = default(VectorOffset),
      VectorOffset fuelQtysOffset = default(VectorOffset),
      int mxMOG = 0,
      int operatingMOG = 0,
      int numCOG = 0,
      int wideWorkingMOG = 0,
      int wideParkingMOG = 0,
      int narrowWorkingMOG = 0,
      int narrowParkingMOG = 0,
      VectorOffset mheTypesOffset = default(VectorOffset),
      VectorOffset mheQtysOffset = default(VectorOffset),
      StringOffset medCapOffset = default(StringOffset),
      StringOffset arffCatOffset = default(StringOffset),
      int gseTime = 0,
      StringOffset priRwyNumOffset = default(StringOffset),
      int rwyCondReading = 0,
      int rwyFrictionFactor = 0,
      VectorOffset rwyMarkingsOffset = default(VectorOffset),
      StringOffset messageOffset = default(StringOffset),
      double priFreq = 0.0,
      VectorOffset slotTypesReqOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirfieldStatus_Abridged_dataMode_Enum dataMode = AirfieldStatus_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(36);
    AirfieldStatus_Abridged.AddPriFreq(builder, priFreq);
    AirfieldStatus_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AirfieldStatus_Abridged.AddOrigin(builder, originOffset);
    AirfieldStatus_Abridged.AddSource(builder, sourceOffset);
    AirfieldStatus_Abridged.AddSourceDL(builder, sourceDLOffset);
    AirfieldStatus_Abridged.AddCreatedBy(builder, createdByOffset);
    AirfieldStatus_Abridged.AddCreatedAt(builder, createdAtOffset);
    AirfieldStatus_Abridged.AddSlotTypesReq(builder, slotTypesReqOffset);
    AirfieldStatus_Abridged.AddMessage(builder, messageOffset);
    AirfieldStatus_Abridged.AddRwyMarkings(builder, rwyMarkingsOffset);
    AirfieldStatus_Abridged.AddRwyFrictionFactor(builder, rwyFrictionFactor);
    AirfieldStatus_Abridged.AddRwyCondReading(builder, rwyCondReading);
    AirfieldStatus_Abridged.AddPriRwyNum(builder, priRwyNumOffset);
    AirfieldStatus_Abridged.AddGseTime(builder, gseTime);
    AirfieldStatus_Abridged.AddArffCat(builder, arffCatOffset);
    AirfieldStatus_Abridged.AddMedCap(builder, medCapOffset);
    AirfieldStatus_Abridged.AddMheQtys(builder, mheQtysOffset);
    AirfieldStatus_Abridged.AddMheTypes(builder, mheTypesOffset);
    AirfieldStatus_Abridged.AddNarrowParkingMOG(builder, narrowParkingMOG);
    AirfieldStatus_Abridged.AddNarrowWorkingMOG(builder, narrowWorkingMOG);
    AirfieldStatus_Abridged.AddWideParkingMOG(builder, wideParkingMOG);
    AirfieldStatus_Abridged.AddWideWorkingMOG(builder, wideWorkingMOG);
    AirfieldStatus_Abridged.AddNumCOG(builder, numCOG);
    AirfieldStatus_Abridged.AddOperatingMOG(builder, operatingMOG);
    AirfieldStatus_Abridged.AddMxMOG(builder, mxMOG);
    AirfieldStatus_Abridged.AddFuelQtys(builder, fuelQtysOffset);
    AirfieldStatus_Abridged.AddFuelTypes(builder, fuelTypesOffset);
    AirfieldStatus_Abridged.AddFuelMOG(builder, fuelMOG);
    AirfieldStatus_Abridged.AddCargoMOG(builder, cargoMOG);
    AirfieldStatus_Abridged.AddFleetServiceMOG(builder, fleetServiceMOG);
    AirfieldStatus_Abridged.AddPassengerServiceMOG(builder, passengerServiceMOG);
    AirfieldStatus_Abridged.AddAltAirfieldId(builder, altAirfieldIdOffset);
    AirfieldStatus_Abridged.AddIdAirfield(builder, idAirfieldOffset);
    AirfieldStatus_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AirfieldStatus_Abridged.AddId(builder, idOffset);
    AirfieldStatus_Abridged.AddDataMode(builder, dataMode);
    return AirfieldStatus_Abridged.EndAirfieldStatus_Abridged(builder);
  }

  public static void StartAirfieldStatus_Abridged(FlatBufferBuilder builder) { builder.StartTable(36); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdAirfield(FlatBufferBuilder builder, StringOffset idAirfieldOffset) { builder.AddOffset(2, idAirfieldOffset.Value, 0); }
  public static void AddAltAirfieldId(FlatBufferBuilder builder, StringOffset altAirfieldIdOffset) { builder.AddOffset(3, altAirfieldIdOffset.Value, 0); }
  public static void AddPassengerServiceMOG(FlatBufferBuilder builder, int passengerServiceMOG) { builder.AddInt(4, passengerServiceMOG, 0); }
  public static void AddFleetServiceMOG(FlatBufferBuilder builder, int fleetServiceMOG) { builder.AddInt(5, fleetServiceMOG, 0); }
  public static void AddCargoMOG(FlatBufferBuilder builder, int cargoMOG) { builder.AddInt(6, cargoMOG, 0); }
  public static void AddFuelMOG(FlatBufferBuilder builder, int fuelMOG) { builder.AddInt(7, fuelMOG, 0); }
  public static void AddFuelTypes(FlatBufferBuilder builder, VectorOffset fuelTypesOffset) { builder.AddOffset(8, fuelTypesOffset.Value, 0); }
  public static VectorOffset CreateFuelTypesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFuelTypesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFuelTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFuelTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFuelTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFuelQtys(FlatBufferBuilder builder, VectorOffset fuelQtysOffset) { builder.AddOffset(9, fuelQtysOffset.Value, 0); }
  public static VectorOffset CreateFuelQtysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFuelQtysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFuelQtysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFuelQtysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFuelQtysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMxMOG(FlatBufferBuilder builder, int mxMOG) { builder.AddInt(10, mxMOG, 0); }
  public static void AddOperatingMOG(FlatBufferBuilder builder, int operatingMOG) { builder.AddInt(11, operatingMOG, 0); }
  public static void AddNumCOG(FlatBufferBuilder builder, int numCOG) { builder.AddInt(12, numCOG, 0); }
  public static void AddWideWorkingMOG(FlatBufferBuilder builder, int wideWorkingMOG) { builder.AddInt(13, wideWorkingMOG, 0); }
  public static void AddWideParkingMOG(FlatBufferBuilder builder, int wideParkingMOG) { builder.AddInt(14, wideParkingMOG, 0); }
  public static void AddNarrowWorkingMOG(FlatBufferBuilder builder, int narrowWorkingMOG) { builder.AddInt(15, narrowWorkingMOG, 0); }
  public static void AddNarrowParkingMOG(FlatBufferBuilder builder, int narrowParkingMOG) { builder.AddInt(16, narrowParkingMOG, 0); }
  public static void AddMheTypes(FlatBufferBuilder builder, VectorOffset mheTypesOffset) { builder.AddOffset(17, mheTypesOffset.Value, 0); }
  public static VectorOffset CreateMheTypesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMheTypesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMheTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMheTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMheTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMheQtys(FlatBufferBuilder builder, VectorOffset mheQtysOffset) { builder.AddOffset(18, mheQtysOffset.Value, 0); }
  public static VectorOffset CreateMheQtysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMheQtysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMheQtysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMheQtysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMheQtysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMedCap(FlatBufferBuilder builder, StringOffset medCapOffset) { builder.AddOffset(19, medCapOffset.Value, 0); }
  public static void AddArffCat(FlatBufferBuilder builder, StringOffset arffCatOffset) { builder.AddOffset(20, arffCatOffset.Value, 0); }
  public static void AddGseTime(FlatBufferBuilder builder, int gseTime) { builder.AddInt(21, gseTime, 0); }
  public static void AddPriRwyNum(FlatBufferBuilder builder, StringOffset priRwyNumOffset) { builder.AddOffset(22, priRwyNumOffset.Value, 0); }
  public static void AddRwyCondReading(FlatBufferBuilder builder, int rwyCondReading) { builder.AddInt(23, rwyCondReading, 0); }
  public static void AddRwyFrictionFactor(FlatBufferBuilder builder, int rwyFrictionFactor) { builder.AddInt(24, rwyFrictionFactor, 0); }
  public static void AddRwyMarkings(FlatBufferBuilder builder, VectorOffset rwyMarkingsOffset) { builder.AddOffset(25, rwyMarkingsOffset.Value, 0); }
  public static VectorOffset CreateRwyMarkingsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRwyMarkingsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRwyMarkingsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRwyMarkingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRwyMarkingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset messageOffset) { builder.AddOffset(26, messageOffset.Value, 0); }
  public static void AddPriFreq(FlatBufferBuilder builder, double priFreq) { builder.AddDouble(27, priFreq, 0.0); }
  public static void AddSlotTypesReq(FlatBufferBuilder builder, VectorOffset slotTypesReqOffset) { builder.AddOffset(28, slotTypesReqOffset.Value, 0); }
  public static VectorOffset CreateSlotTypesReqVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSlotTypesReqVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotTypesReqVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSlotTypesReqVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSlotTypesReqVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(29, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(30, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(31, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(32, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(33, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(34, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirfieldStatus_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(35, (sbyte)dataMode, 0); }
  public static Offset<AirfieldStatus_Abridged> EndAirfieldStatus_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirfieldStatus_Abridged>(o);
  }
  public static void FinishAirfieldStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirfieldStatus_Abridged> offset) { builder.Finish(offset.Value, "AIRF"); }
  public static void FinishSizePrefixedAirfieldStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirfieldStatus_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRF"); }
  public AirfieldStatus_AbridgedT UnPack() {
    var _o = new AirfieldStatus_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirfieldStatus_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdAirfield = this.IdAirfield;
    _o.AltAirfieldId = this.AltAirfieldId;
    _o.PassengerServiceMOG = this.PassengerServiceMOG;
    _o.FleetServiceMOG = this.FleetServiceMOG;
    _o.CargoMOG = this.CargoMOG;
    _o.FuelMOG = this.FuelMOG;
    _o.FuelTypes = new List<string>();
    for (var _j = 0; _j < this.FuelTypesLength; ++_j) {_o.FuelTypes.Add(this.FuelTypes(_j));}
    _o.FuelQtys = new List<string>();
    for (var _j = 0; _j < this.FuelQtysLength; ++_j) {_o.FuelQtys.Add(this.FuelQtys(_j));}
    _o.MxMOG = this.MxMOG;
    _o.OperatingMOG = this.OperatingMOG;
    _o.NumCOG = this.NumCOG;
    _o.WideWorkingMOG = this.WideWorkingMOG;
    _o.WideParkingMOG = this.WideParkingMOG;
    _o.NarrowWorkingMOG = this.NarrowWorkingMOG;
    _o.NarrowParkingMOG = this.NarrowParkingMOG;
    _o.MheTypes = new List<string>();
    for (var _j = 0; _j < this.MheTypesLength; ++_j) {_o.MheTypes.Add(this.MheTypes(_j));}
    _o.MheQtys = new List<string>();
    for (var _j = 0; _j < this.MheQtysLength; ++_j) {_o.MheQtys.Add(this.MheQtys(_j));}
    _o.MedCap = this.MedCap;
    _o.ArffCat = this.ArffCat;
    _o.GseTime = this.GseTime;
    _o.PriRwyNum = this.PriRwyNum;
    _o.RwyCondReading = this.RwyCondReading;
    _o.RwyFrictionFactor = this.RwyFrictionFactor;
    _o.RwyMarkings = new List<string>();
    for (var _j = 0; _j < this.RwyMarkingsLength; ++_j) {_o.RwyMarkings.Add(this.RwyMarkings(_j));}
    _o.Message = this.Message;
    _o.PriFreq = this.PriFreq;
    _o.SlotTypesReq = new List<string>();
    for (var _j = 0; _j < this.SlotTypesReqLength; ++_j) {_o.SlotTypesReq.Add(this.SlotTypesReq(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirfieldStatus_Abridged> Pack(FlatBufferBuilder builder, AirfieldStatus_AbridgedT _o) {
    if (_o == null) return default(Offset<AirfieldStatus_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idAirfield = _o.IdAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdAirfield);
    var _altAirfieldId = _o.AltAirfieldId == null ? default(StringOffset) : builder.CreateString(_o.AltAirfieldId);
    var _fuelTypes = default(VectorOffset);
    if (_o.FuelTypes != null) {
      var __fuelTypes = new StringOffset[_o.FuelTypes.Count];
      for (var _j = 0; _j < __fuelTypes.Length; ++_j) { __fuelTypes[_j] = builder.CreateString(_o.FuelTypes[_j]); }
      _fuelTypes = CreateFuelTypesVector(builder, __fuelTypes);
    }
    var _fuelQtys = default(VectorOffset);
    if (_o.FuelQtys != null) {
      var __fuelQtys = new StringOffset[_o.FuelQtys.Count];
      for (var _j = 0; _j < __fuelQtys.Length; ++_j) { __fuelQtys[_j] = builder.CreateString(_o.FuelQtys[_j]); }
      _fuelQtys = CreateFuelQtysVector(builder, __fuelQtys);
    }
    var _mheTypes = default(VectorOffset);
    if (_o.MheTypes != null) {
      var __mheTypes = new StringOffset[_o.MheTypes.Count];
      for (var _j = 0; _j < __mheTypes.Length; ++_j) { __mheTypes[_j] = builder.CreateString(_o.MheTypes[_j]); }
      _mheTypes = CreateMheTypesVector(builder, __mheTypes);
    }
    var _mheQtys = default(VectorOffset);
    if (_o.MheQtys != null) {
      var __mheQtys = new StringOffset[_o.MheQtys.Count];
      for (var _j = 0; _j < __mheQtys.Length; ++_j) { __mheQtys[_j] = builder.CreateString(_o.MheQtys[_j]); }
      _mheQtys = CreateMheQtysVector(builder, __mheQtys);
    }
    var _medCap = _o.MedCap == null ? default(StringOffset) : builder.CreateString(_o.MedCap);
    var _arffCat = _o.ArffCat == null ? default(StringOffset) : builder.CreateString(_o.ArffCat);
    var _priRwyNum = _o.PriRwyNum == null ? default(StringOffset) : builder.CreateString(_o.PriRwyNum);
    var _rwyMarkings = default(VectorOffset);
    if (_o.RwyMarkings != null) {
      var __rwyMarkings = new StringOffset[_o.RwyMarkings.Count];
      for (var _j = 0; _j < __rwyMarkings.Length; ++_j) { __rwyMarkings[_j] = builder.CreateString(_o.RwyMarkings[_j]); }
      _rwyMarkings = CreateRwyMarkingsVector(builder, __rwyMarkings);
    }
    var _message = _o.Message == null ? default(StringOffset) : builder.CreateString(_o.Message);
    var _slotTypesReq = default(VectorOffset);
    if (_o.SlotTypesReq != null) {
      var __slotTypesReq = new StringOffset[_o.SlotTypesReq.Count];
      for (var _j = 0; _j < __slotTypesReq.Length; ++_j) { __slotTypesReq[_j] = builder.CreateString(_o.SlotTypesReq[_j]); }
      _slotTypesReq = CreateSlotTypesReqVector(builder, __slotTypesReq);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirfieldStatus_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idAirfield,
      _altAirfieldId,
      _o.PassengerServiceMOG,
      _o.FleetServiceMOG,
      _o.CargoMOG,
      _o.FuelMOG,
      _fuelTypes,
      _fuelQtys,
      _o.MxMOG,
      _o.OperatingMOG,
      _o.NumCOG,
      _o.WideWorkingMOG,
      _o.WideParkingMOG,
      _o.NarrowWorkingMOG,
      _o.NarrowParkingMOG,
      _mheTypes,
      _mheQtys,
      _medCap,
      _arffCat,
      _o.GseTime,
      _priRwyNum,
      _o.RwyCondReading,
      _o.RwyFrictionFactor,
      _rwyMarkings,
      _message,
      _o.PriFreq,
      _slotTypesReq,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirfieldStatus_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdAirfield { get; set; }
  public string AltAirfieldId { get; set; }
  public int PassengerServiceMOG { get; set; }
  public int FleetServiceMOG { get; set; }
  public int CargoMOG { get; set; }
  public int FuelMOG { get; set; }
  public List<string> FuelTypes { get; set; }
  public List<string> FuelQtys { get; set; }
  public int MxMOG { get; set; }
  public int OperatingMOG { get; set; }
  public int NumCOG { get; set; }
  public int WideWorkingMOG { get; set; }
  public int WideParkingMOG { get; set; }
  public int NarrowWorkingMOG { get; set; }
  public int NarrowParkingMOG { get; set; }
  public List<string> MheTypes { get; set; }
  public List<string> MheQtys { get; set; }
  public string MedCap { get; set; }
  public string ArffCat { get; set; }
  public int GseTime { get; set; }
  public string PriRwyNum { get; set; }
  public int RwyCondReading { get; set; }
  public int RwyFrictionFactor { get; set; }
  public List<string> RwyMarkings { get; set; }
  public string Message { get; set; }
  public double PriFreq { get; set; }
  public List<string> SlotTypesReq { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirfieldStatus_Abridged_dataMode_Enum DataMode { get; set; }

  public AirfieldStatus_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdAirfield = null;
    this.AltAirfieldId = null;
    this.PassengerServiceMOG = 0;
    this.FleetServiceMOG = 0;
    this.CargoMOG = 0;
    this.FuelMOG = 0;
    this.FuelTypes = null;
    this.FuelQtys = null;
    this.MxMOG = 0;
    this.OperatingMOG = 0;
    this.NumCOG = 0;
    this.WideWorkingMOG = 0;
    this.WideParkingMOG = 0;
    this.NarrowWorkingMOG = 0;
    this.NarrowParkingMOG = 0;
    this.MheTypes = null;
    this.MheQtys = null;
    this.MedCap = null;
    this.ArffCat = null;
    this.GseTime = 0;
    this.PriRwyNum = null;
    this.RwyCondReading = 0;
    this.RwyFrictionFactor = 0;
    this.RwyMarkings = null;
    this.Message = null;
    this.PriFreq = 0.0;
    this.SlotTypesReq = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirfieldStatus_Abridged_dataMode_Enum.REAL;
  }
  public static AirfieldStatus_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AirfieldStatus_Abridged.GetRootAsAirfieldStatus_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirfieldStatus_Abridged.FinishAirfieldStatus_AbridgedBuffer(fbb, AirfieldStatus_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirfieldStatus_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdAirfield*/, false)
      && verifier.VerifyString(tablePos, 10 /*AltAirfieldId*/, false)
      && verifier.VerifyField(tablePos, 12 /*PassengerServiceMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*FleetServiceMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*CargoMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*FuelMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*FuelTypes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*FuelQtys*/, false)
      && verifier.VerifyField(tablePos, 24 /*MxMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*OperatingMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*NumCOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*WideWorkingMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*WideParkingMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*NarrowWorkingMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*NarrowParkingMOG*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*MheTypes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*MheQtys*/, false)
      && verifier.VerifyString(tablePos, 42 /*MedCap*/, false)
      && verifier.VerifyString(tablePos, 44 /*ArffCat*/, false)
      && verifier.VerifyField(tablePos, 46 /*GseTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 48 /*PriRwyNum*/, false)
      && verifier.VerifyField(tablePos, 50 /*RwyCondReading*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*RwyFrictionFactor*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*RwyMarkings*/, false)
      && verifier.VerifyString(tablePos, 56 /*Message*/, false)
      && verifier.VerifyField(tablePos, 58 /*PriFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*SlotTypesReq*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 64 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 66 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 68 /*Source*/, false)
      && verifier.VerifyString(tablePos, 70 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 72 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 74 /*DataMode*/, 1 /*AirfieldStatus_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
