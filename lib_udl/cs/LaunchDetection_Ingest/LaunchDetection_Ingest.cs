// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Data to analyze launch detections.
public struct LaunchDetection_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LaunchDetection_Ingest GetRootAsLaunchDetection_Ingest(ByteBuffer _bb) { return GetRootAsLaunchDetection_Ingest(_bb, new LaunchDetection_Ingest()); }
  public static LaunchDetection_Ingest GetRootAsLaunchDetection_Ingest(ByteBuffer _bb, LaunchDetection_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LaunchDetection_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LAUN"); }
  public static bool VerifyLaunchDetection_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LAUN", false, LaunchDetection_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LaunchDetection_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHDETECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Time of Launch.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LaunchTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLaunchTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLaunchTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLaunchTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Type of message for the data.
  /// Example: /// Example: Example-Msg-Type
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string MessageType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMessageTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMessageTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LaunchLatitude { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LaunchLongitude { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Angle measured clockwise from North for the launch heading (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LaunchAzimuth { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Orbit Right Ascension of Ascending Node (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Raan { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Orbit Inclination (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Inclination { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time of observation.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ObservationTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObservationTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetObservationTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetObservationTimeArray() { return __p.__vector_as_array<byte>(22); }
  /// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double ObservationLatitude { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Longitude of launch vehicle at observation time (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double ObservationLongitude { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Altitude of launch vehicle at observation time (in KM).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double ObservationAltitude { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating multiple observers were used.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool StereoFlag { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool HighZenithAzimuth { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Integer indicating how messages should be sequenced for a specific event.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int SequenceNumber { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Id to be able to correlate different messages to a specific event.
  /// Example: /// Example: EVENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EventId { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(36); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(38); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(40); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(42); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(46); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public LaunchDetection_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(48); return o != 0 ? (LaunchDetection_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : LaunchDetection_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(50); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(52); }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(54); }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(56); }

  public static Offset<LaunchDetection_Ingest> CreateLaunchDetection_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset launchTimeOffset = default(StringOffset),
      StringOffset messageTypeOffset = default(StringOffset),
      double launchLatitude = 0.0,
      double launchLongitude = 0.0,
      double launchAzimuth = 0.0,
      double raan = 0.0,
      double inclination = 0.0,
      StringOffset observationTimeOffset = default(StringOffset),
      double observationLatitude = 0.0,
      double observationLongitude = 0.0,
      double observationAltitude = 0.0,
      bool stereoFlag = false,
      bool highZenithAzimuth = false,
      int sequenceNumber = 0,
      StringOffset eventIdOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      LaunchDetection_Ingest_dataMode_Enum dataMode = LaunchDetection_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset)) {
    builder.StartTable(27);
    LaunchDetection_Ingest.AddObservationAltitude(builder, observationAltitude);
    LaunchDetection_Ingest.AddObservationLongitude(builder, observationLongitude);
    LaunchDetection_Ingest.AddObservationLatitude(builder, observationLatitude);
    LaunchDetection_Ingest.AddInclination(builder, inclination);
    LaunchDetection_Ingest.AddRaan(builder, raan);
    LaunchDetection_Ingest.AddLaunchAzimuth(builder, launchAzimuth);
    LaunchDetection_Ingest.AddLaunchLongitude(builder, launchLongitude);
    LaunchDetection_Ingest.AddLaunchLatitude(builder, launchLatitude);
    LaunchDetection_Ingest.AddUpdatedBy(builder, updatedByOffset);
    LaunchDetection_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    LaunchDetection_Ingest.AddCreatedBy(builder, createdByOffset);
    LaunchDetection_Ingest.AddCreatedAt(builder, createdAtOffset);
    LaunchDetection_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    LaunchDetection_Ingest.AddTags(builder, tagsOffset);
    LaunchDetection_Ingest.AddDescriptor(builder, descriptorOffset);
    LaunchDetection_Ingest.AddOrigin(builder, originOffset);
    LaunchDetection_Ingest.AddSource(builder, sourceOffset);
    LaunchDetection_Ingest.AddEventId(builder, eventIdOffset);
    LaunchDetection_Ingest.AddSequenceNumber(builder, sequenceNumber);
    LaunchDetection_Ingest.AddObservationTime(builder, observationTimeOffset);
    LaunchDetection_Ingest.AddMessageType(builder, messageTypeOffset);
    LaunchDetection_Ingest.AddLaunchTime(builder, launchTimeOffset);
    LaunchDetection_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    LaunchDetection_Ingest.AddId(builder, idOffset);
    LaunchDetection_Ingest.AddDataMode(builder, dataMode);
    LaunchDetection_Ingest.AddHighZenithAzimuth(builder, highZenithAzimuth);
    LaunchDetection_Ingest.AddStereoFlag(builder, stereoFlag);
    return LaunchDetection_Ingest.EndLaunchDetection_Ingest(builder);
  }

  public static void StartLaunchDetection_Ingest(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddLaunchTime(FlatBufferBuilder builder, StringOffset launchTimeOffset) { builder.AddOffset(2, launchTimeOffset.Value, 0); }
  public static void AddMessageType(FlatBufferBuilder builder, StringOffset messageTypeOffset) { builder.AddOffset(3, messageTypeOffset.Value, 0); }
  public static void AddLaunchLatitude(FlatBufferBuilder builder, double launchLatitude) { builder.AddDouble(4, launchLatitude, 0.0); }
  public static void AddLaunchLongitude(FlatBufferBuilder builder, double launchLongitude) { builder.AddDouble(5, launchLongitude, 0.0); }
  public static void AddLaunchAzimuth(FlatBufferBuilder builder, double launchAzimuth) { builder.AddDouble(6, launchAzimuth, 0.0); }
  public static void AddRaan(FlatBufferBuilder builder, double raan) { builder.AddDouble(7, raan, 0.0); }
  public static void AddInclination(FlatBufferBuilder builder, double inclination) { builder.AddDouble(8, inclination, 0.0); }
  public static void AddObservationTime(FlatBufferBuilder builder, StringOffset observationTimeOffset) { builder.AddOffset(9, observationTimeOffset.Value, 0); }
  public static void AddObservationLatitude(FlatBufferBuilder builder, double observationLatitude) { builder.AddDouble(10, observationLatitude, 0.0); }
  public static void AddObservationLongitude(FlatBufferBuilder builder, double observationLongitude) { builder.AddDouble(11, observationLongitude, 0.0); }
  public static void AddObservationAltitude(FlatBufferBuilder builder, double observationAltitude) { builder.AddDouble(12, observationAltitude, 0.0); }
  public static void AddStereoFlag(FlatBufferBuilder builder, bool stereoFlag) { builder.AddBool(13, stereoFlag, false); }
  public static void AddHighZenithAzimuth(FlatBufferBuilder builder, bool highZenithAzimuth) { builder.AddBool(14, highZenithAzimuth, false); }
  public static void AddSequenceNumber(FlatBufferBuilder builder, int sequenceNumber) { builder.AddInt(15, sequenceNumber, 0); }
  public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) { builder.AddOffset(16, eventIdOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(17, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(18, originOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(19, descriptorOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(20, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(21, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, LaunchDetection_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(22, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(23, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(24, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(25, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(26, updatedByOffset.Value, 0); }
  public static Offset<LaunchDetection_Ingest> EndLaunchDetection_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LaunchDetection_Ingest>(o);
  }
  public static void FinishLaunchDetection_IngestBuffer(FlatBufferBuilder builder, Offset<LaunchDetection_Ingest> offset) { builder.Finish(offset.Value, "LAUN"); }
  public static void FinishSizePrefixedLaunchDetection_IngestBuffer(FlatBufferBuilder builder, Offset<LaunchDetection_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "LAUN"); }
  public LaunchDetection_IngestT UnPack() {
    var _o = new LaunchDetection_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LaunchDetection_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.LaunchTime = this.LaunchTime;
    _o.MessageType = this.MessageType;
    _o.LaunchLatitude = this.LaunchLatitude;
    _o.LaunchLongitude = this.LaunchLongitude;
    _o.LaunchAzimuth = this.LaunchAzimuth;
    _o.Raan = this.Raan;
    _o.Inclination = this.Inclination;
    _o.ObservationTime = this.ObservationTime;
    _o.ObservationLatitude = this.ObservationLatitude;
    _o.ObservationLongitude = this.ObservationLongitude;
    _o.ObservationAltitude = this.ObservationAltitude;
    _o.StereoFlag = this.StereoFlag;
    _o.HighZenithAzimuth = this.HighZenithAzimuth;
    _o.SequenceNumber = this.SequenceNumber;
    _o.EventId = this.EventId;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.Descriptor = this.Descriptor;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
  }
  public static Offset<LaunchDetection_Ingest> Pack(FlatBufferBuilder builder, LaunchDetection_IngestT _o) {
    if (_o == null) return default(Offset<LaunchDetection_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _launchTime = _o.LaunchTime == null ? default(StringOffset) : builder.CreateString(_o.LaunchTime);
    var _messageType = _o.MessageType == null ? default(StringOffset) : builder.CreateString(_o.MessageType);
    var _observationTime = _o.ObservationTime == null ? default(StringOffset) : builder.CreateString(_o.ObservationTime);
    var _eventId = _o.EventId == null ? default(StringOffset) : builder.CreateString(_o.EventId);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    return CreateLaunchDetection_Ingest(
      builder,
      _id,
      _classificationMarking,
      _launchTime,
      _messageType,
      _o.LaunchLatitude,
      _o.LaunchLongitude,
      _o.LaunchAzimuth,
      _o.Raan,
      _o.Inclination,
      _observationTime,
      _o.ObservationLatitude,
      _o.ObservationLongitude,
      _o.ObservationAltitude,
      _o.StereoFlag,
      _o.HighZenithAzimuth,
      _o.SequenceNumber,
      _eventId,
      _source,
      _origin,
      _descriptor,
      _tags,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy);
  }
}

public class LaunchDetection_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string LaunchTime { get; set; }
  public string MessageType { get; set; }
  public double LaunchLatitude { get; set; }
  public double LaunchLongitude { get; set; }
  public double LaunchAzimuth { get; set; }
  public double Raan { get; set; }
  public double Inclination { get; set; }
  public string ObservationTime { get; set; }
  public double ObservationLatitude { get; set; }
  public double ObservationLongitude { get; set; }
  public double ObservationAltitude { get; set; }
  public bool StereoFlag { get; set; }
  public bool HighZenithAzimuth { get; set; }
  public int SequenceNumber { get; set; }
  public string EventId { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string Descriptor { get; set; }
  public List<string> Tags { get; set; }
  public string OrigNetwork { get; set; }
  public LaunchDetection_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }

  public LaunchDetection_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.LaunchTime = null;
    this.MessageType = null;
    this.LaunchLatitude = 0.0;
    this.LaunchLongitude = 0.0;
    this.LaunchAzimuth = 0.0;
    this.Raan = 0.0;
    this.Inclination = 0.0;
    this.ObservationTime = null;
    this.ObservationLatitude = 0.0;
    this.ObservationLongitude = 0.0;
    this.ObservationAltitude = 0.0;
    this.StereoFlag = false;
    this.HighZenithAzimuth = false;
    this.SequenceNumber = 0;
    this.EventId = null;
    this.Source = null;
    this.Origin = null;
    this.Descriptor = null;
    this.Tags = null;
    this.OrigNetwork = null;
    this.DataMode = LaunchDetection_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
  }
  public static LaunchDetection_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return LaunchDetection_Ingest.GetRootAsLaunchDetection_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LaunchDetection_Ingest.FinishLaunchDetection_IngestBuffer(fbb, LaunchDetection_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LaunchDetection_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*LaunchTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*MessageType*/, false)
      && verifier.VerifyField(tablePos, 12 /*LaunchLatitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*LaunchLongitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*LaunchAzimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Raan*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Inclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*ObservationTime*/, false)
      && verifier.VerifyField(tablePos, 24 /*ObservationLatitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*ObservationLongitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*ObservationAltitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*StereoFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*HighZenithAzimuth*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*SequenceNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*EventId*/, false)
      && verifier.VerifyString(tablePos, 38 /*Source*/, false)
      && verifier.VerifyString(tablePos, 40 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 42 /*Descriptor*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 46 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 48 /*DataMode*/, 1 /*LaunchDetection_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 50 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 52 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 54 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 56 /*UpdatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
