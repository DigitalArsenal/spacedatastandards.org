// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A Country may represent countries, multi-national consortiums, and international organizations.
public struct Country_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Country_Full GetRootAsCountry_Full(ByteBuffer _bb) { return GetRootAsCountry_Full(_bb, new Country_Full()); }
  public static Country_Full GetRootAsCountry_Full(ByteBuffer _bb, Country_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Country_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "COUN"); }
  public static bool VerifyCountry_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("COUN", false, Country_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Country_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  public string Code { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCodeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCodeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCodeArray() { return __p.__vector_as_array<byte>(4); }
  /// Country name.
  /// Example: /// Example: UNITED STATES
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string FipsCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFipsCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFipsCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFipsCodeArray() { return __p.__vector_as_array<byte>(8); }
  /// ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Iso3Code { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIso3CodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIso3CodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIso3CodeArray() { return __p.__vector_as_array<byte>(10); }
  /// 3 Digit or other alternate country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CodeAlt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCodeAltBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCodeAltBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCodeAltArray() { return __p.__vector_as_array<byte>(12); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(14); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(16); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(18); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(20); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(22); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(24); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Country_Full_dataMode_Enum DataMode { get { int o = __p.__offset(26); return o != 0 ? (Country_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Country_Full_dataMode_Enum.REAL; } }

  public static Offset<Country_Full> CreateCountry_Full(FlatBufferBuilder builder,
      StringOffset codeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset fipsCodeOffset = default(StringOffset),
      StringOffset iso3CodeOffset = default(StringOffset),
      StringOffset codeAltOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Country_Full_dataMode_Enum dataMode = Country_Full_dataMode_Enum.REAL) {
    builder.StartTable(12);
    Country_Full.AddOrigNetwork(builder, origNetworkOffset);
    Country_Full.AddSource(builder, sourceOffset);
    Country_Full.AddUpdatedBy(builder, updatedByOffset);
    Country_Full.AddUpdatedAt(builder, updatedAtOffset);
    Country_Full.AddCreatedBy(builder, createdByOffset);
    Country_Full.AddCreatedAt(builder, createdAtOffset);
    Country_Full.AddCodeAlt(builder, codeAltOffset);
    Country_Full.AddIso3Code(builder, iso3CodeOffset);
    Country_Full.AddFipsCode(builder, fipsCodeOffset);
    Country_Full.AddName(builder, nameOffset);
    Country_Full.AddCode(builder, codeOffset);
    Country_Full.AddDataMode(builder, dataMode);
    return Country_Full.EndCountry_Full(builder);
  }

  public static void StartCountry_Full(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddCode(FlatBufferBuilder builder, StringOffset codeOffset) { builder.AddOffset(0, codeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddFipsCode(FlatBufferBuilder builder, StringOffset fipsCodeOffset) { builder.AddOffset(2, fipsCodeOffset.Value, 0); }
  public static void AddIso3Code(FlatBufferBuilder builder, StringOffset iso3CodeOffset) { builder.AddOffset(3, iso3CodeOffset.Value, 0); }
  public static void AddCodeAlt(FlatBufferBuilder builder, StringOffset codeAltOffset) { builder.AddOffset(4, codeAltOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(5, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(6, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(7, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(8, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(9, sourceOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(10, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Country_Full_dataMode_Enum dataMode) { builder.AddSbyte(11, (sbyte)dataMode, 0); }
  public static Offset<Country_Full> EndCountry_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Country_Full>(o);
  }
  public static void FinishCountry_FullBuffer(FlatBufferBuilder builder, Offset<Country_Full> offset) { builder.Finish(offset.Value, "COUN"); }
  public static void FinishSizePrefixedCountry_FullBuffer(FlatBufferBuilder builder, Offset<Country_Full> offset) { builder.FinishSizePrefixed(offset.Value, "COUN"); }
  public Country_FullT UnPack() {
    var _o = new Country_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Country_FullT _o) {
    _o.Code = this.Code;
    _o.Name = this.Name;
    _o.FipsCode = this.FipsCode;
    _o.Iso3Code = this.Iso3Code;
    _o.CodeAlt = this.CodeAlt;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Country_Full> Pack(FlatBufferBuilder builder, Country_FullT _o) {
    if (_o == null) return default(Offset<Country_Full>);
    var _code = _o.Code == null ? default(StringOffset) : builder.CreateString(_o.Code);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _fipsCode = _o.FipsCode == null ? default(StringOffset) : builder.CreateString(_o.FipsCode);
    var _iso3Code = _o.Iso3Code == null ? default(StringOffset) : builder.CreateString(_o.Iso3Code);
    var _codeAlt = _o.CodeAlt == null ? default(StringOffset) : builder.CreateString(_o.CodeAlt);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateCountry_Full(
      builder,
      _code,
      _name,
      _fipsCode,
      _iso3Code,
      _codeAlt,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origNetwork,
      _o.DataMode);
  }
}

public class Country_FullT
{
  public string Code { get; set; }
  public string Name { get; set; }
  public string FipsCode { get; set; }
  public string Iso3Code { get; set; }
  public string CodeAlt { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string OrigNetwork { get; set; }
  public Country_Full_dataMode_Enum DataMode { get; set; }

  public Country_FullT() {
    this.Code = null;
    this.Name = null;
    this.FipsCode = null;
    this.Iso3Code = null;
    this.CodeAlt = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.OrigNetwork = null;
    this.DataMode = Country_Full_dataMode_Enum.REAL;
  }
  public static Country_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Country_Full.GetRootAsCountry_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Country_Full.FinishCountry_FullBuffer(fbb, Country_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Country_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Code*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*FipsCode*/, false)
      && verifier.VerifyString(tablePos, 10 /*Iso3Code*/, false)
      && verifier.VerifyString(tablePos, 12 /*CodeAlt*/, false)
      && verifier.VerifyString(tablePos, 14 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 16 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 18 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 20 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 22 /*Source*/, false)
      && verifier.VerifyString(tablePos, 24 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 26 /*DataMode*/, 1 /*Country_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
