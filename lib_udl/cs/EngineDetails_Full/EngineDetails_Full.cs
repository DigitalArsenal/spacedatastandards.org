// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
public struct EngineDetails_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EngineDetails_Full GetRootAsEngineDetails_Full(ByteBuffer _bb) { return GetRootAsEngineDetails_Full(_bb, new EngineDetails_Full()); }
  public static EngineDetails_Full GetRootAsEngineDetails_Full(ByteBuffer _bb, EngineDetails_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EngineDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ENGI"); }
  public static bool VerifyEngineDetails_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ENGI", false, EngineDetails_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EngineDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ENGINEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the parent engine record.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdEngine { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEngineBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdEngineBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdEngineArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Engine type or family.
  /// Example: /// Example: ENGINE_TYPE1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Family { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFamilyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFamilyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFamilyArray() { return __p.__vector_as_array<byte>(10); }
  /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  /// Example: /// Example: Pressure Fed
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CycleType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCycleTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCycleTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCycleTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
  /// Example: /// Example: Electric
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CharacteristicType { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacteristicTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCharacteristicTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCharacteristicTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// Organization ID of the engine manufacturer.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Launch engine specific impulse in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SpecificImpulse { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch engine maximum burn time in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double BurnTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine maximum thrust at sea level in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SeaLevelThrust { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine maximum thrust in a vacuum in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double VacuumThrust { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine chamber pressure in bars.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ChamberPressure { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine nozzle expansion ratio.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double NozzleExpansionRatio { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine maximum number of firings.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int MaxFirings { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
  /// Example: /// Example: Liquid
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Propellant { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPropellantBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetPropellantBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetPropellantArray() { return __p.__vector_as_array<byte>(32); }
  /// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
  /// Example: /// Example: Liquid Oxygen
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Oxidizer { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOxidizerBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOxidizerBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOxidizerArray() { return __p.__vector_as_array<byte>(34); }
  /// Notes/Description of the engine.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(36); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(38); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(40); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(42); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(44); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(46); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(48); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(50); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EngineDetails_Full_dataMode_Enum DataMode { get { int o = __p.__offset(52); return o != 0 ? (EngineDetails_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EngineDetails_Full_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<EngineDetails_Full> CreateEngineDetails_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idEngineOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset familyOffset = default(StringOffset),
      StringOffset cycleTypeOffset = default(StringOffset),
      StringOffset characteristicTypeOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      double specificImpulse = 0.0,
      double burnTime = 0.0,
      double seaLevelThrust = 0.0,
      double vacuumThrust = 0.0,
      double chamberPressure = 0.0,
      double nozzleExpansionRatio = 0.0,
      int maxFirings = 0,
      StringOffset propellantOffset = default(StringOffset),
      StringOffset oxidizerOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      EngineDetails_Full_dataMode_Enum dataMode = EngineDetails_Full_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(26);
    EngineDetails_Full.AddNozzleExpansionRatio(builder, nozzleExpansionRatio);
    EngineDetails_Full.AddChamberPressure(builder, chamberPressure);
    EngineDetails_Full.AddVacuumThrust(builder, vacuumThrust);
    EngineDetails_Full.AddSeaLevelThrust(builder, seaLevelThrust);
    EngineDetails_Full.AddBurnTime(builder, burnTime);
    EngineDetails_Full.AddSpecificImpulse(builder, specificImpulse);
    EngineDetails_Full.AddTags(builder, tagsOffset);
    EngineDetails_Full.AddOrigNetwork(builder, origNetworkOffset);
    EngineDetails_Full.AddOrigin(builder, originOffset);
    EngineDetails_Full.AddSource(builder, sourceOffset);
    EngineDetails_Full.AddUpdatedBy(builder, updatedByOffset);
    EngineDetails_Full.AddUpdatedAt(builder, updatedAtOffset);
    EngineDetails_Full.AddCreatedBy(builder, createdByOffset);
    EngineDetails_Full.AddCreatedAt(builder, createdAtOffset);
    EngineDetails_Full.AddNotes(builder, notesOffset);
    EngineDetails_Full.AddOxidizer(builder, oxidizerOffset);
    EngineDetails_Full.AddPropellant(builder, propellantOffset);
    EngineDetails_Full.AddMaxFirings(builder, maxFirings);
    EngineDetails_Full.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    EngineDetails_Full.AddCharacteristicType(builder, characteristicTypeOffset);
    EngineDetails_Full.AddCycleType(builder, cycleTypeOffset);
    EngineDetails_Full.AddFamily(builder, familyOffset);
    EngineDetails_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    EngineDetails_Full.AddIdEngine(builder, idEngineOffset);
    EngineDetails_Full.AddId(builder, idOffset);
    EngineDetails_Full.AddDataMode(builder, dataMode);
    return EngineDetails_Full.EndEngineDetails_Full(builder);
  }

  public static void StartEngineDetails_Full(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdEngine(FlatBufferBuilder builder, StringOffset idEngineOffset) { builder.AddOffset(1, idEngineOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddFamily(FlatBufferBuilder builder, StringOffset familyOffset) { builder.AddOffset(3, familyOffset.Value, 0); }
  public static void AddCycleType(FlatBufferBuilder builder, StringOffset cycleTypeOffset) { builder.AddOffset(4, cycleTypeOffset.Value, 0); }
  public static void AddCharacteristicType(FlatBufferBuilder builder, StringOffset characteristicTypeOffset) { builder.AddOffset(5, characteristicTypeOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(6, manufacturerOrgIdOffset.Value, 0); }
  public static void AddSpecificImpulse(FlatBufferBuilder builder, double specificImpulse) { builder.AddDouble(7, specificImpulse, 0.0); }
  public static void AddBurnTime(FlatBufferBuilder builder, double burnTime) { builder.AddDouble(8, burnTime, 0.0); }
  public static void AddSeaLevelThrust(FlatBufferBuilder builder, double seaLevelThrust) { builder.AddDouble(9, seaLevelThrust, 0.0); }
  public static void AddVacuumThrust(FlatBufferBuilder builder, double vacuumThrust) { builder.AddDouble(10, vacuumThrust, 0.0); }
  public static void AddChamberPressure(FlatBufferBuilder builder, double chamberPressure) { builder.AddDouble(11, chamberPressure, 0.0); }
  public static void AddNozzleExpansionRatio(FlatBufferBuilder builder, double nozzleExpansionRatio) { builder.AddDouble(12, nozzleExpansionRatio, 0.0); }
  public static void AddMaxFirings(FlatBufferBuilder builder, int maxFirings) { builder.AddInt(13, maxFirings, 0); }
  public static void AddPropellant(FlatBufferBuilder builder, StringOffset propellantOffset) { builder.AddOffset(14, propellantOffset.Value, 0); }
  public static void AddOxidizer(FlatBufferBuilder builder, StringOffset oxidizerOffset) { builder.AddOffset(15, oxidizerOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(16, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(17, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(18, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(19, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(20, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(21, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(22, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(23, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EngineDetails_Full_dataMode_Enum dataMode) { builder.AddSbyte(24, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(25, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EngineDetails_Full> EndEngineDetails_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EngineDetails_Full>(o);
  }
  public static void FinishEngineDetails_FullBuffer(FlatBufferBuilder builder, Offset<EngineDetails_Full> offset) { builder.Finish(offset.Value, "ENGI"); }
  public static void FinishSizePrefixedEngineDetails_FullBuffer(FlatBufferBuilder builder, Offset<EngineDetails_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ENGI"); }
  public EngineDetails_FullT UnPack() {
    var _o = new EngineDetails_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EngineDetails_FullT _o) {
    _o.Id = this.Id;
    _o.IdEngine = this.IdEngine;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Family = this.Family;
    _o.CycleType = this.CycleType;
    _o.CharacteristicType = this.CharacteristicType;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.SpecificImpulse = this.SpecificImpulse;
    _o.BurnTime = this.BurnTime;
    _o.SeaLevelThrust = this.SeaLevelThrust;
    _o.VacuumThrust = this.VacuumThrust;
    _o.ChamberPressure = this.ChamberPressure;
    _o.NozzleExpansionRatio = this.NozzleExpansionRatio;
    _o.MaxFirings = this.MaxFirings;
    _o.Propellant = this.Propellant;
    _o.Oxidizer = this.Oxidizer;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
  }
  public static Offset<EngineDetails_Full> Pack(FlatBufferBuilder builder, EngineDetails_FullT _o) {
    if (_o == null) return default(Offset<EngineDetails_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idEngine = _o.IdEngine == null ? default(StringOffset) : builder.CreateString(_o.IdEngine);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _family = _o.Family == null ? default(StringOffset) : builder.CreateString(_o.Family);
    var _cycleType = _o.CycleType == null ? default(StringOffset) : builder.CreateString(_o.CycleType);
    var _characteristicType = _o.CharacteristicType == null ? default(StringOffset) : builder.CreateString(_o.CharacteristicType);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _propellant = _o.Propellant == null ? default(StringOffset) : builder.CreateString(_o.Propellant);
    var _oxidizer = _o.Oxidizer == null ? default(StringOffset) : builder.CreateString(_o.Oxidizer);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateEngineDetails_Full(
      builder,
      _id,
      _idEngine,
      _classificationMarking,
      _family,
      _cycleType,
      _characteristicType,
      _manufacturerOrgId,
      _o.SpecificImpulse,
      _o.BurnTime,
      _o.SeaLevelThrust,
      _o.VacuumThrust,
      _o.ChamberPressure,
      _o.NozzleExpansionRatio,
      _o.MaxFirings,
      _propellant,
      _oxidizer,
      _notes,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _tags);
  }
}

public class EngineDetails_FullT
{
  public string Id { get; set; }
  public string IdEngine { get; set; }
  public string ClassificationMarking { get; set; }
  public string Family { get; set; }
  public string CycleType { get; set; }
  public string CharacteristicType { get; set; }
  public string ManufacturerOrgId { get; set; }
  public double SpecificImpulse { get; set; }
  public double BurnTime { get; set; }
  public double SeaLevelThrust { get; set; }
  public double VacuumThrust { get; set; }
  public double ChamberPressure { get; set; }
  public double NozzleExpansionRatio { get; set; }
  public int MaxFirings { get; set; }
  public string Propellant { get; set; }
  public string Oxidizer { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public EngineDetails_Full_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }

  public EngineDetails_FullT() {
    this.Id = null;
    this.IdEngine = null;
    this.ClassificationMarking = null;
    this.Family = null;
    this.CycleType = null;
    this.CharacteristicType = null;
    this.ManufacturerOrgId = null;
    this.SpecificImpulse = 0.0;
    this.BurnTime = 0.0;
    this.SeaLevelThrust = 0.0;
    this.VacuumThrust = 0.0;
    this.ChamberPressure = 0.0;
    this.NozzleExpansionRatio = 0.0;
    this.MaxFirings = 0;
    this.Propellant = null;
    this.Oxidizer = null;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = EngineDetails_Full_dataMode_Enum.REAL;
    this.Tags = null;
  }
  public static EngineDetails_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return EngineDetails_Full.GetRootAsEngineDetails_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EngineDetails_Full.FinishEngineDetails_FullBuffer(fbb, EngineDetails_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EngineDetails_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdEngine*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Family*/, false)
      && verifier.VerifyString(tablePos, 12 /*CycleType*/, false)
      && verifier.VerifyString(tablePos, 14 /*CharacteristicType*/, false)
      && verifier.VerifyString(tablePos, 16 /*ManufacturerOrgId*/, false)
      && verifier.VerifyField(tablePos, 18 /*SpecificImpulse*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*BurnTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*SeaLevelThrust*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*VacuumThrust*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*ChamberPressure*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*NozzleExpansionRatio*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*MaxFirings*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*Propellant*/, false)
      && verifier.VerifyString(tablePos, 34 /*Oxidizer*/, false)
      && verifier.VerifyString(tablePos, 36 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 38 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 42 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 44 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 46 /*Source*/, false)
      && verifier.VerifyString(tablePos, 48 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 50 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 52 /*DataMode*/, 1 /*EngineDetails_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*Tags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
