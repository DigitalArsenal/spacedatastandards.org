// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
public struct LaunchVehicleDetails_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LaunchVehicleDetails_Ingest GetRootAsLaunchVehicleDetails_Ingest(ByteBuffer _bb) { return GetRootAsLaunchVehicleDetails_Ingest(_bb, new LaunchVehicleDetails_Ingest()); }
  public static LaunchVehicleDetails_Ingest GetRootAsLaunchVehicleDetails_Ingest(ByteBuffer _bb, LaunchVehicleDetails_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LaunchVehicleDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LAUN"); }
  public static bool VerifyLaunchVehicleDetails_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LAUN", false, LaunchVehicleDetails_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LaunchVehicleDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the parent launch vehicle record.
  /// Example: /// Example: LAUNCHVEHICLE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdLaunchVehicle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdLaunchVehicleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdLaunchVehicleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdLaunchVehicleArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Vehicle variant.
  /// Example: /// Example: Example-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Variant { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVariantBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetVariantBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetVariantArray() { return __p.__vector_as_array<byte>(10); }
  /// Vehicle minor variant.
  /// Example: /// Example: Example-minor-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MinorVariant { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinorVariantBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMinorVariantBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMinorVariantArray() { return __p.__vector_as_array<byte>(12); }
  /// Vehicle category.
  /// Example: /// Example: Example-category
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Category { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(14); }
  /// ID of the organization that manufactures the launch vehicle.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Vehicle launch prefix.
  /// Example: /// Example: AX011
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string LaunchPrefix { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLaunchPrefixBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLaunchPrefixBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLaunchPrefixArray() { return __p.__vector_as_array<byte>(18); }
  /// Vehicle family.
  /// Example: /// Example: Example-family
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Family { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFamilyBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetFamilyBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetFamilyArray() { return __p.__vector_as_array<byte>(20); }
  /// Propellant type.
  /// Example: /// Example: Nitrogen
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Propellant { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPropellantBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPropellantBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPropellantArray() { return __p.__vector_as_array<byte>(22); }
  /// Oxidizer type.
  /// Example: /// Example: Bromine
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Oxidizer { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOxidizerBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOxidizerBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOxidizerArray() { return __p.__vector_as_array<byte>(24); }
  /// Vehicle length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Length { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Diameter { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle total mass at launch time in kg (including all boosters).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double LaunchMass { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum vehicle payload mass to GEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GeoPayloadMass { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Max vehicle payload mass to Geo-Transfer Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoPayloadMass { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Max vehicle payload mass to LEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double LeoPayloadMass { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double SsoPayloadMass { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle fairing length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double FairingLength { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Name of the fairing.
  /// Example: /// Example: Example-fairing-name
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string FairingName { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFairingNameBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetFairingNameBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetFairingNameArray() { return __p.__vector_as_array<byte>(42); }
  /// Vehicle fairing maximum external diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double FairingExternalDiameter { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle fairing maximum internal diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double FairingInternalDiameter { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle fairing mass in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double FairingMass { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fairing material.
  /// Example: /// Example: Example-fairing-material
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string FairingMaterial { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFairingMaterialBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetFairingMaterialBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetFairingMaterialArray() { return __p.__vector_as_array<byte>(50); }
  /// Vehicle maximum acceleration load in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxAccelLoad { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum payload lateral frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxPayloadFreqLat { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum payload longitudinal frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxPayloadFreqLon { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum acoustic level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxAcousticLevel { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum acoustic level range in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxAcousticLevelRange { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle overall sound pressure level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double SoundPressureLevel { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum flight shock force in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxFlightShockForce { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle maximum flight shock frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxFlightShockFreq { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vehicle fairing maximum pressure change in kPa/sec.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double MaxFairingPressureChange { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double EstLaunchPrice { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle typical estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double EstLaunchPriceTypical { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyApogeeTarget { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyApogeeMargin { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyPerigeeTarget { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyPerigeeMargin { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyInclinationTarget { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double GtoInj3SigAccuracyInclinationMargin { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle attitude accuracy (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double AttitudeAccuracy { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle payload separation rate in m/s.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double PayloadSeparationRate { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Launch vehicle deployment rotation rate in RPM.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double DeploymentRotationRate { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional URL for additional information on the vehicle.
  /// Example: /// Example: Example URL
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string SourceURL { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceURLBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetSourceURLBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetSourceURLArray() { return __p.__vector_as_array<byte>(92); }
  /// Notes/Description of the launch vehicle.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Notes { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(94); }
  /// Notes/Description of the launch vehicle fairing.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string FairingNotes { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFairingNotesBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetFairingNotesBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetFairingNotesArray() { return __p.__vector_as_array<byte>(96); }
  /// Notes/Description of the launch vehicle payload.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string PayloadNotes { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPayloadNotesBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetPayloadNotesBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetPayloadNotesArray() { return __p.__vector_as_array<byte>(98); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(100); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(102); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(104); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(106); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(108); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public LaunchVehicleDetails_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(110); return o != 0 ? (LaunchVehicleDetails_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : LaunchVehicleDetails_Ingest_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(112); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LaunchVehicleDetails_Ingest> CreateLaunchVehicleDetails_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idLaunchVehicleOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset variantOffset = default(StringOffset),
      StringOffset minorVariantOffset = default(StringOffset),
      StringOffset categoryOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      StringOffset launchPrefixOffset = default(StringOffset),
      StringOffset familyOffset = default(StringOffset),
      StringOffset propellantOffset = default(StringOffset),
      StringOffset oxidizerOffset = default(StringOffset),
      double length = 0.0,
      double diameter = 0.0,
      double launchMass = 0.0,
      double geoPayloadMass = 0.0,
      double gtoPayloadMass = 0.0,
      double leoPayloadMass = 0.0,
      double ssoPayloadMass = 0.0,
      double fairingLength = 0.0,
      StringOffset fairingNameOffset = default(StringOffset),
      double fairingExternalDiameter = 0.0,
      double fairingInternalDiameter = 0.0,
      double fairingMass = 0.0,
      StringOffset fairingMaterialOffset = default(StringOffset),
      double maxAccelLoad = 0.0,
      double maxPayloadFreqLat = 0.0,
      double maxPayloadFreqLon = 0.0,
      double maxAcousticLevel = 0.0,
      double maxAcousticLevelRange = 0.0,
      double soundPressureLevel = 0.0,
      double maxFlightShockForce = 0.0,
      double maxFlightShockFreq = 0.0,
      double maxFairingPressureChange = 0.0,
      double estLaunchPrice = 0.0,
      double estLaunchPriceTypical = 0.0,
      double gtoInj3SigAccuracyApogeeTarget = 0.0,
      double gtoInj3SigAccuracyApogeeMargin = 0.0,
      double gtoInj3SigAccuracyPerigeeTarget = 0.0,
      double gtoInj3SigAccuracyPerigeeMargin = 0.0,
      double gtoInj3SigAccuracyInclinationTarget = 0.0,
      double gtoInj3SigAccuracyInclinationMargin = 0.0,
      double attitudeAccuracy = 0.0,
      double payloadSeparationRate = 0.0,
      double deploymentRotationRate = 0.0,
      StringOffset sourceURLOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset fairingNotesOffset = default(StringOffset),
      StringOffset payloadNotesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      LaunchVehicleDetails_Ingest_dataMode_Enum dataMode = LaunchVehicleDetails_Ingest_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(55);
    LaunchVehicleDetails_Ingest.AddDeploymentRotationRate(builder, deploymentRotationRate);
    LaunchVehicleDetails_Ingest.AddPayloadSeparationRate(builder, payloadSeparationRate);
    LaunchVehicleDetails_Ingest.AddAttitudeAccuracy(builder, attitudeAccuracy);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin);
    LaunchVehicleDetails_Ingest.AddGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget);
    LaunchVehicleDetails_Ingest.AddEstLaunchPriceTypical(builder, estLaunchPriceTypical);
    LaunchVehicleDetails_Ingest.AddEstLaunchPrice(builder, estLaunchPrice);
    LaunchVehicleDetails_Ingest.AddMaxFairingPressureChange(builder, maxFairingPressureChange);
    LaunchVehicleDetails_Ingest.AddMaxFlightShockFreq(builder, maxFlightShockFreq);
    LaunchVehicleDetails_Ingest.AddMaxFlightShockForce(builder, maxFlightShockForce);
    LaunchVehicleDetails_Ingest.AddSoundPressureLevel(builder, soundPressureLevel);
    LaunchVehicleDetails_Ingest.AddMaxAcousticLevelRange(builder, maxAcousticLevelRange);
    LaunchVehicleDetails_Ingest.AddMaxAcousticLevel(builder, maxAcousticLevel);
    LaunchVehicleDetails_Ingest.AddMaxPayloadFreqLon(builder, maxPayloadFreqLon);
    LaunchVehicleDetails_Ingest.AddMaxPayloadFreqLat(builder, maxPayloadFreqLat);
    LaunchVehicleDetails_Ingest.AddMaxAccelLoad(builder, maxAccelLoad);
    LaunchVehicleDetails_Ingest.AddFairingMass(builder, fairingMass);
    LaunchVehicleDetails_Ingest.AddFairingInternalDiameter(builder, fairingInternalDiameter);
    LaunchVehicleDetails_Ingest.AddFairingExternalDiameter(builder, fairingExternalDiameter);
    LaunchVehicleDetails_Ingest.AddFairingLength(builder, fairingLength);
    LaunchVehicleDetails_Ingest.AddSsoPayloadMass(builder, ssoPayloadMass);
    LaunchVehicleDetails_Ingest.AddLeoPayloadMass(builder, leoPayloadMass);
    LaunchVehicleDetails_Ingest.AddGtoPayloadMass(builder, gtoPayloadMass);
    LaunchVehicleDetails_Ingest.AddGeoPayloadMass(builder, geoPayloadMass);
    LaunchVehicleDetails_Ingest.AddLaunchMass(builder, launchMass);
    LaunchVehicleDetails_Ingest.AddDiameter(builder, diameter);
    LaunchVehicleDetails_Ingest.AddLength(builder, length);
    LaunchVehicleDetails_Ingest.AddTags(builder, tagsOffset);
    LaunchVehicleDetails_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    LaunchVehicleDetails_Ingest.AddOrigin(builder, originOffset);
    LaunchVehicleDetails_Ingest.AddSource(builder, sourceOffset);
    LaunchVehicleDetails_Ingest.AddCreatedBy(builder, createdByOffset);
    LaunchVehicleDetails_Ingest.AddCreatedAt(builder, createdAtOffset);
    LaunchVehicleDetails_Ingest.AddPayloadNotes(builder, payloadNotesOffset);
    LaunchVehicleDetails_Ingest.AddFairingNotes(builder, fairingNotesOffset);
    LaunchVehicleDetails_Ingest.AddNotes(builder, notesOffset);
    LaunchVehicleDetails_Ingest.AddSourceURL(builder, sourceURLOffset);
    LaunchVehicleDetails_Ingest.AddFairingMaterial(builder, fairingMaterialOffset);
    LaunchVehicleDetails_Ingest.AddFairingName(builder, fairingNameOffset);
    LaunchVehicleDetails_Ingest.AddOxidizer(builder, oxidizerOffset);
    LaunchVehicleDetails_Ingest.AddPropellant(builder, propellantOffset);
    LaunchVehicleDetails_Ingest.AddFamily(builder, familyOffset);
    LaunchVehicleDetails_Ingest.AddLaunchPrefix(builder, launchPrefixOffset);
    LaunchVehicleDetails_Ingest.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    LaunchVehicleDetails_Ingest.AddCategory(builder, categoryOffset);
    LaunchVehicleDetails_Ingest.AddMinorVariant(builder, minorVariantOffset);
    LaunchVehicleDetails_Ingest.AddVariant(builder, variantOffset);
    LaunchVehicleDetails_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    LaunchVehicleDetails_Ingest.AddIdLaunchVehicle(builder, idLaunchVehicleOffset);
    LaunchVehicleDetails_Ingest.AddId(builder, idOffset);
    LaunchVehicleDetails_Ingest.AddDataMode(builder, dataMode);
    return LaunchVehicleDetails_Ingest.EndLaunchVehicleDetails_Ingest(builder);
  }

  public static void StartLaunchVehicleDetails_Ingest(FlatBufferBuilder builder) { builder.StartTable(55); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdLaunchVehicle(FlatBufferBuilder builder, StringOffset idLaunchVehicleOffset) { builder.AddOffset(1, idLaunchVehicleOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddVariant(FlatBufferBuilder builder, StringOffset variantOffset) { builder.AddOffset(3, variantOffset.Value, 0); }
  public static void AddMinorVariant(FlatBufferBuilder builder, StringOffset minorVariantOffset) { builder.AddOffset(4, minorVariantOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(5, categoryOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(6, manufacturerOrgIdOffset.Value, 0); }
  public static void AddLaunchPrefix(FlatBufferBuilder builder, StringOffset launchPrefixOffset) { builder.AddOffset(7, launchPrefixOffset.Value, 0); }
  public static void AddFamily(FlatBufferBuilder builder, StringOffset familyOffset) { builder.AddOffset(8, familyOffset.Value, 0); }
  public static void AddPropellant(FlatBufferBuilder builder, StringOffset propellantOffset) { builder.AddOffset(9, propellantOffset.Value, 0); }
  public static void AddOxidizer(FlatBufferBuilder builder, StringOffset oxidizerOffset) { builder.AddOffset(10, oxidizerOffset.Value, 0); }
  public static void AddLength(FlatBufferBuilder builder, double length) { builder.AddDouble(11, length, 0.0); }
  public static void AddDiameter(FlatBufferBuilder builder, double diameter) { builder.AddDouble(12, diameter, 0.0); }
  public static void AddLaunchMass(FlatBufferBuilder builder, double launchMass) { builder.AddDouble(13, launchMass, 0.0); }
  public static void AddGeoPayloadMass(FlatBufferBuilder builder, double geoPayloadMass) { builder.AddDouble(14, geoPayloadMass, 0.0); }
  public static void AddGtoPayloadMass(FlatBufferBuilder builder, double gtoPayloadMass) { builder.AddDouble(15, gtoPayloadMass, 0.0); }
  public static void AddLeoPayloadMass(FlatBufferBuilder builder, double leoPayloadMass) { builder.AddDouble(16, leoPayloadMass, 0.0); }
  public static void AddSsoPayloadMass(FlatBufferBuilder builder, double ssoPayloadMass) { builder.AddDouble(17, ssoPayloadMass, 0.0); }
  public static void AddFairingLength(FlatBufferBuilder builder, double fairingLength) { builder.AddDouble(18, fairingLength, 0.0); }
  public static void AddFairingName(FlatBufferBuilder builder, StringOffset fairingNameOffset) { builder.AddOffset(19, fairingNameOffset.Value, 0); }
  public static void AddFairingExternalDiameter(FlatBufferBuilder builder, double fairingExternalDiameter) { builder.AddDouble(20, fairingExternalDiameter, 0.0); }
  public static void AddFairingInternalDiameter(FlatBufferBuilder builder, double fairingInternalDiameter) { builder.AddDouble(21, fairingInternalDiameter, 0.0); }
  public static void AddFairingMass(FlatBufferBuilder builder, double fairingMass) { builder.AddDouble(22, fairingMass, 0.0); }
  public static void AddFairingMaterial(FlatBufferBuilder builder, StringOffset fairingMaterialOffset) { builder.AddOffset(23, fairingMaterialOffset.Value, 0); }
  public static void AddMaxAccelLoad(FlatBufferBuilder builder, double maxAccelLoad) { builder.AddDouble(24, maxAccelLoad, 0.0); }
  public static void AddMaxPayloadFreqLat(FlatBufferBuilder builder, double maxPayloadFreqLat) { builder.AddDouble(25, maxPayloadFreqLat, 0.0); }
  public static void AddMaxPayloadFreqLon(FlatBufferBuilder builder, double maxPayloadFreqLon) { builder.AddDouble(26, maxPayloadFreqLon, 0.0); }
  public static void AddMaxAcousticLevel(FlatBufferBuilder builder, double maxAcousticLevel) { builder.AddDouble(27, maxAcousticLevel, 0.0); }
  public static void AddMaxAcousticLevelRange(FlatBufferBuilder builder, double maxAcousticLevelRange) { builder.AddDouble(28, maxAcousticLevelRange, 0.0); }
  public static void AddSoundPressureLevel(FlatBufferBuilder builder, double soundPressureLevel) { builder.AddDouble(29, soundPressureLevel, 0.0); }
  public static void AddMaxFlightShockForce(FlatBufferBuilder builder, double maxFlightShockForce) { builder.AddDouble(30, maxFlightShockForce, 0.0); }
  public static void AddMaxFlightShockFreq(FlatBufferBuilder builder, double maxFlightShockFreq) { builder.AddDouble(31, maxFlightShockFreq, 0.0); }
  public static void AddMaxFairingPressureChange(FlatBufferBuilder builder, double maxFairingPressureChange) { builder.AddDouble(32, maxFairingPressureChange, 0.0); }
  public static void AddEstLaunchPrice(FlatBufferBuilder builder, double estLaunchPrice) { builder.AddDouble(33, estLaunchPrice, 0.0); }
  public static void AddEstLaunchPriceTypical(FlatBufferBuilder builder, double estLaunchPriceTypical) { builder.AddDouble(34, estLaunchPriceTypical, 0.0); }
  public static void AddGtoInj3SigAccuracyApogeeTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyApogeeTarget) { builder.AddDouble(35, gtoInj3SigAccuracyApogeeTarget, 0.0); }
  public static void AddGtoInj3SigAccuracyApogeeMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyApogeeMargin) { builder.AddDouble(36, gtoInj3SigAccuracyApogeeMargin, 0.0); }
  public static void AddGtoInj3SigAccuracyPerigeeTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyPerigeeTarget) { builder.AddDouble(37, gtoInj3SigAccuracyPerigeeTarget, 0.0); }
  public static void AddGtoInj3SigAccuracyPerigeeMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyPerigeeMargin) { builder.AddDouble(38, gtoInj3SigAccuracyPerigeeMargin, 0.0); }
  public static void AddGtoInj3SigAccuracyInclinationTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyInclinationTarget) { builder.AddDouble(39, gtoInj3SigAccuracyInclinationTarget, 0.0); }
  public static void AddGtoInj3SigAccuracyInclinationMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyInclinationMargin) { builder.AddDouble(40, gtoInj3SigAccuracyInclinationMargin, 0.0); }
  public static void AddAttitudeAccuracy(FlatBufferBuilder builder, double attitudeAccuracy) { builder.AddDouble(41, attitudeAccuracy, 0.0); }
  public static void AddPayloadSeparationRate(FlatBufferBuilder builder, double payloadSeparationRate) { builder.AddDouble(42, payloadSeparationRate, 0.0); }
  public static void AddDeploymentRotationRate(FlatBufferBuilder builder, double deploymentRotationRate) { builder.AddDouble(43, deploymentRotationRate, 0.0); }
  public static void AddSourceURL(FlatBufferBuilder builder, StringOffset sourceURLOffset) { builder.AddOffset(44, sourceURLOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(45, notesOffset.Value, 0); }
  public static void AddFairingNotes(FlatBufferBuilder builder, StringOffset fairingNotesOffset) { builder.AddOffset(46, fairingNotesOffset.Value, 0); }
  public static void AddPayloadNotes(FlatBufferBuilder builder, StringOffset payloadNotesOffset) { builder.AddOffset(47, payloadNotesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(48, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(49, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(50, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(51, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(52, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, LaunchVehicleDetails_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(53, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(54, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LaunchVehicleDetails_Ingest> EndLaunchVehicleDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LaunchVehicleDetails_Ingest>(o);
  }
  public static void FinishLaunchVehicleDetails_IngestBuffer(FlatBufferBuilder builder, Offset<LaunchVehicleDetails_Ingest> offset) { builder.Finish(offset.Value, "LAUN"); }
  public static void FinishSizePrefixedLaunchVehicleDetails_IngestBuffer(FlatBufferBuilder builder, Offset<LaunchVehicleDetails_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "LAUN"); }
  public LaunchVehicleDetails_IngestT UnPack() {
    var _o = new LaunchVehicleDetails_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LaunchVehicleDetails_IngestT _o) {
    _o.Id = this.Id;
    _o.IdLaunchVehicle = this.IdLaunchVehicle;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Variant = this.Variant;
    _o.MinorVariant = this.MinorVariant;
    _o.Category = this.Category;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.LaunchPrefix = this.LaunchPrefix;
    _o.Family = this.Family;
    _o.Propellant = this.Propellant;
    _o.Oxidizer = this.Oxidizer;
    _o.Length = this.Length;
    _o.Diameter = this.Diameter;
    _o.LaunchMass = this.LaunchMass;
    _o.GeoPayloadMass = this.GeoPayloadMass;
    _o.GtoPayloadMass = this.GtoPayloadMass;
    _o.LeoPayloadMass = this.LeoPayloadMass;
    _o.SsoPayloadMass = this.SsoPayloadMass;
    _o.FairingLength = this.FairingLength;
    _o.FairingName = this.FairingName;
    _o.FairingExternalDiameter = this.FairingExternalDiameter;
    _o.FairingInternalDiameter = this.FairingInternalDiameter;
    _o.FairingMass = this.FairingMass;
    _o.FairingMaterial = this.FairingMaterial;
    _o.MaxAccelLoad = this.MaxAccelLoad;
    _o.MaxPayloadFreqLat = this.MaxPayloadFreqLat;
    _o.MaxPayloadFreqLon = this.MaxPayloadFreqLon;
    _o.MaxAcousticLevel = this.MaxAcousticLevel;
    _o.MaxAcousticLevelRange = this.MaxAcousticLevelRange;
    _o.SoundPressureLevel = this.SoundPressureLevel;
    _o.MaxFlightShockForce = this.MaxFlightShockForce;
    _o.MaxFlightShockFreq = this.MaxFlightShockFreq;
    _o.MaxFairingPressureChange = this.MaxFairingPressureChange;
    _o.EstLaunchPrice = this.EstLaunchPrice;
    _o.EstLaunchPriceTypical = this.EstLaunchPriceTypical;
    _o.GtoInj3SigAccuracyApogeeTarget = this.GtoInj3SigAccuracyApogeeTarget;
    _o.GtoInj3SigAccuracyApogeeMargin = this.GtoInj3SigAccuracyApogeeMargin;
    _o.GtoInj3SigAccuracyPerigeeTarget = this.GtoInj3SigAccuracyPerigeeTarget;
    _o.GtoInj3SigAccuracyPerigeeMargin = this.GtoInj3SigAccuracyPerigeeMargin;
    _o.GtoInj3SigAccuracyInclinationTarget = this.GtoInj3SigAccuracyInclinationTarget;
    _o.GtoInj3SigAccuracyInclinationMargin = this.GtoInj3SigAccuracyInclinationMargin;
    _o.AttitudeAccuracy = this.AttitudeAccuracy;
    _o.PayloadSeparationRate = this.PayloadSeparationRate;
    _o.DeploymentRotationRate = this.DeploymentRotationRate;
    _o.SourceURL = this.SourceURL;
    _o.Notes = this.Notes;
    _o.FairingNotes = this.FairingNotes;
    _o.PayloadNotes = this.PayloadNotes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
  }
  public static Offset<LaunchVehicleDetails_Ingest> Pack(FlatBufferBuilder builder, LaunchVehicleDetails_IngestT _o) {
    if (_o == null) return default(Offset<LaunchVehicleDetails_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idLaunchVehicle = _o.IdLaunchVehicle == null ? default(StringOffset) : builder.CreateString(_o.IdLaunchVehicle);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _variant = _o.Variant == null ? default(StringOffset) : builder.CreateString(_o.Variant);
    var _minorVariant = _o.MinorVariant == null ? default(StringOffset) : builder.CreateString(_o.MinorVariant);
    var _category = _o.Category == null ? default(StringOffset) : builder.CreateString(_o.Category);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _launchPrefix = _o.LaunchPrefix == null ? default(StringOffset) : builder.CreateString(_o.LaunchPrefix);
    var _family = _o.Family == null ? default(StringOffset) : builder.CreateString(_o.Family);
    var _propellant = _o.Propellant == null ? default(StringOffset) : builder.CreateString(_o.Propellant);
    var _oxidizer = _o.Oxidizer == null ? default(StringOffset) : builder.CreateString(_o.Oxidizer);
    var _fairingName = _o.FairingName == null ? default(StringOffset) : builder.CreateString(_o.FairingName);
    var _fairingMaterial = _o.FairingMaterial == null ? default(StringOffset) : builder.CreateString(_o.FairingMaterial);
    var _sourceURL = _o.SourceURL == null ? default(StringOffset) : builder.CreateString(_o.SourceURL);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _fairingNotes = _o.FairingNotes == null ? default(StringOffset) : builder.CreateString(_o.FairingNotes);
    var _payloadNotes = _o.PayloadNotes == null ? default(StringOffset) : builder.CreateString(_o.PayloadNotes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateLaunchVehicleDetails_Ingest(
      builder,
      _id,
      _idLaunchVehicle,
      _classificationMarking,
      _variant,
      _minorVariant,
      _category,
      _manufacturerOrgId,
      _launchPrefix,
      _family,
      _propellant,
      _oxidizer,
      _o.Length,
      _o.Diameter,
      _o.LaunchMass,
      _o.GeoPayloadMass,
      _o.GtoPayloadMass,
      _o.LeoPayloadMass,
      _o.SsoPayloadMass,
      _o.FairingLength,
      _fairingName,
      _o.FairingExternalDiameter,
      _o.FairingInternalDiameter,
      _o.FairingMass,
      _fairingMaterial,
      _o.MaxAccelLoad,
      _o.MaxPayloadFreqLat,
      _o.MaxPayloadFreqLon,
      _o.MaxAcousticLevel,
      _o.MaxAcousticLevelRange,
      _o.SoundPressureLevel,
      _o.MaxFlightShockForce,
      _o.MaxFlightShockFreq,
      _o.MaxFairingPressureChange,
      _o.EstLaunchPrice,
      _o.EstLaunchPriceTypical,
      _o.GtoInj3SigAccuracyApogeeTarget,
      _o.GtoInj3SigAccuracyApogeeMargin,
      _o.GtoInj3SigAccuracyPerigeeTarget,
      _o.GtoInj3SigAccuracyPerigeeMargin,
      _o.GtoInj3SigAccuracyInclinationTarget,
      _o.GtoInj3SigAccuracyInclinationMargin,
      _o.AttitudeAccuracy,
      _o.PayloadSeparationRate,
      _o.DeploymentRotationRate,
      _sourceURL,
      _notes,
      _fairingNotes,
      _payloadNotes,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _tags);
  }
}

public class LaunchVehicleDetails_IngestT
{
  public string Id { get; set; }
  public string IdLaunchVehicle { get; set; }
  public string ClassificationMarking { get; set; }
  public string Variant { get; set; }
  public string MinorVariant { get; set; }
  public string Category { get; set; }
  public string ManufacturerOrgId { get; set; }
  public string LaunchPrefix { get; set; }
  public string Family { get; set; }
  public string Propellant { get; set; }
  public string Oxidizer { get; set; }
  public double Length { get; set; }
  public double Diameter { get; set; }
  public double LaunchMass { get; set; }
  public double GeoPayloadMass { get; set; }
  public double GtoPayloadMass { get; set; }
  public double LeoPayloadMass { get; set; }
  public double SsoPayloadMass { get; set; }
  public double FairingLength { get; set; }
  public string FairingName { get; set; }
  public double FairingExternalDiameter { get; set; }
  public double FairingInternalDiameter { get; set; }
  public double FairingMass { get; set; }
  public string FairingMaterial { get; set; }
  public double MaxAccelLoad { get; set; }
  public double MaxPayloadFreqLat { get; set; }
  public double MaxPayloadFreqLon { get; set; }
  public double MaxAcousticLevel { get; set; }
  public double MaxAcousticLevelRange { get; set; }
  public double SoundPressureLevel { get; set; }
  public double MaxFlightShockForce { get; set; }
  public double MaxFlightShockFreq { get; set; }
  public double MaxFairingPressureChange { get; set; }
  public double EstLaunchPrice { get; set; }
  public double EstLaunchPriceTypical { get; set; }
  public double GtoInj3SigAccuracyApogeeTarget { get; set; }
  public double GtoInj3SigAccuracyApogeeMargin { get; set; }
  public double GtoInj3SigAccuracyPerigeeTarget { get; set; }
  public double GtoInj3SigAccuracyPerigeeMargin { get; set; }
  public double GtoInj3SigAccuracyInclinationTarget { get; set; }
  public double GtoInj3SigAccuracyInclinationMargin { get; set; }
  public double AttitudeAccuracy { get; set; }
  public double PayloadSeparationRate { get; set; }
  public double DeploymentRotationRate { get; set; }
  public string SourceURL { get; set; }
  public string Notes { get; set; }
  public string FairingNotes { get; set; }
  public string PayloadNotes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public LaunchVehicleDetails_Ingest_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }

  public LaunchVehicleDetails_IngestT() {
    this.Id = null;
    this.IdLaunchVehicle = null;
    this.ClassificationMarking = null;
    this.Variant = null;
    this.MinorVariant = null;
    this.Category = null;
    this.ManufacturerOrgId = null;
    this.LaunchPrefix = null;
    this.Family = null;
    this.Propellant = null;
    this.Oxidizer = null;
    this.Length = 0.0;
    this.Diameter = 0.0;
    this.LaunchMass = 0.0;
    this.GeoPayloadMass = 0.0;
    this.GtoPayloadMass = 0.0;
    this.LeoPayloadMass = 0.0;
    this.SsoPayloadMass = 0.0;
    this.FairingLength = 0.0;
    this.FairingName = null;
    this.FairingExternalDiameter = 0.0;
    this.FairingInternalDiameter = 0.0;
    this.FairingMass = 0.0;
    this.FairingMaterial = null;
    this.MaxAccelLoad = 0.0;
    this.MaxPayloadFreqLat = 0.0;
    this.MaxPayloadFreqLon = 0.0;
    this.MaxAcousticLevel = 0.0;
    this.MaxAcousticLevelRange = 0.0;
    this.SoundPressureLevel = 0.0;
    this.MaxFlightShockForce = 0.0;
    this.MaxFlightShockFreq = 0.0;
    this.MaxFairingPressureChange = 0.0;
    this.EstLaunchPrice = 0.0;
    this.EstLaunchPriceTypical = 0.0;
    this.GtoInj3SigAccuracyApogeeTarget = 0.0;
    this.GtoInj3SigAccuracyApogeeMargin = 0.0;
    this.GtoInj3SigAccuracyPerigeeTarget = 0.0;
    this.GtoInj3SigAccuracyPerigeeMargin = 0.0;
    this.GtoInj3SigAccuracyInclinationTarget = 0.0;
    this.GtoInj3SigAccuracyInclinationMargin = 0.0;
    this.AttitudeAccuracy = 0.0;
    this.PayloadSeparationRate = 0.0;
    this.DeploymentRotationRate = 0.0;
    this.SourceURL = null;
    this.Notes = null;
    this.FairingNotes = null;
    this.PayloadNotes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = LaunchVehicleDetails_Ingest_dataMode_Enum.REAL;
    this.Tags = null;
  }
  public static LaunchVehicleDetails_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return LaunchVehicleDetails_Ingest.GetRootAsLaunchVehicleDetails_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LaunchVehicleDetails_Ingest.FinishLaunchVehicleDetails_IngestBuffer(fbb, LaunchVehicleDetails_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LaunchVehicleDetails_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdLaunchVehicle*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Variant*/, false)
      && verifier.VerifyString(tablePos, 12 /*MinorVariant*/, false)
      && verifier.VerifyString(tablePos, 14 /*Category*/, false)
      && verifier.VerifyString(tablePos, 16 /*ManufacturerOrgId*/, false)
      && verifier.VerifyString(tablePos, 18 /*LaunchPrefix*/, false)
      && verifier.VerifyString(tablePos, 20 /*Family*/, false)
      && verifier.VerifyString(tablePos, 22 /*Propellant*/, false)
      && verifier.VerifyString(tablePos, 24 /*Oxidizer*/, false)
      && verifier.VerifyField(tablePos, 26 /*Length*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Diameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*LaunchMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*GeoPayloadMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*GtoPayloadMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*LeoPayloadMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*SsoPayloadMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*FairingLength*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 42 /*FairingName*/, false)
      && verifier.VerifyField(tablePos, 44 /*FairingExternalDiameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*FairingInternalDiameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*FairingMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 50 /*FairingMaterial*/, false)
      && verifier.VerifyField(tablePos, 52 /*MaxAccelLoad*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*MaxPayloadFreqLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*MaxPayloadFreqLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*MaxAcousticLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*MaxAcousticLevelRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*SoundPressureLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*MaxFlightShockForce*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*MaxFlightShockFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*MaxFairingPressureChange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*EstLaunchPrice*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*EstLaunchPriceTypical*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*GtoInj3SigAccuracyApogeeTarget*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*GtoInj3SigAccuracyApogeeMargin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*GtoInj3SigAccuracyPerigeeTarget*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*GtoInj3SigAccuracyPerigeeMargin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*GtoInj3SigAccuracyInclinationTarget*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*GtoInj3SigAccuracyInclinationMargin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*AttitudeAccuracy*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*PayloadSeparationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*DeploymentRotationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 92 /*SourceURL*/, false)
      && verifier.VerifyString(tablePos, 94 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 96 /*FairingNotes*/, false)
      && verifier.VerifyString(tablePos, 98 /*PayloadNotes*/, false)
      && verifier.VerifyString(tablePos, 100 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 102 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 104 /*Source*/, false)
      && verifier.VerifyString(tablePos, 106 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 108 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 110 /*DataMode*/, 1 /*LaunchVehicleDetails_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 112 /*Tags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
