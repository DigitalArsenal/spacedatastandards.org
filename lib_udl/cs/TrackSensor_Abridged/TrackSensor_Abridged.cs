// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Schema for Track Sensor data.
public struct TrackSensor_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TrackSensor_Abridged GetRootAsTrackSensor_Abridged(ByteBuffer _bb) { return GetRootAsTrackSensor_Abridged(_bb, new TrackSensor_Abridged()); }
  public static TrackSensor_Abridged GetRootAsTrackSensor_Abridged(ByteBuffer _bb, TrackSensor_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TrackSensor_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TRAC"); }
  public static bool VerifyTrackSensor_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("TRAC", false, TrackSensor_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackSensor_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The track object range from the observing sensor, in kilometers.
  /// Example: /// Example: 4023.95
  /// Constraints: No constraints specified.
  public double Range { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The observing sensor azimuth angle, in degrees and topocentric frame.
  /// Example: /// Example: 90
  /// Constraints: No constraints specified.
  public double Az { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  public int SensorNumber { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Unique name of this sensor.
  /// Example: /// Example: SENSOR_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string SensorName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSensorNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSensorNameArray() { return __p.__vector_as_array<byte>(10); }
  /// The mission number which produced this track observation.
  /// Example: /// Example: Example Mission
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string MissionNumber { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionNumberBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMissionNumberBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMissionNumberArray() { return __p.__vector_as_array<byte>(12); }
  /// Minimum range measurement capability of the sensor, in kilometers.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MinRangeLimit { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
  /// Example: /// Example: UNKNOWN
  /// Constraints: Minimum length = 0, Maximum length = 24
  public TrackSensor_Abridged_sensorFOVType_Enum SensorFOVType { get { int o = __p.__offset(16); return o != 0 ? (TrackSensor_Abridged_sensorFOVType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY; } }

  public static Offset<TrackSensor_Abridged> CreateTrackSensor_Abridged(FlatBufferBuilder builder,
      double range = 0.0,
      double az = 0.0,
      int sensorNumber = 0,
      StringOffset sensorNameOffset = default(StringOffset),
      StringOffset missionNumberOffset = default(StringOffset),
      double minRangeLimit = 0.0,
      TrackSensor_Abridged_sensorFOVType_Enum sensorFOVType = TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY) {
    builder.StartTable(7);
    TrackSensor_Abridged.AddMinRangeLimit(builder, minRangeLimit);
    TrackSensor_Abridged.AddAz(builder, az);
    TrackSensor_Abridged.AddRange(builder, range);
    TrackSensor_Abridged.AddMissionNumber(builder, missionNumberOffset);
    TrackSensor_Abridged.AddSensorName(builder, sensorNameOffset);
    TrackSensor_Abridged.AddSensorNumber(builder, sensorNumber);
    TrackSensor_Abridged.AddSensorFOVType(builder, sensorFOVType);
    return TrackSensor_Abridged.EndTrackSensor_Abridged(builder);
  }

  public static void StartTrackSensor_Abridged(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddRange(FlatBufferBuilder builder, double range) { builder.AddDouble(0, range, 0.0); }
  public static void AddAz(FlatBufferBuilder builder, double az) { builder.AddDouble(1, az, 0.0); }
  public static void AddSensorNumber(FlatBufferBuilder builder, int sensorNumber) { builder.AddInt(2, sensorNumber, 0); }
  public static void AddSensorName(FlatBufferBuilder builder, StringOffset sensorNameOffset) { builder.AddOffset(3, sensorNameOffset.Value, 0); }
  public static void AddMissionNumber(FlatBufferBuilder builder, StringOffset missionNumberOffset) { builder.AddOffset(4, missionNumberOffset.Value, 0); }
  public static void AddMinRangeLimit(FlatBufferBuilder builder, double minRangeLimit) { builder.AddDouble(5, minRangeLimit, 0.0); }
  public static void AddSensorFOVType(FlatBufferBuilder builder, TrackSensor_Abridged_sensorFOVType_Enum sensorFOVType) { builder.AddSbyte(6, (sbyte)sensorFOVType, 0); }
  public static Offset<TrackSensor_Abridged> EndTrackSensor_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TrackSensor_Abridged>(o);
  }
  public static void FinishTrackSensor_AbridgedBuffer(FlatBufferBuilder builder, Offset<TrackSensor_Abridged> offset) { builder.Finish(offset.Value, "TRAC"); }
  public static void FinishSizePrefixedTrackSensor_AbridgedBuffer(FlatBufferBuilder builder, Offset<TrackSensor_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "TRAC"); }
  public TrackSensor_AbridgedT UnPack() {
    var _o = new TrackSensor_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackSensor_AbridgedT _o) {
    _o.Range = this.Range;
    _o.Az = this.Az;
    _o.SensorNumber = this.SensorNumber;
    _o.SensorName = this.SensorName;
    _o.MissionNumber = this.MissionNumber;
    _o.MinRangeLimit = this.MinRangeLimit;
    _o.SensorFOVType = this.SensorFOVType;
  }
  public static Offset<TrackSensor_Abridged> Pack(FlatBufferBuilder builder, TrackSensor_AbridgedT _o) {
    if (_o == null) return default(Offset<TrackSensor_Abridged>);
    var _sensorName = _o.SensorName == null ? default(StringOffset) : builder.CreateString(_o.SensorName);
    var _missionNumber = _o.MissionNumber == null ? default(StringOffset) : builder.CreateString(_o.MissionNumber);
    return CreateTrackSensor_Abridged(
      builder,
      _o.Range,
      _o.Az,
      _o.SensorNumber,
      _sensorName,
      _missionNumber,
      _o.MinRangeLimit,
      _o.SensorFOVType);
  }
}

public class TrackSensor_AbridgedT
{
  public double Range { get; set; }
  public double Az { get; set; }
  public int SensorNumber { get; set; }
  public string SensorName { get; set; }
  public string MissionNumber { get; set; }
  public double MinRangeLimit { get; set; }
  public TrackSensor_Abridged_sensorFOVType_Enum SensorFOVType { get; set; }

  public TrackSensor_AbridgedT() {
    this.Range = 0.0;
    this.Az = 0.0;
    this.SensorNumber = 0;
    this.SensorName = null;
    this.MissionNumber = null;
    this.MinRangeLimit = 0.0;
    this.SensorFOVType = TrackSensor_Abridged_sensorFOVType_Enum.BUTTERFLY;
  }
  public static TrackSensor_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return TrackSensor_Abridged.GetRootAsTrackSensor_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TrackSensor_Abridged.FinishTrackSensor_AbridgedBuffer(fbb, TrackSensor_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class TrackSensor_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Range*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Az*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*SensorNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*SensorName*/, false)
      && verifier.VerifyString(tablePos, 12 /*MissionNumber*/, false)
      && verifier.VerifyField(tablePos, 14 /*MinRangeLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*SensorFOVType*/, 1 /*TrackSensor_Abridged_sensorFOVType_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
