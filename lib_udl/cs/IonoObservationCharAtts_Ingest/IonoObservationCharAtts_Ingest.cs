// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Characteristic attributes of a IonoObservation.
public struct IonoObservationCharAtts_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationCharAtts_Ingest GetRootAsIonoObservationCharAtts_Ingest(ByteBuffer _bb) { return GetRootAsIonoObservationCharAtts_Ingest(_bb, new IonoObservationCharAtts_Ingest()); }
  public static IonoObservationCharAtts_Ingest GetRootAsIonoObservationCharAtts_Ingest(ByteBuffer _bb, IonoObservationCharAtts_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IonoObservationCharAtts_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "IONO"); }
  public static bool VerifyIonoObservationCharAtts_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("IONO", false, IonoObservationCharAtts_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IonoObservationCharAtts_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
  /// Example: /// Example: 04
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string UrsiID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrsiIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrsiIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrsiIDArray() { return __p.__vector_as_array<byte>(4); }
  /// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
  /// Example: /// Example: hprimeF2
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CharName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCharNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCharNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
  /// Example: /// Example: 1.26
  /// Constraints: No constraints specified.
  public double LowerBound { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
  /// Example: /// Example: 2.57
  /// Constraints: No constraints specified.
  public double UpperBound { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  /// Example: /// Example: T
  /// Constraints: No constraints specified.
  public string Q { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetQBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetQArray() { return __p.__vector_as_array<byte>(12); }
  /// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  /// Example: /// Example: K
  /// Constraints: No constraints specified.
  public string D { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDArray() { return __p.__vector_as_array<byte>(14); }
  /// Name of the climate model.
  /// Example: /// Example: IRI
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ClimateModelName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClimateModelNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetClimateModelNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetClimateModelNameArray() { return __p.__vector_as_array<byte>(16); }
  /// List of options for the climate model.
  /// Example: /// Example: ['URSI-88', 'No storm']
  /// Constraints: No constraints specified.
  public string ClimateModelOptions(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ClimateModelOptionsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Input parameters for the climate model.
  /// Example: /// Example: ['ISSN1 88.1', 'Option 2']
  /// Constraints: No constraints specified.
  public string ClimateModelInputParams(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ClimateModelInputParamsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
  /// Example: /// Example: 1sigma
  /// Constraints: No constraints specified.
  public string UncertaintyBoundType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUncertaintyBoundTypeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetUncertaintyBoundTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetUncertaintyBoundTypeArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<IonoObservationCharAtts_Ingest> CreateIonoObservationCharAtts_Ingest(FlatBufferBuilder builder,
      StringOffset ursiIDOffset = default(StringOffset),
      StringOffset charNameOffset = default(StringOffset),
      double lowerBound = 0.0,
      double upperBound = 0.0,
      StringOffset qOffset = default(StringOffset),
      StringOffset dOffset = default(StringOffset),
      StringOffset climateModelNameOffset = default(StringOffset),
      VectorOffset climateModelOptionsOffset = default(VectorOffset),
      VectorOffset climateModelInputParamsOffset = default(VectorOffset),
      StringOffset uncertaintyBoundTypeOffset = default(StringOffset)) {
    builder.StartTable(10);
    IonoObservationCharAtts_Ingest.AddUpperBound(builder, upperBound);
    IonoObservationCharAtts_Ingest.AddLowerBound(builder, lowerBound);
    IonoObservationCharAtts_Ingest.AddUncertaintyBoundType(builder, uncertaintyBoundTypeOffset);
    IonoObservationCharAtts_Ingest.AddClimateModelInputParams(builder, climateModelInputParamsOffset);
    IonoObservationCharAtts_Ingest.AddClimateModelOptions(builder, climateModelOptionsOffset);
    IonoObservationCharAtts_Ingest.AddClimateModelName(builder, climateModelNameOffset);
    IonoObservationCharAtts_Ingest.AddD(builder, dOffset);
    IonoObservationCharAtts_Ingest.AddQ(builder, qOffset);
    IonoObservationCharAtts_Ingest.AddCharName(builder, charNameOffset);
    IonoObservationCharAtts_Ingest.AddUrsiID(builder, ursiIDOffset);
    return IonoObservationCharAtts_Ingest.EndIonoObservationCharAtts_Ingest(builder);
  }

  public static void StartIonoObservationCharAtts_Ingest(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddUrsiID(FlatBufferBuilder builder, StringOffset ursiIDOffset) { builder.AddOffset(0, ursiIDOffset.Value, 0); }
  public static void AddCharName(FlatBufferBuilder builder, StringOffset charNameOffset) { builder.AddOffset(1, charNameOffset.Value, 0); }
  public static void AddLowerBound(FlatBufferBuilder builder, double lowerBound) { builder.AddDouble(2, lowerBound, 0.0); }
  public static void AddUpperBound(FlatBufferBuilder builder, double upperBound) { builder.AddDouble(3, upperBound, 0.0); }
  public static void AddQ(FlatBufferBuilder builder, StringOffset qOffset) { builder.AddOffset(4, qOffset.Value, 0); }
  public static void AddD(FlatBufferBuilder builder, StringOffset dOffset) { builder.AddOffset(5, dOffset.Value, 0); }
  public static void AddClimateModelName(FlatBufferBuilder builder, StringOffset climateModelNameOffset) { builder.AddOffset(6, climateModelNameOffset.Value, 0); }
  public static void AddClimateModelOptions(FlatBufferBuilder builder, VectorOffset climateModelOptionsOffset) { builder.AddOffset(7, climateModelOptionsOffset.Value, 0); }
  public static VectorOffset CreateClimateModelOptionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelOptionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelOptionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelOptionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClimateModelOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClimateModelInputParams(FlatBufferBuilder builder, VectorOffset climateModelInputParamsOffset) { builder.AddOffset(8, climateModelInputParamsOffset.Value, 0); }
  public static VectorOffset CreateClimateModelInputParamsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelInputParamsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelInputParamsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClimateModelInputParamsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClimateModelInputParamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUncertaintyBoundType(FlatBufferBuilder builder, StringOffset uncertaintyBoundTypeOffset) { builder.AddOffset(9, uncertaintyBoundTypeOffset.Value, 0); }
  public static Offset<IonoObservationCharAtts_Ingest> EndIonoObservationCharAtts_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IonoObservationCharAtts_Ingest>(o);
  }
  public static void FinishIonoObservationCharAtts_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservationCharAtts_Ingest> offset) { builder.Finish(offset.Value, "IONO"); }
  public static void FinishSizePrefixedIonoObservationCharAtts_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservationCharAtts_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "IONO"); }
  public IonoObservationCharAtts_IngestT UnPack() {
    var _o = new IonoObservationCharAtts_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IonoObservationCharAtts_IngestT _o) {
    _o.UrsiID = this.UrsiID;
    _o.CharName = this.CharName;
    _o.LowerBound = this.LowerBound;
    _o.UpperBound = this.UpperBound;
    _o.Q = this.Q;
    _o.D = this.D;
    _o.ClimateModelName = this.ClimateModelName;
    _o.ClimateModelOptions = new List<string>();
    for (var _j = 0; _j < this.ClimateModelOptionsLength; ++_j) {_o.ClimateModelOptions.Add(this.ClimateModelOptions(_j));}
    _o.ClimateModelInputParams = new List<string>();
    for (var _j = 0; _j < this.ClimateModelInputParamsLength; ++_j) {_o.ClimateModelInputParams.Add(this.ClimateModelInputParams(_j));}
    _o.UncertaintyBoundType = this.UncertaintyBoundType;
  }
  public static Offset<IonoObservationCharAtts_Ingest> Pack(FlatBufferBuilder builder, IonoObservationCharAtts_IngestT _o) {
    if (_o == null) return default(Offset<IonoObservationCharAtts_Ingest>);
    var _ursiID = _o.UrsiID == null ? default(StringOffset) : builder.CreateString(_o.UrsiID);
    var _charName = _o.CharName == null ? default(StringOffset) : builder.CreateString(_o.CharName);
    var _q = _o.Q == null ? default(StringOffset) : builder.CreateString(_o.Q);
    var _d = _o.D == null ? default(StringOffset) : builder.CreateString(_o.D);
    var _climateModelName = _o.ClimateModelName == null ? default(StringOffset) : builder.CreateString(_o.ClimateModelName);
    var _climateModelOptions = default(VectorOffset);
    if (_o.ClimateModelOptions != null) {
      var __climateModelOptions = new StringOffset[_o.ClimateModelOptions.Count];
      for (var _j = 0; _j < __climateModelOptions.Length; ++_j) { __climateModelOptions[_j] = builder.CreateString(_o.ClimateModelOptions[_j]); }
      _climateModelOptions = CreateClimateModelOptionsVector(builder, __climateModelOptions);
    }
    var _climateModelInputParams = default(VectorOffset);
    if (_o.ClimateModelInputParams != null) {
      var __climateModelInputParams = new StringOffset[_o.ClimateModelInputParams.Count];
      for (var _j = 0; _j < __climateModelInputParams.Length; ++_j) { __climateModelInputParams[_j] = builder.CreateString(_o.ClimateModelInputParams[_j]); }
      _climateModelInputParams = CreateClimateModelInputParamsVector(builder, __climateModelInputParams);
    }
    var _uncertaintyBoundType = _o.UncertaintyBoundType == null ? default(StringOffset) : builder.CreateString(_o.UncertaintyBoundType);
    return CreateIonoObservationCharAtts_Ingest(
      builder,
      _ursiID,
      _charName,
      _o.LowerBound,
      _o.UpperBound,
      _q,
      _d,
      _climateModelName,
      _climateModelOptions,
      _climateModelInputParams,
      _uncertaintyBoundType);
  }
}

public class IonoObservationCharAtts_IngestT
{
  public string UrsiID { get; set; }
  public string CharName { get; set; }
  public double LowerBound { get; set; }
  public double UpperBound { get; set; }
  public string Q { get; set; }
  public string D { get; set; }
  public string ClimateModelName { get; set; }
  public List<string> ClimateModelOptions { get; set; }
  public List<string> ClimateModelInputParams { get; set; }
  public string UncertaintyBoundType { get; set; }

  public IonoObservationCharAtts_IngestT() {
    this.UrsiID = null;
    this.CharName = null;
    this.LowerBound = 0.0;
    this.UpperBound = 0.0;
    this.Q = null;
    this.D = null;
    this.ClimateModelName = null;
    this.ClimateModelOptions = null;
    this.ClimateModelInputParams = null;
    this.UncertaintyBoundType = null;
  }
  public static IonoObservationCharAtts_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return IonoObservationCharAtts_Ingest.GetRootAsIonoObservationCharAtts_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IonoObservationCharAtts_Ingest.FinishIonoObservationCharAtts_IngestBuffer(fbb, IonoObservationCharAtts_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IonoObservationCharAtts_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*UrsiID*/, false)
      && verifier.VerifyString(tablePos, 6 /*CharName*/, false)
      && verifier.VerifyField(tablePos, 8 /*LowerBound*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*UpperBound*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*Q*/, false)
      && verifier.VerifyString(tablePos, 14 /*D*/, false)
      && verifier.VerifyString(tablePos, 16 /*ClimateModelName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*ClimateModelOptions*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*ClimateModelInputParams*/, false)
      && verifier.VerifyString(tablePos, 22 /*UncertaintyBoundType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
