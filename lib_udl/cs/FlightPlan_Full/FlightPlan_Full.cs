// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
public struct FlightPlan_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FlightPlan_Full GetRootAsFlightPlan_Full(ByteBuffer _bb) { return GetRootAsFlightPlan_Full(_bb, new FlightPlan_Full()); }
  public static FlightPlan_Full GetRootAsFlightPlan_Full(ByteBuffer _bb, FlightPlan_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FlightPlan_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "FLIG"); }
  public static bool VerifyFlightPlan_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("FLIG", false, FlightPlan_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlightPlan_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcMissionId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcMissionIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAmcMissionIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAmcMissionIdArray() { return __p.__vector_as_array<byte>(8); }
  /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
  /// Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSortie { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSortieBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSortieBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSortieArray() { return __p.__vector_as_array<byte>(10); }
  /// The UDL unique identifier of the aircraft associated with this flight plan.
  /// Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAircraft { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAircraftBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdAircraftBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdAircraftArray() { return __p.__vector_as_array<byte>(12); }
  /// The leg number of this flight plan.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  public int LegNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The UDL unique identifier of the departure airfield associated with this flight plan.
  /// Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdDepAirfield { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdDepAirfieldBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdDepAirfieldBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdDepAirfieldArray() { return __p.__vector_as_array<byte>(16); }
  /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KSLV
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string DepAirfield { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepAirfieldBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDepAirfieldBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDepAirfieldArray() { return __p.__vector_as_array<byte>(18); }
  /// The UDL unique identifier of the arrival airfield associated with this flight plan.
  /// Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdArrAirfield { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdArrAirfieldBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIdArrAirfieldBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIdArrAirfieldArray() { return __p.__vector_as_array<byte>(20); }
  /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string ArrAirfield { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrAirfieldBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetArrAirfieldBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetArrAirfieldArray() { return __p.__vector_as_array<byte>(22); }
  /// The source ID of the flight plan from the generating system.
  /// Example: /// Example: AFMAPP20322347140001
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(24); }
  /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string GenTS { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGenTSBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetGenTSBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetGenTSArray() { return __p.__vector_as_array<byte>(26); }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: KC-130 HERCULES
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AircraftMDS { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftMDSBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAircraftMDSBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAircraftMDSArray() { return __p.__vector_as_array<byte>(28); }
  /// The tail number of the aircraft associated with this flight plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TailNumber { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTailNumberBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTailNumberBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTailNumberArray() { return __p.__vector_as_array<byte>(30); }
  /// The call sign assigned to the aircraft for this flight plan.
  /// Example: /// Example: HKY629
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string CallSign { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(32); }
  /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string WxValidStart { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWxValidStartBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetWxValidStartBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetWxValidStartArray() { return __p.__vector_as_array<byte>(34); }
  /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string WxValidEnd { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWxValidEndBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetWxValidEndBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetWxValidEndArray() { return __p.__vector_as_array<byte>(36); }
  /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EstDepTime { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstDepTimeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetEstDepTimeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetEstDepTimeArray() { return __p.__vector_as_array<byte>(38); }
  /// The percent degrade due to drag for this aircraft.
  /// Example: /// Example: 16.9
  /// Constraints: No constraints specified.
  public double DragIndex { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The fuel degrade percentage used for this mission.
  /// Example: /// Example: 10.3
  /// Constraints: No constraints specified.
  public double FuelDegrade { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Operating weight of the aircraft in pounds.
  /// Example: /// Example: 251830.5
  /// Constraints: No constraints specified.
  public double OpWeight { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 44.1
  /// Constraints: No constraints specified.
  public double MsnIndex { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
  /// Example: /// Example: 180000.1
  /// Constraints: No constraints specified.
  public double RampFuel { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to start engines and taxi to the end of the runway in pounds.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  public double TaxiFuel { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
  /// Example: /// Example: 178500.1
  /// Constraints: No constraints specified.
  public double TakeoffFuel { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required from brake release to Top of Climb in pounds.
  /// Example: /// Example: 7000.1
  /// Constraints: No constraints specified.
  public double ClimbFuel { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time required from brake release to Top of Climb expressed as HH:MM.
  /// Example: /// Example: 00:13
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string ClimbTime { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClimbTimeBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetClimbTimeBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetClimbTimeArray() { return __p.__vector_as_array<byte>(56); }
  /// Additional fuel burned at Top of Climb in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  public double HoldDownFuel { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at Top of Climb for icing in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  public double TocIceFuel { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel remaining at Top of Climb in pounds.
  /// Example: /// Example: 160000.1
  /// Constraints: No constraints specified.
  public double TocFuel { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
  /// Example: /// Example: 155000.1
  /// Constraints: No constraints specified.
  public double EnrouteFuel { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
  /// Example: /// Example: 06:30
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string EnrouteTime { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnrouteTimeBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetEnrouteTimeBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetEnrouteTimeArray() { return __p.__vector_as_array<byte>(66); }
  /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  public double ThunderAvoidFuel { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at Top of Descent for icing in pounds.
  /// Example: /// Example: 2000.1
  /// Constraints: No constraints specified.
  public double TodIceFuel { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at Top of Descent for the operational condition in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  public double OpConditionFuel { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel remaining at Top of Descent in pounds.
  /// Example: /// Example: 32000.1
  /// Constraints: No constraints specified.
  public double TodFuel { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at landing/missed approach for an early descent in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  public double EarlyDescentFuel { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  public double ArrIceFuel { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional fuel burned at the destination for holding in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  public double HoldFuel { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional time for holding at the destination expressed as HH:MM.
  /// Example: /// Example: 01:00
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string HoldTime { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHoldTimeBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetHoldTimeBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetHoldTimeArray() { return __p.__vector_as_array<byte>(82); }
  /// Fuel burned from the initial approach point to landing in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  public double AppLandingFuel { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel planned to be burned during the flight in pounds.
  /// Example: /// Example: 145000.1
  /// Constraints: No constraints specified.
  public double BurnedFuel { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel planned to be remaining on the airplane at landing in pounds.
  /// Example: /// Example: 19000.1
  /// Constraints: No constraints specified.
  public double LandingFuel { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum fuel on board required to divert in pounds.
  /// Example: /// Example: 25000.1
  /// Constraints: No constraints specified.
  public double MinDivertFuel { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly to alternate landing site 1 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  public double ArrAlternate1Fuel { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly to alternate landing site 2 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  public double ArrAlternate2Fuel { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of contingency fuel in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  public double ContingencyFuel { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of reserve fuel in pounds.
  /// Example: /// Example: 10000.1
  /// Constraints: No constraints specified.
  public double ReserveFuel { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  public double DepressFuel { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of unusable fuel in pounds.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  public double UnusableFuel { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of unidentified extra fuel required to get to min landing in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  public double UnidentExtraFuel { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  public double IdentExtraFuel { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total fuel remaining at alternate landing site 1 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  public double RemAlternate1Fuel { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total fuel remaining at alternate landing site 2 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  public double RemAlternate2Fuel { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total endurance time based on the fuel on board expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string EnduranceTime { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnduranceTimeBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetEnduranceTimeBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetEnduranceTimeArray() { return __p.__vector_as_array<byte>(112); }
  /// Name of the planned Standard Instrument Departure (SID) procedure.
  /// Example: /// Example: RENV3B
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Sid { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSidBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetSidBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetSidArray() { return __p.__vector_as_array<byte>(114); }
  /// Name of the planned Standard Terminal Arrival (STAR) procedure.
  /// Example: /// Example: ADANA
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Star { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStarBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetStarBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetStarArray() { return __p.__vector_as_array<byte>(116); }
  /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
  /// Example: /// Example: Failed by FAA SAPT 184022AUG2022
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GpsRAIM { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGpsRAIMBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetGpsRAIMBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetGpsRAIMArray() { return __p.__vector_as_array<byte>(118); }
  /// The departure runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string DepRunway { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepRunwayBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetDepRunwayBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetDepRunwayArray() { return __p.__vector_as_array<byte>(120); }
  /// The arrival runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ArrRunway { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrRunwayBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetArrRunwayBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetArrRunwayArray() { return __p.__vector_as_array<byte>(122); }
  /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  /// Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
  /// GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
  /// ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string RouteString { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRouteStringBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetRouteStringBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetRouteStringArray() { return __p.__vector_as_array<byte>(124); }
  /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
  /// Example: /// Example: ['US', 'CA', 'UK']
  /// Constraints: No constraints specified.
  public string CountryCodes(int j) { int o = __p.__offset(126); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CountryCodesLength { get { int o = __p.__offset(126); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
  /// Example: /// Example: 85 MINUTES
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string EtopsRating { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEtopsRatingBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetEtopsRatingBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetEtopsRatingArray() { return __p.__vector_as_array<byte>(128); }
  /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  public string EtopsAirfields(int j) { int o = __p.__offset(130); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EtopsAirfieldsLength { get { int o = __p.__offset(130); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  public string EtopsAltAirfields(int j) { int o = __p.__offset(132); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EtopsAltAirfieldsLength { get { int o = __p.__offset(132); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The Extended Operations (ETOPS) validity window for the alternate airfield.
  /// Example: /// Example: LPLA: 0317Z-0722Z
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EtopsValWindow { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEtopsValWindowBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetEtopsValWindowBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetEtopsValWindowArray() { return __p.__vector_as_array<byte>(134); }
  /// Remarks from the planners concerning this flight plan.
  /// Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string PlannerRemark { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannerRemarkBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetPlannerRemarkBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetPlannerRemarkArray() { return __p.__vector_as_array<byte>(136); }
  /// Remarks about the planned cargo associated with this flight plan.
  /// Example: /// Example: Expecting 55,000 lbs. If different, call us.
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string CargoRemark { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCargoRemarkBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetCargoRemarkBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetCargoRemarkArray() { return __p.__vector_as_array<byte>(138); }
  /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -1.1
  /// Constraints: No constraints specified.
  public double WindFac1 { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double WindFac2 { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  public double WindFacAvg { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
  /// Example: /// Example: 16.1
  /// Constraints: No constraints specified.
  public double AvgTempDev { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of Air Traffic Control (ATC) addresses.
  /// Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
  /// Constraints: No constraints specified.
  public string AtcAddresses(int j) { int o = __p.__offset(148); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AtcAddressesLength { get { int o = __p.__offset(148); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Air Traffic Control address filing the flight plan.
  /// Example: /// Example: ETARYXYX
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Originator { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginatorBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetOriginatorBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetOriginatorArray() { return __p.__vector_as_array<byte>(150); }
  /// The number of aircraft flying this flight plan.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumAircraft { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The flight rules this flight plan is being filed under.
  /// Example: /// Example: l
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string FlightRules { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlightRulesBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetFlightRulesBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetFlightRulesArray() { return __p.__vector_as_array<byte>(154); }
  /// The type of flight (MILITARY, CIVILIAN, etc).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string FlightType { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlightTypeBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetFlightTypeBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetFlightTypeArray() { return __p.__vector_as_array<byte>(156); }
  /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
  /// Example: /// Example: N0305
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string InitialCruiseSpeed { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitialCruiseSpeedBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetInitialCruiseSpeedBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetInitialCruiseSpeedArray() { return __p.__vector_as_array<byte>(158); }
  /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
  /// Example: /// Example: F270
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string InitialFlightLevel { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitialFlightLevelBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetInitialFlightLevelBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetInitialFlightLevelArray() { return __p.__vector_as_array<byte>(160); }
  /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDS
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ArrAlternate1 { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrAlternate1Bytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetArrAlternate1Bytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetArrAlternate1Array() { return __p.__vector_as_array<byte>(162); }
  /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDM
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ArrAlternate2 { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrAlternate2Bytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetArrAlternate2Bytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetArrAlternate2Array() { return __p.__vector_as_array<byte>(164); }
  /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: LFPO
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DepAlternate { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepAlternateBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetDepAlternateBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetDepAlternateArray() { return __p.__vector_as_array<byte>(166); }
  /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string WakeTurbCat { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWakeTurbCatBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetWakeTurbCatBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetWakeTurbCatArray() { return __p.__vector_as_array<byte>(168); }
  /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
  /// Example: /// Example: SDFGHIRTUWXYZ/H
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Equipment { get { int o = __p.__offset(170); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipmentBytes() { return __p.__vector_as_span<byte>(170, 1); }
#else
  public ArraySegment<byte>? GetEquipmentBytes() { return __p.__vector_as_arraysegment(170); }
#endif
  public byte[] GetEquipmentArray() { return __p.__vector_as_array<byte>(170); }
  /// Additional remarks for air traffic control for this flight.
  /// Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Notes { get { int o = __p.__offset(172); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(172, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(172); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(172); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(174); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(174, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(174); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(174); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(176); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(176, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(176); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(176); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(178); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(178, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(178); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(178); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(180); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(180, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(180); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(180); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(182); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(182, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(182); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(182); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(184); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(184, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(184); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(184); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public FlightPlan_Full_dataMode_Enum DataMode { get { int o = __p.__offset(186); return o != 0 ? (FlightPlan_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : FlightPlan_Full_dataMode_Enum.REAL; } }
  /// Collection of air refueling events occurring on this flight.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AirRefuelEvents(int j) { int o = __p.__offset(188); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AirRefuelEventsLength { get { int o = __p.__offset(188); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string FlightPlanMessages(int j) { int o = __p.__offset(190); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FlightPlanMessagesLength { get { int o = __p.__offset(190); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of waypoints associated with this flight plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string FlightPlanWaypoints(int j) { int o = __p.__offset(192); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FlightPlanWaypointsLength { get { int o = __p.__offset(192); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string FlightPlanPointGroups(int j) { int o = __p.__offset(194); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FlightPlanPointGroupsLength { get { int o = __p.__offset(194); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<FlightPlan_Full> CreateFlightPlan_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset amcMissionIdOffset = default(StringOffset),
      StringOffset idSortieOffset = default(StringOffset),
      StringOffset idAircraftOffset = default(StringOffset),
      int legNum = 0,
      StringOffset idDepAirfieldOffset = default(StringOffset),
      StringOffset depAirfieldOffset = default(StringOffset),
      StringOffset idArrAirfieldOffset = default(StringOffset),
      StringOffset arrAirfieldOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset genTSOffset = default(StringOffset),
      StringOffset aircraftMDSOffset = default(StringOffset),
      StringOffset tailNumberOffset = default(StringOffset),
      StringOffset callSignOffset = default(StringOffset),
      StringOffset wxValidStartOffset = default(StringOffset),
      StringOffset wxValidEndOffset = default(StringOffset),
      StringOffset estDepTimeOffset = default(StringOffset),
      double dragIndex = 0.0,
      double fuelDegrade = 0.0,
      double opWeight = 0.0,
      double msnIndex = 0.0,
      double rampFuel = 0.0,
      double taxiFuel = 0.0,
      double takeoffFuel = 0.0,
      double climbFuel = 0.0,
      StringOffset climbTimeOffset = default(StringOffset),
      double holdDownFuel = 0.0,
      double tocIceFuel = 0.0,
      double tocFuel = 0.0,
      double enrouteFuel = 0.0,
      StringOffset enrouteTimeOffset = default(StringOffset),
      double thunderAvoidFuel = 0.0,
      double todIceFuel = 0.0,
      double opConditionFuel = 0.0,
      double todFuel = 0.0,
      double earlyDescentFuel = 0.0,
      double arrIceFuel = 0.0,
      double holdFuel = 0.0,
      StringOffset holdTimeOffset = default(StringOffset),
      double appLandingFuel = 0.0,
      double burnedFuel = 0.0,
      double landingFuel = 0.0,
      double minDivertFuel = 0.0,
      double arrAlternate1Fuel = 0.0,
      double arrAlternate2Fuel = 0.0,
      double contingencyFuel = 0.0,
      double reserveFuel = 0.0,
      double depressFuel = 0.0,
      double unusableFuel = 0.0,
      double unidentExtraFuel = 0.0,
      double identExtraFuel = 0.0,
      double remAlternate1Fuel = 0.0,
      double remAlternate2Fuel = 0.0,
      StringOffset enduranceTimeOffset = default(StringOffset),
      StringOffset sidOffset = default(StringOffset),
      StringOffset starOffset = default(StringOffset),
      StringOffset gpsRAIMOffset = default(StringOffset),
      StringOffset depRunwayOffset = default(StringOffset),
      StringOffset arrRunwayOffset = default(StringOffset),
      StringOffset routeStringOffset = default(StringOffset),
      VectorOffset countryCodesOffset = default(VectorOffset),
      StringOffset etopsRatingOffset = default(StringOffset),
      VectorOffset etopsAirfieldsOffset = default(VectorOffset),
      VectorOffset etopsAltAirfieldsOffset = default(VectorOffset),
      StringOffset etopsValWindowOffset = default(StringOffset),
      StringOffset plannerRemarkOffset = default(StringOffset),
      StringOffset cargoRemarkOffset = default(StringOffset),
      double windFac1 = 0.0,
      double windFac2 = 0.0,
      double windFacAvg = 0.0,
      double avgTempDev = 0.0,
      VectorOffset atcAddressesOffset = default(VectorOffset),
      StringOffset originatorOffset = default(StringOffset),
      int numAircraft = 0,
      StringOffset flightRulesOffset = default(StringOffset),
      StringOffset flightTypeOffset = default(StringOffset),
      StringOffset initialCruiseSpeedOffset = default(StringOffset),
      StringOffset initialFlightLevelOffset = default(StringOffset),
      StringOffset arrAlternate1Offset = default(StringOffset),
      StringOffset arrAlternate2Offset = default(StringOffset),
      StringOffset depAlternateOffset = default(StringOffset),
      StringOffset wakeTurbCatOffset = default(StringOffset),
      StringOffset equipmentOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      FlightPlan_Full_dataMode_Enum dataMode = FlightPlan_Full_dataMode_Enum.REAL,
      VectorOffset airRefuelEventsOffset = default(VectorOffset),
      VectorOffset flightPlanMessagesOffset = default(VectorOffset),
      VectorOffset flightPlanWaypointsOffset = default(VectorOffset),
      VectorOffset flightPlanPointGroupsOffset = default(VectorOffset)) {
    builder.StartTable(96);
    FlightPlan_Full.AddAvgTempDev(builder, avgTempDev);
    FlightPlan_Full.AddWindFacAvg(builder, windFacAvg);
    FlightPlan_Full.AddWindFac2(builder, windFac2);
    FlightPlan_Full.AddWindFac1(builder, windFac1);
    FlightPlan_Full.AddRemAlternate2Fuel(builder, remAlternate2Fuel);
    FlightPlan_Full.AddRemAlternate1Fuel(builder, remAlternate1Fuel);
    FlightPlan_Full.AddIdentExtraFuel(builder, identExtraFuel);
    FlightPlan_Full.AddUnidentExtraFuel(builder, unidentExtraFuel);
    FlightPlan_Full.AddUnusableFuel(builder, unusableFuel);
    FlightPlan_Full.AddDepressFuel(builder, depressFuel);
    FlightPlan_Full.AddReserveFuel(builder, reserveFuel);
    FlightPlan_Full.AddContingencyFuel(builder, contingencyFuel);
    FlightPlan_Full.AddArrAlternate2Fuel(builder, arrAlternate2Fuel);
    FlightPlan_Full.AddArrAlternate1Fuel(builder, arrAlternate1Fuel);
    FlightPlan_Full.AddMinDivertFuel(builder, minDivertFuel);
    FlightPlan_Full.AddLandingFuel(builder, landingFuel);
    FlightPlan_Full.AddBurnedFuel(builder, burnedFuel);
    FlightPlan_Full.AddAppLandingFuel(builder, appLandingFuel);
    FlightPlan_Full.AddHoldFuel(builder, holdFuel);
    FlightPlan_Full.AddArrIceFuel(builder, arrIceFuel);
    FlightPlan_Full.AddEarlyDescentFuel(builder, earlyDescentFuel);
    FlightPlan_Full.AddTodFuel(builder, todFuel);
    FlightPlan_Full.AddOpConditionFuel(builder, opConditionFuel);
    FlightPlan_Full.AddTodIceFuel(builder, todIceFuel);
    FlightPlan_Full.AddThunderAvoidFuel(builder, thunderAvoidFuel);
    FlightPlan_Full.AddEnrouteFuel(builder, enrouteFuel);
    FlightPlan_Full.AddTocFuel(builder, tocFuel);
    FlightPlan_Full.AddTocIceFuel(builder, tocIceFuel);
    FlightPlan_Full.AddHoldDownFuel(builder, holdDownFuel);
    FlightPlan_Full.AddClimbFuel(builder, climbFuel);
    FlightPlan_Full.AddTakeoffFuel(builder, takeoffFuel);
    FlightPlan_Full.AddTaxiFuel(builder, taxiFuel);
    FlightPlan_Full.AddRampFuel(builder, rampFuel);
    FlightPlan_Full.AddMsnIndex(builder, msnIndex);
    FlightPlan_Full.AddOpWeight(builder, opWeight);
    FlightPlan_Full.AddFuelDegrade(builder, fuelDegrade);
    FlightPlan_Full.AddDragIndex(builder, dragIndex);
    FlightPlan_Full.AddFlightPlanPointGroups(builder, flightPlanPointGroupsOffset);
    FlightPlan_Full.AddFlightPlanWaypoints(builder, flightPlanWaypointsOffset);
    FlightPlan_Full.AddFlightPlanMessages(builder, flightPlanMessagesOffset);
    FlightPlan_Full.AddAirRefuelEvents(builder, airRefuelEventsOffset);
    FlightPlan_Full.AddOrigNetwork(builder, origNetworkOffset);
    FlightPlan_Full.AddOrigin(builder, originOffset);
    FlightPlan_Full.AddSource(builder, sourceOffset);
    FlightPlan_Full.AddSourceDL(builder, sourceDLOffset);
    FlightPlan_Full.AddCreatedBy(builder, createdByOffset);
    FlightPlan_Full.AddCreatedAt(builder, createdAtOffset);
    FlightPlan_Full.AddNotes(builder, notesOffset);
    FlightPlan_Full.AddEquipment(builder, equipmentOffset);
    FlightPlan_Full.AddWakeTurbCat(builder, wakeTurbCatOffset);
    FlightPlan_Full.AddDepAlternate(builder, depAlternateOffset);
    FlightPlan_Full.AddArrAlternate2(builder, arrAlternate2Offset);
    FlightPlan_Full.AddArrAlternate1(builder, arrAlternate1Offset);
    FlightPlan_Full.AddInitialFlightLevel(builder, initialFlightLevelOffset);
    FlightPlan_Full.AddInitialCruiseSpeed(builder, initialCruiseSpeedOffset);
    FlightPlan_Full.AddFlightType(builder, flightTypeOffset);
    FlightPlan_Full.AddFlightRules(builder, flightRulesOffset);
    FlightPlan_Full.AddNumAircraft(builder, numAircraft);
    FlightPlan_Full.AddOriginator(builder, originatorOffset);
    FlightPlan_Full.AddAtcAddresses(builder, atcAddressesOffset);
    FlightPlan_Full.AddCargoRemark(builder, cargoRemarkOffset);
    FlightPlan_Full.AddPlannerRemark(builder, plannerRemarkOffset);
    FlightPlan_Full.AddEtopsValWindow(builder, etopsValWindowOffset);
    FlightPlan_Full.AddEtopsAltAirfields(builder, etopsAltAirfieldsOffset);
    FlightPlan_Full.AddEtopsAirfields(builder, etopsAirfieldsOffset);
    FlightPlan_Full.AddEtopsRating(builder, etopsRatingOffset);
    FlightPlan_Full.AddCountryCodes(builder, countryCodesOffset);
    FlightPlan_Full.AddRouteString(builder, routeStringOffset);
    FlightPlan_Full.AddArrRunway(builder, arrRunwayOffset);
    FlightPlan_Full.AddDepRunway(builder, depRunwayOffset);
    FlightPlan_Full.AddGpsRAIM(builder, gpsRAIMOffset);
    FlightPlan_Full.AddStar(builder, starOffset);
    FlightPlan_Full.AddSid(builder, sidOffset);
    FlightPlan_Full.AddEnduranceTime(builder, enduranceTimeOffset);
    FlightPlan_Full.AddHoldTime(builder, holdTimeOffset);
    FlightPlan_Full.AddEnrouteTime(builder, enrouteTimeOffset);
    FlightPlan_Full.AddClimbTime(builder, climbTimeOffset);
    FlightPlan_Full.AddEstDepTime(builder, estDepTimeOffset);
    FlightPlan_Full.AddWxValidEnd(builder, wxValidEndOffset);
    FlightPlan_Full.AddWxValidStart(builder, wxValidStartOffset);
    FlightPlan_Full.AddCallSign(builder, callSignOffset);
    FlightPlan_Full.AddTailNumber(builder, tailNumberOffset);
    FlightPlan_Full.AddAircraftMDS(builder, aircraftMDSOffset);
    FlightPlan_Full.AddGenTS(builder, genTSOffset);
    FlightPlan_Full.AddExternalId(builder, externalIdOffset);
    FlightPlan_Full.AddArrAirfield(builder, arrAirfieldOffset);
    FlightPlan_Full.AddIdArrAirfield(builder, idArrAirfieldOffset);
    FlightPlan_Full.AddDepAirfield(builder, depAirfieldOffset);
    FlightPlan_Full.AddIdDepAirfield(builder, idDepAirfieldOffset);
    FlightPlan_Full.AddLegNum(builder, legNum);
    FlightPlan_Full.AddIdAircraft(builder, idAircraftOffset);
    FlightPlan_Full.AddIdSortie(builder, idSortieOffset);
    FlightPlan_Full.AddAmcMissionId(builder, amcMissionIdOffset);
    FlightPlan_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    FlightPlan_Full.AddId(builder, idOffset);
    FlightPlan_Full.AddDataMode(builder, dataMode);
    return FlightPlan_Full.EndFlightPlan_Full(builder);
  }

  public static void StartFlightPlan_Full(FlatBufferBuilder builder) { builder.StartTable(96); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddAmcMissionId(FlatBufferBuilder builder, StringOffset amcMissionIdOffset) { builder.AddOffset(2, amcMissionIdOffset.Value, 0); }
  public static void AddIdSortie(FlatBufferBuilder builder, StringOffset idSortieOffset) { builder.AddOffset(3, idSortieOffset.Value, 0); }
  public static void AddIdAircraft(FlatBufferBuilder builder, StringOffset idAircraftOffset) { builder.AddOffset(4, idAircraftOffset.Value, 0); }
  public static void AddLegNum(FlatBufferBuilder builder, int legNum) { builder.AddInt(5, legNum, 0); }
  public static void AddIdDepAirfield(FlatBufferBuilder builder, StringOffset idDepAirfieldOffset) { builder.AddOffset(6, idDepAirfieldOffset.Value, 0); }
  public static void AddDepAirfield(FlatBufferBuilder builder, StringOffset depAirfieldOffset) { builder.AddOffset(7, depAirfieldOffset.Value, 0); }
  public static void AddIdArrAirfield(FlatBufferBuilder builder, StringOffset idArrAirfieldOffset) { builder.AddOffset(8, idArrAirfieldOffset.Value, 0); }
  public static void AddArrAirfield(FlatBufferBuilder builder, StringOffset arrAirfieldOffset) { builder.AddOffset(9, arrAirfieldOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(10, externalIdOffset.Value, 0); }
  public static void AddGenTS(FlatBufferBuilder builder, StringOffset genTSOffset) { builder.AddOffset(11, genTSOffset.Value, 0); }
  public static void AddAircraftMDS(FlatBufferBuilder builder, StringOffset aircraftMDSOffset) { builder.AddOffset(12, aircraftMDSOffset.Value, 0); }
  public static void AddTailNumber(FlatBufferBuilder builder, StringOffset tailNumberOffset) { builder.AddOffset(13, tailNumberOffset.Value, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(14, callSignOffset.Value, 0); }
  public static void AddWxValidStart(FlatBufferBuilder builder, StringOffset wxValidStartOffset) { builder.AddOffset(15, wxValidStartOffset.Value, 0); }
  public static void AddWxValidEnd(FlatBufferBuilder builder, StringOffset wxValidEndOffset) { builder.AddOffset(16, wxValidEndOffset.Value, 0); }
  public static void AddEstDepTime(FlatBufferBuilder builder, StringOffset estDepTimeOffset) { builder.AddOffset(17, estDepTimeOffset.Value, 0); }
  public static void AddDragIndex(FlatBufferBuilder builder, double dragIndex) { builder.AddDouble(18, dragIndex, 0.0); }
  public static void AddFuelDegrade(FlatBufferBuilder builder, double fuelDegrade) { builder.AddDouble(19, fuelDegrade, 0.0); }
  public static void AddOpWeight(FlatBufferBuilder builder, double opWeight) { builder.AddDouble(20, opWeight, 0.0); }
  public static void AddMsnIndex(FlatBufferBuilder builder, double msnIndex) { builder.AddDouble(21, msnIndex, 0.0); }
  public static void AddRampFuel(FlatBufferBuilder builder, double rampFuel) { builder.AddDouble(22, rampFuel, 0.0); }
  public static void AddTaxiFuel(FlatBufferBuilder builder, double taxiFuel) { builder.AddDouble(23, taxiFuel, 0.0); }
  public static void AddTakeoffFuel(FlatBufferBuilder builder, double takeoffFuel) { builder.AddDouble(24, takeoffFuel, 0.0); }
  public static void AddClimbFuel(FlatBufferBuilder builder, double climbFuel) { builder.AddDouble(25, climbFuel, 0.0); }
  public static void AddClimbTime(FlatBufferBuilder builder, StringOffset climbTimeOffset) { builder.AddOffset(26, climbTimeOffset.Value, 0); }
  public static void AddHoldDownFuel(FlatBufferBuilder builder, double holdDownFuel) { builder.AddDouble(27, holdDownFuel, 0.0); }
  public static void AddTocIceFuel(FlatBufferBuilder builder, double tocIceFuel) { builder.AddDouble(28, tocIceFuel, 0.0); }
  public static void AddTocFuel(FlatBufferBuilder builder, double tocFuel) { builder.AddDouble(29, tocFuel, 0.0); }
  public static void AddEnrouteFuel(FlatBufferBuilder builder, double enrouteFuel) { builder.AddDouble(30, enrouteFuel, 0.0); }
  public static void AddEnrouteTime(FlatBufferBuilder builder, StringOffset enrouteTimeOffset) { builder.AddOffset(31, enrouteTimeOffset.Value, 0); }
  public static void AddThunderAvoidFuel(FlatBufferBuilder builder, double thunderAvoidFuel) { builder.AddDouble(32, thunderAvoidFuel, 0.0); }
  public static void AddTodIceFuel(FlatBufferBuilder builder, double todIceFuel) { builder.AddDouble(33, todIceFuel, 0.0); }
  public static void AddOpConditionFuel(FlatBufferBuilder builder, double opConditionFuel) { builder.AddDouble(34, opConditionFuel, 0.0); }
  public static void AddTodFuel(FlatBufferBuilder builder, double todFuel) { builder.AddDouble(35, todFuel, 0.0); }
  public static void AddEarlyDescentFuel(FlatBufferBuilder builder, double earlyDescentFuel) { builder.AddDouble(36, earlyDescentFuel, 0.0); }
  public static void AddArrIceFuel(FlatBufferBuilder builder, double arrIceFuel) { builder.AddDouble(37, arrIceFuel, 0.0); }
  public static void AddHoldFuel(FlatBufferBuilder builder, double holdFuel) { builder.AddDouble(38, holdFuel, 0.0); }
  public static void AddHoldTime(FlatBufferBuilder builder, StringOffset holdTimeOffset) { builder.AddOffset(39, holdTimeOffset.Value, 0); }
  public static void AddAppLandingFuel(FlatBufferBuilder builder, double appLandingFuel) { builder.AddDouble(40, appLandingFuel, 0.0); }
  public static void AddBurnedFuel(FlatBufferBuilder builder, double burnedFuel) { builder.AddDouble(41, burnedFuel, 0.0); }
  public static void AddLandingFuel(FlatBufferBuilder builder, double landingFuel) { builder.AddDouble(42, landingFuel, 0.0); }
  public static void AddMinDivertFuel(FlatBufferBuilder builder, double minDivertFuel) { builder.AddDouble(43, minDivertFuel, 0.0); }
  public static void AddArrAlternate1Fuel(FlatBufferBuilder builder, double arrAlternate1Fuel) { builder.AddDouble(44, arrAlternate1Fuel, 0.0); }
  public static void AddArrAlternate2Fuel(FlatBufferBuilder builder, double arrAlternate2Fuel) { builder.AddDouble(45, arrAlternate2Fuel, 0.0); }
  public static void AddContingencyFuel(FlatBufferBuilder builder, double contingencyFuel) { builder.AddDouble(46, contingencyFuel, 0.0); }
  public static void AddReserveFuel(FlatBufferBuilder builder, double reserveFuel) { builder.AddDouble(47, reserveFuel, 0.0); }
  public static void AddDepressFuel(FlatBufferBuilder builder, double depressFuel) { builder.AddDouble(48, depressFuel, 0.0); }
  public static void AddUnusableFuel(FlatBufferBuilder builder, double unusableFuel) { builder.AddDouble(49, unusableFuel, 0.0); }
  public static void AddUnidentExtraFuel(FlatBufferBuilder builder, double unidentExtraFuel) { builder.AddDouble(50, unidentExtraFuel, 0.0); }
  public static void AddIdentExtraFuel(FlatBufferBuilder builder, double identExtraFuel) { builder.AddDouble(51, identExtraFuel, 0.0); }
  public static void AddRemAlternate1Fuel(FlatBufferBuilder builder, double remAlternate1Fuel) { builder.AddDouble(52, remAlternate1Fuel, 0.0); }
  public static void AddRemAlternate2Fuel(FlatBufferBuilder builder, double remAlternate2Fuel) { builder.AddDouble(53, remAlternate2Fuel, 0.0); }
  public static void AddEnduranceTime(FlatBufferBuilder builder, StringOffset enduranceTimeOffset) { builder.AddOffset(54, enduranceTimeOffset.Value, 0); }
  public static void AddSid(FlatBufferBuilder builder, StringOffset sidOffset) { builder.AddOffset(55, sidOffset.Value, 0); }
  public static void AddStar(FlatBufferBuilder builder, StringOffset starOffset) { builder.AddOffset(56, starOffset.Value, 0); }
  public static void AddGpsRAIM(FlatBufferBuilder builder, StringOffset gpsRAIMOffset) { builder.AddOffset(57, gpsRAIMOffset.Value, 0); }
  public static void AddDepRunway(FlatBufferBuilder builder, StringOffset depRunwayOffset) { builder.AddOffset(58, depRunwayOffset.Value, 0); }
  public static void AddArrRunway(FlatBufferBuilder builder, StringOffset arrRunwayOffset) { builder.AddOffset(59, arrRunwayOffset.Value, 0); }
  public static void AddRouteString(FlatBufferBuilder builder, StringOffset routeStringOffset) { builder.AddOffset(60, routeStringOffset.Value, 0); }
  public static void AddCountryCodes(FlatBufferBuilder builder, VectorOffset countryCodesOffset) { builder.AddOffset(61, countryCodesOffset.Value, 0); }
  public static VectorOffset CreateCountryCodesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCountryCodesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountryCodesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCountryCodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCountryCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEtopsRating(FlatBufferBuilder builder, StringOffset etopsRatingOffset) { builder.AddOffset(62, etopsRatingOffset.Value, 0); }
  public static void AddEtopsAirfields(FlatBufferBuilder builder, VectorOffset etopsAirfieldsOffset) { builder.AddOffset(63, etopsAirfieldsOffset.Value, 0); }
  public static VectorOffset CreateEtopsAirfieldsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAirfieldsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAirfieldsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAirfieldsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEtopsAirfieldsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEtopsAltAirfields(FlatBufferBuilder builder, VectorOffset etopsAltAirfieldsOffset) { builder.AddOffset(64, etopsAltAirfieldsOffset.Value, 0); }
  public static VectorOffset CreateEtopsAltAirfieldsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAltAirfieldsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAltAirfieldsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtopsAltAirfieldsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEtopsAltAirfieldsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEtopsValWindow(FlatBufferBuilder builder, StringOffset etopsValWindowOffset) { builder.AddOffset(65, etopsValWindowOffset.Value, 0); }
  public static void AddPlannerRemark(FlatBufferBuilder builder, StringOffset plannerRemarkOffset) { builder.AddOffset(66, plannerRemarkOffset.Value, 0); }
  public static void AddCargoRemark(FlatBufferBuilder builder, StringOffset cargoRemarkOffset) { builder.AddOffset(67, cargoRemarkOffset.Value, 0); }
  public static void AddWindFac1(FlatBufferBuilder builder, double windFac1) { builder.AddDouble(68, windFac1, 0.0); }
  public static void AddWindFac2(FlatBufferBuilder builder, double windFac2) { builder.AddDouble(69, windFac2, 0.0); }
  public static void AddWindFacAvg(FlatBufferBuilder builder, double windFacAvg) { builder.AddDouble(70, windFacAvg, 0.0); }
  public static void AddAvgTempDev(FlatBufferBuilder builder, double avgTempDev) { builder.AddDouble(71, avgTempDev, 0.0); }
  public static void AddAtcAddresses(FlatBufferBuilder builder, VectorOffset atcAddressesOffset) { builder.AddOffset(72, atcAddressesOffset.Value, 0); }
  public static VectorOffset CreateAtcAddressesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAtcAddressesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAtcAddressesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAtcAddressesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAtcAddressesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOriginator(FlatBufferBuilder builder, StringOffset originatorOffset) { builder.AddOffset(73, originatorOffset.Value, 0); }
  public static void AddNumAircraft(FlatBufferBuilder builder, int numAircraft) { builder.AddInt(74, numAircraft, 0); }
  public static void AddFlightRules(FlatBufferBuilder builder, StringOffset flightRulesOffset) { builder.AddOffset(75, flightRulesOffset.Value, 0); }
  public static void AddFlightType(FlatBufferBuilder builder, StringOffset flightTypeOffset) { builder.AddOffset(76, flightTypeOffset.Value, 0); }
  public static void AddInitialCruiseSpeed(FlatBufferBuilder builder, StringOffset initialCruiseSpeedOffset) { builder.AddOffset(77, initialCruiseSpeedOffset.Value, 0); }
  public static void AddInitialFlightLevel(FlatBufferBuilder builder, StringOffset initialFlightLevelOffset) { builder.AddOffset(78, initialFlightLevelOffset.Value, 0); }
  public static void AddArrAlternate1(FlatBufferBuilder builder, StringOffset arrAlternate1Offset) { builder.AddOffset(79, arrAlternate1Offset.Value, 0); }
  public static void AddArrAlternate2(FlatBufferBuilder builder, StringOffset arrAlternate2Offset) { builder.AddOffset(80, arrAlternate2Offset.Value, 0); }
  public static void AddDepAlternate(FlatBufferBuilder builder, StringOffset depAlternateOffset) { builder.AddOffset(81, depAlternateOffset.Value, 0); }
  public static void AddWakeTurbCat(FlatBufferBuilder builder, StringOffset wakeTurbCatOffset) { builder.AddOffset(82, wakeTurbCatOffset.Value, 0); }
  public static void AddEquipment(FlatBufferBuilder builder, StringOffset equipmentOffset) { builder.AddOffset(83, equipmentOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(84, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(85, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(86, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(87, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(88, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(89, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(90, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, FlightPlan_Full_dataMode_Enum dataMode) { builder.AddSbyte(91, (sbyte)dataMode, 0); }
  public static void AddAirRefuelEvents(FlatBufferBuilder builder, VectorOffset airRefuelEventsOffset) { builder.AddOffset(92, airRefuelEventsOffset.Value, 0); }
  public static VectorOffset CreateAirRefuelEventsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAirRefuelEventsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirRefuelEventsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirRefuelEventsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAirRefuelEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlightPlanMessages(FlatBufferBuilder builder, VectorOffset flightPlanMessagesOffset) { builder.AddOffset(93, flightPlanMessagesOffset.Value, 0); }
  public static VectorOffset CreateFlightPlanMessagesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanMessagesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanMessagesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanMessagesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFlightPlanMessagesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlightPlanWaypoints(FlatBufferBuilder builder, VectorOffset flightPlanWaypointsOffset) { builder.AddOffset(94, flightPlanWaypointsOffset.Value, 0); }
  public static VectorOffset CreateFlightPlanWaypointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanWaypointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanWaypointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanWaypointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFlightPlanWaypointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlightPlanPointGroups(FlatBufferBuilder builder, VectorOffset flightPlanPointGroupsOffset) { builder.AddOffset(95, flightPlanPointGroupsOffset.Value, 0); }
  public static VectorOffset CreateFlightPlanPointGroupsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointGroupsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointGroupsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFlightPlanPointGroupsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFlightPlanPointGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FlightPlan_Full> EndFlightPlan_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlightPlan_Full>(o);
  }
  public static void FinishFlightPlan_FullBuffer(FlatBufferBuilder builder, Offset<FlightPlan_Full> offset) { builder.Finish(offset.Value, "FLIG"); }
  public static void FinishSizePrefixedFlightPlan_FullBuffer(FlatBufferBuilder builder, Offset<FlightPlan_Full> offset) { builder.FinishSizePrefixed(offset.Value, "FLIG"); }
  public FlightPlan_FullT UnPack() {
    var _o = new FlightPlan_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlightPlan_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.AmcMissionId = this.AmcMissionId;
    _o.IdSortie = this.IdSortie;
    _o.IdAircraft = this.IdAircraft;
    _o.LegNum = this.LegNum;
    _o.IdDepAirfield = this.IdDepAirfield;
    _o.DepAirfield = this.DepAirfield;
    _o.IdArrAirfield = this.IdArrAirfield;
    _o.ArrAirfield = this.ArrAirfield;
    _o.ExternalId = this.ExternalId;
    _o.GenTS = this.GenTS;
    _o.AircraftMDS = this.AircraftMDS;
    _o.TailNumber = this.TailNumber;
    _o.CallSign = this.CallSign;
    _o.WxValidStart = this.WxValidStart;
    _o.WxValidEnd = this.WxValidEnd;
    _o.EstDepTime = this.EstDepTime;
    _o.DragIndex = this.DragIndex;
    _o.FuelDegrade = this.FuelDegrade;
    _o.OpWeight = this.OpWeight;
    _o.MsnIndex = this.MsnIndex;
    _o.RampFuel = this.RampFuel;
    _o.TaxiFuel = this.TaxiFuel;
    _o.TakeoffFuel = this.TakeoffFuel;
    _o.ClimbFuel = this.ClimbFuel;
    _o.ClimbTime = this.ClimbTime;
    _o.HoldDownFuel = this.HoldDownFuel;
    _o.TocIceFuel = this.TocIceFuel;
    _o.TocFuel = this.TocFuel;
    _o.EnrouteFuel = this.EnrouteFuel;
    _o.EnrouteTime = this.EnrouteTime;
    _o.ThunderAvoidFuel = this.ThunderAvoidFuel;
    _o.TodIceFuel = this.TodIceFuel;
    _o.OpConditionFuel = this.OpConditionFuel;
    _o.TodFuel = this.TodFuel;
    _o.EarlyDescentFuel = this.EarlyDescentFuel;
    _o.ArrIceFuel = this.ArrIceFuel;
    _o.HoldFuel = this.HoldFuel;
    _o.HoldTime = this.HoldTime;
    _o.AppLandingFuel = this.AppLandingFuel;
    _o.BurnedFuel = this.BurnedFuel;
    _o.LandingFuel = this.LandingFuel;
    _o.MinDivertFuel = this.MinDivertFuel;
    _o.ArrAlternate1Fuel = this.ArrAlternate1Fuel;
    _o.ArrAlternate2Fuel = this.ArrAlternate2Fuel;
    _o.ContingencyFuel = this.ContingencyFuel;
    _o.ReserveFuel = this.ReserveFuel;
    _o.DepressFuel = this.DepressFuel;
    _o.UnusableFuel = this.UnusableFuel;
    _o.UnidentExtraFuel = this.UnidentExtraFuel;
    _o.IdentExtraFuel = this.IdentExtraFuel;
    _o.RemAlternate1Fuel = this.RemAlternate1Fuel;
    _o.RemAlternate2Fuel = this.RemAlternate2Fuel;
    _o.EnduranceTime = this.EnduranceTime;
    _o.Sid = this.Sid;
    _o.Star = this.Star;
    _o.GpsRAIM = this.GpsRAIM;
    _o.DepRunway = this.DepRunway;
    _o.ArrRunway = this.ArrRunway;
    _o.RouteString = this.RouteString;
    _o.CountryCodes = new List<string>();
    for (var _j = 0; _j < this.CountryCodesLength; ++_j) {_o.CountryCodes.Add(this.CountryCodes(_j));}
    _o.EtopsRating = this.EtopsRating;
    _o.EtopsAirfields = new List<string>();
    for (var _j = 0; _j < this.EtopsAirfieldsLength; ++_j) {_o.EtopsAirfields.Add(this.EtopsAirfields(_j));}
    _o.EtopsAltAirfields = new List<string>();
    for (var _j = 0; _j < this.EtopsAltAirfieldsLength; ++_j) {_o.EtopsAltAirfields.Add(this.EtopsAltAirfields(_j));}
    _o.EtopsValWindow = this.EtopsValWindow;
    _o.PlannerRemark = this.PlannerRemark;
    _o.CargoRemark = this.CargoRemark;
    _o.WindFac1 = this.WindFac1;
    _o.WindFac2 = this.WindFac2;
    _o.WindFacAvg = this.WindFacAvg;
    _o.AvgTempDev = this.AvgTempDev;
    _o.AtcAddresses = new List<string>();
    for (var _j = 0; _j < this.AtcAddressesLength; ++_j) {_o.AtcAddresses.Add(this.AtcAddresses(_j));}
    _o.Originator = this.Originator;
    _o.NumAircraft = this.NumAircraft;
    _o.FlightRules = this.FlightRules;
    _o.FlightType = this.FlightType;
    _o.InitialCruiseSpeed = this.InitialCruiseSpeed;
    _o.InitialFlightLevel = this.InitialFlightLevel;
    _o.ArrAlternate1 = this.ArrAlternate1;
    _o.ArrAlternate2 = this.ArrAlternate2;
    _o.DepAlternate = this.DepAlternate;
    _o.WakeTurbCat = this.WakeTurbCat;
    _o.Equipment = this.Equipment;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.AirRefuelEvents = new List<string>();
    for (var _j = 0; _j < this.AirRefuelEventsLength; ++_j) {_o.AirRefuelEvents.Add(this.AirRefuelEvents(_j));}
    _o.FlightPlanMessages = new List<string>();
    for (var _j = 0; _j < this.FlightPlanMessagesLength; ++_j) {_o.FlightPlanMessages.Add(this.FlightPlanMessages(_j));}
    _o.FlightPlanWaypoints = new List<string>();
    for (var _j = 0; _j < this.FlightPlanWaypointsLength; ++_j) {_o.FlightPlanWaypoints.Add(this.FlightPlanWaypoints(_j));}
    _o.FlightPlanPointGroups = new List<string>();
    for (var _j = 0; _j < this.FlightPlanPointGroupsLength; ++_j) {_o.FlightPlanPointGroups.Add(this.FlightPlanPointGroups(_j));}
  }
  public static Offset<FlightPlan_Full> Pack(FlatBufferBuilder builder, FlightPlan_FullT _o) {
    if (_o == null) return default(Offset<FlightPlan_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _amcMissionId = _o.AmcMissionId == null ? default(StringOffset) : builder.CreateString(_o.AmcMissionId);
    var _idSortie = _o.IdSortie == null ? default(StringOffset) : builder.CreateString(_o.IdSortie);
    var _idAircraft = _o.IdAircraft == null ? default(StringOffset) : builder.CreateString(_o.IdAircraft);
    var _idDepAirfield = _o.IdDepAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdDepAirfield);
    var _depAirfield = _o.DepAirfield == null ? default(StringOffset) : builder.CreateString(_o.DepAirfield);
    var _idArrAirfield = _o.IdArrAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdArrAirfield);
    var _arrAirfield = _o.ArrAirfield == null ? default(StringOffset) : builder.CreateString(_o.ArrAirfield);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _genTS = _o.GenTS == null ? default(StringOffset) : builder.CreateString(_o.GenTS);
    var _aircraftMDS = _o.AircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.AircraftMDS);
    var _tailNumber = _o.TailNumber == null ? default(StringOffset) : builder.CreateString(_o.TailNumber);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _wxValidStart = _o.WxValidStart == null ? default(StringOffset) : builder.CreateString(_o.WxValidStart);
    var _wxValidEnd = _o.WxValidEnd == null ? default(StringOffset) : builder.CreateString(_o.WxValidEnd);
    var _estDepTime = _o.EstDepTime == null ? default(StringOffset) : builder.CreateString(_o.EstDepTime);
    var _climbTime = _o.ClimbTime == null ? default(StringOffset) : builder.CreateString(_o.ClimbTime);
    var _enrouteTime = _o.EnrouteTime == null ? default(StringOffset) : builder.CreateString(_o.EnrouteTime);
    var _holdTime = _o.HoldTime == null ? default(StringOffset) : builder.CreateString(_o.HoldTime);
    var _enduranceTime = _o.EnduranceTime == null ? default(StringOffset) : builder.CreateString(_o.EnduranceTime);
    var _sid = _o.Sid == null ? default(StringOffset) : builder.CreateString(_o.Sid);
    var _star = _o.Star == null ? default(StringOffset) : builder.CreateString(_o.Star);
    var _gpsRAIM = _o.GpsRAIM == null ? default(StringOffset) : builder.CreateString(_o.GpsRAIM);
    var _depRunway = _o.DepRunway == null ? default(StringOffset) : builder.CreateString(_o.DepRunway);
    var _arrRunway = _o.ArrRunway == null ? default(StringOffset) : builder.CreateString(_o.ArrRunway);
    var _routeString = _o.RouteString == null ? default(StringOffset) : builder.CreateString(_o.RouteString);
    var _countryCodes = default(VectorOffset);
    if (_o.CountryCodes != null) {
      var __countryCodes = new StringOffset[_o.CountryCodes.Count];
      for (var _j = 0; _j < __countryCodes.Length; ++_j) { __countryCodes[_j] = builder.CreateString(_o.CountryCodes[_j]); }
      _countryCodes = CreateCountryCodesVector(builder, __countryCodes);
    }
    var _etopsRating = _o.EtopsRating == null ? default(StringOffset) : builder.CreateString(_o.EtopsRating);
    var _etopsAirfields = default(VectorOffset);
    if (_o.EtopsAirfields != null) {
      var __etopsAirfields = new StringOffset[_o.EtopsAirfields.Count];
      for (var _j = 0; _j < __etopsAirfields.Length; ++_j) { __etopsAirfields[_j] = builder.CreateString(_o.EtopsAirfields[_j]); }
      _etopsAirfields = CreateEtopsAirfieldsVector(builder, __etopsAirfields);
    }
    var _etopsAltAirfields = default(VectorOffset);
    if (_o.EtopsAltAirfields != null) {
      var __etopsAltAirfields = new StringOffset[_o.EtopsAltAirfields.Count];
      for (var _j = 0; _j < __etopsAltAirfields.Length; ++_j) { __etopsAltAirfields[_j] = builder.CreateString(_o.EtopsAltAirfields[_j]); }
      _etopsAltAirfields = CreateEtopsAltAirfieldsVector(builder, __etopsAltAirfields);
    }
    var _etopsValWindow = _o.EtopsValWindow == null ? default(StringOffset) : builder.CreateString(_o.EtopsValWindow);
    var _plannerRemark = _o.PlannerRemark == null ? default(StringOffset) : builder.CreateString(_o.PlannerRemark);
    var _cargoRemark = _o.CargoRemark == null ? default(StringOffset) : builder.CreateString(_o.CargoRemark);
    var _atcAddresses = default(VectorOffset);
    if (_o.AtcAddresses != null) {
      var __atcAddresses = new StringOffset[_o.AtcAddresses.Count];
      for (var _j = 0; _j < __atcAddresses.Length; ++_j) { __atcAddresses[_j] = builder.CreateString(_o.AtcAddresses[_j]); }
      _atcAddresses = CreateAtcAddressesVector(builder, __atcAddresses);
    }
    var _originator = _o.Originator == null ? default(StringOffset) : builder.CreateString(_o.Originator);
    var _flightRules = _o.FlightRules == null ? default(StringOffset) : builder.CreateString(_o.FlightRules);
    var _flightType = _o.FlightType == null ? default(StringOffset) : builder.CreateString(_o.FlightType);
    var _initialCruiseSpeed = _o.InitialCruiseSpeed == null ? default(StringOffset) : builder.CreateString(_o.InitialCruiseSpeed);
    var _initialFlightLevel = _o.InitialFlightLevel == null ? default(StringOffset) : builder.CreateString(_o.InitialFlightLevel);
    var _arrAlternate1 = _o.ArrAlternate1 == null ? default(StringOffset) : builder.CreateString(_o.ArrAlternate1);
    var _arrAlternate2 = _o.ArrAlternate2 == null ? default(StringOffset) : builder.CreateString(_o.ArrAlternate2);
    var _depAlternate = _o.DepAlternate == null ? default(StringOffset) : builder.CreateString(_o.DepAlternate);
    var _wakeTurbCat = _o.WakeTurbCat == null ? default(StringOffset) : builder.CreateString(_o.WakeTurbCat);
    var _equipment = _o.Equipment == null ? default(StringOffset) : builder.CreateString(_o.Equipment);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _airRefuelEvents = default(VectorOffset);
    if (_o.AirRefuelEvents != null) {
      var __airRefuelEvents = new StringOffset[_o.AirRefuelEvents.Count];
      for (var _j = 0; _j < __airRefuelEvents.Length; ++_j) { __airRefuelEvents[_j] = builder.CreateString(_o.AirRefuelEvents[_j]); }
      _airRefuelEvents = CreateAirRefuelEventsVector(builder, __airRefuelEvents);
    }
    var _flightPlanMessages = default(VectorOffset);
    if (_o.FlightPlanMessages != null) {
      var __flightPlanMessages = new StringOffset[_o.FlightPlanMessages.Count];
      for (var _j = 0; _j < __flightPlanMessages.Length; ++_j) { __flightPlanMessages[_j] = builder.CreateString(_o.FlightPlanMessages[_j]); }
      _flightPlanMessages = CreateFlightPlanMessagesVector(builder, __flightPlanMessages);
    }
    var _flightPlanWaypoints = default(VectorOffset);
    if (_o.FlightPlanWaypoints != null) {
      var __flightPlanWaypoints = new StringOffset[_o.FlightPlanWaypoints.Count];
      for (var _j = 0; _j < __flightPlanWaypoints.Length; ++_j) { __flightPlanWaypoints[_j] = builder.CreateString(_o.FlightPlanWaypoints[_j]); }
      _flightPlanWaypoints = CreateFlightPlanWaypointsVector(builder, __flightPlanWaypoints);
    }
    var _flightPlanPointGroups = default(VectorOffset);
    if (_o.FlightPlanPointGroups != null) {
      var __flightPlanPointGroups = new StringOffset[_o.FlightPlanPointGroups.Count];
      for (var _j = 0; _j < __flightPlanPointGroups.Length; ++_j) { __flightPlanPointGroups[_j] = builder.CreateString(_o.FlightPlanPointGroups[_j]); }
      _flightPlanPointGroups = CreateFlightPlanPointGroupsVector(builder, __flightPlanPointGroups);
    }
    return CreateFlightPlan_Full(
      builder,
      _id,
      _classificationMarking,
      _amcMissionId,
      _idSortie,
      _idAircraft,
      _o.LegNum,
      _idDepAirfield,
      _depAirfield,
      _idArrAirfield,
      _arrAirfield,
      _externalId,
      _genTS,
      _aircraftMDS,
      _tailNumber,
      _callSign,
      _wxValidStart,
      _wxValidEnd,
      _estDepTime,
      _o.DragIndex,
      _o.FuelDegrade,
      _o.OpWeight,
      _o.MsnIndex,
      _o.RampFuel,
      _o.TaxiFuel,
      _o.TakeoffFuel,
      _o.ClimbFuel,
      _climbTime,
      _o.HoldDownFuel,
      _o.TocIceFuel,
      _o.TocFuel,
      _o.EnrouteFuel,
      _enrouteTime,
      _o.ThunderAvoidFuel,
      _o.TodIceFuel,
      _o.OpConditionFuel,
      _o.TodFuel,
      _o.EarlyDescentFuel,
      _o.ArrIceFuel,
      _o.HoldFuel,
      _holdTime,
      _o.AppLandingFuel,
      _o.BurnedFuel,
      _o.LandingFuel,
      _o.MinDivertFuel,
      _o.ArrAlternate1Fuel,
      _o.ArrAlternate2Fuel,
      _o.ContingencyFuel,
      _o.ReserveFuel,
      _o.DepressFuel,
      _o.UnusableFuel,
      _o.UnidentExtraFuel,
      _o.IdentExtraFuel,
      _o.RemAlternate1Fuel,
      _o.RemAlternate2Fuel,
      _enduranceTime,
      _sid,
      _star,
      _gpsRAIM,
      _depRunway,
      _arrRunway,
      _routeString,
      _countryCodes,
      _etopsRating,
      _etopsAirfields,
      _etopsAltAirfields,
      _etopsValWindow,
      _plannerRemark,
      _cargoRemark,
      _o.WindFac1,
      _o.WindFac2,
      _o.WindFacAvg,
      _o.AvgTempDev,
      _atcAddresses,
      _originator,
      _o.NumAircraft,
      _flightRules,
      _flightType,
      _initialCruiseSpeed,
      _initialFlightLevel,
      _arrAlternate1,
      _arrAlternate2,
      _depAlternate,
      _wakeTurbCat,
      _equipment,
      _notes,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _airRefuelEvents,
      _flightPlanMessages,
      _flightPlanWaypoints,
      _flightPlanPointGroups);
  }
}

public class FlightPlan_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string AmcMissionId { get; set; }
  public string IdSortie { get; set; }
  public string IdAircraft { get; set; }
  public int LegNum { get; set; }
  public string IdDepAirfield { get; set; }
  public string DepAirfield { get; set; }
  public string IdArrAirfield { get; set; }
  public string ArrAirfield { get; set; }
  public string ExternalId { get; set; }
  public string GenTS { get; set; }
  public string AircraftMDS { get; set; }
  public string TailNumber { get; set; }
  public string CallSign { get; set; }
  public string WxValidStart { get; set; }
  public string WxValidEnd { get; set; }
  public string EstDepTime { get; set; }
  public double DragIndex { get; set; }
  public double FuelDegrade { get; set; }
  public double OpWeight { get; set; }
  public double MsnIndex { get; set; }
  public double RampFuel { get; set; }
  public double TaxiFuel { get; set; }
  public double TakeoffFuel { get; set; }
  public double ClimbFuel { get; set; }
  public string ClimbTime { get; set; }
  public double HoldDownFuel { get; set; }
  public double TocIceFuel { get; set; }
  public double TocFuel { get; set; }
  public double EnrouteFuel { get; set; }
  public string EnrouteTime { get; set; }
  public double ThunderAvoidFuel { get; set; }
  public double TodIceFuel { get; set; }
  public double OpConditionFuel { get; set; }
  public double TodFuel { get; set; }
  public double EarlyDescentFuel { get; set; }
  public double ArrIceFuel { get; set; }
  public double HoldFuel { get; set; }
  public string HoldTime { get; set; }
  public double AppLandingFuel { get; set; }
  public double BurnedFuel { get; set; }
  public double LandingFuel { get; set; }
  public double MinDivertFuel { get; set; }
  public double ArrAlternate1Fuel { get; set; }
  public double ArrAlternate2Fuel { get; set; }
  public double ContingencyFuel { get; set; }
  public double ReserveFuel { get; set; }
  public double DepressFuel { get; set; }
  public double UnusableFuel { get; set; }
  public double UnidentExtraFuel { get; set; }
  public double IdentExtraFuel { get; set; }
  public double RemAlternate1Fuel { get; set; }
  public double RemAlternate2Fuel { get; set; }
  public string EnduranceTime { get; set; }
  public string Sid { get; set; }
  public string Star { get; set; }
  public string GpsRAIM { get; set; }
  public string DepRunway { get; set; }
  public string ArrRunway { get; set; }
  public string RouteString { get; set; }
  public List<string> CountryCodes { get; set; }
  public string EtopsRating { get; set; }
  public List<string> EtopsAirfields { get; set; }
  public List<string> EtopsAltAirfields { get; set; }
  public string EtopsValWindow { get; set; }
  public string PlannerRemark { get; set; }
  public string CargoRemark { get; set; }
  public double WindFac1 { get; set; }
  public double WindFac2 { get; set; }
  public double WindFacAvg { get; set; }
  public double AvgTempDev { get; set; }
  public List<string> AtcAddresses { get; set; }
  public string Originator { get; set; }
  public int NumAircraft { get; set; }
  public string FlightRules { get; set; }
  public string FlightType { get; set; }
  public string InitialCruiseSpeed { get; set; }
  public string InitialFlightLevel { get; set; }
  public string ArrAlternate1 { get; set; }
  public string ArrAlternate2 { get; set; }
  public string DepAlternate { get; set; }
  public string WakeTurbCat { get; set; }
  public string Equipment { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public FlightPlan_Full_dataMode_Enum DataMode { get; set; }
  public List<string> AirRefuelEvents { get; set; }
  public List<string> FlightPlanMessages { get; set; }
  public List<string> FlightPlanWaypoints { get; set; }
  public List<string> FlightPlanPointGroups { get; set; }

  public FlightPlan_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.AmcMissionId = null;
    this.IdSortie = null;
    this.IdAircraft = null;
    this.LegNum = 0;
    this.IdDepAirfield = null;
    this.DepAirfield = null;
    this.IdArrAirfield = null;
    this.ArrAirfield = null;
    this.ExternalId = null;
    this.GenTS = null;
    this.AircraftMDS = null;
    this.TailNumber = null;
    this.CallSign = null;
    this.WxValidStart = null;
    this.WxValidEnd = null;
    this.EstDepTime = null;
    this.DragIndex = 0.0;
    this.FuelDegrade = 0.0;
    this.OpWeight = 0.0;
    this.MsnIndex = 0.0;
    this.RampFuel = 0.0;
    this.TaxiFuel = 0.0;
    this.TakeoffFuel = 0.0;
    this.ClimbFuel = 0.0;
    this.ClimbTime = null;
    this.HoldDownFuel = 0.0;
    this.TocIceFuel = 0.0;
    this.TocFuel = 0.0;
    this.EnrouteFuel = 0.0;
    this.EnrouteTime = null;
    this.ThunderAvoidFuel = 0.0;
    this.TodIceFuel = 0.0;
    this.OpConditionFuel = 0.0;
    this.TodFuel = 0.0;
    this.EarlyDescentFuel = 0.0;
    this.ArrIceFuel = 0.0;
    this.HoldFuel = 0.0;
    this.HoldTime = null;
    this.AppLandingFuel = 0.0;
    this.BurnedFuel = 0.0;
    this.LandingFuel = 0.0;
    this.MinDivertFuel = 0.0;
    this.ArrAlternate1Fuel = 0.0;
    this.ArrAlternate2Fuel = 0.0;
    this.ContingencyFuel = 0.0;
    this.ReserveFuel = 0.0;
    this.DepressFuel = 0.0;
    this.UnusableFuel = 0.0;
    this.UnidentExtraFuel = 0.0;
    this.IdentExtraFuel = 0.0;
    this.RemAlternate1Fuel = 0.0;
    this.RemAlternate2Fuel = 0.0;
    this.EnduranceTime = null;
    this.Sid = null;
    this.Star = null;
    this.GpsRAIM = null;
    this.DepRunway = null;
    this.ArrRunway = null;
    this.RouteString = null;
    this.CountryCodes = null;
    this.EtopsRating = null;
    this.EtopsAirfields = null;
    this.EtopsAltAirfields = null;
    this.EtopsValWindow = null;
    this.PlannerRemark = null;
    this.CargoRemark = null;
    this.WindFac1 = 0.0;
    this.WindFac2 = 0.0;
    this.WindFacAvg = 0.0;
    this.AvgTempDev = 0.0;
    this.AtcAddresses = null;
    this.Originator = null;
    this.NumAircraft = 0;
    this.FlightRules = null;
    this.FlightType = null;
    this.InitialCruiseSpeed = null;
    this.InitialFlightLevel = null;
    this.ArrAlternate1 = null;
    this.ArrAlternate2 = null;
    this.DepAlternate = null;
    this.WakeTurbCat = null;
    this.Equipment = null;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = FlightPlan_Full_dataMode_Enum.REAL;
    this.AirRefuelEvents = null;
    this.FlightPlanMessages = null;
    this.FlightPlanWaypoints = null;
    this.FlightPlanPointGroups = null;
  }
  public static FlightPlan_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return FlightPlan_Full.GetRootAsFlightPlan_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FlightPlan_Full.FinishFlightPlan_FullBuffer(fbb, FlightPlan_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class FlightPlan_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*AmcMissionId*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSortie*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdAircraft*/, false)
      && verifier.VerifyField(tablePos, 14 /*LegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*IdDepAirfield*/, false)
      && verifier.VerifyString(tablePos, 18 /*DepAirfield*/, false)
      && verifier.VerifyString(tablePos, 20 /*IdArrAirfield*/, false)
      && verifier.VerifyString(tablePos, 22 /*ArrAirfield*/, false)
      && verifier.VerifyString(tablePos, 24 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 26 /*GenTS*/, false)
      && verifier.VerifyString(tablePos, 28 /*AircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 30 /*TailNumber*/, false)
      && verifier.VerifyString(tablePos, 32 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 34 /*WxValidStart*/, false)
      && verifier.VerifyString(tablePos, 36 /*WxValidEnd*/, false)
      && verifier.VerifyString(tablePos, 38 /*EstDepTime*/, false)
      && verifier.VerifyField(tablePos, 40 /*DragIndex*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*FuelDegrade*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*OpWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*MsnIndex*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*RampFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*TaxiFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*TakeoffFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*ClimbFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*ClimbTime*/, false)
      && verifier.VerifyField(tablePos, 58 /*HoldDownFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*TocIceFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*TocFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*EnrouteFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 66 /*EnrouteTime*/, false)
      && verifier.VerifyField(tablePos, 68 /*ThunderAvoidFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*TodIceFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*OpConditionFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*TodFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*EarlyDescentFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*ArrIceFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*HoldFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 82 /*HoldTime*/, false)
      && verifier.VerifyField(tablePos, 84 /*AppLandingFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*BurnedFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*LandingFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*MinDivertFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*ArrAlternate1Fuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*ArrAlternate2Fuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*ContingencyFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*ReserveFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*DepressFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*UnusableFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*UnidentExtraFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*IdentExtraFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*RemAlternate1Fuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*RemAlternate2Fuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 112 /*EnduranceTime*/, false)
      && verifier.VerifyString(tablePos, 114 /*Sid*/, false)
      && verifier.VerifyString(tablePos, 116 /*Star*/, false)
      && verifier.VerifyString(tablePos, 118 /*GpsRAIM*/, false)
      && verifier.VerifyString(tablePos, 120 /*DepRunway*/, false)
      && verifier.VerifyString(tablePos, 122 /*ArrRunway*/, false)
      && verifier.VerifyString(tablePos, 124 /*RouteString*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 126 /*CountryCodes*/, false)
      && verifier.VerifyString(tablePos, 128 /*EtopsRating*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 130 /*EtopsAirfields*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 132 /*EtopsAltAirfields*/, false)
      && verifier.VerifyString(tablePos, 134 /*EtopsValWindow*/, false)
      && verifier.VerifyString(tablePos, 136 /*PlannerRemark*/, false)
      && verifier.VerifyString(tablePos, 138 /*CargoRemark*/, false)
      && verifier.VerifyField(tablePos, 140 /*WindFac1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*WindFac2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*WindFacAvg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*AvgTempDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 148 /*AtcAddresses*/, false)
      && verifier.VerifyString(tablePos, 150 /*Originator*/, false)
      && verifier.VerifyField(tablePos, 152 /*NumAircraft*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 154 /*FlightRules*/, false)
      && verifier.VerifyString(tablePos, 156 /*FlightType*/, false)
      && verifier.VerifyString(tablePos, 158 /*InitialCruiseSpeed*/, false)
      && verifier.VerifyString(tablePos, 160 /*InitialFlightLevel*/, false)
      && verifier.VerifyString(tablePos, 162 /*ArrAlternate1*/, false)
      && verifier.VerifyString(tablePos, 164 /*ArrAlternate2*/, false)
      && verifier.VerifyString(tablePos, 166 /*DepAlternate*/, false)
      && verifier.VerifyString(tablePos, 168 /*WakeTurbCat*/, false)
      && verifier.VerifyString(tablePos, 170 /*Equipment*/, false)
      && verifier.VerifyString(tablePos, 172 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 174 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 176 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 178 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 180 /*Source*/, false)
      && verifier.VerifyString(tablePos, 182 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 184 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 186 /*DataMode*/, 1 /*FlightPlan_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 188 /*AirRefuelEvents*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 190 /*FlightPlanMessages*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 192 /*FlightPlanWaypoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 194 /*FlightPlanPointGroups*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
