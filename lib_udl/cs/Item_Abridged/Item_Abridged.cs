// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// No description available.
public struct Item_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Item_Abridged GetRootAsItem_Abridged(ByteBuffer _bb) { return GetRootAsItem_Abridged(_bb, new Item_Abridged()); }
  public static Item_Abridged GetRootAsItem_Abridged(ByteBuffer _bb, Item_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Item_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ITEM"); }
  public static bool VerifyItem_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ITEM", false, Item_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Item_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The UDL ID of the air load plan this item is associated with.
  /// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAirLoadPlan { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAirLoadPlanBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdAirLoadPlanBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdAirLoadPlanArray() { return __p.__vector_as_array<byte>(8); }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
  /// Example: /// Example: 12345ABCD
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string ScanCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScanCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetScanCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetScanCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ScGenTool { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScGenToolBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetScGenToolBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetScGenToolArray() { return __p.__vector_as_array<byte>(12); }
  /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
  /// Example: /// Example: PALLET
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CargoType { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCargoTypeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCargoTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCargoTypeArray() { return __p.__vector_as_array<byte>(16); }
  /// Name of the item. Applicable for equipment and cargo item types only.
  /// Example: /// Example: Product Name
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string Name { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(18); }
  /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
  /// Example: /// Example: RMS
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Destination { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDestinationBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDestinationBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDestinationArray() { return __p.__vector_as_array<byte>(20); }
  /// The departure code or location where this item has left or is leaving.
  /// Example: /// Example: CHS
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Departure { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepartureBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDepartureBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDepartureArray() { return __p.__vector_as_array<byte>(22); }
  /// The name of the unit receiving this item.
  /// Example: /// Example: 50 SBN
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string ReceivingUnit { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceivingUnitBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetReceivingUnitBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetReceivingUnitArray() { return __p.__vector_as_array<byte>(24); }
  /// The military branch receiving this item.
  /// Example: /// Example: Air Force
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ReceivingBranch { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceivingBranchBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetReceivingBranchBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetReceivingBranchArray() { return __p.__vector_as_array<byte>(26); }
  /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2023-03-13
  /// Constraints: No constraints specified.
  public string LastArrDate { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastArrDateBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLastArrDateBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLastArrDateArray() { return __p.__vector_as_array<byte>(28); }
  /// The unit line number of this item.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Uln { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUlnBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetUlnBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetUlnArray() { return __p.__vector_as_array<byte>(30); }
  /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
  /// Example: /// Example: 5443.335
  /// Constraints: No constraints specified.
  public double Weight { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-13T16:06:00.123Z
  /// Constraints: No constraints specified.
  public string WeightTS { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeightTSBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetWeightTSBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetWeightTSArray() { return __p.__vector_as_array<byte>(34); }
  /// The classification code of the commodity or group of commodities.
  /// Example: /// Example: 2304116
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string CommodityCode { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommodityCodeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCommodityCodeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCommodityCodeArray() { return __p.__vector_as_array<byte>(36); }
  /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
  /// Example: /// Example: STCC
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CommoditySys { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommoditySysBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCommoditySysBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCommoditySysArray() { return __p.__vector_as_array<byte>(38); }
  /// The code denoting the type of material item.
  /// Example: /// Example: 530500234
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ProductCode { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductCodeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetProductCodeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetProductCodeArray() { return __p.__vector_as_array<byte>(40); }
  /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
  /// Example: /// Example: NSN
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ProductSys { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductSysBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetProductSysBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetProductSysArray() { return __p.__vector_as_array<byte>(42); }
  /// Width of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Width { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Length of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Length { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Height { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The volume of the item, in cubic meters. Applicable for cargo item types only.
  /// Example: /// Example: 7.8902
  /// Constraints: No constraints specified.
  public double Volume { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
  /// Example: /// Example: 112.014
  /// Constraints: No constraints specified.
  public double Cg { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 412.1
  /// Constraints: No constraints specified.
  public double Fs { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  public double CenterlineOffset { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
  /// Example: /// Example: 4000.1
  /// Constraints: No constraints specified.
  public double Moment { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Airdrop { get { int o = __p.__offset(60); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Transportation Control Number of the cargo. Applicable for cargo item types only.
  /// Example: /// Example: M1358232245912XXX
  /// Constraints: Minimum length = 0, Maximum length = 17
  public string Tcn { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTcnBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetTcnBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetTcnArray() { return __p.__vector_as_array<byte>(62); }
  /// Array of UN hazard classes or division codes that apply to this item.
  /// Example: /// Example: [1.1, 1.2]
  /// Constraints: No constraints specified.
  public string HazCodes(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HazCodesLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Net explosive weight of the item, in kilograms.
  /// Example: /// Example: 51.437
  /// Constraints: No constraints specified.
  public double NetExpWt { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating this item acts as a container and contains additional items.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Container { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of tracking identifiers that are contained within this item.
  /// Example: /// Example: ['2UJ8843K', '745YV1T65']
  /// Constraints: No constraints specified.
  public string ItemContains(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ItemContainsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumPalletPos { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// United States Distinguished Visitor Code, only applicable to people.
  /// Example: /// Example: DV-2
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string DvCode { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDvCodeBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetDvCodeBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetDvCodeArray() { return __p.__vector_as_array<byte>(74); }
  /// Optional notes or comments about this item.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(76); }
  /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  public string Keys(int j) { int o = __p.__offset(78); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int KeysLength { get { int o = __p.__offset(78); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  public string Values(int j) { int o = __p.__offset(80); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ValuesLength { get { int o = __p.__offset(80); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
  /// Example: /// Example: Alt Data Format
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string AltDataFormat { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltDataFormatBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetAltDataFormatBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetAltDataFormatArray() { return __p.__vector_as_array<byte>(82); }
  /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
  /// Example: /// Example: Accepting System
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string AccSystem { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAccSystemBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetAccSystemBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetAccSystemArray() { return __p.__vector_as_array<byte>(84); }
  /// Additional data required to find this item in the accepting system.
  /// Example: /// Example: Accepting System Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string AccSysNotes { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAccSysNotesBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetAccSysNotesBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetAccSysNotesArray() { return __p.__vector_as_array<byte>(86); }
  /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
  /// Example: /// Example: ['System key1', 'System key2']
  /// Constraints: No constraints specified.
  public string AccSysKeys(int j) { int o = __p.__offset(88); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AccSysKeysLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
  /// Example: /// Example: ['System value1', 'System value2']
  /// Constraints: No constraints specified.
  public string AccSysValues(int j) { int o = __p.__offset(90); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AccSysValuesLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(92); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(94); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(96); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(98); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(100); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Item_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(104); return o != 0 ? (Item_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Item_Abridged_dataMode_Enum.REAL; } }

  public static Offset<Item_Abridged> CreateItem_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idAirLoadPlanOffset = default(StringOffset),
      StringOffset scanCodeOffset = default(StringOffset),
      StringOffset scGenToolOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset cargoTypeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset destinationOffset = default(StringOffset),
      StringOffset departureOffset = default(StringOffset),
      StringOffset receivingUnitOffset = default(StringOffset),
      StringOffset receivingBranchOffset = default(StringOffset),
      StringOffset lastArrDateOffset = default(StringOffset),
      StringOffset ulnOffset = default(StringOffset),
      double weight = 0.0,
      StringOffset weightTSOffset = default(StringOffset),
      StringOffset commodityCodeOffset = default(StringOffset),
      StringOffset commoditySysOffset = default(StringOffset),
      StringOffset productCodeOffset = default(StringOffset),
      StringOffset productSysOffset = default(StringOffset),
      double width = 0.0,
      double length = 0.0,
      double height = 0.0,
      double volume = 0.0,
      double cg = 0.0,
      double fs = 0.0,
      double centerlineOffset = 0.0,
      double moment = 0.0,
      bool airdrop = false,
      StringOffset tcnOffset = default(StringOffset),
      VectorOffset hazCodesOffset = default(VectorOffset),
      double netExpWt = 0.0,
      bool container = false,
      VectorOffset itemContainsOffset = default(VectorOffset),
      int numPalletPos = 0,
      StringOffset dvCodeOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      VectorOffset keysOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset),
      StringOffset altDataFormatOffset = default(StringOffset),
      StringOffset accSystemOffset = default(StringOffset),
      StringOffset accSysNotesOffset = default(StringOffset),
      VectorOffset accSysKeysOffset = default(VectorOffset),
      VectorOffset accSysValuesOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Item_Abridged_dataMode_Enum dataMode = Item_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(51);
    Item_Abridged.AddNetExpWt(builder, netExpWt);
    Item_Abridged.AddMoment(builder, moment);
    Item_Abridged.AddCenterlineOffset(builder, centerlineOffset);
    Item_Abridged.AddFs(builder, fs);
    Item_Abridged.AddCg(builder, cg);
    Item_Abridged.AddVolume(builder, volume);
    Item_Abridged.AddHeight(builder, height);
    Item_Abridged.AddLength(builder, length);
    Item_Abridged.AddWidth(builder, width);
    Item_Abridged.AddWeight(builder, weight);
    Item_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Item_Abridged.AddOrigin(builder, originOffset);
    Item_Abridged.AddSource(builder, sourceOffset);
    Item_Abridged.AddSourceDL(builder, sourceDLOffset);
    Item_Abridged.AddCreatedBy(builder, createdByOffset);
    Item_Abridged.AddCreatedAt(builder, createdAtOffset);
    Item_Abridged.AddAccSysValues(builder, accSysValuesOffset);
    Item_Abridged.AddAccSysKeys(builder, accSysKeysOffset);
    Item_Abridged.AddAccSysNotes(builder, accSysNotesOffset);
    Item_Abridged.AddAccSystem(builder, accSystemOffset);
    Item_Abridged.AddAltDataFormat(builder, altDataFormatOffset);
    Item_Abridged.AddValues(builder, valuesOffset);
    Item_Abridged.AddKeys(builder, keysOffset);
    Item_Abridged.AddNotes(builder, notesOffset);
    Item_Abridged.AddDvCode(builder, dvCodeOffset);
    Item_Abridged.AddNumPalletPos(builder, numPalletPos);
    Item_Abridged.AddItemContains(builder, itemContainsOffset);
    Item_Abridged.AddHazCodes(builder, hazCodesOffset);
    Item_Abridged.AddTcn(builder, tcnOffset);
    Item_Abridged.AddProductSys(builder, productSysOffset);
    Item_Abridged.AddProductCode(builder, productCodeOffset);
    Item_Abridged.AddCommoditySys(builder, commoditySysOffset);
    Item_Abridged.AddCommodityCode(builder, commodityCodeOffset);
    Item_Abridged.AddWeightTS(builder, weightTSOffset);
    Item_Abridged.AddUln(builder, ulnOffset);
    Item_Abridged.AddLastArrDate(builder, lastArrDateOffset);
    Item_Abridged.AddReceivingBranch(builder, receivingBranchOffset);
    Item_Abridged.AddReceivingUnit(builder, receivingUnitOffset);
    Item_Abridged.AddDeparture(builder, departureOffset);
    Item_Abridged.AddDestination(builder, destinationOffset);
    Item_Abridged.AddName(builder, nameOffset);
    Item_Abridged.AddCargoType(builder, cargoTypeOffset);
    Item_Abridged.AddType(builder, typeOffset);
    Item_Abridged.AddScGenTool(builder, scGenToolOffset);
    Item_Abridged.AddScanCode(builder, scanCodeOffset);
    Item_Abridged.AddIdAirLoadPlan(builder, idAirLoadPlanOffset);
    Item_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Item_Abridged.AddId(builder, idOffset);
    Item_Abridged.AddDataMode(builder, dataMode);
    Item_Abridged.AddContainer(builder, container);
    Item_Abridged.AddAirdrop(builder, airdrop);
    return Item_Abridged.EndItem_Abridged(builder);
  }

  public static void StartItem_Abridged(FlatBufferBuilder builder) { builder.StartTable(51); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdAirLoadPlan(FlatBufferBuilder builder, StringOffset idAirLoadPlanOffset) { builder.AddOffset(2, idAirLoadPlanOffset.Value, 0); }
  public static void AddScanCode(FlatBufferBuilder builder, StringOffset scanCodeOffset) { builder.AddOffset(3, scanCodeOffset.Value, 0); }
  public static void AddScGenTool(FlatBufferBuilder builder, StringOffset scGenToolOffset) { builder.AddOffset(4, scGenToolOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddCargoType(FlatBufferBuilder builder, StringOffset cargoTypeOffset) { builder.AddOffset(6, cargoTypeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(7, nameOffset.Value, 0); }
  public static void AddDestination(FlatBufferBuilder builder, StringOffset destinationOffset) { builder.AddOffset(8, destinationOffset.Value, 0); }
  public static void AddDeparture(FlatBufferBuilder builder, StringOffset departureOffset) { builder.AddOffset(9, departureOffset.Value, 0); }
  public static void AddReceivingUnit(FlatBufferBuilder builder, StringOffset receivingUnitOffset) { builder.AddOffset(10, receivingUnitOffset.Value, 0); }
  public static void AddReceivingBranch(FlatBufferBuilder builder, StringOffset receivingBranchOffset) { builder.AddOffset(11, receivingBranchOffset.Value, 0); }
  public static void AddLastArrDate(FlatBufferBuilder builder, StringOffset lastArrDateOffset) { builder.AddOffset(12, lastArrDateOffset.Value, 0); }
  public static void AddUln(FlatBufferBuilder builder, StringOffset ulnOffset) { builder.AddOffset(13, ulnOffset.Value, 0); }
  public static void AddWeight(FlatBufferBuilder builder, double weight) { builder.AddDouble(14, weight, 0.0); }
  public static void AddWeightTS(FlatBufferBuilder builder, StringOffset weightTSOffset) { builder.AddOffset(15, weightTSOffset.Value, 0); }
  public static void AddCommodityCode(FlatBufferBuilder builder, StringOffset commodityCodeOffset) { builder.AddOffset(16, commodityCodeOffset.Value, 0); }
  public static void AddCommoditySys(FlatBufferBuilder builder, StringOffset commoditySysOffset) { builder.AddOffset(17, commoditySysOffset.Value, 0); }
  public static void AddProductCode(FlatBufferBuilder builder, StringOffset productCodeOffset) { builder.AddOffset(18, productCodeOffset.Value, 0); }
  public static void AddProductSys(FlatBufferBuilder builder, StringOffset productSysOffset) { builder.AddOffset(19, productSysOffset.Value, 0); }
  public static void AddWidth(FlatBufferBuilder builder, double width) { builder.AddDouble(20, width, 0.0); }
  public static void AddLength(FlatBufferBuilder builder, double length) { builder.AddDouble(21, length, 0.0); }
  public static void AddHeight(FlatBufferBuilder builder, double height) { builder.AddDouble(22, height, 0.0); }
  public static void AddVolume(FlatBufferBuilder builder, double volume) { builder.AddDouble(23, volume, 0.0); }
  public static void AddCg(FlatBufferBuilder builder, double cg) { builder.AddDouble(24, cg, 0.0); }
  public static void AddFs(FlatBufferBuilder builder, double fs) { builder.AddDouble(25, fs, 0.0); }
  public static void AddCenterlineOffset(FlatBufferBuilder builder, double centerlineOffset) { builder.AddDouble(26, centerlineOffset, 0.0); }
  public static void AddMoment(FlatBufferBuilder builder, double moment) { builder.AddDouble(27, moment, 0.0); }
  public static void AddAirdrop(FlatBufferBuilder builder, bool airdrop) { builder.AddBool(28, airdrop, false); }
  public static void AddTcn(FlatBufferBuilder builder, StringOffset tcnOffset) { builder.AddOffset(29, tcnOffset.Value, 0); }
  public static void AddHazCodes(FlatBufferBuilder builder, VectorOffset hazCodesOffset) { builder.AddOffset(30, hazCodesOffset.Value, 0); }
  public static VectorOffset CreateHazCodesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHazCodesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHazCodesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHazCodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHazCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNetExpWt(FlatBufferBuilder builder, double netExpWt) { builder.AddDouble(31, netExpWt, 0.0); }
  public static void AddContainer(FlatBufferBuilder builder, bool container) { builder.AddBool(32, container, false); }
  public static void AddItemContains(FlatBufferBuilder builder, VectorOffset itemContainsOffset) { builder.AddOffset(33, itemContainsOffset.Value, 0); }
  public static VectorOffset CreateItemContainsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateItemContainsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemContainsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateItemContainsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartItemContainsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumPalletPos(FlatBufferBuilder builder, int numPalletPos) { builder.AddInt(34, numPalletPos, 0); }
  public static void AddDvCode(FlatBufferBuilder builder, StringOffset dvCodeOffset) { builder.AddOffset(35, dvCodeOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(36, notesOffset.Value, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(37, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(38, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAltDataFormat(FlatBufferBuilder builder, StringOffset altDataFormatOffset) { builder.AddOffset(39, altDataFormatOffset.Value, 0); }
  public static void AddAccSystem(FlatBufferBuilder builder, StringOffset accSystemOffset) { builder.AddOffset(40, accSystemOffset.Value, 0); }
  public static void AddAccSysNotes(FlatBufferBuilder builder, StringOffset accSysNotesOffset) { builder.AddOffset(41, accSysNotesOffset.Value, 0); }
  public static void AddAccSysKeys(FlatBufferBuilder builder, VectorOffset accSysKeysOffset) { builder.AddOffset(42, accSysKeysOffset.Value, 0); }
  public static VectorOffset CreateAccSysKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAccSysKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccSysKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccSysKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAccSysKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAccSysValues(FlatBufferBuilder builder, VectorOffset accSysValuesOffset) { builder.AddOffset(43, accSysValuesOffset.Value, 0); }
  public static VectorOffset CreateAccSysValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAccSysValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccSysValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccSysValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAccSysValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(44, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(45, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(46, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(47, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(48, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(49, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Item_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(50, (sbyte)dataMode, 0); }
  public static Offset<Item_Abridged> EndItem_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Item_Abridged>(o);
  }
  public static void FinishItem_AbridgedBuffer(FlatBufferBuilder builder, Offset<Item_Abridged> offset) { builder.Finish(offset.Value, "ITEM"); }
  public static void FinishSizePrefixedItem_AbridgedBuffer(FlatBufferBuilder builder, Offset<Item_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ITEM"); }
  public Item_AbridgedT UnPack() {
    var _o = new Item_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Item_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdAirLoadPlan = this.IdAirLoadPlan;
    _o.ScanCode = this.ScanCode;
    _o.ScGenTool = this.ScGenTool;
    _o.Type = this.Type;
    _o.CargoType = this.CargoType;
    _o.Name = this.Name;
    _o.Destination = this.Destination;
    _o.Departure = this.Departure;
    _o.ReceivingUnit = this.ReceivingUnit;
    _o.ReceivingBranch = this.ReceivingBranch;
    _o.LastArrDate = this.LastArrDate;
    _o.Uln = this.Uln;
    _o.Weight = this.Weight;
    _o.WeightTS = this.WeightTS;
    _o.CommodityCode = this.CommodityCode;
    _o.CommoditySys = this.CommoditySys;
    _o.ProductCode = this.ProductCode;
    _o.ProductSys = this.ProductSys;
    _o.Width = this.Width;
    _o.Length = this.Length;
    _o.Height = this.Height;
    _o.Volume = this.Volume;
    _o.Cg = this.Cg;
    _o.Fs = this.Fs;
    _o.CenterlineOffset = this.CenterlineOffset;
    _o.Moment = this.Moment;
    _o.Airdrop = this.Airdrop;
    _o.Tcn = this.Tcn;
    _o.HazCodes = new List<string>();
    for (var _j = 0; _j < this.HazCodesLength; ++_j) {_o.HazCodes.Add(this.HazCodes(_j));}
    _o.NetExpWt = this.NetExpWt;
    _o.Container = this.Container;
    _o.ItemContains = new List<string>();
    for (var _j = 0; _j < this.ItemContainsLength; ++_j) {_o.ItemContains.Add(this.ItemContains(_j));}
    _o.NumPalletPos = this.NumPalletPos;
    _o.DvCode = this.DvCode;
    _o.Notes = this.Notes;
    _o.Keys = new List<string>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j));}
    _o.Values = new List<string>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
    _o.AltDataFormat = this.AltDataFormat;
    _o.AccSystem = this.AccSystem;
    _o.AccSysNotes = this.AccSysNotes;
    _o.AccSysKeys = new List<string>();
    for (var _j = 0; _j < this.AccSysKeysLength; ++_j) {_o.AccSysKeys.Add(this.AccSysKeys(_j));}
    _o.AccSysValues = new List<string>();
    for (var _j = 0; _j < this.AccSysValuesLength; ++_j) {_o.AccSysValues.Add(this.AccSysValues(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Item_Abridged> Pack(FlatBufferBuilder builder, Item_AbridgedT _o) {
    if (_o == null) return default(Offset<Item_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idAirLoadPlan = _o.IdAirLoadPlan == null ? default(StringOffset) : builder.CreateString(_o.IdAirLoadPlan);
    var _scanCode = _o.ScanCode == null ? default(StringOffset) : builder.CreateString(_o.ScanCode);
    var _scGenTool = _o.ScGenTool == null ? default(StringOffset) : builder.CreateString(_o.ScGenTool);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _cargoType = _o.CargoType == null ? default(StringOffset) : builder.CreateString(_o.CargoType);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _destination = _o.Destination == null ? default(StringOffset) : builder.CreateString(_o.Destination);
    var _departure = _o.Departure == null ? default(StringOffset) : builder.CreateString(_o.Departure);
    var _receivingUnit = _o.ReceivingUnit == null ? default(StringOffset) : builder.CreateString(_o.ReceivingUnit);
    var _receivingBranch = _o.ReceivingBranch == null ? default(StringOffset) : builder.CreateString(_o.ReceivingBranch);
    var _lastArrDate = _o.LastArrDate == null ? default(StringOffset) : builder.CreateString(_o.LastArrDate);
    var _uln = _o.Uln == null ? default(StringOffset) : builder.CreateString(_o.Uln);
    var _weightTS = _o.WeightTS == null ? default(StringOffset) : builder.CreateString(_o.WeightTS);
    var _commodityCode = _o.CommodityCode == null ? default(StringOffset) : builder.CreateString(_o.CommodityCode);
    var _commoditySys = _o.CommoditySys == null ? default(StringOffset) : builder.CreateString(_o.CommoditySys);
    var _productCode = _o.ProductCode == null ? default(StringOffset) : builder.CreateString(_o.ProductCode);
    var _productSys = _o.ProductSys == null ? default(StringOffset) : builder.CreateString(_o.ProductSys);
    var _tcn = _o.Tcn == null ? default(StringOffset) : builder.CreateString(_o.Tcn);
    var _hazCodes = default(VectorOffset);
    if (_o.HazCodes != null) {
      var __hazCodes = new StringOffset[_o.HazCodes.Count];
      for (var _j = 0; _j < __hazCodes.Length; ++_j) { __hazCodes[_j] = builder.CreateString(_o.HazCodes[_j]); }
      _hazCodes = CreateHazCodesVector(builder, __hazCodes);
    }
    var _itemContains = default(VectorOffset);
    if (_o.ItemContains != null) {
      var __itemContains = new StringOffset[_o.ItemContains.Count];
      for (var _j = 0; _j < __itemContains.Length; ++_j) { __itemContains[_j] = builder.CreateString(_o.ItemContains[_j]); }
      _itemContains = CreateItemContainsVector(builder, __itemContains);
    }
    var _dvCode = _o.DvCode == null ? default(StringOffset) : builder.CreateString(_o.DvCode);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new StringOffset[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = builder.CreateString(_o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new StringOffset[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = builder.CreateString(_o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    var _altDataFormat = _o.AltDataFormat == null ? default(StringOffset) : builder.CreateString(_o.AltDataFormat);
    var _accSystem = _o.AccSystem == null ? default(StringOffset) : builder.CreateString(_o.AccSystem);
    var _accSysNotes = _o.AccSysNotes == null ? default(StringOffset) : builder.CreateString(_o.AccSysNotes);
    var _accSysKeys = default(VectorOffset);
    if (_o.AccSysKeys != null) {
      var __accSysKeys = new StringOffset[_o.AccSysKeys.Count];
      for (var _j = 0; _j < __accSysKeys.Length; ++_j) { __accSysKeys[_j] = builder.CreateString(_o.AccSysKeys[_j]); }
      _accSysKeys = CreateAccSysKeysVector(builder, __accSysKeys);
    }
    var _accSysValues = default(VectorOffset);
    if (_o.AccSysValues != null) {
      var __accSysValues = new StringOffset[_o.AccSysValues.Count];
      for (var _j = 0; _j < __accSysValues.Length; ++_j) { __accSysValues[_j] = builder.CreateString(_o.AccSysValues[_j]); }
      _accSysValues = CreateAccSysValuesVector(builder, __accSysValues);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateItem_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idAirLoadPlan,
      _scanCode,
      _scGenTool,
      _type,
      _cargoType,
      _name,
      _destination,
      _departure,
      _receivingUnit,
      _receivingBranch,
      _lastArrDate,
      _uln,
      _o.Weight,
      _weightTS,
      _commodityCode,
      _commoditySys,
      _productCode,
      _productSys,
      _o.Width,
      _o.Length,
      _o.Height,
      _o.Volume,
      _o.Cg,
      _o.Fs,
      _o.CenterlineOffset,
      _o.Moment,
      _o.Airdrop,
      _tcn,
      _hazCodes,
      _o.NetExpWt,
      _o.Container,
      _itemContains,
      _o.NumPalletPos,
      _dvCode,
      _notes,
      _keys,
      _values,
      _altDataFormat,
      _accSystem,
      _accSysNotes,
      _accSysKeys,
      _accSysValues,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Item_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdAirLoadPlan { get; set; }
  public string ScanCode { get; set; }
  public string ScGenTool { get; set; }
  public string Type { get; set; }
  public string CargoType { get; set; }
  public string Name { get; set; }
  public string Destination { get; set; }
  public string Departure { get; set; }
  public string ReceivingUnit { get; set; }
  public string ReceivingBranch { get; set; }
  public string LastArrDate { get; set; }
  public string Uln { get; set; }
  public double Weight { get; set; }
  public string WeightTS { get; set; }
  public string CommodityCode { get; set; }
  public string CommoditySys { get; set; }
  public string ProductCode { get; set; }
  public string ProductSys { get; set; }
  public double Width { get; set; }
  public double Length { get; set; }
  public double Height { get; set; }
  public double Volume { get; set; }
  public double Cg { get; set; }
  public double Fs { get; set; }
  public double CenterlineOffset { get; set; }
  public double Moment { get; set; }
  public bool Airdrop { get; set; }
  public string Tcn { get; set; }
  public List<string> HazCodes { get; set; }
  public double NetExpWt { get; set; }
  public bool Container { get; set; }
  public List<string> ItemContains { get; set; }
  public int NumPalletPos { get; set; }
  public string DvCode { get; set; }
  public string Notes { get; set; }
  public List<string> Keys { get; set; }
  public List<string> Values { get; set; }
  public string AltDataFormat { get; set; }
  public string AccSystem { get; set; }
  public string AccSysNotes { get; set; }
  public List<string> AccSysKeys { get; set; }
  public List<string> AccSysValues { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Item_Abridged_dataMode_Enum DataMode { get; set; }

  public Item_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdAirLoadPlan = null;
    this.ScanCode = null;
    this.ScGenTool = null;
    this.Type = null;
    this.CargoType = null;
    this.Name = null;
    this.Destination = null;
    this.Departure = null;
    this.ReceivingUnit = null;
    this.ReceivingBranch = null;
    this.LastArrDate = null;
    this.Uln = null;
    this.Weight = 0.0;
    this.WeightTS = null;
    this.CommodityCode = null;
    this.CommoditySys = null;
    this.ProductCode = null;
    this.ProductSys = null;
    this.Width = 0.0;
    this.Length = 0.0;
    this.Height = 0.0;
    this.Volume = 0.0;
    this.Cg = 0.0;
    this.Fs = 0.0;
    this.CenterlineOffset = 0.0;
    this.Moment = 0.0;
    this.Airdrop = false;
    this.Tcn = null;
    this.HazCodes = null;
    this.NetExpWt = 0.0;
    this.Container = false;
    this.ItemContains = null;
    this.NumPalletPos = 0;
    this.DvCode = null;
    this.Notes = null;
    this.Keys = null;
    this.Values = null;
    this.AltDataFormat = null;
    this.AccSystem = null;
    this.AccSysNotes = null;
    this.AccSysKeys = null;
    this.AccSysValues = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Item_Abridged_dataMode_Enum.REAL;
  }
  public static Item_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Item_Abridged.GetRootAsItem_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Item_Abridged.FinishItem_AbridgedBuffer(fbb, Item_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Item_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdAirLoadPlan*/, false)
      && verifier.VerifyString(tablePos, 10 /*ScanCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*ScGenTool*/, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyString(tablePos, 16 /*CargoType*/, false)
      && verifier.VerifyString(tablePos, 18 /*Name*/, false)
      && verifier.VerifyString(tablePos, 20 /*Destination*/, false)
      && verifier.VerifyString(tablePos, 22 /*Departure*/, false)
      && verifier.VerifyString(tablePos, 24 /*ReceivingUnit*/, false)
      && verifier.VerifyString(tablePos, 26 /*ReceivingBranch*/, false)
      && verifier.VerifyString(tablePos, 28 /*LastArrDate*/, false)
      && verifier.VerifyString(tablePos, 30 /*Uln*/, false)
      && verifier.VerifyField(tablePos, 32 /*Weight*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 34 /*WeightTS*/, false)
      && verifier.VerifyString(tablePos, 36 /*CommodityCode*/, false)
      && verifier.VerifyString(tablePos, 38 /*CommoditySys*/, false)
      && verifier.VerifyString(tablePos, 40 /*ProductCode*/, false)
      && verifier.VerifyString(tablePos, 42 /*ProductSys*/, false)
      && verifier.VerifyField(tablePos, 44 /*Width*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Length*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*Height*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Volume*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*Cg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Fs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*CenterlineOffset*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*Moment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*Airdrop*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 62 /*Tcn*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*HazCodes*/, false)
      && verifier.VerifyField(tablePos, 66 /*NetExpWt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*Container*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*ItemContains*/, false)
      && verifier.VerifyField(tablePos, 72 /*NumPalletPos*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 74 /*DvCode*/, false)
      && verifier.VerifyString(tablePos, 76 /*Notes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 78 /*Keys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 80 /*Values*/, false)
      && verifier.VerifyString(tablePos, 82 /*AltDataFormat*/, false)
      && verifier.VerifyString(tablePos, 84 /*AccSystem*/, false)
      && verifier.VerifyString(tablePos, 86 /*AccSysNotes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 88 /*AccSysKeys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 90 /*AccSysValues*/, false)
      && verifier.VerifyString(tablePos, 92 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 94 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 96 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 98 /*Source*/, false)
      && verifier.VerifyString(tablePos, 100 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 102 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 104 /*DataMode*/, 1 /*Item_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
