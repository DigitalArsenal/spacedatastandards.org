// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc.
public struct Location_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Location_Full GetRootAsLocation_Full(ByteBuffer _bb) { return GetRootAsLocation_Full(_bb, new Location_Full()); }
  public static Location_Full GetRootAsLocation_Full(ByteBuffer _bb, Location_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Location_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOCA"); }
  public static bool VerifyLocation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOCA", false, Location_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Location_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the location, auto-generated by the system.
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdLocation { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdLocationBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdLocationBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdLocationArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Location name.
  /// Example: /// Example: Example location
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CountryCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Altitude of the location, in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Altitude { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(18); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(20); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(22); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(24); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(26); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(28); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Location_Full_dataMode_Enum DataMode { get { int o = __p.__offset(30); return o != 0 ? (Location_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Location_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<Location_Full> CreateLocation_Full(FlatBufferBuilder builder,
      StringOffset idLocationOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double altitude = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Location_Full_dataMode_Enum dataMode = Location_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(15);
    Location_Full.AddAltitude(builder, altitude);
    Location_Full.AddLon(builder, lon);
    Location_Full.AddLat(builder, lat);
    Location_Full.AddOrigNetwork(builder, origNetworkOffset);
    Location_Full.AddOrigin(builder, originOffset);
    Location_Full.AddSource(builder, sourceOffset);
    Location_Full.AddUpdatedBy(builder, updatedByOffset);
    Location_Full.AddUpdatedAt(builder, updatedAtOffset);
    Location_Full.AddCreatedBy(builder, createdByOffset);
    Location_Full.AddCreatedAt(builder, createdAtOffset);
    Location_Full.AddCountryCode(builder, countryCodeOffset);
    Location_Full.AddName(builder, nameOffset);
    Location_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Location_Full.AddIdLocation(builder, idLocationOffset);
    Location_Full.AddDataMode(builder, dataMode);
    return Location_Full.EndLocation_Full(builder);
  }

  public static void StartLocation_Full(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddIdLocation(FlatBufferBuilder builder, StringOffset idLocationOffset) { builder.AddOffset(0, idLocationOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(3, countryCodeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(4, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(5, lon, 0.0); }
  public static void AddAltitude(FlatBufferBuilder builder, double altitude) { builder.AddDouble(6, altitude, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(7, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(8, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(9, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(10, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(11, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(12, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Location_Full_dataMode_Enum dataMode) { builder.AddSbyte(13, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(14, origNetworkOffset.Value, 0); }
  public static Offset<Location_Full> EndLocation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Location_Full>(o);
  }
  public static void FinishLocation_FullBuffer(FlatBufferBuilder builder, Offset<Location_Full> offset) { builder.Finish(offset.Value, "LOCA"); }
  public static void FinishSizePrefixedLocation_FullBuffer(FlatBufferBuilder builder, Offset<Location_Full> offset) { builder.FinishSizePrefixed(offset.Value, "LOCA"); }
  public Location_FullT UnPack() {
    var _o = new Location_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Location_FullT _o) {
    _o.IdLocation = this.IdLocation;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Name = this.Name;
    _o.CountryCode = this.CountryCode;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Altitude = this.Altitude;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Location_Full> Pack(FlatBufferBuilder builder, Location_FullT _o) {
    if (_o == null) return default(Offset<Location_Full>);
    var _idLocation = _o.IdLocation == null ? default(StringOffset) : builder.CreateString(_o.IdLocation);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateLocation_Full(
      builder,
      _idLocation,
      _classificationMarking,
      _name,
      _countryCode,
      _o.Lat,
      _o.Lon,
      _o.Altitude,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class Location_FullT
{
  public string IdLocation { get; set; }
  public string ClassificationMarking { get; set; }
  public string Name { get; set; }
  public string CountryCode { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Altitude { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Location_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public Location_FullT() {
    this.IdLocation = null;
    this.ClassificationMarking = null;
    this.Name = null;
    this.CountryCode = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Altitude = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Location_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static Location_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Location_Full.GetRootAsLocation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Location_Full.FinishLocation_FullBuffer(fbb, Location_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Location_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdLocation*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*CountryCode*/, false)
      && verifier.VerifyField(tablePos, 12 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Altitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 20 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 22 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 24 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 26 /*Source*/, false)
      && verifier.VerifyString(tablePos, 28 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 30 /*DataMode*/, 1 /*Location_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 32 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
