// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Tasking collection periods.
public struct ISRCollectionPeriods_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionPeriods_Abridged GetRootAsISRCollectionPeriods_Abridged(ByteBuffer _bb) { return GetRootAsISRCollectionPeriods_Abridged(_bb, new ISRCollectionPeriods_Abridged()); }
  public static ISRCollectionPeriods_Abridged GetRootAsISRCollectionPeriods_Abridged(ByteBuffer _bb, ISRCollectionPeriods_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollectionPeriods_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollectionPeriods_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollectionPeriods_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollectionPeriods_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Planned { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlannedBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlannedArray() { return __p.__vector_as_array<byte>(4); }
  /// Actual start and stop for the collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Actual(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ActualLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ISRCollectionPeriods_Abridged> CreateISRCollectionPeriods_Abridged(FlatBufferBuilder builder,
      StringOffset plannedOffset = default(StringOffset),
      VectorOffset actualOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ISRCollectionPeriods_Abridged.AddActual(builder, actualOffset);
    ISRCollectionPeriods_Abridged.AddPlanned(builder, plannedOffset);
    return ISRCollectionPeriods_Abridged.EndISRCollectionPeriods_Abridged(builder);
  }

  public static void StartISRCollectionPeriods_Abridged(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlanned(FlatBufferBuilder builder, StringOffset plannedOffset) { builder.AddOffset(0, plannedOffset.Value, 0); }
  public static void AddActual(FlatBufferBuilder builder, VectorOffset actualOffset) { builder.AddOffset(1, actualOffset.Value, 0); }
  public static VectorOffset CreateActualVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActualVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActualVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActualVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActualVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ISRCollectionPeriods_Abridged> EndISRCollectionPeriods_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollectionPeriods_Abridged>(o);
  }
  public static void FinishISRCollectionPeriods_AbridgedBuffer(FlatBufferBuilder builder, Offset<ISRCollectionPeriods_Abridged> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollectionPeriods_AbridgedBuffer(FlatBufferBuilder builder, Offset<ISRCollectionPeriods_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollectionPeriods_AbridgedT UnPack() {
    var _o = new ISRCollectionPeriods_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollectionPeriods_AbridgedT _o) {
    _o.Planned = this.Planned;
    _o.Actual = new List<string>();
    for (var _j = 0; _j < this.ActualLength; ++_j) {_o.Actual.Add(this.Actual(_j));}
  }
  public static Offset<ISRCollectionPeriods_Abridged> Pack(FlatBufferBuilder builder, ISRCollectionPeriods_AbridgedT _o) {
    if (_o == null) return default(Offset<ISRCollectionPeriods_Abridged>);
    var _planned = _o.Planned == null ? default(StringOffset) : builder.CreateString(_o.Planned);
    var _actual = default(VectorOffset);
    if (_o.Actual != null) {
      var __actual = new StringOffset[_o.Actual.Count];
      for (var _j = 0; _j < __actual.Length; ++_j) { __actual[_j] = builder.CreateString(_o.Actual[_j]); }
      _actual = CreateActualVector(builder, __actual);
    }
    return CreateISRCollectionPeriods_Abridged(
      builder,
      _planned,
      _actual);
  }
}

public class ISRCollectionPeriods_AbridgedT
{
  public string Planned { get; set; }
  public List<string> Actual { get; set; }

  public ISRCollectionPeriods_AbridgedT() {
    this.Planned = null;
    this.Actual = null;
  }
  public static ISRCollectionPeriods_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollectionPeriods_Abridged.GetRootAsISRCollectionPeriods_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollectionPeriods_Abridged.FinishISRCollectionPeriods_AbridgedBuffer(fbb, ISRCollectionPeriods_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollectionPeriods_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Planned*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*Actual*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
