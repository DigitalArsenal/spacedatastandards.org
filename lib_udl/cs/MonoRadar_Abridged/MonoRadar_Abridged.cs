// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
public struct MonoRadar_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MonoRadar_Abridged GetRootAsMonoRadar_Abridged(ByteBuffer _bb) { return GetRootAsMonoRadar_Abridged(_bb, new MonoRadar_Abridged()); }
  public static MonoRadar_Abridged GetRootAsMonoRadar_Abridged(ByteBuffer _bb, MonoRadar_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MonoRadar_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MONO"); }
  public static bool VerifyMonoRadar_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MONO", false, MonoRadar_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonoRadar_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MONORADAR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Test target indicator.
  /// Example: /// Example: TTI
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Tti { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTtiBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTtiBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTtiArray() { return __p.__vector_as_array<byte>(8); }
  /// ID of the radar site or station providing the data.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(10); }
  /// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude, in kilometers, at time of observation (ts).
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// System Area Code.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int Sac { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// System Identification Code.
  /// Example: /// Example: 40
  /// Constraints: No constraints specified.
  public int Sic { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Aircraft identification from an aircraft equipped with a Mode S transponder.
  /// Example: /// Example: TGT-ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Tgtid { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTgtidBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTgtidBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTgtidArray() { return __p.__vector_as_array<byte>(22); }
  /// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
  /// Example: /// Example: ADDR-ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Addr { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAddrBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetAddrBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetAddrArray() { return __p.__vector_as_array<byte>(24); }
  /// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
  /// Example: /// Example: CAT48
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string Msgfmt { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgfmtBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMsgfmtBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMsgfmtArray() { return __p.__vector_as_array<byte>(26); }
  /// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
  /// Example: /// Example: BCN
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string Msgtyp { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgtypBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMsgtypBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMsgtypArray() { return __p.__vector_as_array<byte>(28); }
  /// Flag indicating military message.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Af { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating FAA/Civ message.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Faa { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Spi { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating whether AIMS present.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Aims { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that target was detected using data from an MTI receiver.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Mti { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Number of beacon hits received on the target.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Bcnhits { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Target detection time, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(42); }
  /// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Msgts { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgtsBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetMsgtsBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetMsgtsArray() { return __p.__vector_as_array<byte>(44); }
  /// Measured slant range to target from the observing site, in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Rng { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Az { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Azimuth Change Pulse count at target detection.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  public int Acp { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Measured height of the target, in km. (for 3D radars).
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Alt3d { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mode-C altitude (uncorrected pressure altitude), in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Mc { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Status of the mode-C validity bit.
  /// Example: /// Example: MCV
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Mcv { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMcvBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetMcvBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetMcvArray() { return __p.__vector_as_array<byte>(56); }
  /// Indicator that the mode-C response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Mcg { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Mode-1 interrogation response (mission code).
  /// Example: /// Example: MISSION_CODE
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string M1 { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM1Bytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetM1Bytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetM1Array() { return __p.__vector_as_array<byte>(60); }
  /// Status of the mode-1 validity bit.
  /// Example: /// Example: M1V
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M1v { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM1vBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetM1vBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetM1vArray() { return __p.__vector_as_array<byte>(62); }
  /// Indicator that the mode-1 response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool M1g { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Mode-2 interrogation response (military identification code).
  /// Example: /// Example: MILITARY_ID_CODE
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string M2 { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM2Bytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetM2Bytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetM2Array() { return __p.__vector_as_array<byte>(66); }
  /// Status of the mode-2 validity bit.
  /// Example: /// Example: M2V
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M2v { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM2vBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetM2vBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetM2vArray() { return __p.__vector_as_array<byte>(68); }
  /// Status of the mode-2 X-Pulse response validation.
  /// Example: /// Example: M2XV
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M2xv { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM2xvBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetM2xvBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetM2xvArray() { return __p.__vector_as_array<byte>(70); }
  /// Indicator that the mode-2 response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool M2g { get { int o = __p.__offset(72); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Mode-3/A interrogation response (aircraft identification).
  /// Example: /// Example: AIRCRAFT_ID
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string M3a { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM3aBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetM3aBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetM3aArray() { return __p.__vector_as_array<byte>(74); }
  /// Status of the mode-3/A validity bit.
  /// Example: /// Example: M3AV
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M3av { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM3avBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetM3avBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetM3avArray() { return __p.__vector_as_array<byte>(76); }
  /// Indicator that the mode-3/A response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool M3ag { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Status of the mode-3 X-Pulse response validation.
  /// Example: /// Example: M3AXV
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M3axv { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM3axvBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetM3axvBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetM3axvArray() { return __p.__vector_as_array<byte>(80); }
  /// Mode-4 interrogation response (Identification Friend/Foe).
  /// Example: /// Example: ID_FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string M4 { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM4Bytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetM4Bytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetM4Array() { return __p.__vector_as_array<byte>(82); }
  /// Status of the mode-4 validity bit.
  /// Example: /// Example: M4V
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M4v { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM4vBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetM4vBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetM4vArray() { return __p.__vector_as_array<byte>(84); }
  /// Mode-4 D1 & D2 response status.
  /// Example: /// Example: STATUS
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string M4d1d2 { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM4d1d2Bytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetM4d1d2Bytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetM4d1d2Array() { return __p.__vector_as_array<byte>(86); }
  /// Mode-S Comm B message data.
  /// Example: /// Example: MSCOMMB
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Mscommb { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMscommbBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetMscommbBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetMscommbArray() { return __p.__vector_as_array<byte>(88); }
  /// Flag indicating military emergency.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Milemrgcy { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// 7500 squawk present (hijack).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Code7500 { get { int o = __p.__offset(92); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// 7600 squawk present (loss of comm).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Code7600 { get { int o = __p.__offset(94); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// 7700 squawk present (general emergency).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Code7700 { get { int o = __p.__offset(96); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Target ground speed, in meters/second.
  /// Example: /// Example: 30.23
  /// Constraints: No constraints specified.
  public double Grndspd { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target heading, in degrees from true North at the target position.
  /// Example: /// Example: 30.23
  /// Constraints: No constraints specified.
  public double Hdng { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
  /// Example: /// Example: 30
  /// Constraints: No constraints specified.
  public int Trknum { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Type of sensor(s) maintaining track.
  /// Example: /// Example: RAD
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Rad { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRadBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetRadBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetRadArray() { return __p.__vector_as_array<byte>(104); }
  /// Indication of Horizontal Maneuver detection.
  /// Example: /// Example: MAH
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Mah { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMahBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetMahBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetMahArray() { return __p.__vector_as_array<byte>(106); }
  /// Climbing/Descending mode indicator.
  /// Example: /// Example: CDM
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Cdm { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCdmBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCdmBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCdmArray() { return __p.__vector_as_array<byte>(108); }
  /// Array of local 2d-cartesian [x, y] coordinates of target, in km.
  /// Example: /// Example: [1.2, 2.2]
  /// Constraints: No constraints specified.
  public string Cartpos(int j) { int o = __p.__offset(110); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CartposLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Runlength of the primary surveillance radar track, in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  public double Psrrl { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Runlength of the secondary surveillance radar track, in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  public double Ssrl { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target range delta between PSR and SSR (reference PSR-SSR), in km.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  public double Rngdelt { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  public double Azdelt { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Warning/Error Conditions and Target Classification.
  /// Example: /// Example: ['WARNING', 'WARNING']
  /// Constraints: No constraints specified.
  public string Wectc(int j) { int o = __p.__offset(120); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int WectcLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Mrgrpt { get { int o = __p.__offset(122); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// ARTS quality.
  /// Example: /// Example: QUALITY
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Artsqual { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtsqualBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetArtsqualBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetArtsqualArray() { return __p.__vector_as_array<byte>(124); }
  /// Track eligibility flag.
  /// Example: /// Example: ELIGIBILITY
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Trkelig { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkeligBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetTrkeligBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetTrkeligArray() { return __p.__vector_as_array<byte>(126); }
  /// Target confidence.
  /// Example: /// Example: CONFIDENCE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Tgtconf { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTgtconfBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetTgtconfBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetTgtconfArray() { return __p.__vector_as_array<byte>(128); }
  /// Target correlation flag.
  /// Example: /// Example: CORRELATION
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Tgtcorr { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTgtcorrBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetTgtcorrBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetTgtcorrArray() { return __p.__vector_as_array<byte>(130); }
  /// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
  /// Example: /// Example: 0.4
  /// Constraints: No constraints specified.
  public double Tis { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(134); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(134); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(136); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(138); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(140); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public MonoRadar_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(142); return o != 0 ? (MonoRadar_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : MonoRadar_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(144); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(146); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(148); }

  public static Offset<MonoRadar_Abridged> CreateMonoRadar_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset ttiOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      int sac = 0,
      int sic = 0,
      StringOffset tgtidOffset = default(StringOffset),
      StringOffset addrOffset = default(StringOffset),
      StringOffset msgfmtOffset = default(StringOffset),
      StringOffset msgtypOffset = default(StringOffset),
      bool af = false,
      bool faa = false,
      bool spi = false,
      bool aims = false,
      bool mti = false,
      int bcnhits = 0,
      StringOffset tsOffset = default(StringOffset),
      StringOffset msgtsOffset = default(StringOffset),
      double rng = 0.0,
      double az = 0.0,
      int acp = 0,
      double alt3d = 0.0,
      double mc = 0.0,
      StringOffset mcvOffset = default(StringOffset),
      bool mcg = false,
      StringOffset m1Offset = default(StringOffset),
      StringOffset m1vOffset = default(StringOffset),
      bool m1g = false,
      StringOffset m2Offset = default(StringOffset),
      StringOffset m2vOffset = default(StringOffset),
      StringOffset m2xvOffset = default(StringOffset),
      bool m2g = false,
      StringOffset m3aOffset = default(StringOffset),
      StringOffset m3avOffset = default(StringOffset),
      bool m3ag = false,
      StringOffset m3axvOffset = default(StringOffset),
      StringOffset m4Offset = default(StringOffset),
      StringOffset m4vOffset = default(StringOffset),
      StringOffset m4d1d2Offset = default(StringOffset),
      StringOffset mscommbOffset = default(StringOffset),
      bool milemrgcy = false,
      bool code7500 = false,
      bool code7600 = false,
      bool code7700 = false,
      double grndspd = 0.0,
      double hdng = 0.0,
      int trknum = 0,
      StringOffset radOffset = default(StringOffset),
      StringOffset mahOffset = default(StringOffset),
      StringOffset cdmOffset = default(StringOffset),
      VectorOffset cartposOffset = default(VectorOffset),
      double psrrl = 0.0,
      double ssrl = 0.0,
      double rngdelt = 0.0,
      double azdelt = 0.0,
      VectorOffset wectcOffset = default(VectorOffset),
      bool mrgrpt = false,
      StringOffset artsqualOffset = default(StringOffset),
      StringOffset trkeligOffset = default(StringOffset),
      StringOffset tgtconfOffset = default(StringOffset),
      StringOffset tgtcorrOffset = default(StringOffset),
      double tis = 0.0,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      MonoRadar_Abridged_dataMode_Enum dataMode = MonoRadar_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(73);
    MonoRadar_Abridged.AddTis(builder, tis);
    MonoRadar_Abridged.AddAzdelt(builder, azdelt);
    MonoRadar_Abridged.AddRngdelt(builder, rngdelt);
    MonoRadar_Abridged.AddSsrl(builder, ssrl);
    MonoRadar_Abridged.AddPsrrl(builder, psrrl);
    MonoRadar_Abridged.AddHdng(builder, hdng);
    MonoRadar_Abridged.AddGrndspd(builder, grndspd);
    MonoRadar_Abridged.AddMc(builder, mc);
    MonoRadar_Abridged.AddAlt3d(builder, alt3d);
    MonoRadar_Abridged.AddAz(builder, az);
    MonoRadar_Abridged.AddRng(builder, rng);
    MonoRadar_Abridged.AddSenalt(builder, senalt);
    MonoRadar_Abridged.AddSenlon(builder, senlon);
    MonoRadar_Abridged.AddSenlat(builder, senlat);
    MonoRadar_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    MonoRadar_Abridged.AddCreatedBy(builder, createdByOffset);
    MonoRadar_Abridged.AddCreatedAt(builder, createdAtOffset);
    MonoRadar_Abridged.AddOrigin(builder, originOffset);
    MonoRadar_Abridged.AddSource(builder, sourceOffset);
    MonoRadar_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    MonoRadar_Abridged.AddTags(builder, tagsOffset);
    MonoRadar_Abridged.AddTgtcorr(builder, tgtcorrOffset);
    MonoRadar_Abridged.AddTgtconf(builder, tgtconfOffset);
    MonoRadar_Abridged.AddTrkelig(builder, trkeligOffset);
    MonoRadar_Abridged.AddArtsqual(builder, artsqualOffset);
    MonoRadar_Abridged.AddWectc(builder, wectcOffset);
    MonoRadar_Abridged.AddCartpos(builder, cartposOffset);
    MonoRadar_Abridged.AddCdm(builder, cdmOffset);
    MonoRadar_Abridged.AddMah(builder, mahOffset);
    MonoRadar_Abridged.AddRad(builder, radOffset);
    MonoRadar_Abridged.AddTrknum(builder, trknum);
    MonoRadar_Abridged.AddMscommb(builder, mscommbOffset);
    MonoRadar_Abridged.AddM4d1d2(builder, m4d1d2Offset);
    MonoRadar_Abridged.AddM4v(builder, m4vOffset);
    MonoRadar_Abridged.AddM4(builder, m4Offset);
    MonoRadar_Abridged.AddM3axv(builder, m3axvOffset);
    MonoRadar_Abridged.AddM3av(builder, m3avOffset);
    MonoRadar_Abridged.AddM3a(builder, m3aOffset);
    MonoRadar_Abridged.AddM2xv(builder, m2xvOffset);
    MonoRadar_Abridged.AddM2v(builder, m2vOffset);
    MonoRadar_Abridged.AddM2(builder, m2Offset);
    MonoRadar_Abridged.AddM1v(builder, m1vOffset);
    MonoRadar_Abridged.AddM1(builder, m1Offset);
    MonoRadar_Abridged.AddMcv(builder, mcvOffset);
    MonoRadar_Abridged.AddAcp(builder, acp);
    MonoRadar_Abridged.AddMsgts(builder, msgtsOffset);
    MonoRadar_Abridged.AddTs(builder, tsOffset);
    MonoRadar_Abridged.AddBcnhits(builder, bcnhits);
    MonoRadar_Abridged.AddMsgtyp(builder, msgtypOffset);
    MonoRadar_Abridged.AddMsgfmt(builder, msgfmtOffset);
    MonoRadar_Abridged.AddAddr(builder, addrOffset);
    MonoRadar_Abridged.AddTgtid(builder, tgtidOffset);
    MonoRadar_Abridged.AddSic(builder, sic);
    MonoRadar_Abridged.AddSac(builder, sac);
    MonoRadar_Abridged.AddIdSensor(builder, idSensorOffset);
    MonoRadar_Abridged.AddTti(builder, ttiOffset);
    MonoRadar_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    MonoRadar_Abridged.AddId(builder, idOffset);
    MonoRadar_Abridged.AddDataMode(builder, dataMode);
    MonoRadar_Abridged.AddMrgrpt(builder, mrgrpt);
    MonoRadar_Abridged.AddCode7700(builder, code7700);
    MonoRadar_Abridged.AddCode7600(builder, code7600);
    MonoRadar_Abridged.AddCode7500(builder, code7500);
    MonoRadar_Abridged.AddMilemrgcy(builder, milemrgcy);
    MonoRadar_Abridged.AddM3ag(builder, m3ag);
    MonoRadar_Abridged.AddM2g(builder, m2g);
    MonoRadar_Abridged.AddM1g(builder, m1g);
    MonoRadar_Abridged.AddMcg(builder, mcg);
    MonoRadar_Abridged.AddMti(builder, mti);
    MonoRadar_Abridged.AddAims(builder, aims);
    MonoRadar_Abridged.AddSpi(builder, spi);
    MonoRadar_Abridged.AddFaa(builder, faa);
    MonoRadar_Abridged.AddAf(builder, af);
    return MonoRadar_Abridged.EndMonoRadar_Abridged(builder);
  }

  public static void StartMonoRadar_Abridged(FlatBufferBuilder builder) { builder.StartTable(73); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddTti(FlatBufferBuilder builder, StringOffset ttiOffset) { builder.AddOffset(2, ttiOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(3, idSensorOffset.Value, 0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(4, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(5, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(6, senalt, 0.0); }
  public static void AddSac(FlatBufferBuilder builder, int sac) { builder.AddInt(7, sac, 0); }
  public static void AddSic(FlatBufferBuilder builder, int sic) { builder.AddInt(8, sic, 0); }
  public static void AddTgtid(FlatBufferBuilder builder, StringOffset tgtidOffset) { builder.AddOffset(9, tgtidOffset.Value, 0); }
  public static void AddAddr(FlatBufferBuilder builder, StringOffset addrOffset) { builder.AddOffset(10, addrOffset.Value, 0); }
  public static void AddMsgfmt(FlatBufferBuilder builder, StringOffset msgfmtOffset) { builder.AddOffset(11, msgfmtOffset.Value, 0); }
  public static void AddMsgtyp(FlatBufferBuilder builder, StringOffset msgtypOffset) { builder.AddOffset(12, msgtypOffset.Value, 0); }
  public static void AddAf(FlatBufferBuilder builder, bool af) { builder.AddBool(13, af, false); }
  public static void AddFaa(FlatBufferBuilder builder, bool faa) { builder.AddBool(14, faa, false); }
  public static void AddSpi(FlatBufferBuilder builder, bool spi) { builder.AddBool(15, spi, false); }
  public static void AddAims(FlatBufferBuilder builder, bool aims) { builder.AddBool(16, aims, false); }
  public static void AddMti(FlatBufferBuilder builder, bool mti) { builder.AddBool(17, mti, false); }
  public static void AddBcnhits(FlatBufferBuilder builder, int bcnhits) { builder.AddInt(18, bcnhits, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(19, tsOffset.Value, 0); }
  public static void AddMsgts(FlatBufferBuilder builder, StringOffset msgtsOffset) { builder.AddOffset(20, msgtsOffset.Value, 0); }
  public static void AddRng(FlatBufferBuilder builder, double rng) { builder.AddDouble(21, rng, 0.0); }
  public static void AddAz(FlatBufferBuilder builder, double az) { builder.AddDouble(22, az, 0.0); }
  public static void AddAcp(FlatBufferBuilder builder, int acp) { builder.AddInt(23, acp, 0); }
  public static void AddAlt3d(FlatBufferBuilder builder, double alt3d) { builder.AddDouble(24, alt3d, 0.0); }
  public static void AddMc(FlatBufferBuilder builder, double mc) { builder.AddDouble(25, mc, 0.0); }
  public static void AddMcv(FlatBufferBuilder builder, StringOffset mcvOffset) { builder.AddOffset(26, mcvOffset.Value, 0); }
  public static void AddMcg(FlatBufferBuilder builder, bool mcg) { builder.AddBool(27, mcg, false); }
  public static void AddM1(FlatBufferBuilder builder, StringOffset m1Offset) { builder.AddOffset(28, m1Offset.Value, 0); }
  public static void AddM1v(FlatBufferBuilder builder, StringOffset m1vOffset) { builder.AddOffset(29, m1vOffset.Value, 0); }
  public static void AddM1g(FlatBufferBuilder builder, bool m1g) { builder.AddBool(30, m1g, false); }
  public static void AddM2(FlatBufferBuilder builder, StringOffset m2Offset) { builder.AddOffset(31, m2Offset.Value, 0); }
  public static void AddM2v(FlatBufferBuilder builder, StringOffset m2vOffset) { builder.AddOffset(32, m2vOffset.Value, 0); }
  public static void AddM2xv(FlatBufferBuilder builder, StringOffset m2xvOffset) { builder.AddOffset(33, m2xvOffset.Value, 0); }
  public static void AddM2g(FlatBufferBuilder builder, bool m2g) { builder.AddBool(34, m2g, false); }
  public static void AddM3a(FlatBufferBuilder builder, StringOffset m3aOffset) { builder.AddOffset(35, m3aOffset.Value, 0); }
  public static void AddM3av(FlatBufferBuilder builder, StringOffset m3avOffset) { builder.AddOffset(36, m3avOffset.Value, 0); }
  public static void AddM3ag(FlatBufferBuilder builder, bool m3ag) { builder.AddBool(37, m3ag, false); }
  public static void AddM3axv(FlatBufferBuilder builder, StringOffset m3axvOffset) { builder.AddOffset(38, m3axvOffset.Value, 0); }
  public static void AddM4(FlatBufferBuilder builder, StringOffset m4Offset) { builder.AddOffset(39, m4Offset.Value, 0); }
  public static void AddM4v(FlatBufferBuilder builder, StringOffset m4vOffset) { builder.AddOffset(40, m4vOffset.Value, 0); }
  public static void AddM4d1d2(FlatBufferBuilder builder, StringOffset m4d1d2Offset) { builder.AddOffset(41, m4d1d2Offset.Value, 0); }
  public static void AddMscommb(FlatBufferBuilder builder, StringOffset mscommbOffset) { builder.AddOffset(42, mscommbOffset.Value, 0); }
  public static void AddMilemrgcy(FlatBufferBuilder builder, bool milemrgcy) { builder.AddBool(43, milemrgcy, false); }
  public static void AddCode7500(FlatBufferBuilder builder, bool code7500) { builder.AddBool(44, code7500, false); }
  public static void AddCode7600(FlatBufferBuilder builder, bool code7600) { builder.AddBool(45, code7600, false); }
  public static void AddCode7700(FlatBufferBuilder builder, bool code7700) { builder.AddBool(46, code7700, false); }
  public static void AddGrndspd(FlatBufferBuilder builder, double grndspd) { builder.AddDouble(47, grndspd, 0.0); }
  public static void AddHdng(FlatBufferBuilder builder, double hdng) { builder.AddDouble(48, hdng, 0.0); }
  public static void AddTrknum(FlatBufferBuilder builder, int trknum) { builder.AddInt(49, trknum, 0); }
  public static void AddRad(FlatBufferBuilder builder, StringOffset radOffset) { builder.AddOffset(50, radOffset.Value, 0); }
  public static void AddMah(FlatBufferBuilder builder, StringOffset mahOffset) { builder.AddOffset(51, mahOffset.Value, 0); }
  public static void AddCdm(FlatBufferBuilder builder, StringOffset cdmOffset) { builder.AddOffset(52, cdmOffset.Value, 0); }
  public static void AddCartpos(FlatBufferBuilder builder, VectorOffset cartposOffset) { builder.AddOffset(53, cartposOffset.Value, 0); }
  public static VectorOffset CreateCartposVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCartposVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCartposVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCartposVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCartposVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPsrrl(FlatBufferBuilder builder, double psrrl) { builder.AddDouble(54, psrrl, 0.0); }
  public static void AddSsrl(FlatBufferBuilder builder, double ssrl) { builder.AddDouble(55, ssrl, 0.0); }
  public static void AddRngdelt(FlatBufferBuilder builder, double rngdelt) { builder.AddDouble(56, rngdelt, 0.0); }
  public static void AddAzdelt(FlatBufferBuilder builder, double azdelt) { builder.AddDouble(57, azdelt, 0.0); }
  public static void AddWectc(FlatBufferBuilder builder, VectorOffset wectcOffset) { builder.AddOffset(58, wectcOffset.Value, 0); }
  public static VectorOffset CreateWectcVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWectcVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWectcVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWectcVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWectcVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMrgrpt(FlatBufferBuilder builder, bool mrgrpt) { builder.AddBool(59, mrgrpt, false); }
  public static void AddArtsqual(FlatBufferBuilder builder, StringOffset artsqualOffset) { builder.AddOffset(60, artsqualOffset.Value, 0); }
  public static void AddTrkelig(FlatBufferBuilder builder, StringOffset trkeligOffset) { builder.AddOffset(61, trkeligOffset.Value, 0); }
  public static void AddTgtconf(FlatBufferBuilder builder, StringOffset tgtconfOffset) { builder.AddOffset(62, tgtconfOffset.Value, 0); }
  public static void AddTgtcorr(FlatBufferBuilder builder, StringOffset tgtcorrOffset) { builder.AddOffset(63, tgtcorrOffset.Value, 0); }
  public static void AddTis(FlatBufferBuilder builder, double tis) { builder.AddDouble(64, tis, 0.0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(65, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(66, origSensorIdOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(67, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(68, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, MonoRadar_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(69, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(70, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(71, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(72, origNetworkOffset.Value, 0); }
  public static Offset<MonoRadar_Abridged> EndMonoRadar_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MonoRadar_Abridged>(o);
  }
  public static void FinishMonoRadar_AbridgedBuffer(FlatBufferBuilder builder, Offset<MonoRadar_Abridged> offset) { builder.Finish(offset.Value, "MONO"); }
  public static void FinishSizePrefixedMonoRadar_AbridgedBuffer(FlatBufferBuilder builder, Offset<MonoRadar_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "MONO"); }
  public MonoRadar_AbridgedT UnPack() {
    var _o = new MonoRadar_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MonoRadar_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Tti = this.Tti;
    _o.IdSensor = this.IdSensor;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Sac = this.Sac;
    _o.Sic = this.Sic;
    _o.Tgtid = this.Tgtid;
    _o.Addr = this.Addr;
    _o.Msgfmt = this.Msgfmt;
    _o.Msgtyp = this.Msgtyp;
    _o.Af = this.Af;
    _o.Faa = this.Faa;
    _o.Spi = this.Spi;
    _o.Aims = this.Aims;
    _o.Mti = this.Mti;
    _o.Bcnhits = this.Bcnhits;
    _o.Ts = this.Ts;
    _o.Msgts = this.Msgts;
    _o.Rng = this.Rng;
    _o.Az = this.Az;
    _o.Acp = this.Acp;
    _o.Alt3d = this.Alt3d;
    _o.Mc = this.Mc;
    _o.Mcv = this.Mcv;
    _o.Mcg = this.Mcg;
    _o.M1 = this.M1;
    _o.M1v = this.M1v;
    _o.M1g = this.M1g;
    _o.M2 = this.M2;
    _o.M2v = this.M2v;
    _o.M2xv = this.M2xv;
    _o.M2g = this.M2g;
    _o.M3a = this.M3a;
    _o.M3av = this.M3av;
    _o.M3ag = this.M3ag;
    _o.M3axv = this.M3axv;
    _o.M4 = this.M4;
    _o.M4v = this.M4v;
    _o.M4d1d2 = this.M4d1d2;
    _o.Mscommb = this.Mscommb;
    _o.Milemrgcy = this.Milemrgcy;
    _o.Code7500 = this.Code7500;
    _o.Code7600 = this.Code7600;
    _o.Code7700 = this.Code7700;
    _o.Grndspd = this.Grndspd;
    _o.Hdng = this.Hdng;
    _o.Trknum = this.Trknum;
    _o.Rad = this.Rad;
    _o.Mah = this.Mah;
    _o.Cdm = this.Cdm;
    _o.Cartpos = new List<string>();
    for (var _j = 0; _j < this.CartposLength; ++_j) {_o.Cartpos.Add(this.Cartpos(_j));}
    _o.Psrrl = this.Psrrl;
    _o.Ssrl = this.Ssrl;
    _o.Rngdelt = this.Rngdelt;
    _o.Azdelt = this.Azdelt;
    _o.Wectc = new List<string>();
    for (var _j = 0; _j < this.WectcLength; ++_j) {_o.Wectc.Add(this.Wectc(_j));}
    _o.Mrgrpt = this.Mrgrpt;
    _o.Artsqual = this.Artsqual;
    _o.Trkelig = this.Trkelig;
    _o.Tgtconf = this.Tgtconf;
    _o.Tgtcorr = this.Tgtcorr;
    _o.Tis = this.Tis;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.OrigSensorId = this.OrigSensorId;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<MonoRadar_Abridged> Pack(FlatBufferBuilder builder, MonoRadar_AbridgedT _o) {
    if (_o == null) return default(Offset<MonoRadar_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _tti = _o.Tti == null ? default(StringOffset) : builder.CreateString(_o.Tti);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _tgtid = _o.Tgtid == null ? default(StringOffset) : builder.CreateString(_o.Tgtid);
    var _addr = _o.Addr == null ? default(StringOffset) : builder.CreateString(_o.Addr);
    var _msgfmt = _o.Msgfmt == null ? default(StringOffset) : builder.CreateString(_o.Msgfmt);
    var _msgtyp = _o.Msgtyp == null ? default(StringOffset) : builder.CreateString(_o.Msgtyp);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _msgts = _o.Msgts == null ? default(StringOffset) : builder.CreateString(_o.Msgts);
    var _mcv = _o.Mcv == null ? default(StringOffset) : builder.CreateString(_o.Mcv);
    var _m1 = _o.M1 == null ? default(StringOffset) : builder.CreateString(_o.M1);
    var _m1v = _o.M1v == null ? default(StringOffset) : builder.CreateString(_o.M1v);
    var _m2 = _o.M2 == null ? default(StringOffset) : builder.CreateString(_o.M2);
    var _m2v = _o.M2v == null ? default(StringOffset) : builder.CreateString(_o.M2v);
    var _m2xv = _o.M2xv == null ? default(StringOffset) : builder.CreateString(_o.M2xv);
    var _m3a = _o.M3a == null ? default(StringOffset) : builder.CreateString(_o.M3a);
    var _m3av = _o.M3av == null ? default(StringOffset) : builder.CreateString(_o.M3av);
    var _m3axv = _o.M3axv == null ? default(StringOffset) : builder.CreateString(_o.M3axv);
    var _m4 = _o.M4 == null ? default(StringOffset) : builder.CreateString(_o.M4);
    var _m4v = _o.M4v == null ? default(StringOffset) : builder.CreateString(_o.M4v);
    var _m4d1d2 = _o.M4d1d2 == null ? default(StringOffset) : builder.CreateString(_o.M4d1d2);
    var _mscommb = _o.Mscommb == null ? default(StringOffset) : builder.CreateString(_o.Mscommb);
    var _rad = _o.Rad == null ? default(StringOffset) : builder.CreateString(_o.Rad);
    var _mah = _o.Mah == null ? default(StringOffset) : builder.CreateString(_o.Mah);
    var _cdm = _o.Cdm == null ? default(StringOffset) : builder.CreateString(_o.Cdm);
    var _cartpos = default(VectorOffset);
    if (_o.Cartpos != null) {
      var __cartpos = new StringOffset[_o.Cartpos.Count];
      for (var _j = 0; _j < __cartpos.Length; ++_j) { __cartpos[_j] = builder.CreateString(_o.Cartpos[_j]); }
      _cartpos = CreateCartposVector(builder, __cartpos);
    }
    var _wectc = default(VectorOffset);
    if (_o.Wectc != null) {
      var __wectc = new StringOffset[_o.Wectc.Count];
      for (var _j = 0; _j < __wectc.Length; ++_j) { __wectc[_j] = builder.CreateString(_o.Wectc[_j]); }
      _wectc = CreateWectcVector(builder, __wectc);
    }
    var _artsqual = _o.Artsqual == null ? default(StringOffset) : builder.CreateString(_o.Artsqual);
    var _trkelig = _o.Trkelig == null ? default(StringOffset) : builder.CreateString(_o.Trkelig);
    var _tgtconf = _o.Tgtconf == null ? default(StringOffset) : builder.CreateString(_o.Tgtconf);
    var _tgtcorr = _o.Tgtcorr == null ? default(StringOffset) : builder.CreateString(_o.Tgtcorr);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateMonoRadar_Abridged(
      builder,
      _id,
      _classificationMarking,
      _tti,
      _idSensor,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.Sac,
      _o.Sic,
      _tgtid,
      _addr,
      _msgfmt,
      _msgtyp,
      _o.Af,
      _o.Faa,
      _o.Spi,
      _o.Aims,
      _o.Mti,
      _o.Bcnhits,
      _ts,
      _msgts,
      _o.Rng,
      _o.Az,
      _o.Acp,
      _o.Alt3d,
      _o.Mc,
      _mcv,
      _o.Mcg,
      _m1,
      _m1v,
      _o.M1g,
      _m2,
      _m2v,
      _m2xv,
      _o.M2g,
      _m3a,
      _m3av,
      _o.M3ag,
      _m3axv,
      _m4,
      _m4v,
      _m4d1d2,
      _mscommb,
      _o.Milemrgcy,
      _o.Code7500,
      _o.Code7600,
      _o.Code7700,
      _o.Grndspd,
      _o.Hdng,
      _o.Trknum,
      _rad,
      _mah,
      _cdm,
      _cartpos,
      _o.Psrrl,
      _o.Ssrl,
      _o.Rngdelt,
      _o.Azdelt,
      _wectc,
      _o.Mrgrpt,
      _artsqual,
      _trkelig,
      _tgtconf,
      _tgtcorr,
      _o.Tis,
      _tags,
      _origSensorId,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class MonoRadar_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Tti { get; set; }
  public string IdSensor { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public int Sac { get; set; }
  public int Sic { get; set; }
  public string Tgtid { get; set; }
  public string Addr { get; set; }
  public string Msgfmt { get; set; }
  public string Msgtyp { get; set; }
  public bool Af { get; set; }
  public bool Faa { get; set; }
  public bool Spi { get; set; }
  public bool Aims { get; set; }
  public bool Mti { get; set; }
  public int Bcnhits { get; set; }
  public string Ts { get; set; }
  public string Msgts { get; set; }
  public double Rng { get; set; }
  public double Az { get; set; }
  public int Acp { get; set; }
  public double Alt3d { get; set; }
  public double Mc { get; set; }
  public string Mcv { get; set; }
  public bool Mcg { get; set; }
  public string M1 { get; set; }
  public string M1v { get; set; }
  public bool M1g { get; set; }
  public string M2 { get; set; }
  public string M2v { get; set; }
  public string M2xv { get; set; }
  public bool M2g { get; set; }
  public string M3a { get; set; }
  public string M3av { get; set; }
  public bool M3ag { get; set; }
  public string M3axv { get; set; }
  public string M4 { get; set; }
  public string M4v { get; set; }
  public string M4d1d2 { get; set; }
  public string Mscommb { get; set; }
  public bool Milemrgcy { get; set; }
  public bool Code7500 { get; set; }
  public bool Code7600 { get; set; }
  public bool Code7700 { get; set; }
  public double Grndspd { get; set; }
  public double Hdng { get; set; }
  public int Trknum { get; set; }
  public string Rad { get; set; }
  public string Mah { get; set; }
  public string Cdm { get; set; }
  public List<string> Cartpos { get; set; }
  public double Psrrl { get; set; }
  public double Ssrl { get; set; }
  public double Rngdelt { get; set; }
  public double Azdelt { get; set; }
  public List<string> Wectc { get; set; }
  public bool Mrgrpt { get; set; }
  public string Artsqual { get; set; }
  public string Trkelig { get; set; }
  public string Tgtconf { get; set; }
  public string Tgtcorr { get; set; }
  public double Tis { get; set; }
  public List<string> Tags { get; set; }
  public string OrigSensorId { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public MonoRadar_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public MonoRadar_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Tti = null;
    this.IdSensor = null;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Sac = 0;
    this.Sic = 0;
    this.Tgtid = null;
    this.Addr = null;
    this.Msgfmt = null;
    this.Msgtyp = null;
    this.Af = false;
    this.Faa = false;
    this.Spi = false;
    this.Aims = false;
    this.Mti = false;
    this.Bcnhits = 0;
    this.Ts = null;
    this.Msgts = null;
    this.Rng = 0.0;
    this.Az = 0.0;
    this.Acp = 0;
    this.Alt3d = 0.0;
    this.Mc = 0.0;
    this.Mcv = null;
    this.Mcg = false;
    this.M1 = null;
    this.M1v = null;
    this.M1g = false;
    this.M2 = null;
    this.M2v = null;
    this.M2xv = null;
    this.M2g = false;
    this.M3a = null;
    this.M3av = null;
    this.M3ag = false;
    this.M3axv = null;
    this.M4 = null;
    this.M4v = null;
    this.M4d1d2 = null;
    this.Mscommb = null;
    this.Milemrgcy = false;
    this.Code7500 = false;
    this.Code7600 = false;
    this.Code7700 = false;
    this.Grndspd = 0.0;
    this.Hdng = 0.0;
    this.Trknum = 0;
    this.Rad = null;
    this.Mah = null;
    this.Cdm = null;
    this.Cartpos = null;
    this.Psrrl = 0.0;
    this.Ssrl = 0.0;
    this.Rngdelt = 0.0;
    this.Azdelt = 0.0;
    this.Wectc = null;
    this.Mrgrpt = false;
    this.Artsqual = null;
    this.Trkelig = null;
    this.Tgtconf = null;
    this.Tgtcorr = null;
    this.Tis = 0.0;
    this.Tags = null;
    this.OrigSensorId = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = MonoRadar_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static MonoRadar_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return MonoRadar_Abridged.GetRootAsMonoRadar_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MonoRadar_Abridged.FinishMonoRadar_AbridgedBuffer(fbb, MonoRadar_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MonoRadar_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Tti*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSensor*/, false)
      && verifier.VerifyField(tablePos, 12 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Sac*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Sic*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*Tgtid*/, false)
      && verifier.VerifyString(tablePos, 24 /*Addr*/, false)
      && verifier.VerifyString(tablePos, 26 /*Msgfmt*/, false)
      && verifier.VerifyString(tablePos, 28 /*Msgtyp*/, false)
      && verifier.VerifyField(tablePos, 30 /*Af*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*Faa*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*Spi*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*Aims*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*Mti*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 40 /*Bcnhits*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 42 /*Ts*/, false)
      && verifier.VerifyString(tablePos, 44 /*Msgts*/, false)
      && verifier.VerifyField(tablePos, 46 /*Rng*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*Az*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Acp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Alt3d*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Mc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*Mcv*/, false)
      && verifier.VerifyField(tablePos, 58 /*Mcg*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 60 /*M1*/, false)
      && verifier.VerifyString(tablePos, 62 /*M1v*/, false)
      && verifier.VerifyField(tablePos, 64 /*M1g*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 66 /*M2*/, false)
      && verifier.VerifyString(tablePos, 68 /*M2v*/, false)
      && verifier.VerifyString(tablePos, 70 /*M2xv*/, false)
      && verifier.VerifyField(tablePos, 72 /*M2g*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 74 /*M3a*/, false)
      && verifier.VerifyString(tablePos, 76 /*M3av*/, false)
      && verifier.VerifyField(tablePos, 78 /*M3ag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 80 /*M3axv*/, false)
      && verifier.VerifyString(tablePos, 82 /*M4*/, false)
      && verifier.VerifyString(tablePos, 84 /*M4v*/, false)
      && verifier.VerifyString(tablePos, 86 /*M4d1d2*/, false)
      && verifier.VerifyString(tablePos, 88 /*Mscommb*/, false)
      && verifier.VerifyField(tablePos, 90 /*Milemrgcy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 92 /*Code7500*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 94 /*Code7600*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 96 /*Code7700*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 98 /*Grndspd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*Hdng*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*Trknum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 104 /*Rad*/, false)
      && verifier.VerifyString(tablePos, 106 /*Mah*/, false)
      && verifier.VerifyString(tablePos, 108 /*Cdm*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 110 /*Cartpos*/, false)
      && verifier.VerifyField(tablePos, 112 /*Psrrl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*Ssrl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*Rngdelt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*Azdelt*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 120 /*Wectc*/, false)
      && verifier.VerifyField(tablePos, 122 /*Mrgrpt*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 124 /*Artsqual*/, false)
      && verifier.VerifyString(tablePos, 126 /*Trkelig*/, false)
      && verifier.VerifyString(tablePos, 128 /*Tgtconf*/, false)
      && verifier.VerifyString(tablePos, 130 /*Tgtcorr*/, false)
      && verifier.VerifyField(tablePos, 132 /*Tis*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 134 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 136 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 138 /*Source*/, false)
      && verifier.VerifyString(tablePos, 140 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 142 /*DataMode*/, 1 /*MonoRadar_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 144 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 146 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 148 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
