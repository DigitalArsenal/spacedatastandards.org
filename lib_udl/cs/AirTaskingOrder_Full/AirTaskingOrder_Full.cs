// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
public struct AirTaskingOrder_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirTaskingOrder_Full GetRootAsAirTaskingOrder_Full(ByteBuffer _bb) { return GetRootAsAirTaskingOrder_Full(_bb, new AirTaskingOrder_Full()); }
  public static AirTaskingOrder_Full GetRootAsAirTaskingOrder_Full(ByteBuffer _bb, AirTaskingOrder_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirTaskingOrder_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRT"); }
  public static bool VerifyAirTaskingOrder_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRT", false, AirTaskingOrder_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirTaskingOrder_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(8); }
  /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string OpExerName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExerNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOpExerNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOpExerNameArray() { return __p.__vector_as_array<byte>(10); }
  /// The identifier of the originator of the message.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MsgOriginator { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgOriginatorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMsgOriginatorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMsgOriginatorArray() { return __p.__vector_as_array<byte>(12); }
  /// The unique message identifier sequentially assigned by the originator.
  /// Example: /// Example: ATO A
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MsgSN { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgSNBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMsgSNBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMsgSNArray() { return __p.__vector_as_array<byte>(14); }
  /// The month in which the message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MsgMonth { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgMonthBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMsgMonthBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMsgMonthArray() { return __p.__vector_as_array<byte>(16); }
  /// The qualifier which caveats the message status.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string MsgQualifier { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgQualifierBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMsgQualifierBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMsgQualifierArray() { return __p.__vector_as_array<byte>(18); }
  /// The indicator specifying an affirmative or a negatice condition for this message.
  /// Example: /// Example: YES
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string AckReqInd { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAckReqIndBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAckReqIndBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAckReqIndArray() { return __p.__vector_as_array<byte>(20); }
  /// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
  /// Example: /// Example: INST:45TS
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AckUnitInstructions { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAckUnitInstructionsBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAckUnitInstructionsBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAckUnitInstructionsArray() { return __p.__vector_as_array<byte>(22); }
  /// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string BeginTs { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeginTsBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetBeginTsBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetBeginTsArray() { return __p.__vector_as_array<byte>(24); }
  /// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-27T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string EndTs { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTsBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEndTsBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEndTsArray() { return __p.__vector_as_array<byte>(26); }
  /// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string GenText(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GenTextLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AcMsnTasking(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AcMsnTaskingLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A collection that specifies the naval flight operations for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string NavalFltOps(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NavalFltOpsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(34); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(36); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(38); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(40); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(42); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(44); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirTaskingOrder_Full_dataMode_Enum DataMode { get { int o = __p.__offset(46); return o != 0 ? (AirTaskingOrder_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirTaskingOrder_Full_dataMode_Enum.REAL; } }

  public static Offset<AirTaskingOrder_Full> CreateAirTaskingOrder_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset opExerNameOffset = default(StringOffset),
      StringOffset msgOriginatorOffset = default(StringOffset),
      StringOffset msgSNOffset = default(StringOffset),
      StringOffset msgMonthOffset = default(StringOffset),
      StringOffset msgQualifierOffset = default(StringOffset),
      StringOffset ackReqIndOffset = default(StringOffset),
      StringOffset ackUnitInstructionsOffset = default(StringOffset),
      StringOffset beginTsOffset = default(StringOffset),
      StringOffset endTsOffset = default(StringOffset),
      VectorOffset genTextOffset = default(VectorOffset),
      VectorOffset acMsnTaskingOffset = default(VectorOffset),
      VectorOffset navalFltOpsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirTaskingOrder_Full_dataMode_Enum dataMode = AirTaskingOrder_Full_dataMode_Enum.REAL) {
    builder.StartTable(22);
    AirTaskingOrder_Full.AddOrigNetwork(builder, origNetworkOffset);
    AirTaskingOrder_Full.AddOrigin(builder, originOffset);
    AirTaskingOrder_Full.AddSourceDL(builder, sourceDLOffset);
    AirTaskingOrder_Full.AddSource(builder, sourceOffset);
    AirTaskingOrder_Full.AddCreatedBy(builder, createdByOffset);
    AirTaskingOrder_Full.AddCreatedAt(builder, createdAtOffset);
    AirTaskingOrder_Full.AddNavalFltOps(builder, navalFltOpsOffset);
    AirTaskingOrder_Full.AddAcMsnTasking(builder, acMsnTaskingOffset);
    AirTaskingOrder_Full.AddGenText(builder, genTextOffset);
    AirTaskingOrder_Full.AddEndTs(builder, endTsOffset);
    AirTaskingOrder_Full.AddBeginTs(builder, beginTsOffset);
    AirTaskingOrder_Full.AddAckUnitInstructions(builder, ackUnitInstructionsOffset);
    AirTaskingOrder_Full.AddAckReqInd(builder, ackReqIndOffset);
    AirTaskingOrder_Full.AddMsgQualifier(builder, msgQualifierOffset);
    AirTaskingOrder_Full.AddMsgMonth(builder, msgMonthOffset);
    AirTaskingOrder_Full.AddMsgSN(builder, msgSNOffset);
    AirTaskingOrder_Full.AddMsgOriginator(builder, msgOriginatorOffset);
    AirTaskingOrder_Full.AddOpExerName(builder, opExerNameOffset);
    AirTaskingOrder_Full.AddRawFileURI(builder, rawFileURIOffset);
    AirTaskingOrder_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    AirTaskingOrder_Full.AddId(builder, idOffset);
    AirTaskingOrder_Full.AddDataMode(builder, dataMode);
    return AirTaskingOrder_Full.EndAirTaskingOrder_Full(builder);
  }

  public static void StartAirTaskingOrder_Full(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(2, rawFileURIOffset.Value, 0); }
  public static void AddOpExerName(FlatBufferBuilder builder, StringOffset opExerNameOffset) { builder.AddOffset(3, opExerNameOffset.Value, 0); }
  public static void AddMsgOriginator(FlatBufferBuilder builder, StringOffset msgOriginatorOffset) { builder.AddOffset(4, msgOriginatorOffset.Value, 0); }
  public static void AddMsgSN(FlatBufferBuilder builder, StringOffset msgSNOffset) { builder.AddOffset(5, msgSNOffset.Value, 0); }
  public static void AddMsgMonth(FlatBufferBuilder builder, StringOffset msgMonthOffset) { builder.AddOffset(6, msgMonthOffset.Value, 0); }
  public static void AddMsgQualifier(FlatBufferBuilder builder, StringOffset msgQualifierOffset) { builder.AddOffset(7, msgQualifierOffset.Value, 0); }
  public static void AddAckReqInd(FlatBufferBuilder builder, StringOffset ackReqIndOffset) { builder.AddOffset(8, ackReqIndOffset.Value, 0); }
  public static void AddAckUnitInstructions(FlatBufferBuilder builder, StringOffset ackUnitInstructionsOffset) { builder.AddOffset(9, ackUnitInstructionsOffset.Value, 0); }
  public static void AddBeginTs(FlatBufferBuilder builder, StringOffset beginTsOffset) { builder.AddOffset(10, beginTsOffset.Value, 0); }
  public static void AddEndTs(FlatBufferBuilder builder, StringOffset endTsOffset) { builder.AddOffset(11, endTsOffset.Value, 0); }
  public static void AddGenText(FlatBufferBuilder builder, VectorOffset genTextOffset) { builder.AddOffset(12, genTextOffset.Value, 0); }
  public static VectorOffset CreateGenTextVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGenTextVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGenTextVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGenTextVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGenTextVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAcMsnTasking(FlatBufferBuilder builder, VectorOffset acMsnTaskingOffset) { builder.AddOffset(13, acMsnTaskingOffset.Value, 0); }
  public static VectorOffset CreateAcMsnTaskingVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnTaskingVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnTaskingVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnTaskingVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAcMsnTaskingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNavalFltOps(FlatBufferBuilder builder, VectorOffset navalFltOpsOffset) { builder.AddOffset(14, navalFltOpsOffset.Value, 0); }
  public static VectorOffset CreateNavalFltOpsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNavalFltOpsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNavalFltOpsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNavalFltOpsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNavalFltOpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(15, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(16, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(17, sourceOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(18, sourceDLOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(19, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(20, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirTaskingOrder_Full_dataMode_Enum dataMode) { builder.AddSbyte(21, (sbyte)dataMode, 0); }
  public static Offset<AirTaskingOrder_Full> EndAirTaskingOrder_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirTaskingOrder_Full>(o);
  }
  public static void FinishAirTaskingOrder_FullBuffer(FlatBufferBuilder builder, Offset<AirTaskingOrder_Full> offset) { builder.Finish(offset.Value, "AIRT"); }
  public static void FinishSizePrefixedAirTaskingOrder_FullBuffer(FlatBufferBuilder builder, Offset<AirTaskingOrder_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRT"); }
  public AirTaskingOrder_FullT UnPack() {
    var _o = new AirTaskingOrder_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirTaskingOrder_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.RawFileURI = this.RawFileURI;
    _o.OpExerName = this.OpExerName;
    _o.MsgOriginator = this.MsgOriginator;
    _o.MsgSN = this.MsgSN;
    _o.MsgMonth = this.MsgMonth;
    _o.MsgQualifier = this.MsgQualifier;
    _o.AckReqInd = this.AckReqInd;
    _o.AckUnitInstructions = this.AckUnitInstructions;
    _o.BeginTs = this.BeginTs;
    _o.EndTs = this.EndTs;
    _o.GenText = new List<string>();
    for (var _j = 0; _j < this.GenTextLength; ++_j) {_o.GenText.Add(this.GenText(_j));}
    _o.AcMsnTasking = new List<string>();
    for (var _j = 0; _j < this.AcMsnTaskingLength; ++_j) {_o.AcMsnTasking.Add(this.AcMsnTasking(_j));}
    _o.NavalFltOps = new List<string>();
    for (var _j = 0; _j < this.NavalFltOpsLength; ++_j) {_o.NavalFltOps.Add(this.NavalFltOps(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.SourceDL = this.SourceDL;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirTaskingOrder_Full> Pack(FlatBufferBuilder builder, AirTaskingOrder_FullT _o) {
    if (_o == null) return default(Offset<AirTaskingOrder_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _opExerName = _o.OpExerName == null ? default(StringOffset) : builder.CreateString(_o.OpExerName);
    var _msgOriginator = _o.MsgOriginator == null ? default(StringOffset) : builder.CreateString(_o.MsgOriginator);
    var _msgSN = _o.MsgSN == null ? default(StringOffset) : builder.CreateString(_o.MsgSN);
    var _msgMonth = _o.MsgMonth == null ? default(StringOffset) : builder.CreateString(_o.MsgMonth);
    var _msgQualifier = _o.MsgQualifier == null ? default(StringOffset) : builder.CreateString(_o.MsgQualifier);
    var _ackReqInd = _o.AckReqInd == null ? default(StringOffset) : builder.CreateString(_o.AckReqInd);
    var _ackUnitInstructions = _o.AckUnitInstructions == null ? default(StringOffset) : builder.CreateString(_o.AckUnitInstructions);
    var _beginTs = _o.BeginTs == null ? default(StringOffset) : builder.CreateString(_o.BeginTs);
    var _endTs = _o.EndTs == null ? default(StringOffset) : builder.CreateString(_o.EndTs);
    var _genText = default(VectorOffset);
    if (_o.GenText != null) {
      var __genText = new StringOffset[_o.GenText.Count];
      for (var _j = 0; _j < __genText.Length; ++_j) { __genText[_j] = builder.CreateString(_o.GenText[_j]); }
      _genText = CreateGenTextVector(builder, __genText);
    }
    var _acMsnTasking = default(VectorOffset);
    if (_o.AcMsnTasking != null) {
      var __acMsnTasking = new StringOffset[_o.AcMsnTasking.Count];
      for (var _j = 0; _j < __acMsnTasking.Length; ++_j) { __acMsnTasking[_j] = builder.CreateString(_o.AcMsnTasking[_j]); }
      _acMsnTasking = CreateAcMsnTaskingVector(builder, __acMsnTasking);
    }
    var _navalFltOps = default(VectorOffset);
    if (_o.NavalFltOps != null) {
      var __navalFltOps = new StringOffset[_o.NavalFltOps.Count];
      for (var _j = 0; _j < __navalFltOps.Length; ++_j) { __navalFltOps[_j] = builder.CreateString(_o.NavalFltOps[_j]); }
      _navalFltOps = CreateNavalFltOpsVector(builder, __navalFltOps);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirTaskingOrder_Full(
      builder,
      _id,
      _classificationMarking,
      _rawFileURI,
      _opExerName,
      _msgOriginator,
      _msgSN,
      _msgMonth,
      _msgQualifier,
      _ackReqInd,
      _ackUnitInstructions,
      _beginTs,
      _endTs,
      _genText,
      _acMsnTasking,
      _navalFltOps,
      _createdAt,
      _createdBy,
      _source,
      _sourceDL,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirTaskingOrder_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string RawFileURI { get; set; }
  public string OpExerName { get; set; }
  public string MsgOriginator { get; set; }
  public string MsgSN { get; set; }
  public string MsgMonth { get; set; }
  public string MsgQualifier { get; set; }
  public string AckReqInd { get; set; }
  public string AckUnitInstructions { get; set; }
  public string BeginTs { get; set; }
  public string EndTs { get; set; }
  public List<string> GenText { get; set; }
  public List<string> AcMsnTasking { get; set; }
  public List<string> NavalFltOps { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string SourceDL { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirTaskingOrder_Full_dataMode_Enum DataMode { get; set; }

  public AirTaskingOrder_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.RawFileURI = null;
    this.OpExerName = null;
    this.MsgOriginator = null;
    this.MsgSN = null;
    this.MsgMonth = null;
    this.MsgQualifier = null;
    this.AckReqInd = null;
    this.AckUnitInstructions = null;
    this.BeginTs = null;
    this.EndTs = null;
    this.GenText = null;
    this.AcMsnTasking = null;
    this.NavalFltOps = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.SourceDL = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirTaskingOrder_Full_dataMode_Enum.REAL;
  }
  public static AirTaskingOrder_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirTaskingOrder_Full.GetRootAsAirTaskingOrder_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirTaskingOrder_Full.FinishAirTaskingOrder_FullBuffer(fbb, AirTaskingOrder_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirTaskingOrder_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 10 /*OpExerName*/, false)
      && verifier.VerifyString(tablePos, 12 /*MsgOriginator*/, false)
      && verifier.VerifyString(tablePos, 14 /*MsgSN*/, false)
      && verifier.VerifyString(tablePos, 16 /*MsgMonth*/, false)
      && verifier.VerifyString(tablePos, 18 /*MsgQualifier*/, false)
      && verifier.VerifyString(tablePos, 20 /*AckReqInd*/, false)
      && verifier.VerifyString(tablePos, 22 /*AckUnitInstructions*/, false)
      && verifier.VerifyString(tablePos, 24 /*BeginTs*/, false)
      && verifier.VerifyString(tablePos, 26 /*EndTs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*GenText*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*AcMsnTasking*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*NavalFltOps*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 36 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 38 /*Source*/, false)
      && verifier.VerifyString(tablePos, 40 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 42 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 44 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 46 /*DataMode*/, 1 /*AirTaskingOrder_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
