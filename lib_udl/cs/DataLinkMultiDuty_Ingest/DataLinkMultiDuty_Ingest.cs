// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
public struct DataLinkMultiDuty_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLinkMultiDuty_Ingest GetRootAsDataLinkMultiDuty_Ingest(ByteBuffer _bb) { return GetRootAsDataLinkMultiDuty_Ingest(_bb, new DataLinkMultiDuty_Ingest()); }
  public static DataLinkMultiDuty_Ingest GetRootAsDataLinkMultiDuty_Ingest(ByteBuffer _bb, DataLinkMultiDuty_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLinkMultiDuty_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLinkMultiDuty_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLinkMultiDuty_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLinkMultiDuty_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Designated force of unit specified by ship name, unit call sign, or unit designator.
  /// Example: /// Example: SHIP:STENNIS
  /// Constraints: Minimum length = 0, Maximum length = 38
  public string UnitDes { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitDesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUnitDesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUnitDesArray() { return __p.__vector_as_array<byte>(4); }
  /// The name of the person to be contacted for multilink coordination.
  /// Example: /// Example: POPOVICH
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// The rank or position of the person to be contacted for multilink coordination.
  /// Example: /// Example: LCDR
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Rank { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRankBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRankBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRankArray() { return __p.__vector_as_array<byte>(8); }
  /// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
  /// Example: /// Example: SICO
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Duty { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDutyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDutyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDutyArray() { return __p.__vector_as_array<byte>(10); }
  /// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  public string DutyTeleFreqNums(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DutyTeleFreqNumsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string MultiDutyVoiceCoord(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MultiDutyVoiceCoordLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DataLinkMultiDuty_Ingest> CreateDataLinkMultiDuty_Ingest(FlatBufferBuilder builder,
      StringOffset unitDesOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset rankOffset = default(StringOffset),
      StringOffset dutyOffset = default(StringOffset),
      VectorOffset dutyTeleFreqNumsOffset = default(VectorOffset),
      VectorOffset multiDutyVoiceCoordOffset = default(VectorOffset)) {
    builder.StartTable(6);
    DataLinkMultiDuty_Ingest.AddMultiDutyVoiceCoord(builder, multiDutyVoiceCoordOffset);
    DataLinkMultiDuty_Ingest.AddDutyTeleFreqNums(builder, dutyTeleFreqNumsOffset);
    DataLinkMultiDuty_Ingest.AddDuty(builder, dutyOffset);
    DataLinkMultiDuty_Ingest.AddRank(builder, rankOffset);
    DataLinkMultiDuty_Ingest.AddName(builder, nameOffset);
    DataLinkMultiDuty_Ingest.AddUnitDes(builder, unitDesOffset);
    return DataLinkMultiDuty_Ingest.EndDataLinkMultiDuty_Ingest(builder);
  }

  public static void StartDataLinkMultiDuty_Ingest(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUnitDes(FlatBufferBuilder builder, StringOffset unitDesOffset) { builder.AddOffset(0, unitDesOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddRank(FlatBufferBuilder builder, StringOffset rankOffset) { builder.AddOffset(2, rankOffset.Value, 0); }
  public static void AddDuty(FlatBufferBuilder builder, StringOffset dutyOffset) { builder.AddOffset(3, dutyOffset.Value, 0); }
  public static void AddDutyTeleFreqNums(FlatBufferBuilder builder, VectorOffset dutyTeleFreqNumsOffset) { builder.AddOffset(4, dutyTeleFreqNumsOffset.Value, 0); }
  public static VectorOffset CreateDutyTeleFreqNumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDutyTeleFreqNumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDutyTeleFreqNumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDutyTeleFreqNumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDutyTeleFreqNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMultiDutyVoiceCoord(FlatBufferBuilder builder, VectorOffset multiDutyVoiceCoordOffset) { builder.AddOffset(5, multiDutyVoiceCoordOffset.Value, 0); }
  public static VectorOffset CreateMultiDutyVoiceCoordVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVoiceCoordVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVoiceCoordVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVoiceCoordVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiDutyVoiceCoordVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DataLinkMultiDuty_Ingest> EndDataLinkMultiDuty_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLinkMultiDuty_Ingest>(o);
  }
  public static void FinishDataLinkMultiDuty_IngestBuffer(FlatBufferBuilder builder, Offset<DataLinkMultiDuty_Ingest> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLinkMultiDuty_IngestBuffer(FlatBufferBuilder builder, Offset<DataLinkMultiDuty_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLinkMultiDuty_IngestT UnPack() {
    var _o = new DataLinkMultiDuty_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLinkMultiDuty_IngestT _o) {
    _o.UnitDes = this.UnitDes;
    _o.Name = this.Name;
    _o.Rank = this.Rank;
    _o.Duty = this.Duty;
    _o.DutyTeleFreqNums = new List<string>();
    for (var _j = 0; _j < this.DutyTeleFreqNumsLength; ++_j) {_o.DutyTeleFreqNums.Add(this.DutyTeleFreqNums(_j));}
    _o.MultiDutyVoiceCoord = new List<string>();
    for (var _j = 0; _j < this.MultiDutyVoiceCoordLength; ++_j) {_o.MultiDutyVoiceCoord.Add(this.MultiDutyVoiceCoord(_j));}
  }
  public static Offset<DataLinkMultiDuty_Ingest> Pack(FlatBufferBuilder builder, DataLinkMultiDuty_IngestT _o) {
    if (_o == null) return default(Offset<DataLinkMultiDuty_Ingest>);
    var _unitDes = _o.UnitDes == null ? default(StringOffset) : builder.CreateString(_o.UnitDes);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _rank = _o.Rank == null ? default(StringOffset) : builder.CreateString(_o.Rank);
    var _duty = _o.Duty == null ? default(StringOffset) : builder.CreateString(_o.Duty);
    var _dutyTeleFreqNums = default(VectorOffset);
    if (_o.DutyTeleFreqNums != null) {
      var __dutyTeleFreqNums = new StringOffset[_o.DutyTeleFreqNums.Count];
      for (var _j = 0; _j < __dutyTeleFreqNums.Length; ++_j) { __dutyTeleFreqNums[_j] = builder.CreateString(_o.DutyTeleFreqNums[_j]); }
      _dutyTeleFreqNums = CreateDutyTeleFreqNumsVector(builder, __dutyTeleFreqNums);
    }
    var _multiDutyVoiceCoord = default(VectorOffset);
    if (_o.MultiDutyVoiceCoord != null) {
      var __multiDutyVoiceCoord = new StringOffset[_o.MultiDutyVoiceCoord.Count];
      for (var _j = 0; _j < __multiDutyVoiceCoord.Length; ++_j) { __multiDutyVoiceCoord[_j] = builder.CreateString(_o.MultiDutyVoiceCoord[_j]); }
      _multiDutyVoiceCoord = CreateMultiDutyVoiceCoordVector(builder, __multiDutyVoiceCoord);
    }
    return CreateDataLinkMultiDuty_Ingest(
      builder,
      _unitDes,
      _name,
      _rank,
      _duty,
      _dutyTeleFreqNums,
      _multiDutyVoiceCoord);
  }
}

public class DataLinkMultiDuty_IngestT
{
  public string UnitDes { get; set; }
  public string Name { get; set; }
  public string Rank { get; set; }
  public string Duty { get; set; }
  public List<string> DutyTeleFreqNums { get; set; }
  public List<string> MultiDutyVoiceCoord { get; set; }

  public DataLinkMultiDuty_IngestT() {
    this.UnitDes = null;
    this.Name = null;
    this.Rank = null;
    this.Duty = null;
    this.DutyTeleFreqNums = null;
    this.MultiDutyVoiceCoord = null;
  }
  public static DataLinkMultiDuty_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLinkMultiDuty_Ingest.GetRootAsDataLinkMultiDuty_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLinkMultiDuty_Ingest.FinishDataLinkMultiDuty_IngestBuffer(fbb, DataLinkMultiDuty_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLinkMultiDuty_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*UnitDes*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*Rank*/, false)
      && verifier.VerifyString(tablePos, 10 /*Duty*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*DutyTeleFreqNums*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*MultiDutyVoiceCoord*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
