// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Identity and medical information on the patient to be evacuated.
public struct EvacCasualtyInfo_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacCasualtyInfo_Abridged GetRootAsEvacCasualtyInfo_Abridged(ByteBuffer _bb) { return GetRootAsEvacCasualtyInfo_Abridged(_bb, new EvacCasualtyInfo_Abridged()); }
  public static EvacCasualtyInfo_Abridged GetRootAsEvacCasualtyInfo_Abridged(ByteBuffer _bb, EvacCasualtyInfo_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacCasualtyInfo_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacCasualtyInfo_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacCasualtyInfo_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacCasualtyInfo_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
  /// Example: /// Example: ROUTINE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Priority { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriorityBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPriorityBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPriorityArray() { return __p.__vector_as_array<byte>(4); }
  /// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
  /// Example: /// Example: GROUND
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EvacType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEvacTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEvacTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEvacTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
  /// Example: /// Example: DENTAL
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CasualtyType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCasualtyTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCasualtyTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCasualtyTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
  /// Example: /// Example: FACE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string BodyPart { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBodyPartBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBodyPartBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBodyPartArray() { return __p.__vector_as_array<byte>(10); }
  /// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
  /// Example: /// Example: NONE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ContamType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContamTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetContamTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetContamTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
  /// Example: /// Example: ['OXYGEN', 'HOIST']
  /// Constraints: No constraints specified.
  public string SpecMedEquip(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpecMedEquipLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional casualty key.
  /// Example: /// Example: casualty-007
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CasualtyKey { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCasualtyKeyBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCasualtyKeyBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCasualtyKeyArray() { return __p.__vector_as_array<byte>(16); }
  /// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
  /// Example: /// Example: US CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string PatientStatus { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPatientStatusBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPatientStatusBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPatientStatusArray() { return __p.__vector_as_array<byte>(18); }
  /// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  /// Example: /// Example: FRIEND CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string PatientIdentity { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPatientIdentityBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPatientIdentityBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPatientIdentityArray() { return __p.__vector_as_array<byte>(20); }
  /// The country code indicating the citizenship of the patient.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Nationality { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNationalityBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNationalityBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNationalityArray() { return __p.__vector_as_array<byte>(22); }
  /// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
  /// Example: /// Example: CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PayGrade { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPayGradeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPayGradeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPayGradeArray() { return __p.__vector_as_array<byte>(24); }
  /// The patient common or legal name.
  /// Example: /// Example: John Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Name { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(26); }
  /// The patient age, in years.
  /// Example: /// Example: 35
  /// Constraints: No constraints specified.
  public int Age { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The patient sex (MALE, FEMALE).
  /// Example: /// Example: MALE
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Gender { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGenderBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetGenderBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetGenderArray() { return __p.__vector_as_array<byte>(30); }
  /// Last 4 characters of the patient social security code, or equivalent.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Last4SSN { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLast4SSNBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetLast4SSNBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetLast4SSNArray() { return __p.__vector_as_array<byte>(32); }
  /// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
  /// Example: /// Example: O NEG
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string BloodType { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBloodTypeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetBloodTypeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetBloodTypeArray() { return __p.__vector_as_array<byte>(34); }
  /// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
  /// Example: /// Example: CIV
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Service { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetServiceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetServiceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetServiceArray() { return __p.__vector_as_array<byte>(36); }
  /// The call sign of this patient.
  /// Example: /// Example: SHARK
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string CallSign { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(38); }
  /// The career field of this patient.
  /// Example: /// Example: Healthcare
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string OccSpeciality { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOccSpecialityBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOccSpecialityBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOccSpecialityArray() { return __p.__vector_as_array<byte>(40); }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [-33.123, 150.33, 0.24]
  /// Constraints: No constraints specified.
  public string BurialLocation(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BurialLocationLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [12.44, 122.55, 0.98]
  /// Constraints: No constraints specified.
  public string CollectionPoint(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CollectionPointLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Unique identifier for the patient care provider.
  /// Example: /// Example: CARE_PROVIDER-1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CareProviderUrn { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCareProviderUrnBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetCareProviderUrnBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetCareProviderUrnArray() { return __p.__vector_as_array<byte>(46); }
  /// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
  /// Example: /// Example: EVACUATE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string DispositionType { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDispositionTypeBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetDispositionTypeBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetDispositionTypeArray() { return __p.__vector_as_array<byte>(48); }
  /// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
  /// Example: /// Example: EVACUATE WOUNDED
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Disposition { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDispositionBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetDispositionBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetDispositionArray() { return __p.__vector_as_array<byte>(50); }
  /// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
  /// Example: /// Example: DEVICE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ReportGen { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportGenBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetReportGenBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetReportGenArray() { return __p.__vector_as_array<byte>(52); }
  /// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ReportTime { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportTimeBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetReportTimeBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetReportTimeArray() { return __p.__vector_as_array<byte>(54); }
  /// Additional comments on the  patient's casualty information.
  /// Example: /// Example: Comments relating to this casualty info.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Comments { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(56); }
  /// Medical condition causation information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Etiology(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EtiologyLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Treatment information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Treatment(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TreatmentLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Information obtained for vital signs.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string VitalSignData(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VitalSignDataLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Health state information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string HealthState(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int HealthStateLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Health condition information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Condition(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ConditionLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Medication specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Medication(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MedicationLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Injury specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Injury(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InjuryLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Allergy information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Allergy(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AllergyLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<EvacCasualtyInfo_Abridged> CreateEvacCasualtyInfo_Abridged(FlatBufferBuilder builder,
      StringOffset priorityOffset = default(StringOffset),
      StringOffset evacTypeOffset = default(StringOffset),
      StringOffset casualtyTypeOffset = default(StringOffset),
      StringOffset bodyPartOffset = default(StringOffset),
      StringOffset contamTypeOffset = default(StringOffset),
      VectorOffset specMedEquipOffset = default(VectorOffset),
      StringOffset casualtyKeyOffset = default(StringOffset),
      StringOffset patientStatusOffset = default(StringOffset),
      StringOffset patientIdentityOffset = default(StringOffset),
      StringOffset nationalityOffset = default(StringOffset),
      StringOffset payGradeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int age = 0,
      StringOffset genderOffset = default(StringOffset),
      StringOffset last4SSNOffset = default(StringOffset),
      StringOffset bloodTypeOffset = default(StringOffset),
      StringOffset serviceOffset = default(StringOffset),
      StringOffset callSignOffset = default(StringOffset),
      StringOffset occSpecialityOffset = default(StringOffset),
      VectorOffset burialLocationOffset = default(VectorOffset),
      VectorOffset collectionPointOffset = default(VectorOffset),
      StringOffset careProviderUrnOffset = default(StringOffset),
      StringOffset dispositionTypeOffset = default(StringOffset),
      StringOffset dispositionOffset = default(StringOffset),
      StringOffset reportGenOffset = default(StringOffset),
      StringOffset reportTimeOffset = default(StringOffset),
      StringOffset commentsOffset = default(StringOffset),
      VectorOffset etiologyOffset = default(VectorOffset),
      VectorOffset treatmentOffset = default(VectorOffset),
      VectorOffset vitalSignDataOffset = default(VectorOffset),
      VectorOffset healthStateOffset = default(VectorOffset),
      VectorOffset conditionOffset = default(VectorOffset),
      VectorOffset medicationOffset = default(VectorOffset),
      VectorOffset injuryOffset = default(VectorOffset),
      VectorOffset allergyOffset = default(VectorOffset)) {
    builder.StartTable(35);
    EvacCasualtyInfo_Abridged.AddAllergy(builder, allergyOffset);
    EvacCasualtyInfo_Abridged.AddInjury(builder, injuryOffset);
    EvacCasualtyInfo_Abridged.AddMedication(builder, medicationOffset);
    EvacCasualtyInfo_Abridged.AddCondition(builder, conditionOffset);
    EvacCasualtyInfo_Abridged.AddHealthState(builder, healthStateOffset);
    EvacCasualtyInfo_Abridged.AddVitalSignData(builder, vitalSignDataOffset);
    EvacCasualtyInfo_Abridged.AddTreatment(builder, treatmentOffset);
    EvacCasualtyInfo_Abridged.AddEtiology(builder, etiologyOffset);
    EvacCasualtyInfo_Abridged.AddComments(builder, commentsOffset);
    EvacCasualtyInfo_Abridged.AddReportTime(builder, reportTimeOffset);
    EvacCasualtyInfo_Abridged.AddReportGen(builder, reportGenOffset);
    EvacCasualtyInfo_Abridged.AddDisposition(builder, dispositionOffset);
    EvacCasualtyInfo_Abridged.AddDispositionType(builder, dispositionTypeOffset);
    EvacCasualtyInfo_Abridged.AddCareProviderUrn(builder, careProviderUrnOffset);
    EvacCasualtyInfo_Abridged.AddCollectionPoint(builder, collectionPointOffset);
    EvacCasualtyInfo_Abridged.AddBurialLocation(builder, burialLocationOffset);
    EvacCasualtyInfo_Abridged.AddOccSpeciality(builder, occSpecialityOffset);
    EvacCasualtyInfo_Abridged.AddCallSign(builder, callSignOffset);
    EvacCasualtyInfo_Abridged.AddService(builder, serviceOffset);
    EvacCasualtyInfo_Abridged.AddBloodType(builder, bloodTypeOffset);
    EvacCasualtyInfo_Abridged.AddLast4SSN(builder, last4SSNOffset);
    EvacCasualtyInfo_Abridged.AddGender(builder, genderOffset);
    EvacCasualtyInfo_Abridged.AddAge(builder, age);
    EvacCasualtyInfo_Abridged.AddName(builder, nameOffset);
    EvacCasualtyInfo_Abridged.AddPayGrade(builder, payGradeOffset);
    EvacCasualtyInfo_Abridged.AddNationality(builder, nationalityOffset);
    EvacCasualtyInfo_Abridged.AddPatientIdentity(builder, patientIdentityOffset);
    EvacCasualtyInfo_Abridged.AddPatientStatus(builder, patientStatusOffset);
    EvacCasualtyInfo_Abridged.AddCasualtyKey(builder, casualtyKeyOffset);
    EvacCasualtyInfo_Abridged.AddSpecMedEquip(builder, specMedEquipOffset);
    EvacCasualtyInfo_Abridged.AddContamType(builder, contamTypeOffset);
    EvacCasualtyInfo_Abridged.AddBodyPart(builder, bodyPartOffset);
    EvacCasualtyInfo_Abridged.AddCasualtyType(builder, casualtyTypeOffset);
    EvacCasualtyInfo_Abridged.AddEvacType(builder, evacTypeOffset);
    EvacCasualtyInfo_Abridged.AddPriority(builder, priorityOffset);
    return EvacCasualtyInfo_Abridged.EndEvacCasualtyInfo_Abridged(builder);
  }

  public static void StartEvacCasualtyInfo_Abridged(FlatBufferBuilder builder) { builder.StartTable(35); }
  public static void AddPriority(FlatBufferBuilder builder, StringOffset priorityOffset) { builder.AddOffset(0, priorityOffset.Value, 0); }
  public static void AddEvacType(FlatBufferBuilder builder, StringOffset evacTypeOffset) { builder.AddOffset(1, evacTypeOffset.Value, 0); }
  public static void AddCasualtyType(FlatBufferBuilder builder, StringOffset casualtyTypeOffset) { builder.AddOffset(2, casualtyTypeOffset.Value, 0); }
  public static void AddBodyPart(FlatBufferBuilder builder, StringOffset bodyPartOffset) { builder.AddOffset(3, bodyPartOffset.Value, 0); }
  public static void AddContamType(FlatBufferBuilder builder, StringOffset contamTypeOffset) { builder.AddOffset(4, contamTypeOffset.Value, 0); }
  public static void AddSpecMedEquip(FlatBufferBuilder builder, VectorOffset specMedEquipOffset) { builder.AddOffset(5, specMedEquipOffset.Value, 0); }
  public static VectorOffset CreateSpecMedEquipVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpecMedEquipVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecMedEquipVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecMedEquipVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecMedEquipVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCasualtyKey(FlatBufferBuilder builder, StringOffset casualtyKeyOffset) { builder.AddOffset(6, casualtyKeyOffset.Value, 0); }
  public static void AddPatientStatus(FlatBufferBuilder builder, StringOffset patientStatusOffset) { builder.AddOffset(7, patientStatusOffset.Value, 0); }
  public static void AddPatientIdentity(FlatBufferBuilder builder, StringOffset patientIdentityOffset) { builder.AddOffset(8, patientIdentityOffset.Value, 0); }
  public static void AddNationality(FlatBufferBuilder builder, StringOffset nationalityOffset) { builder.AddOffset(9, nationalityOffset.Value, 0); }
  public static void AddPayGrade(FlatBufferBuilder builder, StringOffset payGradeOffset) { builder.AddOffset(10, payGradeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(11, nameOffset.Value, 0); }
  public static void AddAge(FlatBufferBuilder builder, int age) { builder.AddInt(12, age, 0); }
  public static void AddGender(FlatBufferBuilder builder, StringOffset genderOffset) { builder.AddOffset(13, genderOffset.Value, 0); }
  public static void AddLast4SSN(FlatBufferBuilder builder, StringOffset last4SSNOffset) { builder.AddOffset(14, last4SSNOffset.Value, 0); }
  public static void AddBloodType(FlatBufferBuilder builder, StringOffset bloodTypeOffset) { builder.AddOffset(15, bloodTypeOffset.Value, 0); }
  public static void AddService(FlatBufferBuilder builder, StringOffset serviceOffset) { builder.AddOffset(16, serviceOffset.Value, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(17, callSignOffset.Value, 0); }
  public static void AddOccSpeciality(FlatBufferBuilder builder, StringOffset occSpecialityOffset) { builder.AddOffset(18, occSpecialityOffset.Value, 0); }
  public static void AddBurialLocation(FlatBufferBuilder builder, VectorOffset burialLocationOffset) { builder.AddOffset(19, burialLocationOffset.Value, 0); }
  public static VectorOffset CreateBurialLocationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBurialLocationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBurialLocationVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBurialLocationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBurialLocationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCollectionPoint(FlatBufferBuilder builder, VectorOffset collectionPointOffset) { builder.AddOffset(20, collectionPointOffset.Value, 0); }
  public static VectorOffset CreateCollectionPointVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCollectionPointVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectionPointVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectionPointVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCollectionPointVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCareProviderUrn(FlatBufferBuilder builder, StringOffset careProviderUrnOffset) { builder.AddOffset(21, careProviderUrnOffset.Value, 0); }
  public static void AddDispositionType(FlatBufferBuilder builder, StringOffset dispositionTypeOffset) { builder.AddOffset(22, dispositionTypeOffset.Value, 0); }
  public static void AddDisposition(FlatBufferBuilder builder, StringOffset dispositionOffset) { builder.AddOffset(23, dispositionOffset.Value, 0); }
  public static void AddReportGen(FlatBufferBuilder builder, StringOffset reportGenOffset) { builder.AddOffset(24, reportGenOffset.Value, 0); }
  public static void AddReportTime(FlatBufferBuilder builder, StringOffset reportTimeOffset) { builder.AddOffset(25, reportTimeOffset.Value, 0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(26, commentsOffset.Value, 0); }
  public static void AddEtiology(FlatBufferBuilder builder, VectorOffset etiologyOffset) { builder.AddOffset(27, etiologyOffset.Value, 0); }
  public static VectorOffset CreateEtiologyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEtiologyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtiologyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEtiologyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEtiologyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTreatment(FlatBufferBuilder builder, VectorOffset treatmentOffset) { builder.AddOffset(28, treatmentOffset.Value, 0); }
  public static VectorOffset CreateTreatmentVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTreatmentVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTreatmentVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTreatmentVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTreatmentVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVitalSignData(FlatBufferBuilder builder, VectorOffset vitalSignDataOffset) { builder.AddOffset(29, vitalSignDataOffset.Value, 0); }
  public static VectorOffset CreateVitalSignDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVitalSignDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVitalSignDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVitalSignDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVitalSignDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHealthState(FlatBufferBuilder builder, VectorOffset healthStateOffset) { builder.AddOffset(30, healthStateOffset.Value, 0); }
  public static VectorOffset CreateHealthStateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateHealthStateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealthStateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHealthStateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHealthStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCondition(FlatBufferBuilder builder, VectorOffset conditionOffset) { builder.AddOffset(31, conditionOffset.Value, 0); }
  public static VectorOffset CreateConditionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMedication(FlatBufferBuilder builder, VectorOffset medicationOffset) { builder.AddOffset(32, medicationOffset.Value, 0); }
  public static VectorOffset CreateMedicationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMedicationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMedicationVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMedicationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMedicationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInjury(FlatBufferBuilder builder, VectorOffset injuryOffset) { builder.AddOffset(33, injuryOffset.Value, 0); }
  public static VectorOffset CreateInjuryVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInjuryVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInjuryVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInjuryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInjuryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllergy(FlatBufferBuilder builder, VectorOffset allergyOffset) { builder.AddOffset(34, allergyOffset.Value, 0); }
  public static VectorOffset CreateAllergyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllergyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllergyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllergyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllergyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EvacCasualtyInfo_Abridged> EndEvacCasualtyInfo_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacCasualtyInfo_Abridged>(o);
  }
  public static void FinishEvacCasualtyInfo_AbridgedBuffer(FlatBufferBuilder builder, Offset<EvacCasualtyInfo_Abridged> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacCasualtyInfo_AbridgedBuffer(FlatBufferBuilder builder, Offset<EvacCasualtyInfo_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacCasualtyInfo_AbridgedT UnPack() {
    var _o = new EvacCasualtyInfo_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacCasualtyInfo_AbridgedT _o) {
    _o.Priority = this.Priority;
    _o.EvacType = this.EvacType;
    _o.CasualtyType = this.CasualtyType;
    _o.BodyPart = this.BodyPart;
    _o.ContamType = this.ContamType;
    _o.SpecMedEquip = new List<string>();
    for (var _j = 0; _j < this.SpecMedEquipLength; ++_j) {_o.SpecMedEquip.Add(this.SpecMedEquip(_j));}
    _o.CasualtyKey = this.CasualtyKey;
    _o.PatientStatus = this.PatientStatus;
    _o.PatientIdentity = this.PatientIdentity;
    _o.Nationality = this.Nationality;
    _o.PayGrade = this.PayGrade;
    _o.Name = this.Name;
    _o.Age = this.Age;
    _o.Gender = this.Gender;
    _o.Last4SSN = this.Last4SSN;
    _o.BloodType = this.BloodType;
    _o.Service = this.Service;
    _o.CallSign = this.CallSign;
    _o.OccSpeciality = this.OccSpeciality;
    _o.BurialLocation = new List<string>();
    for (var _j = 0; _j < this.BurialLocationLength; ++_j) {_o.BurialLocation.Add(this.BurialLocation(_j));}
    _o.CollectionPoint = new List<string>();
    for (var _j = 0; _j < this.CollectionPointLength; ++_j) {_o.CollectionPoint.Add(this.CollectionPoint(_j));}
    _o.CareProviderUrn = this.CareProviderUrn;
    _o.DispositionType = this.DispositionType;
    _o.Disposition = this.Disposition;
    _o.ReportGen = this.ReportGen;
    _o.ReportTime = this.ReportTime;
    _o.Comments = this.Comments;
    _o.Etiology = new List<string>();
    for (var _j = 0; _j < this.EtiologyLength; ++_j) {_o.Etiology.Add(this.Etiology(_j));}
    _o.Treatment = new List<string>();
    for (var _j = 0; _j < this.TreatmentLength; ++_j) {_o.Treatment.Add(this.Treatment(_j));}
    _o.VitalSignData = new List<string>();
    for (var _j = 0; _j < this.VitalSignDataLength; ++_j) {_o.VitalSignData.Add(this.VitalSignData(_j));}
    _o.HealthState = new List<string>();
    for (var _j = 0; _j < this.HealthStateLength; ++_j) {_o.HealthState.Add(this.HealthState(_j));}
    _o.Condition = new List<string>();
    for (var _j = 0; _j < this.ConditionLength; ++_j) {_o.Condition.Add(this.Condition(_j));}
    _o.Medication = new List<string>();
    for (var _j = 0; _j < this.MedicationLength; ++_j) {_o.Medication.Add(this.Medication(_j));}
    _o.Injury = new List<string>();
    for (var _j = 0; _j < this.InjuryLength; ++_j) {_o.Injury.Add(this.Injury(_j));}
    _o.Allergy = new List<string>();
    for (var _j = 0; _j < this.AllergyLength; ++_j) {_o.Allergy.Add(this.Allergy(_j));}
  }
  public static Offset<EvacCasualtyInfo_Abridged> Pack(FlatBufferBuilder builder, EvacCasualtyInfo_AbridgedT _o) {
    if (_o == null) return default(Offset<EvacCasualtyInfo_Abridged>);
    var _priority = _o.Priority == null ? default(StringOffset) : builder.CreateString(_o.Priority);
    var _evacType = _o.EvacType == null ? default(StringOffset) : builder.CreateString(_o.EvacType);
    var _casualtyType = _o.CasualtyType == null ? default(StringOffset) : builder.CreateString(_o.CasualtyType);
    var _bodyPart = _o.BodyPart == null ? default(StringOffset) : builder.CreateString(_o.BodyPart);
    var _contamType = _o.ContamType == null ? default(StringOffset) : builder.CreateString(_o.ContamType);
    var _specMedEquip = default(VectorOffset);
    if (_o.SpecMedEquip != null) {
      var __specMedEquip = new StringOffset[_o.SpecMedEquip.Count];
      for (var _j = 0; _j < __specMedEquip.Length; ++_j) { __specMedEquip[_j] = builder.CreateString(_o.SpecMedEquip[_j]); }
      _specMedEquip = CreateSpecMedEquipVector(builder, __specMedEquip);
    }
    var _casualtyKey = _o.CasualtyKey == null ? default(StringOffset) : builder.CreateString(_o.CasualtyKey);
    var _patientStatus = _o.PatientStatus == null ? default(StringOffset) : builder.CreateString(_o.PatientStatus);
    var _patientIdentity = _o.PatientIdentity == null ? default(StringOffset) : builder.CreateString(_o.PatientIdentity);
    var _nationality = _o.Nationality == null ? default(StringOffset) : builder.CreateString(_o.Nationality);
    var _payGrade = _o.PayGrade == null ? default(StringOffset) : builder.CreateString(_o.PayGrade);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _gender = _o.Gender == null ? default(StringOffset) : builder.CreateString(_o.Gender);
    var _last4SSN = _o.Last4SSN == null ? default(StringOffset) : builder.CreateString(_o.Last4SSN);
    var _bloodType = _o.BloodType == null ? default(StringOffset) : builder.CreateString(_o.BloodType);
    var _service = _o.Service == null ? default(StringOffset) : builder.CreateString(_o.Service);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _occSpeciality = _o.OccSpeciality == null ? default(StringOffset) : builder.CreateString(_o.OccSpeciality);
    var _burialLocation = default(VectorOffset);
    if (_o.BurialLocation != null) {
      var __burialLocation = new StringOffset[_o.BurialLocation.Count];
      for (var _j = 0; _j < __burialLocation.Length; ++_j) { __burialLocation[_j] = builder.CreateString(_o.BurialLocation[_j]); }
      _burialLocation = CreateBurialLocationVector(builder, __burialLocation);
    }
    var _collectionPoint = default(VectorOffset);
    if (_o.CollectionPoint != null) {
      var __collectionPoint = new StringOffset[_o.CollectionPoint.Count];
      for (var _j = 0; _j < __collectionPoint.Length; ++_j) { __collectionPoint[_j] = builder.CreateString(_o.CollectionPoint[_j]); }
      _collectionPoint = CreateCollectionPointVector(builder, __collectionPoint);
    }
    var _careProviderUrn = _o.CareProviderUrn == null ? default(StringOffset) : builder.CreateString(_o.CareProviderUrn);
    var _dispositionType = _o.DispositionType == null ? default(StringOffset) : builder.CreateString(_o.DispositionType);
    var _disposition = _o.Disposition == null ? default(StringOffset) : builder.CreateString(_o.Disposition);
    var _reportGen = _o.ReportGen == null ? default(StringOffset) : builder.CreateString(_o.ReportGen);
    var _reportTime = _o.ReportTime == null ? default(StringOffset) : builder.CreateString(_o.ReportTime);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    var _etiology = default(VectorOffset);
    if (_o.Etiology != null) {
      var __etiology = new StringOffset[_o.Etiology.Count];
      for (var _j = 0; _j < __etiology.Length; ++_j) { __etiology[_j] = builder.CreateString(_o.Etiology[_j]); }
      _etiology = CreateEtiologyVector(builder, __etiology);
    }
    var _treatment = default(VectorOffset);
    if (_o.Treatment != null) {
      var __treatment = new StringOffset[_o.Treatment.Count];
      for (var _j = 0; _j < __treatment.Length; ++_j) { __treatment[_j] = builder.CreateString(_o.Treatment[_j]); }
      _treatment = CreateTreatmentVector(builder, __treatment);
    }
    var _vitalSignData = default(VectorOffset);
    if (_o.VitalSignData != null) {
      var __vitalSignData = new StringOffset[_o.VitalSignData.Count];
      for (var _j = 0; _j < __vitalSignData.Length; ++_j) { __vitalSignData[_j] = builder.CreateString(_o.VitalSignData[_j]); }
      _vitalSignData = CreateVitalSignDataVector(builder, __vitalSignData);
    }
    var _healthState = default(VectorOffset);
    if (_o.HealthState != null) {
      var __healthState = new StringOffset[_o.HealthState.Count];
      for (var _j = 0; _j < __healthState.Length; ++_j) { __healthState[_j] = builder.CreateString(_o.HealthState[_j]); }
      _healthState = CreateHealthStateVector(builder, __healthState);
    }
    var _condition = default(VectorOffset);
    if (_o.Condition != null) {
      var __condition = new StringOffset[_o.Condition.Count];
      for (var _j = 0; _j < __condition.Length; ++_j) { __condition[_j] = builder.CreateString(_o.Condition[_j]); }
      _condition = CreateConditionVector(builder, __condition);
    }
    var _medication = default(VectorOffset);
    if (_o.Medication != null) {
      var __medication = new StringOffset[_o.Medication.Count];
      for (var _j = 0; _j < __medication.Length; ++_j) { __medication[_j] = builder.CreateString(_o.Medication[_j]); }
      _medication = CreateMedicationVector(builder, __medication);
    }
    var _injury = default(VectorOffset);
    if (_o.Injury != null) {
      var __injury = new StringOffset[_o.Injury.Count];
      for (var _j = 0; _j < __injury.Length; ++_j) { __injury[_j] = builder.CreateString(_o.Injury[_j]); }
      _injury = CreateInjuryVector(builder, __injury);
    }
    var _allergy = default(VectorOffset);
    if (_o.Allergy != null) {
      var __allergy = new StringOffset[_o.Allergy.Count];
      for (var _j = 0; _j < __allergy.Length; ++_j) { __allergy[_j] = builder.CreateString(_o.Allergy[_j]); }
      _allergy = CreateAllergyVector(builder, __allergy);
    }
    return CreateEvacCasualtyInfo_Abridged(
      builder,
      _priority,
      _evacType,
      _casualtyType,
      _bodyPart,
      _contamType,
      _specMedEquip,
      _casualtyKey,
      _patientStatus,
      _patientIdentity,
      _nationality,
      _payGrade,
      _name,
      _o.Age,
      _gender,
      _last4SSN,
      _bloodType,
      _service,
      _callSign,
      _occSpeciality,
      _burialLocation,
      _collectionPoint,
      _careProviderUrn,
      _dispositionType,
      _disposition,
      _reportGen,
      _reportTime,
      _comments,
      _etiology,
      _treatment,
      _vitalSignData,
      _healthState,
      _condition,
      _medication,
      _injury,
      _allergy);
  }
}

public class EvacCasualtyInfo_AbridgedT
{
  public string Priority { get; set; }
  public string EvacType { get; set; }
  public string CasualtyType { get; set; }
  public string BodyPart { get; set; }
  public string ContamType { get; set; }
  public List<string> SpecMedEquip { get; set; }
  public string CasualtyKey { get; set; }
  public string PatientStatus { get; set; }
  public string PatientIdentity { get; set; }
  public string Nationality { get; set; }
  public string PayGrade { get; set; }
  public string Name { get; set; }
  public int Age { get; set; }
  public string Gender { get; set; }
  public string Last4SSN { get; set; }
  public string BloodType { get; set; }
  public string Service { get; set; }
  public string CallSign { get; set; }
  public string OccSpeciality { get; set; }
  public List<string> BurialLocation { get; set; }
  public List<string> CollectionPoint { get; set; }
  public string CareProviderUrn { get; set; }
  public string DispositionType { get; set; }
  public string Disposition { get; set; }
  public string ReportGen { get; set; }
  public string ReportTime { get; set; }
  public string Comments { get; set; }
  public List<string> Etiology { get; set; }
  public List<string> Treatment { get; set; }
  public List<string> VitalSignData { get; set; }
  public List<string> HealthState { get; set; }
  public List<string> Condition { get; set; }
  public List<string> Medication { get; set; }
  public List<string> Injury { get; set; }
  public List<string> Allergy { get; set; }

  public EvacCasualtyInfo_AbridgedT() {
    this.Priority = null;
    this.EvacType = null;
    this.CasualtyType = null;
    this.BodyPart = null;
    this.ContamType = null;
    this.SpecMedEquip = null;
    this.CasualtyKey = null;
    this.PatientStatus = null;
    this.PatientIdentity = null;
    this.Nationality = null;
    this.PayGrade = null;
    this.Name = null;
    this.Age = 0;
    this.Gender = null;
    this.Last4SSN = null;
    this.BloodType = null;
    this.Service = null;
    this.CallSign = null;
    this.OccSpeciality = null;
    this.BurialLocation = null;
    this.CollectionPoint = null;
    this.CareProviderUrn = null;
    this.DispositionType = null;
    this.Disposition = null;
    this.ReportGen = null;
    this.ReportTime = null;
    this.Comments = null;
    this.Etiology = null;
    this.Treatment = null;
    this.VitalSignData = null;
    this.HealthState = null;
    this.Condition = null;
    this.Medication = null;
    this.Injury = null;
    this.Allergy = null;
  }
  public static EvacCasualtyInfo_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacCasualtyInfo_Abridged.GetRootAsEvacCasualtyInfo_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacCasualtyInfo_Abridged.FinishEvacCasualtyInfo_AbridgedBuffer(fbb, EvacCasualtyInfo_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacCasualtyInfo_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Priority*/, false)
      && verifier.VerifyString(tablePos, 6 /*EvacType*/, false)
      && verifier.VerifyString(tablePos, 8 /*CasualtyType*/, false)
      && verifier.VerifyString(tablePos, 10 /*BodyPart*/, false)
      && verifier.VerifyString(tablePos, 12 /*ContamType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*SpecMedEquip*/, false)
      && verifier.VerifyString(tablePos, 16 /*CasualtyKey*/, false)
      && verifier.VerifyString(tablePos, 18 /*PatientStatus*/, false)
      && verifier.VerifyString(tablePos, 20 /*PatientIdentity*/, false)
      && verifier.VerifyString(tablePos, 22 /*Nationality*/, false)
      && verifier.VerifyString(tablePos, 24 /*PayGrade*/, false)
      && verifier.VerifyString(tablePos, 26 /*Name*/, false)
      && verifier.VerifyField(tablePos, 28 /*Age*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*Gender*/, false)
      && verifier.VerifyString(tablePos, 32 /*Last4SSN*/, false)
      && verifier.VerifyString(tablePos, 34 /*BloodType*/, false)
      && verifier.VerifyString(tablePos, 36 /*Service*/, false)
      && verifier.VerifyString(tablePos, 38 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 40 /*OccSpeciality*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*BurialLocation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*CollectionPoint*/, false)
      && verifier.VerifyString(tablePos, 46 /*CareProviderUrn*/, false)
      && verifier.VerifyString(tablePos, 48 /*DispositionType*/, false)
      && verifier.VerifyString(tablePos, 50 /*Disposition*/, false)
      && verifier.VerifyString(tablePos, 52 /*ReportGen*/, false)
      && verifier.VerifyString(tablePos, 54 /*ReportTime*/, false)
      && verifier.VerifyString(tablePos, 56 /*Comments*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*Etiology*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*Treatment*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*VitalSignData*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*HealthState*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 66 /*Condition*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*Medication*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*Injury*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*Allergy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
