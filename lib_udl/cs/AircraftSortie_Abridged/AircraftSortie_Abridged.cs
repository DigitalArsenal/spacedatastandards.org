// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
public struct AircraftSortie_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftSortie_Abridged GetRootAsAircraftSortie_Abridged(ByteBuffer _bb) { return GetRootAsAircraftSortie_Abridged(_bb, new AircraftSortie_Abridged()); }
  public static AircraftSortie_Abridged GetRootAsAircraftSortie_Abridged(ByteBuffer _bb, AircraftSortie_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftSortie_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftSortie_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftSortie_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftSortie_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: AIRCRAFTSORTIE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The sortie identifier provided by the originating source.
  /// Example: /// Example: A0640
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigSortieId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSortieIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOrigSortieIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOrigSortieIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the aircraft.
  /// Example: /// Example: REF-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAircraft { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAircraftBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdAircraftBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdAircraftArray() { return __p.__vector_as_array<byte>(10); }
  /// Alternate Aircraft Identifier provided by source.
  /// Example: /// Example: ALT-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AircraftAltId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftAltIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAircraftAltIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAircraftAltIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The tail number of the aircraft assigned to this sortie.
  /// Example: /// Example: Tail_1
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TailNumber { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTailNumberBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTailNumberBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTailNumberArray() { return __p.__vector_as_array<byte>(14); }
  /// The aircraft Model Design Series designation assigned to this sortie.
  /// Example: /// Example: C017A
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AircraftMDS { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftMDSBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAircraftMDSBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAircraftMDSArray() { return __p.__vector_as_array<byte>(16); }
  /// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
  /// Example: /// Example: AE123C
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AircraftADSB { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftADSBBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAircraftADSBBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAircraftADSBArray() { return __p.__vector_as_array<byte>(18); }
  /// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2021-01-01
  /// Constraints: No constraints specified.
  public string SortieDate { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSortieDateBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSortieDateBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSortieDateArray() { return __p.__vector_as_array<byte>(20); }
  /// The external system line number of this sortie.
  /// Example: /// Example: 99
  /// Constraints: No constraints specified.
  public int LineNumber { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The unique identifier of the mission to which this sortie is assigned.
  /// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdMission { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdMissionBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIdMissionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIdMissionArray() { return __p.__vector_as_array<byte>(24); }
  /// The mission ID according to the source system.
  /// Example: /// Example: ABLE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string MissionId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMissionIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMissionIdArray() { return __p.__vector_as_array<byte>(26); }
  /// The Air Mobility Command (AMC) mission number of the sortie.
  /// Example: /// Example: AJM512571333
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcMsnNum { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcMsnNumBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAmcMsnNumBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAmcMsnNumArray() { return __p.__vector_as_array<byte>(28); }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcMsnType { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcMsnTypeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetAmcMsnTypeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetAmcMsnTypeArray() { return __p.__vector_as_array<byte>(30); }
  /// The call sign assigned to the aircraft on this sortie.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CallSign { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(32); }
  /// Joint Chiefs of Staff priority of this sortie.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string JcsPriority { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJcsPriorityBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetJcsPriorityBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetJcsPriorityArray() { return __p.__vector_as_array<byte>(34); }
  /// The planned primary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string PrimarySCL { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrimarySCLBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPrimarySCLBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPrimarySCLArray() { return __p.__vector_as_array<byte>(36); }
  /// The planned secondary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string SecondarySCL { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSecondarySCLBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSecondarySCLBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSecondarySCLArray() { return __p.__vector_as_array<byte>(38); }
  /// Aircraft configuration required for the mission.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ReqConfig { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReqConfigBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetReqConfigBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetReqConfigArray() { return __p.__vector_as_array<byte>(40); }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string CargoConfig { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCargoConfigBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCargoConfigBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCargoConfigArray() { return __p.__vector_as_array<byte>(42); }
  /// Mass of fuel required for this leg of the sortie, in kilograms.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  public double FuelReq { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Liquid oxygen required on the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  public double OxyReqCrew { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  public double OxyOnCrew { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Liquid oxygen required on the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  public double OxyReqPax { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  public double OxyOnPax { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Alert Status code.
  /// Example: /// Example: C1
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string AlertStatusCode { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlertStatusCodeBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetAlertStatusCodeBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetAlertStatusCodeArray() { return __p.__vector_as_array<byte>(54); }
  /// The amount of time allowed between launch order and takeoff, in seconds.
  /// Example: /// Example: 22
  /// Constraints: No constraints specified.
  public int AlertStatus { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The current state of this sortie.
  /// Example: /// Example: Park
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CurrentState { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrentStateBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCurrentStateBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCurrentStateArray() { return __p.__vector_as_array<byte>(58); }
  /// The itinerary identifier of the departure location.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  public int DepItinerary { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The departure International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string DepICAO { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepICAOBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetDepICAOBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetDepICAOArray() { return __p.__vector_as_array<byte>(62); }
  /// The departure International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string DepIATA { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepIATABytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetDepIATABytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetDepIATAArray() { return __p.__vector_as_array<byte>(64); }
  /// The departure Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string DepFAA { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepFAABytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetDepFAABytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetDepFAAArray() { return __p.__vector_as_array<byte>(66); }
  /// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string PlannedDepTime { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedDepTimeBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetPlannedDepTimeBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetPlannedDepTimeArray() { return __p.__vector_as_array<byte>(68); }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EstDepTime { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstDepTimeBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetEstDepTimeBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetEstDepTimeArray() { return __p.__vector_as_array<byte>(70); }
  /// The actual departure time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ActualDepTime { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualDepTimeBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetActualDepTimeBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetActualDepTimeArray() { return __p.__vector_as_array<byte>(72); }
  /// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  public string EstBlockOutTime { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstBlockOutTimeBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetEstBlockOutTimeBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetEstBlockOutTimeArray() { return __p.__vector_as_array<byte>(74); }
  /// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  public string ActualBlockOutTime { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualBlockOutTimeBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetActualBlockOutTimeBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetActualBlockOutTimeArray() { return __p.__vector_as_array<byte>(76); }
  /// Purpose code at the departure location of this sortie.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string DepPurposeCode { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepPurposeCodeBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetDepPurposeCodeBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetDepPurposeCodeArray() { return __p.__vector_as_array<byte>(78); }
  /// The itinerary identifier of the arrival location.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int ArrItinerary { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The arrival International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ArrICAO { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrICAOBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetArrICAOBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetArrICAOArray() { return __p.__vector_as_array<byte>(82); }
  /// The arrival International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string ArrIATA { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrIATABytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetArrIATABytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetArrIATAArray() { return __p.__vector_as_array<byte>(84); }
  /// The arrival Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string ArrFAA { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrFAABytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetArrFAABytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetArrFAAArray() { return __p.__vector_as_array<byte>(86); }
  /// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string PlannedArrTime { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlannedArrTimeBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetPlannedArrTimeBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetPlannedArrTimeArray() { return __p.__vector_as_array<byte>(88); }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EstArrTime { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstArrTimeBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetEstArrTimeBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetEstArrTimeArray() { return __p.__vector_as_array<byte>(90); }
  /// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ActualArrTime { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualArrTimeBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetActualArrTimeBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetActualArrTimeArray() { return __p.__vector_as_array<byte>(92); }
  /// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  public string EstBlockInTime { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstBlockInTimeBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetEstBlockInTimeBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetEstBlockInTimeArray() { return __p.__vector_as_array<byte>(94); }
  /// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  public string ActualBlockInTime { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualBlockInTimeBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetActualBlockInTimeBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetActualBlockInTimeArray() { return __p.__vector_as_array<byte>(96); }
  /// Purpose code at the arrival location of this sortie.
  /// Example: /// Example: O
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string ArrPurposeCode { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrPurposeCodeBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetArrPurposeCodeBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetArrPurposeCodeArray() { return __p.__vector_as_array<byte>(98); }
  /// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-03T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string Dhd { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDhdBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetDhdBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetDhdArray() { return __p.__vector_as_array<byte>(100); }
  /// Reason the aircraft must return to home station by its due home date.
  /// Example: /// Example: Due for maintenance
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string DhdReason { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDhdReasonBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetDhdReasonBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetDhdReasonArray() { return __p.__vector_as_array<byte>(102); }
  /// Aircraft event text.
  /// Example: /// Example: Example event
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AircraftEvent { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftEventBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetAircraftEventBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetAircraftEventArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
  /// Example: /// Example: OPS
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Soe { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoeBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetSoeBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetSoeArray() { return __p.__vector_as_array<byte>(106); }
  /// The leg number of this sortie.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  public int LegNum { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The planned flight time for this sortie, in minutes.
  /// Example: /// Example: 104.5
  /// Constraints: No constraints specified.
  public double FlightTime { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Scheduled ground time, in minutes.
  /// Example: /// Example: 387.8
  /// Constraints: No constraints specified.
  public double GndTime { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(114); }
  /// The version number of the crew paper.
  /// Example: /// Example: 1.1
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PapersVersion { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPapersVersionBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetPapersVersionBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetPapersVersionArray() { return __p.__vector_as_array<byte>(116); }
  /// Name of the uploaded PDF.
  /// Example: /// Example: ExampleFileName
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Filename { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilenameBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetFilenameBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetFilenameArray() { return __p.__vector_as_array<byte>(118); }
  /// Size of the supporting PDF, in bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Filesize { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The status of the supporting document.
  /// Example: /// Example: PUBLISHED
  /// Constraints: Minimum length = 0, Maximum length = 9
  public AircraftSortie_Abridged_paperStatus_Enum PaperStatus { get { int o = __p.__offset(122); return o != 0 ? (AircraftSortie_Abridged_paperStatus_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftSortie_Abridged_paperStatus_Enum.PUBLISHED; } }
  /// The prior permission required (PPR) status.
  /// Example: /// Example: PENDING
  /// Constraints: Minimum length = 0, Maximum length = 22
  public AircraftSortie_Abridged_pprStatus_Enum PprStatus { get { int o = __p.__offset(124); return o != 0 ? (AircraftSortie_Abridged_pprStatus_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftSortie_Abridged_pprStatus_Enum.NOT_REQUIRED; } }
  /// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
  /// Example: /// Example: 2024-09-09T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string MissionUpdate { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionUpdateBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetMissionUpdateBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetMissionUpdateArray() { return __p.__vector_as_array<byte>(126); }
  /// The primary delay code.
  /// Example: /// Example: 500
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string DelayCode { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDelayCodeBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetDelayCodeBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetDelayCodeArray() { return __p.__vector_as_array<byte>(128); }
  /// The last name of the aircraft commander.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CommanderName { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommanderNameBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetCommanderNameBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetCommanderNameArray() { return __p.__vector_as_array<byte>(130); }
  /// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: 7198675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string FmDeskNum { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFmDeskNumBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetFmDeskNumBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetFmDeskNumArray() { return __p.__vector_as_array<byte>(132); }
  /// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string FmName { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFmNameBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetFmNameBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetFmNameArray() { return __p.__vector_as_array<byte>(134); }
  /// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  public AircraftSortie_Abridged_rvnReq_Enum RvnReq { get { int o = __p.__offset(136); return o != 0 ? (AircraftSortie_Abridged_rvnReq_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftSortie_Abridged_rvnReq_Enum.N; } }
  /// The number of passengers tasked for this sortie.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  public int Passengers { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The POI parking location.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ParkingLoc { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParkingLocBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetParkingLocBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetParkingLocArray() { return __p.__vector_as_array<byte>(140); }
  /// Remarks concerning the sortie objective.
  /// Example: /// Example: Some objective remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string ObjectiveRemarks { get { int o = __p.__offset(142); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectiveRemarksBytes() { return __p.__vector_as_span<byte>(142, 1); }
#else
  public ArraySegment<byte>? GetObjectiveRemarksBytes() { return __p.__vector_as_arraysegment(142); }
#endif
  public byte[] GetObjectiveRemarksArray() { return __p.__vector_as_array<byte>(142); }
  /// Remarks concerning the aircraft.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string AircraftRemarks { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftRemarksBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetAircraftRemarksBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetAircraftRemarksArray() { return __p.__vector_as_array<byte>(144); }
  /// Remarks concerning the schedule.
  /// Example: /// Example: Some schedule remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string ScheduleRemarks { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScheduleRemarksBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetScheduleRemarksBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetScheduleRemarksArray() { return __p.__vector_as_array<byte>(146); }
  /// Remarks concerning the results of this sortie.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string ResultRemarks { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResultRemarksBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetResultRemarksBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetResultRemarksArray() { return __p.__vector_as_array<byte>(148); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(150); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(152); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(154); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(156); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(158); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AircraftSortie_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(160); return o != 0 ? (AircraftSortie_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftSortie_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(162); }

  public static Offset<AircraftSortie_Abridged> CreateAircraftSortie_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origSortieIdOffset = default(StringOffset),
      StringOffset idAircraftOffset = default(StringOffset),
      StringOffset aircraftAltIdOffset = default(StringOffset),
      StringOffset tailNumberOffset = default(StringOffset),
      StringOffset aircraftMDSOffset = default(StringOffset),
      StringOffset aircraftADSBOffset = default(StringOffset),
      StringOffset sortieDateOffset = default(StringOffset),
      int lineNumber = 0,
      StringOffset idMissionOffset = default(StringOffset),
      StringOffset missionIdOffset = default(StringOffset),
      StringOffset amcMsnNumOffset = default(StringOffset),
      StringOffset amcMsnTypeOffset = default(StringOffset),
      StringOffset callSignOffset = default(StringOffset),
      StringOffset jcsPriorityOffset = default(StringOffset),
      StringOffset primarySCLOffset = default(StringOffset),
      StringOffset secondarySCLOffset = default(StringOffset),
      StringOffset reqConfigOffset = default(StringOffset),
      StringOffset cargoConfigOffset = default(StringOffset),
      double fuelReq = 0.0,
      double oxyReqCrew = 0.0,
      double oxyOnCrew = 0.0,
      double oxyReqPax = 0.0,
      double oxyOnPax = 0.0,
      StringOffset alertStatusCodeOffset = default(StringOffset),
      int alertStatus = 0,
      StringOffset currentStateOffset = default(StringOffset),
      int depItinerary = 0,
      StringOffset depICAOOffset = default(StringOffset),
      StringOffset depIATAOffset = default(StringOffset),
      StringOffset depFAAOffset = default(StringOffset),
      StringOffset plannedDepTimeOffset = default(StringOffset),
      StringOffset estDepTimeOffset = default(StringOffset),
      StringOffset actualDepTimeOffset = default(StringOffset),
      StringOffset estBlockOutTimeOffset = default(StringOffset),
      StringOffset actualBlockOutTimeOffset = default(StringOffset),
      StringOffset depPurposeCodeOffset = default(StringOffset),
      int arrItinerary = 0,
      StringOffset arrICAOOffset = default(StringOffset),
      StringOffset arrIATAOffset = default(StringOffset),
      StringOffset arrFAAOffset = default(StringOffset),
      StringOffset plannedArrTimeOffset = default(StringOffset),
      StringOffset estArrTimeOffset = default(StringOffset),
      StringOffset actualArrTimeOffset = default(StringOffset),
      StringOffset estBlockInTimeOffset = default(StringOffset),
      StringOffset actualBlockInTimeOffset = default(StringOffset),
      StringOffset arrPurposeCodeOffset = default(StringOffset),
      StringOffset dhdOffset = default(StringOffset),
      StringOffset dhdReasonOffset = default(StringOffset),
      StringOffset aircraftEventOffset = default(StringOffset),
      StringOffset soeOffset = default(StringOffset),
      int legNum = 0,
      double flightTime = 0.0,
      double gndTime = 0.0,
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset papersVersionOffset = default(StringOffset),
      StringOffset filenameOffset = default(StringOffset),
      int filesize = 0,
      AircraftSortie_Abridged_paperStatus_Enum paperStatus = AircraftSortie_Abridged_paperStatus_Enum.PUBLISHED,
      AircraftSortie_Abridged_pprStatus_Enum pprStatus = AircraftSortie_Abridged_pprStatus_Enum.NOT_REQUIRED,
      StringOffset missionUpdateOffset = default(StringOffset),
      StringOffset delayCodeOffset = default(StringOffset),
      StringOffset commanderNameOffset = default(StringOffset),
      StringOffset fmDeskNumOffset = default(StringOffset),
      StringOffset fmNameOffset = default(StringOffset),
      AircraftSortie_Abridged_rvnReq_Enum rvnReq = AircraftSortie_Abridged_rvnReq_Enum.N,
      int passengers = 0,
      StringOffset parkingLocOffset = default(StringOffset),
      StringOffset objectiveRemarksOffset = default(StringOffset),
      StringOffset aircraftRemarksOffset = default(StringOffset),
      StringOffset scheduleRemarksOffset = default(StringOffset),
      StringOffset resultRemarksOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      AircraftSortie_Abridged_dataMode_Enum dataMode = AircraftSortie_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(80);
    AircraftSortie_Abridged.AddGndTime(builder, gndTime);
    AircraftSortie_Abridged.AddFlightTime(builder, flightTime);
    AircraftSortie_Abridged.AddOxyOnPax(builder, oxyOnPax);
    AircraftSortie_Abridged.AddOxyReqPax(builder, oxyReqPax);
    AircraftSortie_Abridged.AddOxyOnCrew(builder, oxyOnCrew);
    AircraftSortie_Abridged.AddOxyReqCrew(builder, oxyReqCrew);
    AircraftSortie_Abridged.AddFuelReq(builder, fuelReq);
    AircraftSortie_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AircraftSortie_Abridged.AddOrigin(builder, originOffset);
    AircraftSortie_Abridged.AddSource(builder, sourceOffset);
    AircraftSortie_Abridged.AddSourceDL(builder, sourceDLOffset);
    AircraftSortie_Abridged.AddCreatedBy(builder, createdByOffset);
    AircraftSortie_Abridged.AddCreatedAt(builder, createdAtOffset);
    AircraftSortie_Abridged.AddResultRemarks(builder, resultRemarksOffset);
    AircraftSortie_Abridged.AddScheduleRemarks(builder, scheduleRemarksOffset);
    AircraftSortie_Abridged.AddAircraftRemarks(builder, aircraftRemarksOffset);
    AircraftSortie_Abridged.AddObjectiveRemarks(builder, objectiveRemarksOffset);
    AircraftSortie_Abridged.AddParkingLoc(builder, parkingLocOffset);
    AircraftSortie_Abridged.AddPassengers(builder, passengers);
    AircraftSortie_Abridged.AddFmName(builder, fmNameOffset);
    AircraftSortie_Abridged.AddFmDeskNum(builder, fmDeskNumOffset);
    AircraftSortie_Abridged.AddCommanderName(builder, commanderNameOffset);
    AircraftSortie_Abridged.AddDelayCode(builder, delayCodeOffset);
    AircraftSortie_Abridged.AddMissionUpdate(builder, missionUpdateOffset);
    AircraftSortie_Abridged.AddFilesize(builder, filesize);
    AircraftSortie_Abridged.AddFilename(builder, filenameOffset);
    AircraftSortie_Abridged.AddPapersVersion(builder, papersVersionOffset);
    AircraftSortie_Abridged.AddRawFileURI(builder, rawFileURIOffset);
    AircraftSortie_Abridged.AddLegNum(builder, legNum);
    AircraftSortie_Abridged.AddSoe(builder, soeOffset);
    AircraftSortie_Abridged.AddAircraftEvent(builder, aircraftEventOffset);
    AircraftSortie_Abridged.AddDhdReason(builder, dhdReasonOffset);
    AircraftSortie_Abridged.AddDhd(builder, dhdOffset);
    AircraftSortie_Abridged.AddArrPurposeCode(builder, arrPurposeCodeOffset);
    AircraftSortie_Abridged.AddActualBlockInTime(builder, actualBlockInTimeOffset);
    AircraftSortie_Abridged.AddEstBlockInTime(builder, estBlockInTimeOffset);
    AircraftSortie_Abridged.AddActualArrTime(builder, actualArrTimeOffset);
    AircraftSortie_Abridged.AddEstArrTime(builder, estArrTimeOffset);
    AircraftSortie_Abridged.AddPlannedArrTime(builder, plannedArrTimeOffset);
    AircraftSortie_Abridged.AddArrFAA(builder, arrFAAOffset);
    AircraftSortie_Abridged.AddArrIATA(builder, arrIATAOffset);
    AircraftSortie_Abridged.AddArrICAO(builder, arrICAOOffset);
    AircraftSortie_Abridged.AddArrItinerary(builder, arrItinerary);
    AircraftSortie_Abridged.AddDepPurposeCode(builder, depPurposeCodeOffset);
    AircraftSortie_Abridged.AddActualBlockOutTime(builder, actualBlockOutTimeOffset);
    AircraftSortie_Abridged.AddEstBlockOutTime(builder, estBlockOutTimeOffset);
    AircraftSortie_Abridged.AddActualDepTime(builder, actualDepTimeOffset);
    AircraftSortie_Abridged.AddEstDepTime(builder, estDepTimeOffset);
    AircraftSortie_Abridged.AddPlannedDepTime(builder, plannedDepTimeOffset);
    AircraftSortie_Abridged.AddDepFAA(builder, depFAAOffset);
    AircraftSortie_Abridged.AddDepIATA(builder, depIATAOffset);
    AircraftSortie_Abridged.AddDepICAO(builder, depICAOOffset);
    AircraftSortie_Abridged.AddDepItinerary(builder, depItinerary);
    AircraftSortie_Abridged.AddCurrentState(builder, currentStateOffset);
    AircraftSortie_Abridged.AddAlertStatus(builder, alertStatus);
    AircraftSortie_Abridged.AddAlertStatusCode(builder, alertStatusCodeOffset);
    AircraftSortie_Abridged.AddCargoConfig(builder, cargoConfigOffset);
    AircraftSortie_Abridged.AddReqConfig(builder, reqConfigOffset);
    AircraftSortie_Abridged.AddSecondarySCL(builder, secondarySCLOffset);
    AircraftSortie_Abridged.AddPrimarySCL(builder, primarySCLOffset);
    AircraftSortie_Abridged.AddJcsPriority(builder, jcsPriorityOffset);
    AircraftSortie_Abridged.AddCallSign(builder, callSignOffset);
    AircraftSortie_Abridged.AddAmcMsnType(builder, amcMsnTypeOffset);
    AircraftSortie_Abridged.AddAmcMsnNum(builder, amcMsnNumOffset);
    AircraftSortie_Abridged.AddMissionId(builder, missionIdOffset);
    AircraftSortie_Abridged.AddIdMission(builder, idMissionOffset);
    AircraftSortie_Abridged.AddLineNumber(builder, lineNumber);
    AircraftSortie_Abridged.AddSortieDate(builder, sortieDateOffset);
    AircraftSortie_Abridged.AddAircraftADSB(builder, aircraftADSBOffset);
    AircraftSortie_Abridged.AddAircraftMDS(builder, aircraftMDSOffset);
    AircraftSortie_Abridged.AddTailNumber(builder, tailNumberOffset);
    AircraftSortie_Abridged.AddAircraftAltId(builder, aircraftAltIdOffset);
    AircraftSortie_Abridged.AddIdAircraft(builder, idAircraftOffset);
    AircraftSortie_Abridged.AddOrigSortieId(builder, origSortieIdOffset);
    AircraftSortie_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AircraftSortie_Abridged.AddId(builder, idOffset);
    AircraftSortie_Abridged.AddDataMode(builder, dataMode);
    AircraftSortie_Abridged.AddRvnReq(builder, rvnReq);
    AircraftSortie_Abridged.AddPprStatus(builder, pprStatus);
    AircraftSortie_Abridged.AddPaperStatus(builder, paperStatus);
    return AircraftSortie_Abridged.EndAircraftSortie_Abridged(builder);
  }

  public static void StartAircraftSortie_Abridged(FlatBufferBuilder builder) { builder.StartTable(80); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOrigSortieId(FlatBufferBuilder builder, StringOffset origSortieIdOffset) { builder.AddOffset(2, origSortieIdOffset.Value, 0); }
  public static void AddIdAircraft(FlatBufferBuilder builder, StringOffset idAircraftOffset) { builder.AddOffset(3, idAircraftOffset.Value, 0); }
  public static void AddAircraftAltId(FlatBufferBuilder builder, StringOffset aircraftAltIdOffset) { builder.AddOffset(4, aircraftAltIdOffset.Value, 0); }
  public static void AddTailNumber(FlatBufferBuilder builder, StringOffset tailNumberOffset) { builder.AddOffset(5, tailNumberOffset.Value, 0); }
  public static void AddAircraftMDS(FlatBufferBuilder builder, StringOffset aircraftMDSOffset) { builder.AddOffset(6, aircraftMDSOffset.Value, 0); }
  public static void AddAircraftADSB(FlatBufferBuilder builder, StringOffset aircraftADSBOffset) { builder.AddOffset(7, aircraftADSBOffset.Value, 0); }
  public static void AddSortieDate(FlatBufferBuilder builder, StringOffset sortieDateOffset) { builder.AddOffset(8, sortieDateOffset.Value, 0); }
  public static void AddLineNumber(FlatBufferBuilder builder, int lineNumber) { builder.AddInt(9, lineNumber, 0); }
  public static void AddIdMission(FlatBufferBuilder builder, StringOffset idMissionOffset) { builder.AddOffset(10, idMissionOffset.Value, 0); }
  public static void AddMissionId(FlatBufferBuilder builder, StringOffset missionIdOffset) { builder.AddOffset(11, missionIdOffset.Value, 0); }
  public static void AddAmcMsnNum(FlatBufferBuilder builder, StringOffset amcMsnNumOffset) { builder.AddOffset(12, amcMsnNumOffset.Value, 0); }
  public static void AddAmcMsnType(FlatBufferBuilder builder, StringOffset amcMsnTypeOffset) { builder.AddOffset(13, amcMsnTypeOffset.Value, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(14, callSignOffset.Value, 0); }
  public static void AddJcsPriority(FlatBufferBuilder builder, StringOffset jcsPriorityOffset) { builder.AddOffset(15, jcsPriorityOffset.Value, 0); }
  public static void AddPrimarySCL(FlatBufferBuilder builder, StringOffset primarySCLOffset) { builder.AddOffset(16, primarySCLOffset.Value, 0); }
  public static void AddSecondarySCL(FlatBufferBuilder builder, StringOffset secondarySCLOffset) { builder.AddOffset(17, secondarySCLOffset.Value, 0); }
  public static void AddReqConfig(FlatBufferBuilder builder, StringOffset reqConfigOffset) { builder.AddOffset(18, reqConfigOffset.Value, 0); }
  public static void AddCargoConfig(FlatBufferBuilder builder, StringOffset cargoConfigOffset) { builder.AddOffset(19, cargoConfigOffset.Value, 0); }
  public static void AddFuelReq(FlatBufferBuilder builder, double fuelReq) { builder.AddDouble(20, fuelReq, 0.0); }
  public static void AddOxyReqCrew(FlatBufferBuilder builder, double oxyReqCrew) { builder.AddDouble(21, oxyReqCrew, 0.0); }
  public static void AddOxyOnCrew(FlatBufferBuilder builder, double oxyOnCrew) { builder.AddDouble(22, oxyOnCrew, 0.0); }
  public static void AddOxyReqPax(FlatBufferBuilder builder, double oxyReqPax) { builder.AddDouble(23, oxyReqPax, 0.0); }
  public static void AddOxyOnPax(FlatBufferBuilder builder, double oxyOnPax) { builder.AddDouble(24, oxyOnPax, 0.0); }
  public static void AddAlertStatusCode(FlatBufferBuilder builder, StringOffset alertStatusCodeOffset) { builder.AddOffset(25, alertStatusCodeOffset.Value, 0); }
  public static void AddAlertStatus(FlatBufferBuilder builder, int alertStatus) { builder.AddInt(26, alertStatus, 0); }
  public static void AddCurrentState(FlatBufferBuilder builder, StringOffset currentStateOffset) { builder.AddOffset(27, currentStateOffset.Value, 0); }
  public static void AddDepItinerary(FlatBufferBuilder builder, int depItinerary) { builder.AddInt(28, depItinerary, 0); }
  public static void AddDepICAO(FlatBufferBuilder builder, StringOffset depICAOOffset) { builder.AddOffset(29, depICAOOffset.Value, 0); }
  public static void AddDepIATA(FlatBufferBuilder builder, StringOffset depIATAOffset) { builder.AddOffset(30, depIATAOffset.Value, 0); }
  public static void AddDepFAA(FlatBufferBuilder builder, StringOffset depFAAOffset) { builder.AddOffset(31, depFAAOffset.Value, 0); }
  public static void AddPlannedDepTime(FlatBufferBuilder builder, StringOffset plannedDepTimeOffset) { builder.AddOffset(32, plannedDepTimeOffset.Value, 0); }
  public static void AddEstDepTime(FlatBufferBuilder builder, StringOffset estDepTimeOffset) { builder.AddOffset(33, estDepTimeOffset.Value, 0); }
  public static void AddActualDepTime(FlatBufferBuilder builder, StringOffset actualDepTimeOffset) { builder.AddOffset(34, actualDepTimeOffset.Value, 0); }
  public static void AddEstBlockOutTime(FlatBufferBuilder builder, StringOffset estBlockOutTimeOffset) { builder.AddOffset(35, estBlockOutTimeOffset.Value, 0); }
  public static void AddActualBlockOutTime(FlatBufferBuilder builder, StringOffset actualBlockOutTimeOffset) { builder.AddOffset(36, actualBlockOutTimeOffset.Value, 0); }
  public static void AddDepPurposeCode(FlatBufferBuilder builder, StringOffset depPurposeCodeOffset) { builder.AddOffset(37, depPurposeCodeOffset.Value, 0); }
  public static void AddArrItinerary(FlatBufferBuilder builder, int arrItinerary) { builder.AddInt(38, arrItinerary, 0); }
  public static void AddArrICAO(FlatBufferBuilder builder, StringOffset arrICAOOffset) { builder.AddOffset(39, arrICAOOffset.Value, 0); }
  public static void AddArrIATA(FlatBufferBuilder builder, StringOffset arrIATAOffset) { builder.AddOffset(40, arrIATAOffset.Value, 0); }
  public static void AddArrFAA(FlatBufferBuilder builder, StringOffset arrFAAOffset) { builder.AddOffset(41, arrFAAOffset.Value, 0); }
  public static void AddPlannedArrTime(FlatBufferBuilder builder, StringOffset plannedArrTimeOffset) { builder.AddOffset(42, plannedArrTimeOffset.Value, 0); }
  public static void AddEstArrTime(FlatBufferBuilder builder, StringOffset estArrTimeOffset) { builder.AddOffset(43, estArrTimeOffset.Value, 0); }
  public static void AddActualArrTime(FlatBufferBuilder builder, StringOffset actualArrTimeOffset) { builder.AddOffset(44, actualArrTimeOffset.Value, 0); }
  public static void AddEstBlockInTime(FlatBufferBuilder builder, StringOffset estBlockInTimeOffset) { builder.AddOffset(45, estBlockInTimeOffset.Value, 0); }
  public static void AddActualBlockInTime(FlatBufferBuilder builder, StringOffset actualBlockInTimeOffset) { builder.AddOffset(46, actualBlockInTimeOffset.Value, 0); }
  public static void AddArrPurposeCode(FlatBufferBuilder builder, StringOffset arrPurposeCodeOffset) { builder.AddOffset(47, arrPurposeCodeOffset.Value, 0); }
  public static void AddDhd(FlatBufferBuilder builder, StringOffset dhdOffset) { builder.AddOffset(48, dhdOffset.Value, 0); }
  public static void AddDhdReason(FlatBufferBuilder builder, StringOffset dhdReasonOffset) { builder.AddOffset(49, dhdReasonOffset.Value, 0); }
  public static void AddAircraftEvent(FlatBufferBuilder builder, StringOffset aircraftEventOffset) { builder.AddOffset(50, aircraftEventOffset.Value, 0); }
  public static void AddSoe(FlatBufferBuilder builder, StringOffset soeOffset) { builder.AddOffset(51, soeOffset.Value, 0); }
  public static void AddLegNum(FlatBufferBuilder builder, int legNum) { builder.AddInt(52, legNum, 0); }
  public static void AddFlightTime(FlatBufferBuilder builder, double flightTime) { builder.AddDouble(53, flightTime, 0.0); }
  public static void AddGndTime(FlatBufferBuilder builder, double gndTime) { builder.AddDouble(54, gndTime, 0.0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(55, rawFileURIOffset.Value, 0); }
  public static void AddPapersVersion(FlatBufferBuilder builder, StringOffset papersVersionOffset) { builder.AddOffset(56, papersVersionOffset.Value, 0); }
  public static void AddFilename(FlatBufferBuilder builder, StringOffset filenameOffset) { builder.AddOffset(57, filenameOffset.Value, 0); }
  public static void AddFilesize(FlatBufferBuilder builder, int filesize) { builder.AddInt(58, filesize, 0); }
  public static void AddPaperStatus(FlatBufferBuilder builder, AircraftSortie_Abridged_paperStatus_Enum paperStatus) { builder.AddSbyte(59, (sbyte)paperStatus, 0); }
  public static void AddPprStatus(FlatBufferBuilder builder, AircraftSortie_Abridged_pprStatus_Enum pprStatus) { builder.AddSbyte(60, (sbyte)pprStatus, 0); }
  public static void AddMissionUpdate(FlatBufferBuilder builder, StringOffset missionUpdateOffset) { builder.AddOffset(61, missionUpdateOffset.Value, 0); }
  public static void AddDelayCode(FlatBufferBuilder builder, StringOffset delayCodeOffset) { builder.AddOffset(62, delayCodeOffset.Value, 0); }
  public static void AddCommanderName(FlatBufferBuilder builder, StringOffset commanderNameOffset) { builder.AddOffset(63, commanderNameOffset.Value, 0); }
  public static void AddFmDeskNum(FlatBufferBuilder builder, StringOffset fmDeskNumOffset) { builder.AddOffset(64, fmDeskNumOffset.Value, 0); }
  public static void AddFmName(FlatBufferBuilder builder, StringOffset fmNameOffset) { builder.AddOffset(65, fmNameOffset.Value, 0); }
  public static void AddRvnReq(FlatBufferBuilder builder, AircraftSortie_Abridged_rvnReq_Enum rvnReq) { builder.AddSbyte(66, (sbyte)rvnReq, 0); }
  public static void AddPassengers(FlatBufferBuilder builder, int passengers) { builder.AddInt(67, passengers, 0); }
  public static void AddParkingLoc(FlatBufferBuilder builder, StringOffset parkingLocOffset) { builder.AddOffset(68, parkingLocOffset.Value, 0); }
  public static void AddObjectiveRemarks(FlatBufferBuilder builder, StringOffset objectiveRemarksOffset) { builder.AddOffset(69, objectiveRemarksOffset.Value, 0); }
  public static void AddAircraftRemarks(FlatBufferBuilder builder, StringOffset aircraftRemarksOffset) { builder.AddOffset(70, aircraftRemarksOffset.Value, 0); }
  public static void AddScheduleRemarks(FlatBufferBuilder builder, StringOffset scheduleRemarksOffset) { builder.AddOffset(71, scheduleRemarksOffset.Value, 0); }
  public static void AddResultRemarks(FlatBufferBuilder builder, StringOffset resultRemarksOffset) { builder.AddOffset(72, resultRemarksOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(73, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(74, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(75, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(76, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(77, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AircraftSortie_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(78, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(79, origNetworkOffset.Value, 0); }
  public static Offset<AircraftSortie_Abridged> EndAircraftSortie_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftSortie_Abridged>(o);
  }
  public static void FinishAircraftSortie_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftSortie_Abridged> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftSortie_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftSortie_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftSortie_AbridgedT UnPack() {
    var _o = new AircraftSortie_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftSortie_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigSortieId = this.OrigSortieId;
    _o.IdAircraft = this.IdAircraft;
    _o.AircraftAltId = this.AircraftAltId;
    _o.TailNumber = this.TailNumber;
    _o.AircraftMDS = this.AircraftMDS;
    _o.AircraftADSB = this.AircraftADSB;
    _o.SortieDate = this.SortieDate;
    _o.LineNumber = this.LineNumber;
    _o.IdMission = this.IdMission;
    _o.MissionId = this.MissionId;
    _o.AmcMsnNum = this.AmcMsnNum;
    _o.AmcMsnType = this.AmcMsnType;
    _o.CallSign = this.CallSign;
    _o.JcsPriority = this.JcsPriority;
    _o.PrimarySCL = this.PrimarySCL;
    _o.SecondarySCL = this.SecondarySCL;
    _o.ReqConfig = this.ReqConfig;
    _o.CargoConfig = this.CargoConfig;
    _o.FuelReq = this.FuelReq;
    _o.OxyReqCrew = this.OxyReqCrew;
    _o.OxyOnCrew = this.OxyOnCrew;
    _o.OxyReqPax = this.OxyReqPax;
    _o.OxyOnPax = this.OxyOnPax;
    _o.AlertStatusCode = this.AlertStatusCode;
    _o.AlertStatus = this.AlertStatus;
    _o.CurrentState = this.CurrentState;
    _o.DepItinerary = this.DepItinerary;
    _o.DepICAO = this.DepICAO;
    _o.DepIATA = this.DepIATA;
    _o.DepFAA = this.DepFAA;
    _o.PlannedDepTime = this.PlannedDepTime;
    _o.EstDepTime = this.EstDepTime;
    _o.ActualDepTime = this.ActualDepTime;
    _o.EstBlockOutTime = this.EstBlockOutTime;
    _o.ActualBlockOutTime = this.ActualBlockOutTime;
    _o.DepPurposeCode = this.DepPurposeCode;
    _o.ArrItinerary = this.ArrItinerary;
    _o.ArrICAO = this.ArrICAO;
    _o.ArrIATA = this.ArrIATA;
    _o.ArrFAA = this.ArrFAA;
    _o.PlannedArrTime = this.PlannedArrTime;
    _o.EstArrTime = this.EstArrTime;
    _o.ActualArrTime = this.ActualArrTime;
    _o.EstBlockInTime = this.EstBlockInTime;
    _o.ActualBlockInTime = this.ActualBlockInTime;
    _o.ArrPurposeCode = this.ArrPurposeCode;
    _o.Dhd = this.Dhd;
    _o.DhdReason = this.DhdReason;
    _o.AircraftEvent = this.AircraftEvent;
    _o.Soe = this.Soe;
    _o.LegNum = this.LegNum;
    _o.FlightTime = this.FlightTime;
    _o.GndTime = this.GndTime;
    _o.RawFileURI = this.RawFileURI;
    _o.PapersVersion = this.PapersVersion;
    _o.Filename = this.Filename;
    _o.Filesize = this.Filesize;
    _o.PaperStatus = this.PaperStatus;
    _o.PprStatus = this.PprStatus;
    _o.MissionUpdate = this.MissionUpdate;
    _o.DelayCode = this.DelayCode;
    _o.CommanderName = this.CommanderName;
    _o.FmDeskNum = this.FmDeskNum;
    _o.FmName = this.FmName;
    _o.RvnReq = this.RvnReq;
    _o.Passengers = this.Passengers;
    _o.ParkingLoc = this.ParkingLoc;
    _o.ObjectiveRemarks = this.ObjectiveRemarks;
    _o.AircraftRemarks = this.AircraftRemarks;
    _o.ScheduleRemarks = this.ScheduleRemarks;
    _o.ResultRemarks = this.ResultRemarks;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<AircraftSortie_Abridged> Pack(FlatBufferBuilder builder, AircraftSortie_AbridgedT _o) {
    if (_o == null) return default(Offset<AircraftSortie_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origSortieId = _o.OrigSortieId == null ? default(StringOffset) : builder.CreateString(_o.OrigSortieId);
    var _idAircraft = _o.IdAircraft == null ? default(StringOffset) : builder.CreateString(_o.IdAircraft);
    var _aircraftAltId = _o.AircraftAltId == null ? default(StringOffset) : builder.CreateString(_o.AircraftAltId);
    var _tailNumber = _o.TailNumber == null ? default(StringOffset) : builder.CreateString(_o.TailNumber);
    var _aircraftMDS = _o.AircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.AircraftMDS);
    var _aircraftADSB = _o.AircraftADSB == null ? default(StringOffset) : builder.CreateString(_o.AircraftADSB);
    var _sortieDate = _o.SortieDate == null ? default(StringOffset) : builder.CreateString(_o.SortieDate);
    var _idMission = _o.IdMission == null ? default(StringOffset) : builder.CreateString(_o.IdMission);
    var _missionId = _o.MissionId == null ? default(StringOffset) : builder.CreateString(_o.MissionId);
    var _amcMsnNum = _o.AmcMsnNum == null ? default(StringOffset) : builder.CreateString(_o.AmcMsnNum);
    var _amcMsnType = _o.AmcMsnType == null ? default(StringOffset) : builder.CreateString(_o.AmcMsnType);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _jcsPriority = _o.JcsPriority == null ? default(StringOffset) : builder.CreateString(_o.JcsPriority);
    var _primarySCL = _o.PrimarySCL == null ? default(StringOffset) : builder.CreateString(_o.PrimarySCL);
    var _secondarySCL = _o.SecondarySCL == null ? default(StringOffset) : builder.CreateString(_o.SecondarySCL);
    var _reqConfig = _o.ReqConfig == null ? default(StringOffset) : builder.CreateString(_o.ReqConfig);
    var _cargoConfig = _o.CargoConfig == null ? default(StringOffset) : builder.CreateString(_o.CargoConfig);
    var _alertStatusCode = _o.AlertStatusCode == null ? default(StringOffset) : builder.CreateString(_o.AlertStatusCode);
    var _currentState = _o.CurrentState == null ? default(StringOffset) : builder.CreateString(_o.CurrentState);
    var _depICAO = _o.DepICAO == null ? default(StringOffset) : builder.CreateString(_o.DepICAO);
    var _depIATA = _o.DepIATA == null ? default(StringOffset) : builder.CreateString(_o.DepIATA);
    var _depFAA = _o.DepFAA == null ? default(StringOffset) : builder.CreateString(_o.DepFAA);
    var _plannedDepTime = _o.PlannedDepTime == null ? default(StringOffset) : builder.CreateString(_o.PlannedDepTime);
    var _estDepTime = _o.EstDepTime == null ? default(StringOffset) : builder.CreateString(_o.EstDepTime);
    var _actualDepTime = _o.ActualDepTime == null ? default(StringOffset) : builder.CreateString(_o.ActualDepTime);
    var _estBlockOutTime = _o.EstBlockOutTime == null ? default(StringOffset) : builder.CreateString(_o.EstBlockOutTime);
    var _actualBlockOutTime = _o.ActualBlockOutTime == null ? default(StringOffset) : builder.CreateString(_o.ActualBlockOutTime);
    var _depPurposeCode = _o.DepPurposeCode == null ? default(StringOffset) : builder.CreateString(_o.DepPurposeCode);
    var _arrICAO = _o.ArrICAO == null ? default(StringOffset) : builder.CreateString(_o.ArrICAO);
    var _arrIATA = _o.ArrIATA == null ? default(StringOffset) : builder.CreateString(_o.ArrIATA);
    var _arrFAA = _o.ArrFAA == null ? default(StringOffset) : builder.CreateString(_o.ArrFAA);
    var _plannedArrTime = _o.PlannedArrTime == null ? default(StringOffset) : builder.CreateString(_o.PlannedArrTime);
    var _estArrTime = _o.EstArrTime == null ? default(StringOffset) : builder.CreateString(_o.EstArrTime);
    var _actualArrTime = _o.ActualArrTime == null ? default(StringOffset) : builder.CreateString(_o.ActualArrTime);
    var _estBlockInTime = _o.EstBlockInTime == null ? default(StringOffset) : builder.CreateString(_o.EstBlockInTime);
    var _actualBlockInTime = _o.ActualBlockInTime == null ? default(StringOffset) : builder.CreateString(_o.ActualBlockInTime);
    var _arrPurposeCode = _o.ArrPurposeCode == null ? default(StringOffset) : builder.CreateString(_o.ArrPurposeCode);
    var _dhd = _o.Dhd == null ? default(StringOffset) : builder.CreateString(_o.Dhd);
    var _dhdReason = _o.DhdReason == null ? default(StringOffset) : builder.CreateString(_o.DhdReason);
    var _aircraftEvent = _o.AircraftEvent == null ? default(StringOffset) : builder.CreateString(_o.AircraftEvent);
    var _soe = _o.Soe == null ? default(StringOffset) : builder.CreateString(_o.Soe);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _papersVersion = _o.PapersVersion == null ? default(StringOffset) : builder.CreateString(_o.PapersVersion);
    var _filename = _o.Filename == null ? default(StringOffset) : builder.CreateString(_o.Filename);
    var _missionUpdate = _o.MissionUpdate == null ? default(StringOffset) : builder.CreateString(_o.MissionUpdate);
    var _delayCode = _o.DelayCode == null ? default(StringOffset) : builder.CreateString(_o.DelayCode);
    var _commanderName = _o.CommanderName == null ? default(StringOffset) : builder.CreateString(_o.CommanderName);
    var _fmDeskNum = _o.FmDeskNum == null ? default(StringOffset) : builder.CreateString(_o.FmDeskNum);
    var _fmName = _o.FmName == null ? default(StringOffset) : builder.CreateString(_o.FmName);
    var _parkingLoc = _o.ParkingLoc == null ? default(StringOffset) : builder.CreateString(_o.ParkingLoc);
    var _objectiveRemarks = _o.ObjectiveRemarks == null ? default(StringOffset) : builder.CreateString(_o.ObjectiveRemarks);
    var _aircraftRemarks = _o.AircraftRemarks == null ? default(StringOffset) : builder.CreateString(_o.AircraftRemarks);
    var _scheduleRemarks = _o.ScheduleRemarks == null ? default(StringOffset) : builder.CreateString(_o.ScheduleRemarks);
    var _resultRemarks = _o.ResultRemarks == null ? default(StringOffset) : builder.CreateString(_o.ResultRemarks);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAircraftSortie_Abridged(
      builder,
      _id,
      _classificationMarking,
      _origSortieId,
      _idAircraft,
      _aircraftAltId,
      _tailNumber,
      _aircraftMDS,
      _aircraftADSB,
      _sortieDate,
      _o.LineNumber,
      _idMission,
      _missionId,
      _amcMsnNum,
      _amcMsnType,
      _callSign,
      _jcsPriority,
      _primarySCL,
      _secondarySCL,
      _reqConfig,
      _cargoConfig,
      _o.FuelReq,
      _o.OxyReqCrew,
      _o.OxyOnCrew,
      _o.OxyReqPax,
      _o.OxyOnPax,
      _alertStatusCode,
      _o.AlertStatus,
      _currentState,
      _o.DepItinerary,
      _depICAO,
      _depIATA,
      _depFAA,
      _plannedDepTime,
      _estDepTime,
      _actualDepTime,
      _estBlockOutTime,
      _actualBlockOutTime,
      _depPurposeCode,
      _o.ArrItinerary,
      _arrICAO,
      _arrIATA,
      _arrFAA,
      _plannedArrTime,
      _estArrTime,
      _actualArrTime,
      _estBlockInTime,
      _actualBlockInTime,
      _arrPurposeCode,
      _dhd,
      _dhdReason,
      _aircraftEvent,
      _soe,
      _o.LegNum,
      _o.FlightTime,
      _o.GndTime,
      _rawFileURI,
      _papersVersion,
      _filename,
      _o.Filesize,
      _o.PaperStatus,
      _o.PprStatus,
      _missionUpdate,
      _delayCode,
      _commanderName,
      _fmDeskNum,
      _fmName,
      _o.RvnReq,
      _o.Passengers,
      _parkingLoc,
      _objectiveRemarks,
      _aircraftRemarks,
      _scheduleRemarks,
      _resultRemarks,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class AircraftSortie_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigSortieId { get; set; }
  public string IdAircraft { get; set; }
  public string AircraftAltId { get; set; }
  public string TailNumber { get; set; }
  public string AircraftMDS { get; set; }
  public string AircraftADSB { get; set; }
  public string SortieDate { get; set; }
  public int LineNumber { get; set; }
  public string IdMission { get; set; }
  public string MissionId { get; set; }
  public string AmcMsnNum { get; set; }
  public string AmcMsnType { get; set; }
  public string CallSign { get; set; }
  public string JcsPriority { get; set; }
  public string PrimarySCL { get; set; }
  public string SecondarySCL { get; set; }
  public string ReqConfig { get; set; }
  public string CargoConfig { get; set; }
  public double FuelReq { get; set; }
  public double OxyReqCrew { get; set; }
  public double OxyOnCrew { get; set; }
  public double OxyReqPax { get; set; }
  public double OxyOnPax { get; set; }
  public string AlertStatusCode { get; set; }
  public int AlertStatus { get; set; }
  public string CurrentState { get; set; }
  public int DepItinerary { get; set; }
  public string DepICAO { get; set; }
  public string DepIATA { get; set; }
  public string DepFAA { get; set; }
  public string PlannedDepTime { get; set; }
  public string EstDepTime { get; set; }
  public string ActualDepTime { get; set; }
  public string EstBlockOutTime { get; set; }
  public string ActualBlockOutTime { get; set; }
  public string DepPurposeCode { get; set; }
  public int ArrItinerary { get; set; }
  public string ArrICAO { get; set; }
  public string ArrIATA { get; set; }
  public string ArrFAA { get; set; }
  public string PlannedArrTime { get; set; }
  public string EstArrTime { get; set; }
  public string ActualArrTime { get; set; }
  public string EstBlockInTime { get; set; }
  public string ActualBlockInTime { get; set; }
  public string ArrPurposeCode { get; set; }
  public string Dhd { get; set; }
  public string DhdReason { get; set; }
  public string AircraftEvent { get; set; }
  public string Soe { get; set; }
  public int LegNum { get; set; }
  public double FlightTime { get; set; }
  public double GndTime { get; set; }
  public string RawFileURI { get; set; }
  public string PapersVersion { get; set; }
  public string Filename { get; set; }
  public int Filesize { get; set; }
  public AircraftSortie_Abridged_paperStatus_Enum PaperStatus { get; set; }
  public AircraftSortie_Abridged_pprStatus_Enum PprStatus { get; set; }
  public string MissionUpdate { get; set; }
  public string DelayCode { get; set; }
  public string CommanderName { get; set; }
  public string FmDeskNum { get; set; }
  public string FmName { get; set; }
  public AircraftSortie_Abridged_rvnReq_Enum RvnReq { get; set; }
  public int Passengers { get; set; }
  public string ParkingLoc { get; set; }
  public string ObjectiveRemarks { get; set; }
  public string AircraftRemarks { get; set; }
  public string ScheduleRemarks { get; set; }
  public string ResultRemarks { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public AircraftSortie_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public AircraftSortie_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.OrigSortieId = null;
    this.IdAircraft = null;
    this.AircraftAltId = null;
    this.TailNumber = null;
    this.AircraftMDS = null;
    this.AircraftADSB = null;
    this.SortieDate = null;
    this.LineNumber = 0;
    this.IdMission = null;
    this.MissionId = null;
    this.AmcMsnNum = null;
    this.AmcMsnType = null;
    this.CallSign = null;
    this.JcsPriority = null;
    this.PrimarySCL = null;
    this.SecondarySCL = null;
    this.ReqConfig = null;
    this.CargoConfig = null;
    this.FuelReq = 0.0;
    this.OxyReqCrew = 0.0;
    this.OxyOnCrew = 0.0;
    this.OxyReqPax = 0.0;
    this.OxyOnPax = 0.0;
    this.AlertStatusCode = null;
    this.AlertStatus = 0;
    this.CurrentState = null;
    this.DepItinerary = 0;
    this.DepICAO = null;
    this.DepIATA = null;
    this.DepFAA = null;
    this.PlannedDepTime = null;
    this.EstDepTime = null;
    this.ActualDepTime = null;
    this.EstBlockOutTime = null;
    this.ActualBlockOutTime = null;
    this.DepPurposeCode = null;
    this.ArrItinerary = 0;
    this.ArrICAO = null;
    this.ArrIATA = null;
    this.ArrFAA = null;
    this.PlannedArrTime = null;
    this.EstArrTime = null;
    this.ActualArrTime = null;
    this.EstBlockInTime = null;
    this.ActualBlockInTime = null;
    this.ArrPurposeCode = null;
    this.Dhd = null;
    this.DhdReason = null;
    this.AircraftEvent = null;
    this.Soe = null;
    this.LegNum = 0;
    this.FlightTime = 0.0;
    this.GndTime = 0.0;
    this.RawFileURI = null;
    this.PapersVersion = null;
    this.Filename = null;
    this.Filesize = 0;
    this.PaperStatus = AircraftSortie_Abridged_paperStatus_Enum.PUBLISHED;
    this.PprStatus = AircraftSortie_Abridged_pprStatus_Enum.NOT_REQUIRED;
    this.MissionUpdate = null;
    this.DelayCode = null;
    this.CommanderName = null;
    this.FmDeskNum = null;
    this.FmName = null;
    this.RvnReq = AircraftSortie_Abridged_rvnReq_Enum.N;
    this.Passengers = 0;
    this.ParkingLoc = null;
    this.ObjectiveRemarks = null;
    this.AircraftRemarks = null;
    this.ScheduleRemarks = null;
    this.ResultRemarks = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = AircraftSortie_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static AircraftSortie_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftSortie_Abridged.GetRootAsAircraftSortie_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftSortie_Abridged.FinishAircraftSortie_AbridgedBuffer(fbb, AircraftSortie_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftSortie_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OrigSortieId*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdAircraft*/, false)
      && verifier.VerifyString(tablePos, 12 /*AircraftAltId*/, false)
      && verifier.VerifyString(tablePos, 14 /*TailNumber*/, false)
      && verifier.VerifyString(tablePos, 16 /*AircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 18 /*AircraftADSB*/, false)
      && verifier.VerifyString(tablePos, 20 /*SortieDate*/, false)
      && verifier.VerifyField(tablePos, 22 /*LineNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*IdMission*/, false)
      && verifier.VerifyString(tablePos, 26 /*MissionId*/, false)
      && verifier.VerifyString(tablePos, 28 /*AmcMsnNum*/, false)
      && verifier.VerifyString(tablePos, 30 /*AmcMsnType*/, false)
      && verifier.VerifyString(tablePos, 32 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 34 /*JcsPriority*/, false)
      && verifier.VerifyString(tablePos, 36 /*PrimarySCL*/, false)
      && verifier.VerifyString(tablePos, 38 /*SecondarySCL*/, false)
      && verifier.VerifyString(tablePos, 40 /*ReqConfig*/, false)
      && verifier.VerifyString(tablePos, 42 /*CargoConfig*/, false)
      && verifier.VerifyField(tablePos, 44 /*FuelReq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*OxyReqCrew*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*OxyOnCrew*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*OxyReqPax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*OxyOnPax*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*AlertStatusCode*/, false)
      && verifier.VerifyField(tablePos, 56 /*AlertStatus*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*CurrentState*/, false)
      && verifier.VerifyField(tablePos, 60 /*DepItinerary*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 62 /*DepICAO*/, false)
      && verifier.VerifyString(tablePos, 64 /*DepIATA*/, false)
      && verifier.VerifyString(tablePos, 66 /*DepFAA*/, false)
      && verifier.VerifyString(tablePos, 68 /*PlannedDepTime*/, false)
      && verifier.VerifyString(tablePos, 70 /*EstDepTime*/, false)
      && verifier.VerifyString(tablePos, 72 /*ActualDepTime*/, false)
      && verifier.VerifyString(tablePos, 74 /*EstBlockOutTime*/, false)
      && verifier.VerifyString(tablePos, 76 /*ActualBlockOutTime*/, false)
      && verifier.VerifyString(tablePos, 78 /*DepPurposeCode*/, false)
      && verifier.VerifyField(tablePos, 80 /*ArrItinerary*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 82 /*ArrICAO*/, false)
      && verifier.VerifyString(tablePos, 84 /*ArrIATA*/, false)
      && verifier.VerifyString(tablePos, 86 /*ArrFAA*/, false)
      && verifier.VerifyString(tablePos, 88 /*PlannedArrTime*/, false)
      && verifier.VerifyString(tablePos, 90 /*EstArrTime*/, false)
      && verifier.VerifyString(tablePos, 92 /*ActualArrTime*/, false)
      && verifier.VerifyString(tablePos, 94 /*EstBlockInTime*/, false)
      && verifier.VerifyString(tablePos, 96 /*ActualBlockInTime*/, false)
      && verifier.VerifyString(tablePos, 98 /*ArrPurposeCode*/, false)
      && verifier.VerifyString(tablePos, 100 /*Dhd*/, false)
      && verifier.VerifyString(tablePos, 102 /*DhdReason*/, false)
      && verifier.VerifyString(tablePos, 104 /*AircraftEvent*/, false)
      && verifier.VerifyString(tablePos, 106 /*Soe*/, false)
      && verifier.VerifyField(tablePos, 108 /*LegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*FlightTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*GndTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 114 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 116 /*PapersVersion*/, false)
      && verifier.VerifyString(tablePos, 118 /*Filename*/, false)
      && verifier.VerifyField(tablePos, 120 /*Filesize*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*PaperStatus*/, 1 /*AircraftSortie_Abridged_paperStatus_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 124 /*PprStatus*/, 1 /*AircraftSortie_Abridged_pprStatus_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 126 /*MissionUpdate*/, false)
      && verifier.VerifyString(tablePos, 128 /*DelayCode*/, false)
      && verifier.VerifyString(tablePos, 130 /*CommanderName*/, false)
      && verifier.VerifyString(tablePos, 132 /*FmDeskNum*/, false)
      && verifier.VerifyString(tablePos, 134 /*FmName*/, false)
      && verifier.VerifyField(tablePos, 136 /*RvnReq*/, 1 /*AircraftSortie_Abridged_rvnReq_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 138 /*Passengers*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 140 /*ParkingLoc*/, false)
      && verifier.VerifyString(tablePos, 142 /*ObjectiveRemarks*/, false)
      && verifier.VerifyString(tablePos, 144 /*AircraftRemarks*/, false)
      && verifier.VerifyString(tablePos, 146 /*ScheduleRemarks*/, false)
      && verifier.VerifyString(tablePos, 148 /*ResultRemarks*/, false)
      && verifier.VerifyString(tablePos, 150 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 152 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 154 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 156 /*Source*/, false)
      && verifier.VerifyString(tablePos, 158 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 160 /*DataMode*/, 1 /*AircraftSortie_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 162 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
