// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of diplomatic clearance details.
public struct DiplomaticClearanceDetails_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DiplomaticClearanceDetails_Abridged GetRootAsDiplomaticClearanceDetails_Abridged(ByteBuffer _bb) { return GetRootAsDiplomaticClearanceDetails_Abridged(_bb, new DiplomaticClearanceDetails_Abridged()); }
  public static DiplomaticClearanceDetails_Abridged GetRootAsDiplomaticClearanceDetails_Abridged(ByteBuffer _bb, DiplomaticClearanceDetails_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DiplomaticClearanceDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DIPL"); }
  public static bool VerifyDiplomaticClearanceDetails_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DIPL", false, DiplomaticClearanceDetails_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DiplomaticClearanceDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
  /// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSortie { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSortieBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdSortieBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdSortieArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifies the Itinerary point of a sortie where an air event occurs.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  public int LegNum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  /// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
  /// Constraints: Minimum length = 0, Maximum length = 4000
  public string RouteString { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRouteStringBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRouteStringBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRouteStringArray() { return __p.__vector_as_array<byte>(8); }
  /// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ValidStartTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValidStartTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetValidStartTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetValidStartTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ValidEndTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValidEndTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetValidEndTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetValidEndTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Identifier of this diplomatic clearance issued by the host country.
  /// Example: /// Example: MFMW225662GHQ
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ClearanceId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClearanceIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetClearanceIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetClearanceIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalClearanceId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalClearanceIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetExternalClearanceIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetExternalClearanceIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The call sign of the sortie cleared with this diplomatic clearance.
  /// Example: /// Example: FALCN09
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ClearedCallSign { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClearedCallSignBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetClearedCallSignBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetClearedCallSignArray() { return __p.__vector_as_array<byte>(18); }
  /// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int SequenceNum { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: NL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(22); }
  /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AltCountryCode { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltCountryCodeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetAltCountryCodeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetAltCountryCodeArray() { return __p.__vector_as_array<byte>(24); }
  /// Name of the country issuing this diplomatic clearance.
  /// Example: /// Example: NETHERLANDS
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string CountryName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCountryNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCountryNameArray() { return __p.__vector_as_array<byte>(26); }
  /// Description of when this diplomatic clearance is valid.
  /// Example: /// Example: CY2023
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ValidDesc { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValidDescBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetValidDescBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetValidDescArray() { return __p.__vector_as_array<byte>(28); }
  /// Remarks concerning the valid diplomatic clearance window.
  /// Example: /// Example: Period remarks
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string WindowRemark { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWindowRemarkBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetWindowRemarkBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetWindowRemarkArray() { return __p.__vector_as_array<byte>(30); }
  /// The navigation point name where the aircraft must enter the country.
  /// Example: /// Example: LOMOS
  /// Constraints: Minimum length = 0, Maximum length = 38
  public string EntryPoint { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntryPointBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEntryPointBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEntryPointArray() { return __p.__vector_as_array<byte>(32); }
  /// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EntryNET { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntryNETBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEntryNETBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEntryNETArray() { return __p.__vector_as_array<byte>(34); }
  /// The navigation point name where the aircraft must exit the country.
  /// Example: /// Example: BUDOP
  /// Constraints: Minimum length = 0, Maximum length = 38
  public string ExitPoint { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExitPointBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetExitPointBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetExitPointArray() { return __p.__vector_as_array<byte>(36); }
  /// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ExitNLT { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExitNLTBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetExitNLTBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetExitNLTArray() { return __p.__vector_as_array<byte>(38); }
  /// Flag indicating whether the clearance request requires ICAO specific information.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool ReqICAO { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
  /// Example: /// Example: O
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string Action { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetActionBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetActionArray() { return __p.__vector_as_array<byte>(42); }
  /// Indicates the current status of the diplomatic clearance request.
  /// Example: /// Example: IN WORK
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Status { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(44); }
  /// The diplomatic clearance profile name used within clearance management systems.
  /// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string Profile { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProfileBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetProfileBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetProfileArray() { return __p.__vector_as_array<byte>(46); }
  /// Flag indicating whether entry/exit points are required for clearances.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool ReqPoint { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Remarks concerning this diplomatic clearance.
  /// Example: /// Example: Clearance remarks
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string ClearanceRemark { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClearanceRemarkBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetClearanceRemarkBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetClearanceRemarkArray() { return __p.__vector_as_array<byte>(50); }

  public static Offset<DiplomaticClearanceDetails_Abridged> CreateDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder,
      StringOffset idSortieOffset = default(StringOffset),
      int legNum = 0,
      StringOffset routeStringOffset = default(StringOffset),
      StringOffset validStartTimeOffset = default(StringOffset),
      StringOffset validEndTimeOffset = default(StringOffset),
      StringOffset clearanceIdOffset = default(StringOffset),
      StringOffset externalClearanceIdOffset = default(StringOffset),
      StringOffset clearedCallSignOffset = default(StringOffset),
      int sequenceNum = 0,
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset altCountryCodeOffset = default(StringOffset),
      StringOffset countryNameOffset = default(StringOffset),
      StringOffset validDescOffset = default(StringOffset),
      StringOffset windowRemarkOffset = default(StringOffset),
      StringOffset entryPointOffset = default(StringOffset),
      StringOffset entryNETOffset = default(StringOffset),
      StringOffset exitPointOffset = default(StringOffset),
      StringOffset exitNLTOffset = default(StringOffset),
      bool reqICAO = false,
      StringOffset actionOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset profileOffset = default(StringOffset),
      bool reqPoint = false,
      StringOffset clearanceRemarkOffset = default(StringOffset)) {
    builder.StartTable(24);
    DiplomaticClearanceDetails_Abridged.AddClearanceRemark(builder, clearanceRemarkOffset);
    DiplomaticClearanceDetails_Abridged.AddProfile(builder, profileOffset);
    DiplomaticClearanceDetails_Abridged.AddStatus(builder, statusOffset);
    DiplomaticClearanceDetails_Abridged.AddAction(builder, actionOffset);
    DiplomaticClearanceDetails_Abridged.AddExitNLT(builder, exitNLTOffset);
    DiplomaticClearanceDetails_Abridged.AddExitPoint(builder, exitPointOffset);
    DiplomaticClearanceDetails_Abridged.AddEntryNET(builder, entryNETOffset);
    DiplomaticClearanceDetails_Abridged.AddEntryPoint(builder, entryPointOffset);
    DiplomaticClearanceDetails_Abridged.AddWindowRemark(builder, windowRemarkOffset);
    DiplomaticClearanceDetails_Abridged.AddValidDesc(builder, validDescOffset);
    DiplomaticClearanceDetails_Abridged.AddCountryName(builder, countryNameOffset);
    DiplomaticClearanceDetails_Abridged.AddAltCountryCode(builder, altCountryCodeOffset);
    DiplomaticClearanceDetails_Abridged.AddCountryCode(builder, countryCodeOffset);
    DiplomaticClearanceDetails_Abridged.AddSequenceNum(builder, sequenceNum);
    DiplomaticClearanceDetails_Abridged.AddClearedCallSign(builder, clearedCallSignOffset);
    DiplomaticClearanceDetails_Abridged.AddExternalClearanceId(builder, externalClearanceIdOffset);
    DiplomaticClearanceDetails_Abridged.AddClearanceId(builder, clearanceIdOffset);
    DiplomaticClearanceDetails_Abridged.AddValidEndTime(builder, validEndTimeOffset);
    DiplomaticClearanceDetails_Abridged.AddValidStartTime(builder, validStartTimeOffset);
    DiplomaticClearanceDetails_Abridged.AddRouteString(builder, routeStringOffset);
    DiplomaticClearanceDetails_Abridged.AddLegNum(builder, legNum);
    DiplomaticClearanceDetails_Abridged.AddIdSortie(builder, idSortieOffset);
    DiplomaticClearanceDetails_Abridged.AddReqPoint(builder, reqPoint);
    DiplomaticClearanceDetails_Abridged.AddReqICAO(builder, reqICAO);
    return DiplomaticClearanceDetails_Abridged.EndDiplomaticClearanceDetails_Abridged(builder);
  }

  public static void StartDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddIdSortie(FlatBufferBuilder builder, StringOffset idSortieOffset) { builder.AddOffset(0, idSortieOffset.Value, 0); }
  public static void AddLegNum(FlatBufferBuilder builder, int legNum) { builder.AddInt(1, legNum, 0); }
  public static void AddRouteString(FlatBufferBuilder builder, StringOffset routeStringOffset) { builder.AddOffset(2, routeStringOffset.Value, 0); }
  public static void AddValidStartTime(FlatBufferBuilder builder, StringOffset validStartTimeOffset) { builder.AddOffset(3, validStartTimeOffset.Value, 0); }
  public static void AddValidEndTime(FlatBufferBuilder builder, StringOffset validEndTimeOffset) { builder.AddOffset(4, validEndTimeOffset.Value, 0); }
  public static void AddClearanceId(FlatBufferBuilder builder, StringOffset clearanceIdOffset) { builder.AddOffset(5, clearanceIdOffset.Value, 0); }
  public static void AddExternalClearanceId(FlatBufferBuilder builder, StringOffset externalClearanceIdOffset) { builder.AddOffset(6, externalClearanceIdOffset.Value, 0); }
  public static void AddClearedCallSign(FlatBufferBuilder builder, StringOffset clearedCallSignOffset) { builder.AddOffset(7, clearedCallSignOffset.Value, 0); }
  public static void AddSequenceNum(FlatBufferBuilder builder, int sequenceNum) { builder.AddInt(8, sequenceNum, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(9, countryCodeOffset.Value, 0); }
  public static void AddAltCountryCode(FlatBufferBuilder builder, StringOffset altCountryCodeOffset) { builder.AddOffset(10, altCountryCodeOffset.Value, 0); }
  public static void AddCountryName(FlatBufferBuilder builder, StringOffset countryNameOffset) { builder.AddOffset(11, countryNameOffset.Value, 0); }
  public static void AddValidDesc(FlatBufferBuilder builder, StringOffset validDescOffset) { builder.AddOffset(12, validDescOffset.Value, 0); }
  public static void AddWindowRemark(FlatBufferBuilder builder, StringOffset windowRemarkOffset) { builder.AddOffset(13, windowRemarkOffset.Value, 0); }
  public static void AddEntryPoint(FlatBufferBuilder builder, StringOffset entryPointOffset) { builder.AddOffset(14, entryPointOffset.Value, 0); }
  public static void AddEntryNET(FlatBufferBuilder builder, StringOffset entryNETOffset) { builder.AddOffset(15, entryNETOffset.Value, 0); }
  public static void AddExitPoint(FlatBufferBuilder builder, StringOffset exitPointOffset) { builder.AddOffset(16, exitPointOffset.Value, 0); }
  public static void AddExitNLT(FlatBufferBuilder builder, StringOffset exitNLTOffset) { builder.AddOffset(17, exitNLTOffset.Value, 0); }
  public static void AddReqICAO(FlatBufferBuilder builder, bool reqICAO) { builder.AddBool(18, reqICAO, false); }
  public static void AddAction(FlatBufferBuilder builder, StringOffset actionOffset) { builder.AddOffset(19, actionOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(20, statusOffset.Value, 0); }
  public static void AddProfile(FlatBufferBuilder builder, StringOffset profileOffset) { builder.AddOffset(21, profileOffset.Value, 0); }
  public static void AddReqPoint(FlatBufferBuilder builder, bool reqPoint) { builder.AddBool(22, reqPoint, false); }
  public static void AddClearanceRemark(FlatBufferBuilder builder, StringOffset clearanceRemarkOffset) { builder.AddOffset(23, clearanceRemarkOffset.Value, 0); }
  public static Offset<DiplomaticClearanceDetails_Abridged> EndDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DiplomaticClearanceDetails_Abridged>(o);
  }
  public static void FinishDiplomaticClearanceDetails_AbridgedBuffer(FlatBufferBuilder builder, Offset<DiplomaticClearanceDetails_Abridged> offset) { builder.Finish(offset.Value, "DIPL"); }
  public static void FinishSizePrefixedDiplomaticClearanceDetails_AbridgedBuffer(FlatBufferBuilder builder, Offset<DiplomaticClearanceDetails_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "DIPL"); }
  public DiplomaticClearanceDetails_AbridgedT UnPack() {
    var _o = new DiplomaticClearanceDetails_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DiplomaticClearanceDetails_AbridgedT _o) {
    _o.IdSortie = this.IdSortie;
    _o.LegNum = this.LegNum;
    _o.RouteString = this.RouteString;
    _o.ValidStartTime = this.ValidStartTime;
    _o.ValidEndTime = this.ValidEndTime;
    _o.ClearanceId = this.ClearanceId;
    _o.ExternalClearanceId = this.ExternalClearanceId;
    _o.ClearedCallSign = this.ClearedCallSign;
    _o.SequenceNum = this.SequenceNum;
    _o.CountryCode = this.CountryCode;
    _o.AltCountryCode = this.AltCountryCode;
    _o.CountryName = this.CountryName;
    _o.ValidDesc = this.ValidDesc;
    _o.WindowRemark = this.WindowRemark;
    _o.EntryPoint = this.EntryPoint;
    _o.EntryNET = this.EntryNET;
    _o.ExitPoint = this.ExitPoint;
    _o.ExitNLT = this.ExitNLT;
    _o.ReqICAO = this.ReqICAO;
    _o.Action = this.Action;
    _o.Status = this.Status;
    _o.Profile = this.Profile;
    _o.ReqPoint = this.ReqPoint;
    _o.ClearanceRemark = this.ClearanceRemark;
  }
  public static Offset<DiplomaticClearanceDetails_Abridged> Pack(FlatBufferBuilder builder, DiplomaticClearanceDetails_AbridgedT _o) {
    if (_o == null) return default(Offset<DiplomaticClearanceDetails_Abridged>);
    var _idSortie = _o.IdSortie == null ? default(StringOffset) : builder.CreateString(_o.IdSortie);
    var _routeString = _o.RouteString == null ? default(StringOffset) : builder.CreateString(_o.RouteString);
    var _validStartTime = _o.ValidStartTime == null ? default(StringOffset) : builder.CreateString(_o.ValidStartTime);
    var _validEndTime = _o.ValidEndTime == null ? default(StringOffset) : builder.CreateString(_o.ValidEndTime);
    var _clearanceId = _o.ClearanceId == null ? default(StringOffset) : builder.CreateString(_o.ClearanceId);
    var _externalClearanceId = _o.ExternalClearanceId == null ? default(StringOffset) : builder.CreateString(_o.ExternalClearanceId);
    var _clearedCallSign = _o.ClearedCallSign == null ? default(StringOffset) : builder.CreateString(_o.ClearedCallSign);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _altCountryCode = _o.AltCountryCode == null ? default(StringOffset) : builder.CreateString(_o.AltCountryCode);
    var _countryName = _o.CountryName == null ? default(StringOffset) : builder.CreateString(_o.CountryName);
    var _validDesc = _o.ValidDesc == null ? default(StringOffset) : builder.CreateString(_o.ValidDesc);
    var _windowRemark = _o.WindowRemark == null ? default(StringOffset) : builder.CreateString(_o.WindowRemark);
    var _entryPoint = _o.EntryPoint == null ? default(StringOffset) : builder.CreateString(_o.EntryPoint);
    var _entryNET = _o.EntryNET == null ? default(StringOffset) : builder.CreateString(_o.EntryNET);
    var _exitPoint = _o.ExitPoint == null ? default(StringOffset) : builder.CreateString(_o.ExitPoint);
    var _exitNLT = _o.ExitNLT == null ? default(StringOffset) : builder.CreateString(_o.ExitNLT);
    var _action = _o.Action == null ? default(StringOffset) : builder.CreateString(_o.Action);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _profile = _o.Profile == null ? default(StringOffset) : builder.CreateString(_o.Profile);
    var _clearanceRemark = _o.ClearanceRemark == null ? default(StringOffset) : builder.CreateString(_o.ClearanceRemark);
    return CreateDiplomaticClearanceDetails_Abridged(
      builder,
      _idSortie,
      _o.LegNum,
      _routeString,
      _validStartTime,
      _validEndTime,
      _clearanceId,
      _externalClearanceId,
      _clearedCallSign,
      _o.SequenceNum,
      _countryCode,
      _altCountryCode,
      _countryName,
      _validDesc,
      _windowRemark,
      _entryPoint,
      _entryNET,
      _exitPoint,
      _exitNLT,
      _o.ReqICAO,
      _action,
      _status,
      _profile,
      _o.ReqPoint,
      _clearanceRemark);
  }
}

public class DiplomaticClearanceDetails_AbridgedT
{
  public string IdSortie { get; set; }
  public int LegNum { get; set; }
  public string RouteString { get; set; }
  public string ValidStartTime { get; set; }
  public string ValidEndTime { get; set; }
  public string ClearanceId { get; set; }
  public string ExternalClearanceId { get; set; }
  public string ClearedCallSign { get; set; }
  public int SequenceNum { get; set; }
  public string CountryCode { get; set; }
  public string AltCountryCode { get; set; }
  public string CountryName { get; set; }
  public string ValidDesc { get; set; }
  public string WindowRemark { get; set; }
  public string EntryPoint { get; set; }
  public string EntryNET { get; set; }
  public string ExitPoint { get; set; }
  public string ExitNLT { get; set; }
  public bool ReqICAO { get; set; }
  public string Action { get; set; }
  public string Status { get; set; }
  public string Profile { get; set; }
  public bool ReqPoint { get; set; }
  public string ClearanceRemark { get; set; }

  public DiplomaticClearanceDetails_AbridgedT() {
    this.IdSortie = null;
    this.LegNum = 0;
    this.RouteString = null;
    this.ValidStartTime = null;
    this.ValidEndTime = null;
    this.ClearanceId = null;
    this.ExternalClearanceId = null;
    this.ClearedCallSign = null;
    this.SequenceNum = 0;
    this.CountryCode = null;
    this.AltCountryCode = null;
    this.CountryName = null;
    this.ValidDesc = null;
    this.WindowRemark = null;
    this.EntryPoint = null;
    this.EntryNET = null;
    this.ExitPoint = null;
    this.ExitNLT = null;
    this.ReqICAO = false;
    this.Action = null;
    this.Status = null;
    this.Profile = null;
    this.ReqPoint = false;
    this.ClearanceRemark = null;
  }
  public static DiplomaticClearanceDetails_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return DiplomaticClearanceDetails_Abridged.GetRootAsDiplomaticClearanceDetails_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DiplomaticClearanceDetails_Abridged.FinishDiplomaticClearanceDetails_AbridgedBuffer(fbb, DiplomaticClearanceDetails_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DiplomaticClearanceDetails_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdSortie*/, false)
      && verifier.VerifyField(tablePos, 6 /*LegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*RouteString*/, false)
      && verifier.VerifyString(tablePos, 10 /*ValidStartTime*/, false)
      && verifier.VerifyString(tablePos, 12 /*ValidEndTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*ClearanceId*/, false)
      && verifier.VerifyString(tablePos, 16 /*ExternalClearanceId*/, false)
      && verifier.VerifyString(tablePos, 18 /*ClearedCallSign*/, false)
      && verifier.VerifyField(tablePos, 20 /*SequenceNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 24 /*AltCountryCode*/, false)
      && verifier.VerifyString(tablePos, 26 /*CountryName*/, false)
      && verifier.VerifyString(tablePos, 28 /*ValidDesc*/, false)
      && verifier.VerifyString(tablePos, 30 /*WindowRemark*/, false)
      && verifier.VerifyString(tablePos, 32 /*EntryPoint*/, false)
      && verifier.VerifyString(tablePos, 34 /*EntryNET*/, false)
      && verifier.VerifyString(tablePos, 36 /*ExitPoint*/, false)
      && verifier.VerifyString(tablePos, 38 /*ExitNLT*/, false)
      && verifier.VerifyField(tablePos, 40 /*ReqICAO*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*Action*/, false)
      && verifier.VerifyString(tablePos, 44 /*Status*/, false)
      && verifier.VerifyString(tablePos, 46 /*Profile*/, false)
      && verifier.VerifyField(tablePos, 48 /*ReqPoint*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 50 /*ClearanceRemark*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
