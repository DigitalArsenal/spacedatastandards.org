// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
public struct AirspaceControlMeansStatus_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlMeansStatus_Full GetRootAsAirspaceControlMeansStatus_Full(ByteBuffer _bb) { return GetRootAsAirspaceControlMeansStatus_Full(_bb, new AirspaceControlMeansStatus_Full()); }
  public static AirspaceControlMeansStatus_Full GetRootAsAirspaceControlMeansStatus_Full(ByteBuffer _bb, AirspaceControlMeansStatus_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirspaceControlMeansStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRS"); }
  public static bool VerifyAirspaceControlMeansStatus_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRS", false, AirspaceControlMeansStatus_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirspaceControlMeansStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
  /// Example: /// Example: ADD
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string CmStat { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCmStatBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCmStatBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCmStatArray() { return __p.__vector_as_array<byte>(4); }
  /// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
  /// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
  /// Constraints: No constraints specified.
  public string CmStatId(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CmStatIdLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AirspaceControlMeans(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AirspaceControlMeansLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AirspaceControlMeansStatus_Full> CreateAirspaceControlMeansStatus_Full(FlatBufferBuilder builder,
      StringOffset cmStatOffset = default(StringOffset),
      VectorOffset cmStatIdOffset = default(VectorOffset),
      VectorOffset airspaceControlMeansOffset = default(VectorOffset)) {
    builder.StartTable(3);
    AirspaceControlMeansStatus_Full.AddAirspaceControlMeans(builder, airspaceControlMeansOffset);
    AirspaceControlMeansStatus_Full.AddCmStatId(builder, cmStatIdOffset);
    AirspaceControlMeansStatus_Full.AddCmStat(builder, cmStatOffset);
    return AirspaceControlMeansStatus_Full.EndAirspaceControlMeansStatus_Full(builder);
  }

  public static void StartAirspaceControlMeansStatus_Full(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCmStat(FlatBufferBuilder builder, StringOffset cmStatOffset) { builder.AddOffset(0, cmStatOffset.Value, 0); }
  public static void AddCmStatId(FlatBufferBuilder builder, VectorOffset cmStatIdOffset) { builder.AddOffset(1, cmStatIdOffset.Value, 0); }
  public static VectorOffset CreateCmStatIdVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCmStatIdVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCmStatIdVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCmStatIdVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCmStatIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAirspaceControlMeans(FlatBufferBuilder builder, VectorOffset airspaceControlMeansOffset) { builder.AddOffset(2, airspaceControlMeansOffset.Value, 0); }
  public static VectorOffset CreateAirspaceControlMeansVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAirspaceControlMeansVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AirspaceControlMeansStatus_Full> EndAirspaceControlMeansStatus_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirspaceControlMeansStatus_Full>(o);
  }
  public static void FinishAirspaceControlMeansStatus_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceControlMeansStatus_Full> offset) { builder.Finish(offset.Value, "AIRS"); }
  public static void FinishSizePrefixedAirspaceControlMeansStatus_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceControlMeansStatus_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRS"); }
  public AirspaceControlMeansStatus_FullT UnPack() {
    var _o = new AirspaceControlMeansStatus_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirspaceControlMeansStatus_FullT _o) {
    _o.CmStat = this.CmStat;
    _o.CmStatId = new List<string>();
    for (var _j = 0; _j < this.CmStatIdLength; ++_j) {_o.CmStatId.Add(this.CmStatId(_j));}
    _o.AirspaceControlMeans = new List<string>();
    for (var _j = 0; _j < this.AirspaceControlMeansLength; ++_j) {_o.AirspaceControlMeans.Add(this.AirspaceControlMeans(_j));}
  }
  public static Offset<AirspaceControlMeansStatus_Full> Pack(FlatBufferBuilder builder, AirspaceControlMeansStatus_FullT _o) {
    if (_o == null) return default(Offset<AirspaceControlMeansStatus_Full>);
    var _cmStat = _o.CmStat == null ? default(StringOffset) : builder.CreateString(_o.CmStat);
    var _cmStatId = default(VectorOffset);
    if (_o.CmStatId != null) {
      var __cmStatId = new StringOffset[_o.CmStatId.Count];
      for (var _j = 0; _j < __cmStatId.Length; ++_j) { __cmStatId[_j] = builder.CreateString(_o.CmStatId[_j]); }
      _cmStatId = CreateCmStatIdVector(builder, __cmStatId);
    }
    var _airspaceControlMeans = default(VectorOffset);
    if (_o.AirspaceControlMeans != null) {
      var __airspaceControlMeans = new StringOffset[_o.AirspaceControlMeans.Count];
      for (var _j = 0; _j < __airspaceControlMeans.Length; ++_j) { __airspaceControlMeans[_j] = builder.CreateString(_o.AirspaceControlMeans[_j]); }
      _airspaceControlMeans = CreateAirspaceControlMeansVector(builder, __airspaceControlMeans);
    }
    return CreateAirspaceControlMeansStatus_Full(
      builder,
      _cmStat,
      _cmStatId,
      _airspaceControlMeans);
  }
}

public class AirspaceControlMeansStatus_FullT
{
  public string CmStat { get; set; }
  public List<string> CmStatId { get; set; }
  public List<string> AirspaceControlMeans { get; set; }

  public AirspaceControlMeansStatus_FullT() {
    this.CmStat = null;
    this.CmStatId = null;
    this.AirspaceControlMeans = null;
  }
  public static AirspaceControlMeansStatus_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirspaceControlMeansStatus_Full.GetRootAsAirspaceControlMeansStatus_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirspaceControlMeansStatus_Full.FinishAirspaceControlMeansStatus_FullBuffer(fbb, AirspaceControlMeansStatus_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirspaceControlMeansStatus_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CmStat*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*CmStatId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*AirspaceControlMeans*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
