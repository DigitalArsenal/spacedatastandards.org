// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Objective Area Information.
public struct PersonnelRecoveryObjectiveAreaInfo_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PersonnelRecoveryObjectiveAreaInfo_Full GetRootAsPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer _bb) { return GetRootAsPersonnelRecoveryObjectiveAreaInfo_Full(_bb, new PersonnelRecoveryObjectiveAreaInfo_Full()); }
  public static PersonnelRecoveryObjectiveAreaInfo_Full GetRootAsPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer _bb, PersonnelRecoveryObjectiveAreaInfo_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PersonnelRecoveryObjectiveAreaInfo_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "PERS"); }
  public static bool VerifyPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("PERS", false, PersonnelRecoveryObjectiveAreaInfo_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PersonnelRecoveryObjectiveAreaInfo_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [103.23, 30.445]
  /// Constraints: No constraints specified.
  public string PzLocation(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PzLocationLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Description of the pickup zone location.
  /// Example: /// Example: Near the lake.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string PzDesc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPzDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPzDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPzDescArray() { return __p.__vector_as_array<byte>(6); }
  /// The call sign of the on-scene commander.
  /// Example: /// Example: STARFOX
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string OscCallSign { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOscCallSignBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOscCallSignBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOscCallSignArray() { return __p.__vector_as_array<byte>(8); }
  /// The radio frequency of the on-scene commander.
  /// Example: /// Example: 12.55
  /// Constraints: No constraints specified.
  public double OscFreq { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Information detailing knowledge of enemies in the area.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string EnemyData(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyDataLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PersonnelRecoveryObjectiveAreaInfo_Full> CreatePersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder,
      VectorOffset pzLocationOffset = default(VectorOffset),
      StringOffset pzDescOffset = default(StringOffset),
      StringOffset oscCallSignOffset = default(StringOffset),
      double oscFreq = 0.0,
      VectorOffset enemyDataOffset = default(VectorOffset)) {
    builder.StartTable(5);
    PersonnelRecoveryObjectiveAreaInfo_Full.AddOscFreq(builder, oscFreq);
    PersonnelRecoveryObjectiveAreaInfo_Full.AddEnemyData(builder, enemyDataOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.AddOscCallSign(builder, oscCallSignOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.AddPzDesc(builder, pzDescOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.AddPzLocation(builder, pzLocationOffset);
    return PersonnelRecoveryObjectiveAreaInfo_Full.EndPersonnelRecoveryObjectiveAreaInfo_Full(builder);
  }

  public static void StartPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPzLocation(FlatBufferBuilder builder, VectorOffset pzLocationOffset) { builder.AddOffset(0, pzLocationOffset.Value, 0); }
  public static VectorOffset CreatePzLocationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePzLocationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePzLocationVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePzLocationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPzLocationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPzDesc(FlatBufferBuilder builder, StringOffset pzDescOffset) { builder.AddOffset(1, pzDescOffset.Value, 0); }
  public static void AddOscCallSign(FlatBufferBuilder builder, StringOffset oscCallSignOffset) { builder.AddOffset(2, oscCallSignOffset.Value, 0); }
  public static void AddOscFreq(FlatBufferBuilder builder, double oscFreq) { builder.AddDouble(3, oscFreq, 0.0); }
  public static void AddEnemyData(FlatBufferBuilder builder, VectorOffset enemyDataOffset) { builder.AddOffset(4, enemyDataOffset.Value, 0); }
  public static VectorOffset CreateEnemyDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PersonnelRecoveryObjectiveAreaInfo_Full> EndPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PersonnelRecoveryObjectiveAreaInfo_Full>(o);
  }
  public static void FinishPersonnelRecoveryObjectiveAreaInfo_FullBuffer(FlatBufferBuilder builder, Offset<PersonnelRecoveryObjectiveAreaInfo_Full> offset) { builder.Finish(offset.Value, "PERS"); }
  public static void FinishSizePrefixedPersonnelRecoveryObjectiveAreaInfo_FullBuffer(FlatBufferBuilder builder, Offset<PersonnelRecoveryObjectiveAreaInfo_Full> offset) { builder.FinishSizePrefixed(offset.Value, "PERS"); }
  public PersonnelRecoveryObjectiveAreaInfo_FullT UnPack() {
    var _o = new PersonnelRecoveryObjectiveAreaInfo_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PersonnelRecoveryObjectiveAreaInfo_FullT _o) {
    _o.PzLocation = new List<string>();
    for (var _j = 0; _j < this.PzLocationLength; ++_j) {_o.PzLocation.Add(this.PzLocation(_j));}
    _o.PzDesc = this.PzDesc;
    _o.OscCallSign = this.OscCallSign;
    _o.OscFreq = this.OscFreq;
    _o.EnemyData = new List<string>();
    for (var _j = 0; _j < this.EnemyDataLength; ++_j) {_o.EnemyData.Add(this.EnemyData(_j));}
  }
  public static Offset<PersonnelRecoveryObjectiveAreaInfo_Full> Pack(FlatBufferBuilder builder, PersonnelRecoveryObjectiveAreaInfo_FullT _o) {
    if (_o == null) return default(Offset<PersonnelRecoveryObjectiveAreaInfo_Full>);
    var _pzLocation = default(VectorOffset);
    if (_o.PzLocation != null) {
      var __pzLocation = new StringOffset[_o.PzLocation.Count];
      for (var _j = 0; _j < __pzLocation.Length; ++_j) { __pzLocation[_j] = builder.CreateString(_o.PzLocation[_j]); }
      _pzLocation = CreatePzLocationVector(builder, __pzLocation);
    }
    var _pzDesc = _o.PzDesc == null ? default(StringOffset) : builder.CreateString(_o.PzDesc);
    var _oscCallSign = _o.OscCallSign == null ? default(StringOffset) : builder.CreateString(_o.OscCallSign);
    var _enemyData = default(VectorOffset);
    if (_o.EnemyData != null) {
      var __enemyData = new StringOffset[_o.EnemyData.Count];
      for (var _j = 0; _j < __enemyData.Length; ++_j) { __enemyData[_j] = builder.CreateString(_o.EnemyData[_j]); }
      _enemyData = CreateEnemyDataVector(builder, __enemyData);
    }
    return CreatePersonnelRecoveryObjectiveAreaInfo_Full(
      builder,
      _pzLocation,
      _pzDesc,
      _oscCallSign,
      _o.OscFreq,
      _enemyData);
  }
}

public class PersonnelRecoveryObjectiveAreaInfo_FullT
{
  public List<string> PzLocation { get; set; }
  public string PzDesc { get; set; }
  public string OscCallSign { get; set; }
  public double OscFreq { get; set; }
  public List<string> EnemyData { get; set; }

  public PersonnelRecoveryObjectiveAreaInfo_FullT() {
    this.PzLocation = null;
    this.PzDesc = null;
    this.OscCallSign = null;
    this.OscFreq = 0.0;
    this.EnemyData = null;
  }
  public static PersonnelRecoveryObjectiveAreaInfo_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return PersonnelRecoveryObjectiveAreaInfo_Full.GetRootAsPersonnelRecoveryObjectiveAreaInfo_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PersonnelRecoveryObjectiveAreaInfo_Full.FinishPersonnelRecoveryObjectiveAreaInfo_FullBuffer(fbb, PersonnelRecoveryObjectiveAreaInfo_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PersonnelRecoveryObjectiveAreaInfo_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*PzLocation*/, false)
      && verifier.VerifyString(tablePos, 6 /*PzDesc*/, false)
      && verifier.VerifyString(tablePos, 8 /*OscCallSign*/, false)
      && verifier.VerifyField(tablePos, 10 /*OscFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*EnemyData*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
