// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
/// Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
/// The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
public struct TAIUTC_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TAIUTC_Ingest GetRootAsTAIUTC_Ingest(ByteBuffer _bb) { return GetRootAsTAIUTC_Ingest(_bb, new TAIUTC_Ingest()); }
  public static TAIUTC_Ingest GetRootAsTAIUTC_Ingest(ByteBuffer _bb, TAIUTC_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TAIUTC_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TAIU"); }
  public static bool VerifyTAIUTC_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("TAIU", false, TAIUTC_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TAIUTC_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TAIUTC-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Effective date/time for the leap second adjustment.
  /// Example: /// Example: 2017-01-01T00:00:00.123Z
  /// Constraints: No constraints specified.
  public string AdjustmentDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAdjustmentDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAdjustmentDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAdjustmentDateArray() { return __p.__vector_as_array<byte>(8); }
  /// Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
  /// Example: /// Example: 1.422818
  /// Constraints: No constraints specified.
  public double TaiUTC { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Multiplication factor of the leap second adjustment.
  /// Example: /// Example: 0.001296
  /// Constraints: No constraints specified.
  public double MultiplicationFactor { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(14); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(16); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(18); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(20); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public TAIUTC_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(22); return o != 0 ? (TAIUTC_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : TAIUTC_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(24); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<TAIUTC_Ingest> CreateTAIUTC_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset adjustmentDateOffset = default(StringOffset),
      double taiUTC = 0.0,
      double multiplicationFactor = 0.0,
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      TAIUTC_Ingest_dataMode_Enum dataMode = TAIUTC_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(12);
    TAIUTC_Ingest.AddMultiplicationFactor(builder, multiplicationFactor);
    TAIUTC_Ingest.AddTaiUTC(builder, taiUTC);
    TAIUTC_Ingest.AddCreatedBy(builder, createdByOffset);
    TAIUTC_Ingest.AddCreatedAt(builder, createdAtOffset);
    TAIUTC_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    TAIUTC_Ingest.AddOrigin(builder, originOffset);
    TAIUTC_Ingest.AddSource(builder, sourceOffset);
    TAIUTC_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    TAIUTC_Ingest.AddAdjustmentDate(builder, adjustmentDateOffset);
    TAIUTC_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    TAIUTC_Ingest.AddId(builder, idOffset);
    TAIUTC_Ingest.AddDataMode(builder, dataMode);
    return TAIUTC_Ingest.EndTAIUTC_Ingest(builder);
  }

  public static void StartTAIUTC_Ingest(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddAdjustmentDate(FlatBufferBuilder builder, StringOffset adjustmentDateOffset) { builder.AddOffset(2, adjustmentDateOffset.Value, 0); }
  public static void AddTaiUTC(FlatBufferBuilder builder, double taiUTC) { builder.AddDouble(3, taiUTC, 0.0); }
  public static void AddMultiplicationFactor(FlatBufferBuilder builder, double multiplicationFactor) { builder.AddDouble(4, multiplicationFactor, 0.0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(5, rawFileURIOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(6, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(7, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(8, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, TAIUTC_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(9, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(10, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(11, createdByOffset.Value, 0); }
  public static Offset<TAIUTC_Ingest> EndTAIUTC_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TAIUTC_Ingest>(o);
  }
  public static void FinishTAIUTC_IngestBuffer(FlatBufferBuilder builder, Offset<TAIUTC_Ingest> offset) { builder.Finish(offset.Value, "TAIU"); }
  public static void FinishSizePrefixedTAIUTC_IngestBuffer(FlatBufferBuilder builder, Offset<TAIUTC_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "TAIU"); }
  public TAIUTC_IngestT UnPack() {
    var _o = new TAIUTC_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TAIUTC_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.AdjustmentDate = this.AdjustmentDate;
    _o.TaiUTC = this.TaiUTC;
    _o.MultiplicationFactor = this.MultiplicationFactor;
    _o.RawFileURI = this.RawFileURI;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<TAIUTC_Ingest> Pack(FlatBufferBuilder builder, TAIUTC_IngestT _o) {
    if (_o == null) return default(Offset<TAIUTC_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _adjustmentDate = _o.AdjustmentDate == null ? default(StringOffset) : builder.CreateString(_o.AdjustmentDate);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateTAIUTC_Ingest(
      builder,
      _id,
      _classificationMarking,
      _adjustmentDate,
      _o.TaiUTC,
      _o.MultiplicationFactor,
      _rawFileURI,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class TAIUTC_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string AdjustmentDate { get; set; }
  public double TaiUTC { get; set; }
  public double MultiplicationFactor { get; set; }
  public string RawFileURI { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public TAIUTC_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public TAIUTC_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.AdjustmentDate = null;
    this.TaiUTC = 0.0;
    this.MultiplicationFactor = 0.0;
    this.RawFileURI = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = TAIUTC_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static TAIUTC_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return TAIUTC_Ingest.GetRootAsTAIUTC_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TAIUTC_Ingest.FinishTAIUTC_IngestBuffer(fbb, TAIUTC_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class TAIUTC_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*AdjustmentDate*/, false)
      && verifier.VerifyField(tablePos, 10 /*TaiUTC*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*MultiplicationFactor*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 16 /*Source*/, false)
      && verifier.VerifyString(tablePos, 18 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 20 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 22 /*DataMode*/, 1 /*TAIUTC_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 26 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
