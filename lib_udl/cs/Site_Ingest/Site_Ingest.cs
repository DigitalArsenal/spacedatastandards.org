// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
public struct Site_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Site_Ingest GetRootAsSite_Ingest(ByteBuffer _bb) { return GetRootAsSite_Ingest(_bb, new Site_Ingest()); }
  public static Site_Ingest GetRootAsSite_Ingest(ByteBuffer _bb, Site_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Site_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SITE"); }
  public static bool VerifySite_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SITE", false, Site_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Site_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SITE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Entity { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEntityBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEntityArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the Parent Site record associated with this Site record.
  /// Example: /// Example: ID-Parent-Site
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdParentSite { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdParentSiteBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdParentSiteBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdParentSiteArray() { return __p.__vector_as_array<byte>(10); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the Site record from the originating system.
  /// Example: /// Example: ORIG-SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigSiteID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSiteIDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigSiteIDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigSiteIDArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the LZ record from the originating system.
  /// Example: /// Example: ORIG-LZ-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigLzId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigLzIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOrigLzIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOrigLzIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Site number of a specific electronic site or its associated equipment.
  /// Example: /// Example: 25200
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Pin { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPinBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPinBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPinArray() { return __p.__vector_as_array<byte>(18); }
  /// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
  /// Example: /// Example: AIRBASE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Type { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Usage { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsageBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetUsageBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetUsageArray() { return __p.__vector_as_array<byte>(22); }
  /// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
  /// AF - Airfield
  /// FD - Field
  /// HC - High Crop.  1 meter and over.
  /// HY - Highway
  /// LB - Lake Bed
  /// LC - Low Crop.  0-1 meters
  /// O - Other. Explain In Remarks.
  /// PD - Paddy
  /// PK - Park
  /// PS - Pasture
  /// RB - Riverbed
  /// SP - Sport Field
  /// U - Unknown
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: AF
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string LzUsage { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLzUsageBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLzUsageBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLzUsageArray() { return __p.__vector_as_array<byte>(24); }
  /// The name of this site.
  /// Example: /// Example: Site Name
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(26); }
  /// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string CoordDatum { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordDatumBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCoordDatumBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCoordDatumArray() { return __p.__vector_as_array<byte>(28); }
  /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  public string Coord { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetCoordBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetCoordArray() { return __p.__vector_as_array<byte>(30); }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  public double CoordDerivAcc { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
  /// Example: /// Example: BB002
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Osuffix { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOsuffixBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOsuffixBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOsuffixArray() { return __p.__vector_as_array<byte>(34); }
  /// The International Air Transport Association (IATA) code of this site, if applicable.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Iata { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIataBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetIataBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetIataArray() { return __p.__vector_as_array<byte>(36); }
  /// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
  /// Example: /// Example: ICA1
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Icao { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcaoBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetIcaoBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetIcaoArray() { return __p.__vector_as_array<byte>(38); }
  /// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Faa { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFaaBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetFaaBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetFaaArray() { return __p.__vector_as_array<byte>(40); }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string AirDefArea { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirDefAreaBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetAirDefAreaBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetAirDefAreaArray() { return __p.__vector_as_array<byte>(42); }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Utm { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUtmBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetUtmBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetUtmArray() { return __p.__vector_as_array<byte>(44); }
  /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator.
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string MilGridSys { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridSysBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetMilGridSysBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetMilGridSysArray() { return __p.__vector_as_array<byte>(46); }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string MilGrid { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetMilGridBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetMilGridArray() { return __p.__vector_as_array<byte>(48); }
  /// The category code that represents the associated site purpose within the target system.
  /// Example: /// Example: 20345
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CatCode { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCatCodeBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCatCodeBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCatCodeArray() { return __p.__vector_as_array<byte>(50); }
  /// Textual Description of Site catCode.
  /// Example: /// Example: Radar Facility, General
  /// Constraints: Minimum length = 0, Maximum length = 148
  public string CatText { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCatTextBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCatTextBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCatTextArray() { return __p.__vector_as_array<byte>(52); }
  /// World Aeronautical Chart identifier for the area in which a designated place is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Wac { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetWacBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetWacArray() { return __p.__vector_as_array<byte>(54); }
  /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZO7
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string PolSubdiv { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPolSubdivBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetPolSubdivBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetPolSubdivArray() { return __p.__vector_as_array<byte>(56); }
  /// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: E2
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string GeoArea { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoAreaBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetGeoAreaBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetGeoAreaArray() { return __p.__vector_as_array<byte>(58); }
  /// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double GeoidalMslSep { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Allegiance { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllegianceBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetAllegianceBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetAllegianceArray() { return __p.__vector_as_array<byte>(62); }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string AltAllegiance { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAllegianceBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetAltAllegianceBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetAltAllegianceArray() { return __p.__vector_as_array<byte>(64); }
  /// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  /// 0 - Does not meet criteria above
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string ClassRating { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassRatingBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetClassRatingBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetClassRatingArray() { return __p.__vector_as_array<byte>(66); }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: EOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Fpa { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFpaBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetFpaBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetFpaArray() { return __p.__vector_as_array<byte>(68); }
  /// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string BeNumber { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeNumberBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetBeNumberBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetBeNumberArray() { return __p.__vector_as_array<byte>(70); }
  /// The number of runways at the site, if applicable.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int Runways { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The length of the longest runway at this site, if applicable, in meters.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int MaxRunwayLength { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Condition { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(76); }
  /// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ConditionAvail { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionAvailBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetConditionAvailBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetConditionAvailArray() { return __p.__vector_as_array<byte>(78); }
  /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string OperStatus { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperStatusBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetOperStatusBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetOperStatusArray() { return __p.__vector_as_array<byte>(80); }
  /// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int Grade { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OCC
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Activity { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivityBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetActivityBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetActivityArray() { return __p.__vector_as_array<byte>(84); }
  /// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: JG
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string FunctPrimary { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctPrimaryBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetFunctPrimaryBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetFunctPrimaryArray() { return __p.__vector_as_array<byte>(86); }
  /// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AA
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string MsnPrimary { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnPrimaryBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetMsnPrimaryBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetMsnPrimaryArray() { return __p.__vector_as_array<byte>(88); }
  /// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AB
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string MsnPrimarySpec { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnPrimarySpecBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetMsnPrimarySpecBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetMsnPrimarySpecArray() { return __p.__vector_as_array<byte>(90); }
  /// A sites ability to conduct nuclear warfare. Valid Values are:
  /// A - Nuclear Ammo Or Warheads Available
  /// N - No Nuclear Offense
  /// O - Other. Explain in Remarks
  /// U - Unknown
  /// W - Nuclear Weapons Available
  /// Y - Nuclear Warfare Offensive Capability
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string NucCap { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNucCapBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetNucCapBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetNucCapArray() { return __p.__vector_as_array<byte>(92); }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Ident { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetIdentBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetIdentArray() { return __p.__vector_as_array<byte>(94); }
  /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  public double ElevMsl { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int ElevMslConfLvl { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double ElevMslDerivAcc { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public double VegHt { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: FR
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string VegType { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVegTypeBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetVegTypeBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetVegTypeArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool PopArea { get { int o = __p.__offset(106); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  public double PopAreaProx { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional notes/comments for the site.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(110); }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ResProd { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResProdBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetResProdBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetResProdArray() { return __p.__vector_as_array<byte>(112); }
  /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int Eval { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  public string ReviewDate { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviewDateBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetReviewDateBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetReviewDateArray() { return __p.__vector_as_array<byte>(116); }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string RecStatus { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecStatusBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetRecStatusBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetRecStatusArray() { return __p.__vector_as_array<byte>(118); }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string SymCode { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSymCodeBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetSymCodeBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetSymCodeArray() { return __p.__vector_as_array<byte>(120); }
  /// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ReferenceDoc { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReferenceDocBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetReferenceDocBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetReferenceDocArray() { return __p.__vector_as_array<byte>(122); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(124); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(126); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(128); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(130); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(132); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Site_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(134); return o != 0 ? (Site_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Site_Ingest_dataMode_Enum.REAL; } }

  public static Offset<Site_Ingest> CreateSite_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset entityOffset = default(StringOffset),
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset idParentSiteOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origSiteIDOffset = default(StringOffset),
      StringOffset origLzIdOffset = default(StringOffset),
      StringOffset pinOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset usageOffset = default(StringOffset),
      StringOffset lzUsageOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset coordDatumOffset = default(StringOffset),
      StringOffset coordOffset = default(StringOffset),
      double coordDerivAcc = 0.0,
      StringOffset osuffixOffset = default(StringOffset),
      StringOffset iataOffset = default(StringOffset),
      StringOffset icaoOffset = default(StringOffset),
      StringOffset faaOffset = default(StringOffset),
      StringOffset airDefAreaOffset = default(StringOffset),
      StringOffset utmOffset = default(StringOffset),
      StringOffset milGridSysOffset = default(StringOffset),
      StringOffset milGridOffset = default(StringOffset),
      StringOffset catCodeOffset = default(StringOffset),
      StringOffset catTextOffset = default(StringOffset),
      StringOffset wacOffset = default(StringOffset),
      StringOffset polSubdivOffset = default(StringOffset),
      StringOffset geoAreaOffset = default(StringOffset),
      double geoidalMslSep = 0.0,
      StringOffset allegianceOffset = default(StringOffset),
      StringOffset altAllegianceOffset = default(StringOffset),
      StringOffset classRatingOffset = default(StringOffset),
      StringOffset fpaOffset = default(StringOffset),
      StringOffset beNumberOffset = default(StringOffset),
      int runways = 0,
      int maxRunwayLength = 0,
      StringOffset conditionOffset = default(StringOffset),
      StringOffset conditionAvailOffset = default(StringOffset),
      StringOffset operStatusOffset = default(StringOffset),
      int grade = 0,
      StringOffset activityOffset = default(StringOffset),
      StringOffset functPrimaryOffset = default(StringOffset),
      StringOffset msnPrimaryOffset = default(StringOffset),
      StringOffset msnPrimarySpecOffset = default(StringOffset),
      StringOffset nucCapOffset = default(StringOffset),
      StringOffset identOffset = default(StringOffset),
      double elevMsl = 0.0,
      int elevMslConfLvl = 0,
      double elevMslDerivAcc = 0.0,
      double vegHt = 0.0,
      StringOffset vegTypeOffset = default(StringOffset),
      bool popArea = false,
      double popAreaProx = 0.0,
      StringOffset notesOffset = default(StringOffset),
      StringOffset resProdOffset = default(StringOffset),
      int eval = 0,
      StringOffset reviewDateOffset = default(StringOffset),
      StringOffset recStatusOffset = default(StringOffset),
      StringOffset symCodeOffset = default(StringOffset),
      StringOffset referenceDocOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Site_Ingest_dataMode_Enum dataMode = Site_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(66);
    Site_Ingest.AddPopAreaProx(builder, popAreaProx);
    Site_Ingest.AddVegHt(builder, vegHt);
    Site_Ingest.AddElevMslDerivAcc(builder, elevMslDerivAcc);
    Site_Ingest.AddElevMsl(builder, elevMsl);
    Site_Ingest.AddGeoidalMslSep(builder, geoidalMslSep);
    Site_Ingest.AddCoordDerivAcc(builder, coordDerivAcc);
    Site_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Site_Ingest.AddOrigin(builder, originOffset);
    Site_Ingest.AddSource(builder, sourceOffset);
    Site_Ingest.AddCreatedBy(builder, createdByOffset);
    Site_Ingest.AddCreatedAt(builder, createdAtOffset);
    Site_Ingest.AddReferenceDoc(builder, referenceDocOffset);
    Site_Ingest.AddSymCode(builder, symCodeOffset);
    Site_Ingest.AddRecStatus(builder, recStatusOffset);
    Site_Ingest.AddReviewDate(builder, reviewDateOffset);
    Site_Ingest.AddEval(builder, eval);
    Site_Ingest.AddResProd(builder, resProdOffset);
    Site_Ingest.AddNotes(builder, notesOffset);
    Site_Ingest.AddVegType(builder, vegTypeOffset);
    Site_Ingest.AddElevMslConfLvl(builder, elevMslConfLvl);
    Site_Ingest.AddIdent(builder, identOffset);
    Site_Ingest.AddNucCap(builder, nucCapOffset);
    Site_Ingest.AddMsnPrimarySpec(builder, msnPrimarySpecOffset);
    Site_Ingest.AddMsnPrimary(builder, msnPrimaryOffset);
    Site_Ingest.AddFunctPrimary(builder, functPrimaryOffset);
    Site_Ingest.AddActivity(builder, activityOffset);
    Site_Ingest.AddGrade(builder, grade);
    Site_Ingest.AddOperStatus(builder, operStatusOffset);
    Site_Ingest.AddConditionAvail(builder, conditionAvailOffset);
    Site_Ingest.AddCondition(builder, conditionOffset);
    Site_Ingest.AddMaxRunwayLength(builder, maxRunwayLength);
    Site_Ingest.AddRunways(builder, runways);
    Site_Ingest.AddBeNumber(builder, beNumberOffset);
    Site_Ingest.AddFpa(builder, fpaOffset);
    Site_Ingest.AddClassRating(builder, classRatingOffset);
    Site_Ingest.AddAltAllegiance(builder, altAllegianceOffset);
    Site_Ingest.AddAllegiance(builder, allegianceOffset);
    Site_Ingest.AddGeoArea(builder, geoAreaOffset);
    Site_Ingest.AddPolSubdiv(builder, polSubdivOffset);
    Site_Ingest.AddWac(builder, wacOffset);
    Site_Ingest.AddCatText(builder, catTextOffset);
    Site_Ingest.AddCatCode(builder, catCodeOffset);
    Site_Ingest.AddMilGrid(builder, milGridOffset);
    Site_Ingest.AddMilGridSys(builder, milGridSysOffset);
    Site_Ingest.AddUtm(builder, utmOffset);
    Site_Ingest.AddAirDefArea(builder, airDefAreaOffset);
    Site_Ingest.AddFaa(builder, faaOffset);
    Site_Ingest.AddIcao(builder, icaoOffset);
    Site_Ingest.AddIata(builder, iataOffset);
    Site_Ingest.AddOsuffix(builder, osuffixOffset);
    Site_Ingest.AddCoord(builder, coordOffset);
    Site_Ingest.AddCoordDatum(builder, coordDatumOffset);
    Site_Ingest.AddName(builder, nameOffset);
    Site_Ingest.AddLzUsage(builder, lzUsageOffset);
    Site_Ingest.AddUsage(builder, usageOffset);
    Site_Ingest.AddType(builder, typeOffset);
    Site_Ingest.AddPin(builder, pinOffset);
    Site_Ingest.AddOrigLzId(builder, origLzIdOffset);
    Site_Ingest.AddOrigSiteID(builder, origSiteIDOffset);
    Site_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Site_Ingest.AddIdParentSite(builder, idParentSiteOffset);
    Site_Ingest.AddIdEntity(builder, idEntityOffset);
    Site_Ingest.AddEntity(builder, entityOffset);
    Site_Ingest.AddId(builder, idOffset);
    Site_Ingest.AddDataMode(builder, dataMode);
    Site_Ingest.AddPopArea(builder, popArea);
    return Site_Ingest.EndSite_Ingest(builder);
  }

  public static void StartSite_Ingest(FlatBufferBuilder builder) { builder.StartTable(66); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddEntity(FlatBufferBuilder builder, StringOffset entityOffset) { builder.AddOffset(1, entityOffset.Value, 0); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(2, idEntityOffset.Value, 0); }
  public static void AddIdParentSite(FlatBufferBuilder builder, StringOffset idParentSiteOffset) { builder.AddOffset(3, idParentSiteOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(4, classificationMarkingOffset.Value, 0); }
  public static void AddOrigSiteID(FlatBufferBuilder builder, StringOffset origSiteIDOffset) { builder.AddOffset(5, origSiteIDOffset.Value, 0); }
  public static void AddOrigLzId(FlatBufferBuilder builder, StringOffset origLzIdOffset) { builder.AddOffset(6, origLzIdOffset.Value, 0); }
  public static void AddPin(FlatBufferBuilder builder, StringOffset pinOffset) { builder.AddOffset(7, pinOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(8, typeOffset.Value, 0); }
  public static void AddUsage(FlatBufferBuilder builder, StringOffset usageOffset) { builder.AddOffset(9, usageOffset.Value, 0); }
  public static void AddLzUsage(FlatBufferBuilder builder, StringOffset lzUsageOffset) { builder.AddOffset(10, lzUsageOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(11, nameOffset.Value, 0); }
  public static void AddCoordDatum(FlatBufferBuilder builder, StringOffset coordDatumOffset) { builder.AddOffset(12, coordDatumOffset.Value, 0); }
  public static void AddCoord(FlatBufferBuilder builder, StringOffset coordOffset) { builder.AddOffset(13, coordOffset.Value, 0); }
  public static void AddCoordDerivAcc(FlatBufferBuilder builder, double coordDerivAcc) { builder.AddDouble(14, coordDerivAcc, 0.0); }
  public static void AddOsuffix(FlatBufferBuilder builder, StringOffset osuffixOffset) { builder.AddOffset(15, osuffixOffset.Value, 0); }
  public static void AddIata(FlatBufferBuilder builder, StringOffset iataOffset) { builder.AddOffset(16, iataOffset.Value, 0); }
  public static void AddIcao(FlatBufferBuilder builder, StringOffset icaoOffset) { builder.AddOffset(17, icaoOffset.Value, 0); }
  public static void AddFaa(FlatBufferBuilder builder, StringOffset faaOffset) { builder.AddOffset(18, faaOffset.Value, 0); }
  public static void AddAirDefArea(FlatBufferBuilder builder, StringOffset airDefAreaOffset) { builder.AddOffset(19, airDefAreaOffset.Value, 0); }
  public static void AddUtm(FlatBufferBuilder builder, StringOffset utmOffset) { builder.AddOffset(20, utmOffset.Value, 0); }
  public static void AddMilGridSys(FlatBufferBuilder builder, StringOffset milGridSysOffset) { builder.AddOffset(21, milGridSysOffset.Value, 0); }
  public static void AddMilGrid(FlatBufferBuilder builder, StringOffset milGridOffset) { builder.AddOffset(22, milGridOffset.Value, 0); }
  public static void AddCatCode(FlatBufferBuilder builder, StringOffset catCodeOffset) { builder.AddOffset(23, catCodeOffset.Value, 0); }
  public static void AddCatText(FlatBufferBuilder builder, StringOffset catTextOffset) { builder.AddOffset(24, catTextOffset.Value, 0); }
  public static void AddWac(FlatBufferBuilder builder, StringOffset wacOffset) { builder.AddOffset(25, wacOffset.Value, 0); }
  public static void AddPolSubdiv(FlatBufferBuilder builder, StringOffset polSubdivOffset) { builder.AddOffset(26, polSubdivOffset.Value, 0); }
  public static void AddGeoArea(FlatBufferBuilder builder, StringOffset geoAreaOffset) { builder.AddOffset(27, geoAreaOffset.Value, 0); }
  public static void AddGeoidalMslSep(FlatBufferBuilder builder, double geoidalMslSep) { builder.AddDouble(28, geoidalMslSep, 0.0); }
  public static void AddAllegiance(FlatBufferBuilder builder, StringOffset allegianceOffset) { builder.AddOffset(29, allegianceOffset.Value, 0); }
  public static void AddAltAllegiance(FlatBufferBuilder builder, StringOffset altAllegianceOffset) { builder.AddOffset(30, altAllegianceOffset.Value, 0); }
  public static void AddClassRating(FlatBufferBuilder builder, StringOffset classRatingOffset) { builder.AddOffset(31, classRatingOffset.Value, 0); }
  public static void AddFpa(FlatBufferBuilder builder, StringOffset fpaOffset) { builder.AddOffset(32, fpaOffset.Value, 0); }
  public static void AddBeNumber(FlatBufferBuilder builder, StringOffset beNumberOffset) { builder.AddOffset(33, beNumberOffset.Value, 0); }
  public static void AddRunways(FlatBufferBuilder builder, int runways) { builder.AddInt(34, runways, 0); }
  public static void AddMaxRunwayLength(FlatBufferBuilder builder, int maxRunwayLength) { builder.AddInt(35, maxRunwayLength, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(36, conditionOffset.Value, 0); }
  public static void AddConditionAvail(FlatBufferBuilder builder, StringOffset conditionAvailOffset) { builder.AddOffset(37, conditionAvailOffset.Value, 0); }
  public static void AddOperStatus(FlatBufferBuilder builder, StringOffset operStatusOffset) { builder.AddOffset(38, operStatusOffset.Value, 0); }
  public static void AddGrade(FlatBufferBuilder builder, int grade) { builder.AddInt(39, grade, 0); }
  public static void AddActivity(FlatBufferBuilder builder, StringOffset activityOffset) { builder.AddOffset(40, activityOffset.Value, 0); }
  public static void AddFunctPrimary(FlatBufferBuilder builder, StringOffset functPrimaryOffset) { builder.AddOffset(41, functPrimaryOffset.Value, 0); }
  public static void AddMsnPrimary(FlatBufferBuilder builder, StringOffset msnPrimaryOffset) { builder.AddOffset(42, msnPrimaryOffset.Value, 0); }
  public static void AddMsnPrimarySpec(FlatBufferBuilder builder, StringOffset msnPrimarySpecOffset) { builder.AddOffset(43, msnPrimarySpecOffset.Value, 0); }
  public static void AddNucCap(FlatBufferBuilder builder, StringOffset nucCapOffset) { builder.AddOffset(44, nucCapOffset.Value, 0); }
  public static void AddIdent(FlatBufferBuilder builder, StringOffset identOffset) { builder.AddOffset(45, identOffset.Value, 0); }
  public static void AddElevMsl(FlatBufferBuilder builder, double elevMsl) { builder.AddDouble(46, elevMsl, 0.0); }
  public static void AddElevMslConfLvl(FlatBufferBuilder builder, int elevMslConfLvl) { builder.AddInt(47, elevMslConfLvl, 0); }
  public static void AddElevMslDerivAcc(FlatBufferBuilder builder, double elevMslDerivAcc) { builder.AddDouble(48, elevMslDerivAcc, 0.0); }
  public static void AddVegHt(FlatBufferBuilder builder, double vegHt) { builder.AddDouble(49, vegHt, 0.0); }
  public static void AddVegType(FlatBufferBuilder builder, StringOffset vegTypeOffset) { builder.AddOffset(50, vegTypeOffset.Value, 0); }
  public static void AddPopArea(FlatBufferBuilder builder, bool popArea) { builder.AddBool(51, popArea, false); }
  public static void AddPopAreaProx(FlatBufferBuilder builder, double popAreaProx) { builder.AddDouble(52, popAreaProx, 0.0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(53, notesOffset.Value, 0); }
  public static void AddResProd(FlatBufferBuilder builder, StringOffset resProdOffset) { builder.AddOffset(54, resProdOffset.Value, 0); }
  public static void AddEval(FlatBufferBuilder builder, int eval) { builder.AddInt(55, eval, 0); }
  public static void AddReviewDate(FlatBufferBuilder builder, StringOffset reviewDateOffset) { builder.AddOffset(56, reviewDateOffset.Value, 0); }
  public static void AddRecStatus(FlatBufferBuilder builder, StringOffset recStatusOffset) { builder.AddOffset(57, recStatusOffset.Value, 0); }
  public static void AddSymCode(FlatBufferBuilder builder, StringOffset symCodeOffset) { builder.AddOffset(58, symCodeOffset.Value, 0); }
  public static void AddReferenceDoc(FlatBufferBuilder builder, StringOffset referenceDocOffset) { builder.AddOffset(59, referenceDocOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(60, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(61, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(62, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(63, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(64, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Site_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(65, (sbyte)dataMode, 0); }
  public static Offset<Site_Ingest> EndSite_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Site_Ingest>(o);
  }
  public static void FinishSite_IngestBuffer(FlatBufferBuilder builder, Offset<Site_Ingest> offset) { builder.Finish(offset.Value, "SITE"); }
  public static void FinishSizePrefixedSite_IngestBuffer(FlatBufferBuilder builder, Offset<Site_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SITE"); }
  public Site_IngestT UnPack() {
    var _o = new Site_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Site_IngestT _o) {
    _o.Id = this.Id;
    _o.Entity = this.Entity;
    _o.IdEntity = this.IdEntity;
    _o.IdParentSite = this.IdParentSite;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigSiteID = this.OrigSiteID;
    _o.OrigLzId = this.OrigLzId;
    _o.Pin = this.Pin;
    _o.Type = this.Type;
    _o.Usage = this.Usage;
    _o.LzUsage = this.LzUsage;
    _o.Name = this.Name;
    _o.CoordDatum = this.CoordDatum;
    _o.Coord = this.Coord;
    _o.CoordDerivAcc = this.CoordDerivAcc;
    _o.Osuffix = this.Osuffix;
    _o.Iata = this.Iata;
    _o.Icao = this.Icao;
    _o.Faa = this.Faa;
    _o.AirDefArea = this.AirDefArea;
    _o.Utm = this.Utm;
    _o.MilGridSys = this.MilGridSys;
    _o.MilGrid = this.MilGrid;
    _o.CatCode = this.CatCode;
    _o.CatText = this.CatText;
    _o.Wac = this.Wac;
    _o.PolSubdiv = this.PolSubdiv;
    _o.GeoArea = this.GeoArea;
    _o.GeoidalMslSep = this.GeoidalMslSep;
    _o.Allegiance = this.Allegiance;
    _o.AltAllegiance = this.AltAllegiance;
    _o.ClassRating = this.ClassRating;
    _o.Fpa = this.Fpa;
    _o.BeNumber = this.BeNumber;
    _o.Runways = this.Runways;
    _o.MaxRunwayLength = this.MaxRunwayLength;
    _o.Condition = this.Condition;
    _o.ConditionAvail = this.ConditionAvail;
    _o.OperStatus = this.OperStatus;
    _o.Grade = this.Grade;
    _o.Activity = this.Activity;
    _o.FunctPrimary = this.FunctPrimary;
    _o.MsnPrimary = this.MsnPrimary;
    _o.MsnPrimarySpec = this.MsnPrimarySpec;
    _o.NucCap = this.NucCap;
    _o.Ident = this.Ident;
    _o.ElevMsl = this.ElevMsl;
    _o.ElevMslConfLvl = this.ElevMslConfLvl;
    _o.ElevMslDerivAcc = this.ElevMslDerivAcc;
    _o.VegHt = this.VegHt;
    _o.VegType = this.VegType;
    _o.PopArea = this.PopArea;
    _o.PopAreaProx = this.PopAreaProx;
    _o.Notes = this.Notes;
    _o.ResProd = this.ResProd;
    _o.Eval = this.Eval;
    _o.ReviewDate = this.ReviewDate;
    _o.RecStatus = this.RecStatus;
    _o.SymCode = this.SymCode;
    _o.ReferenceDoc = this.ReferenceDoc;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Site_Ingest> Pack(FlatBufferBuilder builder, Site_IngestT _o) {
    if (_o == null) return default(Offset<Site_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _entity = _o.Entity == null ? default(StringOffset) : builder.CreateString(_o.Entity);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _idParentSite = _o.IdParentSite == null ? default(StringOffset) : builder.CreateString(_o.IdParentSite);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origSiteID = _o.OrigSiteID == null ? default(StringOffset) : builder.CreateString(_o.OrigSiteID);
    var _origLzId = _o.OrigLzId == null ? default(StringOffset) : builder.CreateString(_o.OrigLzId);
    var _pin = _o.Pin == null ? default(StringOffset) : builder.CreateString(_o.Pin);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _usage = _o.Usage == null ? default(StringOffset) : builder.CreateString(_o.Usage);
    var _lzUsage = _o.LzUsage == null ? default(StringOffset) : builder.CreateString(_o.LzUsage);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _coordDatum = _o.CoordDatum == null ? default(StringOffset) : builder.CreateString(_o.CoordDatum);
    var _coord = _o.Coord == null ? default(StringOffset) : builder.CreateString(_o.Coord);
    var _osuffix = _o.Osuffix == null ? default(StringOffset) : builder.CreateString(_o.Osuffix);
    var _iata = _o.Iata == null ? default(StringOffset) : builder.CreateString(_o.Iata);
    var _icao = _o.Icao == null ? default(StringOffset) : builder.CreateString(_o.Icao);
    var _faa = _o.Faa == null ? default(StringOffset) : builder.CreateString(_o.Faa);
    var _airDefArea = _o.AirDefArea == null ? default(StringOffset) : builder.CreateString(_o.AirDefArea);
    var _utm = _o.Utm == null ? default(StringOffset) : builder.CreateString(_o.Utm);
    var _milGridSys = _o.MilGridSys == null ? default(StringOffset) : builder.CreateString(_o.MilGridSys);
    var _milGrid = _o.MilGrid == null ? default(StringOffset) : builder.CreateString(_o.MilGrid);
    var _catCode = _o.CatCode == null ? default(StringOffset) : builder.CreateString(_o.CatCode);
    var _catText = _o.CatText == null ? default(StringOffset) : builder.CreateString(_o.CatText);
    var _wac = _o.Wac == null ? default(StringOffset) : builder.CreateString(_o.Wac);
    var _polSubdiv = _o.PolSubdiv == null ? default(StringOffset) : builder.CreateString(_o.PolSubdiv);
    var _geoArea = _o.GeoArea == null ? default(StringOffset) : builder.CreateString(_o.GeoArea);
    var _allegiance = _o.Allegiance == null ? default(StringOffset) : builder.CreateString(_o.Allegiance);
    var _altAllegiance = _o.AltAllegiance == null ? default(StringOffset) : builder.CreateString(_o.AltAllegiance);
    var _classRating = _o.ClassRating == null ? default(StringOffset) : builder.CreateString(_o.ClassRating);
    var _fpa = _o.Fpa == null ? default(StringOffset) : builder.CreateString(_o.Fpa);
    var _beNumber = _o.BeNumber == null ? default(StringOffset) : builder.CreateString(_o.BeNumber);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _conditionAvail = _o.ConditionAvail == null ? default(StringOffset) : builder.CreateString(_o.ConditionAvail);
    var _operStatus = _o.OperStatus == null ? default(StringOffset) : builder.CreateString(_o.OperStatus);
    var _activity = _o.Activity == null ? default(StringOffset) : builder.CreateString(_o.Activity);
    var _functPrimary = _o.FunctPrimary == null ? default(StringOffset) : builder.CreateString(_o.FunctPrimary);
    var _msnPrimary = _o.MsnPrimary == null ? default(StringOffset) : builder.CreateString(_o.MsnPrimary);
    var _msnPrimarySpec = _o.MsnPrimarySpec == null ? default(StringOffset) : builder.CreateString(_o.MsnPrimarySpec);
    var _nucCap = _o.NucCap == null ? default(StringOffset) : builder.CreateString(_o.NucCap);
    var _ident = _o.Ident == null ? default(StringOffset) : builder.CreateString(_o.Ident);
    var _vegType = _o.VegType == null ? default(StringOffset) : builder.CreateString(_o.VegType);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _resProd = _o.ResProd == null ? default(StringOffset) : builder.CreateString(_o.ResProd);
    var _reviewDate = _o.ReviewDate == null ? default(StringOffset) : builder.CreateString(_o.ReviewDate);
    var _recStatus = _o.RecStatus == null ? default(StringOffset) : builder.CreateString(_o.RecStatus);
    var _symCode = _o.SymCode == null ? default(StringOffset) : builder.CreateString(_o.SymCode);
    var _referenceDoc = _o.ReferenceDoc == null ? default(StringOffset) : builder.CreateString(_o.ReferenceDoc);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSite_Ingest(
      builder,
      _id,
      _entity,
      _idEntity,
      _idParentSite,
      _classificationMarking,
      _origSiteID,
      _origLzId,
      _pin,
      _type,
      _usage,
      _lzUsage,
      _name,
      _coordDatum,
      _coord,
      _o.CoordDerivAcc,
      _osuffix,
      _iata,
      _icao,
      _faa,
      _airDefArea,
      _utm,
      _milGridSys,
      _milGrid,
      _catCode,
      _catText,
      _wac,
      _polSubdiv,
      _geoArea,
      _o.GeoidalMslSep,
      _allegiance,
      _altAllegiance,
      _classRating,
      _fpa,
      _beNumber,
      _o.Runways,
      _o.MaxRunwayLength,
      _condition,
      _conditionAvail,
      _operStatus,
      _o.Grade,
      _activity,
      _functPrimary,
      _msnPrimary,
      _msnPrimarySpec,
      _nucCap,
      _ident,
      _o.ElevMsl,
      _o.ElevMslConfLvl,
      _o.ElevMslDerivAcc,
      _o.VegHt,
      _vegType,
      _o.PopArea,
      _o.PopAreaProx,
      _notes,
      _resProd,
      _o.Eval,
      _reviewDate,
      _recStatus,
      _symCode,
      _referenceDoc,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Site_IngestT
{
  public string Id { get; set; }
  public string Entity { get; set; }
  public string IdEntity { get; set; }
  public string IdParentSite { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigSiteID { get; set; }
  public string OrigLzId { get; set; }
  public string Pin { get; set; }
  public string Type { get; set; }
  public string Usage { get; set; }
  public string LzUsage { get; set; }
  public string Name { get; set; }
  public string CoordDatum { get; set; }
  public string Coord { get; set; }
  public double CoordDerivAcc { get; set; }
  public string Osuffix { get; set; }
  public string Iata { get; set; }
  public string Icao { get; set; }
  public string Faa { get; set; }
  public string AirDefArea { get; set; }
  public string Utm { get; set; }
  public string MilGridSys { get; set; }
  public string MilGrid { get; set; }
  public string CatCode { get; set; }
  public string CatText { get; set; }
  public string Wac { get; set; }
  public string PolSubdiv { get; set; }
  public string GeoArea { get; set; }
  public double GeoidalMslSep { get; set; }
  public string Allegiance { get; set; }
  public string AltAllegiance { get; set; }
  public string ClassRating { get; set; }
  public string Fpa { get; set; }
  public string BeNumber { get; set; }
  public int Runways { get; set; }
  public int MaxRunwayLength { get; set; }
  public string Condition { get; set; }
  public string ConditionAvail { get; set; }
  public string OperStatus { get; set; }
  public int Grade { get; set; }
  public string Activity { get; set; }
  public string FunctPrimary { get; set; }
  public string MsnPrimary { get; set; }
  public string MsnPrimarySpec { get; set; }
  public string NucCap { get; set; }
  public string Ident { get; set; }
  public double ElevMsl { get; set; }
  public int ElevMslConfLvl { get; set; }
  public double ElevMslDerivAcc { get; set; }
  public double VegHt { get; set; }
  public string VegType { get; set; }
  public bool PopArea { get; set; }
  public double PopAreaProx { get; set; }
  public string Notes { get; set; }
  public string ResProd { get; set; }
  public int Eval { get; set; }
  public string ReviewDate { get; set; }
  public string RecStatus { get; set; }
  public string SymCode { get; set; }
  public string ReferenceDoc { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Site_Ingest_dataMode_Enum DataMode { get; set; }

  public Site_IngestT() {
    this.Id = null;
    this.Entity = null;
    this.IdEntity = null;
    this.IdParentSite = null;
    this.ClassificationMarking = null;
    this.OrigSiteID = null;
    this.OrigLzId = null;
    this.Pin = null;
    this.Type = null;
    this.Usage = null;
    this.LzUsage = null;
    this.Name = null;
    this.CoordDatum = null;
    this.Coord = null;
    this.CoordDerivAcc = 0.0;
    this.Osuffix = null;
    this.Iata = null;
    this.Icao = null;
    this.Faa = null;
    this.AirDefArea = null;
    this.Utm = null;
    this.MilGridSys = null;
    this.MilGrid = null;
    this.CatCode = null;
    this.CatText = null;
    this.Wac = null;
    this.PolSubdiv = null;
    this.GeoArea = null;
    this.GeoidalMslSep = 0.0;
    this.Allegiance = null;
    this.AltAllegiance = null;
    this.ClassRating = null;
    this.Fpa = null;
    this.BeNumber = null;
    this.Runways = 0;
    this.MaxRunwayLength = 0;
    this.Condition = null;
    this.ConditionAvail = null;
    this.OperStatus = null;
    this.Grade = 0;
    this.Activity = null;
    this.FunctPrimary = null;
    this.MsnPrimary = null;
    this.MsnPrimarySpec = null;
    this.NucCap = null;
    this.Ident = null;
    this.ElevMsl = 0.0;
    this.ElevMslConfLvl = 0;
    this.ElevMslDerivAcc = 0.0;
    this.VegHt = 0.0;
    this.VegType = null;
    this.PopArea = false;
    this.PopAreaProx = 0.0;
    this.Notes = null;
    this.ResProd = null;
    this.Eval = 0;
    this.ReviewDate = null;
    this.RecStatus = null;
    this.SymCode = null;
    this.ReferenceDoc = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Site_Ingest_dataMode_Enum.REAL;
  }
  public static Site_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Site_Ingest.GetRootAsSite_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Site_Ingest.FinishSite_IngestBuffer(fbb, Site_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Site_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Entity*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdParentSite*/, false)
      && verifier.VerifyString(tablePos, 12 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 14 /*OrigSiteID*/, false)
      && verifier.VerifyString(tablePos, 16 /*OrigLzId*/, false)
      && verifier.VerifyString(tablePos, 18 /*Pin*/, false)
      && verifier.VerifyString(tablePos, 20 /*Type*/, false)
      && verifier.VerifyString(tablePos, 22 /*Usage*/, false)
      && verifier.VerifyString(tablePos, 24 /*LzUsage*/, false)
      && verifier.VerifyString(tablePos, 26 /*Name*/, false)
      && verifier.VerifyString(tablePos, 28 /*CoordDatum*/, false)
      && verifier.VerifyString(tablePos, 30 /*Coord*/, false)
      && verifier.VerifyField(tablePos, 32 /*CoordDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 34 /*Osuffix*/, false)
      && verifier.VerifyString(tablePos, 36 /*Iata*/, false)
      && verifier.VerifyString(tablePos, 38 /*Icao*/, false)
      && verifier.VerifyString(tablePos, 40 /*Faa*/, false)
      && verifier.VerifyString(tablePos, 42 /*AirDefArea*/, false)
      && verifier.VerifyString(tablePos, 44 /*Utm*/, false)
      && verifier.VerifyString(tablePos, 46 /*MilGridSys*/, false)
      && verifier.VerifyString(tablePos, 48 /*MilGrid*/, false)
      && verifier.VerifyString(tablePos, 50 /*CatCode*/, false)
      && verifier.VerifyString(tablePos, 52 /*CatText*/, false)
      && verifier.VerifyString(tablePos, 54 /*Wac*/, false)
      && verifier.VerifyString(tablePos, 56 /*PolSubdiv*/, false)
      && verifier.VerifyString(tablePos, 58 /*GeoArea*/, false)
      && verifier.VerifyField(tablePos, 60 /*GeoidalMslSep*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*Allegiance*/, false)
      && verifier.VerifyString(tablePos, 64 /*AltAllegiance*/, false)
      && verifier.VerifyString(tablePos, 66 /*ClassRating*/, false)
      && verifier.VerifyString(tablePos, 68 /*Fpa*/, false)
      && verifier.VerifyString(tablePos, 70 /*BeNumber*/, false)
      && verifier.VerifyField(tablePos, 72 /*Runways*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*MaxRunwayLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 76 /*Condition*/, false)
      && verifier.VerifyString(tablePos, 78 /*ConditionAvail*/, false)
      && verifier.VerifyString(tablePos, 80 /*OperStatus*/, false)
      && verifier.VerifyField(tablePos, 82 /*Grade*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 84 /*Activity*/, false)
      && verifier.VerifyString(tablePos, 86 /*FunctPrimary*/, false)
      && verifier.VerifyString(tablePos, 88 /*MsnPrimary*/, false)
      && verifier.VerifyString(tablePos, 90 /*MsnPrimarySpec*/, false)
      && verifier.VerifyString(tablePos, 92 /*NucCap*/, false)
      && verifier.VerifyString(tablePos, 94 /*Ident*/, false)
      && verifier.VerifyField(tablePos, 96 /*ElevMsl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*ElevMslConfLvl*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 100 /*ElevMslDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*VegHt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 104 /*VegType*/, false)
      && verifier.VerifyField(tablePos, 106 /*PopArea*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 108 /*PopAreaProx*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 110 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 112 /*ResProd*/, false)
      && verifier.VerifyField(tablePos, 114 /*Eval*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 116 /*ReviewDate*/, false)
      && verifier.VerifyString(tablePos, 118 /*RecStatus*/, false)
      && verifier.VerifyString(tablePos, 120 /*SymCode*/, false)
      && verifier.VerifyString(tablePos, 122 /*ReferenceDoc*/, false)
      && verifier.VerifyString(tablePos, 124 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 126 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 128 /*Source*/, false)
      && verifier.VerifyString(tablePos, 130 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 132 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 134 /*DataMode*/, 1 /*Site_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
