// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Health state information.
public struct EvacHealthState_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacHealthState_Ingest GetRootAsEvacHealthState_Ingest(ByteBuffer _bb) { return GetRootAsEvacHealthState_Ingest(_bb, new EvacHealthState_Ingest()); }
  public static EvacHealthState_Ingest GetRootAsEvacHealthState_Ingest(ByteBuffer _bb, EvacHealthState_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacHealthState_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacHealthState_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacHealthState_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacHealthState_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
  /// Example: /// Example: COGNITIVE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
  /// Example: /// Example: BLUE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string HealthStateCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHealthStateCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHealthStateCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHealthStateCodeArray() { return __p.__vector_as_array<byte>(6); }
  /// Medical confidence factor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int MedConfFactor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Time { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTimeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<EvacHealthState_Ingest> CreateEvacHealthState_Ingest(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset healthStateCodeOffset = default(StringOffset),
      int medConfFactor = 0,
      StringOffset timeOffset = default(StringOffset)) {
    builder.StartTable(4);
    EvacHealthState_Ingest.AddTime(builder, timeOffset);
    EvacHealthState_Ingest.AddMedConfFactor(builder, medConfFactor);
    EvacHealthState_Ingest.AddHealthStateCode(builder, healthStateCodeOffset);
    EvacHealthState_Ingest.AddType(builder, typeOffset);
    return EvacHealthState_Ingest.EndEvacHealthState_Ingest(builder);
  }

  public static void StartEvacHealthState_Ingest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddHealthStateCode(FlatBufferBuilder builder, StringOffset healthStateCodeOffset) { builder.AddOffset(1, healthStateCodeOffset.Value, 0); }
  public static void AddMedConfFactor(FlatBufferBuilder builder, int medConfFactor) { builder.AddInt(2, medConfFactor, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset timeOffset) { builder.AddOffset(3, timeOffset.Value, 0); }
  public static Offset<EvacHealthState_Ingest> EndEvacHealthState_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacHealthState_Ingest>(o);
  }
  public static void FinishEvacHealthState_IngestBuffer(FlatBufferBuilder builder, Offset<EvacHealthState_Ingest> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacHealthState_IngestBuffer(FlatBufferBuilder builder, Offset<EvacHealthState_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacHealthState_IngestT UnPack() {
    var _o = new EvacHealthState_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacHealthState_IngestT _o) {
    _o.Type = this.Type;
    _o.HealthStateCode = this.HealthStateCode;
    _o.MedConfFactor = this.MedConfFactor;
    _o.Time = this.Time;
  }
  public static Offset<EvacHealthState_Ingest> Pack(FlatBufferBuilder builder, EvacHealthState_IngestT _o) {
    if (_o == null) return default(Offset<EvacHealthState_Ingest>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _healthStateCode = _o.HealthStateCode == null ? default(StringOffset) : builder.CreateString(_o.HealthStateCode);
    var _time = _o.Time == null ? default(StringOffset) : builder.CreateString(_o.Time);
    return CreateEvacHealthState_Ingest(
      builder,
      _type,
      _healthStateCode,
      _o.MedConfFactor,
      _time);
  }
}

public class EvacHealthState_IngestT
{
  public string Type { get; set; }
  public string HealthStateCode { get; set; }
  public int MedConfFactor { get; set; }
  public string Time { get; set; }

  public EvacHealthState_IngestT() {
    this.Type = null;
    this.HealthStateCode = null;
    this.MedConfFactor = 0;
    this.Time = null;
  }
  public static EvacHealthState_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacHealthState_Ingest.GetRootAsEvacHealthState_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacHealthState_Ingest.FinishEvacHealthState_IngestBuffer(fbb, EvacHealthState_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacHealthState_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyString(tablePos, 6 /*HealthStateCode*/, false)
      && verifier.VerifyField(tablePos, 8 /*MedConfFactor*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Time*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
