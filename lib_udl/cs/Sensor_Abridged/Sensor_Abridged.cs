// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
public struct Sensor_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Sensor_Abridged GetRootAsSensor_Abridged(ByteBuffer _bb) { return GetRootAsSensor_Abridged(_bb, new Sensor_Abridged()); }
  public static Sensor_Abridged GetRootAsSensor_Abridged(ByteBuffer _bb, Sensor_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Sensor_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensor_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, Sensor_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sensor_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique name of this sensor.
  /// Example: /// Example: SENSOR_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string SensorName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSensorNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSensorNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  public int SensorNumber { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional short name for the sensor.
  /// Example: /// Example: SNR-1
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string ShortName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShortNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetShortNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetShortNameArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
  /// Example: /// Example: observations
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string DataControl { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataControlBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDataControlBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDataControlArray() { return __p.__vector_as_array<byte>(14); }
  /// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
  /// Example: /// Example: AF-ID
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string AfId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAfIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAfIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAfIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The sensor type at the site. Optional field, intended primarily for ASRs.
  /// Example: /// Example: SENSOR_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string AsrType { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAsrTypeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAsrTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAsrTypeArray() { return __p.__vector_as_array<byte>(18); }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(20); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(22); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(24); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Sensor_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(26); return o != 0 ? (Sensor_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Sensor_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(28); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(30); }
  /// Optional flag indicating if the sensor is active.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Active { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Sensorcharacteristics(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SensorcharacteristicsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of SensorStats which contain statistics of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SensorStats(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SensorStatsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SensorlimitsCollection(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SensorlimitsCollectionLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Entity { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEntityBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEntityBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEntityArray() { return __p.__vector_as_array<byte>(40); }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(42); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SensorObservationType { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorObservationTypeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSensorObservationTypeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSensorObservationTypeArray() { return __p.__vector_as_array<byte>(44); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SensorType { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorTypeBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSensorTypeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSensorTypeArray() { return __p.__vector_as_array<byte>(46); }

  public static Offset<Sensor_Abridged> CreateSensor_Abridged(FlatBufferBuilder builder,
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset sensorNameOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int sensorNumber = 0,
      StringOffset shortNameOffset = default(StringOffset),
      StringOffset dataControlOffset = default(StringOffset),
      StringOffset afIdOffset = default(StringOffset),
      StringOffset asrTypeOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Sensor_Abridged_dataMode_Enum dataMode = Sensor_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      bool active = false,
      VectorOffset sensorcharacteristicsOffset = default(VectorOffset),
      VectorOffset sensorStatsOffset = default(VectorOffset),
      VectorOffset sensorlimitsCollectionOffset = default(VectorOffset),
      StringOffset entityOffset = default(StringOffset),
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset sensorObservationTypeOffset = default(StringOffset),
      StringOffset sensorTypeOffset = default(StringOffset)) {
    builder.StartTable(22);
    Sensor_Abridged.AddSensorType(builder, sensorTypeOffset);
    Sensor_Abridged.AddSensorObservationType(builder, sensorObservationTypeOffset);
    Sensor_Abridged.AddIdEntity(builder, idEntityOffset);
    Sensor_Abridged.AddEntity(builder, entityOffset);
    Sensor_Abridged.AddSensorlimitsCollection(builder, sensorlimitsCollectionOffset);
    Sensor_Abridged.AddSensorStats(builder, sensorStatsOffset);
    Sensor_Abridged.AddSensorcharacteristics(builder, sensorcharacteristicsOffset);
    Sensor_Abridged.AddCreatedBy(builder, createdByOffset);
    Sensor_Abridged.AddCreatedAt(builder, createdAtOffset);
    Sensor_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Sensor_Abridged.AddOrigin(builder, originOffset);
    Sensor_Abridged.AddSource(builder, sourceOffset);
    Sensor_Abridged.AddAsrType(builder, asrTypeOffset);
    Sensor_Abridged.AddAfId(builder, afIdOffset);
    Sensor_Abridged.AddDataControl(builder, dataControlOffset);
    Sensor_Abridged.AddShortName(builder, shortNameOffset);
    Sensor_Abridged.AddSensorNumber(builder, sensorNumber);
    Sensor_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Sensor_Abridged.AddSensorName(builder, sensorNameOffset);
    Sensor_Abridged.AddIdSensor(builder, idSensorOffset);
    Sensor_Abridged.AddActive(builder, active);
    Sensor_Abridged.AddDataMode(builder, dataMode);
    return Sensor_Abridged.EndSensor_Abridged(builder);
  }

  public static void StartSensor_Abridged(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(0, idSensorOffset.Value, 0); }
  public static void AddSensorName(FlatBufferBuilder builder, StringOffset sensorNameOffset) { builder.AddOffset(1, sensorNameOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddSensorNumber(FlatBufferBuilder builder, int sensorNumber) { builder.AddInt(3, sensorNumber, 0); }
  public static void AddShortName(FlatBufferBuilder builder, StringOffset shortNameOffset) { builder.AddOffset(4, shortNameOffset.Value, 0); }
  public static void AddDataControl(FlatBufferBuilder builder, StringOffset dataControlOffset) { builder.AddOffset(5, dataControlOffset.Value, 0); }
  public static void AddAfId(FlatBufferBuilder builder, StringOffset afIdOffset) { builder.AddOffset(6, afIdOffset.Value, 0); }
  public static void AddAsrType(FlatBufferBuilder builder, StringOffset asrTypeOffset) { builder.AddOffset(7, asrTypeOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(8, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(9, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(10, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Sensor_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(11, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(12, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(13, createdByOffset.Value, 0); }
  public static void AddActive(FlatBufferBuilder builder, bool active) { builder.AddBool(14, active, false); }
  public static void AddSensorcharacteristics(FlatBufferBuilder builder, VectorOffset sensorcharacteristicsOffset) { builder.AddOffset(15, sensorcharacteristicsOffset.Value, 0); }
  public static VectorOffset CreateSensorcharacteristicsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSensorcharacteristicsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorcharacteristicsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorcharacteristicsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSensorcharacteristicsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSensorStats(FlatBufferBuilder builder, VectorOffset sensorStatsOffset) { builder.AddOffset(16, sensorStatsOffset.Value, 0); }
  public static VectorOffset CreateSensorStatsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSensorStatsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorStatsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorStatsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSensorStatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSensorlimitsCollection(FlatBufferBuilder builder, VectorOffset sensorlimitsCollectionOffset) { builder.AddOffset(17, sensorlimitsCollectionOffset.Value, 0); }
  public static VectorOffset CreateSensorlimitsCollectionVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSensorlimitsCollectionVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorlimitsCollectionVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSensorlimitsCollectionVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSensorlimitsCollectionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEntity(FlatBufferBuilder builder, StringOffset entityOffset) { builder.AddOffset(18, entityOffset.Value, 0); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(19, idEntityOffset.Value, 0); }
  public static void AddSensorObservationType(FlatBufferBuilder builder, StringOffset sensorObservationTypeOffset) { builder.AddOffset(20, sensorObservationTypeOffset.Value, 0); }
  public static void AddSensorType(FlatBufferBuilder builder, StringOffset sensorTypeOffset) { builder.AddOffset(21, sensorTypeOffset.Value, 0); }
  public static Offset<Sensor_Abridged> EndSensor_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Sensor_Abridged>(o);
  }
  public static void FinishSensor_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensor_Abridged> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensor_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensor_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public Sensor_AbridgedT UnPack() {
    var _o = new Sensor_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Sensor_AbridgedT _o) {
    _o.IdSensor = this.IdSensor;
    _o.SensorName = this.SensorName;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SensorNumber = this.SensorNumber;
    _o.ShortName = this.ShortName;
    _o.DataControl = this.DataControl;
    _o.AfId = this.AfId;
    _o.AsrType = this.AsrType;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Active = this.Active;
    _o.Sensorcharacteristics = new List<string>();
    for (var _j = 0; _j < this.SensorcharacteristicsLength; ++_j) {_o.Sensorcharacteristics.Add(this.Sensorcharacteristics(_j));}
    _o.SensorStats = new List<string>();
    for (var _j = 0; _j < this.SensorStatsLength; ++_j) {_o.SensorStats.Add(this.SensorStats(_j));}
    _o.SensorlimitsCollection = new List<string>();
    for (var _j = 0; _j < this.SensorlimitsCollectionLength; ++_j) {_o.SensorlimitsCollection.Add(this.SensorlimitsCollection(_j));}
    _o.Entity = this.Entity;
    _o.IdEntity = this.IdEntity;
    _o.SensorObservationType = this.SensorObservationType;
    _o.SensorType = this.SensorType;
  }
  public static Offset<Sensor_Abridged> Pack(FlatBufferBuilder builder, Sensor_AbridgedT _o) {
    if (_o == null) return default(Offset<Sensor_Abridged>);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _sensorName = _o.SensorName == null ? default(StringOffset) : builder.CreateString(_o.SensorName);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _shortName = _o.ShortName == null ? default(StringOffset) : builder.CreateString(_o.ShortName);
    var _dataControl = _o.DataControl == null ? default(StringOffset) : builder.CreateString(_o.DataControl);
    var _afId = _o.AfId == null ? default(StringOffset) : builder.CreateString(_o.AfId);
    var _asrType = _o.AsrType == null ? default(StringOffset) : builder.CreateString(_o.AsrType);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sensorcharacteristics = default(VectorOffset);
    if (_o.Sensorcharacteristics != null) {
      var __sensorcharacteristics = new StringOffset[_o.Sensorcharacteristics.Count];
      for (var _j = 0; _j < __sensorcharacteristics.Length; ++_j) { __sensorcharacteristics[_j] = builder.CreateString(_o.Sensorcharacteristics[_j]); }
      _sensorcharacteristics = CreateSensorcharacteristicsVector(builder, __sensorcharacteristics);
    }
    var _sensorStats = default(VectorOffset);
    if (_o.SensorStats != null) {
      var __sensorStats = new StringOffset[_o.SensorStats.Count];
      for (var _j = 0; _j < __sensorStats.Length; ++_j) { __sensorStats[_j] = builder.CreateString(_o.SensorStats[_j]); }
      _sensorStats = CreateSensorStatsVector(builder, __sensorStats);
    }
    var _sensorlimitsCollection = default(VectorOffset);
    if (_o.SensorlimitsCollection != null) {
      var __sensorlimitsCollection = new StringOffset[_o.SensorlimitsCollection.Count];
      for (var _j = 0; _j < __sensorlimitsCollection.Length; ++_j) { __sensorlimitsCollection[_j] = builder.CreateString(_o.SensorlimitsCollection[_j]); }
      _sensorlimitsCollection = CreateSensorlimitsCollectionVector(builder, __sensorlimitsCollection);
    }
    var _entity = _o.Entity == null ? default(StringOffset) : builder.CreateString(_o.Entity);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _sensorObservationType = _o.SensorObservationType == null ? default(StringOffset) : builder.CreateString(_o.SensorObservationType);
    var _sensorType = _o.SensorType == null ? default(StringOffset) : builder.CreateString(_o.SensorType);
    return CreateSensor_Abridged(
      builder,
      _idSensor,
      _sensorName,
      _classificationMarking,
      _o.SensorNumber,
      _shortName,
      _dataControl,
      _afId,
      _asrType,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _o.Active,
      _sensorcharacteristics,
      _sensorStats,
      _sensorlimitsCollection,
      _entity,
      _idEntity,
      _sensorObservationType,
      _sensorType);
  }
}

public class Sensor_AbridgedT
{
  public string IdSensor { get; set; }
  public string SensorName { get; set; }
  public string ClassificationMarking { get; set; }
  public int SensorNumber { get; set; }
  public string ShortName { get; set; }
  public string DataControl { get; set; }
  public string AfId { get; set; }
  public string AsrType { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Sensor_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public bool Active { get; set; }
  public List<string> Sensorcharacteristics { get; set; }
  public List<string> SensorStats { get; set; }
  public List<string> SensorlimitsCollection { get; set; }
  public string Entity { get; set; }
  public string IdEntity { get; set; }
  public string SensorObservationType { get; set; }
  public string SensorType { get; set; }

  public Sensor_AbridgedT() {
    this.IdSensor = null;
    this.SensorName = null;
    this.ClassificationMarking = null;
    this.SensorNumber = 0;
    this.ShortName = null;
    this.DataControl = null;
    this.AfId = null;
    this.AsrType = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Sensor_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Active = false;
    this.Sensorcharacteristics = null;
    this.SensorStats = null;
    this.SensorlimitsCollection = null;
    this.Entity = null;
    this.IdEntity = null;
    this.SensorObservationType = null;
    this.SensorType = null;
  }
  public static Sensor_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Sensor_Abridged.GetRootAsSensor_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Sensor_Abridged.FinishSensor_AbridgedBuffer(fbb, Sensor_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Sensor_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 6 /*SensorName*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 10 /*SensorNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*ShortName*/, false)
      && verifier.VerifyString(tablePos, 14 /*DataControl*/, false)
      && verifier.VerifyString(tablePos, 16 /*AfId*/, false)
      && verifier.VerifyString(tablePos, 18 /*AsrType*/, false)
      && verifier.VerifyString(tablePos, 20 /*Source*/, false)
      && verifier.VerifyString(tablePos, 22 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 24 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 26 /*DataMode*/, 1 /*Sensor_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 28 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 30 /*CreatedBy*/, false)
      && verifier.VerifyField(tablePos, 32 /*Active*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*Sensorcharacteristics*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*SensorStats*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*SensorlimitsCollection*/, false)
      && verifier.VerifyString(tablePos, 40 /*Entity*/, false)
      && verifier.VerifyString(tablePos, 42 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 44 /*SensorObservationType*/, false)
      && verifier.VerifyString(tablePos, 46 /*SensorType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
