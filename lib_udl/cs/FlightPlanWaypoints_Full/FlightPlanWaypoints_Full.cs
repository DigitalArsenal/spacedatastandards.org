// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of waypoints associated with this flight plan.
public struct FlightPlanWaypoints_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanWaypoints_Full GetRootAsFlightPlanWaypoints_Full(ByteBuffer _bb) { return GetRootAsFlightPlanWaypoints_Full(_bb, new FlightPlanWaypoints_Full()); }
  public static FlightPlanWaypoints_Full GetRootAsFlightPlanWaypoints_Full(ByteBuffer _bb, FlightPlanWaypoints_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FlightPlanWaypoints_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "FLIG"); }
  public static bool VerifyFlightPlanWaypoints_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("FLIG", false, FlightPlanWaypoints_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlightPlanWaypoints_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
  /// Example: /// Example: COMMENT
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string WaypointName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWaypointNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetWaypointNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetWaypointNameArray() { return __p.__vector_as_array<byte>(6); }
  /// The waypoint number on the route. Comment points do not get a waypoint number.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int WaypointNum { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The flight path flown for this leg.
  /// Example: /// Example: W15
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Airway { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirwayBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAirwayBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAirwayArray() { return __p.__vector_as_array<byte>(10); }
  /// Point identifying an air refueling track/anchor or fixed track.
  /// Example: /// Example: ARIP
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Arpt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArptBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetArptBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetArptArray() { return __p.__vector_as_array<byte>(12); }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The ID of the air refueling track/anchor or fixed track.
  /// Example: /// Example: AR202
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ArId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetArIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetArIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Navigational Aid (NAVAID) identification code.
  /// Example: /// Example: HTO
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Navaid { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNavaidBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNavaidBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNavaidArray() { return __p.__vector_as_array<byte>(20); }
  /// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
  /// Example: /// Example: 83X
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TacanChannel { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTacanChannelBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTacanChannelBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTacanChannelArray() { return __p.__vector_as_array<byte>(22); }
  /// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
  /// Example: /// Example: 113.6
  /// Constraints: No constraints specified.
  public double VorFreq { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: EXTREME
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TurbCat { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTurbCatBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTurbCatBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTurbCatArray() { return __p.__vector_as_array<byte>(26); }
  /// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string IceCat { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIceCatBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIceCatBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIceCatArray() { return __p.__vector_as_array<byte>(28); }
  /// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ThunderCat { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetThunderCatBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetThunderCatBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetThunderCatArray() { return __p.__vector_as_array<byte>(30); }
  /// Altitude of a level, point, or object measured in feet above mean sea level.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average temperature deviation from standard day profile for this leg in degrees Celsius.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  public double TempDev { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The fuel degrade percentage used for this leg.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double LegFuelDegrade { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average Mach speed for this leg.
  /// Example: /// Example: 0.74
  /// Constraints: No constraints specified.
  public double LegMach { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 65
  /// Constraints: No constraints specified.
  public double LegMsnIndex { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The percent degrade due to drag for this aircraft for this leg.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double LegDragIndex { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average calibrated airspeed (CAS) for this leg in knots.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  public double AvgCalAirspeed { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average true airspeed (TAS) for this leg in knots.
  /// Example: /// Example: 210.1
  /// Constraints: No constraints specified.
  public double AvgTrueAirspeed { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average ground speed for this leg in knots.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  public double AvgGroundSpeed { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  public double PriFreq { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The wind direction at this specific point in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  public double PointWindDir { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The wind velocity at this specific point in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  public double PointWindSpeed { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average wind direction for this leg in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  public double AvgWindDir { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average wind speed for this leg in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  public double AvgWindSpeed { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -32.1
  /// Constraints: No constraints specified.
  public double LegWindFac { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The average drift angle for this leg in degrees from true north.
  /// Example: /// Example: -3.2
  /// Constraints: No constraints specified.
  public double AvgDriftAng { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  public double SecFreq { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The magnetic course at leg midpoint in degrees from true north.
  /// Example: /// Example: 338.1
  /// Constraints: No constraints specified.
  public double MagCourse { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The true course at leg midpoint in degrees from true north.
  /// Example: /// Example: 328.1
  /// Constraints: No constraints specified.
  public double TrueCourse { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The magnetic heading at leg midpoint in degrees from true north.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  public double MagHeading { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
  /// Example: /// Example: 31/94
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AaTacanChannel { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAaTacanChannelBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetAaTacanChannelBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetAaTacanChannelArray() { return __p.__vector_as_array<byte>(72); }
  /// The zone/leg distance flown in nautical miles.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  public double ZoneDistance { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total distance flown to this waypoint calculated from point of departure in nautical miles.
  /// Example: /// Example: 688.1
  /// Constraints: No constraints specified.
  public double TotalFlownDistance { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total distance remaining from this waypoint to the point of arrival in nautical miles.
  /// Example: /// Example: 1288.1
  /// Constraints: No constraints specified.
  public double TotalRemDistance { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time to fly this zone/leg in minutes.
  /// Example: /// Example: 36.1
  /// Constraints: No constraints specified.
  public double ZoneTime { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string TotalTime { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTotalTimeBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetTotalTimeBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetTotalTimeArray() { return __p.__vector_as_array<byte>(82); }
  /// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
  /// Example: /// Example: 01:43
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string TotalTimeRem { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTotalTimeRemBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTotalTimeRemBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTotalTimeRemArray() { return __p.__vector_as_array<byte>(84); }
  /// The amount of fuel used on this zone/leg in pounds.
  /// Example: /// Example: 1120.1
  /// Constraints: No constraints specified.
  public double ZoneFuel { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total fuel used to this waypoint from point of departure in pounds.
  /// Example: /// Example: 70431.1
  /// Constraints: No constraints specified.
  public double TotalUsedFuel { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total fuel remaining at this waypoint in pounds.
  /// Example: /// Example: 30453.1
  /// Constraints: No constraints specified.
  public double TotalRemFuel { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
  /// Example: /// Example: -30400.1
  /// Constraints: No constraints specified.
  public double ExchangedFuel { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The air distance of this leg in nautical miles.
  /// Example: /// Example: 321.1
  /// Constraints: No constraints specified.
  public double AirDistance { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total air distance to this waypoint in nautical miles.
  /// Example: /// Example: 3251.1
  /// Constraints: No constraints specified.
  public double TotalAirDistance { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total weight of the aircraft at this waypoint in pounds.
  /// Example: /// Example: 207123.1
  /// Constraints: No constraints specified.
  public double TotalWeight { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  public string Eta { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEtaBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetEtaBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetEtaArray() { return __p.__vector_as_array<byte>(100); }
  /// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  public string Ata { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtaBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetAtaBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetAtaArray() { return __p.__vector_as_array<byte>(102); }
  /// The leg fuel flow in pounds per hour.
  /// Example: /// Example: 17654.1
  /// Constraints: No constraints specified.
  public double FuelFlow { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string LegAlternate { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLegAlternateBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetLegAlternateBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetLegAlternateArray() { return __p.__vector_as_array<byte>(106); }
  /// The magnetic variation for this leg in degrees.
  /// Example: /// Example: -13.2
  /// Constraints: No constraints specified.
  public double MagVar { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The day low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  public double DayLowAlt { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The night low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  public double NightLowAlt { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2450.1
  /// Constraints: No constraints specified.
  public double NvgLowAlt { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FlightPlanWaypoints_Full> CreateFlightPlanWaypoints_Full(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset waypointNameOffset = default(StringOffset),
      int waypointNum = 0,
      StringOffset airwayOffset = default(StringOffset),
      StringOffset arptOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      StringOffset arIdOffset = default(StringOffset),
      StringOffset navaidOffset = default(StringOffset),
      StringOffset tacanChannelOffset = default(StringOffset),
      double vorFreq = 0.0,
      StringOffset turbCatOffset = default(StringOffset),
      StringOffset iceCatOffset = default(StringOffset),
      StringOffset thunderCatOffset = default(StringOffset),
      double alt = 0.0,
      double tempDev = 0.0,
      double legFuelDegrade = 0.0,
      double legMach = 0.0,
      double legMsnIndex = 0.0,
      double legDragIndex = 0.0,
      double avgCalAirspeed = 0.0,
      double avgTrueAirspeed = 0.0,
      double avgGroundSpeed = 0.0,
      double priFreq = 0.0,
      double pointWindDir = 0.0,
      double pointWindSpeed = 0.0,
      double avgWindDir = 0.0,
      double avgWindSpeed = 0.0,
      double legWindFac = 0.0,
      double avgDriftAng = 0.0,
      double secFreq = 0.0,
      double magCourse = 0.0,
      double trueCourse = 0.0,
      double magHeading = 0.0,
      StringOffset aaTacanChannelOffset = default(StringOffset),
      double zoneDistance = 0.0,
      double totalFlownDistance = 0.0,
      double totalRemDistance = 0.0,
      double zoneTime = 0.0,
      StringOffset totalTimeOffset = default(StringOffset),
      StringOffset totalTimeRemOffset = default(StringOffset),
      double zoneFuel = 0.0,
      double totalUsedFuel = 0.0,
      double totalRemFuel = 0.0,
      double exchangedFuel = 0.0,
      double airDistance = 0.0,
      double totalAirDistance = 0.0,
      double totalWeight = 0.0,
      StringOffset etaOffset = default(StringOffset),
      StringOffset ataOffset = default(StringOffset),
      double fuelFlow = 0.0,
      StringOffset legAlternateOffset = default(StringOffset),
      double magVar = 0.0,
      double dayLowAlt = 0.0,
      double nightLowAlt = 0.0,
      double nvgLowAlt = 0.0) {
    builder.StartTable(56);
    FlightPlanWaypoints_Full.AddNvgLowAlt(builder, nvgLowAlt);
    FlightPlanWaypoints_Full.AddNightLowAlt(builder, nightLowAlt);
    FlightPlanWaypoints_Full.AddDayLowAlt(builder, dayLowAlt);
    FlightPlanWaypoints_Full.AddMagVar(builder, magVar);
    FlightPlanWaypoints_Full.AddFuelFlow(builder, fuelFlow);
    FlightPlanWaypoints_Full.AddTotalWeight(builder, totalWeight);
    FlightPlanWaypoints_Full.AddTotalAirDistance(builder, totalAirDistance);
    FlightPlanWaypoints_Full.AddAirDistance(builder, airDistance);
    FlightPlanWaypoints_Full.AddExchangedFuel(builder, exchangedFuel);
    FlightPlanWaypoints_Full.AddTotalRemFuel(builder, totalRemFuel);
    FlightPlanWaypoints_Full.AddTotalUsedFuel(builder, totalUsedFuel);
    FlightPlanWaypoints_Full.AddZoneFuel(builder, zoneFuel);
    FlightPlanWaypoints_Full.AddZoneTime(builder, zoneTime);
    FlightPlanWaypoints_Full.AddTotalRemDistance(builder, totalRemDistance);
    FlightPlanWaypoints_Full.AddTotalFlownDistance(builder, totalFlownDistance);
    FlightPlanWaypoints_Full.AddZoneDistance(builder, zoneDistance);
    FlightPlanWaypoints_Full.AddMagHeading(builder, magHeading);
    FlightPlanWaypoints_Full.AddTrueCourse(builder, trueCourse);
    FlightPlanWaypoints_Full.AddMagCourse(builder, magCourse);
    FlightPlanWaypoints_Full.AddSecFreq(builder, secFreq);
    FlightPlanWaypoints_Full.AddAvgDriftAng(builder, avgDriftAng);
    FlightPlanWaypoints_Full.AddLegWindFac(builder, legWindFac);
    FlightPlanWaypoints_Full.AddAvgWindSpeed(builder, avgWindSpeed);
    FlightPlanWaypoints_Full.AddAvgWindDir(builder, avgWindDir);
    FlightPlanWaypoints_Full.AddPointWindSpeed(builder, pointWindSpeed);
    FlightPlanWaypoints_Full.AddPointWindDir(builder, pointWindDir);
    FlightPlanWaypoints_Full.AddPriFreq(builder, priFreq);
    FlightPlanWaypoints_Full.AddAvgGroundSpeed(builder, avgGroundSpeed);
    FlightPlanWaypoints_Full.AddAvgTrueAirspeed(builder, avgTrueAirspeed);
    FlightPlanWaypoints_Full.AddAvgCalAirspeed(builder, avgCalAirspeed);
    FlightPlanWaypoints_Full.AddLegDragIndex(builder, legDragIndex);
    FlightPlanWaypoints_Full.AddLegMsnIndex(builder, legMsnIndex);
    FlightPlanWaypoints_Full.AddLegMach(builder, legMach);
    FlightPlanWaypoints_Full.AddLegFuelDegrade(builder, legFuelDegrade);
    FlightPlanWaypoints_Full.AddTempDev(builder, tempDev);
    FlightPlanWaypoints_Full.AddAlt(builder, alt);
    FlightPlanWaypoints_Full.AddVorFreq(builder, vorFreq);
    FlightPlanWaypoints_Full.AddLon(builder, lon);
    FlightPlanWaypoints_Full.AddLat(builder, lat);
    FlightPlanWaypoints_Full.AddLegAlternate(builder, legAlternateOffset);
    FlightPlanWaypoints_Full.AddAta(builder, ataOffset);
    FlightPlanWaypoints_Full.AddEta(builder, etaOffset);
    FlightPlanWaypoints_Full.AddTotalTimeRem(builder, totalTimeRemOffset);
    FlightPlanWaypoints_Full.AddTotalTime(builder, totalTimeOffset);
    FlightPlanWaypoints_Full.AddAaTacanChannel(builder, aaTacanChannelOffset);
    FlightPlanWaypoints_Full.AddThunderCat(builder, thunderCatOffset);
    FlightPlanWaypoints_Full.AddIceCat(builder, iceCatOffset);
    FlightPlanWaypoints_Full.AddTurbCat(builder, turbCatOffset);
    FlightPlanWaypoints_Full.AddTacanChannel(builder, tacanChannelOffset);
    FlightPlanWaypoints_Full.AddNavaid(builder, navaidOffset);
    FlightPlanWaypoints_Full.AddArId(builder, arIdOffset);
    FlightPlanWaypoints_Full.AddArpt(builder, arptOffset);
    FlightPlanWaypoints_Full.AddAirway(builder, airwayOffset);
    FlightPlanWaypoints_Full.AddWaypointNum(builder, waypointNum);
    FlightPlanWaypoints_Full.AddWaypointName(builder, waypointNameOffset);
    FlightPlanWaypoints_Full.AddType(builder, typeOffset);
    return FlightPlanWaypoints_Full.EndFlightPlanWaypoints_Full(builder);
  }

  public static void StartFlightPlanWaypoints_Full(FlatBufferBuilder builder) { builder.StartTable(56); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddWaypointName(FlatBufferBuilder builder, StringOffset waypointNameOffset) { builder.AddOffset(1, waypointNameOffset.Value, 0); }
  public static void AddWaypointNum(FlatBufferBuilder builder, int waypointNum) { builder.AddInt(2, waypointNum, 0); }
  public static void AddAirway(FlatBufferBuilder builder, StringOffset airwayOffset) { builder.AddOffset(3, airwayOffset.Value, 0); }
  public static void AddArpt(FlatBufferBuilder builder, StringOffset arptOffset) { builder.AddOffset(4, arptOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(5, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(6, lon, 0.0); }
  public static void AddArId(FlatBufferBuilder builder, StringOffset arIdOffset) { builder.AddOffset(7, arIdOffset.Value, 0); }
  public static void AddNavaid(FlatBufferBuilder builder, StringOffset navaidOffset) { builder.AddOffset(8, navaidOffset.Value, 0); }
  public static void AddTacanChannel(FlatBufferBuilder builder, StringOffset tacanChannelOffset) { builder.AddOffset(9, tacanChannelOffset.Value, 0); }
  public static void AddVorFreq(FlatBufferBuilder builder, double vorFreq) { builder.AddDouble(10, vorFreq, 0.0); }
  public static void AddTurbCat(FlatBufferBuilder builder, StringOffset turbCatOffset) { builder.AddOffset(11, turbCatOffset.Value, 0); }
  public static void AddIceCat(FlatBufferBuilder builder, StringOffset iceCatOffset) { builder.AddOffset(12, iceCatOffset.Value, 0); }
  public static void AddThunderCat(FlatBufferBuilder builder, StringOffset thunderCatOffset) { builder.AddOffset(13, thunderCatOffset.Value, 0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(14, alt, 0.0); }
  public static void AddTempDev(FlatBufferBuilder builder, double tempDev) { builder.AddDouble(15, tempDev, 0.0); }
  public static void AddLegFuelDegrade(FlatBufferBuilder builder, double legFuelDegrade) { builder.AddDouble(16, legFuelDegrade, 0.0); }
  public static void AddLegMach(FlatBufferBuilder builder, double legMach) { builder.AddDouble(17, legMach, 0.0); }
  public static void AddLegMsnIndex(FlatBufferBuilder builder, double legMsnIndex) { builder.AddDouble(18, legMsnIndex, 0.0); }
  public static void AddLegDragIndex(FlatBufferBuilder builder, double legDragIndex) { builder.AddDouble(19, legDragIndex, 0.0); }
  public static void AddAvgCalAirspeed(FlatBufferBuilder builder, double avgCalAirspeed) { builder.AddDouble(20, avgCalAirspeed, 0.0); }
  public static void AddAvgTrueAirspeed(FlatBufferBuilder builder, double avgTrueAirspeed) { builder.AddDouble(21, avgTrueAirspeed, 0.0); }
  public static void AddAvgGroundSpeed(FlatBufferBuilder builder, double avgGroundSpeed) { builder.AddDouble(22, avgGroundSpeed, 0.0); }
  public static void AddPriFreq(FlatBufferBuilder builder, double priFreq) { builder.AddDouble(23, priFreq, 0.0); }
  public static void AddPointWindDir(FlatBufferBuilder builder, double pointWindDir) { builder.AddDouble(24, pointWindDir, 0.0); }
  public static void AddPointWindSpeed(FlatBufferBuilder builder, double pointWindSpeed) { builder.AddDouble(25, pointWindSpeed, 0.0); }
  public static void AddAvgWindDir(FlatBufferBuilder builder, double avgWindDir) { builder.AddDouble(26, avgWindDir, 0.0); }
  public static void AddAvgWindSpeed(FlatBufferBuilder builder, double avgWindSpeed) { builder.AddDouble(27, avgWindSpeed, 0.0); }
  public static void AddLegWindFac(FlatBufferBuilder builder, double legWindFac) { builder.AddDouble(28, legWindFac, 0.0); }
  public static void AddAvgDriftAng(FlatBufferBuilder builder, double avgDriftAng) { builder.AddDouble(29, avgDriftAng, 0.0); }
  public static void AddSecFreq(FlatBufferBuilder builder, double secFreq) { builder.AddDouble(30, secFreq, 0.0); }
  public static void AddMagCourse(FlatBufferBuilder builder, double magCourse) { builder.AddDouble(31, magCourse, 0.0); }
  public static void AddTrueCourse(FlatBufferBuilder builder, double trueCourse) { builder.AddDouble(32, trueCourse, 0.0); }
  public static void AddMagHeading(FlatBufferBuilder builder, double magHeading) { builder.AddDouble(33, magHeading, 0.0); }
  public static void AddAaTacanChannel(FlatBufferBuilder builder, StringOffset aaTacanChannelOffset) { builder.AddOffset(34, aaTacanChannelOffset.Value, 0); }
  public static void AddZoneDistance(FlatBufferBuilder builder, double zoneDistance) { builder.AddDouble(35, zoneDistance, 0.0); }
  public static void AddTotalFlownDistance(FlatBufferBuilder builder, double totalFlownDistance) { builder.AddDouble(36, totalFlownDistance, 0.0); }
  public static void AddTotalRemDistance(FlatBufferBuilder builder, double totalRemDistance) { builder.AddDouble(37, totalRemDistance, 0.0); }
  public static void AddZoneTime(FlatBufferBuilder builder, double zoneTime) { builder.AddDouble(38, zoneTime, 0.0); }
  public static void AddTotalTime(FlatBufferBuilder builder, StringOffset totalTimeOffset) { builder.AddOffset(39, totalTimeOffset.Value, 0); }
  public static void AddTotalTimeRem(FlatBufferBuilder builder, StringOffset totalTimeRemOffset) { builder.AddOffset(40, totalTimeRemOffset.Value, 0); }
  public static void AddZoneFuel(FlatBufferBuilder builder, double zoneFuel) { builder.AddDouble(41, zoneFuel, 0.0); }
  public static void AddTotalUsedFuel(FlatBufferBuilder builder, double totalUsedFuel) { builder.AddDouble(42, totalUsedFuel, 0.0); }
  public static void AddTotalRemFuel(FlatBufferBuilder builder, double totalRemFuel) { builder.AddDouble(43, totalRemFuel, 0.0); }
  public static void AddExchangedFuel(FlatBufferBuilder builder, double exchangedFuel) { builder.AddDouble(44, exchangedFuel, 0.0); }
  public static void AddAirDistance(FlatBufferBuilder builder, double airDistance) { builder.AddDouble(45, airDistance, 0.0); }
  public static void AddTotalAirDistance(FlatBufferBuilder builder, double totalAirDistance) { builder.AddDouble(46, totalAirDistance, 0.0); }
  public static void AddTotalWeight(FlatBufferBuilder builder, double totalWeight) { builder.AddDouble(47, totalWeight, 0.0); }
  public static void AddEta(FlatBufferBuilder builder, StringOffset etaOffset) { builder.AddOffset(48, etaOffset.Value, 0); }
  public static void AddAta(FlatBufferBuilder builder, StringOffset ataOffset) { builder.AddOffset(49, ataOffset.Value, 0); }
  public static void AddFuelFlow(FlatBufferBuilder builder, double fuelFlow) { builder.AddDouble(50, fuelFlow, 0.0); }
  public static void AddLegAlternate(FlatBufferBuilder builder, StringOffset legAlternateOffset) { builder.AddOffset(51, legAlternateOffset.Value, 0); }
  public static void AddMagVar(FlatBufferBuilder builder, double magVar) { builder.AddDouble(52, magVar, 0.0); }
  public static void AddDayLowAlt(FlatBufferBuilder builder, double dayLowAlt) { builder.AddDouble(53, dayLowAlt, 0.0); }
  public static void AddNightLowAlt(FlatBufferBuilder builder, double nightLowAlt) { builder.AddDouble(54, nightLowAlt, 0.0); }
  public static void AddNvgLowAlt(FlatBufferBuilder builder, double nvgLowAlt) { builder.AddDouble(55, nvgLowAlt, 0.0); }
  public static Offset<FlightPlanWaypoints_Full> EndFlightPlanWaypoints_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlightPlanWaypoints_Full>(o);
  }
  public static void FinishFlightPlanWaypoints_FullBuffer(FlatBufferBuilder builder, Offset<FlightPlanWaypoints_Full> offset) { builder.Finish(offset.Value, "FLIG"); }
  public static void FinishSizePrefixedFlightPlanWaypoints_FullBuffer(FlatBufferBuilder builder, Offset<FlightPlanWaypoints_Full> offset) { builder.FinishSizePrefixed(offset.Value, "FLIG"); }
  public FlightPlanWaypoints_FullT UnPack() {
    var _o = new FlightPlanWaypoints_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlightPlanWaypoints_FullT _o) {
    _o.Type = this.Type;
    _o.WaypointName = this.WaypointName;
    _o.WaypointNum = this.WaypointNum;
    _o.Airway = this.Airway;
    _o.Arpt = this.Arpt;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.ArId = this.ArId;
    _o.Navaid = this.Navaid;
    _o.TacanChannel = this.TacanChannel;
    _o.VorFreq = this.VorFreq;
    _o.TurbCat = this.TurbCat;
    _o.IceCat = this.IceCat;
    _o.ThunderCat = this.ThunderCat;
    _o.Alt = this.Alt;
    _o.TempDev = this.TempDev;
    _o.LegFuelDegrade = this.LegFuelDegrade;
    _o.LegMach = this.LegMach;
    _o.LegMsnIndex = this.LegMsnIndex;
    _o.LegDragIndex = this.LegDragIndex;
    _o.AvgCalAirspeed = this.AvgCalAirspeed;
    _o.AvgTrueAirspeed = this.AvgTrueAirspeed;
    _o.AvgGroundSpeed = this.AvgGroundSpeed;
    _o.PriFreq = this.PriFreq;
    _o.PointWindDir = this.PointWindDir;
    _o.PointWindSpeed = this.PointWindSpeed;
    _o.AvgWindDir = this.AvgWindDir;
    _o.AvgWindSpeed = this.AvgWindSpeed;
    _o.LegWindFac = this.LegWindFac;
    _o.AvgDriftAng = this.AvgDriftAng;
    _o.SecFreq = this.SecFreq;
    _o.MagCourse = this.MagCourse;
    _o.TrueCourse = this.TrueCourse;
    _o.MagHeading = this.MagHeading;
    _o.AaTacanChannel = this.AaTacanChannel;
    _o.ZoneDistance = this.ZoneDistance;
    _o.TotalFlownDistance = this.TotalFlownDistance;
    _o.TotalRemDistance = this.TotalRemDistance;
    _o.ZoneTime = this.ZoneTime;
    _o.TotalTime = this.TotalTime;
    _o.TotalTimeRem = this.TotalTimeRem;
    _o.ZoneFuel = this.ZoneFuel;
    _o.TotalUsedFuel = this.TotalUsedFuel;
    _o.TotalRemFuel = this.TotalRemFuel;
    _o.ExchangedFuel = this.ExchangedFuel;
    _o.AirDistance = this.AirDistance;
    _o.TotalAirDistance = this.TotalAirDistance;
    _o.TotalWeight = this.TotalWeight;
    _o.Eta = this.Eta;
    _o.Ata = this.Ata;
    _o.FuelFlow = this.FuelFlow;
    _o.LegAlternate = this.LegAlternate;
    _o.MagVar = this.MagVar;
    _o.DayLowAlt = this.DayLowAlt;
    _o.NightLowAlt = this.NightLowAlt;
    _o.NvgLowAlt = this.NvgLowAlt;
  }
  public static Offset<FlightPlanWaypoints_Full> Pack(FlatBufferBuilder builder, FlightPlanWaypoints_FullT _o) {
    if (_o == null) return default(Offset<FlightPlanWaypoints_Full>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _waypointName = _o.WaypointName == null ? default(StringOffset) : builder.CreateString(_o.WaypointName);
    var _airway = _o.Airway == null ? default(StringOffset) : builder.CreateString(_o.Airway);
    var _arpt = _o.Arpt == null ? default(StringOffset) : builder.CreateString(_o.Arpt);
    var _arId = _o.ArId == null ? default(StringOffset) : builder.CreateString(_o.ArId);
    var _navaid = _o.Navaid == null ? default(StringOffset) : builder.CreateString(_o.Navaid);
    var _tacanChannel = _o.TacanChannel == null ? default(StringOffset) : builder.CreateString(_o.TacanChannel);
    var _turbCat = _o.TurbCat == null ? default(StringOffset) : builder.CreateString(_o.TurbCat);
    var _iceCat = _o.IceCat == null ? default(StringOffset) : builder.CreateString(_o.IceCat);
    var _thunderCat = _o.ThunderCat == null ? default(StringOffset) : builder.CreateString(_o.ThunderCat);
    var _aaTacanChannel = _o.AaTacanChannel == null ? default(StringOffset) : builder.CreateString(_o.AaTacanChannel);
    var _totalTime = _o.TotalTime == null ? default(StringOffset) : builder.CreateString(_o.TotalTime);
    var _totalTimeRem = _o.TotalTimeRem == null ? default(StringOffset) : builder.CreateString(_o.TotalTimeRem);
    var _eta = _o.Eta == null ? default(StringOffset) : builder.CreateString(_o.Eta);
    var _ata = _o.Ata == null ? default(StringOffset) : builder.CreateString(_o.Ata);
    var _legAlternate = _o.LegAlternate == null ? default(StringOffset) : builder.CreateString(_o.LegAlternate);
    return CreateFlightPlanWaypoints_Full(
      builder,
      _type,
      _waypointName,
      _o.WaypointNum,
      _airway,
      _arpt,
      _o.Lat,
      _o.Lon,
      _arId,
      _navaid,
      _tacanChannel,
      _o.VorFreq,
      _turbCat,
      _iceCat,
      _thunderCat,
      _o.Alt,
      _o.TempDev,
      _o.LegFuelDegrade,
      _o.LegMach,
      _o.LegMsnIndex,
      _o.LegDragIndex,
      _o.AvgCalAirspeed,
      _o.AvgTrueAirspeed,
      _o.AvgGroundSpeed,
      _o.PriFreq,
      _o.PointWindDir,
      _o.PointWindSpeed,
      _o.AvgWindDir,
      _o.AvgWindSpeed,
      _o.LegWindFac,
      _o.AvgDriftAng,
      _o.SecFreq,
      _o.MagCourse,
      _o.TrueCourse,
      _o.MagHeading,
      _aaTacanChannel,
      _o.ZoneDistance,
      _o.TotalFlownDistance,
      _o.TotalRemDistance,
      _o.ZoneTime,
      _totalTime,
      _totalTimeRem,
      _o.ZoneFuel,
      _o.TotalUsedFuel,
      _o.TotalRemFuel,
      _o.ExchangedFuel,
      _o.AirDistance,
      _o.TotalAirDistance,
      _o.TotalWeight,
      _eta,
      _ata,
      _o.FuelFlow,
      _legAlternate,
      _o.MagVar,
      _o.DayLowAlt,
      _o.NightLowAlt,
      _o.NvgLowAlt);
  }
}

public class FlightPlanWaypoints_FullT
{
  public string Type { get; set; }
  public string WaypointName { get; set; }
  public int WaypointNum { get; set; }
  public string Airway { get; set; }
  public string Arpt { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string ArId { get; set; }
  public string Navaid { get; set; }
  public string TacanChannel { get; set; }
  public double VorFreq { get; set; }
  public string TurbCat { get; set; }
  public string IceCat { get; set; }
  public string ThunderCat { get; set; }
  public double Alt { get; set; }
  public double TempDev { get; set; }
  public double LegFuelDegrade { get; set; }
  public double LegMach { get; set; }
  public double LegMsnIndex { get; set; }
  public double LegDragIndex { get; set; }
  public double AvgCalAirspeed { get; set; }
  public double AvgTrueAirspeed { get; set; }
  public double AvgGroundSpeed { get; set; }
  public double PriFreq { get; set; }
  public double PointWindDir { get; set; }
  public double PointWindSpeed { get; set; }
  public double AvgWindDir { get; set; }
  public double AvgWindSpeed { get; set; }
  public double LegWindFac { get; set; }
  public double AvgDriftAng { get; set; }
  public double SecFreq { get; set; }
  public double MagCourse { get; set; }
  public double TrueCourse { get; set; }
  public double MagHeading { get; set; }
  public string AaTacanChannel { get; set; }
  public double ZoneDistance { get; set; }
  public double TotalFlownDistance { get; set; }
  public double TotalRemDistance { get; set; }
  public double ZoneTime { get; set; }
  public string TotalTime { get; set; }
  public string TotalTimeRem { get; set; }
  public double ZoneFuel { get; set; }
  public double TotalUsedFuel { get; set; }
  public double TotalRemFuel { get; set; }
  public double ExchangedFuel { get; set; }
  public double AirDistance { get; set; }
  public double TotalAirDistance { get; set; }
  public double TotalWeight { get; set; }
  public string Eta { get; set; }
  public string Ata { get; set; }
  public double FuelFlow { get; set; }
  public string LegAlternate { get; set; }
  public double MagVar { get; set; }
  public double DayLowAlt { get; set; }
  public double NightLowAlt { get; set; }
  public double NvgLowAlt { get; set; }

  public FlightPlanWaypoints_FullT() {
    this.Type = null;
    this.WaypointName = null;
    this.WaypointNum = 0;
    this.Airway = null;
    this.Arpt = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.ArId = null;
    this.Navaid = null;
    this.TacanChannel = null;
    this.VorFreq = 0.0;
    this.TurbCat = null;
    this.IceCat = null;
    this.ThunderCat = null;
    this.Alt = 0.0;
    this.TempDev = 0.0;
    this.LegFuelDegrade = 0.0;
    this.LegMach = 0.0;
    this.LegMsnIndex = 0.0;
    this.LegDragIndex = 0.0;
    this.AvgCalAirspeed = 0.0;
    this.AvgTrueAirspeed = 0.0;
    this.AvgGroundSpeed = 0.0;
    this.PriFreq = 0.0;
    this.PointWindDir = 0.0;
    this.PointWindSpeed = 0.0;
    this.AvgWindDir = 0.0;
    this.AvgWindSpeed = 0.0;
    this.LegWindFac = 0.0;
    this.AvgDriftAng = 0.0;
    this.SecFreq = 0.0;
    this.MagCourse = 0.0;
    this.TrueCourse = 0.0;
    this.MagHeading = 0.0;
    this.AaTacanChannel = null;
    this.ZoneDistance = 0.0;
    this.TotalFlownDistance = 0.0;
    this.TotalRemDistance = 0.0;
    this.ZoneTime = 0.0;
    this.TotalTime = null;
    this.TotalTimeRem = null;
    this.ZoneFuel = 0.0;
    this.TotalUsedFuel = 0.0;
    this.TotalRemFuel = 0.0;
    this.ExchangedFuel = 0.0;
    this.AirDistance = 0.0;
    this.TotalAirDistance = 0.0;
    this.TotalWeight = 0.0;
    this.Eta = null;
    this.Ata = null;
    this.FuelFlow = 0.0;
    this.LegAlternate = null;
    this.MagVar = 0.0;
    this.DayLowAlt = 0.0;
    this.NightLowAlt = 0.0;
    this.NvgLowAlt = 0.0;
  }
  public static FlightPlanWaypoints_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return FlightPlanWaypoints_Full.GetRootAsFlightPlanWaypoints_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FlightPlanWaypoints_Full.FinishFlightPlanWaypoints_FullBuffer(fbb, FlightPlanWaypoints_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class FlightPlanWaypoints_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyString(tablePos, 6 /*WaypointName*/, false)
      && verifier.VerifyField(tablePos, 8 /*WaypointNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Airway*/, false)
      && verifier.VerifyString(tablePos, 12 /*Arpt*/, false)
      && verifier.VerifyField(tablePos, 14 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*ArId*/, false)
      && verifier.VerifyString(tablePos, 20 /*Navaid*/, false)
      && verifier.VerifyString(tablePos, 22 /*TacanChannel*/, false)
      && verifier.VerifyField(tablePos, 24 /*VorFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*TurbCat*/, false)
      && verifier.VerifyString(tablePos, 28 /*IceCat*/, false)
      && verifier.VerifyString(tablePos, 30 /*ThunderCat*/, false)
      && verifier.VerifyField(tablePos, 32 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*TempDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*LegFuelDegrade*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*LegMach*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*LegMsnIndex*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*LegDragIndex*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*AvgCalAirspeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*AvgTrueAirspeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*AvgGroundSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*PriFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*PointWindDir*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*PointWindSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*AvgWindDir*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*AvgWindSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*LegWindFac*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*AvgDriftAng*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*SecFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*MagCourse*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*TrueCourse*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*MagHeading*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 72 /*AaTacanChannel*/, false)
      && verifier.VerifyField(tablePos, 74 /*ZoneDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*TotalFlownDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*TotalRemDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*ZoneTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 82 /*TotalTime*/, false)
      && verifier.VerifyString(tablePos, 84 /*TotalTimeRem*/, false)
      && verifier.VerifyField(tablePos, 86 /*ZoneFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*TotalUsedFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*TotalRemFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*ExchangedFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*AirDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*TotalAirDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*TotalWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 100 /*Eta*/, false)
      && verifier.VerifyString(tablePos, 102 /*Ata*/, false)
      && verifier.VerifyField(tablePos, 104 /*FuelFlow*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 106 /*LegAlternate*/, false)
      && verifier.VerifyField(tablePos, 108 /*MagVar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*DayLowAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*NightLowAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*NvgLowAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
