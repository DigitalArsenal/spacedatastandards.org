// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
public struct AirfieldSlot_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirfieldSlot_Full GetRootAsAirfieldSlot_Full(ByteBuffer _bb) { return GetRootAsAirfieldSlot_Full(_bb, new AirfieldSlot_Full()); }
  public static AirfieldSlot_Full GetRootAsAirfieldSlot_Full(ByteBuffer _bb, AirfieldSlot_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirfieldSlot_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRF"); }
  public static bool VerifyAirfieldSlot_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRF", false, AirfieldSlot_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirfieldSlot_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The name of the airfield where this slot is located.
  /// Example: /// Example: USAF Academy AFLD
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string AirfieldName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirfieldNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAirfieldNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAirfieldNameArray() { return __p.__vector_as_array<byte>(8); }
  /// The International Civil Aviation Organization (ICAO) code of the airfield.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Icao { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcaoBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIcaoBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIcaoArray() { return __p.__vector_as_array<byte>(10); }
  /// Unique identifier of the Airfield for which this slot information applies.
  /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAirfield { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAirfieldBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdAirfieldBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdAirfieldArray() { return __p.__vector_as_array<byte>(12); }
  /// Alternate airfield identifier provided by the source.
  /// Example: /// Example: ALT-AIRFIELD-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AltAirfieldId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAirfieldIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAltAirfieldIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAltAirfieldIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Name of this slot.
  /// Example: /// Example: Apron 5
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string Name { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(16); }
  /// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
  /// Example: /// Example: WORKING
  /// Constraints: Minimum length = 0, Maximum length = 7
  public AirfieldSlot_Full_type_Enum Type { get { int o = __p.__offset(18); return o != 0 ? (AirfieldSlot_Full_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirfieldSlot_Full_type_Enum.WORKING; } }
  /// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
  /// Example: /// Example: WIDE
  /// Constraints: Minimum length = 0, Maximum length = 6
  public AirfieldSlot_Full_acSlotCat_Enum AcSlotCat { get { int o = __p.__offset(20); return o != 0 ? (AirfieldSlot_Full_acSlotCat_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirfieldSlot_Full_acSlotCat_Enum.WIDE; } }
  /// Number of aircraft that can fit in this slot at the same time.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int Capacity { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 0000Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string StartTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 2359Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string EndTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int MinSeparation { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional notes/comments for this airfield slot.
  /// Example: /// Example: Notes for an airfield slot.
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Notes { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(30); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(32); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(34); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(36); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(38); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(40); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(42); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(44); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(46); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirfieldSlot_Full_dataMode_Enum DataMode { get { int o = __p.__offset(48); return o != 0 ? (AirfieldSlot_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirfieldSlot_Full_dataMode_Enum.REAL; } }

  public static Offset<AirfieldSlot_Full> CreateAirfieldSlot_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset airfieldNameOffset = default(StringOffset),
      StringOffset icaoOffset = default(StringOffset),
      StringOffset idAirfieldOffset = default(StringOffset),
      StringOffset altAirfieldIdOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      AirfieldSlot_Full_type_Enum type = AirfieldSlot_Full_type_Enum.WORKING,
      AirfieldSlot_Full_acSlotCat_Enum acSlotCat = AirfieldSlot_Full_acSlotCat_Enum.WIDE,
      int capacity = 0,
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      int minSeparation = 0,
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirfieldSlot_Full_dataMode_Enum dataMode = AirfieldSlot_Full_dataMode_Enum.REAL) {
    builder.StartTable(23);
    AirfieldSlot_Full.AddOrigNetwork(builder, origNetworkOffset);
    AirfieldSlot_Full.AddOrigin(builder, originOffset);
    AirfieldSlot_Full.AddSource(builder, sourceOffset);
    AirfieldSlot_Full.AddSourceDL(builder, sourceDLOffset);
    AirfieldSlot_Full.AddUpdatedBy(builder, updatedByOffset);
    AirfieldSlot_Full.AddUpdatedAt(builder, updatedAtOffset);
    AirfieldSlot_Full.AddCreatedBy(builder, createdByOffset);
    AirfieldSlot_Full.AddCreatedAt(builder, createdAtOffset);
    AirfieldSlot_Full.AddNotes(builder, notesOffset);
    AirfieldSlot_Full.AddMinSeparation(builder, minSeparation);
    AirfieldSlot_Full.AddEndTime(builder, endTimeOffset);
    AirfieldSlot_Full.AddStartTime(builder, startTimeOffset);
    AirfieldSlot_Full.AddCapacity(builder, capacity);
    AirfieldSlot_Full.AddName(builder, nameOffset);
    AirfieldSlot_Full.AddAltAirfieldId(builder, altAirfieldIdOffset);
    AirfieldSlot_Full.AddIdAirfield(builder, idAirfieldOffset);
    AirfieldSlot_Full.AddIcao(builder, icaoOffset);
    AirfieldSlot_Full.AddAirfieldName(builder, airfieldNameOffset);
    AirfieldSlot_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    AirfieldSlot_Full.AddId(builder, idOffset);
    AirfieldSlot_Full.AddDataMode(builder, dataMode);
    AirfieldSlot_Full.AddAcSlotCat(builder, acSlotCat);
    AirfieldSlot_Full.AddType(builder, type);
    return AirfieldSlot_Full.EndAirfieldSlot_Full(builder);
  }

  public static void StartAirfieldSlot_Full(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddAirfieldName(FlatBufferBuilder builder, StringOffset airfieldNameOffset) { builder.AddOffset(2, airfieldNameOffset.Value, 0); }
  public static void AddIcao(FlatBufferBuilder builder, StringOffset icaoOffset) { builder.AddOffset(3, icaoOffset.Value, 0); }
  public static void AddIdAirfield(FlatBufferBuilder builder, StringOffset idAirfieldOffset) { builder.AddOffset(4, idAirfieldOffset.Value, 0); }
  public static void AddAltAirfieldId(FlatBufferBuilder builder, StringOffset altAirfieldIdOffset) { builder.AddOffset(5, altAirfieldIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(6, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, AirfieldSlot_Full_type_Enum type) { builder.AddSbyte(7, (sbyte)type, 0); }
  public static void AddAcSlotCat(FlatBufferBuilder builder, AirfieldSlot_Full_acSlotCat_Enum acSlotCat) { builder.AddSbyte(8, (sbyte)acSlotCat, 0); }
  public static void AddCapacity(FlatBufferBuilder builder, int capacity) { builder.AddInt(9, capacity, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(10, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(11, endTimeOffset.Value, 0); }
  public static void AddMinSeparation(FlatBufferBuilder builder, int minSeparation) { builder.AddInt(12, minSeparation, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(13, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(14, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(15, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(16, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(17, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(18, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(19, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(20, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(21, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirfieldSlot_Full_dataMode_Enum dataMode) { builder.AddSbyte(22, (sbyte)dataMode, 0); }
  public static Offset<AirfieldSlot_Full> EndAirfieldSlot_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirfieldSlot_Full>(o);
  }
  public static void FinishAirfieldSlot_FullBuffer(FlatBufferBuilder builder, Offset<AirfieldSlot_Full> offset) { builder.Finish(offset.Value, "AIRF"); }
  public static void FinishSizePrefixedAirfieldSlot_FullBuffer(FlatBufferBuilder builder, Offset<AirfieldSlot_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRF"); }
  public AirfieldSlot_FullT UnPack() {
    var _o = new AirfieldSlot_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirfieldSlot_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.AirfieldName = this.AirfieldName;
    _o.Icao = this.Icao;
    _o.IdAirfield = this.IdAirfield;
    _o.AltAirfieldId = this.AltAirfieldId;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.AcSlotCat = this.AcSlotCat;
    _o.Capacity = this.Capacity;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.MinSeparation = this.MinSeparation;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirfieldSlot_Full> Pack(FlatBufferBuilder builder, AirfieldSlot_FullT _o) {
    if (_o == null) return default(Offset<AirfieldSlot_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _airfieldName = _o.AirfieldName == null ? default(StringOffset) : builder.CreateString(_o.AirfieldName);
    var _icao = _o.Icao == null ? default(StringOffset) : builder.CreateString(_o.Icao);
    var _idAirfield = _o.IdAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdAirfield);
    var _altAirfieldId = _o.AltAirfieldId == null ? default(StringOffset) : builder.CreateString(_o.AltAirfieldId);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirfieldSlot_Full(
      builder,
      _id,
      _classificationMarking,
      _airfieldName,
      _icao,
      _idAirfield,
      _altAirfieldId,
      _name,
      _o.Type,
      _o.AcSlotCat,
      _o.Capacity,
      _startTime,
      _endTime,
      _o.MinSeparation,
      _notes,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirfieldSlot_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string AirfieldName { get; set; }
  public string Icao { get; set; }
  public string IdAirfield { get; set; }
  public string AltAirfieldId { get; set; }
  public string Name { get; set; }
  public AirfieldSlot_Full_type_Enum Type { get; set; }
  public AirfieldSlot_Full_acSlotCat_Enum AcSlotCat { get; set; }
  public int Capacity { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public int MinSeparation { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirfieldSlot_Full_dataMode_Enum DataMode { get; set; }

  public AirfieldSlot_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.AirfieldName = null;
    this.Icao = null;
    this.IdAirfield = null;
    this.AltAirfieldId = null;
    this.Name = null;
    this.Type = AirfieldSlot_Full_type_Enum.WORKING;
    this.AcSlotCat = AirfieldSlot_Full_acSlotCat_Enum.WIDE;
    this.Capacity = 0;
    this.StartTime = null;
    this.EndTime = null;
    this.MinSeparation = 0;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirfieldSlot_Full_dataMode_Enum.REAL;
  }
  public static AirfieldSlot_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirfieldSlot_Full.GetRootAsAirfieldSlot_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirfieldSlot_Full.FinishAirfieldSlot_FullBuffer(fbb, AirfieldSlot_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirfieldSlot_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*AirfieldName*/, false)
      && verifier.VerifyString(tablePos, 10 /*Icao*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdAirfield*/, false)
      && verifier.VerifyString(tablePos, 14 /*AltAirfieldId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Name*/, false)
      && verifier.VerifyField(tablePos, 18 /*Type*/, 1 /*AirfieldSlot_Full_type_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*AcSlotCat*/, 1 /*AirfieldSlot_Full_acSlotCat_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*Capacity*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*EndTime*/, false)
      && verifier.VerifyField(tablePos, 28 /*MinSeparation*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 36 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 38 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 40 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 42 /*Source*/, false)
      && verifier.VerifyString(tablePos, 44 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 46 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 48 /*DataMode*/, 1 /*AirfieldSlot_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
