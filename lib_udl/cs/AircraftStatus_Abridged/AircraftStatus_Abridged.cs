// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
public struct AircraftStatus_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftStatus_Abridged GetRootAsAircraftStatus_Abridged(ByteBuffer _bb) { return GetRootAsAircraftStatus_Abridged(_bb, new AircraftStatus_Abridged()); }
  public static AircraftStatus_Abridged GetRootAsAircraftStatus_Abridged(ByteBuffer _bb, AircraftStatus_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftStatus_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftStatus_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftStatus_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftStatus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the aircraft.
  /// Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdAircraft { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAircraftBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdAircraftBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdAircraftArray() { return __p.__vector_as_array<byte>(8); }
  /// Alternate Aircraft Identifier provided by source.
  /// Example: /// Example: ORIG-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltAircraftId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAircraftIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAltAircraftIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAltAircraftIdArray() { return __p.__vector_as_array<byte>(10); }
  /// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
  /// Example: /// Example: AVAILABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CurrentState { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrentStateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCurrentStateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCurrentStateArray() { return __p.__vector_as_array<byte>(12); }
  /// If not airborne, the unique identifier of the installation currently hosting the aircraft.
  /// Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAirfield { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAirfieldBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdAirfieldBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdAirfieldArray() { return __p.__vector_as_array<byte>(14); }
  /// US Air Force geographic location code of the airfield where the aircraft is located.
  /// Example: /// Example: AJJY
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string GeoLoc { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoLocBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetGeoLocBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetGeoLocArray() { return __p.__vector_as_array<byte>(16); }
  /// The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
  /// Example: /// Example: EGLL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string PreviousICAO { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreviousICAOBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPreviousICAOBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPreviousICAOArray() { return __p.__vector_as_array<byte>(18); }
  /// The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CurrentICAO { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrentICAOBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCurrentICAOBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCurrentICAOArray() { return __p.__vector_as_array<byte>(20); }
  /// The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
  /// Example: /// Example: PHNL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string NextICAO { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNextICAOBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNextICAOBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNextICAOArray() { return __p.__vector_as_array<byte>(22); }
  /// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
  /// Example: /// Example: Landing
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string FlightPhase { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlightPhaseBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFlightPhaseBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFlightPhaseArray() { return __p.__vector_as_array<byte>(24); }
  /// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string TaStartTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaStartTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTaStartTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTaStartTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EarliestTAEndTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEarliestTAEndTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEarliestTAEndTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEarliestTAEndTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
  /// Example: /// Example: ABLE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MissionReadiness { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionReadinessBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMissionReadinessBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMissionReadinessArray() { return __p.__vector_as_array<byte>(30); }
  /// The mass of fuel remaining on the aircraft, in kilograms.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int Fuel { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Used in conjunction with the fuel field to indicate either burnable or offload fuel.
  /// Example: /// Example: Burn
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string FuelFunction { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFuelFunctionBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetFuelFunctionBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetFuelFunctionArray() { return __p.__vector_as_array<byte>(34); }
  /// Flag indicating that the aircraft is capable of making at least one gun pass.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool GunCapable { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
  /// Example: /// Example: 7.62 MM
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string GunRdsType { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGunRdsTypeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetGunRdsTypeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetGunRdsTypeArray() { return __p.__vector_as_array<byte>(38); }
  /// The lower bound of the estimated number of gun rounds available.
  /// Example: /// Example: 150
  /// Constraints: No constraints specified.
  public int GunRdsMin { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The upper bound of the estimated number of gun rounds available.
  /// Example: /// Example: 550
  /// Constraints: No constraints specified.
  public int GunRdsMax { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  /// Example: /// Example: OPERATIONAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  public AircraftStatus_Abridged_airToAirStatus_Enum AirToAirStatus { get { int o = __p.__offset(44); return o != 0 ? (AircraftStatus_Abridged_airToAirStatus_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftStatus_Abridged_airToAirStatus_Enum.OPERATIONAL; } }
  /// The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
  /// Example: /// Example: OPERATIONAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  public AircraftStatus_Abridged_airToGroundStatus_Enum AirToGroundStatus { get { int o = __p.__offset(46); return o != 0 ? (AircraftStatus_Abridged_airToGroundStatus_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftStatus_Abridged_airToGroundStatus_Enum.OPERATIONAL; } }
  /// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
  /// Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
  /// Constraints: No constraints specified.
  public string Inventory(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InventoryLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
  /// Example: /// Example: [1, 2]
  /// Constraints: No constraints specified.
  public string InventoryMin(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InventoryMinLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
  /// Example: /// Example: [2, 2]
  /// Constraints: No constraints specified.
  public string InventoryMax(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InventoryMaxLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// List of unavailable systems that would normally be on this aircraft.
  /// Example: /// Example: ['CMDS', 'AOC']
  /// Constraints: No constraints specified.
  public string UnavailableSys(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UnavailableSysLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// List of additional operational systems on this aircraft beyond what is normally available.
  /// Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
  /// Constraints: No constraints specified.
  public string AdditionalSys(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AdditionalSysLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional notes/comments concerning this aircraft status.
  /// Example: /// Example: Some notes for aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(58); }
  /// Maintenance pacing remarks assocociated with this aircraft.
  /// Example: /// Example: COM2 INOP
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string MxRemark { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMxRemarkBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetMxRemarkBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetMxRemarkArray() { return __p.__vector_as_array<byte>(60); }
  /// The maintenance status of the aircraft.
  /// Example: /// Example: maintenance status
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string MaintStatus { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaintStatusBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetMaintStatusBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetMaintStatusArray() { return __p.__vector_as_array<byte>(62); }
  /// Indicates the maintenance discrepancy that drives the current maintenance status.
  /// Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string MaintStatusDriver { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaintStatusDriverBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetMaintStatusDriverBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetMaintStatusDriverArray() { return __p.__vector_as_array<byte>(64); }
  /// Indicates the priority of the maintenance effort.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string MaintPriority { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaintPriorityBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetMaintPriorityBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetMaintPriorityArray() { return __p.__vector_as_array<byte>(66); }
  /// Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
  /// Example: /// Example: A2
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string AlphaStatusCode { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlphaStatusCodeBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetAlphaStatusCodeBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetAlphaStatusCodeArray() { return __p.__vector_as_array<byte>(68); }
  /// The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string MaintStatusUpdate { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaintStatusUpdateBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetMaintStatusUpdateBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetMaintStatusUpdateArray() { return __p.__vector_as_array<byte>(70); }
  /// Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-09T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LastInspectionDate { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastInspectionDateBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetLastInspectionDateBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetLastInspectionDateArray() { return __p.__vector_as_array<byte>(72); }
  /// Military aircraft maintenance point of contact for this aircraft.
  /// Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MaintPoc { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaintPocBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetMaintPocBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetMaintPocArray() { return __p.__vector_as_array<byte>(74); }
  /// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
  /// Example: /// Example: ALERT
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string GroundStatus { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundStatusBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetGroundStatusBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetGroundStatusArray() { return __p.__vector_as_array<byte>(76); }
  /// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
  /// Example: /// Example: CLEAR
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ContaminationStatus { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContaminationStatusBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetContaminationStatusBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetContaminationStatusArray() { return __p.__vector_as_array<byte>(78); }
  /// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
  /// Example: /// Example: DELIVERED
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string FuelStatus { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFuelStatusBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetFuelStatusBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetFuelStatusArray() { return __p.__vector_as_array<byte>(80); }
  /// The name or ID of the external user that updated this status.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string LastUpdatedBy { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastUpdatedByBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetLastUpdatedByBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetLastUpdatedByArray() { return __p.__vector_as_array<byte>(82); }
  /// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string TroubleshootEtic { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTroubleshootEticBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTroubleshootEticBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTroubleshootEticArray() { return __p.__vector_as_array<byte>(84); }
  /// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Etic { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEticBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetEticBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetEticArray() { return __p.__vector_as_array<byte>(86); }
  /// The parking location of this aircraft.
  /// Example: /// Example: B1
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ParkLocation { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParkLocationBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetParkLocationBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetParkLocationArray() { return __p.__vector_as_array<byte>(88); }
  /// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
  /// Example: /// Example: GDSS
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ParkLocationSystem { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParkLocationSystemBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetParkLocationSystemBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetParkLocationSystemArray() { return __p.__vector_as_array<byte>(90); }
  /// Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
  /// Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdPOI { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdPOIBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetIdPOIBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetIdPOIArray() { return __p.__vector_as_array<byte>(92); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(94); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(96); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(98); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(100); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AircraftStatus_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(104); return o != 0 ? (AircraftStatus_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftStatus_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(106); }

  public static Offset<AircraftStatus_Abridged> CreateAircraftStatus_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idAircraftOffset = default(StringOffset),
      StringOffset altAircraftIdOffset = default(StringOffset),
      StringOffset currentStateOffset = default(StringOffset),
      StringOffset idAirfieldOffset = default(StringOffset),
      StringOffset geoLocOffset = default(StringOffset),
      StringOffset previousICAOOffset = default(StringOffset),
      StringOffset currentICAOOffset = default(StringOffset),
      StringOffset nextICAOOffset = default(StringOffset),
      StringOffset flightPhaseOffset = default(StringOffset),
      StringOffset taStartTimeOffset = default(StringOffset),
      StringOffset earliestTAEndTimeOffset = default(StringOffset),
      StringOffset missionReadinessOffset = default(StringOffset),
      int fuel = 0,
      StringOffset fuelFunctionOffset = default(StringOffset),
      bool gunCapable = false,
      StringOffset gunRdsTypeOffset = default(StringOffset),
      int gunRdsMin = 0,
      int gunRdsMax = 0,
      AircraftStatus_Abridged_airToAirStatus_Enum airToAirStatus = AircraftStatus_Abridged_airToAirStatus_Enum.OPERATIONAL,
      AircraftStatus_Abridged_airToGroundStatus_Enum airToGroundStatus = AircraftStatus_Abridged_airToGroundStatus_Enum.OPERATIONAL,
      VectorOffset inventoryOffset = default(VectorOffset),
      VectorOffset inventoryMinOffset = default(VectorOffset),
      VectorOffset inventoryMaxOffset = default(VectorOffset),
      VectorOffset unavailableSysOffset = default(VectorOffset),
      VectorOffset additionalSysOffset = default(VectorOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset mxRemarkOffset = default(StringOffset),
      StringOffset maintStatusOffset = default(StringOffset),
      StringOffset maintStatusDriverOffset = default(StringOffset),
      StringOffset maintPriorityOffset = default(StringOffset),
      StringOffset alphaStatusCodeOffset = default(StringOffset),
      StringOffset maintStatusUpdateOffset = default(StringOffset),
      StringOffset lastInspectionDateOffset = default(StringOffset),
      StringOffset maintPocOffset = default(StringOffset),
      StringOffset groundStatusOffset = default(StringOffset),
      StringOffset contaminationStatusOffset = default(StringOffset),
      StringOffset fuelStatusOffset = default(StringOffset),
      StringOffset lastUpdatedByOffset = default(StringOffset),
      StringOffset troubleshootEticOffset = default(StringOffset),
      StringOffset eticOffset = default(StringOffset),
      StringOffset parkLocationOffset = default(StringOffset),
      StringOffset parkLocationSystemOffset = default(StringOffset),
      StringOffset idPOIOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      AircraftStatus_Abridged_dataMode_Enum dataMode = AircraftStatus_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(52);
    AircraftStatus_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AircraftStatus_Abridged.AddOrigin(builder, originOffset);
    AircraftStatus_Abridged.AddSource(builder, sourceOffset);
    AircraftStatus_Abridged.AddSourceDL(builder, sourceDLOffset);
    AircraftStatus_Abridged.AddCreatedBy(builder, createdByOffset);
    AircraftStatus_Abridged.AddCreatedAt(builder, createdAtOffset);
    AircraftStatus_Abridged.AddIdPOI(builder, idPOIOffset);
    AircraftStatus_Abridged.AddParkLocationSystem(builder, parkLocationSystemOffset);
    AircraftStatus_Abridged.AddParkLocation(builder, parkLocationOffset);
    AircraftStatus_Abridged.AddEtic(builder, eticOffset);
    AircraftStatus_Abridged.AddTroubleshootEtic(builder, troubleshootEticOffset);
    AircraftStatus_Abridged.AddLastUpdatedBy(builder, lastUpdatedByOffset);
    AircraftStatus_Abridged.AddFuelStatus(builder, fuelStatusOffset);
    AircraftStatus_Abridged.AddContaminationStatus(builder, contaminationStatusOffset);
    AircraftStatus_Abridged.AddGroundStatus(builder, groundStatusOffset);
    AircraftStatus_Abridged.AddMaintPoc(builder, maintPocOffset);
    AircraftStatus_Abridged.AddLastInspectionDate(builder, lastInspectionDateOffset);
    AircraftStatus_Abridged.AddMaintStatusUpdate(builder, maintStatusUpdateOffset);
    AircraftStatus_Abridged.AddAlphaStatusCode(builder, alphaStatusCodeOffset);
    AircraftStatus_Abridged.AddMaintPriority(builder, maintPriorityOffset);
    AircraftStatus_Abridged.AddMaintStatusDriver(builder, maintStatusDriverOffset);
    AircraftStatus_Abridged.AddMaintStatus(builder, maintStatusOffset);
    AircraftStatus_Abridged.AddMxRemark(builder, mxRemarkOffset);
    AircraftStatus_Abridged.AddNotes(builder, notesOffset);
    AircraftStatus_Abridged.AddAdditionalSys(builder, additionalSysOffset);
    AircraftStatus_Abridged.AddUnavailableSys(builder, unavailableSysOffset);
    AircraftStatus_Abridged.AddInventoryMax(builder, inventoryMaxOffset);
    AircraftStatus_Abridged.AddInventoryMin(builder, inventoryMinOffset);
    AircraftStatus_Abridged.AddInventory(builder, inventoryOffset);
    AircraftStatus_Abridged.AddGunRdsMax(builder, gunRdsMax);
    AircraftStatus_Abridged.AddGunRdsMin(builder, gunRdsMin);
    AircraftStatus_Abridged.AddGunRdsType(builder, gunRdsTypeOffset);
    AircraftStatus_Abridged.AddFuelFunction(builder, fuelFunctionOffset);
    AircraftStatus_Abridged.AddFuel(builder, fuel);
    AircraftStatus_Abridged.AddMissionReadiness(builder, missionReadinessOffset);
    AircraftStatus_Abridged.AddEarliestTAEndTime(builder, earliestTAEndTimeOffset);
    AircraftStatus_Abridged.AddTaStartTime(builder, taStartTimeOffset);
    AircraftStatus_Abridged.AddFlightPhase(builder, flightPhaseOffset);
    AircraftStatus_Abridged.AddNextICAO(builder, nextICAOOffset);
    AircraftStatus_Abridged.AddCurrentICAO(builder, currentICAOOffset);
    AircraftStatus_Abridged.AddPreviousICAO(builder, previousICAOOffset);
    AircraftStatus_Abridged.AddGeoLoc(builder, geoLocOffset);
    AircraftStatus_Abridged.AddIdAirfield(builder, idAirfieldOffset);
    AircraftStatus_Abridged.AddCurrentState(builder, currentStateOffset);
    AircraftStatus_Abridged.AddAltAircraftId(builder, altAircraftIdOffset);
    AircraftStatus_Abridged.AddIdAircraft(builder, idAircraftOffset);
    AircraftStatus_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AircraftStatus_Abridged.AddId(builder, idOffset);
    AircraftStatus_Abridged.AddDataMode(builder, dataMode);
    AircraftStatus_Abridged.AddAirToGroundStatus(builder, airToGroundStatus);
    AircraftStatus_Abridged.AddAirToAirStatus(builder, airToAirStatus);
    AircraftStatus_Abridged.AddGunCapable(builder, gunCapable);
    return AircraftStatus_Abridged.EndAircraftStatus_Abridged(builder);
  }

  public static void StartAircraftStatus_Abridged(FlatBufferBuilder builder) { builder.StartTable(52); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdAircraft(FlatBufferBuilder builder, StringOffset idAircraftOffset) { builder.AddOffset(2, idAircraftOffset.Value, 0); }
  public static void AddAltAircraftId(FlatBufferBuilder builder, StringOffset altAircraftIdOffset) { builder.AddOffset(3, altAircraftIdOffset.Value, 0); }
  public static void AddCurrentState(FlatBufferBuilder builder, StringOffset currentStateOffset) { builder.AddOffset(4, currentStateOffset.Value, 0); }
  public static void AddIdAirfield(FlatBufferBuilder builder, StringOffset idAirfieldOffset) { builder.AddOffset(5, idAirfieldOffset.Value, 0); }
  public static void AddGeoLoc(FlatBufferBuilder builder, StringOffset geoLocOffset) { builder.AddOffset(6, geoLocOffset.Value, 0); }
  public static void AddPreviousICAO(FlatBufferBuilder builder, StringOffset previousICAOOffset) { builder.AddOffset(7, previousICAOOffset.Value, 0); }
  public static void AddCurrentICAO(FlatBufferBuilder builder, StringOffset currentICAOOffset) { builder.AddOffset(8, currentICAOOffset.Value, 0); }
  public static void AddNextICAO(FlatBufferBuilder builder, StringOffset nextICAOOffset) { builder.AddOffset(9, nextICAOOffset.Value, 0); }
  public static void AddFlightPhase(FlatBufferBuilder builder, StringOffset flightPhaseOffset) { builder.AddOffset(10, flightPhaseOffset.Value, 0); }
  public static void AddTaStartTime(FlatBufferBuilder builder, StringOffset taStartTimeOffset) { builder.AddOffset(11, taStartTimeOffset.Value, 0); }
  public static void AddEarliestTAEndTime(FlatBufferBuilder builder, StringOffset earliestTAEndTimeOffset) { builder.AddOffset(12, earliestTAEndTimeOffset.Value, 0); }
  public static void AddMissionReadiness(FlatBufferBuilder builder, StringOffset missionReadinessOffset) { builder.AddOffset(13, missionReadinessOffset.Value, 0); }
  public static void AddFuel(FlatBufferBuilder builder, int fuel) { builder.AddInt(14, fuel, 0); }
  public static void AddFuelFunction(FlatBufferBuilder builder, StringOffset fuelFunctionOffset) { builder.AddOffset(15, fuelFunctionOffset.Value, 0); }
  public static void AddGunCapable(FlatBufferBuilder builder, bool gunCapable) { builder.AddBool(16, gunCapable, false); }
  public static void AddGunRdsType(FlatBufferBuilder builder, StringOffset gunRdsTypeOffset) { builder.AddOffset(17, gunRdsTypeOffset.Value, 0); }
  public static void AddGunRdsMin(FlatBufferBuilder builder, int gunRdsMin) { builder.AddInt(18, gunRdsMin, 0); }
  public static void AddGunRdsMax(FlatBufferBuilder builder, int gunRdsMax) { builder.AddInt(19, gunRdsMax, 0); }
  public static void AddAirToAirStatus(FlatBufferBuilder builder, AircraftStatus_Abridged_airToAirStatus_Enum airToAirStatus) { builder.AddSbyte(20, (sbyte)airToAirStatus, 0); }
  public static void AddAirToGroundStatus(FlatBufferBuilder builder, AircraftStatus_Abridged_airToGroundStatus_Enum airToGroundStatus) { builder.AddSbyte(21, (sbyte)airToGroundStatus, 0); }
  public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(22, inventoryOffset.Value, 0); }
  public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInventoryMin(FlatBufferBuilder builder, VectorOffset inventoryMinOffset) { builder.AddOffset(23, inventoryMinOffset.Value, 0); }
  public static VectorOffset CreateInventoryMinVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMinVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMinVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMinVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInventoryMinVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInventoryMax(FlatBufferBuilder builder, VectorOffset inventoryMaxOffset) { builder.AddOffset(24, inventoryMaxOffset.Value, 0); }
  public static VectorOffset CreateInventoryMaxVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMaxVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMaxVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInventoryMaxVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInventoryMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnavailableSys(FlatBufferBuilder builder, VectorOffset unavailableSysOffset) { builder.AddOffset(25, unavailableSysOffset.Value, 0); }
  public static VectorOffset CreateUnavailableSysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnavailableSysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnavailableSysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUnavailableSysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUnavailableSysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdditionalSys(FlatBufferBuilder builder, VectorOffset additionalSysOffset) { builder.AddOffset(26, additionalSysOffset.Value, 0); }
  public static VectorOffset CreateAdditionalSysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalSysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalSysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAdditionalSysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAdditionalSysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(27, notesOffset.Value, 0); }
  public static void AddMxRemark(FlatBufferBuilder builder, StringOffset mxRemarkOffset) { builder.AddOffset(28, mxRemarkOffset.Value, 0); }
  public static void AddMaintStatus(FlatBufferBuilder builder, StringOffset maintStatusOffset) { builder.AddOffset(29, maintStatusOffset.Value, 0); }
  public static void AddMaintStatusDriver(FlatBufferBuilder builder, StringOffset maintStatusDriverOffset) { builder.AddOffset(30, maintStatusDriverOffset.Value, 0); }
  public static void AddMaintPriority(FlatBufferBuilder builder, StringOffset maintPriorityOffset) { builder.AddOffset(31, maintPriorityOffset.Value, 0); }
  public static void AddAlphaStatusCode(FlatBufferBuilder builder, StringOffset alphaStatusCodeOffset) { builder.AddOffset(32, alphaStatusCodeOffset.Value, 0); }
  public static void AddMaintStatusUpdate(FlatBufferBuilder builder, StringOffset maintStatusUpdateOffset) { builder.AddOffset(33, maintStatusUpdateOffset.Value, 0); }
  public static void AddLastInspectionDate(FlatBufferBuilder builder, StringOffset lastInspectionDateOffset) { builder.AddOffset(34, lastInspectionDateOffset.Value, 0); }
  public static void AddMaintPoc(FlatBufferBuilder builder, StringOffset maintPocOffset) { builder.AddOffset(35, maintPocOffset.Value, 0); }
  public static void AddGroundStatus(FlatBufferBuilder builder, StringOffset groundStatusOffset) { builder.AddOffset(36, groundStatusOffset.Value, 0); }
  public static void AddContaminationStatus(FlatBufferBuilder builder, StringOffset contaminationStatusOffset) { builder.AddOffset(37, contaminationStatusOffset.Value, 0); }
  public static void AddFuelStatus(FlatBufferBuilder builder, StringOffset fuelStatusOffset) { builder.AddOffset(38, fuelStatusOffset.Value, 0); }
  public static void AddLastUpdatedBy(FlatBufferBuilder builder, StringOffset lastUpdatedByOffset) { builder.AddOffset(39, lastUpdatedByOffset.Value, 0); }
  public static void AddTroubleshootEtic(FlatBufferBuilder builder, StringOffset troubleshootEticOffset) { builder.AddOffset(40, troubleshootEticOffset.Value, 0); }
  public static void AddEtic(FlatBufferBuilder builder, StringOffset eticOffset) { builder.AddOffset(41, eticOffset.Value, 0); }
  public static void AddParkLocation(FlatBufferBuilder builder, StringOffset parkLocationOffset) { builder.AddOffset(42, parkLocationOffset.Value, 0); }
  public static void AddParkLocationSystem(FlatBufferBuilder builder, StringOffset parkLocationSystemOffset) { builder.AddOffset(43, parkLocationSystemOffset.Value, 0); }
  public static void AddIdPOI(FlatBufferBuilder builder, StringOffset idPOIOffset) { builder.AddOffset(44, idPOIOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(45, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(46, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(47, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(48, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(49, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AircraftStatus_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(50, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(51, origNetworkOffset.Value, 0); }
  public static Offset<AircraftStatus_Abridged> EndAircraftStatus_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftStatus_Abridged>(o);
  }
  public static void FinishAircraftStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftStatus_Abridged> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftStatus_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftStatus_AbridgedT UnPack() {
    var _o = new AircraftStatus_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftStatus_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdAircraft = this.IdAircraft;
    _o.AltAircraftId = this.AltAircraftId;
    _o.CurrentState = this.CurrentState;
    _o.IdAirfield = this.IdAirfield;
    _o.GeoLoc = this.GeoLoc;
    _o.PreviousICAO = this.PreviousICAO;
    _o.CurrentICAO = this.CurrentICAO;
    _o.NextICAO = this.NextICAO;
    _o.FlightPhase = this.FlightPhase;
    _o.TaStartTime = this.TaStartTime;
    _o.EarliestTAEndTime = this.EarliestTAEndTime;
    _o.MissionReadiness = this.MissionReadiness;
    _o.Fuel = this.Fuel;
    _o.FuelFunction = this.FuelFunction;
    _o.GunCapable = this.GunCapable;
    _o.GunRdsType = this.GunRdsType;
    _o.GunRdsMin = this.GunRdsMin;
    _o.GunRdsMax = this.GunRdsMax;
    _o.AirToAirStatus = this.AirToAirStatus;
    _o.AirToGroundStatus = this.AirToGroundStatus;
    _o.Inventory = new List<string>();
    for (var _j = 0; _j < this.InventoryLength; ++_j) {_o.Inventory.Add(this.Inventory(_j));}
    _o.InventoryMin = new List<string>();
    for (var _j = 0; _j < this.InventoryMinLength; ++_j) {_o.InventoryMin.Add(this.InventoryMin(_j));}
    _o.InventoryMax = new List<string>();
    for (var _j = 0; _j < this.InventoryMaxLength; ++_j) {_o.InventoryMax.Add(this.InventoryMax(_j));}
    _o.UnavailableSys = new List<string>();
    for (var _j = 0; _j < this.UnavailableSysLength; ++_j) {_o.UnavailableSys.Add(this.UnavailableSys(_j));}
    _o.AdditionalSys = new List<string>();
    for (var _j = 0; _j < this.AdditionalSysLength; ++_j) {_o.AdditionalSys.Add(this.AdditionalSys(_j));}
    _o.Notes = this.Notes;
    _o.MxRemark = this.MxRemark;
    _o.MaintStatus = this.MaintStatus;
    _o.MaintStatusDriver = this.MaintStatusDriver;
    _o.MaintPriority = this.MaintPriority;
    _o.AlphaStatusCode = this.AlphaStatusCode;
    _o.MaintStatusUpdate = this.MaintStatusUpdate;
    _o.LastInspectionDate = this.LastInspectionDate;
    _o.MaintPoc = this.MaintPoc;
    _o.GroundStatus = this.GroundStatus;
    _o.ContaminationStatus = this.ContaminationStatus;
    _o.FuelStatus = this.FuelStatus;
    _o.LastUpdatedBy = this.LastUpdatedBy;
    _o.TroubleshootEtic = this.TroubleshootEtic;
    _o.Etic = this.Etic;
    _o.ParkLocation = this.ParkLocation;
    _o.ParkLocationSystem = this.ParkLocationSystem;
    _o.IdPOI = this.IdPOI;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<AircraftStatus_Abridged> Pack(FlatBufferBuilder builder, AircraftStatus_AbridgedT _o) {
    if (_o == null) return default(Offset<AircraftStatus_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idAircraft = _o.IdAircraft == null ? default(StringOffset) : builder.CreateString(_o.IdAircraft);
    var _altAircraftId = _o.AltAircraftId == null ? default(StringOffset) : builder.CreateString(_o.AltAircraftId);
    var _currentState = _o.CurrentState == null ? default(StringOffset) : builder.CreateString(_o.CurrentState);
    var _idAirfield = _o.IdAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdAirfield);
    var _geoLoc = _o.GeoLoc == null ? default(StringOffset) : builder.CreateString(_o.GeoLoc);
    var _previousICAO = _o.PreviousICAO == null ? default(StringOffset) : builder.CreateString(_o.PreviousICAO);
    var _currentICAO = _o.CurrentICAO == null ? default(StringOffset) : builder.CreateString(_o.CurrentICAO);
    var _nextICAO = _o.NextICAO == null ? default(StringOffset) : builder.CreateString(_o.NextICAO);
    var _flightPhase = _o.FlightPhase == null ? default(StringOffset) : builder.CreateString(_o.FlightPhase);
    var _taStartTime = _o.TaStartTime == null ? default(StringOffset) : builder.CreateString(_o.TaStartTime);
    var _earliestTAEndTime = _o.EarliestTAEndTime == null ? default(StringOffset) : builder.CreateString(_o.EarliestTAEndTime);
    var _missionReadiness = _o.MissionReadiness == null ? default(StringOffset) : builder.CreateString(_o.MissionReadiness);
    var _fuelFunction = _o.FuelFunction == null ? default(StringOffset) : builder.CreateString(_o.FuelFunction);
    var _gunRdsType = _o.GunRdsType == null ? default(StringOffset) : builder.CreateString(_o.GunRdsType);
    var _inventory = default(VectorOffset);
    if (_o.Inventory != null) {
      var __inventory = new StringOffset[_o.Inventory.Count];
      for (var _j = 0; _j < __inventory.Length; ++_j) { __inventory[_j] = builder.CreateString(_o.Inventory[_j]); }
      _inventory = CreateInventoryVector(builder, __inventory);
    }
    var _inventoryMin = default(VectorOffset);
    if (_o.InventoryMin != null) {
      var __inventoryMin = new StringOffset[_o.InventoryMin.Count];
      for (var _j = 0; _j < __inventoryMin.Length; ++_j) { __inventoryMin[_j] = builder.CreateString(_o.InventoryMin[_j]); }
      _inventoryMin = CreateInventoryMinVector(builder, __inventoryMin);
    }
    var _inventoryMax = default(VectorOffset);
    if (_o.InventoryMax != null) {
      var __inventoryMax = new StringOffset[_o.InventoryMax.Count];
      for (var _j = 0; _j < __inventoryMax.Length; ++_j) { __inventoryMax[_j] = builder.CreateString(_o.InventoryMax[_j]); }
      _inventoryMax = CreateInventoryMaxVector(builder, __inventoryMax);
    }
    var _unavailableSys = default(VectorOffset);
    if (_o.UnavailableSys != null) {
      var __unavailableSys = new StringOffset[_o.UnavailableSys.Count];
      for (var _j = 0; _j < __unavailableSys.Length; ++_j) { __unavailableSys[_j] = builder.CreateString(_o.UnavailableSys[_j]); }
      _unavailableSys = CreateUnavailableSysVector(builder, __unavailableSys);
    }
    var _additionalSys = default(VectorOffset);
    if (_o.AdditionalSys != null) {
      var __additionalSys = new StringOffset[_o.AdditionalSys.Count];
      for (var _j = 0; _j < __additionalSys.Length; ++_j) { __additionalSys[_j] = builder.CreateString(_o.AdditionalSys[_j]); }
      _additionalSys = CreateAdditionalSysVector(builder, __additionalSys);
    }
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _mxRemark = _o.MxRemark == null ? default(StringOffset) : builder.CreateString(_o.MxRemark);
    var _maintStatus = _o.MaintStatus == null ? default(StringOffset) : builder.CreateString(_o.MaintStatus);
    var _maintStatusDriver = _o.MaintStatusDriver == null ? default(StringOffset) : builder.CreateString(_o.MaintStatusDriver);
    var _maintPriority = _o.MaintPriority == null ? default(StringOffset) : builder.CreateString(_o.MaintPriority);
    var _alphaStatusCode = _o.AlphaStatusCode == null ? default(StringOffset) : builder.CreateString(_o.AlphaStatusCode);
    var _maintStatusUpdate = _o.MaintStatusUpdate == null ? default(StringOffset) : builder.CreateString(_o.MaintStatusUpdate);
    var _lastInspectionDate = _o.LastInspectionDate == null ? default(StringOffset) : builder.CreateString(_o.LastInspectionDate);
    var _maintPoc = _o.MaintPoc == null ? default(StringOffset) : builder.CreateString(_o.MaintPoc);
    var _groundStatus = _o.GroundStatus == null ? default(StringOffset) : builder.CreateString(_o.GroundStatus);
    var _contaminationStatus = _o.ContaminationStatus == null ? default(StringOffset) : builder.CreateString(_o.ContaminationStatus);
    var _fuelStatus = _o.FuelStatus == null ? default(StringOffset) : builder.CreateString(_o.FuelStatus);
    var _lastUpdatedBy = _o.LastUpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.LastUpdatedBy);
    var _troubleshootEtic = _o.TroubleshootEtic == null ? default(StringOffset) : builder.CreateString(_o.TroubleshootEtic);
    var _etic = _o.Etic == null ? default(StringOffset) : builder.CreateString(_o.Etic);
    var _parkLocation = _o.ParkLocation == null ? default(StringOffset) : builder.CreateString(_o.ParkLocation);
    var _parkLocationSystem = _o.ParkLocationSystem == null ? default(StringOffset) : builder.CreateString(_o.ParkLocationSystem);
    var _idPOI = _o.IdPOI == null ? default(StringOffset) : builder.CreateString(_o.IdPOI);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAircraftStatus_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idAircraft,
      _altAircraftId,
      _currentState,
      _idAirfield,
      _geoLoc,
      _previousICAO,
      _currentICAO,
      _nextICAO,
      _flightPhase,
      _taStartTime,
      _earliestTAEndTime,
      _missionReadiness,
      _o.Fuel,
      _fuelFunction,
      _o.GunCapable,
      _gunRdsType,
      _o.GunRdsMin,
      _o.GunRdsMax,
      _o.AirToAirStatus,
      _o.AirToGroundStatus,
      _inventory,
      _inventoryMin,
      _inventoryMax,
      _unavailableSys,
      _additionalSys,
      _notes,
      _mxRemark,
      _maintStatus,
      _maintStatusDriver,
      _maintPriority,
      _alphaStatusCode,
      _maintStatusUpdate,
      _lastInspectionDate,
      _maintPoc,
      _groundStatus,
      _contaminationStatus,
      _fuelStatus,
      _lastUpdatedBy,
      _troubleshootEtic,
      _etic,
      _parkLocation,
      _parkLocationSystem,
      _idPOI,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class AircraftStatus_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdAircraft { get; set; }
  public string AltAircraftId { get; set; }
  public string CurrentState { get; set; }
  public string IdAirfield { get; set; }
  public string GeoLoc { get; set; }
  public string PreviousICAO { get; set; }
  public string CurrentICAO { get; set; }
  public string NextICAO { get; set; }
  public string FlightPhase { get; set; }
  public string TaStartTime { get; set; }
  public string EarliestTAEndTime { get; set; }
  public string MissionReadiness { get; set; }
  public int Fuel { get; set; }
  public string FuelFunction { get; set; }
  public bool GunCapable { get; set; }
  public string GunRdsType { get; set; }
  public int GunRdsMin { get; set; }
  public int GunRdsMax { get; set; }
  public AircraftStatus_Abridged_airToAirStatus_Enum AirToAirStatus { get; set; }
  public AircraftStatus_Abridged_airToGroundStatus_Enum AirToGroundStatus { get; set; }
  public List<string> Inventory { get; set; }
  public List<string> InventoryMin { get; set; }
  public List<string> InventoryMax { get; set; }
  public List<string> UnavailableSys { get; set; }
  public List<string> AdditionalSys { get; set; }
  public string Notes { get; set; }
  public string MxRemark { get; set; }
  public string MaintStatus { get; set; }
  public string MaintStatusDriver { get; set; }
  public string MaintPriority { get; set; }
  public string AlphaStatusCode { get; set; }
  public string MaintStatusUpdate { get; set; }
  public string LastInspectionDate { get; set; }
  public string MaintPoc { get; set; }
  public string GroundStatus { get; set; }
  public string ContaminationStatus { get; set; }
  public string FuelStatus { get; set; }
  public string LastUpdatedBy { get; set; }
  public string TroubleshootEtic { get; set; }
  public string Etic { get; set; }
  public string ParkLocation { get; set; }
  public string ParkLocationSystem { get; set; }
  public string IdPOI { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public AircraftStatus_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public AircraftStatus_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdAircraft = null;
    this.AltAircraftId = null;
    this.CurrentState = null;
    this.IdAirfield = null;
    this.GeoLoc = null;
    this.PreviousICAO = null;
    this.CurrentICAO = null;
    this.NextICAO = null;
    this.FlightPhase = null;
    this.TaStartTime = null;
    this.EarliestTAEndTime = null;
    this.MissionReadiness = null;
    this.Fuel = 0;
    this.FuelFunction = null;
    this.GunCapable = false;
    this.GunRdsType = null;
    this.GunRdsMin = 0;
    this.GunRdsMax = 0;
    this.AirToAirStatus = AircraftStatus_Abridged_airToAirStatus_Enum.OPERATIONAL;
    this.AirToGroundStatus = AircraftStatus_Abridged_airToGroundStatus_Enum.OPERATIONAL;
    this.Inventory = null;
    this.InventoryMin = null;
    this.InventoryMax = null;
    this.UnavailableSys = null;
    this.AdditionalSys = null;
    this.Notes = null;
    this.MxRemark = null;
    this.MaintStatus = null;
    this.MaintStatusDriver = null;
    this.MaintPriority = null;
    this.AlphaStatusCode = null;
    this.MaintStatusUpdate = null;
    this.LastInspectionDate = null;
    this.MaintPoc = null;
    this.GroundStatus = null;
    this.ContaminationStatus = null;
    this.FuelStatus = null;
    this.LastUpdatedBy = null;
    this.TroubleshootEtic = null;
    this.Etic = null;
    this.ParkLocation = null;
    this.ParkLocationSystem = null;
    this.IdPOI = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = AircraftStatus_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static AircraftStatus_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftStatus_Abridged.GetRootAsAircraftStatus_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftStatus_Abridged.FinishAircraftStatus_AbridgedBuffer(fbb, AircraftStatus_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftStatus_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdAircraft*/, false)
      && verifier.VerifyString(tablePos, 10 /*AltAircraftId*/, false)
      && verifier.VerifyString(tablePos, 12 /*CurrentState*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdAirfield*/, false)
      && verifier.VerifyString(tablePos, 16 /*GeoLoc*/, false)
      && verifier.VerifyString(tablePos, 18 /*PreviousICAO*/, false)
      && verifier.VerifyString(tablePos, 20 /*CurrentICAO*/, false)
      && verifier.VerifyString(tablePos, 22 /*NextICAO*/, false)
      && verifier.VerifyString(tablePos, 24 /*FlightPhase*/, false)
      && verifier.VerifyString(tablePos, 26 /*TaStartTime*/, false)
      && verifier.VerifyString(tablePos, 28 /*EarliestTAEndTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*MissionReadiness*/, false)
      && verifier.VerifyField(tablePos, 32 /*Fuel*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 34 /*FuelFunction*/, false)
      && verifier.VerifyField(tablePos, 36 /*GunCapable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 38 /*GunRdsType*/, false)
      && verifier.VerifyField(tablePos, 40 /*GunRdsMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*GunRdsMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*AirToAirStatus*/, 1 /*AircraftStatus_Abridged_airToAirStatus_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 46 /*AirToGroundStatus*/, 1 /*AircraftStatus_Abridged_airToGroundStatus_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*Inventory*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*InventoryMin*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*InventoryMax*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*UnavailableSys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*AdditionalSys*/, false)
      && verifier.VerifyString(tablePos, 58 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 60 /*MxRemark*/, false)
      && verifier.VerifyString(tablePos, 62 /*MaintStatus*/, false)
      && verifier.VerifyString(tablePos, 64 /*MaintStatusDriver*/, false)
      && verifier.VerifyString(tablePos, 66 /*MaintPriority*/, false)
      && verifier.VerifyString(tablePos, 68 /*AlphaStatusCode*/, false)
      && verifier.VerifyString(tablePos, 70 /*MaintStatusUpdate*/, false)
      && verifier.VerifyString(tablePos, 72 /*LastInspectionDate*/, false)
      && verifier.VerifyString(tablePos, 74 /*MaintPoc*/, false)
      && verifier.VerifyString(tablePos, 76 /*GroundStatus*/, false)
      && verifier.VerifyString(tablePos, 78 /*ContaminationStatus*/, false)
      && verifier.VerifyString(tablePos, 80 /*FuelStatus*/, false)
      && verifier.VerifyString(tablePos, 82 /*LastUpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 84 /*TroubleshootEtic*/, false)
      && verifier.VerifyString(tablePos, 86 /*Etic*/, false)
      && verifier.VerifyString(tablePos, 88 /*ParkLocation*/, false)
      && verifier.VerifyString(tablePos, 90 /*ParkLocationSystem*/, false)
      && verifier.VerifyString(tablePos, 92 /*IdPOI*/, false)
      && verifier.VerifyString(tablePos, 94 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 96 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 98 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 100 /*Source*/, false)
      && verifier.VerifyString(tablePos, 102 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 104 /*DataMode*/, 1 /*AircraftStatus_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 106 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
