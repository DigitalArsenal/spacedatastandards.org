// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
public struct StarCatalog_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static StarCatalog_Ingest GetRootAsStarCatalog_Ingest(ByteBuffer _bb) { return GetRootAsStarCatalog_Ingest(_bb, new StarCatalog_Ingest()); }
  public static StarCatalog_Ingest GetRootAsStarCatalog_Ingest(ByteBuffer _bb, StarCatalog_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool StarCatalog_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAR"); }
  public static bool VerifyStarCatalog_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("STAR", false, StarCatalog_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StarCatalog_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: STAR-CAT-DATASET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The ID of this object in the specific catalog associated with this record.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  public long CsId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  public int GncCatId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The ID of this object in the Gaia DR3 Catalog.
  /// Example: /// Example: 89012345678901
  /// Constraints: No constraints specified.
  public long Gaiadr3CatId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// The ID of this object in the Hipparcos Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  public int HipCatId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The version of the catalog associated with this object.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public string CatVersion { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCatVersionBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCatVersionBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCatVersionArray() { return __p.__vector_as_array<byte>(16); }
  /// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
  /// Example: /// Example: 14.43
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 509.466
  /// Constraints: No constraints specified.
  public double RaUnc { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
  /// Example: /// Example: 21.8
  /// Constraints: No constraints specified.
  public double Dec { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 40.996
  /// Constraints: No constraints specified.
  public double DecUnc { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool PosUncFlag { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Absolute stellar parallax of the source, in milliarcseconds.
  /// Example: /// Example: -6.8
  /// Constraints: No constraints specified.
  public double Parallax { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of the stellar parallax, in milliarcseconds.
  /// Example: /// Example: 82.35
  /// Constraints: No constraints specified.
  public double ParallaxUnc { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: 1000.45
  /// Constraints: No constraints specified.
  public double Pmra { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
  /// Example: /// Example: 5.6
  /// Constraints: No constraints specified.
  public double PmraUnc { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: -970.1003
  /// Constraints: No constraints specified.
  public double Pmdec { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of proper motion in declination, in milliarcseconds/year.
  /// Example: /// Example: 1.22
  /// Constraints: No constraints specified.
  public double PmdecUnc { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool PmUncFlag { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
  /// Example: /// Example: GAIADR3
  /// Constraints: Minimum length = 1, Maximum length = 16
  public StarCatalog_Ingest_astrometryOrigin_Enum AstrometryOrigin { get { int o = __p.__offset(42); return o != 0 ? (StarCatalog_Ingest_astrometryOrigin_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : StarCatalog_Ingest_astrometryOrigin_Enum.GAIADR3; } }
  /// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
  /// Example: /// Example: 2016
  /// Constraints: No constraints specified.
  public double StarEpoch { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
  /// Example: /// Example: 0.0046
  /// Constraints: No constraints specified.
  public double Gmag { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.00292
  /// Constraints: No constraints specified.
  public double GmagUnc { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
  /// Example: /// Example: 0.04559
  /// Constraints: No constraints specified.
  public double Bpmag { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.2227
  /// Constraints: No constraints specified.
  public double BpmagUnc { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical Rp-band magnitude in the Vega scale.
  /// Example: /// Example: 8.0047
  /// Constraints: No constraints specified.
  public double Rpmag { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 1.233
  /// Constraints: No constraints specified.
  public double RpmagUnc { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
  /// Example: /// Example: 9.515
  /// Constraints: No constraints specified.
  public double Jmag { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 7.559
  /// Constraints: No constraints specified.
  public double JmagUnc { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
  /// Example: /// Example: 13.545
  /// Constraints: No constraints specified.
  public double Kmag { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.052
  /// Constraints: No constraints specified.
  public double KmagUnc { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
  /// Example: /// Example: 12.126
  /// Constraints: No constraints specified.
  public double Hmag { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 5.722
  /// Constraints: No constraints specified.
  public double HmagUnc { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating that the source exhibits variable magnitude.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool VarFlag { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this is a multiple object source.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool MultFlag { get { int o = __p.__offset(72); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The catalog ID of the nearest neighbor to this source.
  /// Example: /// Example: 2456
  /// Constraints: No constraints specified.
  public int NeighborId { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool NeighborFlag { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Distance between source and nearest neighbor, in arcseconds.
  /// Example: /// Example: 201.406
  /// Constraints: No constraints specified.
  public double NeighborDistance { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool ShiftFlag { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Photocentric shift caused by neighbors, in arcseconds.
  /// Example: /// Example: 4.548
  /// Constraints: No constraints specified.
  public double Shift { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(84); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(86); }
  /// Time the row was updated in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(88); }
  /// Application user who updated the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(90); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(92); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(94); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string OrigNetwork { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(96); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public StarCatalog_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(98); return o != 0 ? (StarCatalog_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : StarCatalog_Ingest_dataMode_Enum.REAL; } }

  public static Offset<StarCatalog_Ingest> CreateStarCatalog_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      long csId = 0,
      int gncCatId = 0,
      long gaiadr3CatId = 0,
      int hipCatId = 0,
      StringOffset catVersionOffset = default(StringOffset),
      double ra = 0.0,
      double raUnc = 0.0,
      double dec = 0.0,
      double decUnc = 0.0,
      bool posUncFlag = false,
      double parallax = 0.0,
      double parallaxUnc = 0.0,
      double pmra = 0.0,
      double pmraUnc = 0.0,
      double pmdec = 0.0,
      double pmdecUnc = 0.0,
      bool pmUncFlag = false,
      StarCatalog_Ingest_astrometryOrigin_Enum astrometryOrigin = StarCatalog_Ingest_astrometryOrigin_Enum.GAIADR3,
      double starEpoch = 0.0,
      double gmag = 0.0,
      double gmagUnc = 0.0,
      double bpmag = 0.0,
      double bpmagUnc = 0.0,
      double rpmag = 0.0,
      double rpmagUnc = 0.0,
      double jmag = 0.0,
      double jmagUnc = 0.0,
      double kmag = 0.0,
      double kmagUnc = 0.0,
      double hmag = 0.0,
      double hmagUnc = 0.0,
      bool varFlag = false,
      bool multFlag = false,
      int neighborId = 0,
      bool neighborFlag = false,
      double neighborDistance = 0.0,
      bool shiftFlag = false,
      double shift = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StarCatalog_Ingest_dataMode_Enum dataMode = StarCatalog_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(48);
    StarCatalog_Ingest.AddShift(builder, shift);
    StarCatalog_Ingest.AddNeighborDistance(builder, neighborDistance);
    StarCatalog_Ingest.AddHmagUnc(builder, hmagUnc);
    StarCatalog_Ingest.AddHmag(builder, hmag);
    StarCatalog_Ingest.AddKmagUnc(builder, kmagUnc);
    StarCatalog_Ingest.AddKmag(builder, kmag);
    StarCatalog_Ingest.AddJmagUnc(builder, jmagUnc);
    StarCatalog_Ingest.AddJmag(builder, jmag);
    StarCatalog_Ingest.AddRpmagUnc(builder, rpmagUnc);
    StarCatalog_Ingest.AddRpmag(builder, rpmag);
    StarCatalog_Ingest.AddBpmagUnc(builder, bpmagUnc);
    StarCatalog_Ingest.AddBpmag(builder, bpmag);
    StarCatalog_Ingest.AddGmagUnc(builder, gmagUnc);
    StarCatalog_Ingest.AddGmag(builder, gmag);
    StarCatalog_Ingest.AddStarEpoch(builder, starEpoch);
    StarCatalog_Ingest.AddPmdecUnc(builder, pmdecUnc);
    StarCatalog_Ingest.AddPmdec(builder, pmdec);
    StarCatalog_Ingest.AddPmraUnc(builder, pmraUnc);
    StarCatalog_Ingest.AddPmra(builder, pmra);
    StarCatalog_Ingest.AddParallaxUnc(builder, parallaxUnc);
    StarCatalog_Ingest.AddParallax(builder, parallax);
    StarCatalog_Ingest.AddDecUnc(builder, decUnc);
    StarCatalog_Ingest.AddDec(builder, dec);
    StarCatalog_Ingest.AddRaUnc(builder, raUnc);
    StarCatalog_Ingest.AddRa(builder, ra);
    StarCatalog_Ingest.AddGaiadr3CatId(builder, gaiadr3CatId);
    StarCatalog_Ingest.AddCsId(builder, csId);
    StarCatalog_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    StarCatalog_Ingest.AddOrigin(builder, originOffset);
    StarCatalog_Ingest.AddSource(builder, sourceOffset);
    StarCatalog_Ingest.AddUpdatedBy(builder, updatedByOffset);
    StarCatalog_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    StarCatalog_Ingest.AddCreatedBy(builder, createdByOffset);
    StarCatalog_Ingest.AddCreatedAt(builder, createdAtOffset);
    StarCatalog_Ingest.AddNeighborId(builder, neighborId);
    StarCatalog_Ingest.AddCatVersion(builder, catVersionOffset);
    StarCatalog_Ingest.AddHipCatId(builder, hipCatId);
    StarCatalog_Ingest.AddGncCatId(builder, gncCatId);
    StarCatalog_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    StarCatalog_Ingest.AddId(builder, idOffset);
    StarCatalog_Ingest.AddDataMode(builder, dataMode);
    StarCatalog_Ingest.AddShiftFlag(builder, shiftFlag);
    StarCatalog_Ingest.AddNeighborFlag(builder, neighborFlag);
    StarCatalog_Ingest.AddMultFlag(builder, multFlag);
    StarCatalog_Ingest.AddVarFlag(builder, varFlag);
    StarCatalog_Ingest.AddAstrometryOrigin(builder, astrometryOrigin);
    StarCatalog_Ingest.AddPmUncFlag(builder, pmUncFlag);
    StarCatalog_Ingest.AddPosUncFlag(builder, posUncFlag);
    return StarCatalog_Ingest.EndStarCatalog_Ingest(builder);
  }

  public static void StartStarCatalog_Ingest(FlatBufferBuilder builder) { builder.StartTable(48); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddCsId(FlatBufferBuilder builder, long csId) { builder.AddLong(2, csId, 0); }
  public static void AddGncCatId(FlatBufferBuilder builder, int gncCatId) { builder.AddInt(3, gncCatId, 0); }
  public static void AddGaiadr3CatId(FlatBufferBuilder builder, long gaiadr3CatId) { builder.AddLong(4, gaiadr3CatId, 0); }
  public static void AddHipCatId(FlatBufferBuilder builder, int hipCatId) { builder.AddInt(5, hipCatId, 0); }
  public static void AddCatVersion(FlatBufferBuilder builder, StringOffset catVersionOffset) { builder.AddOffset(6, catVersionOffset.Value, 0); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(7, ra, 0.0); }
  public static void AddRaUnc(FlatBufferBuilder builder, double raUnc) { builder.AddDouble(8, raUnc, 0.0); }
  public static void AddDec(FlatBufferBuilder builder, double dec) { builder.AddDouble(9, dec, 0.0); }
  public static void AddDecUnc(FlatBufferBuilder builder, double decUnc) { builder.AddDouble(10, decUnc, 0.0); }
  public static void AddPosUncFlag(FlatBufferBuilder builder, bool posUncFlag) { builder.AddBool(11, posUncFlag, false); }
  public static void AddParallax(FlatBufferBuilder builder, double parallax) { builder.AddDouble(12, parallax, 0.0); }
  public static void AddParallaxUnc(FlatBufferBuilder builder, double parallaxUnc) { builder.AddDouble(13, parallaxUnc, 0.0); }
  public static void AddPmra(FlatBufferBuilder builder, double pmra) { builder.AddDouble(14, pmra, 0.0); }
  public static void AddPmraUnc(FlatBufferBuilder builder, double pmraUnc) { builder.AddDouble(15, pmraUnc, 0.0); }
  public static void AddPmdec(FlatBufferBuilder builder, double pmdec) { builder.AddDouble(16, pmdec, 0.0); }
  public static void AddPmdecUnc(FlatBufferBuilder builder, double pmdecUnc) { builder.AddDouble(17, pmdecUnc, 0.0); }
  public static void AddPmUncFlag(FlatBufferBuilder builder, bool pmUncFlag) { builder.AddBool(18, pmUncFlag, false); }
  public static void AddAstrometryOrigin(FlatBufferBuilder builder, StarCatalog_Ingest_astrometryOrigin_Enum astrometryOrigin) { builder.AddSbyte(19, (sbyte)astrometryOrigin, 0); }
  public static void AddStarEpoch(FlatBufferBuilder builder, double starEpoch) { builder.AddDouble(20, starEpoch, 0.0); }
  public static void AddGmag(FlatBufferBuilder builder, double gmag) { builder.AddDouble(21, gmag, 0.0); }
  public static void AddGmagUnc(FlatBufferBuilder builder, double gmagUnc) { builder.AddDouble(22, gmagUnc, 0.0); }
  public static void AddBpmag(FlatBufferBuilder builder, double bpmag) { builder.AddDouble(23, bpmag, 0.0); }
  public static void AddBpmagUnc(FlatBufferBuilder builder, double bpmagUnc) { builder.AddDouble(24, bpmagUnc, 0.0); }
  public static void AddRpmag(FlatBufferBuilder builder, double rpmag) { builder.AddDouble(25, rpmag, 0.0); }
  public static void AddRpmagUnc(FlatBufferBuilder builder, double rpmagUnc) { builder.AddDouble(26, rpmagUnc, 0.0); }
  public static void AddJmag(FlatBufferBuilder builder, double jmag) { builder.AddDouble(27, jmag, 0.0); }
  public static void AddJmagUnc(FlatBufferBuilder builder, double jmagUnc) { builder.AddDouble(28, jmagUnc, 0.0); }
  public static void AddKmag(FlatBufferBuilder builder, double kmag) { builder.AddDouble(29, kmag, 0.0); }
  public static void AddKmagUnc(FlatBufferBuilder builder, double kmagUnc) { builder.AddDouble(30, kmagUnc, 0.0); }
  public static void AddHmag(FlatBufferBuilder builder, double hmag) { builder.AddDouble(31, hmag, 0.0); }
  public static void AddHmagUnc(FlatBufferBuilder builder, double hmagUnc) { builder.AddDouble(32, hmagUnc, 0.0); }
  public static void AddVarFlag(FlatBufferBuilder builder, bool varFlag) { builder.AddBool(33, varFlag, false); }
  public static void AddMultFlag(FlatBufferBuilder builder, bool multFlag) { builder.AddBool(34, multFlag, false); }
  public static void AddNeighborId(FlatBufferBuilder builder, int neighborId) { builder.AddInt(35, neighborId, 0); }
  public static void AddNeighborFlag(FlatBufferBuilder builder, bool neighborFlag) { builder.AddBool(36, neighborFlag, false); }
  public static void AddNeighborDistance(FlatBufferBuilder builder, double neighborDistance) { builder.AddDouble(37, neighborDistance, 0.0); }
  public static void AddShiftFlag(FlatBufferBuilder builder, bool shiftFlag) { builder.AddBool(38, shiftFlag, false); }
  public static void AddShift(FlatBufferBuilder builder, double shift) { builder.AddDouble(39, shift, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(40, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(41, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(42, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(43, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(44, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(45, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(46, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, StarCatalog_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(47, (sbyte)dataMode, 0); }
  public static Offset<StarCatalog_Ingest> EndStarCatalog_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<StarCatalog_Ingest>(o);
  }
  public static void FinishStarCatalog_IngestBuffer(FlatBufferBuilder builder, Offset<StarCatalog_Ingest> offset) { builder.Finish(offset.Value, "STAR"); }
  public static void FinishSizePrefixedStarCatalog_IngestBuffer(FlatBufferBuilder builder, Offset<StarCatalog_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "STAR"); }
  public StarCatalog_IngestT UnPack() {
    var _o = new StarCatalog_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StarCatalog_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.CsId = this.CsId;
    _o.GncCatId = this.GncCatId;
    _o.Gaiadr3CatId = this.Gaiadr3CatId;
    _o.HipCatId = this.HipCatId;
    _o.CatVersion = this.CatVersion;
    _o.Ra = this.Ra;
    _o.RaUnc = this.RaUnc;
    _o.Dec = this.Dec;
    _o.DecUnc = this.DecUnc;
    _o.PosUncFlag = this.PosUncFlag;
    _o.Parallax = this.Parallax;
    _o.ParallaxUnc = this.ParallaxUnc;
    _o.Pmra = this.Pmra;
    _o.PmraUnc = this.PmraUnc;
    _o.Pmdec = this.Pmdec;
    _o.PmdecUnc = this.PmdecUnc;
    _o.PmUncFlag = this.PmUncFlag;
    _o.AstrometryOrigin = this.AstrometryOrigin;
    _o.StarEpoch = this.StarEpoch;
    _o.Gmag = this.Gmag;
    _o.GmagUnc = this.GmagUnc;
    _o.Bpmag = this.Bpmag;
    _o.BpmagUnc = this.BpmagUnc;
    _o.Rpmag = this.Rpmag;
    _o.RpmagUnc = this.RpmagUnc;
    _o.Jmag = this.Jmag;
    _o.JmagUnc = this.JmagUnc;
    _o.Kmag = this.Kmag;
    _o.KmagUnc = this.KmagUnc;
    _o.Hmag = this.Hmag;
    _o.HmagUnc = this.HmagUnc;
    _o.VarFlag = this.VarFlag;
    _o.MultFlag = this.MultFlag;
    _o.NeighborId = this.NeighborId;
    _o.NeighborFlag = this.NeighborFlag;
    _o.NeighborDistance = this.NeighborDistance;
    _o.ShiftFlag = this.ShiftFlag;
    _o.Shift = this.Shift;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<StarCatalog_Ingest> Pack(FlatBufferBuilder builder, StarCatalog_IngestT _o) {
    if (_o == null) return default(Offset<StarCatalog_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _catVersion = _o.CatVersion == null ? default(StringOffset) : builder.CreateString(_o.CatVersion);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateStarCatalog_Ingest(
      builder,
      _id,
      _classificationMarking,
      _o.CsId,
      _o.GncCatId,
      _o.Gaiadr3CatId,
      _o.HipCatId,
      _catVersion,
      _o.Ra,
      _o.RaUnc,
      _o.Dec,
      _o.DecUnc,
      _o.PosUncFlag,
      _o.Parallax,
      _o.ParallaxUnc,
      _o.Pmra,
      _o.PmraUnc,
      _o.Pmdec,
      _o.PmdecUnc,
      _o.PmUncFlag,
      _o.AstrometryOrigin,
      _o.StarEpoch,
      _o.Gmag,
      _o.GmagUnc,
      _o.Bpmag,
      _o.BpmagUnc,
      _o.Rpmag,
      _o.RpmagUnc,
      _o.Jmag,
      _o.JmagUnc,
      _o.Kmag,
      _o.KmagUnc,
      _o.Hmag,
      _o.HmagUnc,
      _o.VarFlag,
      _o.MultFlag,
      _o.NeighborId,
      _o.NeighborFlag,
      _o.NeighborDistance,
      _o.ShiftFlag,
      _o.Shift,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class StarCatalog_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public long CsId { get; set; }
  public int GncCatId { get; set; }
  public long Gaiadr3CatId { get; set; }
  public int HipCatId { get; set; }
  public string CatVersion { get; set; }
  public double Ra { get; set; }
  public double RaUnc { get; set; }
  public double Dec { get; set; }
  public double DecUnc { get; set; }
  public bool PosUncFlag { get; set; }
  public double Parallax { get; set; }
  public double ParallaxUnc { get; set; }
  public double Pmra { get; set; }
  public double PmraUnc { get; set; }
  public double Pmdec { get; set; }
  public double PmdecUnc { get; set; }
  public bool PmUncFlag { get; set; }
  public StarCatalog_Ingest_astrometryOrigin_Enum AstrometryOrigin { get; set; }
  public double StarEpoch { get; set; }
  public double Gmag { get; set; }
  public double GmagUnc { get; set; }
  public double Bpmag { get; set; }
  public double BpmagUnc { get; set; }
  public double Rpmag { get; set; }
  public double RpmagUnc { get; set; }
  public double Jmag { get; set; }
  public double JmagUnc { get; set; }
  public double Kmag { get; set; }
  public double KmagUnc { get; set; }
  public double Hmag { get; set; }
  public double HmagUnc { get; set; }
  public bool VarFlag { get; set; }
  public bool MultFlag { get; set; }
  public int NeighborId { get; set; }
  public bool NeighborFlag { get; set; }
  public double NeighborDistance { get; set; }
  public bool ShiftFlag { get; set; }
  public double Shift { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public StarCatalog_Ingest_dataMode_Enum DataMode { get; set; }

  public StarCatalog_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.CsId = 0;
    this.GncCatId = 0;
    this.Gaiadr3CatId = 0;
    this.HipCatId = 0;
    this.CatVersion = null;
    this.Ra = 0.0;
    this.RaUnc = 0.0;
    this.Dec = 0.0;
    this.DecUnc = 0.0;
    this.PosUncFlag = false;
    this.Parallax = 0.0;
    this.ParallaxUnc = 0.0;
    this.Pmra = 0.0;
    this.PmraUnc = 0.0;
    this.Pmdec = 0.0;
    this.PmdecUnc = 0.0;
    this.PmUncFlag = false;
    this.AstrometryOrigin = StarCatalog_Ingest_astrometryOrigin_Enum.GAIADR3;
    this.StarEpoch = 0.0;
    this.Gmag = 0.0;
    this.GmagUnc = 0.0;
    this.Bpmag = 0.0;
    this.BpmagUnc = 0.0;
    this.Rpmag = 0.0;
    this.RpmagUnc = 0.0;
    this.Jmag = 0.0;
    this.JmagUnc = 0.0;
    this.Kmag = 0.0;
    this.KmagUnc = 0.0;
    this.Hmag = 0.0;
    this.HmagUnc = 0.0;
    this.VarFlag = false;
    this.MultFlag = false;
    this.NeighborId = 0;
    this.NeighborFlag = false;
    this.NeighborDistance = 0.0;
    this.ShiftFlag = false;
    this.Shift = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = StarCatalog_Ingest_dataMode_Enum.REAL;
  }
  public static StarCatalog_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return StarCatalog_Ingest.GetRootAsStarCatalog_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    StarCatalog_Ingest.FinishStarCatalog_IngestBuffer(fbb, StarCatalog_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class StarCatalog_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 8 /*CsId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*GncCatId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Gaiadr3CatId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*HipCatId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*CatVersion*/, false)
      && verifier.VerifyField(tablePos, 18 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*RaUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Dec*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*DecUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*PosUncFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*Parallax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*ParallaxUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Pmra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*PmraUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Pmdec*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*PmdecUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*PmUncFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 42 /*AstrometryOrigin*/, 1 /*StarCatalog_Ingest_astrometryOrigin_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 44 /*StarEpoch*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Gmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*GmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Bpmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*BpmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Rpmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*RpmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*Jmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*JmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Kmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*KmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*Hmag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*HmagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*VarFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*MultFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 74 /*NeighborId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*NeighborFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 78 /*NeighborDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*ShiftFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*Shift*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 84 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 86 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 88 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 90 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 92 /*Source*/, false)
      && verifier.VerifyString(tablePos, 94 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 96 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 98 /*DataMode*/, 1 /*StarCatalog_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
