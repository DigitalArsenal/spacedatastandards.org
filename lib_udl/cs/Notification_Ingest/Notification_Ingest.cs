// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of client generated notification data.  Contains a message type and message body field to store notification information.
public struct Notification_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Notification_Ingest GetRootAsNotification_Ingest(ByteBuffer _bb) { return GetRootAsNotification_Ingest(_bb, new Notification_Ingest()); }
  public static Notification_Ingest GetRootAsNotification_Ingest(ByteBuffer _bb, Notification_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Notification_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "NOTI"); }
  public static bool VerifyNotification_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("NOTI", false, Notification_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Notification_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: NOTIFICATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Source provided message type.
  /// Example: /// Example: msgType
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string MsgType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMsgTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMsgTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.
  /// Example: /// Example: msgBody
  /// Constraints: Minimum length = 1, Maximum length = 1000000
  public string MsgBody { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgBodyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMsgBodyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMsgBodyArray() { return __p.__vector_as_array<byte>(10); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Notification_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(12); return o != 0 ? (Notification_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Notification_Ingest_dataMode_Enum.REAL; } }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(14); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(16); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The date and time the notification was created, auto-generated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(22); }
  /// The user that created the notification.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(24); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<Notification_Ingest> CreateNotification_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset msgTypeOffset = default(StringOffset),
      StringOffset msgBodyOffset = default(StringOffset),
      Notification_Ingest_dataMode_Enum dataMode = Notification_Ingest_dataMode_Enum.REAL,
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(12);
    Notification_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Notification_Ingest.AddCreatedBy(builder, createdByOffset);
    Notification_Ingest.AddCreatedAt(builder, createdAtOffset);
    Notification_Ingest.AddTags(builder, tagsOffset);
    Notification_Ingest.AddOrigin(builder, originOffset);
    Notification_Ingest.AddSource(builder, sourceOffset);
    Notification_Ingest.AddSourceDL(builder, sourceDLOffset);
    Notification_Ingest.AddMsgBody(builder, msgBodyOffset);
    Notification_Ingest.AddMsgType(builder, msgTypeOffset);
    Notification_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Notification_Ingest.AddId(builder, idOffset);
    Notification_Ingest.AddDataMode(builder, dataMode);
    return Notification_Ingest.EndNotification_Ingest(builder);
  }

  public static void StartNotification_Ingest(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, StringOffset msgTypeOffset) { builder.AddOffset(2, msgTypeOffset.Value, 0); }
  public static void AddMsgBody(FlatBufferBuilder builder, StringOffset msgBodyOffset) { builder.AddOffset(3, msgBodyOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Notification_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(4, (sbyte)dataMode, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(5, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(6, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(7, originOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(8, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(9, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(10, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(11, origNetworkOffset.Value, 0); }
  public static Offset<Notification_Ingest> EndNotification_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Notification_Ingest>(o);
  }
  public static void FinishNotification_IngestBuffer(FlatBufferBuilder builder, Offset<Notification_Ingest> offset) { builder.Finish(offset.Value, "NOTI"); }
  public static void FinishSizePrefixedNotification_IngestBuffer(FlatBufferBuilder builder, Offset<Notification_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "NOTI"); }
  public Notification_IngestT UnPack() {
    var _o = new Notification_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Notification_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.MsgType = this.MsgType;
    _o.MsgBody = this.MsgBody;
    _o.DataMode = this.DataMode;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Notification_Ingest> Pack(FlatBufferBuilder builder, Notification_IngestT _o) {
    if (_o == null) return default(Offset<Notification_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _msgType = _o.MsgType == null ? default(StringOffset) : builder.CreateString(_o.MsgType);
    var _msgBody = _o.MsgBody == null ? default(StringOffset) : builder.CreateString(_o.MsgBody);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateNotification_Ingest(
      builder,
      _id,
      _classificationMarking,
      _msgType,
      _msgBody,
      _o.DataMode,
      _sourceDL,
      _source,
      _origin,
      _tags,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class Notification_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string MsgType { get; set; }
  public string MsgBody { get; set; }
  public Notification_Ingest_dataMode_Enum DataMode { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public Notification_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.MsgType = null;
    this.MsgBody = null;
    this.DataMode = Notification_Ingest_dataMode_Enum.REAL;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static Notification_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Notification_Ingest.GetRootAsNotification_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Notification_Ingest.FinishNotification_IngestBuffer(fbb, Notification_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Notification_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*MsgType*/, false)
      && verifier.VerifyString(tablePos, 10 /*MsgBody*/, false)
      && verifier.VerifyField(tablePos, 12 /*DataMode*/, 1 /*Notification_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 14 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 16 /*Source*/, false)
      && verifier.VerifyString(tablePos, 18 /*Origin*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 22 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 26 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
