// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
public struct Stage_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Stage_Full GetRootAsStage_Full(ByteBuffer _bb) { return GetRootAsStage_Full(_bb, new Stage_Full()); }
  public static Stage_Full GetRootAsStage_Full(ByteBuffer _bb, Stage_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Stage_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "STAG"); }
  public static bool VerifyStage_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("STAG", false, Stage_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Stage_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: STAGE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the launch vehicle record for this stage.
  /// Example: /// Example: LAUNCHVEHICLE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdLaunchVehicle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdLaunchVehicleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdLaunchVehicleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdLaunchVehicleArray() { return __p.__vector_as_array<byte>(6); }
  /// Identifier of the Engine record for this stage.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdEngine { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEngineBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdEngineBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdEngineArray() { return __p.__vector_as_array<byte>(8); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(10); }
  /// The stage number of this launch stage.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int StageNumber { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  /// Example: /// Example: Electrostatic Ion
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// ID of the organization that manufactures this launch stage.
  /// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The number of the specified engines on this launch stage.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumEngines { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Stage length in meters.
  /// Example: /// Example: 25.13
  /// Constraints: No constraints specified.
  public double Length { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Stage maximum external diameter in meters.
  /// Example: /// Example: 3.95
  /// Constraints: No constraints specified.
  public double Diameter { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Stage gross mass in kg.
  /// Example: /// Example: 9956.1
  /// Constraints: No constraints specified.
  public double Mass { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Engine vernier or additional engine type.
  /// Example: /// Example: vernier
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Vernier { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVernierBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetVernierBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetVernierArray() { return __p.__vector_as_array<byte>(26); }
  /// Number of vernier or additional engines.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumVernier { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Thrust of the stage main engine at sea level in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  public double MainEngineThrustSeaLevel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Thrust of the stage main engine in a vacuum in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  public double MainEngineThrustVacuum { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total thrust of the stage at sea level in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  public double ThrustSeaLevel { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total thrust of the stage in a vacuum in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  public double ThrustVacuum { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total burn time of the stage engines in seconds.
  /// Example: /// Example: 256.3
  /// Constraints: No constraints specified.
  public double BurnTime { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of burns for the stage engines.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumBurns { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Total burn time of the vernier or additional stage engines in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double VernierBurnTime { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total number of burns of the vernier or additional stage engines.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int VernierNumBurns { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Total thrust of one of the vernier or additional engines at sea level in kN.
  /// Example: /// Example: 4.1
  /// Constraints: No constraints specified.
  public double VernierThrustSeaLevel { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total thrust of one of the vernier or additional engines in a vacuum in kN.
  /// Example: /// Example: 3.2
  /// Constraints: No constraints specified.
  public double VernierThrustVacuum { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of launch stage elements used in this stage.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int NumStageElements { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Boolean indicating if this launch stage is reusable.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Reusable { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating if this launch stage can be restarted.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Restartable { get { int o = __p.__offset(54); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Control thruster 1 type.
  /// Example: /// Example: controlThruster1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ControlThruster1 { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetControlThruster1Bytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetControlThruster1Bytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetControlThruster1Array() { return __p.__vector_as_array<byte>(56); }
  /// Number of type control thruster 1.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumControlThruster1 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Control thruster 2 type.
  /// Example: /// Example: controlThruster2
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ControlThruster2 { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetControlThruster2Bytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetControlThruster2Bytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetControlThruster2Array() { return __p.__vector_as_array<byte>(60); }
  /// Number of type control thruster 2.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumControlThruster2 { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of URLs of photos of the stage.
  /// Example: /// Example: ['photoURL']
  /// Constraints: No constraints specified.
  public string PhotoURLs(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PhotoURLsLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Description/notes of the stage.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Notes { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(66); }
  /// Description/notes of the stage avionics.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string AvionicsNotes { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAvionicsNotesBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetAvionicsNotesBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetAvionicsNotesArray() { return __p.__vector_as_array<byte>(68); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(76); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(78); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(80); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(82); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(84); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Stage_Full_dataMode_Enum DataMode { get { int o = __p.__offset(86); return o != 0 ? (Stage_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Stage_Full_dataMode_Enum.REAL; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Engine { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEngineBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetEngineBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetEngineArray() { return __p.__vector_as_array<byte>(88); }

  public static Offset<Stage_Full> CreateStage_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idLaunchVehicleOffset = default(StringOffset),
      StringOffset idEngineOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int stageNumber = 0,
      StringOffset typeOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      int numEngines = 0,
      double length = 0.0,
      double diameter = 0.0,
      double mass = 0.0,
      StringOffset vernierOffset = default(StringOffset),
      int numVernier = 0,
      double mainEngineThrustSeaLevel = 0.0,
      double mainEngineThrustVacuum = 0.0,
      double thrustSeaLevel = 0.0,
      double thrustVacuum = 0.0,
      double burnTime = 0.0,
      int numBurns = 0,
      double vernierBurnTime = 0.0,
      int vernierNumBurns = 0,
      double vernierThrustSeaLevel = 0.0,
      double vernierThrustVacuum = 0.0,
      int numStageElements = 0,
      bool reusable = false,
      bool restartable = false,
      StringOffset controlThruster1Offset = default(StringOffset),
      int numControlThruster1 = 0,
      StringOffset controlThruster2Offset = default(StringOffset),
      int numControlThruster2 = 0,
      VectorOffset photoURLsOffset = default(VectorOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset avionicsNotesOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Stage_Full_dataMode_Enum dataMode = Stage_Full_dataMode_Enum.REAL,
      StringOffset engineOffset = default(StringOffset)) {
    builder.StartTable(43);
    Stage_Full.AddVernierThrustVacuum(builder, vernierThrustVacuum);
    Stage_Full.AddVernierThrustSeaLevel(builder, vernierThrustSeaLevel);
    Stage_Full.AddVernierBurnTime(builder, vernierBurnTime);
    Stage_Full.AddBurnTime(builder, burnTime);
    Stage_Full.AddThrustVacuum(builder, thrustVacuum);
    Stage_Full.AddThrustSeaLevel(builder, thrustSeaLevel);
    Stage_Full.AddMainEngineThrustVacuum(builder, mainEngineThrustVacuum);
    Stage_Full.AddMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel);
    Stage_Full.AddMass(builder, mass);
    Stage_Full.AddDiameter(builder, diameter);
    Stage_Full.AddLength(builder, length);
    Stage_Full.AddEngine(builder, engineOffset);
    Stage_Full.AddOrigNetwork(builder, origNetworkOffset);
    Stage_Full.AddOrigin(builder, originOffset);
    Stage_Full.AddSource(builder, sourceOffset);
    Stage_Full.AddUpdatedBy(builder, updatedByOffset);
    Stage_Full.AddUpdatedAt(builder, updatedAtOffset);
    Stage_Full.AddCreatedBy(builder, createdByOffset);
    Stage_Full.AddCreatedAt(builder, createdAtOffset);
    Stage_Full.AddTags(builder, tagsOffset);
    Stage_Full.AddAvionicsNotes(builder, avionicsNotesOffset);
    Stage_Full.AddNotes(builder, notesOffset);
    Stage_Full.AddPhotoURLs(builder, photoURLsOffset);
    Stage_Full.AddNumControlThruster2(builder, numControlThruster2);
    Stage_Full.AddControlThruster2(builder, controlThruster2Offset);
    Stage_Full.AddNumControlThruster1(builder, numControlThruster1);
    Stage_Full.AddControlThruster1(builder, controlThruster1Offset);
    Stage_Full.AddNumStageElements(builder, numStageElements);
    Stage_Full.AddVernierNumBurns(builder, vernierNumBurns);
    Stage_Full.AddNumBurns(builder, numBurns);
    Stage_Full.AddNumVernier(builder, numVernier);
    Stage_Full.AddVernier(builder, vernierOffset);
    Stage_Full.AddNumEngines(builder, numEngines);
    Stage_Full.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    Stage_Full.AddType(builder, typeOffset);
    Stage_Full.AddStageNumber(builder, stageNumber);
    Stage_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Stage_Full.AddIdEngine(builder, idEngineOffset);
    Stage_Full.AddIdLaunchVehicle(builder, idLaunchVehicleOffset);
    Stage_Full.AddId(builder, idOffset);
    Stage_Full.AddDataMode(builder, dataMode);
    Stage_Full.AddRestartable(builder, restartable);
    Stage_Full.AddReusable(builder, reusable);
    return Stage_Full.EndStage_Full(builder);
  }

  public static void StartStage_Full(FlatBufferBuilder builder) { builder.StartTable(43); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdLaunchVehicle(FlatBufferBuilder builder, StringOffset idLaunchVehicleOffset) { builder.AddOffset(1, idLaunchVehicleOffset.Value, 0); }
  public static void AddIdEngine(FlatBufferBuilder builder, StringOffset idEngineOffset) { builder.AddOffset(2, idEngineOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(3, classificationMarkingOffset.Value, 0); }
  public static void AddStageNumber(FlatBufferBuilder builder, int stageNumber) { builder.AddInt(4, stageNumber, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(6, manufacturerOrgIdOffset.Value, 0); }
  public static void AddNumEngines(FlatBufferBuilder builder, int numEngines) { builder.AddInt(7, numEngines, 0); }
  public static void AddLength(FlatBufferBuilder builder, double length) { builder.AddDouble(8, length, 0.0); }
  public static void AddDiameter(FlatBufferBuilder builder, double diameter) { builder.AddDouble(9, diameter, 0.0); }
  public static void AddMass(FlatBufferBuilder builder, double mass) { builder.AddDouble(10, mass, 0.0); }
  public static void AddVernier(FlatBufferBuilder builder, StringOffset vernierOffset) { builder.AddOffset(11, vernierOffset.Value, 0); }
  public static void AddNumVernier(FlatBufferBuilder builder, int numVernier) { builder.AddInt(12, numVernier, 0); }
  public static void AddMainEngineThrustSeaLevel(FlatBufferBuilder builder, double mainEngineThrustSeaLevel) { builder.AddDouble(13, mainEngineThrustSeaLevel, 0.0); }
  public static void AddMainEngineThrustVacuum(FlatBufferBuilder builder, double mainEngineThrustVacuum) { builder.AddDouble(14, mainEngineThrustVacuum, 0.0); }
  public static void AddThrustSeaLevel(FlatBufferBuilder builder, double thrustSeaLevel) { builder.AddDouble(15, thrustSeaLevel, 0.0); }
  public static void AddThrustVacuum(FlatBufferBuilder builder, double thrustVacuum) { builder.AddDouble(16, thrustVacuum, 0.0); }
  public static void AddBurnTime(FlatBufferBuilder builder, double burnTime) { builder.AddDouble(17, burnTime, 0.0); }
  public static void AddNumBurns(FlatBufferBuilder builder, int numBurns) { builder.AddInt(18, numBurns, 0); }
  public static void AddVernierBurnTime(FlatBufferBuilder builder, double vernierBurnTime) { builder.AddDouble(19, vernierBurnTime, 0.0); }
  public static void AddVernierNumBurns(FlatBufferBuilder builder, int vernierNumBurns) { builder.AddInt(20, vernierNumBurns, 0); }
  public static void AddVernierThrustSeaLevel(FlatBufferBuilder builder, double vernierThrustSeaLevel) { builder.AddDouble(21, vernierThrustSeaLevel, 0.0); }
  public static void AddVernierThrustVacuum(FlatBufferBuilder builder, double vernierThrustVacuum) { builder.AddDouble(22, vernierThrustVacuum, 0.0); }
  public static void AddNumStageElements(FlatBufferBuilder builder, int numStageElements) { builder.AddInt(23, numStageElements, 0); }
  public static void AddReusable(FlatBufferBuilder builder, bool reusable) { builder.AddBool(24, reusable, false); }
  public static void AddRestartable(FlatBufferBuilder builder, bool restartable) { builder.AddBool(25, restartable, false); }
  public static void AddControlThruster1(FlatBufferBuilder builder, StringOffset controlThruster1Offset) { builder.AddOffset(26, controlThruster1Offset.Value, 0); }
  public static void AddNumControlThruster1(FlatBufferBuilder builder, int numControlThruster1) { builder.AddInt(27, numControlThruster1, 0); }
  public static void AddControlThruster2(FlatBufferBuilder builder, StringOffset controlThruster2Offset) { builder.AddOffset(28, controlThruster2Offset.Value, 0); }
  public static void AddNumControlThruster2(FlatBufferBuilder builder, int numControlThruster2) { builder.AddInt(29, numControlThruster2, 0); }
  public static void AddPhotoURLs(FlatBufferBuilder builder, VectorOffset photoURLsOffset) { builder.AddOffset(30, photoURLsOffset.Value, 0); }
  public static VectorOffset CreatePhotoURLsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePhotoURLsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhotoURLsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePhotoURLsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPhotoURLsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(31, notesOffset.Value, 0); }
  public static void AddAvionicsNotes(FlatBufferBuilder builder, StringOffset avionicsNotesOffset) { builder.AddOffset(32, avionicsNotesOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(33, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(36, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(37, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(38, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(39, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(40, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Stage_Full_dataMode_Enum dataMode) { builder.AddSbyte(41, (sbyte)dataMode, 0); }
  public static void AddEngine(FlatBufferBuilder builder, StringOffset engineOffset) { builder.AddOffset(42, engineOffset.Value, 0); }
  public static Offset<Stage_Full> EndStage_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Stage_Full>(o);
  }
  public static void FinishStage_FullBuffer(FlatBufferBuilder builder, Offset<Stage_Full> offset) { builder.Finish(offset.Value, "STAG"); }
  public static void FinishSizePrefixedStage_FullBuffer(FlatBufferBuilder builder, Offset<Stage_Full> offset) { builder.FinishSizePrefixed(offset.Value, "STAG"); }
  public Stage_FullT UnPack() {
    var _o = new Stage_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Stage_FullT _o) {
    _o.Id = this.Id;
    _o.IdLaunchVehicle = this.IdLaunchVehicle;
    _o.IdEngine = this.IdEngine;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.StageNumber = this.StageNumber;
    _o.Type = this.Type;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.NumEngines = this.NumEngines;
    _o.Length = this.Length;
    _o.Diameter = this.Diameter;
    _o.Mass = this.Mass;
    _o.Vernier = this.Vernier;
    _o.NumVernier = this.NumVernier;
    _o.MainEngineThrustSeaLevel = this.MainEngineThrustSeaLevel;
    _o.MainEngineThrustVacuum = this.MainEngineThrustVacuum;
    _o.ThrustSeaLevel = this.ThrustSeaLevel;
    _o.ThrustVacuum = this.ThrustVacuum;
    _o.BurnTime = this.BurnTime;
    _o.NumBurns = this.NumBurns;
    _o.VernierBurnTime = this.VernierBurnTime;
    _o.VernierNumBurns = this.VernierNumBurns;
    _o.VernierThrustSeaLevel = this.VernierThrustSeaLevel;
    _o.VernierThrustVacuum = this.VernierThrustVacuum;
    _o.NumStageElements = this.NumStageElements;
    _o.Reusable = this.Reusable;
    _o.Restartable = this.Restartable;
    _o.ControlThruster1 = this.ControlThruster1;
    _o.NumControlThruster1 = this.NumControlThruster1;
    _o.ControlThruster2 = this.ControlThruster2;
    _o.NumControlThruster2 = this.NumControlThruster2;
    _o.PhotoURLs = new List<string>();
    for (var _j = 0; _j < this.PhotoURLsLength; ++_j) {_o.PhotoURLs.Add(this.PhotoURLs(_j));}
    _o.Notes = this.Notes;
    _o.AvionicsNotes = this.AvionicsNotes;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.Engine = this.Engine;
  }
  public static Offset<Stage_Full> Pack(FlatBufferBuilder builder, Stage_FullT _o) {
    if (_o == null) return default(Offset<Stage_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idLaunchVehicle = _o.IdLaunchVehicle == null ? default(StringOffset) : builder.CreateString(_o.IdLaunchVehicle);
    var _idEngine = _o.IdEngine == null ? default(StringOffset) : builder.CreateString(_o.IdEngine);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _vernier = _o.Vernier == null ? default(StringOffset) : builder.CreateString(_o.Vernier);
    var _controlThruster1 = _o.ControlThruster1 == null ? default(StringOffset) : builder.CreateString(_o.ControlThruster1);
    var _controlThruster2 = _o.ControlThruster2 == null ? default(StringOffset) : builder.CreateString(_o.ControlThruster2);
    var _photoURLs = default(VectorOffset);
    if (_o.PhotoURLs != null) {
      var __photoURLs = new StringOffset[_o.PhotoURLs.Count];
      for (var _j = 0; _j < __photoURLs.Length; ++_j) { __photoURLs[_j] = builder.CreateString(_o.PhotoURLs[_j]); }
      _photoURLs = CreatePhotoURLsVector(builder, __photoURLs);
    }
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _avionicsNotes = _o.AvionicsNotes == null ? default(StringOffset) : builder.CreateString(_o.AvionicsNotes);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _engine = _o.Engine == null ? default(StringOffset) : builder.CreateString(_o.Engine);
    return CreateStage_Full(
      builder,
      _id,
      _idLaunchVehicle,
      _idEngine,
      _classificationMarking,
      _o.StageNumber,
      _type,
      _manufacturerOrgId,
      _o.NumEngines,
      _o.Length,
      _o.Diameter,
      _o.Mass,
      _vernier,
      _o.NumVernier,
      _o.MainEngineThrustSeaLevel,
      _o.MainEngineThrustVacuum,
      _o.ThrustSeaLevel,
      _o.ThrustVacuum,
      _o.BurnTime,
      _o.NumBurns,
      _o.VernierBurnTime,
      _o.VernierNumBurns,
      _o.VernierThrustSeaLevel,
      _o.VernierThrustVacuum,
      _o.NumStageElements,
      _o.Reusable,
      _o.Restartable,
      _controlThruster1,
      _o.NumControlThruster1,
      _controlThruster2,
      _o.NumControlThruster2,
      _photoURLs,
      _notes,
      _avionicsNotes,
      _tags,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _engine);
  }
}

public class Stage_FullT
{
  public string Id { get; set; }
  public string IdLaunchVehicle { get; set; }
  public string IdEngine { get; set; }
  public string ClassificationMarking { get; set; }
  public int StageNumber { get; set; }
  public string Type { get; set; }
  public string ManufacturerOrgId { get; set; }
  public int NumEngines { get; set; }
  public double Length { get; set; }
  public double Diameter { get; set; }
  public double Mass { get; set; }
  public string Vernier { get; set; }
  public int NumVernier { get; set; }
  public double MainEngineThrustSeaLevel { get; set; }
  public double MainEngineThrustVacuum { get; set; }
  public double ThrustSeaLevel { get; set; }
  public double ThrustVacuum { get; set; }
  public double BurnTime { get; set; }
  public int NumBurns { get; set; }
  public double VernierBurnTime { get; set; }
  public int VernierNumBurns { get; set; }
  public double VernierThrustSeaLevel { get; set; }
  public double VernierThrustVacuum { get; set; }
  public int NumStageElements { get; set; }
  public bool Reusable { get; set; }
  public bool Restartable { get; set; }
  public string ControlThruster1 { get; set; }
  public int NumControlThruster1 { get; set; }
  public string ControlThruster2 { get; set; }
  public int NumControlThruster2 { get; set; }
  public List<string> PhotoURLs { get; set; }
  public string Notes { get; set; }
  public string AvionicsNotes { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Stage_Full_dataMode_Enum DataMode { get; set; }
  public string Engine { get; set; }

  public Stage_FullT() {
    this.Id = null;
    this.IdLaunchVehicle = null;
    this.IdEngine = null;
    this.ClassificationMarking = null;
    this.StageNumber = 0;
    this.Type = null;
    this.ManufacturerOrgId = null;
    this.NumEngines = 0;
    this.Length = 0.0;
    this.Diameter = 0.0;
    this.Mass = 0.0;
    this.Vernier = null;
    this.NumVernier = 0;
    this.MainEngineThrustSeaLevel = 0.0;
    this.MainEngineThrustVacuum = 0.0;
    this.ThrustSeaLevel = 0.0;
    this.ThrustVacuum = 0.0;
    this.BurnTime = 0.0;
    this.NumBurns = 0;
    this.VernierBurnTime = 0.0;
    this.VernierNumBurns = 0;
    this.VernierThrustSeaLevel = 0.0;
    this.VernierThrustVacuum = 0.0;
    this.NumStageElements = 0;
    this.Reusable = false;
    this.Restartable = false;
    this.ControlThruster1 = null;
    this.NumControlThruster1 = 0;
    this.ControlThruster2 = null;
    this.NumControlThruster2 = 0;
    this.PhotoURLs = null;
    this.Notes = null;
    this.AvionicsNotes = null;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Stage_Full_dataMode_Enum.REAL;
    this.Engine = null;
  }
  public static Stage_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Stage_Full.GetRootAsStage_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Stage_Full.FinishStage_FullBuffer(fbb, Stage_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Stage_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdLaunchVehicle*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdEngine*/, false)
      && verifier.VerifyString(tablePos, 10 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 12 /*StageNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyString(tablePos, 16 /*ManufacturerOrgId*/, false)
      && verifier.VerifyField(tablePos, 18 /*NumEngines*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Length*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Diameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Mass*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*Vernier*/, false)
      && verifier.VerifyField(tablePos, 28 /*NumVernier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*MainEngineThrustSeaLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*MainEngineThrustVacuum*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*ThrustSeaLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*ThrustVacuum*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*BurnTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*NumBurns*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*VernierBurnTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*VernierNumBurns*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*VernierThrustSeaLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*VernierThrustVacuum*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*NumStageElements*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*Reusable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 54 /*Restartable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 56 /*ControlThruster1*/, false)
      && verifier.VerifyField(tablePos, 58 /*NumControlThruster1*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*ControlThruster2*/, false)
      && verifier.VerifyField(tablePos, 62 /*NumControlThruster2*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*PhotoURLs*/, false)
      && verifier.VerifyString(tablePos, 66 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 68 /*AvionicsNotes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 78 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 80 /*Source*/, false)
      && verifier.VerifyString(tablePos, 82 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 84 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 86 /*DataMode*/, 1 /*Stage_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 88 /*Engine*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
