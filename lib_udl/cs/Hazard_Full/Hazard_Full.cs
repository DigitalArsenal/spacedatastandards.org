// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
public struct Hazard_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Hazard_Full GetRootAsHazard_Full(ByteBuffer _bb) { return GetRootAsHazard_Full(_bb, new Hazard_Full()); }
  public static Hazard_Full GetRootAsHazard_Full(ByteBuffer _bb, Hazard_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Hazard_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "HAZA"); }
  public static bool VerifyHazard_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("HAZA", false, Hazard_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Hazard_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: HAZARD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
  /// Example: /// Example: Chemical
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string DetectType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDetectTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDetectTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The detect time, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-03-07T14:51:39.653Z
  /// Constraints: No constraints specified.
  public string DetectTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDetectTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDetectTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// Flag indicating whether this detection is harmful to humans.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Harmful { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Alarm1', 'Alarm2']
  /// Constraints: No constraints specified.
  public string Alarms(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AlarmsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
  /// Example: /// Example: [2.7, 2.9]
  /// Constraints: No constraints specified.
  public string AlarmValues(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AlarmValuesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Rad1', 'Rad2']
  /// Constraints: No constraints specified.
  public string Readings(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReadingsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Gray', 'Gray']
  /// Constraints: No constraints specified.
  public string ReadingUnits(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReadingUnitsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: [107.2, 124.1]
  /// Constraints: No constraints specified.
  public string ReadingValues(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReadingValuesLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
  /// Example: /// Example: 21
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string MatType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMatTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMatTypeArray() { return __p.__vector_as_array<byte>(24); }
  /// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
  /// Example: /// Example: Nerve Agent
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MatClass { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatClassBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMatClassBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMatClassArray() { return __p.__vector_as_array<byte>(26); }
  /// The material common name associated with this detection.
  /// Example: /// Example: VX
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MatName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMatNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMatNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMatNameArray() { return __p.__vector_as_array<byte>(28); }
  /// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
  /// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
  /// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
  /// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
  /// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
  /// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int MatCat { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
  /// Example: /// Example: 64-17-5
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CasRN { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCasRNBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCasRNBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCasRNArray() { return __p.__vector_as_array<byte>(32); }
  /// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
  /// Example: /// Example: 27129
  /// Constraints: No constraints specified.
  public int Ppm { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Measure of density of the material associated with this detection, in kg/m^3.
  /// Example: /// Example: 18900.2
  /// Constraints: No constraints specified.
  public double Density { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
  /// Example: /// Example: 1.31
  /// Constraints: No constraints specified.
  public double RadCtrn { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  public double GBar { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  public double HBar { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Atomic Number of the material associated with this detection.
  /// Example: /// Example: 92
  /// Constraints: No constraints specified.
  public int Z { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
  /// Example: /// Example: 238
  /// Constraints: No constraints specified.
  public int A { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The specific bottle ID associated with this detection.
  /// Example: /// Example: 6264
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string BottleId { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBottleIdBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetBottleIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetBottleIdArray() { return __p.__vector_as_array<byte>(48); }
  /// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
  /// Example: /// Example: Skin
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Channel { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetChannelBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetChannelArray() { return __p.__vector_as_array<byte>(50); }
  /// The known or projected hazard duration, in seconds, associated with this material detection.
  /// Example: /// Example: 14400
  /// Constraints: No constraints specified.
  public int Duration { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
  /// Example: /// Example: 120.1
  /// Constraints: No constraints specified.
  public double Activity { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The deposition measurement of the contaminant to surface area, in kg/m^2.
  /// Example: /// Example: 1.084
  /// Constraints: No constraints specified.
  public double Dep { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
  /// Example: /// Example: 86.1
  /// Constraints: No constraints specified.
  public double DepCtrn { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ratio of the chemical substance mass to the total mass of the mixture.
  /// Example: /// Example: 0.029
  /// Constraints: No constraints specified.
  public double MassFrac { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  /// Example: /// Example: 1.12
  /// Constraints: No constraints specified.
  public double Dose { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The concentration time, in (kg/sec)/m^3, associated with this material detection.
  /// Example: /// Example: 1.077
  /// Constraints: No constraints specified.
  public double CtrnTime { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  /// Example: /// Example: 1.0000001865
  /// Constraints: No constraints specified.
  public double DoseRate { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ID of the Point of Interest (POI) record related to this hazard record.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdPOI { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdPOIBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetIdPOIBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetIdPOIArray() { return __p.__vector_as_array<byte>(68); }
  /// ID of the Track record related to this hazard record.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdTrack { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdTrackBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetIdTrackBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetIdTrackArray() { return __p.__vector_as_array<byte>(70); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(76); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(78); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(80); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Hazard_Full_dataMode_Enum DataMode { get { int o = __p.__offset(82); return o != 0 ? (Hazard_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Hazard_Full_dataMode_Enum.REAL; } }

  public static Offset<Hazard_Full> CreateHazard_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset detectTypeOffset = default(StringOffset),
      StringOffset detectTimeOffset = default(StringOffset),
      bool harmful = false,
      VectorOffset alarmsOffset = default(VectorOffset),
      VectorOffset alarmValuesOffset = default(VectorOffset),
      VectorOffset readingsOffset = default(VectorOffset),
      VectorOffset readingUnitsOffset = default(VectorOffset),
      VectorOffset readingValuesOffset = default(VectorOffset),
      StringOffset matTypeOffset = default(StringOffset),
      StringOffset matClassOffset = default(StringOffset),
      StringOffset matNameOffset = default(StringOffset),
      int matCat = 0,
      StringOffset casRNOffset = default(StringOffset),
      int ppm = 0,
      double density = 0.0,
      double radCtrn = 0.0,
      double gBar = 0.0,
      double hBar = 0.0,
      int z = 0,
      int a = 0,
      StringOffset bottleIdOffset = default(StringOffset),
      StringOffset channelOffset = default(StringOffset),
      int duration = 0,
      double activity = 0.0,
      double dep = 0.0,
      double depCtrn = 0.0,
      double massFrac = 0.0,
      double dose = 0.0,
      double ctrnTime = 0.0,
      double doseRate = 0.0,
      StringOffset idPOIOffset = default(StringOffset),
      StringOffset idTrackOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Hazard_Full_dataMode_Enum dataMode = Hazard_Full_dataMode_Enum.REAL) {
    builder.StartTable(40);
    Hazard_Full.AddDoseRate(builder, doseRate);
    Hazard_Full.AddCtrnTime(builder, ctrnTime);
    Hazard_Full.AddDose(builder, dose);
    Hazard_Full.AddMassFrac(builder, massFrac);
    Hazard_Full.AddDepCtrn(builder, depCtrn);
    Hazard_Full.AddDep(builder, dep);
    Hazard_Full.AddActivity(builder, activity);
    Hazard_Full.AddHBar(builder, hBar);
    Hazard_Full.AddGBar(builder, gBar);
    Hazard_Full.AddRadCtrn(builder, radCtrn);
    Hazard_Full.AddDensity(builder, density);
    Hazard_Full.AddOrigNetwork(builder, origNetworkOffset);
    Hazard_Full.AddOrigin(builder, originOffset);
    Hazard_Full.AddSource(builder, sourceOffset);
    Hazard_Full.AddCreatedBy(builder, createdByOffset);
    Hazard_Full.AddCreatedAt(builder, createdAtOffset);
    Hazard_Full.AddIdTrack(builder, idTrackOffset);
    Hazard_Full.AddIdPOI(builder, idPOIOffset);
    Hazard_Full.AddDuration(builder, duration);
    Hazard_Full.AddChannel(builder, channelOffset);
    Hazard_Full.AddBottleId(builder, bottleIdOffset);
    Hazard_Full.AddA(builder, a);
    Hazard_Full.AddZ(builder, z);
    Hazard_Full.AddPpm(builder, ppm);
    Hazard_Full.AddCasRN(builder, casRNOffset);
    Hazard_Full.AddMatCat(builder, matCat);
    Hazard_Full.AddMatName(builder, matNameOffset);
    Hazard_Full.AddMatClass(builder, matClassOffset);
    Hazard_Full.AddMatType(builder, matTypeOffset);
    Hazard_Full.AddReadingValues(builder, readingValuesOffset);
    Hazard_Full.AddReadingUnits(builder, readingUnitsOffset);
    Hazard_Full.AddReadings(builder, readingsOffset);
    Hazard_Full.AddAlarmValues(builder, alarmValuesOffset);
    Hazard_Full.AddAlarms(builder, alarmsOffset);
    Hazard_Full.AddDetectTime(builder, detectTimeOffset);
    Hazard_Full.AddDetectType(builder, detectTypeOffset);
    Hazard_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Hazard_Full.AddId(builder, idOffset);
    Hazard_Full.AddDataMode(builder, dataMode);
    Hazard_Full.AddHarmful(builder, harmful);
    return Hazard_Full.EndHazard_Full(builder);
  }

  public static void StartHazard_Full(FlatBufferBuilder builder) { builder.StartTable(40); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddDetectType(FlatBufferBuilder builder, StringOffset detectTypeOffset) { builder.AddOffset(2, detectTypeOffset.Value, 0); }
  public static void AddDetectTime(FlatBufferBuilder builder, StringOffset detectTimeOffset) { builder.AddOffset(3, detectTimeOffset.Value, 0); }
  public static void AddHarmful(FlatBufferBuilder builder, bool harmful) { builder.AddBool(4, harmful, false); }
  public static void AddAlarms(FlatBufferBuilder builder, VectorOffset alarmsOffset) { builder.AddOffset(5, alarmsOffset.Value, 0); }
  public static VectorOffset CreateAlarmsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAlarmsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlarmsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlarmsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlarmsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAlarmValues(FlatBufferBuilder builder, VectorOffset alarmValuesOffset) { builder.AddOffset(6, alarmValuesOffset.Value, 0); }
  public static VectorOffset CreateAlarmValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAlarmValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlarmValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAlarmValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAlarmValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReadings(FlatBufferBuilder builder, VectorOffset readingsOffset) { builder.AddOffset(7, readingsOffset.Value, 0); }
  public static VectorOffset CreateReadingsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReadingsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReadingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReadingUnits(FlatBufferBuilder builder, VectorOffset readingUnitsOffset) { builder.AddOffset(8, readingUnitsOffset.Value, 0); }
  public static VectorOffset CreateReadingUnitsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReadingUnitsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingUnitsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingUnitsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReadingUnitsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReadingValues(FlatBufferBuilder builder, VectorOffset readingValuesOffset) { builder.AddOffset(9, readingValuesOffset.Value, 0); }
  public static VectorOffset CreateReadingValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReadingValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReadingValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReadingValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMatType(FlatBufferBuilder builder, StringOffset matTypeOffset) { builder.AddOffset(10, matTypeOffset.Value, 0); }
  public static void AddMatClass(FlatBufferBuilder builder, StringOffset matClassOffset) { builder.AddOffset(11, matClassOffset.Value, 0); }
  public static void AddMatName(FlatBufferBuilder builder, StringOffset matNameOffset) { builder.AddOffset(12, matNameOffset.Value, 0); }
  public static void AddMatCat(FlatBufferBuilder builder, int matCat) { builder.AddInt(13, matCat, 0); }
  public static void AddCasRN(FlatBufferBuilder builder, StringOffset casRNOffset) { builder.AddOffset(14, casRNOffset.Value, 0); }
  public static void AddPpm(FlatBufferBuilder builder, int ppm) { builder.AddInt(15, ppm, 0); }
  public static void AddDensity(FlatBufferBuilder builder, double density) { builder.AddDouble(16, density, 0.0); }
  public static void AddRadCtrn(FlatBufferBuilder builder, double radCtrn) { builder.AddDouble(17, radCtrn, 0.0); }
  public static void AddGBar(FlatBufferBuilder builder, double gBar) { builder.AddDouble(18, gBar, 0.0); }
  public static void AddHBar(FlatBufferBuilder builder, double hBar) { builder.AddDouble(19, hBar, 0.0); }
  public static void AddZ(FlatBufferBuilder builder, int z) { builder.AddInt(20, z, 0); }
  public static void AddA(FlatBufferBuilder builder, int a) { builder.AddInt(21, a, 0); }
  public static void AddBottleId(FlatBufferBuilder builder, StringOffset bottleIdOffset) { builder.AddOffset(22, bottleIdOffset.Value, 0); }
  public static void AddChannel(FlatBufferBuilder builder, StringOffset channelOffset) { builder.AddOffset(23, channelOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(24, duration, 0); }
  public static void AddActivity(FlatBufferBuilder builder, double activity) { builder.AddDouble(25, activity, 0.0); }
  public static void AddDep(FlatBufferBuilder builder, double dep) { builder.AddDouble(26, dep, 0.0); }
  public static void AddDepCtrn(FlatBufferBuilder builder, double depCtrn) { builder.AddDouble(27, depCtrn, 0.0); }
  public static void AddMassFrac(FlatBufferBuilder builder, double massFrac) { builder.AddDouble(28, massFrac, 0.0); }
  public static void AddDose(FlatBufferBuilder builder, double dose) { builder.AddDouble(29, dose, 0.0); }
  public static void AddCtrnTime(FlatBufferBuilder builder, double ctrnTime) { builder.AddDouble(30, ctrnTime, 0.0); }
  public static void AddDoseRate(FlatBufferBuilder builder, double doseRate) { builder.AddDouble(31, doseRate, 0.0); }
  public static void AddIdPOI(FlatBufferBuilder builder, StringOffset idPOIOffset) { builder.AddOffset(32, idPOIOffset.Value, 0); }
  public static void AddIdTrack(FlatBufferBuilder builder, StringOffset idTrackOffset) { builder.AddOffset(33, idTrackOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(36, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(37, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(38, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Hazard_Full_dataMode_Enum dataMode) { builder.AddSbyte(39, (sbyte)dataMode, 0); }
  public static Offset<Hazard_Full> EndHazard_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Hazard_Full>(o);
  }
  public static void FinishHazard_FullBuffer(FlatBufferBuilder builder, Offset<Hazard_Full> offset) { builder.Finish(offset.Value, "HAZA"); }
  public static void FinishSizePrefixedHazard_FullBuffer(FlatBufferBuilder builder, Offset<Hazard_Full> offset) { builder.FinishSizePrefixed(offset.Value, "HAZA"); }
  public Hazard_FullT UnPack() {
    var _o = new Hazard_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Hazard_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.DetectType = this.DetectType;
    _o.DetectTime = this.DetectTime;
    _o.Harmful = this.Harmful;
    _o.Alarms = new List<string>();
    for (var _j = 0; _j < this.AlarmsLength; ++_j) {_o.Alarms.Add(this.Alarms(_j));}
    _o.AlarmValues = new List<string>();
    for (var _j = 0; _j < this.AlarmValuesLength; ++_j) {_o.AlarmValues.Add(this.AlarmValues(_j));}
    _o.Readings = new List<string>();
    for (var _j = 0; _j < this.ReadingsLength; ++_j) {_o.Readings.Add(this.Readings(_j));}
    _o.ReadingUnits = new List<string>();
    for (var _j = 0; _j < this.ReadingUnitsLength; ++_j) {_o.ReadingUnits.Add(this.ReadingUnits(_j));}
    _o.ReadingValues = new List<string>();
    for (var _j = 0; _j < this.ReadingValuesLength; ++_j) {_o.ReadingValues.Add(this.ReadingValues(_j));}
    _o.MatType = this.MatType;
    _o.MatClass = this.MatClass;
    _o.MatName = this.MatName;
    _o.MatCat = this.MatCat;
    _o.CasRN = this.CasRN;
    _o.Ppm = this.Ppm;
    _o.Density = this.Density;
    _o.RadCtrn = this.RadCtrn;
    _o.GBar = this.GBar;
    _o.HBar = this.HBar;
    _o.Z = this.Z;
    _o.A = this.A;
    _o.BottleId = this.BottleId;
    _o.Channel = this.Channel;
    _o.Duration = this.Duration;
    _o.Activity = this.Activity;
    _o.Dep = this.Dep;
    _o.DepCtrn = this.DepCtrn;
    _o.MassFrac = this.MassFrac;
    _o.Dose = this.Dose;
    _o.CtrnTime = this.CtrnTime;
    _o.DoseRate = this.DoseRate;
    _o.IdPOI = this.IdPOI;
    _o.IdTrack = this.IdTrack;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Hazard_Full> Pack(FlatBufferBuilder builder, Hazard_FullT _o) {
    if (_o == null) return default(Offset<Hazard_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _detectType = _o.DetectType == null ? default(StringOffset) : builder.CreateString(_o.DetectType);
    var _detectTime = _o.DetectTime == null ? default(StringOffset) : builder.CreateString(_o.DetectTime);
    var _alarms = default(VectorOffset);
    if (_o.Alarms != null) {
      var __alarms = new StringOffset[_o.Alarms.Count];
      for (var _j = 0; _j < __alarms.Length; ++_j) { __alarms[_j] = builder.CreateString(_o.Alarms[_j]); }
      _alarms = CreateAlarmsVector(builder, __alarms);
    }
    var _alarmValues = default(VectorOffset);
    if (_o.AlarmValues != null) {
      var __alarmValues = new StringOffset[_o.AlarmValues.Count];
      for (var _j = 0; _j < __alarmValues.Length; ++_j) { __alarmValues[_j] = builder.CreateString(_o.AlarmValues[_j]); }
      _alarmValues = CreateAlarmValuesVector(builder, __alarmValues);
    }
    var _readings = default(VectorOffset);
    if (_o.Readings != null) {
      var __readings = new StringOffset[_o.Readings.Count];
      for (var _j = 0; _j < __readings.Length; ++_j) { __readings[_j] = builder.CreateString(_o.Readings[_j]); }
      _readings = CreateReadingsVector(builder, __readings);
    }
    var _readingUnits = default(VectorOffset);
    if (_o.ReadingUnits != null) {
      var __readingUnits = new StringOffset[_o.ReadingUnits.Count];
      for (var _j = 0; _j < __readingUnits.Length; ++_j) { __readingUnits[_j] = builder.CreateString(_o.ReadingUnits[_j]); }
      _readingUnits = CreateReadingUnitsVector(builder, __readingUnits);
    }
    var _readingValues = default(VectorOffset);
    if (_o.ReadingValues != null) {
      var __readingValues = new StringOffset[_o.ReadingValues.Count];
      for (var _j = 0; _j < __readingValues.Length; ++_j) { __readingValues[_j] = builder.CreateString(_o.ReadingValues[_j]); }
      _readingValues = CreateReadingValuesVector(builder, __readingValues);
    }
    var _matType = _o.MatType == null ? default(StringOffset) : builder.CreateString(_o.MatType);
    var _matClass = _o.MatClass == null ? default(StringOffset) : builder.CreateString(_o.MatClass);
    var _matName = _o.MatName == null ? default(StringOffset) : builder.CreateString(_o.MatName);
    var _casRN = _o.CasRN == null ? default(StringOffset) : builder.CreateString(_o.CasRN);
    var _bottleId = _o.BottleId == null ? default(StringOffset) : builder.CreateString(_o.BottleId);
    var _channel = _o.Channel == null ? default(StringOffset) : builder.CreateString(_o.Channel);
    var _idPOI = _o.IdPOI == null ? default(StringOffset) : builder.CreateString(_o.IdPOI);
    var _idTrack = _o.IdTrack == null ? default(StringOffset) : builder.CreateString(_o.IdTrack);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateHazard_Full(
      builder,
      _id,
      _classificationMarking,
      _detectType,
      _detectTime,
      _o.Harmful,
      _alarms,
      _alarmValues,
      _readings,
      _readingUnits,
      _readingValues,
      _matType,
      _matClass,
      _matName,
      _o.MatCat,
      _casRN,
      _o.Ppm,
      _o.Density,
      _o.RadCtrn,
      _o.GBar,
      _o.HBar,
      _o.Z,
      _o.A,
      _bottleId,
      _channel,
      _o.Duration,
      _o.Activity,
      _o.Dep,
      _o.DepCtrn,
      _o.MassFrac,
      _o.Dose,
      _o.CtrnTime,
      _o.DoseRate,
      _idPOI,
      _idTrack,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Hazard_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string DetectType { get; set; }
  public string DetectTime { get; set; }
  public bool Harmful { get; set; }
  public List<string> Alarms { get; set; }
  public List<string> AlarmValues { get; set; }
  public List<string> Readings { get; set; }
  public List<string> ReadingUnits { get; set; }
  public List<string> ReadingValues { get; set; }
  public string MatType { get; set; }
  public string MatClass { get; set; }
  public string MatName { get; set; }
  public int MatCat { get; set; }
  public string CasRN { get; set; }
  public int Ppm { get; set; }
  public double Density { get; set; }
  public double RadCtrn { get; set; }
  public double GBar { get; set; }
  public double HBar { get; set; }
  public int Z { get; set; }
  public int A { get; set; }
  public string BottleId { get; set; }
  public string Channel { get; set; }
  public int Duration { get; set; }
  public double Activity { get; set; }
  public double Dep { get; set; }
  public double DepCtrn { get; set; }
  public double MassFrac { get; set; }
  public double Dose { get; set; }
  public double CtrnTime { get; set; }
  public double DoseRate { get; set; }
  public string IdPOI { get; set; }
  public string IdTrack { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Hazard_Full_dataMode_Enum DataMode { get; set; }

  public Hazard_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.DetectType = null;
    this.DetectTime = null;
    this.Harmful = false;
    this.Alarms = null;
    this.AlarmValues = null;
    this.Readings = null;
    this.ReadingUnits = null;
    this.ReadingValues = null;
    this.MatType = null;
    this.MatClass = null;
    this.MatName = null;
    this.MatCat = 0;
    this.CasRN = null;
    this.Ppm = 0;
    this.Density = 0.0;
    this.RadCtrn = 0.0;
    this.GBar = 0.0;
    this.HBar = 0.0;
    this.Z = 0;
    this.A = 0;
    this.BottleId = null;
    this.Channel = null;
    this.Duration = 0;
    this.Activity = 0.0;
    this.Dep = 0.0;
    this.DepCtrn = 0.0;
    this.MassFrac = 0.0;
    this.Dose = 0.0;
    this.CtrnTime = 0.0;
    this.DoseRate = 0.0;
    this.IdPOI = null;
    this.IdTrack = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Hazard_Full_dataMode_Enum.REAL;
  }
  public static Hazard_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Hazard_Full.GetRootAsHazard_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Hazard_Full.FinishHazard_FullBuffer(fbb, Hazard_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Hazard_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*DetectType*/, false)
      && verifier.VerifyString(tablePos, 10 /*DetectTime*/, false)
      && verifier.VerifyField(tablePos, 12 /*Harmful*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Alarms*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*AlarmValues*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*Readings*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*ReadingUnits*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 22 /*ReadingValues*/, false)
      && verifier.VerifyString(tablePos, 24 /*MatType*/, false)
      && verifier.VerifyString(tablePos, 26 /*MatClass*/, false)
      && verifier.VerifyString(tablePos, 28 /*MatName*/, false)
      && verifier.VerifyField(tablePos, 30 /*MatCat*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 32 /*CasRN*/, false)
      && verifier.VerifyField(tablePos, 34 /*Ppm*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*Density*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*RadCtrn*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*GBar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*HBar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Z*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*A*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 48 /*BottleId*/, false)
      && verifier.VerifyString(tablePos, 50 /*Channel*/, false)
      && verifier.VerifyField(tablePos, 52 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*Activity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Dep*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*DepCtrn*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*MassFrac*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Dose*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*CtrnTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*DoseRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 68 /*IdPOI*/, false)
      && verifier.VerifyString(tablePos, 70 /*IdTrack*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*Source*/, false)
      && verifier.VerifyString(tablePos, 78 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 80 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 82 /*DataMode*/, 1 /*Hazard_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
