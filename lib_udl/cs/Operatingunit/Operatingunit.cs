// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
public struct Operatingunit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Operatingunit GetRootAsOperatingunit(ByteBuffer _bb) { return GetRootAsOperatingunit(_bb, new Operatingunit()); }
  public static Operatingunit GetRootAsOperatingunit(ByteBuffer _bb, Operatingunit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OperatingunitBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "OPER"); }
  public static bool VerifyOperatingunit(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("OPER", false, OperatingunitVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Operatingunit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: OPERATINGUNIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOperatingUnit { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOperatingUnitBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdOperatingUnitBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdOperatingUnitArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the operating unit record from the originating system.
  /// Example: /// Example: 32100000000021
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltOperatingUnitId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltOperatingUnitIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAltOperatingUnitIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAltOperatingUnitIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Name of the operating unit.
  /// Example: /// Example: SOME_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Description of the operating unit.
  /// Example: /// Example: Description of unit
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the location record for this operating unit.
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdLocation { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdLocationBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdLocationBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdLocationArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the contact for this operating unit.
  /// Example: /// Example: CONTACT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdContact { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdContactBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdContactBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdContactArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the organization record for this operating unit.
  /// Example: /// Example: ORGANIZATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOrganization { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOrganizationBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdOrganizationBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdOrganizationArray() { return __p.__vector_as_array<byte>(18); }
  /// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
  /// Example: /// Example: AZXAZ12345
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string UnitIdentifier { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitIdentifierBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetUnitIdentifierBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetUnitIdentifierArray() { return __p.__vector_as_array<byte>(20); }
  /// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: IQ
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(22); }
  /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string AltCountryCode { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltCountryCodeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetAltCountryCodeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetAltCountryCodeArray() { return __p.__vector_as_array<byte>(24); }
  /// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Wac { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetWacBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetWacArray() { return __p.__vector_as_array<byte>(26); }
  /// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string OperStatus { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperStatusBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOperStatusBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOperStatusArray() { return __p.__vector_as_array<byte>(28); }
  /// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Condition { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(30); }
  /// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ConditionAvail { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionAvailBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetConditionAvailBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetConditionAvailArray() { return __p.__vector_as_array<byte>(32); }
  /// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int Eval { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: EOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Fpa { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFpaBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetFpaBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetFpaArray() { return __p.__vector_as_array<byte>(36); }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Ident { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetIdentBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetIdentArray() { return __p.__vector_as_array<byte>(38); }
  /// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Allegiance { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllegianceBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetAllegianceBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetAllegianceArray() { return __p.__vector_as_array<byte>(40); }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string AltAllegiance { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAllegianceBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetAltAllegianceBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetAltAllegianceArray() { return __p.__vector_as_array<byte>(42); }
  /// Location name for the coordinates.
  /// Example: /// Example: LOCATION_NAME
  /// Constraints: Minimum length = 0, Maximum length = 54
  public string LocName { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocNameBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetLocNameBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetLocNameArray() { return __p.__vector_as_array<byte>(44); }
  /// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: GR
  /// Constraints: Minimum length = 0, Maximum length = 9
  public string LocReason { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocReasonBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetLocReasonBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetLocReasonArray() { return __p.__vector_as_array<byte>(46); }
  /// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: NV
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Force { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetForceBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetForceBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetForceArray() { return __p.__vector_as_array<byte>(48); }
  /// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
  /// Example: /// Example: FORCE-NAME
  /// Constraints: Minimum length = 0, Maximum length = 54
  public string ForceName { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetForceNameBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetForceNameBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetForceNameArray() { return __p.__vector_as_array<byte>(50); }
  /// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: MIL
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string FunctRole { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctRoleBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetFunctRoleBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetFunctRoleArray() { return __p.__vector_as_array<byte>(52); }
  /// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: W6
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string MsnPrimary { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnPrimaryBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetMsnPrimaryBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetMsnPrimaryArray() { return __p.__vector_as_array<byte>(54); }
  /// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: QK
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string MsnPrimarySpecialty { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnPrimarySpecialtyBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetMsnPrimarySpecialtyBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetMsnPrimarySpecialtyArray() { return __p.__vector_as_array<byte>(56); }
  /// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool MasterUnit { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool StylizedUnit { get { int o = __p.__offset(60); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: 5
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string DivCat { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDivCatBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetDivCatBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetDivCatArray() { return __p.__vector_as_array<byte>(62); }
  /// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: SHIP
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Echelon { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetEchelonBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetEchelonArray() { return __p.__vector_as_array<byte>(64); }
  /// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: 68
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string EchelonTier { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonTierBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetEchelonTierBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetEchelonTierArray() { return __p.__vector_as_array<byte>(66); }
  /// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string FleetId { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFleetIdBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetFleetIdBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetFleetIdArray() { return __p.__vector_as_array<byte>(68); }
  /// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: ND
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string DeployStatus { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeployStatusBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetDeployStatusBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetDeployStatusArray() { return __p.__vector_as_array<byte>(70); }
  /// The country code of the observed flag flown.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string FlagFlown { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFlagFlownBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetFlagFlownBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetFlagFlownArray() { return __p.__vector_as_array<byte>(72); }
  /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CoordDatum { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordDatumBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCoordDatumBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCoordDatumArray() { return __p.__vector_as_array<byte>(74); }
  /// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  public string Coord { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCoordBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCoordArray() { return __p.__vector_as_array<byte>(76); }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  public double CoordDerivAcc { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  public double ElevMsl { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int ElevMslConfLvl { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double ElevMslDerivAcc { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The distance between Mean Sea Level and a referenced ellipsoid.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double GeoidalMslSep { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator".
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string MilGridSys { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridSysBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetMilGridSysBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetMilGridSysArray() { return __p.__vector_as_array<byte>(92); }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string MilGrid { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetMilGridBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetMilGridArray() { return __p.__vector_as_array<byte>(94); }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Utm { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUtmBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetUtmBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetUtmArray() { return __p.__vector_as_array<byte>(96); }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string AirDefArea { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirDefAreaBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetAirDefAreaBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetAirDefAreaArray() { return __p.__vector_as_array<byte>(98); }
  /// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZ07
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string PolSubdiv { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPolSubdivBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetPolSubdivBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetPolSubdivArray() { return __p.__vector_as_array<byte>(100); }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string SymCode { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSymCodeBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetSymCodeBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetSymCodeArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  /// 0 - Does not meet criteria above
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string ClassRating { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassRatingBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetClassRatingBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetClassRatingArray() { return __p.__vector_as_array<byte>(104); }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string RecStatus { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecStatusBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetRecStatusBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetRecStatusArray() { return __p.__vector_as_array<byte>(106); }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  public string ReviewDate { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviewDateBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetReviewDateBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetReviewDateArray() { return __p.__vector_as_array<byte>(108); }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ResProd { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResProdBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetResProdBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetResProdArray() { return __p.__vector_as_array<byte>(110); }
  /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ReferenceDoc { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReferenceDocBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetReferenceDocBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetReferenceDocArray() { return __p.__vector_as_array<byte>(112); }
  /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OperatingUnitRemarks(int j) { int o = __p.__offset(114); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OperatingUnitRemarksLength { get { int o = __p.__offset(114); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(116); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(118); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(120); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(122); }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(124); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(126); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Operatingunit_dataMode_Enum DataMode { get { int o = __p.__offset(128); return o != 0 ? (Operatingunit_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Operatingunit_dataMode_Enum.REAL; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Organization { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrganizationBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetOrganizationBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetOrganizationArray() { return __p.__vector_as_array<byte>(130); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Location { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetLocationBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetLocationArray() { return __p.__vector_as_array<byte>(132); }

  public static Offset<Operatingunit> CreateOperatingunit(FlatBufferBuilder builder,
      StringOffset idOperatingUnitOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset altOperatingUnitIdOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset idLocationOffset = default(StringOffset),
      StringOffset idContactOffset = default(StringOffset),
      StringOffset idOrganizationOffset = default(StringOffset),
      StringOffset unitIdentifierOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset altCountryCodeOffset = default(StringOffset),
      StringOffset wacOffset = default(StringOffset),
      StringOffset operStatusOffset = default(StringOffset),
      StringOffset conditionOffset = default(StringOffset),
      StringOffset conditionAvailOffset = default(StringOffset),
      int eval = 0,
      StringOffset fpaOffset = default(StringOffset),
      StringOffset identOffset = default(StringOffset),
      StringOffset allegianceOffset = default(StringOffset),
      StringOffset altAllegianceOffset = default(StringOffset),
      StringOffset locNameOffset = default(StringOffset),
      StringOffset locReasonOffset = default(StringOffset),
      StringOffset forceOffset = default(StringOffset),
      StringOffset forceNameOffset = default(StringOffset),
      StringOffset functRoleOffset = default(StringOffset),
      StringOffset msnPrimaryOffset = default(StringOffset),
      StringOffset msnPrimarySpecialtyOffset = default(StringOffset),
      bool masterUnit = false,
      bool stylizedUnit = false,
      StringOffset divCatOffset = default(StringOffset),
      StringOffset echelonOffset = default(StringOffset),
      StringOffset echelonTierOffset = default(StringOffset),
      StringOffset fleetIdOffset = default(StringOffset),
      StringOffset deployStatusOffset = default(StringOffset),
      StringOffset flagFlownOffset = default(StringOffset),
      StringOffset coordDatumOffset = default(StringOffset),
      StringOffset coordOffset = default(StringOffset),
      double coordDerivAcc = 0.0,
      double lat = 0.0,
      double lon = 0.0,
      double elevMsl = 0.0,
      int elevMslConfLvl = 0,
      double elevMslDerivAcc = 0.0,
      double geoidalMslSep = 0.0,
      StringOffset milGridSysOffset = default(StringOffset),
      StringOffset milGridOffset = default(StringOffset),
      StringOffset utmOffset = default(StringOffset),
      StringOffset airDefAreaOffset = default(StringOffset),
      StringOffset polSubdivOffset = default(StringOffset),
      StringOffset symCodeOffset = default(StringOffset),
      StringOffset classRatingOffset = default(StringOffset),
      StringOffset recStatusOffset = default(StringOffset),
      StringOffset reviewDateOffset = default(StringOffset),
      StringOffset resProdOffset = default(StringOffset),
      StringOffset referenceDocOffset = default(StringOffset),
      VectorOffset operatingUnitRemarksOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Operatingunit_dataMode_Enum dataMode = Operatingunit_dataMode_Enum.REAL,
      StringOffset organizationOffset = default(StringOffset),
      StringOffset locationOffset = default(StringOffset)) {
    builder.StartTable(65);
    Operatingunit.AddGeoidalMslSep(builder, geoidalMslSep);
    Operatingunit.AddElevMslDerivAcc(builder, elevMslDerivAcc);
    Operatingunit.AddElevMsl(builder, elevMsl);
    Operatingunit.AddLon(builder, lon);
    Operatingunit.AddLat(builder, lat);
    Operatingunit.AddCoordDerivAcc(builder, coordDerivAcc);
    Operatingunit.AddLocation(builder, locationOffset);
    Operatingunit.AddOrganization(builder, organizationOffset);
    Operatingunit.AddOrigin(builder, originOffset);
    Operatingunit.AddSource(builder, sourceOffset);
    Operatingunit.AddUpdatedBy(builder, updatedByOffset);
    Operatingunit.AddUpdatedAt(builder, updatedAtOffset);
    Operatingunit.AddCreatedBy(builder, createdByOffset);
    Operatingunit.AddCreatedAt(builder, createdAtOffset);
    Operatingunit.AddOperatingUnitRemarks(builder, operatingUnitRemarksOffset);
    Operatingunit.AddReferenceDoc(builder, referenceDocOffset);
    Operatingunit.AddResProd(builder, resProdOffset);
    Operatingunit.AddReviewDate(builder, reviewDateOffset);
    Operatingunit.AddRecStatus(builder, recStatusOffset);
    Operatingunit.AddClassRating(builder, classRatingOffset);
    Operatingunit.AddSymCode(builder, symCodeOffset);
    Operatingunit.AddPolSubdiv(builder, polSubdivOffset);
    Operatingunit.AddAirDefArea(builder, airDefAreaOffset);
    Operatingunit.AddUtm(builder, utmOffset);
    Operatingunit.AddMilGrid(builder, milGridOffset);
    Operatingunit.AddMilGridSys(builder, milGridSysOffset);
    Operatingunit.AddElevMslConfLvl(builder, elevMslConfLvl);
    Operatingunit.AddCoord(builder, coordOffset);
    Operatingunit.AddCoordDatum(builder, coordDatumOffset);
    Operatingunit.AddFlagFlown(builder, flagFlownOffset);
    Operatingunit.AddDeployStatus(builder, deployStatusOffset);
    Operatingunit.AddFleetId(builder, fleetIdOffset);
    Operatingunit.AddEchelonTier(builder, echelonTierOffset);
    Operatingunit.AddEchelon(builder, echelonOffset);
    Operatingunit.AddDivCat(builder, divCatOffset);
    Operatingunit.AddMsnPrimarySpecialty(builder, msnPrimarySpecialtyOffset);
    Operatingunit.AddMsnPrimary(builder, msnPrimaryOffset);
    Operatingunit.AddFunctRole(builder, functRoleOffset);
    Operatingunit.AddForceName(builder, forceNameOffset);
    Operatingunit.AddForce(builder, forceOffset);
    Operatingunit.AddLocReason(builder, locReasonOffset);
    Operatingunit.AddLocName(builder, locNameOffset);
    Operatingunit.AddAltAllegiance(builder, altAllegianceOffset);
    Operatingunit.AddAllegiance(builder, allegianceOffset);
    Operatingunit.AddIdent(builder, identOffset);
    Operatingunit.AddFpa(builder, fpaOffset);
    Operatingunit.AddEval(builder, eval);
    Operatingunit.AddConditionAvail(builder, conditionAvailOffset);
    Operatingunit.AddCondition(builder, conditionOffset);
    Operatingunit.AddOperStatus(builder, operStatusOffset);
    Operatingunit.AddWac(builder, wacOffset);
    Operatingunit.AddAltCountryCode(builder, altCountryCodeOffset);
    Operatingunit.AddCountryCode(builder, countryCodeOffset);
    Operatingunit.AddUnitIdentifier(builder, unitIdentifierOffset);
    Operatingunit.AddIdOrganization(builder, idOrganizationOffset);
    Operatingunit.AddIdContact(builder, idContactOffset);
    Operatingunit.AddIdLocation(builder, idLocationOffset);
    Operatingunit.AddDescription(builder, descriptionOffset);
    Operatingunit.AddName(builder, nameOffset);
    Operatingunit.AddAltOperatingUnitId(builder, altOperatingUnitIdOffset);
    Operatingunit.AddClassificationMarking(builder, classificationMarkingOffset);
    Operatingunit.AddIdOperatingUnit(builder, idOperatingUnitOffset);
    Operatingunit.AddDataMode(builder, dataMode);
    Operatingunit.AddStylizedUnit(builder, stylizedUnit);
    Operatingunit.AddMasterUnit(builder, masterUnit);
    return Operatingunit.EndOperatingunit(builder);
  }

  public static void StartOperatingunit(FlatBufferBuilder builder) { builder.StartTable(65); }
  public static void AddIdOperatingUnit(FlatBufferBuilder builder, StringOffset idOperatingUnitOffset) { builder.AddOffset(0, idOperatingUnitOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddAltOperatingUnitId(FlatBufferBuilder builder, StringOffset altOperatingUnitIdOffset) { builder.AddOffset(2, altOperatingUnitIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddIdLocation(FlatBufferBuilder builder, StringOffset idLocationOffset) { builder.AddOffset(5, idLocationOffset.Value, 0); }
  public static void AddIdContact(FlatBufferBuilder builder, StringOffset idContactOffset) { builder.AddOffset(6, idContactOffset.Value, 0); }
  public static void AddIdOrganization(FlatBufferBuilder builder, StringOffset idOrganizationOffset) { builder.AddOffset(7, idOrganizationOffset.Value, 0); }
  public static void AddUnitIdentifier(FlatBufferBuilder builder, StringOffset unitIdentifierOffset) { builder.AddOffset(8, unitIdentifierOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(9, countryCodeOffset.Value, 0); }
  public static void AddAltCountryCode(FlatBufferBuilder builder, StringOffset altCountryCodeOffset) { builder.AddOffset(10, altCountryCodeOffset.Value, 0); }
  public static void AddWac(FlatBufferBuilder builder, StringOffset wacOffset) { builder.AddOffset(11, wacOffset.Value, 0); }
  public static void AddOperStatus(FlatBufferBuilder builder, StringOffset operStatusOffset) { builder.AddOffset(12, operStatusOffset.Value, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(13, conditionOffset.Value, 0); }
  public static void AddConditionAvail(FlatBufferBuilder builder, StringOffset conditionAvailOffset) { builder.AddOffset(14, conditionAvailOffset.Value, 0); }
  public static void AddEval(FlatBufferBuilder builder, int eval) { builder.AddInt(15, eval, 0); }
  public static void AddFpa(FlatBufferBuilder builder, StringOffset fpaOffset) { builder.AddOffset(16, fpaOffset.Value, 0); }
  public static void AddIdent(FlatBufferBuilder builder, StringOffset identOffset) { builder.AddOffset(17, identOffset.Value, 0); }
  public static void AddAllegiance(FlatBufferBuilder builder, StringOffset allegianceOffset) { builder.AddOffset(18, allegianceOffset.Value, 0); }
  public static void AddAltAllegiance(FlatBufferBuilder builder, StringOffset altAllegianceOffset) { builder.AddOffset(19, altAllegianceOffset.Value, 0); }
  public static void AddLocName(FlatBufferBuilder builder, StringOffset locNameOffset) { builder.AddOffset(20, locNameOffset.Value, 0); }
  public static void AddLocReason(FlatBufferBuilder builder, StringOffset locReasonOffset) { builder.AddOffset(21, locReasonOffset.Value, 0); }
  public static void AddForce(FlatBufferBuilder builder, StringOffset forceOffset) { builder.AddOffset(22, forceOffset.Value, 0); }
  public static void AddForceName(FlatBufferBuilder builder, StringOffset forceNameOffset) { builder.AddOffset(23, forceNameOffset.Value, 0); }
  public static void AddFunctRole(FlatBufferBuilder builder, StringOffset functRoleOffset) { builder.AddOffset(24, functRoleOffset.Value, 0); }
  public static void AddMsnPrimary(FlatBufferBuilder builder, StringOffset msnPrimaryOffset) { builder.AddOffset(25, msnPrimaryOffset.Value, 0); }
  public static void AddMsnPrimarySpecialty(FlatBufferBuilder builder, StringOffset msnPrimarySpecialtyOffset) { builder.AddOffset(26, msnPrimarySpecialtyOffset.Value, 0); }
  public static void AddMasterUnit(FlatBufferBuilder builder, bool masterUnit) { builder.AddBool(27, masterUnit, false); }
  public static void AddStylizedUnit(FlatBufferBuilder builder, bool stylizedUnit) { builder.AddBool(28, stylizedUnit, false); }
  public static void AddDivCat(FlatBufferBuilder builder, StringOffset divCatOffset) { builder.AddOffset(29, divCatOffset.Value, 0); }
  public static void AddEchelon(FlatBufferBuilder builder, StringOffset echelonOffset) { builder.AddOffset(30, echelonOffset.Value, 0); }
  public static void AddEchelonTier(FlatBufferBuilder builder, StringOffset echelonTierOffset) { builder.AddOffset(31, echelonTierOffset.Value, 0); }
  public static void AddFleetId(FlatBufferBuilder builder, StringOffset fleetIdOffset) { builder.AddOffset(32, fleetIdOffset.Value, 0); }
  public static void AddDeployStatus(FlatBufferBuilder builder, StringOffset deployStatusOffset) { builder.AddOffset(33, deployStatusOffset.Value, 0); }
  public static void AddFlagFlown(FlatBufferBuilder builder, StringOffset flagFlownOffset) { builder.AddOffset(34, flagFlownOffset.Value, 0); }
  public static void AddCoordDatum(FlatBufferBuilder builder, StringOffset coordDatumOffset) { builder.AddOffset(35, coordDatumOffset.Value, 0); }
  public static void AddCoord(FlatBufferBuilder builder, StringOffset coordOffset) { builder.AddOffset(36, coordOffset.Value, 0); }
  public static void AddCoordDerivAcc(FlatBufferBuilder builder, double coordDerivAcc) { builder.AddDouble(37, coordDerivAcc, 0.0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(38, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(39, lon, 0.0); }
  public static void AddElevMsl(FlatBufferBuilder builder, double elevMsl) { builder.AddDouble(40, elevMsl, 0.0); }
  public static void AddElevMslConfLvl(FlatBufferBuilder builder, int elevMslConfLvl) { builder.AddInt(41, elevMslConfLvl, 0); }
  public static void AddElevMslDerivAcc(FlatBufferBuilder builder, double elevMslDerivAcc) { builder.AddDouble(42, elevMslDerivAcc, 0.0); }
  public static void AddGeoidalMslSep(FlatBufferBuilder builder, double geoidalMslSep) { builder.AddDouble(43, geoidalMslSep, 0.0); }
  public static void AddMilGridSys(FlatBufferBuilder builder, StringOffset milGridSysOffset) { builder.AddOffset(44, milGridSysOffset.Value, 0); }
  public static void AddMilGrid(FlatBufferBuilder builder, StringOffset milGridOffset) { builder.AddOffset(45, milGridOffset.Value, 0); }
  public static void AddUtm(FlatBufferBuilder builder, StringOffset utmOffset) { builder.AddOffset(46, utmOffset.Value, 0); }
  public static void AddAirDefArea(FlatBufferBuilder builder, StringOffset airDefAreaOffset) { builder.AddOffset(47, airDefAreaOffset.Value, 0); }
  public static void AddPolSubdiv(FlatBufferBuilder builder, StringOffset polSubdivOffset) { builder.AddOffset(48, polSubdivOffset.Value, 0); }
  public static void AddSymCode(FlatBufferBuilder builder, StringOffset symCodeOffset) { builder.AddOffset(49, symCodeOffset.Value, 0); }
  public static void AddClassRating(FlatBufferBuilder builder, StringOffset classRatingOffset) { builder.AddOffset(50, classRatingOffset.Value, 0); }
  public static void AddRecStatus(FlatBufferBuilder builder, StringOffset recStatusOffset) { builder.AddOffset(51, recStatusOffset.Value, 0); }
  public static void AddReviewDate(FlatBufferBuilder builder, StringOffset reviewDateOffset) { builder.AddOffset(52, reviewDateOffset.Value, 0); }
  public static void AddResProd(FlatBufferBuilder builder, StringOffset resProdOffset) { builder.AddOffset(53, resProdOffset.Value, 0); }
  public static void AddReferenceDoc(FlatBufferBuilder builder, StringOffset referenceDocOffset) { builder.AddOffset(54, referenceDocOffset.Value, 0); }
  public static void AddOperatingUnitRemarks(FlatBufferBuilder builder, VectorOffset operatingUnitRemarksOffset) { builder.AddOffset(55, operatingUnitRemarksOffset.Value, 0); }
  public static VectorOffset CreateOperatingUnitRemarksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOperatingUnitRemarksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOperatingUnitRemarksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOperatingUnitRemarksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOperatingUnitRemarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(56, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(57, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(58, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(59, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(60, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(61, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Operatingunit_dataMode_Enum dataMode) { builder.AddSbyte(62, (sbyte)dataMode, 0); }
  public static void AddOrganization(FlatBufferBuilder builder, StringOffset organizationOffset) { builder.AddOffset(63, organizationOffset.Value, 0); }
  public static void AddLocation(FlatBufferBuilder builder, StringOffset locationOffset) { builder.AddOffset(64, locationOffset.Value, 0); }
  public static Offset<Operatingunit> EndOperatingunit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Operatingunit>(o);
  }
  public static void FinishOperatingunitBuffer(FlatBufferBuilder builder, Offset<Operatingunit> offset) { builder.Finish(offset.Value, "OPER"); }
  public static void FinishSizePrefixedOperatingunitBuffer(FlatBufferBuilder builder, Offset<Operatingunit> offset) { builder.FinishSizePrefixed(offset.Value, "OPER"); }
  public OperatingunitT UnPack() {
    var _o = new OperatingunitT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OperatingunitT _o) {
    _o.IdOperatingUnit = this.IdOperatingUnit;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.AltOperatingUnitId = this.AltOperatingUnitId;
    _o.Name = this.Name;
    _o.Description = this.Description;
    _o.IdLocation = this.IdLocation;
    _o.IdContact = this.IdContact;
    _o.IdOrganization = this.IdOrganization;
    _o.UnitIdentifier = this.UnitIdentifier;
    _o.CountryCode = this.CountryCode;
    _o.AltCountryCode = this.AltCountryCode;
    _o.Wac = this.Wac;
    _o.OperStatus = this.OperStatus;
    _o.Condition = this.Condition;
    _o.ConditionAvail = this.ConditionAvail;
    _o.Eval = this.Eval;
    _o.Fpa = this.Fpa;
    _o.Ident = this.Ident;
    _o.Allegiance = this.Allegiance;
    _o.AltAllegiance = this.AltAllegiance;
    _o.LocName = this.LocName;
    _o.LocReason = this.LocReason;
    _o.Force = this.Force;
    _o.ForceName = this.ForceName;
    _o.FunctRole = this.FunctRole;
    _o.MsnPrimary = this.MsnPrimary;
    _o.MsnPrimarySpecialty = this.MsnPrimarySpecialty;
    _o.MasterUnit = this.MasterUnit;
    _o.StylizedUnit = this.StylizedUnit;
    _o.DivCat = this.DivCat;
    _o.Echelon = this.Echelon;
    _o.EchelonTier = this.EchelonTier;
    _o.FleetId = this.FleetId;
    _o.DeployStatus = this.DeployStatus;
    _o.FlagFlown = this.FlagFlown;
    _o.CoordDatum = this.CoordDatum;
    _o.Coord = this.Coord;
    _o.CoordDerivAcc = this.CoordDerivAcc;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.ElevMsl = this.ElevMsl;
    _o.ElevMslConfLvl = this.ElevMslConfLvl;
    _o.ElevMslDerivAcc = this.ElevMslDerivAcc;
    _o.GeoidalMslSep = this.GeoidalMslSep;
    _o.MilGridSys = this.MilGridSys;
    _o.MilGrid = this.MilGrid;
    _o.Utm = this.Utm;
    _o.AirDefArea = this.AirDefArea;
    _o.PolSubdiv = this.PolSubdiv;
    _o.SymCode = this.SymCode;
    _o.ClassRating = this.ClassRating;
    _o.RecStatus = this.RecStatus;
    _o.ReviewDate = this.ReviewDate;
    _o.ResProd = this.ResProd;
    _o.ReferenceDoc = this.ReferenceDoc;
    _o.OperatingUnitRemarks = new List<string>();
    for (var _j = 0; _j < this.OperatingUnitRemarksLength; ++_j) {_o.OperatingUnitRemarks.Add(this.OperatingUnitRemarks(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.Organization = this.Organization;
    _o.Location = this.Location;
  }
  public static Offset<Operatingunit> Pack(FlatBufferBuilder builder, OperatingunitT _o) {
    if (_o == null) return default(Offset<Operatingunit>);
    var _idOperatingUnit = _o.IdOperatingUnit == null ? default(StringOffset) : builder.CreateString(_o.IdOperatingUnit);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _altOperatingUnitId = _o.AltOperatingUnitId == null ? default(StringOffset) : builder.CreateString(_o.AltOperatingUnitId);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _idLocation = _o.IdLocation == null ? default(StringOffset) : builder.CreateString(_o.IdLocation);
    var _idContact = _o.IdContact == null ? default(StringOffset) : builder.CreateString(_o.IdContact);
    var _idOrganization = _o.IdOrganization == null ? default(StringOffset) : builder.CreateString(_o.IdOrganization);
    var _unitIdentifier = _o.UnitIdentifier == null ? default(StringOffset) : builder.CreateString(_o.UnitIdentifier);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _altCountryCode = _o.AltCountryCode == null ? default(StringOffset) : builder.CreateString(_o.AltCountryCode);
    var _wac = _o.Wac == null ? default(StringOffset) : builder.CreateString(_o.Wac);
    var _operStatus = _o.OperStatus == null ? default(StringOffset) : builder.CreateString(_o.OperStatus);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _conditionAvail = _o.ConditionAvail == null ? default(StringOffset) : builder.CreateString(_o.ConditionAvail);
    var _fpa = _o.Fpa == null ? default(StringOffset) : builder.CreateString(_o.Fpa);
    var _ident = _o.Ident == null ? default(StringOffset) : builder.CreateString(_o.Ident);
    var _allegiance = _o.Allegiance == null ? default(StringOffset) : builder.CreateString(_o.Allegiance);
    var _altAllegiance = _o.AltAllegiance == null ? default(StringOffset) : builder.CreateString(_o.AltAllegiance);
    var _locName = _o.LocName == null ? default(StringOffset) : builder.CreateString(_o.LocName);
    var _locReason = _o.LocReason == null ? default(StringOffset) : builder.CreateString(_o.LocReason);
    var _force = _o.Force == null ? default(StringOffset) : builder.CreateString(_o.Force);
    var _forceName = _o.ForceName == null ? default(StringOffset) : builder.CreateString(_o.ForceName);
    var _functRole = _o.FunctRole == null ? default(StringOffset) : builder.CreateString(_o.FunctRole);
    var _msnPrimary = _o.MsnPrimary == null ? default(StringOffset) : builder.CreateString(_o.MsnPrimary);
    var _msnPrimarySpecialty = _o.MsnPrimarySpecialty == null ? default(StringOffset) : builder.CreateString(_o.MsnPrimarySpecialty);
    var _divCat = _o.DivCat == null ? default(StringOffset) : builder.CreateString(_o.DivCat);
    var _echelon = _o.Echelon == null ? default(StringOffset) : builder.CreateString(_o.Echelon);
    var _echelonTier = _o.EchelonTier == null ? default(StringOffset) : builder.CreateString(_o.EchelonTier);
    var _fleetId = _o.FleetId == null ? default(StringOffset) : builder.CreateString(_o.FleetId);
    var _deployStatus = _o.DeployStatus == null ? default(StringOffset) : builder.CreateString(_o.DeployStatus);
    var _flagFlown = _o.FlagFlown == null ? default(StringOffset) : builder.CreateString(_o.FlagFlown);
    var _coordDatum = _o.CoordDatum == null ? default(StringOffset) : builder.CreateString(_o.CoordDatum);
    var _coord = _o.Coord == null ? default(StringOffset) : builder.CreateString(_o.Coord);
    var _milGridSys = _o.MilGridSys == null ? default(StringOffset) : builder.CreateString(_o.MilGridSys);
    var _milGrid = _o.MilGrid == null ? default(StringOffset) : builder.CreateString(_o.MilGrid);
    var _utm = _o.Utm == null ? default(StringOffset) : builder.CreateString(_o.Utm);
    var _airDefArea = _o.AirDefArea == null ? default(StringOffset) : builder.CreateString(_o.AirDefArea);
    var _polSubdiv = _o.PolSubdiv == null ? default(StringOffset) : builder.CreateString(_o.PolSubdiv);
    var _symCode = _o.SymCode == null ? default(StringOffset) : builder.CreateString(_o.SymCode);
    var _classRating = _o.ClassRating == null ? default(StringOffset) : builder.CreateString(_o.ClassRating);
    var _recStatus = _o.RecStatus == null ? default(StringOffset) : builder.CreateString(_o.RecStatus);
    var _reviewDate = _o.ReviewDate == null ? default(StringOffset) : builder.CreateString(_o.ReviewDate);
    var _resProd = _o.ResProd == null ? default(StringOffset) : builder.CreateString(_o.ResProd);
    var _referenceDoc = _o.ReferenceDoc == null ? default(StringOffset) : builder.CreateString(_o.ReferenceDoc);
    var _operatingUnitRemarks = default(VectorOffset);
    if (_o.OperatingUnitRemarks != null) {
      var __operatingUnitRemarks = new StringOffset[_o.OperatingUnitRemarks.Count];
      for (var _j = 0; _j < __operatingUnitRemarks.Length; ++_j) { __operatingUnitRemarks[_j] = builder.CreateString(_o.OperatingUnitRemarks[_j]); }
      _operatingUnitRemarks = CreateOperatingUnitRemarksVector(builder, __operatingUnitRemarks);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _organization = _o.Organization == null ? default(StringOffset) : builder.CreateString(_o.Organization);
    var _location = _o.Location == null ? default(StringOffset) : builder.CreateString(_o.Location);
    return CreateOperatingunit(
      builder,
      _idOperatingUnit,
      _classificationMarking,
      _altOperatingUnitId,
      _name,
      _description,
      _idLocation,
      _idContact,
      _idOrganization,
      _unitIdentifier,
      _countryCode,
      _altCountryCode,
      _wac,
      _operStatus,
      _condition,
      _conditionAvail,
      _o.Eval,
      _fpa,
      _ident,
      _allegiance,
      _altAllegiance,
      _locName,
      _locReason,
      _force,
      _forceName,
      _functRole,
      _msnPrimary,
      _msnPrimarySpecialty,
      _o.MasterUnit,
      _o.StylizedUnit,
      _divCat,
      _echelon,
      _echelonTier,
      _fleetId,
      _deployStatus,
      _flagFlown,
      _coordDatum,
      _coord,
      _o.CoordDerivAcc,
      _o.Lat,
      _o.Lon,
      _o.ElevMsl,
      _o.ElevMslConfLvl,
      _o.ElevMslDerivAcc,
      _o.GeoidalMslSep,
      _milGridSys,
      _milGrid,
      _utm,
      _airDefArea,
      _polSubdiv,
      _symCode,
      _classRating,
      _recStatus,
      _reviewDate,
      _resProd,
      _referenceDoc,
      _operatingUnitRemarks,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _o.DataMode,
      _organization,
      _location);
  }
}

public class OperatingunitT
{
  public string IdOperatingUnit { get; set; }
  public string ClassificationMarking { get; set; }
  public string AltOperatingUnitId { get; set; }
  public string Name { get; set; }
  public string Description { get; set; }
  public string IdLocation { get; set; }
  public string IdContact { get; set; }
  public string IdOrganization { get; set; }
  public string UnitIdentifier { get; set; }
  public string CountryCode { get; set; }
  public string AltCountryCode { get; set; }
  public string Wac { get; set; }
  public string OperStatus { get; set; }
  public string Condition { get; set; }
  public string ConditionAvail { get; set; }
  public int Eval { get; set; }
  public string Fpa { get; set; }
  public string Ident { get; set; }
  public string Allegiance { get; set; }
  public string AltAllegiance { get; set; }
  public string LocName { get; set; }
  public string LocReason { get; set; }
  public string Force { get; set; }
  public string ForceName { get; set; }
  public string FunctRole { get; set; }
  public string MsnPrimary { get; set; }
  public string MsnPrimarySpecialty { get; set; }
  public bool MasterUnit { get; set; }
  public bool StylizedUnit { get; set; }
  public string DivCat { get; set; }
  public string Echelon { get; set; }
  public string EchelonTier { get; set; }
  public string FleetId { get; set; }
  public string DeployStatus { get; set; }
  public string FlagFlown { get; set; }
  public string CoordDatum { get; set; }
  public string Coord { get; set; }
  public double CoordDerivAcc { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double ElevMsl { get; set; }
  public int ElevMslConfLvl { get; set; }
  public double ElevMslDerivAcc { get; set; }
  public double GeoidalMslSep { get; set; }
  public string MilGridSys { get; set; }
  public string MilGrid { get; set; }
  public string Utm { get; set; }
  public string AirDefArea { get; set; }
  public string PolSubdiv { get; set; }
  public string SymCode { get; set; }
  public string ClassRating { get; set; }
  public string RecStatus { get; set; }
  public string ReviewDate { get; set; }
  public string ResProd { get; set; }
  public string ReferenceDoc { get; set; }
  public List<string> OperatingUnitRemarks { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Operatingunit_dataMode_Enum DataMode { get; set; }
  public string Organization { get; set; }
  public string Location { get; set; }

  public OperatingunitT() {
    this.IdOperatingUnit = null;
    this.ClassificationMarking = null;
    this.AltOperatingUnitId = null;
    this.Name = null;
    this.Description = null;
    this.IdLocation = null;
    this.IdContact = null;
    this.IdOrganization = null;
    this.UnitIdentifier = null;
    this.CountryCode = null;
    this.AltCountryCode = null;
    this.Wac = null;
    this.OperStatus = null;
    this.Condition = null;
    this.ConditionAvail = null;
    this.Eval = 0;
    this.Fpa = null;
    this.Ident = null;
    this.Allegiance = null;
    this.AltAllegiance = null;
    this.LocName = null;
    this.LocReason = null;
    this.Force = null;
    this.ForceName = null;
    this.FunctRole = null;
    this.MsnPrimary = null;
    this.MsnPrimarySpecialty = null;
    this.MasterUnit = false;
    this.StylizedUnit = false;
    this.DivCat = null;
    this.Echelon = null;
    this.EchelonTier = null;
    this.FleetId = null;
    this.DeployStatus = null;
    this.FlagFlown = null;
    this.CoordDatum = null;
    this.Coord = null;
    this.CoordDerivAcc = 0.0;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.ElevMsl = 0.0;
    this.ElevMslConfLvl = 0;
    this.ElevMslDerivAcc = 0.0;
    this.GeoidalMslSep = 0.0;
    this.MilGridSys = null;
    this.MilGrid = null;
    this.Utm = null;
    this.AirDefArea = null;
    this.PolSubdiv = null;
    this.SymCode = null;
    this.ClassRating = null;
    this.RecStatus = null;
    this.ReviewDate = null;
    this.ResProd = null;
    this.ReferenceDoc = null;
    this.OperatingUnitRemarks = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Operatingunit_dataMode_Enum.REAL;
    this.Organization = null;
    this.Location = null;
  }
  public static OperatingunitT DeserializeFromBinary(byte[] fbBuffer) {
    return Operatingunit.GetRootAsOperatingunit(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Operatingunit.FinishOperatingunitBuffer(fbb, Operatingunit.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OperatingunitVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdOperatingUnit*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*AltOperatingUnitId*/, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Description*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdLocation*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdContact*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdOrganization*/, false)
      && verifier.VerifyString(tablePos, 20 /*UnitIdentifier*/, false)
      && verifier.VerifyString(tablePos, 22 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 24 /*AltCountryCode*/, false)
      && verifier.VerifyString(tablePos, 26 /*Wac*/, false)
      && verifier.VerifyString(tablePos, 28 /*OperStatus*/, false)
      && verifier.VerifyString(tablePos, 30 /*Condition*/, false)
      && verifier.VerifyString(tablePos, 32 /*ConditionAvail*/, false)
      && verifier.VerifyField(tablePos, 34 /*Eval*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*Fpa*/, false)
      && verifier.VerifyString(tablePos, 38 /*Ident*/, false)
      && verifier.VerifyString(tablePos, 40 /*Allegiance*/, false)
      && verifier.VerifyString(tablePos, 42 /*AltAllegiance*/, false)
      && verifier.VerifyString(tablePos, 44 /*LocName*/, false)
      && verifier.VerifyString(tablePos, 46 /*LocReason*/, false)
      && verifier.VerifyString(tablePos, 48 /*Force*/, false)
      && verifier.VerifyString(tablePos, 50 /*ForceName*/, false)
      && verifier.VerifyString(tablePos, 52 /*FunctRole*/, false)
      && verifier.VerifyString(tablePos, 54 /*MsnPrimary*/, false)
      && verifier.VerifyString(tablePos, 56 /*MsnPrimarySpecialty*/, false)
      && verifier.VerifyField(tablePos, 58 /*MasterUnit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 60 /*StylizedUnit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 62 /*DivCat*/, false)
      && verifier.VerifyString(tablePos, 64 /*Echelon*/, false)
      && verifier.VerifyString(tablePos, 66 /*EchelonTier*/, false)
      && verifier.VerifyString(tablePos, 68 /*FleetId*/, false)
      && verifier.VerifyString(tablePos, 70 /*DeployStatus*/, false)
      && verifier.VerifyString(tablePos, 72 /*FlagFlown*/, false)
      && verifier.VerifyString(tablePos, 74 /*CoordDatum*/, false)
      && verifier.VerifyString(tablePos, 76 /*Coord*/, false)
      && verifier.VerifyField(tablePos, 78 /*CoordDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*ElevMsl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*ElevMslConfLvl*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*ElevMslDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*GeoidalMslSep*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 92 /*MilGridSys*/, false)
      && verifier.VerifyString(tablePos, 94 /*MilGrid*/, false)
      && verifier.VerifyString(tablePos, 96 /*Utm*/, false)
      && verifier.VerifyString(tablePos, 98 /*AirDefArea*/, false)
      && verifier.VerifyString(tablePos, 100 /*PolSubdiv*/, false)
      && verifier.VerifyString(tablePos, 102 /*SymCode*/, false)
      && verifier.VerifyString(tablePos, 104 /*ClassRating*/, false)
      && verifier.VerifyString(tablePos, 106 /*RecStatus*/, false)
      && verifier.VerifyString(tablePos, 108 /*ReviewDate*/, false)
      && verifier.VerifyString(tablePos, 110 /*ResProd*/, false)
      && verifier.VerifyString(tablePos, 112 /*ReferenceDoc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 114 /*OperatingUnitRemarks*/, false)
      && verifier.VerifyString(tablePos, 116 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 118 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 120 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 122 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 124 /*Source*/, false)
      && verifier.VerifyString(tablePos, 126 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 128 /*DataMode*/, 1 /*Operatingunit_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 130 /*Organization*/, false)
      && verifier.VerifyString(tablePos, 132 /*Location*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
