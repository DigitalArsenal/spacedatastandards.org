// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
public struct AirspaceControlOrder_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlOrder_Full GetRootAsAirspaceControlOrder_Full(ByteBuffer _bb) { return GetRootAsAirspaceControlOrder_Full(_bb, new AirspaceControlOrder_Full()); }
  public static AirspaceControlOrder_Full GetRootAsAirspaceControlOrder_Full(ByteBuffer _bb, AirspaceControlOrder_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirspaceControlOrder_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRS"); }
  public static bool VerifyAirspaceControlOrder_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRS", false, AirspaceControlOrder_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirspaceControlOrder_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: EXAMPLE URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(8); }
  /// Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string OpExName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOpExNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOpExNameArray() { return __p.__vector_as_array<byte>(10); }
  /// The originator of this reference.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Originator { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginatorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOriginatorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOriginatorArray() { return __p.__vector_as_array<byte>(12); }
  /// The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string StopTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStopTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStopTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  /// Example: /// Example: AFTER
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string StopQualifier { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopQualifierBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStopQualifierBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStopQualifierArray() { return __p.__vector_as_array<byte>(18); }
  /// Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
  /// Example: /// Example: CONTROL
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OpExInfo { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExInfoBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOpExInfoBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOpExInfoArray() { return __p.__vector_as_array<byte>(20); }
  /// The secondary supplementary nickname of the option or the alternative of the operational plan or order.
  /// Example: /// Example: ORANGE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string OpExInfoAlt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExInfoAltBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOpExInfoAltBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOpExInfoAltArray() { return __p.__vector_as_array<byte>(22); }
  /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  /// Example: /// Example: SACEUR 106
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PlanOrigNum { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlanOrigNumBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPlanOrigNumBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPlanOrigNumArray() { return __p.__vector_as_array<byte>(24); }
  /// The unique message identifier sequentially assigned by the originator.
  /// Example: /// Example: 1201003
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string SerialNum { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSerialNumBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSerialNumArray() { return __p.__vector_as_array<byte>(26); }
  /// The month in which the message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string Month { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonthBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMonthBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMonthArray() { return __p.__vector_as_array<byte>(28); }
  /// The qualifier which caveats the message status.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Qualifier { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualifierBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetQualifierBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetQualifierArray() { return __p.__vector_as_array<byte>(30); }
  /// The serial number associated with the message qualifier.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int QualSN { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Name of the area of the command for which the ACO is valid.
  /// Example: /// Example: FORT BRAGG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string AreaOfValidity { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaOfValidityBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetAreaOfValidityBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetAreaOfValidityArray() { return __p.__vector_as_array<byte>(34); }
  /// The serial number of this airspace control order.
  /// Example: /// Example: 27B
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string AcoSerialNum { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAcoSerialNumBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetAcoSerialNumBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetAcoSerialNumArray() { return __p.__vector_as_array<byte>(36); }
  /// Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
  /// Example: /// Example: EUR-T
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string GeoDatum { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoDatumBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetGeoDatumBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetGeoDatumArray() { return __p.__vector_as_array<byte>(38); }
  /// Free text information expressed in natural language.
  /// Example: /// Example: CHOKE POINTS
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AcoComments { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAcoCommentsBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetAcoCommentsBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetAcoCommentsArray() { return __p.__vector_as_array<byte>(40); }
  /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AirspaceControlOrderReferences(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AirspaceControlOrderReferencesLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AirspaceControlMeansStatus(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AirspaceControlMeansStatusLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of unique link 16 identifier that will be assigned to a future airspace control means.
  /// Example: /// Example: ['A2467', 'A3466', 'AA232']
  /// Constraints: No constraints specified.
  public string UndLnkTrk(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UndLnkTrkLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Markings defining the source material or the original classification authority for the ACO message.
  /// Example: /// Example: ORIG:USJFCOM
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ClassSource { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassSourceBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetClassSourceBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetClassSourceArray() { return __p.__vector_as_array<byte>(48); }
  /// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
  /// Example: /// Example: ['15C', '10C']
  /// Constraints: No constraints specified.
  public string ClassReason(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ClassReasonLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
  /// Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
  /// Constraints: No constraints specified.
  public string DowngradeInsDate(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DowngradeInsDateLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
  /// Example: /// Example: ['X1', 'X2']
  /// Constraints: No constraints specified.
  public string DeclassExemptionCode(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeclassExemptionCodeLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(56); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(58); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(60); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(62); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(64); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(66); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirspaceControlOrder_Full_dataMode_Enum DataMode { get { int o = __p.__offset(68); return o != 0 ? (AirspaceControlOrder_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirspaceControlOrder_Full_dataMode_Enum.REAL; } }

  public static Offset<AirspaceControlOrder_Full> CreateAirspaceControlOrder_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset opExNameOffset = default(StringOffset),
      StringOffset originatorOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset stopTimeOffset = default(StringOffset),
      StringOffset stopQualifierOffset = default(StringOffset),
      StringOffset opExInfoOffset = default(StringOffset),
      StringOffset opExInfoAltOffset = default(StringOffset),
      StringOffset planOrigNumOffset = default(StringOffset),
      StringOffset serialNumOffset = default(StringOffset),
      StringOffset monthOffset = default(StringOffset),
      StringOffset qualifierOffset = default(StringOffset),
      int qualSN = 0,
      StringOffset areaOfValidityOffset = default(StringOffset),
      StringOffset acoSerialNumOffset = default(StringOffset),
      StringOffset geoDatumOffset = default(StringOffset),
      StringOffset acoCommentsOffset = default(StringOffset),
      VectorOffset airspaceControlOrderReferencesOffset = default(VectorOffset),
      VectorOffset airspaceControlMeansStatusOffset = default(VectorOffset),
      VectorOffset undLnkTrkOffset = default(VectorOffset),
      StringOffset classSourceOffset = default(StringOffset),
      VectorOffset classReasonOffset = default(VectorOffset),
      VectorOffset downgradeInsDateOffset = default(VectorOffset),
      VectorOffset declassExemptionCodeOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirspaceControlOrder_Full_dataMode_Enum dataMode = AirspaceControlOrder_Full_dataMode_Enum.REAL) {
    builder.StartTable(33);
    AirspaceControlOrder_Full.AddOrigNetwork(builder, origNetworkOffset);
    AirspaceControlOrder_Full.AddOrigin(builder, originOffset);
    AirspaceControlOrder_Full.AddSource(builder, sourceOffset);
    AirspaceControlOrder_Full.AddSourceDL(builder, sourceDLOffset);
    AirspaceControlOrder_Full.AddCreatedBy(builder, createdByOffset);
    AirspaceControlOrder_Full.AddCreatedAt(builder, createdAtOffset);
    AirspaceControlOrder_Full.AddDeclassExemptionCode(builder, declassExemptionCodeOffset);
    AirspaceControlOrder_Full.AddDowngradeInsDate(builder, downgradeInsDateOffset);
    AirspaceControlOrder_Full.AddClassReason(builder, classReasonOffset);
    AirspaceControlOrder_Full.AddClassSource(builder, classSourceOffset);
    AirspaceControlOrder_Full.AddUndLnkTrk(builder, undLnkTrkOffset);
    AirspaceControlOrder_Full.AddAirspaceControlMeansStatus(builder, airspaceControlMeansStatusOffset);
    AirspaceControlOrder_Full.AddAirspaceControlOrderReferences(builder, airspaceControlOrderReferencesOffset);
    AirspaceControlOrder_Full.AddAcoComments(builder, acoCommentsOffset);
    AirspaceControlOrder_Full.AddGeoDatum(builder, geoDatumOffset);
    AirspaceControlOrder_Full.AddAcoSerialNum(builder, acoSerialNumOffset);
    AirspaceControlOrder_Full.AddAreaOfValidity(builder, areaOfValidityOffset);
    AirspaceControlOrder_Full.AddQualSN(builder, qualSN);
    AirspaceControlOrder_Full.AddQualifier(builder, qualifierOffset);
    AirspaceControlOrder_Full.AddMonth(builder, monthOffset);
    AirspaceControlOrder_Full.AddSerialNum(builder, serialNumOffset);
    AirspaceControlOrder_Full.AddPlanOrigNum(builder, planOrigNumOffset);
    AirspaceControlOrder_Full.AddOpExInfoAlt(builder, opExInfoAltOffset);
    AirspaceControlOrder_Full.AddOpExInfo(builder, opExInfoOffset);
    AirspaceControlOrder_Full.AddStopQualifier(builder, stopQualifierOffset);
    AirspaceControlOrder_Full.AddStopTime(builder, stopTimeOffset);
    AirspaceControlOrder_Full.AddStartTime(builder, startTimeOffset);
    AirspaceControlOrder_Full.AddOriginator(builder, originatorOffset);
    AirspaceControlOrder_Full.AddOpExName(builder, opExNameOffset);
    AirspaceControlOrder_Full.AddRawFileURI(builder, rawFileURIOffset);
    AirspaceControlOrder_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    AirspaceControlOrder_Full.AddId(builder, idOffset);
    AirspaceControlOrder_Full.AddDataMode(builder, dataMode);
    return AirspaceControlOrder_Full.EndAirspaceControlOrder_Full(builder);
  }

  public static void StartAirspaceControlOrder_Full(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(2, rawFileURIOffset.Value, 0); }
  public static void AddOpExName(FlatBufferBuilder builder, StringOffset opExNameOffset) { builder.AddOffset(3, opExNameOffset.Value, 0); }
  public static void AddOriginator(FlatBufferBuilder builder, StringOffset originatorOffset) { builder.AddOffset(4, originatorOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(5, startTimeOffset.Value, 0); }
  public static void AddStopTime(FlatBufferBuilder builder, StringOffset stopTimeOffset) { builder.AddOffset(6, stopTimeOffset.Value, 0); }
  public static void AddStopQualifier(FlatBufferBuilder builder, StringOffset stopQualifierOffset) { builder.AddOffset(7, stopQualifierOffset.Value, 0); }
  public static void AddOpExInfo(FlatBufferBuilder builder, StringOffset opExInfoOffset) { builder.AddOffset(8, opExInfoOffset.Value, 0); }
  public static void AddOpExInfoAlt(FlatBufferBuilder builder, StringOffset opExInfoAltOffset) { builder.AddOffset(9, opExInfoAltOffset.Value, 0); }
  public static void AddPlanOrigNum(FlatBufferBuilder builder, StringOffset planOrigNumOffset) { builder.AddOffset(10, planOrigNumOffset.Value, 0); }
  public static void AddSerialNum(FlatBufferBuilder builder, StringOffset serialNumOffset) { builder.AddOffset(11, serialNumOffset.Value, 0); }
  public static void AddMonth(FlatBufferBuilder builder, StringOffset monthOffset) { builder.AddOffset(12, monthOffset.Value, 0); }
  public static void AddQualifier(FlatBufferBuilder builder, StringOffset qualifierOffset) { builder.AddOffset(13, qualifierOffset.Value, 0); }
  public static void AddQualSN(FlatBufferBuilder builder, int qualSN) { builder.AddInt(14, qualSN, 0); }
  public static void AddAreaOfValidity(FlatBufferBuilder builder, StringOffset areaOfValidityOffset) { builder.AddOffset(15, areaOfValidityOffset.Value, 0); }
  public static void AddAcoSerialNum(FlatBufferBuilder builder, StringOffset acoSerialNumOffset) { builder.AddOffset(16, acoSerialNumOffset.Value, 0); }
  public static void AddGeoDatum(FlatBufferBuilder builder, StringOffset geoDatumOffset) { builder.AddOffset(17, geoDatumOffset.Value, 0); }
  public static void AddAcoComments(FlatBufferBuilder builder, StringOffset acoCommentsOffset) { builder.AddOffset(18, acoCommentsOffset.Value, 0); }
  public static void AddAirspaceControlOrderReferences(FlatBufferBuilder builder, VectorOffset airspaceControlOrderReferencesOffset) { builder.AddOffset(19, airspaceControlOrderReferencesOffset.Value, 0); }
  public static VectorOffset CreateAirspaceControlOrderReferencesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlOrderReferencesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlOrderReferencesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlOrderReferencesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAirspaceControlOrderReferencesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAirspaceControlMeansStatus(FlatBufferBuilder builder, VectorOffset airspaceControlMeansStatusOffset) { builder.AddOffset(20, airspaceControlMeansStatusOffset.Value, 0); }
  public static VectorOffset CreateAirspaceControlMeansStatusVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansStatusVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansStatusVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAirspaceControlMeansStatusVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAirspaceControlMeansStatusVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUndLnkTrk(FlatBufferBuilder builder, VectorOffset undLnkTrkOffset) { builder.AddOffset(21, undLnkTrkOffset.Value, 0); }
  public static VectorOffset CreateUndLnkTrkVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUndLnkTrkVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUndLnkTrkVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUndLnkTrkVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUndLnkTrkVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClassSource(FlatBufferBuilder builder, StringOffset classSourceOffset) { builder.AddOffset(22, classSourceOffset.Value, 0); }
  public static void AddClassReason(FlatBufferBuilder builder, VectorOffset classReasonOffset) { builder.AddOffset(23, classReasonOffset.Value, 0); }
  public static VectorOffset CreateClassReasonVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClassReasonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDowngradeInsDate(FlatBufferBuilder builder, VectorOffset downgradeInsDateOffset) { builder.AddOffset(24, downgradeInsDateOffset.Value, 0); }
  public static VectorOffset CreateDowngradeInsDateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDowngradeInsDateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDowngradeInsDateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDowngradeInsDateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDowngradeInsDateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeclassExemptionCode(FlatBufferBuilder builder, VectorOffset declassExemptionCodeOffset) { builder.AddOffset(25, declassExemptionCodeOffset.Value, 0); }
  public static VectorOffset CreateDeclassExemptionCodeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeclassExemptionCodeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeclassExemptionCodeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeclassExemptionCodeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeclassExemptionCodeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(26, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(27, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(28, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(29, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(30, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(31, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirspaceControlOrder_Full_dataMode_Enum dataMode) { builder.AddSbyte(32, (sbyte)dataMode, 0); }
  public static Offset<AirspaceControlOrder_Full> EndAirspaceControlOrder_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirspaceControlOrder_Full>(o);
  }
  public static void FinishAirspaceControlOrder_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceControlOrder_Full> offset) { builder.Finish(offset.Value, "AIRS"); }
  public static void FinishSizePrefixedAirspaceControlOrder_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceControlOrder_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRS"); }
  public AirspaceControlOrder_FullT UnPack() {
    var _o = new AirspaceControlOrder_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirspaceControlOrder_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.RawFileURI = this.RawFileURI;
    _o.OpExName = this.OpExName;
    _o.Originator = this.Originator;
    _o.StartTime = this.StartTime;
    _o.StopTime = this.StopTime;
    _o.StopQualifier = this.StopQualifier;
    _o.OpExInfo = this.OpExInfo;
    _o.OpExInfoAlt = this.OpExInfoAlt;
    _o.PlanOrigNum = this.PlanOrigNum;
    _o.SerialNum = this.SerialNum;
    _o.Month = this.Month;
    _o.Qualifier = this.Qualifier;
    _o.QualSN = this.QualSN;
    _o.AreaOfValidity = this.AreaOfValidity;
    _o.AcoSerialNum = this.AcoSerialNum;
    _o.GeoDatum = this.GeoDatum;
    _o.AcoComments = this.AcoComments;
    _o.AirspaceControlOrderReferences = new List<string>();
    for (var _j = 0; _j < this.AirspaceControlOrderReferencesLength; ++_j) {_o.AirspaceControlOrderReferences.Add(this.AirspaceControlOrderReferences(_j));}
    _o.AirspaceControlMeansStatus = new List<string>();
    for (var _j = 0; _j < this.AirspaceControlMeansStatusLength; ++_j) {_o.AirspaceControlMeansStatus.Add(this.AirspaceControlMeansStatus(_j));}
    _o.UndLnkTrk = new List<string>();
    for (var _j = 0; _j < this.UndLnkTrkLength; ++_j) {_o.UndLnkTrk.Add(this.UndLnkTrk(_j));}
    _o.ClassSource = this.ClassSource;
    _o.ClassReason = new List<string>();
    for (var _j = 0; _j < this.ClassReasonLength; ++_j) {_o.ClassReason.Add(this.ClassReason(_j));}
    _o.DowngradeInsDate = new List<string>();
    for (var _j = 0; _j < this.DowngradeInsDateLength; ++_j) {_o.DowngradeInsDate.Add(this.DowngradeInsDate(_j));}
    _o.DeclassExemptionCode = new List<string>();
    for (var _j = 0; _j < this.DeclassExemptionCodeLength; ++_j) {_o.DeclassExemptionCode.Add(this.DeclassExemptionCode(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirspaceControlOrder_Full> Pack(FlatBufferBuilder builder, AirspaceControlOrder_FullT _o) {
    if (_o == null) return default(Offset<AirspaceControlOrder_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _opExName = _o.OpExName == null ? default(StringOffset) : builder.CreateString(_o.OpExName);
    var _originator = _o.Originator == null ? default(StringOffset) : builder.CreateString(_o.Originator);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _stopTime = _o.StopTime == null ? default(StringOffset) : builder.CreateString(_o.StopTime);
    var _stopQualifier = _o.StopQualifier == null ? default(StringOffset) : builder.CreateString(_o.StopQualifier);
    var _opExInfo = _o.OpExInfo == null ? default(StringOffset) : builder.CreateString(_o.OpExInfo);
    var _opExInfoAlt = _o.OpExInfoAlt == null ? default(StringOffset) : builder.CreateString(_o.OpExInfoAlt);
    var _planOrigNum = _o.PlanOrigNum == null ? default(StringOffset) : builder.CreateString(_o.PlanOrigNum);
    var _serialNum = _o.SerialNum == null ? default(StringOffset) : builder.CreateString(_o.SerialNum);
    var _month = _o.Month == null ? default(StringOffset) : builder.CreateString(_o.Month);
    var _qualifier = _o.Qualifier == null ? default(StringOffset) : builder.CreateString(_o.Qualifier);
    var _areaOfValidity = _o.AreaOfValidity == null ? default(StringOffset) : builder.CreateString(_o.AreaOfValidity);
    var _acoSerialNum = _o.AcoSerialNum == null ? default(StringOffset) : builder.CreateString(_o.AcoSerialNum);
    var _geoDatum = _o.GeoDatum == null ? default(StringOffset) : builder.CreateString(_o.GeoDatum);
    var _acoComments = _o.AcoComments == null ? default(StringOffset) : builder.CreateString(_o.AcoComments);
    var _airspaceControlOrderReferences = default(VectorOffset);
    if (_o.AirspaceControlOrderReferences != null) {
      var __airspaceControlOrderReferences = new StringOffset[_o.AirspaceControlOrderReferences.Count];
      for (var _j = 0; _j < __airspaceControlOrderReferences.Length; ++_j) { __airspaceControlOrderReferences[_j] = builder.CreateString(_o.AirspaceControlOrderReferences[_j]); }
      _airspaceControlOrderReferences = CreateAirspaceControlOrderReferencesVector(builder, __airspaceControlOrderReferences);
    }
    var _airspaceControlMeansStatus = default(VectorOffset);
    if (_o.AirspaceControlMeansStatus != null) {
      var __airspaceControlMeansStatus = new StringOffset[_o.AirspaceControlMeansStatus.Count];
      for (var _j = 0; _j < __airspaceControlMeansStatus.Length; ++_j) { __airspaceControlMeansStatus[_j] = builder.CreateString(_o.AirspaceControlMeansStatus[_j]); }
      _airspaceControlMeansStatus = CreateAirspaceControlMeansStatusVector(builder, __airspaceControlMeansStatus);
    }
    var _undLnkTrk = default(VectorOffset);
    if (_o.UndLnkTrk != null) {
      var __undLnkTrk = new StringOffset[_o.UndLnkTrk.Count];
      for (var _j = 0; _j < __undLnkTrk.Length; ++_j) { __undLnkTrk[_j] = builder.CreateString(_o.UndLnkTrk[_j]); }
      _undLnkTrk = CreateUndLnkTrkVector(builder, __undLnkTrk);
    }
    var _classSource = _o.ClassSource == null ? default(StringOffset) : builder.CreateString(_o.ClassSource);
    var _classReason = default(VectorOffset);
    if (_o.ClassReason != null) {
      var __classReason = new StringOffset[_o.ClassReason.Count];
      for (var _j = 0; _j < __classReason.Length; ++_j) { __classReason[_j] = builder.CreateString(_o.ClassReason[_j]); }
      _classReason = CreateClassReasonVector(builder, __classReason);
    }
    var _downgradeInsDate = default(VectorOffset);
    if (_o.DowngradeInsDate != null) {
      var __downgradeInsDate = new StringOffset[_o.DowngradeInsDate.Count];
      for (var _j = 0; _j < __downgradeInsDate.Length; ++_j) { __downgradeInsDate[_j] = builder.CreateString(_o.DowngradeInsDate[_j]); }
      _downgradeInsDate = CreateDowngradeInsDateVector(builder, __downgradeInsDate);
    }
    var _declassExemptionCode = default(VectorOffset);
    if (_o.DeclassExemptionCode != null) {
      var __declassExemptionCode = new StringOffset[_o.DeclassExemptionCode.Count];
      for (var _j = 0; _j < __declassExemptionCode.Length; ++_j) { __declassExemptionCode[_j] = builder.CreateString(_o.DeclassExemptionCode[_j]); }
      _declassExemptionCode = CreateDeclassExemptionCodeVector(builder, __declassExemptionCode);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirspaceControlOrder_Full(
      builder,
      _id,
      _classificationMarking,
      _rawFileURI,
      _opExName,
      _originator,
      _startTime,
      _stopTime,
      _stopQualifier,
      _opExInfo,
      _opExInfoAlt,
      _planOrigNum,
      _serialNum,
      _month,
      _qualifier,
      _o.QualSN,
      _areaOfValidity,
      _acoSerialNum,
      _geoDatum,
      _acoComments,
      _airspaceControlOrderReferences,
      _airspaceControlMeansStatus,
      _undLnkTrk,
      _classSource,
      _classReason,
      _downgradeInsDate,
      _declassExemptionCode,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirspaceControlOrder_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string RawFileURI { get; set; }
  public string OpExName { get; set; }
  public string Originator { get; set; }
  public string StartTime { get; set; }
  public string StopTime { get; set; }
  public string StopQualifier { get; set; }
  public string OpExInfo { get; set; }
  public string OpExInfoAlt { get; set; }
  public string PlanOrigNum { get; set; }
  public string SerialNum { get; set; }
  public string Month { get; set; }
  public string Qualifier { get; set; }
  public int QualSN { get; set; }
  public string AreaOfValidity { get; set; }
  public string AcoSerialNum { get; set; }
  public string GeoDatum { get; set; }
  public string AcoComments { get; set; }
  public List<string> AirspaceControlOrderReferences { get; set; }
  public List<string> AirspaceControlMeansStatus { get; set; }
  public List<string> UndLnkTrk { get; set; }
  public string ClassSource { get; set; }
  public List<string> ClassReason { get; set; }
  public List<string> DowngradeInsDate { get; set; }
  public List<string> DeclassExemptionCode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirspaceControlOrder_Full_dataMode_Enum DataMode { get; set; }

  public AirspaceControlOrder_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.RawFileURI = null;
    this.OpExName = null;
    this.Originator = null;
    this.StartTime = null;
    this.StopTime = null;
    this.StopQualifier = null;
    this.OpExInfo = null;
    this.OpExInfoAlt = null;
    this.PlanOrigNum = null;
    this.SerialNum = null;
    this.Month = null;
    this.Qualifier = null;
    this.QualSN = 0;
    this.AreaOfValidity = null;
    this.AcoSerialNum = null;
    this.GeoDatum = null;
    this.AcoComments = null;
    this.AirspaceControlOrderReferences = null;
    this.AirspaceControlMeansStatus = null;
    this.UndLnkTrk = null;
    this.ClassSource = null;
    this.ClassReason = null;
    this.DowngradeInsDate = null;
    this.DeclassExemptionCode = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirspaceControlOrder_Full_dataMode_Enum.REAL;
  }
  public static AirspaceControlOrder_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirspaceControlOrder_Full.GetRootAsAirspaceControlOrder_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirspaceControlOrder_Full.FinishAirspaceControlOrder_FullBuffer(fbb, AirspaceControlOrder_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirspaceControlOrder_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 10 /*OpExName*/, false)
      && verifier.VerifyString(tablePos, 12 /*Originator*/, false)
      && verifier.VerifyString(tablePos, 14 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*StopTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*StopQualifier*/, false)
      && verifier.VerifyString(tablePos, 20 /*OpExInfo*/, false)
      && verifier.VerifyString(tablePos, 22 /*OpExInfoAlt*/, false)
      && verifier.VerifyString(tablePos, 24 /*PlanOrigNum*/, false)
      && verifier.VerifyString(tablePos, 26 /*SerialNum*/, false)
      && verifier.VerifyString(tablePos, 28 /*Month*/, false)
      && verifier.VerifyString(tablePos, 30 /*Qualifier*/, false)
      && verifier.VerifyField(tablePos, 32 /*QualSN*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 34 /*AreaOfValidity*/, false)
      && verifier.VerifyString(tablePos, 36 /*AcoSerialNum*/, false)
      && verifier.VerifyString(tablePos, 38 /*GeoDatum*/, false)
      && verifier.VerifyString(tablePos, 40 /*AcoComments*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*AirspaceControlOrderReferences*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*AirspaceControlMeansStatus*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*UndLnkTrk*/, false)
      && verifier.VerifyString(tablePos, 48 /*ClassSource*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*ClassReason*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*DowngradeInsDate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*DeclassExemptionCode*/, false)
      && verifier.VerifyString(tablePos, 56 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 58 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 60 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 62 /*Source*/, false)
      && verifier.VerifyString(tablePos, 64 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 66 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 68 /*DataMode*/, 1 /*AirspaceControlOrder_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
