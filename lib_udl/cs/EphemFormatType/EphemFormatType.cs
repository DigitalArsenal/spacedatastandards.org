// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// No description available.
public struct EphemFormatType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EphemFormatType GetRootAsEphemFormatType(ByteBuffer _bb) { return GetRootAsEphemFormatType(_bb, new EphemFormatType()); }
  public static EphemFormatType GetRootAsEphemFormatType(ByteBuffer _bb, EphemFormatType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EphemFormatTypeBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EPHE"); }
  public static bool VerifyEphemFormatType(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EPHE", false, EphemFormatTypeVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EphemFormatType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartEphemFormatType(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<EphemFormatType> EndEphemFormatType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EphemFormatType>(o);
  }
  public static void FinishEphemFormatTypeBuffer(FlatBufferBuilder builder, Offset<EphemFormatType> offset) { builder.Finish(offset.Value, "EPHE"); }
  public static void FinishSizePrefixedEphemFormatTypeBuffer(FlatBufferBuilder builder, Offset<EphemFormatType> offset) { builder.FinishSizePrefixed(offset.Value, "EPHE"); }
  public EphemFormatTypeT UnPack() {
    var _o = new EphemFormatTypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EphemFormatTypeT _o) {
  }
  public static Offset<EphemFormatType> Pack(FlatBufferBuilder builder, EphemFormatTypeT _o) {
    if (_o == null) return default(Offset<EphemFormatType>);
    StartEphemFormatType(builder);
    return EndEphemFormatType(builder);
  }
}

public class EphemFormatTypeT
{

  public EphemFormatTypeT() {
  }
  public static EphemFormatTypeT DeserializeFromBinary(byte[] fbBuffer) {
    return EphemFormatType.GetRootAsEphemFormatType(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EphemFormatType.FinishEphemFormatTypeBuffer(fbb, EphemFormatType.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EphemFormatTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTableEnd(tablePos);
  }
}
