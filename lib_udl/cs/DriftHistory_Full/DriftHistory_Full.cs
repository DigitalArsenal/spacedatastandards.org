// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.
public struct DriftHistory_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DriftHistory_Full GetRootAsDriftHistory_Full(ByteBuffer _bb) { return GetRootAsDriftHistory_Full(_bb, new DriftHistory_Full()); }
  public static DriftHistory_Full GetRootAsDriftHistory_Full(ByteBuffer _bb, DriftHistory_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DriftHistory_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DRIF"); }
  public static bool VerifyDriftHistory_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DRIF", false, DriftHistory_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DriftHistory_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: DRIFTHISTORY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Time the drift rate was replaced with another value and no longer the current value.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EffectiveUntil { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectiveUntilBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetEffectiveUntilBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetEffectiveUntilArray() { return __p.__vector_as_array<byte>(10); }
  /// GEO drift rate, if applicable in degrees per day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DriftRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(14); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(16); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(18); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public DriftHistory_Full_dataMode_Enum DataMode { get { int o = __p.__offset(20); return o != 0 ? (DriftHistory_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : DriftHistory_Full_dataMode_Enum.REAL; } }

  public static Offset<DriftHistory_Full> CreateDriftHistory_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset effectiveUntilOffset = default(StringOffset),
      double driftRate = 0.0,
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      DriftHistory_Full_dataMode_Enum dataMode = DriftHistory_Full_dataMode_Enum.REAL) {
    builder.StartTable(9);
    DriftHistory_Full.AddDriftRate(builder, driftRate);
    DriftHistory_Full.AddOrigin(builder, originOffset);
    DriftHistory_Full.AddSource(builder, sourceOffset);
    DriftHistory_Full.AddCreatedBy(builder, createdByOffset);
    DriftHistory_Full.AddEffectiveUntil(builder, effectiveUntilOffset);
    DriftHistory_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    DriftHistory_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    DriftHistory_Full.AddId(builder, idOffset);
    DriftHistory_Full.AddDataMode(builder, dataMode);
    return DriftHistory_Full.EndDriftHistory_Full(builder);
  }

  public static void StartDriftHistory_Full(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(1, idOnOrbitOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddEffectiveUntil(FlatBufferBuilder builder, StringOffset effectiveUntilOffset) { builder.AddOffset(3, effectiveUntilOffset.Value, 0); }
  public static void AddDriftRate(FlatBufferBuilder builder, double driftRate) { builder.AddDouble(4, driftRate, 0.0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(5, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(6, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(7, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, DriftHistory_Full_dataMode_Enum dataMode) { builder.AddSbyte(8, (sbyte)dataMode, 0); }
  public static Offset<DriftHistory_Full> EndDriftHistory_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DriftHistory_Full>(o);
  }
  public static void FinishDriftHistory_FullBuffer(FlatBufferBuilder builder, Offset<DriftHistory_Full> offset) { builder.Finish(offset.Value, "DRIF"); }
  public static void FinishSizePrefixedDriftHistory_FullBuffer(FlatBufferBuilder builder, Offset<DriftHistory_Full> offset) { builder.FinishSizePrefixed(offset.Value, "DRIF"); }
  public DriftHistory_FullT UnPack() {
    var _o = new DriftHistory_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DriftHistory_FullT _o) {
    _o.Id = this.Id;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.EffectiveUntil = this.EffectiveUntil;
    _o.DriftRate = this.DriftRate;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
  }
  public static Offset<DriftHistory_Full> Pack(FlatBufferBuilder builder, DriftHistory_FullT _o) {
    if (_o == null) return default(Offset<DriftHistory_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _effectiveUntil = _o.EffectiveUntil == null ? default(StringOffset) : builder.CreateString(_o.EffectiveUntil);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateDriftHistory_Full(
      builder,
      _id,
      _idOnOrbit,
      _classificationMarking,
      _effectiveUntil,
      _o.DriftRate,
      _createdBy,
      _source,
      _origin,
      _o.DataMode);
  }
}

public class DriftHistory_FullT
{
  public string Id { get; set; }
  public string IdOnOrbit { get; set; }
  public string ClassificationMarking { get; set; }
  public string EffectiveUntil { get; set; }
  public double DriftRate { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public DriftHistory_Full_dataMode_Enum DataMode { get; set; }

  public DriftHistory_FullT() {
    this.Id = null;
    this.IdOnOrbit = null;
    this.ClassificationMarking = null;
    this.EffectiveUntil = null;
    this.DriftRate = 0.0;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = DriftHistory_Full_dataMode_Enum.REAL;
  }
  public static DriftHistory_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return DriftHistory_Full.GetRootAsDriftHistory_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DriftHistory_Full.FinishDriftHistory_FullBuffer(fbb, DriftHistory_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DriftHistory_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*EffectiveUntil*/, false)
      && verifier.VerifyField(tablePos, 12 /*DriftRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 16 /*Source*/, false)
      && verifier.VerifyString(tablePos, 18 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 20 /*DataMode*/, 1 /*DriftHistory_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
