// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
public struct AntennaDetails_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AntennaDetails_Abridged GetRootAsAntennaDetails_Abridged(ByteBuffer _bb) { return GetRootAsAntennaDetails_Abridged(_bb, new AntennaDetails_Abridged()); }
  public static AntennaDetails_Abridged GetRootAsAntennaDetails_Abridged(ByteBuffer _bb, AntennaDetails_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AntennaDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ANTE"); }
  public static bool VerifyAntennaDetails_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ANTE", false, AntennaDetails_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AntennaDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ANTENNADETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier of the parent Antenna.
  /// Example: /// Example: ANTENNA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdAntenna { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAntennaBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdAntennaBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdAntennaArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
  /// Example: /// Example: Reflector
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Type { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// Antenna position (e.g. Top, Nadir, Side).
  /// Example: /// Example: Top
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Position { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPositionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPositionArray() { return __p.__vector_as_array<byte>(12); }
  /// Antenna mode (e.g. TX,RX).
  /// Example: /// Example: TX
  /// Constraints: Minimum length = 0, Maximum length = 4
  public AntennaDetails_Abridged_mode_Enum Mode { get { int o = __p.__offset(14); return o != 0 ? (AntennaDetails_Abridged_mode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AntennaDetails_Abridged_mode_Enum.TX; } }
  /// Boolean indicating if this antenna is steerable.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Steerable { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating if this is a beam forming antenna.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool BeamForming { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// ID of the organization that manufactures the antenna.
  /// Example: /// Example: MANUFACTUREORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Antenna diameter in meters.
  /// Example: /// Example: 0.01
  /// Constraints: No constraints specified.
  public double Diameter { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  /// Example: /// Example: [0.03, 0.05]
  /// Constraints: No constraints specified.
  public string Size(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SizeLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Antenna start of frequency range in Mhz.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  public double StartFrequency { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Antenna end of frequency range in Mhz.
  /// Example: /// Example: 3.3
  /// Constraints: No constraints specified.
  public double EndFrequency { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  /// Example: /// Example: 14.1
  /// Constraints: No constraints specified.
  public double Beamwidth { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Antenna maximum gain in dBi.
  /// Example: /// Example: 20.1
  /// Constraints: No constraints specified.
  public double Gain { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Antenna gain tolerance in dB.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  public double GainTolerance { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Antenna polarization in degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double Polarization { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Antenna description.
  /// Example: /// Example: Description of antenna A
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Description { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(38); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(40); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(42); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(44); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(46); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(48); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AntennaDetails_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(50); return o != 0 ? (AntennaDetails_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AntennaDetails_Abridged_dataMode_Enum.REAL; } }

  public static Offset<AntennaDetails_Abridged> CreateAntennaDetails_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idAntennaOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset positionOffset = default(StringOffset),
      AntennaDetails_Abridged_mode_Enum mode = AntennaDetails_Abridged_mode_Enum.TX,
      bool steerable = false,
      bool beamForming = false,
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      double diameter = 0.0,
      VectorOffset sizeOffset = default(VectorOffset),
      double startFrequency = 0.0,
      double endFrequency = 0.0,
      double beamwidth = 0.0,
      double gain = 0.0,
      double gainTolerance = 0.0,
      double polarization = 0.0,
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AntennaDetails_Abridged_dataMode_Enum dataMode = AntennaDetails_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(24);
    AntennaDetails_Abridged.AddPolarization(builder, polarization);
    AntennaDetails_Abridged.AddGainTolerance(builder, gainTolerance);
    AntennaDetails_Abridged.AddGain(builder, gain);
    AntennaDetails_Abridged.AddBeamwidth(builder, beamwidth);
    AntennaDetails_Abridged.AddEndFrequency(builder, endFrequency);
    AntennaDetails_Abridged.AddStartFrequency(builder, startFrequency);
    AntennaDetails_Abridged.AddDiameter(builder, diameter);
    AntennaDetails_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AntennaDetails_Abridged.AddOrigin(builder, originOffset);
    AntennaDetails_Abridged.AddSource(builder, sourceOffset);
    AntennaDetails_Abridged.AddCreatedBy(builder, createdByOffset);
    AntennaDetails_Abridged.AddCreatedAt(builder, createdAtOffset);
    AntennaDetails_Abridged.AddDescription(builder, descriptionOffset);
    AntennaDetails_Abridged.AddSize(builder, sizeOffset);
    AntennaDetails_Abridged.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    AntennaDetails_Abridged.AddPosition(builder, positionOffset);
    AntennaDetails_Abridged.AddType(builder, typeOffset);
    AntennaDetails_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AntennaDetails_Abridged.AddIdAntenna(builder, idAntennaOffset);
    AntennaDetails_Abridged.AddId(builder, idOffset);
    AntennaDetails_Abridged.AddDataMode(builder, dataMode);
    AntennaDetails_Abridged.AddBeamForming(builder, beamForming);
    AntennaDetails_Abridged.AddSteerable(builder, steerable);
    AntennaDetails_Abridged.AddMode(builder, mode);
    return AntennaDetails_Abridged.EndAntennaDetails_Abridged(builder);
  }

  public static void StartAntennaDetails_Abridged(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdAntenna(FlatBufferBuilder builder, StringOffset idAntennaOffset) { builder.AddOffset(1, idAntennaOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(3, typeOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, StringOffset positionOffset) { builder.AddOffset(4, positionOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, AntennaDetails_Abridged_mode_Enum mode) { builder.AddSbyte(5, (sbyte)mode, 0); }
  public static void AddSteerable(FlatBufferBuilder builder, bool steerable) { builder.AddBool(6, steerable, false); }
  public static void AddBeamForming(FlatBufferBuilder builder, bool beamForming) { builder.AddBool(7, beamForming, false); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(8, manufacturerOrgIdOffset.Value, 0); }
  public static void AddDiameter(FlatBufferBuilder builder, double diameter) { builder.AddDouble(9, diameter, 0.0); }
  public static void AddSize(FlatBufferBuilder builder, VectorOffset sizeOffset) { builder.AddOffset(10, sizeOffset.Value, 0); }
  public static VectorOffset CreateSizeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSizeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSizeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSizeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSizeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStartFrequency(FlatBufferBuilder builder, double startFrequency) { builder.AddDouble(11, startFrequency, 0.0); }
  public static void AddEndFrequency(FlatBufferBuilder builder, double endFrequency) { builder.AddDouble(12, endFrequency, 0.0); }
  public static void AddBeamwidth(FlatBufferBuilder builder, double beamwidth) { builder.AddDouble(13, beamwidth, 0.0); }
  public static void AddGain(FlatBufferBuilder builder, double gain) { builder.AddDouble(14, gain, 0.0); }
  public static void AddGainTolerance(FlatBufferBuilder builder, double gainTolerance) { builder.AddDouble(15, gainTolerance, 0.0); }
  public static void AddPolarization(FlatBufferBuilder builder, double polarization) { builder.AddDouble(16, polarization, 0.0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(17, descriptionOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(18, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(19, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(20, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(21, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(22, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AntennaDetails_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(23, (sbyte)dataMode, 0); }
  public static Offset<AntennaDetails_Abridged> EndAntennaDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AntennaDetails_Abridged>(o);
  }
  public static void FinishAntennaDetails_AbridgedBuffer(FlatBufferBuilder builder, Offset<AntennaDetails_Abridged> offset) { builder.Finish(offset.Value, "ANTE"); }
  public static void FinishSizePrefixedAntennaDetails_AbridgedBuffer(FlatBufferBuilder builder, Offset<AntennaDetails_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ANTE"); }
  public AntennaDetails_AbridgedT UnPack() {
    var _o = new AntennaDetails_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AntennaDetails_AbridgedT _o) {
    _o.Id = this.Id;
    _o.IdAntenna = this.IdAntenna;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.Position = this.Position;
    _o.Mode = this.Mode;
    _o.Steerable = this.Steerable;
    _o.BeamForming = this.BeamForming;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.Diameter = this.Diameter;
    _o.Size = new List<string>();
    for (var _j = 0; _j < this.SizeLength; ++_j) {_o.Size.Add(this.Size(_j));}
    _o.StartFrequency = this.StartFrequency;
    _o.EndFrequency = this.EndFrequency;
    _o.Beamwidth = this.Beamwidth;
    _o.Gain = this.Gain;
    _o.GainTolerance = this.GainTolerance;
    _o.Polarization = this.Polarization;
    _o.Description = this.Description;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AntennaDetails_Abridged> Pack(FlatBufferBuilder builder, AntennaDetails_AbridgedT _o) {
    if (_o == null) return default(Offset<AntennaDetails_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idAntenna = _o.IdAntenna == null ? default(StringOffset) : builder.CreateString(_o.IdAntenna);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _position = _o.Position == null ? default(StringOffset) : builder.CreateString(_o.Position);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _size = default(VectorOffset);
    if (_o.Size != null) {
      var __size = new StringOffset[_o.Size.Count];
      for (var _j = 0; _j < __size.Length; ++_j) { __size[_j] = builder.CreateString(_o.Size[_j]); }
      _size = CreateSizeVector(builder, __size);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAntennaDetails_Abridged(
      builder,
      _id,
      _idAntenna,
      _classificationMarking,
      _type,
      _position,
      _o.Mode,
      _o.Steerable,
      _o.BeamForming,
      _manufacturerOrgId,
      _o.Diameter,
      _size,
      _o.StartFrequency,
      _o.EndFrequency,
      _o.Beamwidth,
      _o.Gain,
      _o.GainTolerance,
      _o.Polarization,
      _description,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AntennaDetails_AbridgedT
{
  public string Id { get; set; }
  public string IdAntenna { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string Position { get; set; }
  public AntennaDetails_Abridged_mode_Enum Mode { get; set; }
  public bool Steerable { get; set; }
  public bool BeamForming { get; set; }
  public string ManufacturerOrgId { get; set; }
  public double Diameter { get; set; }
  public List<string> Size { get; set; }
  public double StartFrequency { get; set; }
  public double EndFrequency { get; set; }
  public double Beamwidth { get; set; }
  public double Gain { get; set; }
  public double GainTolerance { get; set; }
  public double Polarization { get; set; }
  public string Description { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AntennaDetails_Abridged_dataMode_Enum DataMode { get; set; }

  public AntennaDetails_AbridgedT() {
    this.Id = null;
    this.IdAntenna = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.Position = null;
    this.Mode = AntennaDetails_Abridged_mode_Enum.TX;
    this.Steerable = false;
    this.BeamForming = false;
    this.ManufacturerOrgId = null;
    this.Diameter = 0.0;
    this.Size = null;
    this.StartFrequency = 0.0;
    this.EndFrequency = 0.0;
    this.Beamwidth = 0.0;
    this.Gain = 0.0;
    this.GainTolerance = 0.0;
    this.Polarization = 0.0;
    this.Description = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AntennaDetails_Abridged_dataMode_Enum.REAL;
  }
  public static AntennaDetails_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AntennaDetails_Abridged.GetRootAsAntennaDetails_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AntennaDetails_Abridged.FinishAntennaDetails_AbridgedBuffer(fbb, AntennaDetails_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AntennaDetails_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdAntenna*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Type*/, false)
      && verifier.VerifyString(tablePos, 12 /*Position*/, false)
      && verifier.VerifyField(tablePos, 14 /*Mode*/, 1 /*AntennaDetails_Abridged_mode_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*Steerable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*BeamForming*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*ManufacturerOrgId*/, false)
      && verifier.VerifyField(tablePos, 22 /*Diameter*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*Size*/, false)
      && verifier.VerifyField(tablePos, 26 /*StartFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*EndFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Beamwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Gain*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*GainTolerance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Polarization*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 38 /*Description*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 42 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 44 /*Source*/, false)
      && verifier.VerifyString(tablePos, 46 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 48 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 50 /*DataMode*/, 1 /*AntennaDetails_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
