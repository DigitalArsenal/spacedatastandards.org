// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of receiver aircraft associated with this Air Event.
public struct AirEventReceivers_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirEventReceivers_Ingest GetRootAsAirEventReceivers_Ingest(ByteBuffer _bb) { return GetRootAsAirEventReceivers_Ingest(_bb, new AirEventReceivers_Ingest()); }
  public static AirEventReceivers_Ingest GetRootAsAirEventReceivers_Ingest(ByteBuffer _bb, AirEventReceivers_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirEventReceivers_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRE"); }
  public static bool VerifyAirEventReceivers_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRE", false, AirEventReceivers_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirEventReceivers_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The UDL ID of the aircraft sortie this receiver is associated with for this event.
  /// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdReceiverSortie { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdReceiverSortieBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdReceiverSortieBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdReceiverSortieArray() { return __p.__vector_as_array<byte>(4); }
  /// The UDL ID of the mission this receiver is associated with for this event.
  /// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdReceiverMission { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdReceiverMissionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdReceiverMissionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdReceiverMissionArray() { return __p.__vector_as_array<byte>(6); }
  /// The UDL ID of the airfield this receiver is associated with for this event.
  /// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdReceiverAirfield { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdReceiverAirfieldBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdReceiverAirfieldBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdReceiverAirfieldArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalReceiverId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalReceiverIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExternalReceiverIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExternalReceiverIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Coordination record identifier of this receiver.
  /// Example: /// Example: TTC601
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string ReceiverCoord { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverCoordBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetReceiverCoordBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetReceiverCoordArray() { return __p.__vector_as_array<byte>(12); }
  /// The Model Design Series designation of this receiver.
  /// Example: /// Example: KC135R
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ReceiverMDS { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverMDSBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetReceiverMDSBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetReceiverMDSArray() { return __p.__vector_as_array<byte>(14); }
  /// The Air Mobility Command (AMC) mission identifier of this receiver.
  /// Example: /// Example: 8PH000B1S052
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AmcReceiverMissionId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcReceiverMissionIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetAmcReceiverMissionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetAmcReceiverMissionIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Alternate mission identifier of this receiver provided by source.
  /// Example: /// Example: 1UN05201L121
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string AltReceiverMissionId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltReceiverMissionIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetAltReceiverMissionIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetAltReceiverMissionIdArray() { return __p.__vector_as_array<byte>(18); }
  /// The call sign assigned to this receiver.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ReceiverCallSign { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverCallSignBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetReceiverCallSignBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetReceiverCallSignArray() { return __p.__vector_as_array<byte>(20); }
  /// The wing or unit that owns this receiver.
  /// Example: /// Example: 117ARW
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ReceiverOwner { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverOwnerBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetReceiverOwnerBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetReceiverOwnerArray() { return __p.__vector_as_array<byte>(22); }
  /// The name and/or number of the point of contact for this receiver.
  /// Example: /// Example: JOHN SMITH (555)555-5555
  /// Constraints: Minimum length = 0, Maximum length = 68
  public string ReceiverPOC { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverPOCBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetReceiverPOCBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetReceiverPOCArray() { return __p.__vector_as_array<byte>(24); }
  /// Identifies the itinerary point of a mission that this receiver is linked to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  public int ReceiverLegNum { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Location the receiver is deployed to for an air refueling event.
  /// Example: /// Example: KOFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ReceiverDeployedICAO { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverDeployedICAOBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetReceiverDeployedICAOBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetReceiverDeployedICAOArray() { return __p.__vector_as_array<byte>(28); }
  /// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
  /// Example: /// Example: DROGUE
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string ReceiverDeliveryMethod { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverDeliveryMethodBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetReceiverDeliveryMethodBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetReceiverDeliveryMethodArray() { return __p.__vector_as_array<byte>(30); }
  /// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
  /// Example: /// Example: 15000000.1
  /// Constraints: No constraints specified.
  public double FuelOn { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Position of this receiver within a group of receivers in an air refueling event.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int ReceiverCellPosition { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicates the unique number by Unit ID, which identifies an air refueling event.
  /// Example: /// Example: 1018
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string SequenceNum { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSequenceNumBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSequenceNumBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSequenceNumArray() { return __p.__vector_as_array<byte>(36); }
  /// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
  /// Example: /// Example: AMC
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string RecOrg { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecOrgBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetRecOrgBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetRecOrgArray() { return __p.__vector_as_array<byte>(38); }
  /// Number of aircraft contained within one receiver coordination record for an air refueling event.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumRecAircraft { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Type of fuel being transferred to the receiver in an air refueling event.
  /// Example: /// Example: JP8
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string ReceiverFuelType { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverFuelTypeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetReceiverFuelTypeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetReceiverFuelTypeArray() { return __p.__vector_as_array<byte>(42); }
  /// Name of the receiver exercise associated with an air refueling event.
  /// Example: /// Example: NATO19
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string ReceiverExercise { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverExerciseBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetReceiverExerciseBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetReceiverExerciseArray() { return __p.__vector_as_array<byte>(44); }
  /// The package identifier for the receiver in an air refueling event.
  /// Example: /// Example: 135
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string PackageId { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPackageIdBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetPackageIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetPackageIdArray() { return __p.__vector_as_array<byte>(46); }

  public static Offset<AirEventReceivers_Ingest> CreateAirEventReceivers_Ingest(FlatBufferBuilder builder,
      StringOffset idReceiverSortieOffset = default(StringOffset),
      StringOffset idReceiverMissionOffset = default(StringOffset),
      StringOffset idReceiverAirfieldOffset = default(StringOffset),
      StringOffset externalReceiverIdOffset = default(StringOffset),
      StringOffset receiverCoordOffset = default(StringOffset),
      StringOffset receiverMDSOffset = default(StringOffset),
      StringOffset amcReceiverMissionIdOffset = default(StringOffset),
      StringOffset altReceiverMissionIdOffset = default(StringOffset),
      StringOffset receiverCallSignOffset = default(StringOffset),
      StringOffset receiverOwnerOffset = default(StringOffset),
      StringOffset receiverPOCOffset = default(StringOffset),
      int receiverLegNum = 0,
      StringOffset receiverDeployedICAOOffset = default(StringOffset),
      StringOffset receiverDeliveryMethodOffset = default(StringOffset),
      double fuelOn = 0.0,
      int receiverCellPosition = 0,
      StringOffset sequenceNumOffset = default(StringOffset),
      StringOffset recOrgOffset = default(StringOffset),
      int numRecAircraft = 0,
      StringOffset receiverFuelTypeOffset = default(StringOffset),
      StringOffset receiverExerciseOffset = default(StringOffset),
      StringOffset packageIdOffset = default(StringOffset)) {
    builder.StartTable(22);
    AirEventReceivers_Ingest.AddFuelOn(builder, fuelOn);
    AirEventReceivers_Ingest.AddPackageId(builder, packageIdOffset);
    AirEventReceivers_Ingest.AddReceiverExercise(builder, receiverExerciseOffset);
    AirEventReceivers_Ingest.AddReceiverFuelType(builder, receiverFuelTypeOffset);
    AirEventReceivers_Ingest.AddNumRecAircraft(builder, numRecAircraft);
    AirEventReceivers_Ingest.AddRecOrg(builder, recOrgOffset);
    AirEventReceivers_Ingest.AddSequenceNum(builder, sequenceNumOffset);
    AirEventReceivers_Ingest.AddReceiverCellPosition(builder, receiverCellPosition);
    AirEventReceivers_Ingest.AddReceiverDeliveryMethod(builder, receiverDeliveryMethodOffset);
    AirEventReceivers_Ingest.AddReceiverDeployedICAO(builder, receiverDeployedICAOOffset);
    AirEventReceivers_Ingest.AddReceiverLegNum(builder, receiverLegNum);
    AirEventReceivers_Ingest.AddReceiverPOC(builder, receiverPOCOffset);
    AirEventReceivers_Ingest.AddReceiverOwner(builder, receiverOwnerOffset);
    AirEventReceivers_Ingest.AddReceiverCallSign(builder, receiverCallSignOffset);
    AirEventReceivers_Ingest.AddAltReceiverMissionId(builder, altReceiverMissionIdOffset);
    AirEventReceivers_Ingest.AddAmcReceiverMissionId(builder, amcReceiverMissionIdOffset);
    AirEventReceivers_Ingest.AddReceiverMDS(builder, receiverMDSOffset);
    AirEventReceivers_Ingest.AddReceiverCoord(builder, receiverCoordOffset);
    AirEventReceivers_Ingest.AddExternalReceiverId(builder, externalReceiverIdOffset);
    AirEventReceivers_Ingest.AddIdReceiverAirfield(builder, idReceiverAirfieldOffset);
    AirEventReceivers_Ingest.AddIdReceiverMission(builder, idReceiverMissionOffset);
    AirEventReceivers_Ingest.AddIdReceiverSortie(builder, idReceiverSortieOffset);
    return AirEventReceivers_Ingest.EndAirEventReceivers_Ingest(builder);
  }

  public static void StartAirEventReceivers_Ingest(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddIdReceiverSortie(FlatBufferBuilder builder, StringOffset idReceiverSortieOffset) { builder.AddOffset(0, idReceiverSortieOffset.Value, 0); }
  public static void AddIdReceiverMission(FlatBufferBuilder builder, StringOffset idReceiverMissionOffset) { builder.AddOffset(1, idReceiverMissionOffset.Value, 0); }
  public static void AddIdReceiverAirfield(FlatBufferBuilder builder, StringOffset idReceiverAirfieldOffset) { builder.AddOffset(2, idReceiverAirfieldOffset.Value, 0); }
  public static void AddExternalReceiverId(FlatBufferBuilder builder, StringOffset externalReceiverIdOffset) { builder.AddOffset(3, externalReceiverIdOffset.Value, 0); }
  public static void AddReceiverCoord(FlatBufferBuilder builder, StringOffset receiverCoordOffset) { builder.AddOffset(4, receiverCoordOffset.Value, 0); }
  public static void AddReceiverMDS(FlatBufferBuilder builder, StringOffset receiverMDSOffset) { builder.AddOffset(5, receiverMDSOffset.Value, 0); }
  public static void AddAmcReceiverMissionId(FlatBufferBuilder builder, StringOffset amcReceiverMissionIdOffset) { builder.AddOffset(6, amcReceiverMissionIdOffset.Value, 0); }
  public static void AddAltReceiverMissionId(FlatBufferBuilder builder, StringOffset altReceiverMissionIdOffset) { builder.AddOffset(7, altReceiverMissionIdOffset.Value, 0); }
  public static void AddReceiverCallSign(FlatBufferBuilder builder, StringOffset receiverCallSignOffset) { builder.AddOffset(8, receiverCallSignOffset.Value, 0); }
  public static void AddReceiverOwner(FlatBufferBuilder builder, StringOffset receiverOwnerOffset) { builder.AddOffset(9, receiverOwnerOffset.Value, 0); }
  public static void AddReceiverPOC(FlatBufferBuilder builder, StringOffset receiverPOCOffset) { builder.AddOffset(10, receiverPOCOffset.Value, 0); }
  public static void AddReceiverLegNum(FlatBufferBuilder builder, int receiverLegNum) { builder.AddInt(11, receiverLegNum, 0); }
  public static void AddReceiverDeployedICAO(FlatBufferBuilder builder, StringOffset receiverDeployedICAOOffset) { builder.AddOffset(12, receiverDeployedICAOOffset.Value, 0); }
  public static void AddReceiverDeliveryMethod(FlatBufferBuilder builder, StringOffset receiverDeliveryMethodOffset) { builder.AddOffset(13, receiverDeliveryMethodOffset.Value, 0); }
  public static void AddFuelOn(FlatBufferBuilder builder, double fuelOn) { builder.AddDouble(14, fuelOn, 0.0); }
  public static void AddReceiverCellPosition(FlatBufferBuilder builder, int receiverCellPosition) { builder.AddInt(15, receiverCellPosition, 0); }
  public static void AddSequenceNum(FlatBufferBuilder builder, StringOffset sequenceNumOffset) { builder.AddOffset(16, sequenceNumOffset.Value, 0); }
  public static void AddRecOrg(FlatBufferBuilder builder, StringOffset recOrgOffset) { builder.AddOffset(17, recOrgOffset.Value, 0); }
  public static void AddNumRecAircraft(FlatBufferBuilder builder, int numRecAircraft) { builder.AddInt(18, numRecAircraft, 0); }
  public static void AddReceiverFuelType(FlatBufferBuilder builder, StringOffset receiverFuelTypeOffset) { builder.AddOffset(19, receiverFuelTypeOffset.Value, 0); }
  public static void AddReceiverExercise(FlatBufferBuilder builder, StringOffset receiverExerciseOffset) { builder.AddOffset(20, receiverExerciseOffset.Value, 0); }
  public static void AddPackageId(FlatBufferBuilder builder, StringOffset packageIdOffset) { builder.AddOffset(21, packageIdOffset.Value, 0); }
  public static Offset<AirEventReceivers_Ingest> EndAirEventReceivers_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirEventReceivers_Ingest>(o);
  }
  public static void FinishAirEventReceivers_IngestBuffer(FlatBufferBuilder builder, Offset<AirEventReceivers_Ingest> offset) { builder.Finish(offset.Value, "AIRE"); }
  public static void FinishSizePrefixedAirEventReceivers_IngestBuffer(FlatBufferBuilder builder, Offset<AirEventReceivers_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "AIRE"); }
  public AirEventReceivers_IngestT UnPack() {
    var _o = new AirEventReceivers_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirEventReceivers_IngestT _o) {
    _o.IdReceiverSortie = this.IdReceiverSortie;
    _o.IdReceiverMission = this.IdReceiverMission;
    _o.IdReceiverAirfield = this.IdReceiverAirfield;
    _o.ExternalReceiverId = this.ExternalReceiverId;
    _o.ReceiverCoord = this.ReceiverCoord;
    _o.ReceiverMDS = this.ReceiverMDS;
    _o.AmcReceiverMissionId = this.AmcReceiverMissionId;
    _o.AltReceiverMissionId = this.AltReceiverMissionId;
    _o.ReceiverCallSign = this.ReceiverCallSign;
    _o.ReceiverOwner = this.ReceiverOwner;
    _o.ReceiverPOC = this.ReceiverPOC;
    _o.ReceiverLegNum = this.ReceiverLegNum;
    _o.ReceiverDeployedICAO = this.ReceiverDeployedICAO;
    _o.ReceiverDeliveryMethod = this.ReceiverDeliveryMethod;
    _o.FuelOn = this.FuelOn;
    _o.ReceiverCellPosition = this.ReceiverCellPosition;
    _o.SequenceNum = this.SequenceNum;
    _o.RecOrg = this.RecOrg;
    _o.NumRecAircraft = this.NumRecAircraft;
    _o.ReceiverFuelType = this.ReceiverFuelType;
    _o.ReceiverExercise = this.ReceiverExercise;
    _o.PackageId = this.PackageId;
  }
  public static Offset<AirEventReceivers_Ingest> Pack(FlatBufferBuilder builder, AirEventReceivers_IngestT _o) {
    if (_o == null) return default(Offset<AirEventReceivers_Ingest>);
    var _idReceiverSortie = _o.IdReceiverSortie == null ? default(StringOffset) : builder.CreateString(_o.IdReceiverSortie);
    var _idReceiverMission = _o.IdReceiverMission == null ? default(StringOffset) : builder.CreateString(_o.IdReceiverMission);
    var _idReceiverAirfield = _o.IdReceiverAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdReceiverAirfield);
    var _externalReceiverId = _o.ExternalReceiverId == null ? default(StringOffset) : builder.CreateString(_o.ExternalReceiverId);
    var _receiverCoord = _o.ReceiverCoord == null ? default(StringOffset) : builder.CreateString(_o.ReceiverCoord);
    var _receiverMDS = _o.ReceiverMDS == null ? default(StringOffset) : builder.CreateString(_o.ReceiverMDS);
    var _amcReceiverMissionId = _o.AmcReceiverMissionId == null ? default(StringOffset) : builder.CreateString(_o.AmcReceiverMissionId);
    var _altReceiverMissionId = _o.AltReceiverMissionId == null ? default(StringOffset) : builder.CreateString(_o.AltReceiverMissionId);
    var _receiverCallSign = _o.ReceiverCallSign == null ? default(StringOffset) : builder.CreateString(_o.ReceiverCallSign);
    var _receiverOwner = _o.ReceiverOwner == null ? default(StringOffset) : builder.CreateString(_o.ReceiverOwner);
    var _receiverPOC = _o.ReceiverPOC == null ? default(StringOffset) : builder.CreateString(_o.ReceiverPOC);
    var _receiverDeployedICAO = _o.ReceiverDeployedICAO == null ? default(StringOffset) : builder.CreateString(_o.ReceiverDeployedICAO);
    var _receiverDeliveryMethod = _o.ReceiverDeliveryMethod == null ? default(StringOffset) : builder.CreateString(_o.ReceiverDeliveryMethod);
    var _sequenceNum = _o.SequenceNum == null ? default(StringOffset) : builder.CreateString(_o.SequenceNum);
    var _recOrg = _o.RecOrg == null ? default(StringOffset) : builder.CreateString(_o.RecOrg);
    var _receiverFuelType = _o.ReceiverFuelType == null ? default(StringOffset) : builder.CreateString(_o.ReceiverFuelType);
    var _receiverExercise = _o.ReceiverExercise == null ? default(StringOffset) : builder.CreateString(_o.ReceiverExercise);
    var _packageId = _o.PackageId == null ? default(StringOffset) : builder.CreateString(_o.PackageId);
    return CreateAirEventReceivers_Ingest(
      builder,
      _idReceiverSortie,
      _idReceiverMission,
      _idReceiverAirfield,
      _externalReceiverId,
      _receiverCoord,
      _receiverMDS,
      _amcReceiverMissionId,
      _altReceiverMissionId,
      _receiverCallSign,
      _receiverOwner,
      _receiverPOC,
      _o.ReceiverLegNum,
      _receiverDeployedICAO,
      _receiverDeliveryMethod,
      _o.FuelOn,
      _o.ReceiverCellPosition,
      _sequenceNum,
      _recOrg,
      _o.NumRecAircraft,
      _receiverFuelType,
      _receiverExercise,
      _packageId);
  }
}

public class AirEventReceivers_IngestT
{
  public string IdReceiverSortie { get; set; }
  public string IdReceiverMission { get; set; }
  public string IdReceiverAirfield { get; set; }
  public string ExternalReceiverId { get; set; }
  public string ReceiverCoord { get; set; }
  public string ReceiverMDS { get; set; }
  public string AmcReceiverMissionId { get; set; }
  public string AltReceiverMissionId { get; set; }
  public string ReceiverCallSign { get; set; }
  public string ReceiverOwner { get; set; }
  public string ReceiverPOC { get; set; }
  public int ReceiverLegNum { get; set; }
  public string ReceiverDeployedICAO { get; set; }
  public string ReceiverDeliveryMethod { get; set; }
  public double FuelOn { get; set; }
  public int ReceiverCellPosition { get; set; }
  public string SequenceNum { get; set; }
  public string RecOrg { get; set; }
  public int NumRecAircraft { get; set; }
  public string ReceiverFuelType { get; set; }
  public string ReceiverExercise { get; set; }
  public string PackageId { get; set; }

  public AirEventReceivers_IngestT() {
    this.IdReceiverSortie = null;
    this.IdReceiverMission = null;
    this.IdReceiverAirfield = null;
    this.ExternalReceiverId = null;
    this.ReceiverCoord = null;
    this.ReceiverMDS = null;
    this.AmcReceiverMissionId = null;
    this.AltReceiverMissionId = null;
    this.ReceiverCallSign = null;
    this.ReceiverOwner = null;
    this.ReceiverPOC = null;
    this.ReceiverLegNum = 0;
    this.ReceiverDeployedICAO = null;
    this.ReceiverDeliveryMethod = null;
    this.FuelOn = 0.0;
    this.ReceiverCellPosition = 0;
    this.SequenceNum = null;
    this.RecOrg = null;
    this.NumRecAircraft = 0;
    this.ReceiverFuelType = null;
    this.ReceiverExercise = null;
    this.PackageId = null;
  }
  public static AirEventReceivers_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return AirEventReceivers_Ingest.GetRootAsAirEventReceivers_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirEventReceivers_Ingest.FinishAirEventReceivers_IngestBuffer(fbb, AirEventReceivers_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirEventReceivers_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdReceiverSortie*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdReceiverMission*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdReceiverAirfield*/, false)
      && verifier.VerifyString(tablePos, 10 /*ExternalReceiverId*/, false)
      && verifier.VerifyString(tablePos, 12 /*ReceiverCoord*/, false)
      && verifier.VerifyString(tablePos, 14 /*ReceiverMDS*/, false)
      && verifier.VerifyString(tablePos, 16 /*AmcReceiverMissionId*/, false)
      && verifier.VerifyString(tablePos, 18 /*AltReceiverMissionId*/, false)
      && verifier.VerifyString(tablePos, 20 /*ReceiverCallSign*/, false)
      && verifier.VerifyString(tablePos, 22 /*ReceiverOwner*/, false)
      && verifier.VerifyString(tablePos, 24 /*ReceiverPOC*/, false)
      && verifier.VerifyField(tablePos, 26 /*ReceiverLegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*ReceiverDeployedICAO*/, false)
      && verifier.VerifyString(tablePos, 30 /*ReceiverDeliveryMethod*/, false)
      && verifier.VerifyField(tablePos, 32 /*FuelOn*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*ReceiverCellPosition*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*SequenceNum*/, false)
      && verifier.VerifyString(tablePos, 38 /*RecOrg*/, false)
      && verifier.VerifyField(tablePos, 40 /*NumRecAircraft*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 42 /*ReceiverFuelType*/, false)
      && verifier.VerifyString(tablePos, 44 /*ReceiverExercise*/, false)
      && verifier.VerifyString(tablePos, 46 /*PackageId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
