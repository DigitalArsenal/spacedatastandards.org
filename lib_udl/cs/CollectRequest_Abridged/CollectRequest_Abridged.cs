// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired.
public struct CollectRequest_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CollectRequest_Abridged GetRootAsCollectRequest_Abridged(ByteBuffer _bb) { return GetRootAsCollectRequest_Abridged(_bb, new CollectRequest_Abridged()); }
  public static CollectRequest_Abridged GetRootAsCollectRequest_Abridged(ByteBuffer _bb, CollectRequest_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool CollectRequest_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "COLL"); }
  public static bool VerifyCollectRequest_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("COLL", false, CollectRequest_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollectRequest_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: COLLECTREQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.
  /// Example: /// Example: da98671b-34db-47bf-8c8d-7c668b92c800
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdParentReq { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdParentReqBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdParentReqBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdParentReqArray() { return __p.__vector_as_array<byte>(8); }
  /// The type of external message from which this request originated.
  /// Example: /// Example: SU67
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MsgType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMsgTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMsgTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-04-25T08:17:01.346Z
  /// Constraints: No constraints specified.
  public string MsgCreateDate { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgCreateDateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMsgCreateDateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMsgCreateDateArray() { return __p.__vector_as_array<byte>(12); }
  /// The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
  /// Example: /// Example: DWELL
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.
  /// Example: /// Example: REF-PLAN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdPlan { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdPlanBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdPlanBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdPlanArray() { return __p.__vector_as_array<byte>(16); }
  /// Index number (integer) for records within a collection plan or schedule.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int PlanIndex { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.
  /// Example: /// Example: DWELL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DwellId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDwellIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDwellIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDwellIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: EXTERNAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(26); }
  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(28); }
  /// Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.
  /// Example: /// Example: RADAR
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ObType { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTypeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetObTypeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetObTypeArray() { return __p.__vector_as_array<byte>(30); }
  /// The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).
  /// Example: /// Example: EMERGENCY
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Priority { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriorityBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetPriorityBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetPriorityArray() { return __p.__vector_as_array<byte>(32); }
  /// The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int TaskCategory { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.
  /// Example: /// Example: T
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string Suffix { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuffixBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSuffixBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSuffixArray() { return __p.__vector_as_array<byte>(36); }
  /// Boolean indicating that this collect request is UCT follow-up.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool UctFollowUp { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(40); }
  /// The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(42); }
  /// Unique identifier of the target on-orbit object for this request.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(44); }
  /// Satellite/catalog number of the target on-orbit object for this request.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(48); }
  /// The tasking group to which the target object is assigned.
  /// Example: /// Example: 729
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TaskGroup { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskGroupBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetTaskGroupBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetTaskGroupArray() { return __p.__vector_as_array<byte>(50); }
  /// Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Iron { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).
  /// Example: /// Example: GEO
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string OrbitRegime { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrbitRegimeBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetOrbitRegimeBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetOrbitRegimeArray() { return __p.__vector_as_array<byte>(54); }
  /// The minimum object (diameter) size, in meters, to be reported.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double TargetSize { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RcsMin { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Radar Cross-Section of the target, in m^2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Rcs { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum Radar Cross-Section of the target, in m^2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RcsMax { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FreqMin { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated or expected emission frequency of the target, in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Freq { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum frequency of interest, in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FreqMax { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The RF polarization (H, LHC, RHC, V).
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Polarization { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPolarizationBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetPolarizationBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetPolarizationArray() { return __p.__vector_as_array<byte>(70); }
  /// The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double VisMagMin { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated or expected visual magnitude of the target, in Magnitudes (M).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double VisMag { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double VisMagMax { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The spectral model used for the irradiance calculation.
  /// Example: /// Example: Example Model
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SpectralModel { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpectralModelBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetSpectralModelBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetSpectralModelArray() { return __p.__vector_as_array<byte>(78); }
  /// The fraction of solar energy reflected from target.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Reflectance { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The target object irradiance value.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Irradiance { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For optical sensors, the requested number of frames to capture at each sensor step.
  /// Example: /// Example: 6
  /// Constraints: No constraints specified.
  public int NumFrames { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// For optical sensors, the frame rate of the camera, in Hz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FrameRate { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For optical sensors, the integration time per camera frame, in milliseconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double IntegrationTime { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumTracks { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of requested observations on the target.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  public int NumObs { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.
  /// Example: /// Example: 11
  /// Constraints: No constraints specified.
  public int Duration { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).
  /// Example: /// Example: SCAN
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string SrchPattern { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSrchPatternBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetSrchPatternBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetSrchPatternArray() { return __p.__vector_as_array<byte>(96); }
  /// Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.
  /// Example: /// Example: Example direction
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Scenario { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenarioBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetScenarioBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetScenarioArray() { return __p.__vector_as_array<byte>(98); }
  /// ID of the UDL Elset of the object associated with this request.
  /// Example: /// Example: REF-ELSET-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdElset { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdElsetBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetIdElsetBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetIdElsetArray() { return __p.__vector_as_array<byte>(100); }
  /// ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
  /// Example: /// Example: REF-MANIFOLD-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdManifold { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdManifoldBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetIdManifoldBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetIdManifoldArray() { return __p.__vector_as_array<byte>(102); }
  /// ID of the UDL State Vector of the object or central vector associated with this request.
  /// Example: /// Example: STATEVECTOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVectorBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetIdStateVectorBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetIdStateVectorArray() { return __p.__vector_as_array<byte>(104); }
  /// ID of the UDL Ephemeris Set of the object associated with this request.
  /// Example: /// Example: ES-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(106); }
  /// Epoch time, in ISO 8601 UTC format, of the orbital elements.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Epoch { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEpochBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetEpochBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetEpochArray() { return __p.__vector_as_array<byte>(108); }
  /// The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SemiMajorAxis { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Eccentricity { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Inclination { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Raan { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ArgOfPerigee { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double TrueAnomoly { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed right ascension angle, in degrees, for search or target acquisition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed declination angle, in degrees, for search or target acquisition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Dec { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed azimuth angle, in degrees, for search or target acquisition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Az { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected or directed elevation angle, in degrees, for search or target acquisition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double El { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The expected acquisition range or defined center range, in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Range { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ExtentAz { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ExtentEl { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The extent of the range, in km, from center range to define a spatial volume.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ExtentRange { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double StopLat { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double StopLon { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double StopAlt { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum inclination, in degrees, to be used in search operations.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SrchInc { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double XAngle { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double YAngle { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double OrientAngle { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The customer for this request.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Customer { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomerBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetCustomerBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetCustomerArray() { return __p.__vector_as_array<byte>(158); }
  /// Notes or comments associated with this request.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Notes { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(160); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(162); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(164); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(166); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: Example source
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(168); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(170); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(170, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(170); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(170); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public CollectRequest_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(172); return o != 0 ? (CollectRequest_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : CollectRequest_Abridged_dataMode_Enum.REAL; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string StateVector { get { int o = __p.__offset(174); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateVectorBytes() { return __p.__vector_as_span<byte>(174, 1); }
#else
  public ArraySegment<byte>? GetStateVectorBytes() { return __p.__vector_as_arraysegment(174); }
#endif
  public byte[] GetStateVectorArray() { return __p.__vector_as_array<byte>(174); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Elset { get { int o = __p.__offset(176); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElsetBytes() { return __p.__vector_as_span<byte>(176, 1); }
#else
  public ArraySegment<byte>? GetElsetBytes() { return __p.__vector_as_arraysegment(176); }
#endif
  public byte[] GetElsetArray() { return __p.__vector_as_array<byte>(176); }

  public static Offset<CollectRequest_Abridged> CreateCollectRequest_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idParentReqOffset = default(StringOffset),
      StringOffset msgTypeOffset = default(StringOffset),
      StringOffset msgCreateDateOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset idPlanOffset = default(StringOffset),
      int planIndex = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset dwellIdOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset obTypeOffset = default(StringOffset),
      StringOffset priorityOffset = default(StringOffset),
      int taskCategory = 0,
      StringOffset suffixOffset = default(StringOffset),
      bool uctFollowUp = false,
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset taskGroupOffset = default(StringOffset),
      int iron = 0,
      StringOffset orbitRegimeOffset = default(StringOffset),
      double targetSize = 0.0,
      double rcsMin = 0.0,
      double rcs = 0.0,
      double rcsMax = 0.0,
      double freqMin = 0.0,
      double freq = 0.0,
      double freqMax = 0.0,
      StringOffset polarizationOffset = default(StringOffset),
      double visMagMin = 0.0,
      double visMag = 0.0,
      double visMagMax = 0.0,
      StringOffset spectralModelOffset = default(StringOffset),
      double reflectance = 0.0,
      double irradiance = 0.0,
      int numFrames = 0,
      double frameRate = 0.0,
      double integrationTime = 0.0,
      int numTracks = 0,
      int numObs = 0,
      int duration = 0,
      StringOffset srchPatternOffset = default(StringOffset),
      StringOffset scenarioOffset = default(StringOffset),
      StringOffset idElsetOffset = default(StringOffset),
      StringOffset idManifoldOffset = default(StringOffset),
      StringOffset idStateVectorOffset = default(StringOffset),
      StringOffset esIdOffset = default(StringOffset),
      StringOffset epochOffset = default(StringOffset),
      double semiMajorAxis = 0.0,
      double eccentricity = 0.0,
      double inclination = 0.0,
      double raan = 0.0,
      double argOfPerigee = 0.0,
      double trueAnomoly = 0.0,
      double ra = 0.0,
      double dec = 0.0,
      double az = 0.0,
      double el = 0.0,
      double range = 0.0,
      double extentAz = 0.0,
      double extentEl = 0.0,
      double extentRange = 0.0,
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double stopLat = 0.0,
      double stopLon = 0.0,
      double stopAlt = 0.0,
      double srchInc = 0.0,
      double xAngle = 0.0,
      double yAngle = 0.0,
      double orientAngle = 0.0,
      StringOffset customerOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      CollectRequest_Abridged_dataMode_Enum dataMode = CollectRequest_Abridged_dataMode_Enum.REAL,
      StringOffset stateVectorOffset = default(StringOffset),
      StringOffset elsetOffset = default(StringOffset)) {
    builder.StartTable(87);
    CollectRequest_Abridged.AddOrientAngle(builder, orientAngle);
    CollectRequest_Abridged.AddYAngle(builder, yAngle);
    CollectRequest_Abridged.AddXAngle(builder, xAngle);
    CollectRequest_Abridged.AddSrchInc(builder, srchInc);
    CollectRequest_Abridged.AddStopAlt(builder, stopAlt);
    CollectRequest_Abridged.AddStopLon(builder, stopLon);
    CollectRequest_Abridged.AddStopLat(builder, stopLat);
    CollectRequest_Abridged.AddAlt(builder, alt);
    CollectRequest_Abridged.AddLon(builder, lon);
    CollectRequest_Abridged.AddLat(builder, lat);
    CollectRequest_Abridged.AddExtentRange(builder, extentRange);
    CollectRequest_Abridged.AddExtentEl(builder, extentEl);
    CollectRequest_Abridged.AddExtentAz(builder, extentAz);
    CollectRequest_Abridged.AddRange(builder, range);
    CollectRequest_Abridged.AddEl(builder, el);
    CollectRequest_Abridged.AddAz(builder, az);
    CollectRequest_Abridged.AddDec(builder, dec);
    CollectRequest_Abridged.AddRa(builder, ra);
    CollectRequest_Abridged.AddTrueAnomoly(builder, trueAnomoly);
    CollectRequest_Abridged.AddArgOfPerigee(builder, argOfPerigee);
    CollectRequest_Abridged.AddRaan(builder, raan);
    CollectRequest_Abridged.AddInclination(builder, inclination);
    CollectRequest_Abridged.AddEccentricity(builder, eccentricity);
    CollectRequest_Abridged.AddSemiMajorAxis(builder, semiMajorAxis);
    CollectRequest_Abridged.AddIntegrationTime(builder, integrationTime);
    CollectRequest_Abridged.AddFrameRate(builder, frameRate);
    CollectRequest_Abridged.AddIrradiance(builder, irradiance);
    CollectRequest_Abridged.AddReflectance(builder, reflectance);
    CollectRequest_Abridged.AddVisMagMax(builder, visMagMax);
    CollectRequest_Abridged.AddVisMag(builder, visMag);
    CollectRequest_Abridged.AddVisMagMin(builder, visMagMin);
    CollectRequest_Abridged.AddFreqMax(builder, freqMax);
    CollectRequest_Abridged.AddFreq(builder, freq);
    CollectRequest_Abridged.AddFreqMin(builder, freqMin);
    CollectRequest_Abridged.AddRcsMax(builder, rcsMax);
    CollectRequest_Abridged.AddRcs(builder, rcs);
    CollectRequest_Abridged.AddRcsMin(builder, rcsMin);
    CollectRequest_Abridged.AddTargetSize(builder, targetSize);
    CollectRequest_Abridged.AddElset(builder, elsetOffset);
    CollectRequest_Abridged.AddStateVector(builder, stateVectorOffset);
    CollectRequest_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    CollectRequest_Abridged.AddOrigin(builder, originOffset);
    CollectRequest_Abridged.AddSource(builder, sourceOffset);
    CollectRequest_Abridged.AddCreatedBy(builder, createdByOffset);
    CollectRequest_Abridged.AddCreatedAt(builder, createdAtOffset);
    CollectRequest_Abridged.AddNotes(builder, notesOffset);
    CollectRequest_Abridged.AddCustomer(builder, customerOffset);
    CollectRequest_Abridged.AddEpoch(builder, epochOffset);
    CollectRequest_Abridged.AddEsId(builder, esIdOffset);
    CollectRequest_Abridged.AddIdStateVector(builder, idStateVectorOffset);
    CollectRequest_Abridged.AddIdManifold(builder, idManifoldOffset);
    CollectRequest_Abridged.AddIdElset(builder, idElsetOffset);
    CollectRequest_Abridged.AddScenario(builder, scenarioOffset);
    CollectRequest_Abridged.AddSrchPattern(builder, srchPatternOffset);
    CollectRequest_Abridged.AddDuration(builder, duration);
    CollectRequest_Abridged.AddNumObs(builder, numObs);
    CollectRequest_Abridged.AddNumTracks(builder, numTracks);
    CollectRequest_Abridged.AddNumFrames(builder, numFrames);
    CollectRequest_Abridged.AddSpectralModel(builder, spectralModelOffset);
    CollectRequest_Abridged.AddPolarization(builder, polarizationOffset);
    CollectRequest_Abridged.AddOrbitRegime(builder, orbitRegimeOffset);
    CollectRequest_Abridged.AddIron(builder, iron);
    CollectRequest_Abridged.AddTaskGroup(builder, taskGroupOffset);
    CollectRequest_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    CollectRequest_Abridged.AddSatNo(builder, satNo);
    CollectRequest_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    CollectRequest_Abridged.AddEndTime(builder, endTimeOffset);
    CollectRequest_Abridged.AddStartTime(builder, startTimeOffset);
    CollectRequest_Abridged.AddSuffix(builder, suffixOffset);
    CollectRequest_Abridged.AddTaskCategory(builder, taskCategory);
    CollectRequest_Abridged.AddPriority(builder, priorityOffset);
    CollectRequest_Abridged.AddObType(builder, obTypeOffset);
    CollectRequest_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    CollectRequest_Abridged.AddIdSensor(builder, idSensorOffset);
    CollectRequest_Abridged.AddExternalId(builder, externalIdOffset);
    CollectRequest_Abridged.AddDwellId(builder, dwellIdOffset);
    CollectRequest_Abridged.AddTaskId(builder, taskIdOffset);
    CollectRequest_Abridged.AddPlanIndex(builder, planIndex);
    CollectRequest_Abridged.AddIdPlan(builder, idPlanOffset);
    CollectRequest_Abridged.AddType(builder, typeOffset);
    CollectRequest_Abridged.AddMsgCreateDate(builder, msgCreateDateOffset);
    CollectRequest_Abridged.AddMsgType(builder, msgTypeOffset);
    CollectRequest_Abridged.AddIdParentReq(builder, idParentReqOffset);
    CollectRequest_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    CollectRequest_Abridged.AddId(builder, idOffset);
    CollectRequest_Abridged.AddDataMode(builder, dataMode);
    CollectRequest_Abridged.AddUctFollowUp(builder, uctFollowUp);
    return CollectRequest_Abridged.EndCollectRequest_Abridged(builder);
  }

  public static void StartCollectRequest_Abridged(FlatBufferBuilder builder) { builder.StartTable(87); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdParentReq(FlatBufferBuilder builder, StringOffset idParentReqOffset) { builder.AddOffset(2, idParentReqOffset.Value, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, StringOffset msgTypeOffset) { builder.AddOffset(3, msgTypeOffset.Value, 0); }
  public static void AddMsgCreateDate(FlatBufferBuilder builder, StringOffset msgCreateDateOffset) { builder.AddOffset(4, msgCreateDateOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddIdPlan(FlatBufferBuilder builder, StringOffset idPlanOffset) { builder.AddOffset(6, idPlanOffset.Value, 0); }
  public static void AddPlanIndex(FlatBufferBuilder builder, int planIndex) { builder.AddInt(7, planIndex, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(8, taskIdOffset.Value, 0); }
  public static void AddDwellId(FlatBufferBuilder builder, StringOffset dwellIdOffset) { builder.AddOffset(9, dwellIdOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(10, externalIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(11, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(12, origSensorIdOffset.Value, 0); }
  public static void AddObType(FlatBufferBuilder builder, StringOffset obTypeOffset) { builder.AddOffset(13, obTypeOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, StringOffset priorityOffset) { builder.AddOffset(14, priorityOffset.Value, 0); }
  public static void AddTaskCategory(FlatBufferBuilder builder, int taskCategory) { builder.AddInt(15, taskCategory, 0); }
  public static void AddSuffix(FlatBufferBuilder builder, StringOffset suffixOffset) { builder.AddOffset(16, suffixOffset.Value, 0); }
  public static void AddUctFollowUp(FlatBufferBuilder builder, bool uctFollowUp) { builder.AddBool(17, uctFollowUp, false); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(18, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(19, endTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(20, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(21, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(22, origObjectIdOffset.Value, 0); }
  public static void AddTaskGroup(FlatBufferBuilder builder, StringOffset taskGroupOffset) { builder.AddOffset(23, taskGroupOffset.Value, 0); }
  public static void AddIron(FlatBufferBuilder builder, int iron) { builder.AddInt(24, iron, 0); }
  public static void AddOrbitRegime(FlatBufferBuilder builder, StringOffset orbitRegimeOffset) { builder.AddOffset(25, orbitRegimeOffset.Value, 0); }
  public static void AddTargetSize(FlatBufferBuilder builder, double targetSize) { builder.AddDouble(26, targetSize, 0.0); }
  public static void AddRcsMin(FlatBufferBuilder builder, double rcsMin) { builder.AddDouble(27, rcsMin, 0.0); }
  public static void AddRcs(FlatBufferBuilder builder, double rcs) { builder.AddDouble(28, rcs, 0.0); }
  public static void AddRcsMax(FlatBufferBuilder builder, double rcsMax) { builder.AddDouble(29, rcsMax, 0.0); }
  public static void AddFreqMin(FlatBufferBuilder builder, double freqMin) { builder.AddDouble(30, freqMin, 0.0); }
  public static void AddFreq(FlatBufferBuilder builder, double freq) { builder.AddDouble(31, freq, 0.0); }
  public static void AddFreqMax(FlatBufferBuilder builder, double freqMax) { builder.AddDouble(32, freqMax, 0.0); }
  public static void AddPolarization(FlatBufferBuilder builder, StringOffset polarizationOffset) { builder.AddOffset(33, polarizationOffset.Value, 0); }
  public static void AddVisMagMin(FlatBufferBuilder builder, double visMagMin) { builder.AddDouble(34, visMagMin, 0.0); }
  public static void AddVisMag(FlatBufferBuilder builder, double visMag) { builder.AddDouble(35, visMag, 0.0); }
  public static void AddVisMagMax(FlatBufferBuilder builder, double visMagMax) { builder.AddDouble(36, visMagMax, 0.0); }
  public static void AddSpectralModel(FlatBufferBuilder builder, StringOffset spectralModelOffset) { builder.AddOffset(37, spectralModelOffset.Value, 0); }
  public static void AddReflectance(FlatBufferBuilder builder, double reflectance) { builder.AddDouble(38, reflectance, 0.0); }
  public static void AddIrradiance(FlatBufferBuilder builder, double irradiance) { builder.AddDouble(39, irradiance, 0.0); }
  public static void AddNumFrames(FlatBufferBuilder builder, int numFrames) { builder.AddInt(40, numFrames, 0); }
  public static void AddFrameRate(FlatBufferBuilder builder, double frameRate) { builder.AddDouble(41, frameRate, 0.0); }
  public static void AddIntegrationTime(FlatBufferBuilder builder, double integrationTime) { builder.AddDouble(42, integrationTime, 0.0); }
  public static void AddNumTracks(FlatBufferBuilder builder, int numTracks) { builder.AddInt(43, numTracks, 0); }
  public static void AddNumObs(FlatBufferBuilder builder, int numObs) { builder.AddInt(44, numObs, 0); }
  public static void AddDuration(FlatBufferBuilder builder, int duration) { builder.AddInt(45, duration, 0); }
  public static void AddSrchPattern(FlatBufferBuilder builder, StringOffset srchPatternOffset) { builder.AddOffset(46, srchPatternOffset.Value, 0); }
  public static void AddScenario(FlatBufferBuilder builder, StringOffset scenarioOffset) { builder.AddOffset(47, scenarioOffset.Value, 0); }
  public static void AddIdElset(FlatBufferBuilder builder, StringOffset idElsetOffset) { builder.AddOffset(48, idElsetOffset.Value, 0); }
  public static void AddIdManifold(FlatBufferBuilder builder, StringOffset idManifoldOffset) { builder.AddOffset(49, idManifoldOffset.Value, 0); }
  public static void AddIdStateVector(FlatBufferBuilder builder, StringOffset idStateVectorOffset) { builder.AddOffset(50, idStateVectorOffset.Value, 0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(51, esIdOffset.Value, 0); }
  public static void AddEpoch(FlatBufferBuilder builder, StringOffset epochOffset) { builder.AddOffset(52, epochOffset.Value, 0); }
  public static void AddSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.AddDouble(53, semiMajorAxis, 0.0); }
  public static void AddEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.AddDouble(54, eccentricity, 0.0); }
  public static void AddInclination(FlatBufferBuilder builder, double inclination) { builder.AddDouble(55, inclination, 0.0); }
  public static void AddRaan(FlatBufferBuilder builder, double raan) { builder.AddDouble(56, raan, 0.0); }
  public static void AddArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.AddDouble(57, argOfPerigee, 0.0); }
  public static void AddTrueAnomoly(FlatBufferBuilder builder, double trueAnomoly) { builder.AddDouble(58, trueAnomoly, 0.0); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(59, ra, 0.0); }
  public static void AddDec(FlatBufferBuilder builder, double dec) { builder.AddDouble(60, dec, 0.0); }
  public static void AddAz(FlatBufferBuilder builder, double az) { builder.AddDouble(61, az, 0.0); }
  public static void AddEl(FlatBufferBuilder builder, double el) { builder.AddDouble(62, el, 0.0); }
  public static void AddRange(FlatBufferBuilder builder, double range) { builder.AddDouble(63, range, 0.0); }
  public static void AddExtentAz(FlatBufferBuilder builder, double extentAz) { builder.AddDouble(64, extentAz, 0.0); }
  public static void AddExtentEl(FlatBufferBuilder builder, double extentEl) { builder.AddDouble(65, extentEl, 0.0); }
  public static void AddExtentRange(FlatBufferBuilder builder, double extentRange) { builder.AddDouble(66, extentRange, 0.0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(67, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(68, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(69, alt, 0.0); }
  public static void AddStopLat(FlatBufferBuilder builder, double stopLat) { builder.AddDouble(70, stopLat, 0.0); }
  public static void AddStopLon(FlatBufferBuilder builder, double stopLon) { builder.AddDouble(71, stopLon, 0.0); }
  public static void AddStopAlt(FlatBufferBuilder builder, double stopAlt) { builder.AddDouble(72, stopAlt, 0.0); }
  public static void AddSrchInc(FlatBufferBuilder builder, double srchInc) { builder.AddDouble(73, srchInc, 0.0); }
  public static void AddXAngle(FlatBufferBuilder builder, double xAngle) { builder.AddDouble(74, xAngle, 0.0); }
  public static void AddYAngle(FlatBufferBuilder builder, double yAngle) { builder.AddDouble(75, yAngle, 0.0); }
  public static void AddOrientAngle(FlatBufferBuilder builder, double orientAngle) { builder.AddDouble(76, orientAngle, 0.0); }
  public static void AddCustomer(FlatBufferBuilder builder, StringOffset customerOffset) { builder.AddOffset(77, customerOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(78, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(79, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(80, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(81, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(82, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(83, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, CollectRequest_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(84, (sbyte)dataMode, 0); }
  public static void AddStateVector(FlatBufferBuilder builder, StringOffset stateVectorOffset) { builder.AddOffset(85, stateVectorOffset.Value, 0); }
  public static void AddElset(FlatBufferBuilder builder, StringOffset elsetOffset) { builder.AddOffset(86, elsetOffset.Value, 0); }
  public static Offset<CollectRequest_Abridged> EndCollectRequest_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CollectRequest_Abridged>(o);
  }
  public static void FinishCollectRequest_AbridgedBuffer(FlatBufferBuilder builder, Offset<CollectRequest_Abridged> offset) { builder.Finish(offset.Value, "COLL"); }
  public static void FinishSizePrefixedCollectRequest_AbridgedBuffer(FlatBufferBuilder builder, Offset<CollectRequest_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "COLL"); }
  public CollectRequest_AbridgedT UnPack() {
    var _o = new CollectRequest_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollectRequest_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdParentReq = this.IdParentReq;
    _o.MsgType = this.MsgType;
    _o.MsgCreateDate = this.MsgCreateDate;
    _o.Type = this.Type;
    _o.IdPlan = this.IdPlan;
    _o.PlanIndex = this.PlanIndex;
    _o.TaskId = this.TaskId;
    _o.DwellId = this.DwellId;
    _o.ExternalId = this.ExternalId;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.ObType = this.ObType;
    _o.Priority = this.Priority;
    _o.TaskCategory = this.TaskCategory;
    _o.Suffix = this.Suffix;
    _o.UctFollowUp = this.UctFollowUp;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.TaskGroup = this.TaskGroup;
    _o.Iron = this.Iron;
    _o.OrbitRegime = this.OrbitRegime;
    _o.TargetSize = this.TargetSize;
    _o.RcsMin = this.RcsMin;
    _o.Rcs = this.Rcs;
    _o.RcsMax = this.RcsMax;
    _o.FreqMin = this.FreqMin;
    _o.Freq = this.Freq;
    _o.FreqMax = this.FreqMax;
    _o.Polarization = this.Polarization;
    _o.VisMagMin = this.VisMagMin;
    _o.VisMag = this.VisMag;
    _o.VisMagMax = this.VisMagMax;
    _o.SpectralModel = this.SpectralModel;
    _o.Reflectance = this.Reflectance;
    _o.Irradiance = this.Irradiance;
    _o.NumFrames = this.NumFrames;
    _o.FrameRate = this.FrameRate;
    _o.IntegrationTime = this.IntegrationTime;
    _o.NumTracks = this.NumTracks;
    _o.NumObs = this.NumObs;
    _o.Duration = this.Duration;
    _o.SrchPattern = this.SrchPattern;
    _o.Scenario = this.Scenario;
    _o.IdElset = this.IdElset;
    _o.IdManifold = this.IdManifold;
    _o.IdStateVector = this.IdStateVector;
    _o.EsId = this.EsId;
    _o.Epoch = this.Epoch;
    _o.SemiMajorAxis = this.SemiMajorAxis;
    _o.Eccentricity = this.Eccentricity;
    _o.Inclination = this.Inclination;
    _o.Raan = this.Raan;
    _o.ArgOfPerigee = this.ArgOfPerigee;
    _o.TrueAnomoly = this.TrueAnomoly;
    _o.Ra = this.Ra;
    _o.Dec = this.Dec;
    _o.Az = this.Az;
    _o.El = this.El;
    _o.Range = this.Range;
    _o.ExtentAz = this.ExtentAz;
    _o.ExtentEl = this.ExtentEl;
    _o.ExtentRange = this.ExtentRange;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.StopLat = this.StopLat;
    _o.StopLon = this.StopLon;
    _o.StopAlt = this.StopAlt;
    _o.SrchInc = this.SrchInc;
    _o.XAngle = this.XAngle;
    _o.YAngle = this.YAngle;
    _o.OrientAngle = this.OrientAngle;
    _o.Customer = this.Customer;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.StateVector = this.StateVector;
    _o.Elset = this.Elset;
  }
  public static Offset<CollectRequest_Abridged> Pack(FlatBufferBuilder builder, CollectRequest_AbridgedT _o) {
    if (_o == null) return default(Offset<CollectRequest_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idParentReq = _o.IdParentReq == null ? default(StringOffset) : builder.CreateString(_o.IdParentReq);
    var _msgType = _o.MsgType == null ? default(StringOffset) : builder.CreateString(_o.MsgType);
    var _msgCreateDate = _o.MsgCreateDate == null ? default(StringOffset) : builder.CreateString(_o.MsgCreateDate);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _idPlan = _o.IdPlan == null ? default(StringOffset) : builder.CreateString(_o.IdPlan);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _dwellId = _o.DwellId == null ? default(StringOffset) : builder.CreateString(_o.DwellId);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _obType = _o.ObType == null ? default(StringOffset) : builder.CreateString(_o.ObType);
    var _priority = _o.Priority == null ? default(StringOffset) : builder.CreateString(_o.Priority);
    var _suffix = _o.Suffix == null ? default(StringOffset) : builder.CreateString(_o.Suffix);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _taskGroup = _o.TaskGroup == null ? default(StringOffset) : builder.CreateString(_o.TaskGroup);
    var _orbitRegime = _o.OrbitRegime == null ? default(StringOffset) : builder.CreateString(_o.OrbitRegime);
    var _polarization = _o.Polarization == null ? default(StringOffset) : builder.CreateString(_o.Polarization);
    var _spectralModel = _o.SpectralModel == null ? default(StringOffset) : builder.CreateString(_o.SpectralModel);
    var _srchPattern = _o.SrchPattern == null ? default(StringOffset) : builder.CreateString(_o.SrchPattern);
    var _scenario = _o.Scenario == null ? default(StringOffset) : builder.CreateString(_o.Scenario);
    var _idElset = _o.IdElset == null ? default(StringOffset) : builder.CreateString(_o.IdElset);
    var _idManifold = _o.IdManifold == null ? default(StringOffset) : builder.CreateString(_o.IdManifold);
    var _idStateVector = _o.IdStateVector == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _epoch = _o.Epoch == null ? default(StringOffset) : builder.CreateString(_o.Epoch);
    var _customer = _o.Customer == null ? default(StringOffset) : builder.CreateString(_o.Customer);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _stateVector = _o.StateVector == null ? default(StringOffset) : builder.CreateString(_o.StateVector);
    var _elset = _o.Elset == null ? default(StringOffset) : builder.CreateString(_o.Elset);
    return CreateCollectRequest_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idParentReq,
      _msgType,
      _msgCreateDate,
      _type,
      _idPlan,
      _o.PlanIndex,
      _taskId,
      _dwellId,
      _externalId,
      _idSensor,
      _origSensorId,
      _obType,
      _priority,
      _o.TaskCategory,
      _suffix,
      _o.UctFollowUp,
      _startTime,
      _endTime,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _taskGroup,
      _o.Iron,
      _orbitRegime,
      _o.TargetSize,
      _o.RcsMin,
      _o.Rcs,
      _o.RcsMax,
      _o.FreqMin,
      _o.Freq,
      _o.FreqMax,
      _polarization,
      _o.VisMagMin,
      _o.VisMag,
      _o.VisMagMax,
      _spectralModel,
      _o.Reflectance,
      _o.Irradiance,
      _o.NumFrames,
      _o.FrameRate,
      _o.IntegrationTime,
      _o.NumTracks,
      _o.NumObs,
      _o.Duration,
      _srchPattern,
      _scenario,
      _idElset,
      _idManifold,
      _idStateVector,
      _esId,
      _epoch,
      _o.SemiMajorAxis,
      _o.Eccentricity,
      _o.Inclination,
      _o.Raan,
      _o.ArgOfPerigee,
      _o.TrueAnomoly,
      _o.Ra,
      _o.Dec,
      _o.Az,
      _o.El,
      _o.Range,
      _o.ExtentAz,
      _o.ExtentEl,
      _o.ExtentRange,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.StopLat,
      _o.StopLon,
      _o.StopAlt,
      _o.SrchInc,
      _o.XAngle,
      _o.YAngle,
      _o.OrientAngle,
      _customer,
      _notes,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _stateVector,
      _elset);
  }
}

public class CollectRequest_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdParentReq { get; set; }
  public string MsgType { get; set; }
  public string MsgCreateDate { get; set; }
  public string Type { get; set; }
  public string IdPlan { get; set; }
  public int PlanIndex { get; set; }
  public string TaskId { get; set; }
  public string DwellId { get; set; }
  public string ExternalId { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string ObType { get; set; }
  public string Priority { get; set; }
  public int TaskCategory { get; set; }
  public string Suffix { get; set; }
  public bool UctFollowUp { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string TaskGroup { get; set; }
  public int Iron { get; set; }
  public string OrbitRegime { get; set; }
  public double TargetSize { get; set; }
  public double RcsMin { get; set; }
  public double Rcs { get; set; }
  public double RcsMax { get; set; }
  public double FreqMin { get; set; }
  public double Freq { get; set; }
  public double FreqMax { get; set; }
  public string Polarization { get; set; }
  public double VisMagMin { get; set; }
  public double VisMag { get; set; }
  public double VisMagMax { get; set; }
  public string SpectralModel { get; set; }
  public double Reflectance { get; set; }
  public double Irradiance { get; set; }
  public int NumFrames { get; set; }
  public double FrameRate { get; set; }
  public double IntegrationTime { get; set; }
  public int NumTracks { get; set; }
  public int NumObs { get; set; }
  public int Duration { get; set; }
  public string SrchPattern { get; set; }
  public string Scenario { get; set; }
  public string IdElset { get; set; }
  public string IdManifold { get; set; }
  public string IdStateVector { get; set; }
  public string EsId { get; set; }
  public string Epoch { get; set; }
  public double SemiMajorAxis { get; set; }
  public double Eccentricity { get; set; }
  public double Inclination { get; set; }
  public double Raan { get; set; }
  public double ArgOfPerigee { get; set; }
  public double TrueAnomoly { get; set; }
  public double Ra { get; set; }
  public double Dec { get; set; }
  public double Az { get; set; }
  public double El { get; set; }
  public double Range { get; set; }
  public double ExtentAz { get; set; }
  public double ExtentEl { get; set; }
  public double ExtentRange { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double StopLat { get; set; }
  public double StopLon { get; set; }
  public double StopAlt { get; set; }
  public double SrchInc { get; set; }
  public double XAngle { get; set; }
  public double YAngle { get; set; }
  public double OrientAngle { get; set; }
  public string Customer { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public CollectRequest_Abridged_dataMode_Enum DataMode { get; set; }
  public string StateVector { get; set; }
  public string Elset { get; set; }

  public CollectRequest_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdParentReq = null;
    this.MsgType = null;
    this.MsgCreateDate = null;
    this.Type = null;
    this.IdPlan = null;
    this.PlanIndex = 0;
    this.TaskId = null;
    this.DwellId = null;
    this.ExternalId = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.ObType = null;
    this.Priority = null;
    this.TaskCategory = 0;
    this.Suffix = null;
    this.UctFollowUp = false;
    this.StartTime = null;
    this.EndTime = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.TaskGroup = null;
    this.Iron = 0;
    this.OrbitRegime = null;
    this.TargetSize = 0.0;
    this.RcsMin = 0.0;
    this.Rcs = 0.0;
    this.RcsMax = 0.0;
    this.FreqMin = 0.0;
    this.Freq = 0.0;
    this.FreqMax = 0.0;
    this.Polarization = null;
    this.VisMagMin = 0.0;
    this.VisMag = 0.0;
    this.VisMagMax = 0.0;
    this.SpectralModel = null;
    this.Reflectance = 0.0;
    this.Irradiance = 0.0;
    this.NumFrames = 0;
    this.FrameRate = 0.0;
    this.IntegrationTime = 0.0;
    this.NumTracks = 0;
    this.NumObs = 0;
    this.Duration = 0;
    this.SrchPattern = null;
    this.Scenario = null;
    this.IdElset = null;
    this.IdManifold = null;
    this.IdStateVector = null;
    this.EsId = null;
    this.Epoch = null;
    this.SemiMajorAxis = 0.0;
    this.Eccentricity = 0.0;
    this.Inclination = 0.0;
    this.Raan = 0.0;
    this.ArgOfPerigee = 0.0;
    this.TrueAnomoly = 0.0;
    this.Ra = 0.0;
    this.Dec = 0.0;
    this.Az = 0.0;
    this.El = 0.0;
    this.Range = 0.0;
    this.ExtentAz = 0.0;
    this.ExtentEl = 0.0;
    this.ExtentRange = 0.0;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.StopLat = 0.0;
    this.StopLon = 0.0;
    this.StopAlt = 0.0;
    this.SrchInc = 0.0;
    this.XAngle = 0.0;
    this.YAngle = 0.0;
    this.OrientAngle = 0.0;
    this.Customer = null;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = CollectRequest_Abridged_dataMode_Enum.REAL;
    this.StateVector = null;
    this.Elset = null;
  }
  public static CollectRequest_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return CollectRequest_Abridged.GetRootAsCollectRequest_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CollectRequest_Abridged.FinishCollectRequest_AbridgedBuffer(fbb, CollectRequest_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class CollectRequest_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdParentReq*/, false)
      && verifier.VerifyString(tablePos, 10 /*MsgType*/, false)
      && verifier.VerifyString(tablePos, 12 /*MsgCreateDate*/, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdPlan*/, false)
      && verifier.VerifyField(tablePos, 18 /*PlanIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 22 /*DwellId*/, false)
      && verifier.VerifyString(tablePos, 24 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 26 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 28 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 30 /*ObType*/, false)
      && verifier.VerifyString(tablePos, 32 /*Priority*/, false)
      && verifier.VerifyField(tablePos, 34 /*TaskCategory*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*Suffix*/, false)
      && verifier.VerifyField(tablePos, 38 /*UctFollowUp*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 42 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 44 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 46 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 48 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 50 /*TaskGroup*/, false)
      && verifier.VerifyField(tablePos, 52 /*Iron*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 54 /*OrbitRegime*/, false)
      && verifier.VerifyField(tablePos, 56 /*TargetSize*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*RcsMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*Rcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*RcsMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*FreqMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*Freq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*FreqMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 70 /*Polarization*/, false)
      && verifier.VerifyField(tablePos, 72 /*VisMagMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*VisMag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*VisMagMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 78 /*SpectralModel*/, false)
      && verifier.VerifyField(tablePos, 80 /*Reflectance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Irradiance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*NumFrames*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*FrameRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*IntegrationTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*NumTracks*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*NumObs*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*Duration*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 96 /*SrchPattern*/, false)
      && verifier.VerifyString(tablePos, 98 /*Scenario*/, false)
      && verifier.VerifyString(tablePos, 100 /*IdElset*/, false)
      && verifier.VerifyString(tablePos, 102 /*IdManifold*/, false)
      && verifier.VerifyString(tablePos, 104 /*IdStateVector*/, false)
      && verifier.VerifyString(tablePos, 106 /*EsId*/, false)
      && verifier.VerifyString(tablePos, 108 /*Epoch*/, false)
      && verifier.VerifyField(tablePos, 110 /*SemiMajorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*Eccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*Inclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*Raan*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*ArgOfPerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*TrueAnomoly*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*Dec*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*Az*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*El*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*Range*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*ExtentAz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*ExtentEl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*ExtentRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*StopLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*StopLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*StopAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*SrchInc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*XAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*YAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*OrientAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 158 /*Customer*/, false)
      && verifier.VerifyString(tablePos, 160 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 162 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 164 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 166 /*Source*/, false)
      && verifier.VerifyString(tablePos, 168 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 170 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 172 /*DataMode*/, 1 /*CollectRequest_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 174 /*StateVector*/, false)
      && verifier.VerifyString(tablePos, 176 /*Elset*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
