// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information obtained for vital signs.
public struct EvacVitalSignData_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacVitalSignData_Abridged GetRootAsEvacVitalSignData_Abridged(ByteBuffer _bb) { return GetRootAsEvacVitalSignData_Abridged(_bb, new EvacVitalSignData_Abridged()); }
  public static EvacVitalSignData_Abridged GetRootAsEvacVitalSignData_Abridged(ByteBuffer _bb, EvacVitalSignData_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacVitalSignData_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacVitalSignData_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacVitalSignData_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacVitalSignData_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
  /// Example: /// Example: HEART RATE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string VitalSign { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVitalSignBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetVitalSignBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetVitalSignArray() { return __p.__vector_as_array<byte>(4); }
  /// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  public double VitalSign1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 80
  /// Constraints: No constraints specified.
  public double VitalSign2 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Medical confidence factor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int MedConfFactor { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Time { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTimeArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<EvacVitalSignData_Abridged> CreateEvacVitalSignData_Abridged(FlatBufferBuilder builder,
      StringOffset vitalSignOffset = default(StringOffset),
      double vitalSign1 = 0.0,
      double vitalSign2 = 0.0,
      int medConfFactor = 0,
      StringOffset timeOffset = default(StringOffset)) {
    builder.StartTable(5);
    EvacVitalSignData_Abridged.AddVitalSign2(builder, vitalSign2);
    EvacVitalSignData_Abridged.AddVitalSign1(builder, vitalSign1);
    EvacVitalSignData_Abridged.AddTime(builder, timeOffset);
    EvacVitalSignData_Abridged.AddMedConfFactor(builder, medConfFactor);
    EvacVitalSignData_Abridged.AddVitalSign(builder, vitalSignOffset);
    return EvacVitalSignData_Abridged.EndEvacVitalSignData_Abridged(builder);
  }

  public static void StartEvacVitalSignData_Abridged(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddVitalSign(FlatBufferBuilder builder, StringOffset vitalSignOffset) { builder.AddOffset(0, vitalSignOffset.Value, 0); }
  public static void AddVitalSign1(FlatBufferBuilder builder, double vitalSign1) { builder.AddDouble(1, vitalSign1, 0.0); }
  public static void AddVitalSign2(FlatBufferBuilder builder, double vitalSign2) { builder.AddDouble(2, vitalSign2, 0.0); }
  public static void AddMedConfFactor(FlatBufferBuilder builder, int medConfFactor) { builder.AddInt(3, medConfFactor, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset timeOffset) { builder.AddOffset(4, timeOffset.Value, 0); }
  public static Offset<EvacVitalSignData_Abridged> EndEvacVitalSignData_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacVitalSignData_Abridged>(o);
  }
  public static void FinishEvacVitalSignData_AbridgedBuffer(FlatBufferBuilder builder, Offset<EvacVitalSignData_Abridged> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacVitalSignData_AbridgedBuffer(FlatBufferBuilder builder, Offset<EvacVitalSignData_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacVitalSignData_AbridgedT UnPack() {
    var _o = new EvacVitalSignData_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacVitalSignData_AbridgedT _o) {
    _o.VitalSign = this.VitalSign;
    _o.VitalSign1 = this.VitalSign1;
    _o.VitalSign2 = this.VitalSign2;
    _o.MedConfFactor = this.MedConfFactor;
    _o.Time = this.Time;
  }
  public static Offset<EvacVitalSignData_Abridged> Pack(FlatBufferBuilder builder, EvacVitalSignData_AbridgedT _o) {
    if (_o == null) return default(Offset<EvacVitalSignData_Abridged>);
    var _vitalSign = _o.VitalSign == null ? default(StringOffset) : builder.CreateString(_o.VitalSign);
    var _time = _o.Time == null ? default(StringOffset) : builder.CreateString(_o.Time);
    return CreateEvacVitalSignData_Abridged(
      builder,
      _vitalSign,
      _o.VitalSign1,
      _o.VitalSign2,
      _o.MedConfFactor,
      _time);
  }
}

public class EvacVitalSignData_AbridgedT
{
  public string VitalSign { get; set; }
  public double VitalSign1 { get; set; }
  public double VitalSign2 { get; set; }
  public int MedConfFactor { get; set; }
  public string Time { get; set; }

  public EvacVitalSignData_AbridgedT() {
    this.VitalSign = null;
    this.VitalSign1 = 0.0;
    this.VitalSign2 = 0.0;
    this.MedConfFactor = 0;
    this.Time = null;
  }
  public static EvacVitalSignData_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacVitalSignData_Abridged.GetRootAsEvacVitalSignData_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacVitalSignData_Abridged.FinishEvacVitalSignData_AbridgedBuffer(fbb, EvacVitalSignData_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacVitalSignData_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*VitalSign*/, false)
      && verifier.VerifyField(tablePos, 6 /*VitalSign1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*VitalSign2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*MedConfFactor*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Time*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
