// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Platform mission assignment data.
public struct MissionAssignment_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MissionAssignment_Ingest GetRootAsMissionAssignment_Ingest(ByteBuffer _bb) { return GetRootAsMissionAssignment_Ingest(_bb, new MissionAssignment_Ingest()); }
  public static MissionAssignment_Ingest GetRootAsMissionAssignment_Ingest(ByteBuffer _bb, MissionAssignment_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MissionAssignment_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MISS"); }
  public static bool VerifyMissionAssignment_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MISS", false, MissionAssignment_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MissionAssignment_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MISSIONASSIGNMENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The track ID that the status is referencing, addressee.
  /// Example: /// Example: TRK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrkId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTrkIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTrkIdArray() { return __p.__vector_as_array<byte>(8); }
  /// The timestamp of the mission data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(10); }
  /// The mission assignment discrete value.
  /// Example: /// Example: MAD
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string Mad { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMadBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMadBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMadArray() { return __p.__vector_as_array<byte>(12); }
  /// Receipt/Compliance, values from TABLE B-9.
  /// Example: /// Example: RC-123
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Rc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRcBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRcBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRcArray() { return __p.__vector_as_array<byte>(14); }
  /// Recurrence rate, receipt/compliance.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int Rr { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Track number objective.
  /// Example: /// Example: TRACK_NUMBER
  /// Constraints: No constraints specified.
  public string Tno { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTnoBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTnoBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTnoArray() { return __p.__vector_as_array<byte>(18); }
  /// Threat warning environment.
  /// Example: /// Example: THREAT_WARNING
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Twenv { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTwenvBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTwenvBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTwenvArray() { return __p.__vector_as_array<byte>(20); }
  /// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Origin of index number.
  /// Example: /// Example: ORIGIN
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Orginx { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrginxBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrginxBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrginxArray() { return __p.__vector_as_array<byte>(26); }
  /// Environment.
  /// Example: /// Example: ENV
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Env { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnvBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEnvBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEnvArray() { return __p.__vector_as_array<byte>(28); }
  /// Strength.
  /// Example: /// Example: STRENGTH
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Sz { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSzBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSzBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSzArray() { return __p.__vector_as_array<byte>(30); }
  /// Index number.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int Index { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C1associateddmpis { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
  /// Example: /// Example: C2SPC
  /// Constraints: No constraints specified.
  public string C2spc { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2spcBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetC2spcBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetC2spcArray() { return __p.__vector_as_array<byte>(36); }
  /// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
  /// Example: /// Example: C2AIR
  /// Constraints: No constraints specified.
  public string C2air { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2airBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetC2airBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetC2airArray() { return __p.__vector_as_array<byte>(38); }
  /// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
  /// Example: /// Example: C2SUR
  /// Constraints: No constraints specified.
  public string C2sur { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2surBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetC2surBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetC2surArray() { return __p.__vector_as_array<byte>(40); }
  /// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
  /// Example: /// Example: C2LND
  /// Constraints: No constraints specified.
  public string C2lnd { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2lndBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetC2lndBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetC2lndArray() { return __p.__vector_as_array<byte>(42); }
  /// TARGET DATA CONTINUATION WORD - identity.
  /// Example: /// Example: C2ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C2id { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2idBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetC2idBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetC2idArray() { return __p.__vector_as_array<byte>(44); }
  /// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
  /// Example: /// Example: C2IDAMP
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C2idamplifyingdescriptor { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2idamplifyingdescriptorBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetC2idamplifyingdescriptorBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetC2idamplifyingdescriptorArray() { return __p.__vector_as_array<byte>(46); }
  /// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C2alt { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C2crs { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C2spd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGET DATA CONTINUATION WORD - special interest indicator.
  /// Example: /// Example: C2SPECIAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C2specialinterestindicator { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2specialinterestindicatorBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetC2specialinterestindicatorBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetC2specialinterestindicatorArray() { return __p.__vector_as_array<byte>(54); }
  /// TARGET DATA CONTINUATION WORD - exercise indicator.
  /// Example: /// Example: C2EXERCISE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C2exerciseindicator { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2exerciseindicatorBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetC2exerciseindicatorBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetC2exerciseindicatorArray() { return __p.__vector_as_array<byte>(56); }
  /// TARGET DATA CONTINUATION WORD - method of fire.
  /// Example: /// Example: MOF
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C2exercisemof { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC2exercisemofBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetC2exercisemofBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetC2exercisemofArray() { return __p.__vector_as_array<byte>(58); }
  /// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double C3lat { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double C3lon { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double C3elv { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// TARGET DATA CONTINUATION WORD - point type 1.
  /// Example: /// Example: C3PTL
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C3ptl { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC3ptlBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetC3ptlBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetC3ptlArray() { return __p.__vector_as_array<byte>(66); }
  /// TARGET DATA CONTINUATION WORD - point number.
  /// Example: /// Example: C3PTNUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C3ptnum { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC3ptnumBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetC3ptnumBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetC3ptnumArray() { return __p.__vector_as_array<byte>(68); }
  /// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
  /// Example: /// Example: C4TGT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C4tgt { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC4tgtBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetC4tgtBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetC4tgtArray() { return __p.__vector_as_array<byte>(70); }
  /// SURFACE ATTACK CONTINUATION WORD - target defenses.
  /// Example: /// Example: C4DEF
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C4def { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC4defBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetC4defBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetC4defArray() { return __p.__vector_as_array<byte>(72); }
  /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C4runin { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int C4egress { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C4numberofstores { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - type of stores.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int C4typeofstores { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - time discrete.
  /// Example: /// Example: C4TIMED
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C4timediscrete { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC4timediscreteBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetC4timediscreteBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetC4timediscreteArray() { return __p.__vector_as_array<byte>(82); }
  /// SURFACE ATTACK CONTINUATION WORD - hour.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int C4tm { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - minute.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C4colon { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C4mod { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5haeadj { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - time window.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5tw { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - target bearing.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5tgtbrng { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5latlsb { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5lonlsb { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5elevationlsbs { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C5colon { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGETING CONTINUATION WORD - laser illuminator code.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C6laser { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGETING CONTINUATION WORD - index number, related, 0=NS.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C6intel { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGETING CONTINUATION WORD - track number, related to 3.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int C6tnr3 { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
  /// Example: /// Example: C6DSPCT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C6dspct { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC6dspctBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetC6dspctBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetC6dspctArray() { return __p.__vector_as_array<byte>(110); }
  /// TARGETING CONTINUATION WORD - designator/seeker pulse code.
  /// Example: /// Example: C6DSPC
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C6dspc { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC6dspcBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetC6dspcBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetC6dspcArray() { return __p.__vector_as_array<byte>(112); }
  /// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
  /// Example: /// Example: C6FPLPM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C6fplpm { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC6fplpmBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetC6fplpmBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetC6fplpmArray() { return __p.__vector_as_array<byte>(114); }
  /// TARGETING CONTINUATION WORD - long pulse mode.
  /// Example: /// Example: C6LONGPM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string C6longpm { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC6longpmBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetC6longpmBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetC6longpmArray() { return __p.__vector_as_array<byte>(116); }
  /// THIRD PARTY CONTINUATION WORD  - track number, index originator.
  /// Example: /// Example: C7TNOR
  /// Constraints: No constraints specified.
  public string C7tnor { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetC7tnorBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetC7tnorBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetC7tnorArray() { return __p.__vector_as_array<byte>(118); }
  /// THIRD PARTY CONTINUATION WORD  - index number, third party.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int C7in3p { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double C7elang2 { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(124); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(126); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(128); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(130); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public MissionAssignment_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(132); return o != 0 ? (MissionAssignment_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : MissionAssignment_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(134); }

  public static Offset<MissionAssignment_Ingest> CreateMissionAssignment_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset trkIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      StringOffset madOffset = default(StringOffset),
      StringOffset rcOffset = default(StringOffset),
      int rr = 0,
      StringOffset tnoOffset = default(StringOffset),
      StringOffset twenvOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      StringOffset orginxOffset = default(StringOffset),
      StringOffset envOffset = default(StringOffset),
      StringOffset szOffset = default(StringOffset),
      int index = 0,
      int c1associateddmpis = 0,
      StringOffset c2spcOffset = default(StringOffset),
      StringOffset c2airOffset = default(StringOffset),
      StringOffset c2surOffset = default(StringOffset),
      StringOffset c2lndOffset = default(StringOffset),
      StringOffset c2idOffset = default(StringOffset),
      StringOffset c2idamplifyingdescriptorOffset = default(StringOffset),
      int c2alt = 0,
      int c2crs = 0,
      int c2spd = 0,
      StringOffset c2specialinterestindicatorOffset = default(StringOffset),
      StringOffset c2exerciseindicatorOffset = default(StringOffset),
      StringOffset c2exercisemofOffset = default(StringOffset),
      double c3lat = 0.0,
      double c3lon = 0.0,
      double c3elv = 0.0,
      StringOffset c3ptlOffset = default(StringOffset),
      StringOffset c3ptnumOffset = default(StringOffset),
      StringOffset c4tgtOffset = default(StringOffset),
      StringOffset c4defOffset = default(StringOffset),
      int c4runin = 0,
      int c4egress = 0,
      int c4numberofstores = 0,
      int c4typeofstores = 0,
      StringOffset c4timediscreteOffset = default(StringOffset),
      int c4tm = 0,
      int c4colon = 0,
      int c4mod = 0,
      int c5haeadj = 0,
      int c5tw = 0,
      int c5tgtbrng = 0,
      int c5latlsb = 0,
      int c5lonlsb = 0,
      int c5elevationlsbs = 0,
      int c5colon = 0,
      int c6laser = 0,
      int c6intel = 0,
      int c6tnr3 = 0,
      StringOffset c6dspctOffset = default(StringOffset),
      StringOffset c6dspcOffset = default(StringOffset),
      StringOffset c6fplpmOffset = default(StringOffset),
      StringOffset c6longpmOffset = default(StringOffset),
      StringOffset c7tnorOffset = default(StringOffset),
      int c7in3p = 0,
      double c7elang2 = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      MissionAssignment_Ingest_dataMode_Enum dataMode = MissionAssignment_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(66);
    MissionAssignment_Ingest.AddC7elang2(builder, c7elang2);
    MissionAssignment_Ingest.AddC3elv(builder, c3elv);
    MissionAssignment_Ingest.AddC3lon(builder, c3lon);
    MissionAssignment_Ingest.AddC3lat(builder, c3lat);
    MissionAssignment_Ingest.AddLon(builder, lon);
    MissionAssignment_Ingest.AddLat(builder, lat);
    MissionAssignment_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    MissionAssignment_Ingest.AddOrigin(builder, originOffset);
    MissionAssignment_Ingest.AddSource(builder, sourceOffset);
    MissionAssignment_Ingest.AddCreatedBy(builder, createdByOffset);
    MissionAssignment_Ingest.AddCreatedAt(builder, createdAtOffset);
    MissionAssignment_Ingest.AddC7in3p(builder, c7in3p);
    MissionAssignment_Ingest.AddC7tnor(builder, c7tnorOffset);
    MissionAssignment_Ingest.AddC6longpm(builder, c6longpmOffset);
    MissionAssignment_Ingest.AddC6fplpm(builder, c6fplpmOffset);
    MissionAssignment_Ingest.AddC6dspc(builder, c6dspcOffset);
    MissionAssignment_Ingest.AddC6dspct(builder, c6dspctOffset);
    MissionAssignment_Ingest.AddC6tnr3(builder, c6tnr3);
    MissionAssignment_Ingest.AddC6intel(builder, c6intel);
    MissionAssignment_Ingest.AddC6laser(builder, c6laser);
    MissionAssignment_Ingest.AddC5colon(builder, c5colon);
    MissionAssignment_Ingest.AddC5elevationlsbs(builder, c5elevationlsbs);
    MissionAssignment_Ingest.AddC5lonlsb(builder, c5lonlsb);
    MissionAssignment_Ingest.AddC5latlsb(builder, c5latlsb);
    MissionAssignment_Ingest.AddC5tgtbrng(builder, c5tgtbrng);
    MissionAssignment_Ingest.AddC5tw(builder, c5tw);
    MissionAssignment_Ingest.AddC5haeadj(builder, c5haeadj);
    MissionAssignment_Ingest.AddC4mod(builder, c4mod);
    MissionAssignment_Ingest.AddC4colon(builder, c4colon);
    MissionAssignment_Ingest.AddC4tm(builder, c4tm);
    MissionAssignment_Ingest.AddC4timediscrete(builder, c4timediscreteOffset);
    MissionAssignment_Ingest.AddC4typeofstores(builder, c4typeofstores);
    MissionAssignment_Ingest.AddC4numberofstores(builder, c4numberofstores);
    MissionAssignment_Ingest.AddC4egress(builder, c4egress);
    MissionAssignment_Ingest.AddC4runin(builder, c4runin);
    MissionAssignment_Ingest.AddC4def(builder, c4defOffset);
    MissionAssignment_Ingest.AddC4tgt(builder, c4tgtOffset);
    MissionAssignment_Ingest.AddC3ptnum(builder, c3ptnumOffset);
    MissionAssignment_Ingest.AddC3ptl(builder, c3ptlOffset);
    MissionAssignment_Ingest.AddC2exercisemof(builder, c2exercisemofOffset);
    MissionAssignment_Ingest.AddC2exerciseindicator(builder, c2exerciseindicatorOffset);
    MissionAssignment_Ingest.AddC2specialinterestindicator(builder, c2specialinterestindicatorOffset);
    MissionAssignment_Ingest.AddC2spd(builder, c2spd);
    MissionAssignment_Ingest.AddC2crs(builder, c2crs);
    MissionAssignment_Ingest.AddC2alt(builder, c2alt);
    MissionAssignment_Ingest.AddC2idamplifyingdescriptor(builder, c2idamplifyingdescriptorOffset);
    MissionAssignment_Ingest.AddC2id(builder, c2idOffset);
    MissionAssignment_Ingest.AddC2lnd(builder, c2lndOffset);
    MissionAssignment_Ingest.AddC2sur(builder, c2surOffset);
    MissionAssignment_Ingest.AddC2air(builder, c2airOffset);
    MissionAssignment_Ingest.AddC2spc(builder, c2spcOffset);
    MissionAssignment_Ingest.AddC1associateddmpis(builder, c1associateddmpis);
    MissionAssignment_Ingest.AddIndex(builder, index);
    MissionAssignment_Ingest.AddSz(builder, szOffset);
    MissionAssignment_Ingest.AddEnv(builder, envOffset);
    MissionAssignment_Ingest.AddOrginx(builder, orginxOffset);
    MissionAssignment_Ingest.AddTwenv(builder, twenvOffset);
    MissionAssignment_Ingest.AddTno(builder, tnoOffset);
    MissionAssignment_Ingest.AddRr(builder, rr);
    MissionAssignment_Ingest.AddRc(builder, rcOffset);
    MissionAssignment_Ingest.AddMad(builder, madOffset);
    MissionAssignment_Ingest.AddTs(builder, tsOffset);
    MissionAssignment_Ingest.AddTrkId(builder, trkIdOffset);
    MissionAssignment_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    MissionAssignment_Ingest.AddId(builder, idOffset);
    MissionAssignment_Ingest.AddDataMode(builder, dataMode);
    return MissionAssignment_Ingest.EndMissionAssignment_Ingest(builder);
  }

  public static void StartMissionAssignment_Ingest(FlatBufferBuilder builder) { builder.StartTable(66); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddTrkId(FlatBufferBuilder builder, StringOffset trkIdOffset) { builder.AddOffset(2, trkIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(3, tsOffset.Value, 0); }
  public static void AddMad(FlatBufferBuilder builder, StringOffset madOffset) { builder.AddOffset(4, madOffset.Value, 0); }
  public static void AddRc(FlatBufferBuilder builder, StringOffset rcOffset) { builder.AddOffset(5, rcOffset.Value, 0); }
  public static void AddRr(FlatBufferBuilder builder, int rr) { builder.AddInt(6, rr, 0); }
  public static void AddTno(FlatBufferBuilder builder, StringOffset tnoOffset) { builder.AddOffset(7, tnoOffset.Value, 0); }
  public static void AddTwenv(FlatBufferBuilder builder, StringOffset twenvOffset) { builder.AddOffset(8, twenvOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(9, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(10, lon, 0.0); }
  public static void AddOrginx(FlatBufferBuilder builder, StringOffset orginxOffset) { builder.AddOffset(11, orginxOffset.Value, 0); }
  public static void AddEnv(FlatBufferBuilder builder, StringOffset envOffset) { builder.AddOffset(12, envOffset.Value, 0); }
  public static void AddSz(FlatBufferBuilder builder, StringOffset szOffset) { builder.AddOffset(13, szOffset.Value, 0); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(14, index, 0); }
  public static void AddC1associateddmpis(FlatBufferBuilder builder, int c1associateddmpis) { builder.AddInt(15, c1associateddmpis, 0); }
  public static void AddC2spc(FlatBufferBuilder builder, StringOffset c2spcOffset) { builder.AddOffset(16, c2spcOffset.Value, 0); }
  public static void AddC2air(FlatBufferBuilder builder, StringOffset c2airOffset) { builder.AddOffset(17, c2airOffset.Value, 0); }
  public static void AddC2sur(FlatBufferBuilder builder, StringOffset c2surOffset) { builder.AddOffset(18, c2surOffset.Value, 0); }
  public static void AddC2lnd(FlatBufferBuilder builder, StringOffset c2lndOffset) { builder.AddOffset(19, c2lndOffset.Value, 0); }
  public static void AddC2id(FlatBufferBuilder builder, StringOffset c2idOffset) { builder.AddOffset(20, c2idOffset.Value, 0); }
  public static void AddC2idamplifyingdescriptor(FlatBufferBuilder builder, StringOffset c2idamplifyingdescriptorOffset) { builder.AddOffset(21, c2idamplifyingdescriptorOffset.Value, 0); }
  public static void AddC2alt(FlatBufferBuilder builder, int c2alt) { builder.AddInt(22, c2alt, 0); }
  public static void AddC2crs(FlatBufferBuilder builder, int c2crs) { builder.AddInt(23, c2crs, 0); }
  public static void AddC2spd(FlatBufferBuilder builder, int c2spd) { builder.AddInt(24, c2spd, 0); }
  public static void AddC2specialinterestindicator(FlatBufferBuilder builder, StringOffset c2specialinterestindicatorOffset) { builder.AddOffset(25, c2specialinterestindicatorOffset.Value, 0); }
  public static void AddC2exerciseindicator(FlatBufferBuilder builder, StringOffset c2exerciseindicatorOffset) { builder.AddOffset(26, c2exerciseindicatorOffset.Value, 0); }
  public static void AddC2exercisemof(FlatBufferBuilder builder, StringOffset c2exercisemofOffset) { builder.AddOffset(27, c2exercisemofOffset.Value, 0); }
  public static void AddC3lat(FlatBufferBuilder builder, double c3lat) { builder.AddDouble(28, c3lat, 0.0); }
  public static void AddC3lon(FlatBufferBuilder builder, double c3lon) { builder.AddDouble(29, c3lon, 0.0); }
  public static void AddC3elv(FlatBufferBuilder builder, double c3elv) { builder.AddDouble(30, c3elv, 0.0); }
  public static void AddC3ptl(FlatBufferBuilder builder, StringOffset c3ptlOffset) { builder.AddOffset(31, c3ptlOffset.Value, 0); }
  public static void AddC3ptnum(FlatBufferBuilder builder, StringOffset c3ptnumOffset) { builder.AddOffset(32, c3ptnumOffset.Value, 0); }
  public static void AddC4tgt(FlatBufferBuilder builder, StringOffset c4tgtOffset) { builder.AddOffset(33, c4tgtOffset.Value, 0); }
  public static void AddC4def(FlatBufferBuilder builder, StringOffset c4defOffset) { builder.AddOffset(34, c4defOffset.Value, 0); }
  public static void AddC4runin(FlatBufferBuilder builder, int c4runin) { builder.AddInt(35, c4runin, 0); }
  public static void AddC4egress(FlatBufferBuilder builder, int c4egress) { builder.AddInt(36, c4egress, 0); }
  public static void AddC4numberofstores(FlatBufferBuilder builder, int c4numberofstores) { builder.AddInt(37, c4numberofstores, 0); }
  public static void AddC4typeofstores(FlatBufferBuilder builder, int c4typeofstores) { builder.AddInt(38, c4typeofstores, 0); }
  public static void AddC4timediscrete(FlatBufferBuilder builder, StringOffset c4timediscreteOffset) { builder.AddOffset(39, c4timediscreteOffset.Value, 0); }
  public static void AddC4tm(FlatBufferBuilder builder, int c4tm) { builder.AddInt(40, c4tm, 0); }
  public static void AddC4colon(FlatBufferBuilder builder, int c4colon) { builder.AddInt(41, c4colon, 0); }
  public static void AddC4mod(FlatBufferBuilder builder, int c4mod) { builder.AddInt(42, c4mod, 0); }
  public static void AddC5haeadj(FlatBufferBuilder builder, int c5haeadj) { builder.AddInt(43, c5haeadj, 0); }
  public static void AddC5tw(FlatBufferBuilder builder, int c5tw) { builder.AddInt(44, c5tw, 0); }
  public static void AddC5tgtbrng(FlatBufferBuilder builder, int c5tgtbrng) { builder.AddInt(45, c5tgtbrng, 0); }
  public static void AddC5latlsb(FlatBufferBuilder builder, int c5latlsb) { builder.AddInt(46, c5latlsb, 0); }
  public static void AddC5lonlsb(FlatBufferBuilder builder, int c5lonlsb) { builder.AddInt(47, c5lonlsb, 0); }
  public static void AddC5elevationlsbs(FlatBufferBuilder builder, int c5elevationlsbs) { builder.AddInt(48, c5elevationlsbs, 0); }
  public static void AddC5colon(FlatBufferBuilder builder, int c5colon) { builder.AddInt(49, c5colon, 0); }
  public static void AddC6laser(FlatBufferBuilder builder, int c6laser) { builder.AddInt(50, c6laser, 0); }
  public static void AddC6intel(FlatBufferBuilder builder, int c6intel) { builder.AddInt(51, c6intel, 0); }
  public static void AddC6tnr3(FlatBufferBuilder builder, int c6tnr3) { builder.AddInt(52, c6tnr3, 0); }
  public static void AddC6dspct(FlatBufferBuilder builder, StringOffset c6dspctOffset) { builder.AddOffset(53, c6dspctOffset.Value, 0); }
  public static void AddC6dspc(FlatBufferBuilder builder, StringOffset c6dspcOffset) { builder.AddOffset(54, c6dspcOffset.Value, 0); }
  public static void AddC6fplpm(FlatBufferBuilder builder, StringOffset c6fplpmOffset) { builder.AddOffset(55, c6fplpmOffset.Value, 0); }
  public static void AddC6longpm(FlatBufferBuilder builder, StringOffset c6longpmOffset) { builder.AddOffset(56, c6longpmOffset.Value, 0); }
  public static void AddC7tnor(FlatBufferBuilder builder, StringOffset c7tnorOffset) { builder.AddOffset(57, c7tnorOffset.Value, 0); }
  public static void AddC7in3p(FlatBufferBuilder builder, int c7in3p) { builder.AddInt(58, c7in3p, 0); }
  public static void AddC7elang2(FlatBufferBuilder builder, double c7elang2) { builder.AddDouble(59, c7elang2, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(60, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(61, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(62, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(63, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, MissionAssignment_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(64, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(65, origNetworkOffset.Value, 0); }
  public static Offset<MissionAssignment_Ingest> EndMissionAssignment_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MissionAssignment_Ingest>(o);
  }
  public static void FinishMissionAssignment_IngestBuffer(FlatBufferBuilder builder, Offset<MissionAssignment_Ingest> offset) { builder.Finish(offset.Value, "MISS"); }
  public static void FinishSizePrefixedMissionAssignment_IngestBuffer(FlatBufferBuilder builder, Offset<MissionAssignment_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "MISS"); }
  public MissionAssignment_IngestT UnPack() {
    var _o = new MissionAssignment_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MissionAssignment_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.TrkId = this.TrkId;
    _o.Ts = this.Ts;
    _o.Mad = this.Mad;
    _o.Rc = this.Rc;
    _o.Rr = this.Rr;
    _o.Tno = this.Tno;
    _o.Twenv = this.Twenv;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Orginx = this.Orginx;
    _o.Env = this.Env;
    _o.Sz = this.Sz;
    _o.Index = this.Index;
    _o.C1associateddmpis = this.C1associateddmpis;
    _o.C2spc = this.C2spc;
    _o.C2air = this.C2air;
    _o.C2sur = this.C2sur;
    _o.C2lnd = this.C2lnd;
    _o.C2id = this.C2id;
    _o.C2idamplifyingdescriptor = this.C2idamplifyingdescriptor;
    _o.C2alt = this.C2alt;
    _o.C2crs = this.C2crs;
    _o.C2spd = this.C2spd;
    _o.C2specialinterestindicator = this.C2specialinterestindicator;
    _o.C2exerciseindicator = this.C2exerciseindicator;
    _o.C2exercisemof = this.C2exercisemof;
    _o.C3lat = this.C3lat;
    _o.C3lon = this.C3lon;
    _o.C3elv = this.C3elv;
    _o.C3ptl = this.C3ptl;
    _o.C3ptnum = this.C3ptnum;
    _o.C4tgt = this.C4tgt;
    _o.C4def = this.C4def;
    _o.C4runin = this.C4runin;
    _o.C4egress = this.C4egress;
    _o.C4numberofstores = this.C4numberofstores;
    _o.C4typeofstores = this.C4typeofstores;
    _o.C4timediscrete = this.C4timediscrete;
    _o.C4tm = this.C4tm;
    _o.C4colon = this.C4colon;
    _o.C4mod = this.C4mod;
    _o.C5haeadj = this.C5haeadj;
    _o.C5tw = this.C5tw;
    _o.C5tgtbrng = this.C5tgtbrng;
    _o.C5latlsb = this.C5latlsb;
    _o.C5lonlsb = this.C5lonlsb;
    _o.C5elevationlsbs = this.C5elevationlsbs;
    _o.C5colon = this.C5colon;
    _o.C6laser = this.C6laser;
    _o.C6intel = this.C6intel;
    _o.C6tnr3 = this.C6tnr3;
    _o.C6dspct = this.C6dspct;
    _o.C6dspc = this.C6dspc;
    _o.C6fplpm = this.C6fplpm;
    _o.C6longpm = this.C6longpm;
    _o.C7tnor = this.C7tnor;
    _o.C7in3p = this.C7in3p;
    _o.C7elang2 = this.C7elang2;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<MissionAssignment_Ingest> Pack(FlatBufferBuilder builder, MissionAssignment_IngestT _o) {
    if (_o == null) return default(Offset<MissionAssignment_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _trkId = _o.TrkId == null ? default(StringOffset) : builder.CreateString(_o.TrkId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _mad = _o.Mad == null ? default(StringOffset) : builder.CreateString(_o.Mad);
    var _rc = _o.Rc == null ? default(StringOffset) : builder.CreateString(_o.Rc);
    var _tno = _o.Tno == null ? default(StringOffset) : builder.CreateString(_o.Tno);
    var _twenv = _o.Twenv == null ? default(StringOffset) : builder.CreateString(_o.Twenv);
    var _orginx = _o.Orginx == null ? default(StringOffset) : builder.CreateString(_o.Orginx);
    var _env = _o.Env == null ? default(StringOffset) : builder.CreateString(_o.Env);
    var _sz = _o.Sz == null ? default(StringOffset) : builder.CreateString(_o.Sz);
    var _c2spc = _o.C2spc == null ? default(StringOffset) : builder.CreateString(_o.C2spc);
    var _c2air = _o.C2air == null ? default(StringOffset) : builder.CreateString(_o.C2air);
    var _c2sur = _o.C2sur == null ? default(StringOffset) : builder.CreateString(_o.C2sur);
    var _c2lnd = _o.C2lnd == null ? default(StringOffset) : builder.CreateString(_o.C2lnd);
    var _c2id = _o.C2id == null ? default(StringOffset) : builder.CreateString(_o.C2id);
    var _c2idamplifyingdescriptor = _o.C2idamplifyingdescriptor == null ? default(StringOffset) : builder.CreateString(_o.C2idamplifyingdescriptor);
    var _c2specialinterestindicator = _o.C2specialinterestindicator == null ? default(StringOffset) : builder.CreateString(_o.C2specialinterestindicator);
    var _c2exerciseindicator = _o.C2exerciseindicator == null ? default(StringOffset) : builder.CreateString(_o.C2exerciseindicator);
    var _c2exercisemof = _o.C2exercisemof == null ? default(StringOffset) : builder.CreateString(_o.C2exercisemof);
    var _c3ptl = _o.C3ptl == null ? default(StringOffset) : builder.CreateString(_o.C3ptl);
    var _c3ptnum = _o.C3ptnum == null ? default(StringOffset) : builder.CreateString(_o.C3ptnum);
    var _c4tgt = _o.C4tgt == null ? default(StringOffset) : builder.CreateString(_o.C4tgt);
    var _c4def = _o.C4def == null ? default(StringOffset) : builder.CreateString(_o.C4def);
    var _c4timediscrete = _o.C4timediscrete == null ? default(StringOffset) : builder.CreateString(_o.C4timediscrete);
    var _c6dspct = _o.C6dspct == null ? default(StringOffset) : builder.CreateString(_o.C6dspct);
    var _c6dspc = _o.C6dspc == null ? default(StringOffset) : builder.CreateString(_o.C6dspc);
    var _c6fplpm = _o.C6fplpm == null ? default(StringOffset) : builder.CreateString(_o.C6fplpm);
    var _c6longpm = _o.C6longpm == null ? default(StringOffset) : builder.CreateString(_o.C6longpm);
    var _c7tnor = _o.C7tnor == null ? default(StringOffset) : builder.CreateString(_o.C7tnor);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateMissionAssignment_Ingest(
      builder,
      _id,
      _classificationMarking,
      _trkId,
      _ts,
      _mad,
      _rc,
      _o.Rr,
      _tno,
      _twenv,
      _o.Lat,
      _o.Lon,
      _orginx,
      _env,
      _sz,
      _o.Index,
      _o.C1associateddmpis,
      _c2spc,
      _c2air,
      _c2sur,
      _c2lnd,
      _c2id,
      _c2idamplifyingdescriptor,
      _o.C2alt,
      _o.C2crs,
      _o.C2spd,
      _c2specialinterestindicator,
      _c2exerciseindicator,
      _c2exercisemof,
      _o.C3lat,
      _o.C3lon,
      _o.C3elv,
      _c3ptl,
      _c3ptnum,
      _c4tgt,
      _c4def,
      _o.C4runin,
      _o.C4egress,
      _o.C4numberofstores,
      _o.C4typeofstores,
      _c4timediscrete,
      _o.C4tm,
      _o.C4colon,
      _o.C4mod,
      _o.C5haeadj,
      _o.C5tw,
      _o.C5tgtbrng,
      _o.C5latlsb,
      _o.C5lonlsb,
      _o.C5elevationlsbs,
      _o.C5colon,
      _o.C6laser,
      _o.C6intel,
      _o.C6tnr3,
      _c6dspct,
      _c6dspc,
      _c6fplpm,
      _c6longpm,
      _c7tnor,
      _o.C7in3p,
      _o.C7elang2,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class MissionAssignment_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string TrkId { get; set; }
  public string Ts { get; set; }
  public string Mad { get; set; }
  public string Rc { get; set; }
  public int Rr { get; set; }
  public string Tno { get; set; }
  public string Twenv { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string Orginx { get; set; }
  public string Env { get; set; }
  public string Sz { get; set; }
  public int Index { get; set; }
  public int C1associateddmpis { get; set; }
  public string C2spc { get; set; }
  public string C2air { get; set; }
  public string C2sur { get; set; }
  public string C2lnd { get; set; }
  public string C2id { get; set; }
  public string C2idamplifyingdescriptor { get; set; }
  public int C2alt { get; set; }
  public int C2crs { get; set; }
  public int C2spd { get; set; }
  public string C2specialinterestindicator { get; set; }
  public string C2exerciseindicator { get; set; }
  public string C2exercisemof { get; set; }
  public double C3lat { get; set; }
  public double C3lon { get; set; }
  public double C3elv { get; set; }
  public string C3ptl { get; set; }
  public string C3ptnum { get; set; }
  public string C4tgt { get; set; }
  public string C4def { get; set; }
  public int C4runin { get; set; }
  public int C4egress { get; set; }
  public int C4numberofstores { get; set; }
  public int C4typeofstores { get; set; }
  public string C4timediscrete { get; set; }
  public int C4tm { get; set; }
  public int C4colon { get; set; }
  public int C4mod { get; set; }
  public int C5haeadj { get; set; }
  public int C5tw { get; set; }
  public int C5tgtbrng { get; set; }
  public int C5latlsb { get; set; }
  public int C5lonlsb { get; set; }
  public int C5elevationlsbs { get; set; }
  public int C5colon { get; set; }
  public int C6laser { get; set; }
  public int C6intel { get; set; }
  public int C6tnr3 { get; set; }
  public string C6dspct { get; set; }
  public string C6dspc { get; set; }
  public string C6fplpm { get; set; }
  public string C6longpm { get; set; }
  public string C7tnor { get; set; }
  public int C7in3p { get; set; }
  public double C7elang2 { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public MissionAssignment_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public MissionAssignment_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.TrkId = null;
    this.Ts = null;
    this.Mad = null;
    this.Rc = null;
    this.Rr = 0;
    this.Tno = null;
    this.Twenv = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Orginx = null;
    this.Env = null;
    this.Sz = null;
    this.Index = 0;
    this.C1associateddmpis = 0;
    this.C2spc = null;
    this.C2air = null;
    this.C2sur = null;
    this.C2lnd = null;
    this.C2id = null;
    this.C2idamplifyingdescriptor = null;
    this.C2alt = 0;
    this.C2crs = 0;
    this.C2spd = 0;
    this.C2specialinterestindicator = null;
    this.C2exerciseindicator = null;
    this.C2exercisemof = null;
    this.C3lat = 0.0;
    this.C3lon = 0.0;
    this.C3elv = 0.0;
    this.C3ptl = null;
    this.C3ptnum = null;
    this.C4tgt = null;
    this.C4def = null;
    this.C4runin = 0;
    this.C4egress = 0;
    this.C4numberofstores = 0;
    this.C4typeofstores = 0;
    this.C4timediscrete = null;
    this.C4tm = 0;
    this.C4colon = 0;
    this.C4mod = 0;
    this.C5haeadj = 0;
    this.C5tw = 0;
    this.C5tgtbrng = 0;
    this.C5latlsb = 0;
    this.C5lonlsb = 0;
    this.C5elevationlsbs = 0;
    this.C5colon = 0;
    this.C6laser = 0;
    this.C6intel = 0;
    this.C6tnr3 = 0;
    this.C6dspct = null;
    this.C6dspc = null;
    this.C6fplpm = null;
    this.C6longpm = null;
    this.C7tnor = null;
    this.C7in3p = 0;
    this.C7elang2 = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = MissionAssignment_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static MissionAssignment_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return MissionAssignment_Ingest.GetRootAsMissionAssignment_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MissionAssignment_Ingest.FinishMissionAssignment_IngestBuffer(fbb, MissionAssignment_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MissionAssignment_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*TrkId*/, false)
      && verifier.VerifyString(tablePos, 10 /*Ts*/, false)
      && verifier.VerifyString(tablePos, 12 /*Mad*/, false)
      && verifier.VerifyString(tablePos, 14 /*Rc*/, false)
      && verifier.VerifyField(tablePos, 16 /*Rr*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*Tno*/, false)
      && verifier.VerifyString(tablePos, 20 /*Twenv*/, false)
      && verifier.VerifyField(tablePos, 22 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*Orginx*/, false)
      && verifier.VerifyString(tablePos, 28 /*Env*/, false)
      && verifier.VerifyString(tablePos, 30 /*Sz*/, false)
      && verifier.VerifyField(tablePos, 32 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*C1associateddmpis*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*C2spc*/, false)
      && verifier.VerifyString(tablePos, 38 /*C2air*/, false)
      && verifier.VerifyString(tablePos, 40 /*C2sur*/, false)
      && verifier.VerifyString(tablePos, 42 /*C2lnd*/, false)
      && verifier.VerifyString(tablePos, 44 /*C2id*/, false)
      && verifier.VerifyString(tablePos, 46 /*C2idamplifyingdescriptor*/, false)
      && verifier.VerifyField(tablePos, 48 /*C2alt*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*C2crs*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*C2spd*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 54 /*C2specialinterestindicator*/, false)
      && verifier.VerifyString(tablePos, 56 /*C2exerciseindicator*/, false)
      && verifier.VerifyString(tablePos, 58 /*C2exercisemof*/, false)
      && verifier.VerifyField(tablePos, 60 /*C3lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*C3lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*C3elv*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 66 /*C3ptl*/, false)
      && verifier.VerifyString(tablePos, 68 /*C3ptnum*/, false)
      && verifier.VerifyString(tablePos, 70 /*C4tgt*/, false)
      && verifier.VerifyString(tablePos, 72 /*C4def*/, false)
      && verifier.VerifyField(tablePos, 74 /*C4runin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*C4egress*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*C4numberofstores*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*C4typeofstores*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 82 /*C4timediscrete*/, false)
      && verifier.VerifyField(tablePos, 84 /*C4tm*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*C4colon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*C4mod*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*C5haeadj*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*C5tw*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*C5tgtbrng*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*C5latlsb*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*C5lonlsb*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 100 /*C5elevationlsbs*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*C5colon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*C6laser*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 106 /*C6intel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*C6tnr3*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 110 /*C6dspct*/, false)
      && verifier.VerifyString(tablePos, 112 /*C6dspc*/, false)
      && verifier.VerifyString(tablePos, 114 /*C6fplpm*/, false)
      && verifier.VerifyString(tablePos, 116 /*C6longpm*/, false)
      && verifier.VerifyString(tablePos, 118 /*C7tnor*/, false)
      && verifier.VerifyField(tablePos, 120 /*C7in3p*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 122 /*C7elang2*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 124 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 126 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 128 /*Source*/, false)
      && verifier.VerifyString(tablePos, 130 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 132 /*DataMode*/, 1 /*MissionAssignment_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 134 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
