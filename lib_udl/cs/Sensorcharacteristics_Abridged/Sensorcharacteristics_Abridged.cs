// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of characteristics and capabilities of a sensor.
public struct Sensorcharacteristics_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Sensorcharacteristics_Abridged GetRootAsSensorcharacteristics_Abridged(ByteBuffer _bb) { return GetRootAsSensorcharacteristics_Abridged(_bb, new Sensorcharacteristics_Abridged()); }
  public static Sensorcharacteristics_Abridged GetRootAsSensorcharacteristics_Abridged(ByteBuffer _bb, Sensorcharacteristics_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Sensorcharacteristics_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensorcharacteristics_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, Sensorcharacteristics_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sensorcharacteristics_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORCHARACTERISTICS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier of the parent sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(10); }
  /// Azimuth rate acquisition limit (rad/min).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double AzimuthRate { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Elevation rate acquisition limit (rad/min).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double ElevationRateGeolm { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum range measurement capability of the sensor (km).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MinRangeLimit { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MaxRangeLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double LeftClockAngle { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RightClockAngle { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle of the center of a phased array sensor.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double Boresight { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of degrees off of the boresight for the sensor (degrees).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double BoresightOffAngle { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Negative Range-rate/relative velocity limit (km/sec).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double NegativeRangeRateLimit { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Positive Range-rate/relative velocity limit (km/sec).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double PositiveRangeRateLimit { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Absolute magnitude acquisition limit for optical sensors.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MagnitudeLimit { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double TrackAngle { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MinSignalNoiseRatio { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  public double FanBeamWidth { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum taskable range of the sensor (km).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double TaskableRange { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum observable sensor range (km).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MaxObservableRange { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radio frequency (if sensor is RF).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RadioFrequency { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar frequency of the sensor (if a radar sensor).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RadarFrequency { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar transmit power in Watts.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double TransmitPower { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Horizontal field of view.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double HFOV { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vertical field of view.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double VFOV { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Horizontal pixel resolution.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int HResPixels { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Vertical pixel resolution.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int VResPixels { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Sensor band.
  /// Example: /// Example: BAND
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Band { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBandBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetBandBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetBandArray() { return __p.__vector_as_array<byte>(58); }
  /// Max deviation angle of the sensor in degrees.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double MaxDeviationAngle { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optical sensor camera aperture.
  /// Example: /// Example: 2.23
  /// Constraints: No constraints specified.
  public double Aperture { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Leftmost GEO belt longitude limit for this sensor (if applicable).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double LeftGeoBeltLimit { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rightmost GEO belt longitude limit for this sensor (if applicable).
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RightGeoBeltLimit { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double AsrScanRate { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
  /// Example: /// Example: 1.4
  /// Constraints: No constraints specified.
  public double K { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, the focal point elevation of the radar at the site, in meters.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double FocalPoint { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For tower sensors, the physical height of the sensor tower, in meters.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double TowerHeight { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int TrueNorthCorrector { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Angle between magnetic north and true north at the sensor site, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double MagDec { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double Z1MinRange { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double Z2MinRange { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Z1MaxRange { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Z2MaxRange { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, radar maximum unambiguous range, in km.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RadarMUR { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double ProbFalseAlarm { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double Prf { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double RadarPulseWidth { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For radar based sensors, number of integrated pulses in a transmit cycle.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumIntegratedPulses { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Antenna true tilt, in degrees.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double TrueTilt { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Message data format transmitted by the sensor digitizer.
  /// Example: /// Example: DATA_FORMAT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string RadarMessageFormat { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRadarMessageFormatBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetRadarMessageFormatBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetRadarMessageFormatArray() { return __p.__vector_as_array<byte>(100); }
  /// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
  /// Example: /// Example: 3.5
  /// Constraints: No constraints specified.
  public double SystemNoiseTemperature { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Sensorcharacteristics_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(106); return o != 0 ? (Sensorcharacteristics_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Sensorcharacteristics_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(108); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(110); }

  public static Offset<Sensorcharacteristics_Abridged> CreateSensorcharacteristics_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      double azimuthRate = 0.0,
      double elevationRateGeolm = 0.0,
      double minRangeLimit = 0.0,
      double maxRangeLimit = 0.0,
      double leftClockAngle = 0.0,
      double rightClockAngle = 0.0,
      double boresight = 0.0,
      double boresightOffAngle = 0.0,
      double negativeRangeRateLimit = 0.0,
      double positiveRangeRateLimit = 0.0,
      double magnitudeLimit = 0.0,
      double trackAngle = 0.0,
      double minSignalNoiseRatio = 0.0,
      double fanBeamWidth = 0.0,
      double taskableRange = 0.0,
      double maxObservableRange = 0.0,
      double radioFrequency = 0.0,
      double radarFrequency = 0.0,
      double transmitPower = 0.0,
      double hFOV = 0.0,
      double vFOV = 0.0,
      int hResPixels = 0,
      int vResPixels = 0,
      StringOffset bandOffset = default(StringOffset),
      double maxDeviationAngle = 0.0,
      double aperture = 0.0,
      double leftGeoBeltLimit = 0.0,
      double rightGeoBeltLimit = 0.0,
      double asrScanRate = 0.0,
      double k = 0.0,
      double focalPoint = 0.0,
      double towerHeight = 0.0,
      int trueNorthCorrector = 0,
      double magDec = 0.0,
      double z1MinRange = 0.0,
      double z2MinRange = 0.0,
      double z1MaxRange = 0.0,
      double z2MaxRange = 0.0,
      double radarMUR = 0.0,
      double probFalseAlarm = 0.0,
      double prf = 0.0,
      double radarPulseWidth = 0.0,
      int numIntegratedPulses = 0,
      double trueTilt = 0.0,
      StringOffset radarMessageFormatOffset = default(StringOffset),
      double systemNoiseTemperature = 0.0,
      StringOffset sourceOffset = default(StringOffset),
      Sensorcharacteristics_Abridged_dataMode_Enum dataMode = Sensorcharacteristics_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(54);
    Sensorcharacteristics_Abridged.AddSystemNoiseTemperature(builder, systemNoiseTemperature);
    Sensorcharacteristics_Abridged.AddTrueTilt(builder, trueTilt);
    Sensorcharacteristics_Abridged.AddRadarPulseWidth(builder, radarPulseWidth);
    Sensorcharacteristics_Abridged.AddPrf(builder, prf);
    Sensorcharacteristics_Abridged.AddProbFalseAlarm(builder, probFalseAlarm);
    Sensorcharacteristics_Abridged.AddRadarMUR(builder, radarMUR);
    Sensorcharacteristics_Abridged.AddZ2MaxRange(builder, z2MaxRange);
    Sensorcharacteristics_Abridged.AddZ1MaxRange(builder, z1MaxRange);
    Sensorcharacteristics_Abridged.AddZ2MinRange(builder, z2MinRange);
    Sensorcharacteristics_Abridged.AddZ1MinRange(builder, z1MinRange);
    Sensorcharacteristics_Abridged.AddMagDec(builder, magDec);
    Sensorcharacteristics_Abridged.AddTowerHeight(builder, towerHeight);
    Sensorcharacteristics_Abridged.AddFocalPoint(builder, focalPoint);
    Sensorcharacteristics_Abridged.AddK(builder, k);
    Sensorcharacteristics_Abridged.AddAsrScanRate(builder, asrScanRate);
    Sensorcharacteristics_Abridged.AddRightGeoBeltLimit(builder, rightGeoBeltLimit);
    Sensorcharacteristics_Abridged.AddLeftGeoBeltLimit(builder, leftGeoBeltLimit);
    Sensorcharacteristics_Abridged.AddAperture(builder, aperture);
    Sensorcharacteristics_Abridged.AddMaxDeviationAngle(builder, maxDeviationAngle);
    Sensorcharacteristics_Abridged.AddVFOV(builder, vFOV);
    Sensorcharacteristics_Abridged.AddHFOV(builder, hFOV);
    Sensorcharacteristics_Abridged.AddTransmitPower(builder, transmitPower);
    Sensorcharacteristics_Abridged.AddRadarFrequency(builder, radarFrequency);
    Sensorcharacteristics_Abridged.AddRadioFrequency(builder, radioFrequency);
    Sensorcharacteristics_Abridged.AddMaxObservableRange(builder, maxObservableRange);
    Sensorcharacteristics_Abridged.AddTaskableRange(builder, taskableRange);
    Sensorcharacteristics_Abridged.AddFanBeamWidth(builder, fanBeamWidth);
    Sensorcharacteristics_Abridged.AddMinSignalNoiseRatio(builder, minSignalNoiseRatio);
    Sensorcharacteristics_Abridged.AddTrackAngle(builder, trackAngle);
    Sensorcharacteristics_Abridged.AddMagnitudeLimit(builder, magnitudeLimit);
    Sensorcharacteristics_Abridged.AddPositiveRangeRateLimit(builder, positiveRangeRateLimit);
    Sensorcharacteristics_Abridged.AddNegativeRangeRateLimit(builder, negativeRangeRateLimit);
    Sensorcharacteristics_Abridged.AddBoresightOffAngle(builder, boresightOffAngle);
    Sensorcharacteristics_Abridged.AddBoresight(builder, boresight);
    Sensorcharacteristics_Abridged.AddRightClockAngle(builder, rightClockAngle);
    Sensorcharacteristics_Abridged.AddLeftClockAngle(builder, leftClockAngle);
    Sensorcharacteristics_Abridged.AddMaxRangeLimit(builder, maxRangeLimit);
    Sensorcharacteristics_Abridged.AddMinRangeLimit(builder, minRangeLimit);
    Sensorcharacteristics_Abridged.AddElevationRateGeolm(builder, elevationRateGeolm);
    Sensorcharacteristics_Abridged.AddAzimuthRate(builder, azimuthRate);
    Sensorcharacteristics_Abridged.AddCreatedBy(builder, createdByOffset);
    Sensorcharacteristics_Abridged.AddCreatedAt(builder, createdAtOffset);
    Sensorcharacteristics_Abridged.AddSource(builder, sourceOffset);
    Sensorcharacteristics_Abridged.AddRadarMessageFormat(builder, radarMessageFormatOffset);
    Sensorcharacteristics_Abridged.AddNumIntegratedPulses(builder, numIntegratedPulses);
    Sensorcharacteristics_Abridged.AddTrueNorthCorrector(builder, trueNorthCorrector);
    Sensorcharacteristics_Abridged.AddBand(builder, bandOffset);
    Sensorcharacteristics_Abridged.AddVResPixels(builder, vResPixels);
    Sensorcharacteristics_Abridged.AddHResPixels(builder, hResPixels);
    Sensorcharacteristics_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Sensorcharacteristics_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Sensorcharacteristics_Abridged.AddIdSensor(builder, idSensorOffset);
    Sensorcharacteristics_Abridged.AddId(builder, idOffset);
    Sensorcharacteristics_Abridged.AddDataMode(builder, dataMode);
    return Sensorcharacteristics_Abridged.EndSensorcharacteristics_Abridged(builder);
  }

  public static void StartSensorcharacteristics_Abridged(FlatBufferBuilder builder) { builder.StartTable(54); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(1, idSensorOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(3, origNetworkOffset.Value, 0); }
  public static void AddAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.AddDouble(4, azimuthRate, 0.0); }
  public static void AddElevationRateGeolm(FlatBufferBuilder builder, double elevationRateGeolm) { builder.AddDouble(5, elevationRateGeolm, 0.0); }
  public static void AddMinRangeLimit(FlatBufferBuilder builder, double minRangeLimit) { builder.AddDouble(6, minRangeLimit, 0.0); }
  public static void AddMaxRangeLimit(FlatBufferBuilder builder, double maxRangeLimit) { builder.AddDouble(7, maxRangeLimit, 0.0); }
  public static void AddLeftClockAngle(FlatBufferBuilder builder, double leftClockAngle) { builder.AddDouble(8, leftClockAngle, 0.0); }
  public static void AddRightClockAngle(FlatBufferBuilder builder, double rightClockAngle) { builder.AddDouble(9, rightClockAngle, 0.0); }
  public static void AddBoresight(FlatBufferBuilder builder, double boresight) { builder.AddDouble(10, boresight, 0.0); }
  public static void AddBoresightOffAngle(FlatBufferBuilder builder, double boresightOffAngle) { builder.AddDouble(11, boresightOffAngle, 0.0); }
  public static void AddNegativeRangeRateLimit(FlatBufferBuilder builder, double negativeRangeRateLimit) { builder.AddDouble(12, negativeRangeRateLimit, 0.0); }
  public static void AddPositiveRangeRateLimit(FlatBufferBuilder builder, double positiveRangeRateLimit) { builder.AddDouble(13, positiveRangeRateLimit, 0.0); }
  public static void AddMagnitudeLimit(FlatBufferBuilder builder, double magnitudeLimit) { builder.AddDouble(14, magnitudeLimit, 0.0); }
  public static void AddTrackAngle(FlatBufferBuilder builder, double trackAngle) { builder.AddDouble(15, trackAngle, 0.0); }
  public static void AddMinSignalNoiseRatio(FlatBufferBuilder builder, double minSignalNoiseRatio) { builder.AddDouble(16, minSignalNoiseRatio, 0.0); }
  public static void AddFanBeamWidth(FlatBufferBuilder builder, double fanBeamWidth) { builder.AddDouble(17, fanBeamWidth, 0.0); }
  public static void AddTaskableRange(FlatBufferBuilder builder, double taskableRange) { builder.AddDouble(18, taskableRange, 0.0); }
  public static void AddMaxObservableRange(FlatBufferBuilder builder, double maxObservableRange) { builder.AddDouble(19, maxObservableRange, 0.0); }
  public static void AddRadioFrequency(FlatBufferBuilder builder, double radioFrequency) { builder.AddDouble(20, radioFrequency, 0.0); }
  public static void AddRadarFrequency(FlatBufferBuilder builder, double radarFrequency) { builder.AddDouble(21, radarFrequency, 0.0); }
  public static void AddTransmitPower(FlatBufferBuilder builder, double transmitPower) { builder.AddDouble(22, transmitPower, 0.0); }
  public static void AddHFOV(FlatBufferBuilder builder, double hFOV) { builder.AddDouble(23, hFOV, 0.0); }
  public static void AddVFOV(FlatBufferBuilder builder, double vFOV) { builder.AddDouble(24, vFOV, 0.0); }
  public static void AddHResPixels(FlatBufferBuilder builder, int hResPixels) { builder.AddInt(25, hResPixels, 0); }
  public static void AddVResPixels(FlatBufferBuilder builder, int vResPixels) { builder.AddInt(26, vResPixels, 0); }
  public static void AddBand(FlatBufferBuilder builder, StringOffset bandOffset) { builder.AddOffset(27, bandOffset.Value, 0); }
  public static void AddMaxDeviationAngle(FlatBufferBuilder builder, double maxDeviationAngle) { builder.AddDouble(28, maxDeviationAngle, 0.0); }
  public static void AddAperture(FlatBufferBuilder builder, double aperture) { builder.AddDouble(29, aperture, 0.0); }
  public static void AddLeftGeoBeltLimit(FlatBufferBuilder builder, double leftGeoBeltLimit) { builder.AddDouble(30, leftGeoBeltLimit, 0.0); }
  public static void AddRightGeoBeltLimit(FlatBufferBuilder builder, double rightGeoBeltLimit) { builder.AddDouble(31, rightGeoBeltLimit, 0.0); }
  public static void AddAsrScanRate(FlatBufferBuilder builder, double asrScanRate) { builder.AddDouble(32, asrScanRate, 0.0); }
  public static void AddK(FlatBufferBuilder builder, double k) { builder.AddDouble(33, k, 0.0); }
  public static void AddFocalPoint(FlatBufferBuilder builder, double focalPoint) { builder.AddDouble(34, focalPoint, 0.0); }
  public static void AddTowerHeight(FlatBufferBuilder builder, double towerHeight) { builder.AddDouble(35, towerHeight, 0.0); }
  public static void AddTrueNorthCorrector(FlatBufferBuilder builder, int trueNorthCorrector) { builder.AddInt(36, trueNorthCorrector, 0); }
  public static void AddMagDec(FlatBufferBuilder builder, double magDec) { builder.AddDouble(37, magDec, 0.0); }
  public static void AddZ1MinRange(FlatBufferBuilder builder, double z1MinRange) { builder.AddDouble(38, z1MinRange, 0.0); }
  public static void AddZ2MinRange(FlatBufferBuilder builder, double z2MinRange) { builder.AddDouble(39, z2MinRange, 0.0); }
  public static void AddZ1MaxRange(FlatBufferBuilder builder, double z1MaxRange) { builder.AddDouble(40, z1MaxRange, 0.0); }
  public static void AddZ2MaxRange(FlatBufferBuilder builder, double z2MaxRange) { builder.AddDouble(41, z2MaxRange, 0.0); }
  public static void AddRadarMUR(FlatBufferBuilder builder, double radarMUR) { builder.AddDouble(42, radarMUR, 0.0); }
  public static void AddProbFalseAlarm(FlatBufferBuilder builder, double probFalseAlarm) { builder.AddDouble(43, probFalseAlarm, 0.0); }
  public static void AddPrf(FlatBufferBuilder builder, double prf) { builder.AddDouble(44, prf, 0.0); }
  public static void AddRadarPulseWidth(FlatBufferBuilder builder, double radarPulseWidth) { builder.AddDouble(45, radarPulseWidth, 0.0); }
  public static void AddNumIntegratedPulses(FlatBufferBuilder builder, int numIntegratedPulses) { builder.AddInt(46, numIntegratedPulses, 0); }
  public static void AddTrueTilt(FlatBufferBuilder builder, double trueTilt) { builder.AddDouble(47, trueTilt, 0.0); }
  public static void AddRadarMessageFormat(FlatBufferBuilder builder, StringOffset radarMessageFormatOffset) { builder.AddOffset(48, radarMessageFormatOffset.Value, 0); }
  public static void AddSystemNoiseTemperature(FlatBufferBuilder builder, double systemNoiseTemperature) { builder.AddDouble(49, systemNoiseTemperature, 0.0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(50, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Sensorcharacteristics_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(51, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(52, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(53, createdByOffset.Value, 0); }
  public static Offset<Sensorcharacteristics_Abridged> EndSensorcharacteristics_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Sensorcharacteristics_Abridged>(o);
  }
  public static void FinishSensorcharacteristics_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensorcharacteristics_Abridged> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensorcharacteristics_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensorcharacteristics_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public Sensorcharacteristics_AbridgedT UnPack() {
    var _o = new Sensorcharacteristics_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Sensorcharacteristics_AbridgedT _o) {
    _o.Id = this.Id;
    _o.IdSensor = this.IdSensor;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigNetwork = this.OrigNetwork;
    _o.AzimuthRate = this.AzimuthRate;
    _o.ElevationRateGeolm = this.ElevationRateGeolm;
    _o.MinRangeLimit = this.MinRangeLimit;
    _o.MaxRangeLimit = this.MaxRangeLimit;
    _o.LeftClockAngle = this.LeftClockAngle;
    _o.RightClockAngle = this.RightClockAngle;
    _o.Boresight = this.Boresight;
    _o.BoresightOffAngle = this.BoresightOffAngle;
    _o.NegativeRangeRateLimit = this.NegativeRangeRateLimit;
    _o.PositiveRangeRateLimit = this.PositiveRangeRateLimit;
    _o.MagnitudeLimit = this.MagnitudeLimit;
    _o.TrackAngle = this.TrackAngle;
    _o.MinSignalNoiseRatio = this.MinSignalNoiseRatio;
    _o.FanBeamWidth = this.FanBeamWidth;
    _o.TaskableRange = this.TaskableRange;
    _o.MaxObservableRange = this.MaxObservableRange;
    _o.RadioFrequency = this.RadioFrequency;
    _o.RadarFrequency = this.RadarFrequency;
    _o.TransmitPower = this.TransmitPower;
    _o.HFOV = this.HFOV;
    _o.VFOV = this.VFOV;
    _o.HResPixels = this.HResPixels;
    _o.VResPixels = this.VResPixels;
    _o.Band = this.Band;
    _o.MaxDeviationAngle = this.MaxDeviationAngle;
    _o.Aperture = this.Aperture;
    _o.LeftGeoBeltLimit = this.LeftGeoBeltLimit;
    _o.RightGeoBeltLimit = this.RightGeoBeltLimit;
    _o.AsrScanRate = this.AsrScanRate;
    _o.K = this.K;
    _o.FocalPoint = this.FocalPoint;
    _o.TowerHeight = this.TowerHeight;
    _o.TrueNorthCorrector = this.TrueNorthCorrector;
    _o.MagDec = this.MagDec;
    _o.Z1MinRange = this.Z1MinRange;
    _o.Z2MinRange = this.Z2MinRange;
    _o.Z1MaxRange = this.Z1MaxRange;
    _o.Z2MaxRange = this.Z2MaxRange;
    _o.RadarMUR = this.RadarMUR;
    _o.ProbFalseAlarm = this.ProbFalseAlarm;
    _o.Prf = this.Prf;
    _o.RadarPulseWidth = this.RadarPulseWidth;
    _o.NumIntegratedPulses = this.NumIntegratedPulses;
    _o.TrueTilt = this.TrueTilt;
    _o.RadarMessageFormat = this.RadarMessageFormat;
    _o.SystemNoiseTemperature = this.SystemNoiseTemperature;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<Sensorcharacteristics_Abridged> Pack(FlatBufferBuilder builder, Sensorcharacteristics_AbridgedT _o) {
    if (_o == null) return default(Offset<Sensorcharacteristics_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _band = _o.Band == null ? default(StringOffset) : builder.CreateString(_o.Band);
    var _radarMessageFormat = _o.RadarMessageFormat == null ? default(StringOffset) : builder.CreateString(_o.RadarMessageFormat);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateSensorcharacteristics_Abridged(
      builder,
      _id,
      _idSensor,
      _classificationMarking,
      _origNetwork,
      _o.AzimuthRate,
      _o.ElevationRateGeolm,
      _o.MinRangeLimit,
      _o.MaxRangeLimit,
      _o.LeftClockAngle,
      _o.RightClockAngle,
      _o.Boresight,
      _o.BoresightOffAngle,
      _o.NegativeRangeRateLimit,
      _o.PositiveRangeRateLimit,
      _o.MagnitudeLimit,
      _o.TrackAngle,
      _o.MinSignalNoiseRatio,
      _o.FanBeamWidth,
      _o.TaskableRange,
      _o.MaxObservableRange,
      _o.RadioFrequency,
      _o.RadarFrequency,
      _o.TransmitPower,
      _o.HFOV,
      _o.VFOV,
      _o.HResPixels,
      _o.VResPixels,
      _band,
      _o.MaxDeviationAngle,
      _o.Aperture,
      _o.LeftGeoBeltLimit,
      _o.RightGeoBeltLimit,
      _o.AsrScanRate,
      _o.K,
      _o.FocalPoint,
      _o.TowerHeight,
      _o.TrueNorthCorrector,
      _o.MagDec,
      _o.Z1MinRange,
      _o.Z2MinRange,
      _o.Z1MaxRange,
      _o.Z2MaxRange,
      _o.RadarMUR,
      _o.ProbFalseAlarm,
      _o.Prf,
      _o.RadarPulseWidth,
      _o.NumIntegratedPulses,
      _o.TrueTilt,
      _radarMessageFormat,
      _o.SystemNoiseTemperature,
      _source,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class Sensorcharacteristics_AbridgedT
{
  public string Id { get; set; }
  public string IdSensor { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigNetwork { get; set; }
  public double AzimuthRate { get; set; }
  public double ElevationRateGeolm { get; set; }
  public double MinRangeLimit { get; set; }
  public double MaxRangeLimit { get; set; }
  public double LeftClockAngle { get; set; }
  public double RightClockAngle { get; set; }
  public double Boresight { get; set; }
  public double BoresightOffAngle { get; set; }
  public double NegativeRangeRateLimit { get; set; }
  public double PositiveRangeRateLimit { get; set; }
  public double MagnitudeLimit { get; set; }
  public double TrackAngle { get; set; }
  public double MinSignalNoiseRatio { get; set; }
  public double FanBeamWidth { get; set; }
  public double TaskableRange { get; set; }
  public double MaxObservableRange { get; set; }
  public double RadioFrequency { get; set; }
  public double RadarFrequency { get; set; }
  public double TransmitPower { get; set; }
  public double HFOV { get; set; }
  public double VFOV { get; set; }
  public int HResPixels { get; set; }
  public int VResPixels { get; set; }
  public string Band { get; set; }
  public double MaxDeviationAngle { get; set; }
  public double Aperture { get; set; }
  public double LeftGeoBeltLimit { get; set; }
  public double RightGeoBeltLimit { get; set; }
  public double AsrScanRate { get; set; }
  public double K { get; set; }
  public double FocalPoint { get; set; }
  public double TowerHeight { get; set; }
  public int TrueNorthCorrector { get; set; }
  public double MagDec { get; set; }
  public double Z1MinRange { get; set; }
  public double Z2MinRange { get; set; }
  public double Z1MaxRange { get; set; }
  public double Z2MaxRange { get; set; }
  public double RadarMUR { get; set; }
  public double ProbFalseAlarm { get; set; }
  public double Prf { get; set; }
  public double RadarPulseWidth { get; set; }
  public int NumIntegratedPulses { get; set; }
  public double TrueTilt { get; set; }
  public string RadarMessageFormat { get; set; }
  public double SystemNoiseTemperature { get; set; }
  public string Source { get; set; }
  public Sensorcharacteristics_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public Sensorcharacteristics_AbridgedT() {
    this.Id = null;
    this.IdSensor = null;
    this.ClassificationMarking = null;
    this.OrigNetwork = null;
    this.AzimuthRate = 0.0;
    this.ElevationRateGeolm = 0.0;
    this.MinRangeLimit = 0.0;
    this.MaxRangeLimit = 0.0;
    this.LeftClockAngle = 0.0;
    this.RightClockAngle = 0.0;
    this.Boresight = 0.0;
    this.BoresightOffAngle = 0.0;
    this.NegativeRangeRateLimit = 0.0;
    this.PositiveRangeRateLimit = 0.0;
    this.MagnitudeLimit = 0.0;
    this.TrackAngle = 0.0;
    this.MinSignalNoiseRatio = 0.0;
    this.FanBeamWidth = 0.0;
    this.TaskableRange = 0.0;
    this.MaxObservableRange = 0.0;
    this.RadioFrequency = 0.0;
    this.RadarFrequency = 0.0;
    this.TransmitPower = 0.0;
    this.HFOV = 0.0;
    this.VFOV = 0.0;
    this.HResPixels = 0;
    this.VResPixels = 0;
    this.Band = null;
    this.MaxDeviationAngle = 0.0;
    this.Aperture = 0.0;
    this.LeftGeoBeltLimit = 0.0;
    this.RightGeoBeltLimit = 0.0;
    this.AsrScanRate = 0.0;
    this.K = 0.0;
    this.FocalPoint = 0.0;
    this.TowerHeight = 0.0;
    this.TrueNorthCorrector = 0;
    this.MagDec = 0.0;
    this.Z1MinRange = 0.0;
    this.Z2MinRange = 0.0;
    this.Z1MaxRange = 0.0;
    this.Z2MaxRange = 0.0;
    this.RadarMUR = 0.0;
    this.ProbFalseAlarm = 0.0;
    this.Prf = 0.0;
    this.RadarPulseWidth = 0.0;
    this.NumIntegratedPulses = 0;
    this.TrueTilt = 0.0;
    this.RadarMessageFormat = null;
    this.SystemNoiseTemperature = 0.0;
    this.Source = null;
    this.DataMode = Sensorcharacteristics_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static Sensorcharacteristics_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Sensorcharacteristics_Abridged.GetRootAsSensorcharacteristics_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Sensorcharacteristics_Abridged.FinishSensorcharacteristics_AbridgedBuffer(fbb, Sensorcharacteristics_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Sensorcharacteristics_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 12 /*AzimuthRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*ElevationRateGeolm*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*MinRangeLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*MaxRangeLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*LeftClockAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*RightClockAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Boresight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*BoresightOffAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*NegativeRangeRateLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*PositiveRangeRateLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*MagnitudeLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*TrackAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*MinSignalNoiseRatio*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*FanBeamWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*TaskableRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*MaxObservableRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*RadioFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*RadarFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*TransmitPower*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*HFOV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*VFOV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*HResPixels*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*VResPixels*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*Band*/, false)
      && verifier.VerifyField(tablePos, 60 /*MaxDeviationAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Aperture*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*LeftGeoBeltLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*RightGeoBeltLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*AsrScanRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*K*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*FocalPoint*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*TowerHeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*TrueNorthCorrector*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*MagDec*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Z1MinRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Z2MinRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*Z1MaxRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*Z2MaxRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*RadarMUR*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*ProbFalseAlarm*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*Prf*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*RadarPulseWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*NumIntegratedPulses*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*TrueTilt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 100 /*RadarMessageFormat*/, false)
      && verifier.VerifyField(tablePos, 102 /*SystemNoiseTemperature*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 104 /*Source*/, false)
      && verifier.VerifyField(tablePos, 106 /*DataMode*/, 1 /*Sensorcharacteristics_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 108 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 110 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
