// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// No description available.
public struct OnorbitEvent_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OnorbitEvent_Abridged GetRootAsOnorbitEvent_Abridged(ByteBuffer _bb) { return GetRootAsOnorbitEvent_Abridged(_bb, new OnorbitEvent_Abridged()); }
  public static OnorbitEvent_Abridged GetRootAsOnorbitEvent_Abridged(ByteBuffer _bb, OnorbitEvent_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OnorbitEvent_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ONOR"); }
  public static bool VerifyOnorbitEvent_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ONOR", false, OnorbitEvent_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OnorbitEvent_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The sources or SCG references from which the classification of this data is derived.
  /// Example: /// Example: DERIVED_SOURCE
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string DerivedFrom { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDerivedFromBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDerivedFromBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDerivedFromArray() { return __p.__vector_as_array<byte>(8); }
  /// The declassification date of this data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:02.123Z
  /// Constraints: No constraints specified.
  public string DeclassificationDate { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeclassificationDateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDeclassificationDateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDeclassificationDateArray() { return __p.__vector_as_array<byte>(10); }
  /// Declassification string of this data.
  /// Example: /// Example: DECLASS_STRING
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string DeclassificationString { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeclassificationStringBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDeclassificationStringBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDeclassificationStringArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the on-orbit object for this event.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(14); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EventTime { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTimeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEventTimeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEventTimeArray() { return __p.__vector_as_array<byte>(20); }
  /// Notes/remarks on the validity/accuracy of the eventTime.
  /// Example: /// Example: Notes on validity
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string EventTimeNotes { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTimeNotesBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEventTimeNotesBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEventTimeNotesArray() { return __p.__vector_as_array<byte>(22); }
  /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OPERATORORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OperatorOrgId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperatorOrgIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOperatorOrgIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOperatorOrgIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OWNERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OwnerOrgId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnerOrgIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOwnerOrgIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOwnerOrgIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Unique identifier of the organization which leases this on-orbit spacecraft.
  /// Example: /// Example: LESSEEORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string LesseeOrgId { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLesseeOrgIdBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetLesseeOrgIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetLesseeOrgIdArray() { return __p.__vector_as_array<byte>(28); }
  /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
  /// Example: /// Example: OPERATEDONBEHALFOFORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OperatedOnBehalfOfOrgId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperatedOnBehalfOfOrgIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOperatedOnBehalfOfOrgIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOperatedOnBehalfOfOrgIdArray() { return __p.__vector_as_array<byte>(30); }
  /// GEO position longitude at event time if applicable. Negative values are west.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double GeoPosition { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// GEO plane slot of the spacecraft at event time.
  /// Example: /// Example: example_slot
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PlaneSlot { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlaneSlotBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetPlaneSlotBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetPlaneSlotArray() { return __p.__vector_as_array<byte>(34); }
  /// GEO slot plane number/designator of the spacecraft at event time.
  /// Example: /// Example: PL_1
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string PlaneNumber { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlaneNumberBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPlaneNumberBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPlaneNumberArray() { return __p.__vector_as_array<byte>(36); }
  /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
  /// Example: /// Example: Stable
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string PositionStatus { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPositionStatusBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetPositionStatusBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetPositionStatusArray() { return __p.__vector_as_array<byte>(38); }
  /// Maximum validity time of the event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string UntilTime { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUntilTimeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetUntilTimeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetUntilTimeArray() { return __p.__vector_as_array<byte>(40); }
  /// Date time of official loss of the spacecraft.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string OfficialLossDate { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOfficialLossDateBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetOfficialLossDateBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetOfficialLossDateArray() { return __p.__vector_as_array<byte>(42); }
  /// Net amount of the insurance claim for the event, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  public double NetAmount { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Underlying cause of the event.
  /// Example: /// Example: CAUSE_EXAMPLE
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string UnderlyingCause { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnderlyingCauseBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetUnderlyingCauseBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetUnderlyingCauseArray() { return __p.__vector_as_array<byte>(46); }
  /// Spacecraft capability loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double CapabilityLoss { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft capacity loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double CapacityLoss { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Insurance loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double InsuranceLoss { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Insurance loss incurred by 3rd party insurance, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  public double ThirdPartyInsuranceLoss { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of humans injured in the event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int Injured { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of humans killed in the event.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  public int Killed { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Spacecraft life lost due to the event as a percent/fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double LifeLost { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft age at the event in years.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double AgeAtEvent { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Achieved phase of flight prior to the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AchievedFlightPhase { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAchievedFlightPhaseBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetAchievedFlightPhaseBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetAchievedFlightPhaseArray() { return __p.__vector_as_array<byte>(64); }
  /// Phase of flight during which the event occurred.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OccurrenceFlightPhase { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOccurrenceFlightPhaseBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOccurrenceFlightPhaseBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOccurrenceFlightPhaseArray() { return __p.__vector_as_array<byte>(66); }
  /// Faulty stage of flight for the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string StageAtFault { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageAtFaultBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetStageAtFaultBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetStageAtFaultArray() { return __p.__vector_as_array<byte>(68); }
  /// Equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EquipmentAtFault { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipmentAtFaultBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetEquipmentAtFaultBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetEquipmentAtFaultArray() { return __p.__vector_as_array<byte>(70); }
  /// Type of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EquipmentTypeAtFault { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipmentTypeAtFaultBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetEquipmentTypeAtFaultBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetEquipmentTypeAtFaultArray() { return __p.__vector_as_array<byte>(72); }
  /// Specific part of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EquipmentPartAtFault { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipmentPartAtFaultBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetEquipmentPartAtFaultBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetEquipmentPartAtFaultArray() { return __p.__vector_as_array<byte>(74); }
  /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ConsequentialEquipmentFailure { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConsequentialEquipmentFailureBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetConsequentialEquipmentFailureBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetConsequentialEquipmentFailureArray() { return __p.__vector_as_array<byte>(76); }
  /// Boolean indicating if the spacecraft is inclined.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Inclined { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Notes/description of the event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Description { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(80); }
  /// Additional remarks on the event description.
  /// Example: /// Example: Example remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Remarks { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemarksBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetRemarksBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetRemarksArray() { return __p.__vector_as_array<byte>(82); }
  /// Additional insurance notes if the event is an official loss.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string InsuranceLossNotes { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInsuranceLossNotesBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetInsuranceLossNotesBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetInsuranceLossNotesArray() { return __p.__vector_as_array<byte>(84); }
  /// Notes on capability loss at the time of event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string CapabilityLossNotes { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCapabilityLossNotesBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetCapabilityLossNotesBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetCapabilityLossNotesArray() { return __p.__vector_as_array<byte>(86); }
  /// Additional insurance notes on coverages at the time of event.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string InsuranceCarriedNotes { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInsuranceCarriedNotesBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetInsuranceCarriedNotesBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetInsuranceCarriedNotesArray() { return __p.__vector_as_array<byte>(88); }
  /// Additional notes on the equipment causing the event/loss.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string EquipmentCausingLossNotes { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipmentCausingLossNotesBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetEquipmentCausingLossNotesBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetEquipmentCausingLossNotesArray() { return __p.__vector_as_array<byte>(90); }
  /// The type of on-orbit event being reported.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string EventType { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTypeBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetEventTypeArray() { return __p.__vector_as_array<byte>(92); }
  /// The result of the reported event.
  /// Example: /// Example: Example results
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string EventResult { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventResultBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetEventResultBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetEventResultArray() { return __p.__vector_as_array<byte>(94); }
  /// The status of the on-orbit object.
  /// Example: /// Example: Status1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ObjectStatus { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectStatusBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetObjectStatusBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetObjectStatusArray() { return __p.__vector_as_array<byte>(96); }
  /// Description of the satellite orbital position or regime.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string SatellitePosition { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatellitePositionBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSatellitePositionBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSatellitePositionArray() { return __p.__vector_as_array<byte>(98); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(100); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public OnorbitEvent_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(104); return o != 0 ? (OnorbitEvent_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnorbitEvent_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(106); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(108); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(110); }

  public static Offset<OnorbitEvent_Abridged> CreateOnorbitEvent_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset derivedFromOffset = default(StringOffset),
      StringOffset declassificationDateOffset = default(StringOffset),
      StringOffset declassificationStringOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset eventTimeOffset = default(StringOffset),
      StringOffset eventTimeNotesOffset = default(StringOffset),
      StringOffset operatorOrgIdOffset = default(StringOffset),
      StringOffset ownerOrgIdOffset = default(StringOffset),
      StringOffset lesseeOrgIdOffset = default(StringOffset),
      StringOffset operatedOnBehalfOfOrgIdOffset = default(StringOffset),
      double geoPosition = 0.0,
      StringOffset planeSlotOffset = default(StringOffset),
      StringOffset planeNumberOffset = default(StringOffset),
      StringOffset positionStatusOffset = default(StringOffset),
      StringOffset untilTimeOffset = default(StringOffset),
      StringOffset officialLossDateOffset = default(StringOffset),
      double netAmount = 0.0,
      StringOffset underlyingCauseOffset = default(StringOffset),
      double capabilityLoss = 0.0,
      double capacityLoss = 0.0,
      double insuranceLoss = 0.0,
      double thirdPartyInsuranceLoss = 0.0,
      int injured = 0,
      int killed = 0,
      double lifeLost = 0.0,
      double ageAtEvent = 0.0,
      StringOffset achievedFlightPhaseOffset = default(StringOffset),
      StringOffset occurrenceFlightPhaseOffset = default(StringOffset),
      StringOffset stageAtFaultOffset = default(StringOffset),
      StringOffset equipmentAtFaultOffset = default(StringOffset),
      StringOffset equipmentTypeAtFaultOffset = default(StringOffset),
      StringOffset equipmentPartAtFaultOffset = default(StringOffset),
      StringOffset consequentialEquipmentFailureOffset = default(StringOffset),
      bool inclined = false,
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset remarksOffset = default(StringOffset),
      StringOffset insuranceLossNotesOffset = default(StringOffset),
      StringOffset capabilityLossNotesOffset = default(StringOffset),
      StringOffset insuranceCarriedNotesOffset = default(StringOffset),
      StringOffset equipmentCausingLossNotesOffset = default(StringOffset),
      StringOffset eventTypeOffset = default(StringOffset),
      StringOffset eventResultOffset = default(StringOffset),
      StringOffset objectStatusOffset = default(StringOffset),
      StringOffset satellitePositionOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      OnorbitEvent_Abridged_dataMode_Enum dataMode = OnorbitEvent_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(54);
    OnorbitEvent_Abridged.AddAgeAtEvent(builder, ageAtEvent);
    OnorbitEvent_Abridged.AddLifeLost(builder, lifeLost);
    OnorbitEvent_Abridged.AddThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss);
    OnorbitEvent_Abridged.AddInsuranceLoss(builder, insuranceLoss);
    OnorbitEvent_Abridged.AddCapacityLoss(builder, capacityLoss);
    OnorbitEvent_Abridged.AddCapabilityLoss(builder, capabilityLoss);
    OnorbitEvent_Abridged.AddNetAmount(builder, netAmount);
    OnorbitEvent_Abridged.AddGeoPosition(builder, geoPosition);
    OnorbitEvent_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    OnorbitEvent_Abridged.AddCreatedBy(builder, createdByOffset);
    OnorbitEvent_Abridged.AddCreatedAt(builder, createdAtOffset);
    OnorbitEvent_Abridged.AddOrigin(builder, originOffset);
    OnorbitEvent_Abridged.AddSource(builder, sourceOffset);
    OnorbitEvent_Abridged.AddSatellitePosition(builder, satellitePositionOffset);
    OnorbitEvent_Abridged.AddObjectStatus(builder, objectStatusOffset);
    OnorbitEvent_Abridged.AddEventResult(builder, eventResultOffset);
    OnorbitEvent_Abridged.AddEventType(builder, eventTypeOffset);
    OnorbitEvent_Abridged.AddEquipmentCausingLossNotes(builder, equipmentCausingLossNotesOffset);
    OnorbitEvent_Abridged.AddInsuranceCarriedNotes(builder, insuranceCarriedNotesOffset);
    OnorbitEvent_Abridged.AddCapabilityLossNotes(builder, capabilityLossNotesOffset);
    OnorbitEvent_Abridged.AddInsuranceLossNotes(builder, insuranceLossNotesOffset);
    OnorbitEvent_Abridged.AddRemarks(builder, remarksOffset);
    OnorbitEvent_Abridged.AddDescription(builder, descriptionOffset);
    OnorbitEvent_Abridged.AddConsequentialEquipmentFailure(builder, consequentialEquipmentFailureOffset);
    OnorbitEvent_Abridged.AddEquipmentPartAtFault(builder, equipmentPartAtFaultOffset);
    OnorbitEvent_Abridged.AddEquipmentTypeAtFault(builder, equipmentTypeAtFaultOffset);
    OnorbitEvent_Abridged.AddEquipmentAtFault(builder, equipmentAtFaultOffset);
    OnorbitEvent_Abridged.AddStageAtFault(builder, stageAtFaultOffset);
    OnorbitEvent_Abridged.AddOccurrenceFlightPhase(builder, occurrenceFlightPhaseOffset);
    OnorbitEvent_Abridged.AddAchievedFlightPhase(builder, achievedFlightPhaseOffset);
    OnorbitEvent_Abridged.AddKilled(builder, killed);
    OnorbitEvent_Abridged.AddInjured(builder, injured);
    OnorbitEvent_Abridged.AddUnderlyingCause(builder, underlyingCauseOffset);
    OnorbitEvent_Abridged.AddOfficialLossDate(builder, officialLossDateOffset);
    OnorbitEvent_Abridged.AddUntilTime(builder, untilTimeOffset);
    OnorbitEvent_Abridged.AddPositionStatus(builder, positionStatusOffset);
    OnorbitEvent_Abridged.AddPlaneNumber(builder, planeNumberOffset);
    OnorbitEvent_Abridged.AddPlaneSlot(builder, planeSlotOffset);
    OnorbitEvent_Abridged.AddOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgIdOffset);
    OnorbitEvent_Abridged.AddLesseeOrgId(builder, lesseeOrgIdOffset);
    OnorbitEvent_Abridged.AddOwnerOrgId(builder, ownerOrgIdOffset);
    OnorbitEvent_Abridged.AddOperatorOrgId(builder, operatorOrgIdOffset);
    OnorbitEvent_Abridged.AddEventTimeNotes(builder, eventTimeNotesOffset);
    OnorbitEvent_Abridged.AddEventTime(builder, eventTimeOffset);
    OnorbitEvent_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    OnorbitEvent_Abridged.AddSatNo(builder, satNo);
    OnorbitEvent_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    OnorbitEvent_Abridged.AddDeclassificationString(builder, declassificationStringOffset);
    OnorbitEvent_Abridged.AddDeclassificationDate(builder, declassificationDateOffset);
    OnorbitEvent_Abridged.AddDerivedFrom(builder, derivedFromOffset);
    OnorbitEvent_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    OnorbitEvent_Abridged.AddId(builder, idOffset);
    OnorbitEvent_Abridged.AddDataMode(builder, dataMode);
    OnorbitEvent_Abridged.AddInclined(builder, inclined);
    return OnorbitEvent_Abridged.EndOnorbitEvent_Abridged(builder);
  }

  public static void StartOnorbitEvent_Abridged(FlatBufferBuilder builder) { builder.StartTable(54); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddDerivedFrom(FlatBufferBuilder builder, StringOffset derivedFromOffset) { builder.AddOffset(2, derivedFromOffset.Value, 0); }
  public static void AddDeclassificationDate(FlatBufferBuilder builder, StringOffset declassificationDateOffset) { builder.AddOffset(3, declassificationDateOffset.Value, 0); }
  public static void AddDeclassificationString(FlatBufferBuilder builder, StringOffset declassificationStringOffset) { builder.AddOffset(4, declassificationStringOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(5, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(6, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(7, origObjectIdOffset.Value, 0); }
  public static void AddEventTime(FlatBufferBuilder builder, StringOffset eventTimeOffset) { builder.AddOffset(8, eventTimeOffset.Value, 0); }
  public static void AddEventTimeNotes(FlatBufferBuilder builder, StringOffset eventTimeNotesOffset) { builder.AddOffset(9, eventTimeNotesOffset.Value, 0); }
  public static void AddOperatorOrgId(FlatBufferBuilder builder, StringOffset operatorOrgIdOffset) { builder.AddOffset(10, operatorOrgIdOffset.Value, 0); }
  public static void AddOwnerOrgId(FlatBufferBuilder builder, StringOffset ownerOrgIdOffset) { builder.AddOffset(11, ownerOrgIdOffset.Value, 0); }
  public static void AddLesseeOrgId(FlatBufferBuilder builder, StringOffset lesseeOrgIdOffset) { builder.AddOffset(12, lesseeOrgIdOffset.Value, 0); }
  public static void AddOperatedOnBehalfOfOrgId(FlatBufferBuilder builder, StringOffset operatedOnBehalfOfOrgIdOffset) { builder.AddOffset(13, operatedOnBehalfOfOrgIdOffset.Value, 0); }
  public static void AddGeoPosition(FlatBufferBuilder builder, double geoPosition) { builder.AddDouble(14, geoPosition, 0.0); }
  public static void AddPlaneSlot(FlatBufferBuilder builder, StringOffset planeSlotOffset) { builder.AddOffset(15, planeSlotOffset.Value, 0); }
  public static void AddPlaneNumber(FlatBufferBuilder builder, StringOffset planeNumberOffset) { builder.AddOffset(16, planeNumberOffset.Value, 0); }
  public static void AddPositionStatus(FlatBufferBuilder builder, StringOffset positionStatusOffset) { builder.AddOffset(17, positionStatusOffset.Value, 0); }
  public static void AddUntilTime(FlatBufferBuilder builder, StringOffset untilTimeOffset) { builder.AddOffset(18, untilTimeOffset.Value, 0); }
  public static void AddOfficialLossDate(FlatBufferBuilder builder, StringOffset officialLossDateOffset) { builder.AddOffset(19, officialLossDateOffset.Value, 0); }
  public static void AddNetAmount(FlatBufferBuilder builder, double netAmount) { builder.AddDouble(20, netAmount, 0.0); }
  public static void AddUnderlyingCause(FlatBufferBuilder builder, StringOffset underlyingCauseOffset) { builder.AddOffset(21, underlyingCauseOffset.Value, 0); }
  public static void AddCapabilityLoss(FlatBufferBuilder builder, double capabilityLoss) { builder.AddDouble(22, capabilityLoss, 0.0); }
  public static void AddCapacityLoss(FlatBufferBuilder builder, double capacityLoss) { builder.AddDouble(23, capacityLoss, 0.0); }
  public static void AddInsuranceLoss(FlatBufferBuilder builder, double insuranceLoss) { builder.AddDouble(24, insuranceLoss, 0.0); }
  public static void AddThirdPartyInsuranceLoss(FlatBufferBuilder builder, double thirdPartyInsuranceLoss) { builder.AddDouble(25, thirdPartyInsuranceLoss, 0.0); }
  public static void AddInjured(FlatBufferBuilder builder, int injured) { builder.AddInt(26, injured, 0); }
  public static void AddKilled(FlatBufferBuilder builder, int killed) { builder.AddInt(27, killed, 0); }
  public static void AddLifeLost(FlatBufferBuilder builder, double lifeLost) { builder.AddDouble(28, lifeLost, 0.0); }
  public static void AddAgeAtEvent(FlatBufferBuilder builder, double ageAtEvent) { builder.AddDouble(29, ageAtEvent, 0.0); }
  public static void AddAchievedFlightPhase(FlatBufferBuilder builder, StringOffset achievedFlightPhaseOffset) { builder.AddOffset(30, achievedFlightPhaseOffset.Value, 0); }
  public static void AddOccurrenceFlightPhase(FlatBufferBuilder builder, StringOffset occurrenceFlightPhaseOffset) { builder.AddOffset(31, occurrenceFlightPhaseOffset.Value, 0); }
  public static void AddStageAtFault(FlatBufferBuilder builder, StringOffset stageAtFaultOffset) { builder.AddOffset(32, stageAtFaultOffset.Value, 0); }
  public static void AddEquipmentAtFault(FlatBufferBuilder builder, StringOffset equipmentAtFaultOffset) { builder.AddOffset(33, equipmentAtFaultOffset.Value, 0); }
  public static void AddEquipmentTypeAtFault(FlatBufferBuilder builder, StringOffset equipmentTypeAtFaultOffset) { builder.AddOffset(34, equipmentTypeAtFaultOffset.Value, 0); }
  public static void AddEquipmentPartAtFault(FlatBufferBuilder builder, StringOffset equipmentPartAtFaultOffset) { builder.AddOffset(35, equipmentPartAtFaultOffset.Value, 0); }
  public static void AddConsequentialEquipmentFailure(FlatBufferBuilder builder, StringOffset consequentialEquipmentFailureOffset) { builder.AddOffset(36, consequentialEquipmentFailureOffset.Value, 0); }
  public static void AddInclined(FlatBufferBuilder builder, bool inclined) { builder.AddBool(37, inclined, false); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(38, descriptionOffset.Value, 0); }
  public static void AddRemarks(FlatBufferBuilder builder, StringOffset remarksOffset) { builder.AddOffset(39, remarksOffset.Value, 0); }
  public static void AddInsuranceLossNotes(FlatBufferBuilder builder, StringOffset insuranceLossNotesOffset) { builder.AddOffset(40, insuranceLossNotesOffset.Value, 0); }
  public static void AddCapabilityLossNotes(FlatBufferBuilder builder, StringOffset capabilityLossNotesOffset) { builder.AddOffset(41, capabilityLossNotesOffset.Value, 0); }
  public static void AddInsuranceCarriedNotes(FlatBufferBuilder builder, StringOffset insuranceCarriedNotesOffset) { builder.AddOffset(42, insuranceCarriedNotesOffset.Value, 0); }
  public static void AddEquipmentCausingLossNotes(FlatBufferBuilder builder, StringOffset equipmentCausingLossNotesOffset) { builder.AddOffset(43, equipmentCausingLossNotesOffset.Value, 0); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(44, eventTypeOffset.Value, 0); }
  public static void AddEventResult(FlatBufferBuilder builder, StringOffset eventResultOffset) { builder.AddOffset(45, eventResultOffset.Value, 0); }
  public static void AddObjectStatus(FlatBufferBuilder builder, StringOffset objectStatusOffset) { builder.AddOffset(46, objectStatusOffset.Value, 0); }
  public static void AddSatellitePosition(FlatBufferBuilder builder, StringOffset satellitePositionOffset) { builder.AddOffset(47, satellitePositionOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(48, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(49, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OnorbitEvent_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(50, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(51, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(52, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(53, origNetworkOffset.Value, 0); }
  public static Offset<OnorbitEvent_Abridged> EndOnorbitEvent_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OnorbitEvent_Abridged>(o);
  }
  public static void FinishOnorbitEvent_AbridgedBuffer(FlatBufferBuilder builder, Offset<OnorbitEvent_Abridged> offset) { builder.Finish(offset.Value, "ONOR"); }
  public static void FinishSizePrefixedOnorbitEvent_AbridgedBuffer(FlatBufferBuilder builder, Offset<OnorbitEvent_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ONOR"); }
  public OnorbitEvent_AbridgedT UnPack() {
    var _o = new OnorbitEvent_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OnorbitEvent_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.DerivedFrom = this.DerivedFrom;
    _o.DeclassificationDate = this.DeclassificationDate;
    _o.DeclassificationString = this.DeclassificationString;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.EventTime = this.EventTime;
    _o.EventTimeNotes = this.EventTimeNotes;
    _o.OperatorOrgId = this.OperatorOrgId;
    _o.OwnerOrgId = this.OwnerOrgId;
    _o.LesseeOrgId = this.LesseeOrgId;
    _o.OperatedOnBehalfOfOrgId = this.OperatedOnBehalfOfOrgId;
    _o.GeoPosition = this.GeoPosition;
    _o.PlaneSlot = this.PlaneSlot;
    _o.PlaneNumber = this.PlaneNumber;
    _o.PositionStatus = this.PositionStatus;
    _o.UntilTime = this.UntilTime;
    _o.OfficialLossDate = this.OfficialLossDate;
    _o.NetAmount = this.NetAmount;
    _o.UnderlyingCause = this.UnderlyingCause;
    _o.CapabilityLoss = this.CapabilityLoss;
    _o.CapacityLoss = this.CapacityLoss;
    _o.InsuranceLoss = this.InsuranceLoss;
    _o.ThirdPartyInsuranceLoss = this.ThirdPartyInsuranceLoss;
    _o.Injured = this.Injured;
    _o.Killed = this.Killed;
    _o.LifeLost = this.LifeLost;
    _o.AgeAtEvent = this.AgeAtEvent;
    _o.AchievedFlightPhase = this.AchievedFlightPhase;
    _o.OccurrenceFlightPhase = this.OccurrenceFlightPhase;
    _o.StageAtFault = this.StageAtFault;
    _o.EquipmentAtFault = this.EquipmentAtFault;
    _o.EquipmentTypeAtFault = this.EquipmentTypeAtFault;
    _o.EquipmentPartAtFault = this.EquipmentPartAtFault;
    _o.ConsequentialEquipmentFailure = this.ConsequentialEquipmentFailure;
    _o.Inclined = this.Inclined;
    _o.Description = this.Description;
    _o.Remarks = this.Remarks;
    _o.InsuranceLossNotes = this.InsuranceLossNotes;
    _o.CapabilityLossNotes = this.CapabilityLossNotes;
    _o.InsuranceCarriedNotes = this.InsuranceCarriedNotes;
    _o.EquipmentCausingLossNotes = this.EquipmentCausingLossNotes;
    _o.EventType = this.EventType;
    _o.EventResult = this.EventResult;
    _o.ObjectStatus = this.ObjectStatus;
    _o.SatellitePosition = this.SatellitePosition;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<OnorbitEvent_Abridged> Pack(FlatBufferBuilder builder, OnorbitEvent_AbridgedT _o) {
    if (_o == null) return default(Offset<OnorbitEvent_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _derivedFrom = _o.DerivedFrom == null ? default(StringOffset) : builder.CreateString(_o.DerivedFrom);
    var _declassificationDate = _o.DeclassificationDate == null ? default(StringOffset) : builder.CreateString(_o.DeclassificationDate);
    var _declassificationString = _o.DeclassificationString == null ? default(StringOffset) : builder.CreateString(_o.DeclassificationString);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _eventTime = _o.EventTime == null ? default(StringOffset) : builder.CreateString(_o.EventTime);
    var _eventTimeNotes = _o.EventTimeNotes == null ? default(StringOffset) : builder.CreateString(_o.EventTimeNotes);
    var _operatorOrgId = _o.OperatorOrgId == null ? default(StringOffset) : builder.CreateString(_o.OperatorOrgId);
    var _ownerOrgId = _o.OwnerOrgId == null ? default(StringOffset) : builder.CreateString(_o.OwnerOrgId);
    var _lesseeOrgId = _o.LesseeOrgId == null ? default(StringOffset) : builder.CreateString(_o.LesseeOrgId);
    var _operatedOnBehalfOfOrgId = _o.OperatedOnBehalfOfOrgId == null ? default(StringOffset) : builder.CreateString(_o.OperatedOnBehalfOfOrgId);
    var _planeSlot = _o.PlaneSlot == null ? default(StringOffset) : builder.CreateString(_o.PlaneSlot);
    var _planeNumber = _o.PlaneNumber == null ? default(StringOffset) : builder.CreateString(_o.PlaneNumber);
    var _positionStatus = _o.PositionStatus == null ? default(StringOffset) : builder.CreateString(_o.PositionStatus);
    var _untilTime = _o.UntilTime == null ? default(StringOffset) : builder.CreateString(_o.UntilTime);
    var _officialLossDate = _o.OfficialLossDate == null ? default(StringOffset) : builder.CreateString(_o.OfficialLossDate);
    var _underlyingCause = _o.UnderlyingCause == null ? default(StringOffset) : builder.CreateString(_o.UnderlyingCause);
    var _achievedFlightPhase = _o.AchievedFlightPhase == null ? default(StringOffset) : builder.CreateString(_o.AchievedFlightPhase);
    var _occurrenceFlightPhase = _o.OccurrenceFlightPhase == null ? default(StringOffset) : builder.CreateString(_o.OccurrenceFlightPhase);
    var _stageAtFault = _o.StageAtFault == null ? default(StringOffset) : builder.CreateString(_o.StageAtFault);
    var _equipmentAtFault = _o.EquipmentAtFault == null ? default(StringOffset) : builder.CreateString(_o.EquipmentAtFault);
    var _equipmentTypeAtFault = _o.EquipmentTypeAtFault == null ? default(StringOffset) : builder.CreateString(_o.EquipmentTypeAtFault);
    var _equipmentPartAtFault = _o.EquipmentPartAtFault == null ? default(StringOffset) : builder.CreateString(_o.EquipmentPartAtFault);
    var _consequentialEquipmentFailure = _o.ConsequentialEquipmentFailure == null ? default(StringOffset) : builder.CreateString(_o.ConsequentialEquipmentFailure);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _remarks = _o.Remarks == null ? default(StringOffset) : builder.CreateString(_o.Remarks);
    var _insuranceLossNotes = _o.InsuranceLossNotes == null ? default(StringOffset) : builder.CreateString(_o.InsuranceLossNotes);
    var _capabilityLossNotes = _o.CapabilityLossNotes == null ? default(StringOffset) : builder.CreateString(_o.CapabilityLossNotes);
    var _insuranceCarriedNotes = _o.InsuranceCarriedNotes == null ? default(StringOffset) : builder.CreateString(_o.InsuranceCarriedNotes);
    var _equipmentCausingLossNotes = _o.EquipmentCausingLossNotes == null ? default(StringOffset) : builder.CreateString(_o.EquipmentCausingLossNotes);
    var _eventType = _o.EventType == null ? default(StringOffset) : builder.CreateString(_o.EventType);
    var _eventResult = _o.EventResult == null ? default(StringOffset) : builder.CreateString(_o.EventResult);
    var _objectStatus = _o.ObjectStatus == null ? default(StringOffset) : builder.CreateString(_o.ObjectStatus);
    var _satellitePosition = _o.SatellitePosition == null ? default(StringOffset) : builder.CreateString(_o.SatellitePosition);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnorbitEvent_Abridged(
      builder,
      _id,
      _classificationMarking,
      _derivedFrom,
      _declassificationDate,
      _declassificationString,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _eventTime,
      _eventTimeNotes,
      _operatorOrgId,
      _ownerOrgId,
      _lesseeOrgId,
      _operatedOnBehalfOfOrgId,
      _o.GeoPosition,
      _planeSlot,
      _planeNumber,
      _positionStatus,
      _untilTime,
      _officialLossDate,
      _o.NetAmount,
      _underlyingCause,
      _o.CapabilityLoss,
      _o.CapacityLoss,
      _o.InsuranceLoss,
      _o.ThirdPartyInsuranceLoss,
      _o.Injured,
      _o.Killed,
      _o.LifeLost,
      _o.AgeAtEvent,
      _achievedFlightPhase,
      _occurrenceFlightPhase,
      _stageAtFault,
      _equipmentAtFault,
      _equipmentTypeAtFault,
      _equipmentPartAtFault,
      _consequentialEquipmentFailure,
      _o.Inclined,
      _description,
      _remarks,
      _insuranceLossNotes,
      _capabilityLossNotes,
      _insuranceCarriedNotes,
      _equipmentCausingLossNotes,
      _eventType,
      _eventResult,
      _objectStatus,
      _satellitePosition,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class OnorbitEvent_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string DerivedFrom { get; set; }
  public string DeclassificationDate { get; set; }
  public string DeclassificationString { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string EventTime { get; set; }
  public string EventTimeNotes { get; set; }
  public string OperatorOrgId { get; set; }
  public string OwnerOrgId { get; set; }
  public string LesseeOrgId { get; set; }
  public string OperatedOnBehalfOfOrgId { get; set; }
  public double GeoPosition { get; set; }
  public string PlaneSlot { get; set; }
  public string PlaneNumber { get; set; }
  public string PositionStatus { get; set; }
  public string UntilTime { get; set; }
  public string OfficialLossDate { get; set; }
  public double NetAmount { get; set; }
  public string UnderlyingCause { get; set; }
  public double CapabilityLoss { get; set; }
  public double CapacityLoss { get; set; }
  public double InsuranceLoss { get; set; }
  public double ThirdPartyInsuranceLoss { get; set; }
  public int Injured { get; set; }
  public int Killed { get; set; }
  public double LifeLost { get; set; }
  public double AgeAtEvent { get; set; }
  public string AchievedFlightPhase { get; set; }
  public string OccurrenceFlightPhase { get; set; }
  public string StageAtFault { get; set; }
  public string EquipmentAtFault { get; set; }
  public string EquipmentTypeAtFault { get; set; }
  public string EquipmentPartAtFault { get; set; }
  public string ConsequentialEquipmentFailure { get; set; }
  public bool Inclined { get; set; }
  public string Description { get; set; }
  public string Remarks { get; set; }
  public string InsuranceLossNotes { get; set; }
  public string CapabilityLossNotes { get; set; }
  public string InsuranceCarriedNotes { get; set; }
  public string EquipmentCausingLossNotes { get; set; }
  public string EventType { get; set; }
  public string EventResult { get; set; }
  public string ObjectStatus { get; set; }
  public string SatellitePosition { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public OnorbitEvent_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public OnorbitEvent_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.DerivedFrom = null;
    this.DeclassificationDate = null;
    this.DeclassificationString = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.EventTime = null;
    this.EventTimeNotes = null;
    this.OperatorOrgId = null;
    this.OwnerOrgId = null;
    this.LesseeOrgId = null;
    this.OperatedOnBehalfOfOrgId = null;
    this.GeoPosition = 0.0;
    this.PlaneSlot = null;
    this.PlaneNumber = null;
    this.PositionStatus = null;
    this.UntilTime = null;
    this.OfficialLossDate = null;
    this.NetAmount = 0.0;
    this.UnderlyingCause = null;
    this.CapabilityLoss = 0.0;
    this.CapacityLoss = 0.0;
    this.InsuranceLoss = 0.0;
    this.ThirdPartyInsuranceLoss = 0.0;
    this.Injured = 0;
    this.Killed = 0;
    this.LifeLost = 0.0;
    this.AgeAtEvent = 0.0;
    this.AchievedFlightPhase = null;
    this.OccurrenceFlightPhase = null;
    this.StageAtFault = null;
    this.EquipmentAtFault = null;
    this.EquipmentTypeAtFault = null;
    this.EquipmentPartAtFault = null;
    this.ConsequentialEquipmentFailure = null;
    this.Inclined = false;
    this.Description = null;
    this.Remarks = null;
    this.InsuranceLossNotes = null;
    this.CapabilityLossNotes = null;
    this.InsuranceCarriedNotes = null;
    this.EquipmentCausingLossNotes = null;
    this.EventType = null;
    this.EventResult = null;
    this.ObjectStatus = null;
    this.SatellitePosition = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = OnorbitEvent_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static OnorbitEvent_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return OnorbitEvent_Abridged.GetRootAsOnorbitEvent_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OnorbitEvent_Abridged.FinishOnorbitEvent_AbridgedBuffer(fbb, OnorbitEvent_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OnorbitEvent_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*DerivedFrom*/, false)
      && verifier.VerifyString(tablePos, 10 /*DeclassificationDate*/, false)
      && verifier.VerifyString(tablePos, 12 /*DeclassificationString*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 16 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 20 /*EventTime*/, false)
      && verifier.VerifyString(tablePos, 22 /*EventTimeNotes*/, false)
      && verifier.VerifyString(tablePos, 24 /*OperatorOrgId*/, false)
      && verifier.VerifyString(tablePos, 26 /*OwnerOrgId*/, false)
      && verifier.VerifyString(tablePos, 28 /*LesseeOrgId*/, false)
      && verifier.VerifyString(tablePos, 30 /*OperatedOnBehalfOfOrgId*/, false)
      && verifier.VerifyField(tablePos, 32 /*GeoPosition*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 34 /*PlaneSlot*/, false)
      && verifier.VerifyString(tablePos, 36 /*PlaneNumber*/, false)
      && verifier.VerifyString(tablePos, 38 /*PositionStatus*/, false)
      && verifier.VerifyString(tablePos, 40 /*UntilTime*/, false)
      && verifier.VerifyString(tablePos, 42 /*OfficialLossDate*/, false)
      && verifier.VerifyField(tablePos, 44 /*NetAmount*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 46 /*UnderlyingCause*/, false)
      && verifier.VerifyField(tablePos, 48 /*CapabilityLoss*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*CapacityLoss*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*InsuranceLoss*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*ThirdPartyInsuranceLoss*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Injured*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*Killed*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*LifeLost*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*AgeAtEvent*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 64 /*AchievedFlightPhase*/, false)
      && verifier.VerifyString(tablePos, 66 /*OccurrenceFlightPhase*/, false)
      && verifier.VerifyString(tablePos, 68 /*StageAtFault*/, false)
      && verifier.VerifyString(tablePos, 70 /*EquipmentAtFault*/, false)
      && verifier.VerifyString(tablePos, 72 /*EquipmentTypeAtFault*/, false)
      && verifier.VerifyString(tablePos, 74 /*EquipmentPartAtFault*/, false)
      && verifier.VerifyString(tablePos, 76 /*ConsequentialEquipmentFailure*/, false)
      && verifier.VerifyField(tablePos, 78 /*Inclined*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 80 /*Description*/, false)
      && verifier.VerifyString(tablePos, 82 /*Remarks*/, false)
      && verifier.VerifyString(tablePos, 84 /*InsuranceLossNotes*/, false)
      && verifier.VerifyString(tablePos, 86 /*CapabilityLossNotes*/, false)
      && verifier.VerifyString(tablePos, 88 /*InsuranceCarriedNotes*/, false)
      && verifier.VerifyString(tablePos, 90 /*EquipmentCausingLossNotes*/, false)
      && verifier.VerifyString(tablePos, 92 /*EventType*/, false)
      && verifier.VerifyString(tablePos, 94 /*EventResult*/, false)
      && verifier.VerifyString(tablePos, 96 /*ObjectStatus*/, false)
      && verifier.VerifyString(tablePos, 98 /*SatellitePosition*/, false)
      && verifier.VerifyString(tablePos, 100 /*Source*/, false)
      && verifier.VerifyString(tablePos, 102 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 104 /*DataMode*/, 1 /*OnorbitEvent_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 106 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 108 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 110 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
