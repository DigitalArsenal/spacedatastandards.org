// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Set of GNSSObservation data.
public struct GNSSObservationSet_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GNSSObservationSet_Ingest GetRootAsGNSSObservationSet_Ingest(ByteBuffer _bb) { return GetRootAsGNSSObservationSet_Ingest(_bb, new GNSSObservationSet_Ingest()); }
  public static GNSSObservationSet_Ingest GetRootAsGNSSObservationSet_Ingest(ByteBuffer _bb, GNSSObservationSet_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GNSSObservationSet_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "GNSS"); }
  public static bool VerifyGNSSObservationSet_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("GNSS", false, GNSSObservationSet_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GNSSObservationSet_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GNSSObSet-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
  /// Example: /// Example: SPACEBORNE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string MarkerType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkerTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMarkerTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMarkerTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
  /// Example: /// Example: 2022-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(16); }
  /// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  public int Outage { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geometric Dilution of Precision.
  /// Example: /// Example: 0.33
  /// Constraints: No constraints specified.
  public double GDop { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Horizontal Dilution of Precision.
  /// Example: /// Example: 0.03
  /// Constraints: No constraints specified.
  public double HDop { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Position Dilution of Precision.
  /// Example: /// Example: 0.002
  /// Constraints: No constraints specified.
  public double PDop { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time Dilution of Precision.
  /// Example: /// Example: 0.05
  /// Constraints: No constraints specified.
  public double TDop { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Vertical Dilution of Precision.
  /// Example: /// Example: 0.03
  /// Constraints: No constraints specified.
  public double VDop { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
  /// Example: /// Example: ES-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(30); }
  /// The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
  /// Example: /// Example: RECEIVER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Receiver { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetReceiverBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetReceiverArray() { return __p.__vector_as_array<byte>(32); }
  /// unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  /// Example: /// Example: [1.23, 3.23]
  /// Constraints: No constraints specified.
  public string Boresight(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BoresightLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  public string Quat(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int QuatLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 32.021
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 125.123
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
  /// Example: /// Example: [2.03, 0.003, 0.12]
  /// Constraints: No constraints specified.
  public string SatVelocity(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SatVelocityLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
  /// Example: /// Example: ['ACL']
  /// Constraints: No constraints specified.
  public string ObsCodes(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObsCodesLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int TrackingStatus { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
  /// Example: /// Example: degraded
  /// Constraints: No constraints specified.
  public string NavigationStatus { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNavigationStatusBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetNavigationStatusBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetNavigationStatusArray() { return __p.__vector_as_array<byte>(50); }
  /// GNSS Automatic Gain Control State.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int AgcState { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SV', 'SV']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
  /// Example: /// Example: ['SV_ID', 'SV_ID']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(60); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(62); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(64); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(66); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(68); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public GNSSObservationSet_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(70); return o != 0 ? (GNSSObservationSet_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : GNSSObservationSet_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(72); }
  /// GNSSObservations associated with this GNSSObservationSet.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string GnssObservationList(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GnssObservationListLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GNSSObservationSet_Ingest> CreateGNSSObservationSet_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset markerTypeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      int outage = 0,
      double gDop = 0.0,
      double hDop = 0.0,
      double pDop = 0.0,
      double tDop = 0.0,
      double vDop = 0.0,
      StringOffset esIdOffset = default(StringOffset),
      StringOffset receiverOffset = default(StringOffset),
      VectorOffset boresightOffset = default(VectorOffset),
      VectorOffset quatOffset = default(VectorOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      VectorOffset satVelocityOffset = default(VectorOffset),
      VectorOffset obsCodesOffset = default(VectorOffset),
      int trackingStatus = 0,
      StringOffset navigationStatusOffset = default(StringOffset),
      int agcState = 0,
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      GNSSObservationSet_Ingest_dataMode_Enum dataMode = GNSSObservationSet_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset),
      VectorOffset gnssObservationListOffset = default(VectorOffset)) {
    builder.StartTable(36);
    GNSSObservationSet_Ingest.AddAlt(builder, alt);
    GNSSObservationSet_Ingest.AddLon(builder, lon);
    GNSSObservationSet_Ingest.AddLat(builder, lat);
    GNSSObservationSet_Ingest.AddVDop(builder, vDop);
    GNSSObservationSet_Ingest.AddTDop(builder, tDop);
    GNSSObservationSet_Ingest.AddPDop(builder, pDop);
    GNSSObservationSet_Ingest.AddHDop(builder, hDop);
    GNSSObservationSet_Ingest.AddGDop(builder, gDop);
    GNSSObservationSet_Ingest.AddGnssObservationList(builder, gnssObservationListOffset);
    GNSSObservationSet_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    GNSSObservationSet_Ingest.AddOrigin(builder, originOffset);
    GNSSObservationSet_Ingest.AddSource(builder, sourceOffset);
    GNSSObservationSet_Ingest.AddCreatedBy(builder, createdByOffset);
    GNSSObservationSet_Ingest.AddCreatedAt(builder, createdAtOffset);
    GNSSObservationSet_Ingest.AddTransactionId(builder, transactionIdOffset);
    GNSSObservationSet_Ingest.AddTags(builder, tagsOffset);
    GNSSObservationSet_Ingest.AddSrcIds(builder, srcIdsOffset);
    GNSSObservationSet_Ingest.AddSrcTyps(builder, srcTypsOffset);
    GNSSObservationSet_Ingest.AddAgcState(builder, agcState);
    GNSSObservationSet_Ingest.AddNavigationStatus(builder, navigationStatusOffset);
    GNSSObservationSet_Ingest.AddTrackingStatus(builder, trackingStatus);
    GNSSObservationSet_Ingest.AddObsCodes(builder, obsCodesOffset);
    GNSSObservationSet_Ingest.AddSatVelocity(builder, satVelocityOffset);
    GNSSObservationSet_Ingest.AddQuat(builder, quatOffset);
    GNSSObservationSet_Ingest.AddBoresight(builder, boresightOffset);
    GNSSObservationSet_Ingest.AddReceiver(builder, receiverOffset);
    GNSSObservationSet_Ingest.AddEsId(builder, esIdOffset);
    GNSSObservationSet_Ingest.AddOutage(builder, outage);
    GNSSObservationSet_Ingest.AddTs(builder, tsOffset);
    GNSSObservationSet_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    GNSSObservationSet_Ingest.AddSatNo(builder, satNo);
    GNSSObservationSet_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    GNSSObservationSet_Ingest.AddMarkerType(builder, markerTypeOffset);
    GNSSObservationSet_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    GNSSObservationSet_Ingest.AddId(builder, idOffset);
    GNSSObservationSet_Ingest.AddDataMode(builder, dataMode);
    return GNSSObservationSet_Ingest.EndGNSSObservationSet_Ingest(builder);
  }

  public static void StartGNSSObservationSet_Ingest(FlatBufferBuilder builder) { builder.StartTable(36); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddMarkerType(FlatBufferBuilder builder, StringOffset markerTypeOffset) { builder.AddOffset(2, markerTypeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(4, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(5, origObjectIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(6, tsOffset.Value, 0); }
  public static void AddOutage(FlatBufferBuilder builder, int outage) { builder.AddInt(7, outage, 0); }
  public static void AddGDop(FlatBufferBuilder builder, double gDop) { builder.AddDouble(8, gDop, 0.0); }
  public static void AddHDop(FlatBufferBuilder builder, double hDop) { builder.AddDouble(9, hDop, 0.0); }
  public static void AddPDop(FlatBufferBuilder builder, double pDop) { builder.AddDouble(10, pDop, 0.0); }
  public static void AddTDop(FlatBufferBuilder builder, double tDop) { builder.AddDouble(11, tDop, 0.0); }
  public static void AddVDop(FlatBufferBuilder builder, double vDop) { builder.AddDouble(12, vDop, 0.0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(13, esIdOffset.Value, 0); }
  public static void AddReceiver(FlatBufferBuilder builder, StringOffset receiverOffset) { builder.AddOffset(14, receiverOffset.Value, 0); }
  public static void AddBoresight(FlatBufferBuilder builder, VectorOffset boresightOffset) { builder.AddOffset(15, boresightOffset.Value, 0); }
  public static VectorOffset CreateBoresightVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBoresightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQuat(FlatBufferBuilder builder, VectorOffset quatOffset) { builder.AddOffset(16, quatOffset.Value, 0); }
  public static VectorOffset CreateQuatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartQuatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(17, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(18, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(19, alt, 0.0); }
  public static void AddSatVelocity(FlatBufferBuilder builder, VectorOffset satVelocityOffset) { builder.AddOffset(20, satVelocityOffset.Value, 0); }
  public static VectorOffset CreateSatVelocityVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSatVelocityVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSatVelocityVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSatVelocityVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSatVelocityVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObsCodes(FlatBufferBuilder builder, VectorOffset obsCodesOffset) { builder.AddOffset(21, obsCodesOffset.Value, 0); }
  public static VectorOffset CreateObsCodesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObsCodesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObsCodesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObsCodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObsCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrackingStatus(FlatBufferBuilder builder, int trackingStatus) { builder.AddInt(22, trackingStatus, 0); }
  public static void AddNavigationStatus(FlatBufferBuilder builder, StringOffset navigationStatusOffset) { builder.AddOffset(23, navigationStatusOffset.Value, 0); }
  public static void AddAgcState(FlatBufferBuilder builder, int agcState) { builder.AddInt(24, agcState, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(25, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(26, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(27, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(28, transactionIdOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(29, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(30, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(31, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(32, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, GNSSObservationSet_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(33, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(34, origNetworkOffset.Value, 0); }
  public static void AddGnssObservationList(FlatBufferBuilder builder, VectorOffset gnssObservationListOffset) { builder.AddOffset(35, gnssObservationListOffset.Value, 0); }
  public static VectorOffset CreateGnssObservationListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGnssObservationListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGnssObservationListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGnssObservationListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGnssObservationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GNSSObservationSet_Ingest> EndGNSSObservationSet_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GNSSObservationSet_Ingest>(o);
  }
  public static void FinishGNSSObservationSet_IngestBuffer(FlatBufferBuilder builder, Offset<GNSSObservationSet_Ingest> offset) { builder.Finish(offset.Value, "GNSS"); }
  public static void FinishSizePrefixedGNSSObservationSet_IngestBuffer(FlatBufferBuilder builder, Offset<GNSSObservationSet_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "GNSS"); }
  public GNSSObservationSet_IngestT UnPack() {
    var _o = new GNSSObservationSet_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GNSSObservationSet_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.MarkerType = this.MarkerType;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Ts = this.Ts;
    _o.Outage = this.Outage;
    _o.GDop = this.GDop;
    _o.HDop = this.HDop;
    _o.PDop = this.PDop;
    _o.TDop = this.TDop;
    _o.VDop = this.VDop;
    _o.EsId = this.EsId;
    _o.Receiver = this.Receiver;
    _o.Boresight = new List<string>();
    for (var _j = 0; _j < this.BoresightLength; ++_j) {_o.Boresight.Add(this.Boresight(_j));}
    _o.Quat = new List<string>();
    for (var _j = 0; _j < this.QuatLength; ++_j) {_o.Quat.Add(this.Quat(_j));}
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.SatVelocity = new List<string>();
    for (var _j = 0; _j < this.SatVelocityLength; ++_j) {_o.SatVelocity.Add(this.SatVelocity(_j));}
    _o.ObsCodes = new List<string>();
    for (var _j = 0; _j < this.ObsCodesLength; ++_j) {_o.ObsCodes.Add(this.ObsCodes(_j));}
    _o.TrackingStatus = this.TrackingStatus;
    _o.NavigationStatus = this.NavigationStatus;
    _o.AgcState = this.AgcState;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.TransactionId = this.TransactionId;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
    _o.GnssObservationList = new List<string>();
    for (var _j = 0; _j < this.GnssObservationListLength; ++_j) {_o.GnssObservationList.Add(this.GnssObservationList(_j));}
  }
  public static Offset<GNSSObservationSet_Ingest> Pack(FlatBufferBuilder builder, GNSSObservationSet_IngestT _o) {
    if (_o == null) return default(Offset<GNSSObservationSet_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _markerType = _o.MarkerType == null ? default(StringOffset) : builder.CreateString(_o.MarkerType);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _receiver = _o.Receiver == null ? default(StringOffset) : builder.CreateString(_o.Receiver);
    var _boresight = default(VectorOffset);
    if (_o.Boresight != null) {
      var __boresight = new StringOffset[_o.Boresight.Count];
      for (var _j = 0; _j < __boresight.Length; ++_j) { __boresight[_j] = builder.CreateString(_o.Boresight[_j]); }
      _boresight = CreateBoresightVector(builder, __boresight);
    }
    var _quat = default(VectorOffset);
    if (_o.Quat != null) {
      var __quat = new StringOffset[_o.Quat.Count];
      for (var _j = 0; _j < __quat.Length; ++_j) { __quat[_j] = builder.CreateString(_o.Quat[_j]); }
      _quat = CreateQuatVector(builder, __quat);
    }
    var _satVelocity = default(VectorOffset);
    if (_o.SatVelocity != null) {
      var __satVelocity = new StringOffset[_o.SatVelocity.Count];
      for (var _j = 0; _j < __satVelocity.Length; ++_j) { __satVelocity[_j] = builder.CreateString(_o.SatVelocity[_j]); }
      _satVelocity = CreateSatVelocityVector(builder, __satVelocity);
    }
    var _obsCodes = default(VectorOffset);
    if (_o.ObsCodes != null) {
      var __obsCodes = new StringOffset[_o.ObsCodes.Count];
      for (var _j = 0; _j < __obsCodes.Length; ++_j) { __obsCodes[_j] = builder.CreateString(_o.ObsCodes[_j]); }
      _obsCodes = CreateObsCodesVector(builder, __obsCodes);
    }
    var _navigationStatus = _o.NavigationStatus == null ? default(StringOffset) : builder.CreateString(_o.NavigationStatus);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _gnssObservationList = default(VectorOffset);
    if (_o.GnssObservationList != null) {
      var __gnssObservationList = new StringOffset[_o.GnssObservationList.Count];
      for (var _j = 0; _j < __gnssObservationList.Length; ++_j) { __gnssObservationList[_j] = builder.CreateString(_o.GnssObservationList[_j]); }
      _gnssObservationList = CreateGnssObservationListVector(builder, __gnssObservationList);
    }
    return CreateGNSSObservationSet_Ingest(
      builder,
      _id,
      _classificationMarking,
      _markerType,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _ts,
      _o.Outage,
      _o.GDop,
      _o.HDop,
      _o.PDop,
      _o.TDop,
      _o.VDop,
      _esId,
      _receiver,
      _boresight,
      _quat,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _satVelocity,
      _obsCodes,
      _o.TrackingStatus,
      _navigationStatus,
      _o.AgcState,
      _srcTyps,
      _srcIds,
      _tags,
      _transactionId,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork,
      _gnssObservationList);
  }
}

public class GNSSObservationSet_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string MarkerType { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string Ts { get; set; }
  public int Outage { get; set; }
  public double GDop { get; set; }
  public double HDop { get; set; }
  public double PDop { get; set; }
  public double TDop { get; set; }
  public double VDop { get; set; }
  public string EsId { get; set; }
  public string Receiver { get; set; }
  public List<string> Boresight { get; set; }
  public List<string> Quat { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public List<string> SatVelocity { get; set; }
  public List<string> ObsCodes { get; set; }
  public int TrackingStatus { get; set; }
  public string NavigationStatus { get; set; }
  public int AgcState { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public List<string> Tags { get; set; }
  public string TransactionId { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public GNSSObservationSet_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }
  public List<string> GnssObservationList { get; set; }

  public GNSSObservationSet_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.MarkerType = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.Ts = null;
    this.Outage = 0;
    this.GDop = 0.0;
    this.HDop = 0.0;
    this.PDop = 0.0;
    this.TDop = 0.0;
    this.VDop = 0.0;
    this.EsId = null;
    this.Receiver = null;
    this.Boresight = null;
    this.Quat = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.SatVelocity = null;
    this.ObsCodes = null;
    this.TrackingStatus = 0;
    this.NavigationStatus = null;
    this.AgcState = 0;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.Tags = null;
    this.TransactionId = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = GNSSObservationSet_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
    this.GnssObservationList = null;
  }
  public static GNSSObservationSet_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return GNSSObservationSet_Ingest.GetRootAsGNSSObservationSet_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GNSSObservationSet_Ingest.FinishGNSSObservationSet_IngestBuffer(fbb, GNSSObservationSet_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GNSSObservationSet_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*MarkerType*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 12 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 18 /*Outage*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*GDop*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*HDop*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*PDop*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*TDop*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*VDop*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*EsId*/, false)
      && verifier.VerifyString(tablePos, 32 /*Receiver*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*Boresight*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*Quat*/, false)
      && verifier.VerifyField(tablePos, 38 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*SatVelocity*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*ObsCodes*/, false)
      && verifier.VerifyField(tablePos, 48 /*TrackingStatus*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*NavigationStatus*/, false)
      && verifier.VerifyField(tablePos, 52 /*AgcState*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*SrcIds*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 60 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 64 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 66 /*Source*/, false)
      && verifier.VerifyString(tablePos, 68 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 70 /*DataMode*/, 1 /*GNSSObservationSet_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 72 /*OrigNetwork*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 74 /*GnssObservationList*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
