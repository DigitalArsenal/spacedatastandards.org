// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// SpaceEnvObservation data.
public struct SpaceEnvObservation_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SpaceEnvObservation_Full GetRootAsSpaceEnvObservation_Full(ByteBuffer _bb) { return GetRootAsSpaceEnvObservation_Full(_bb, new SpaceEnvObservation_Full()); }
  public static SpaceEnvObservation_Full GetRootAsSpaceEnvObservation_Full(ByteBuffer _bb, SpaceEnvObservation_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SpaceEnvObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SPAC"); }
  public static bool VerifySpaceEnvObservation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SPAC", false, SpaceEnvObservation_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpaceEnvObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of message associated with this record.
  /// Example: /// Example: SODM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MsgType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMsgTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMsgTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The external system which generated the message, if applicable.
  /// Example: /// Example: System Name
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string GenSystem { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGenSystemBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGenSystemBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGenSystemArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
  /// Example: /// Example: ECP
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string DataType { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDataTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDataTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-02-10T19:48:09.934Z
  /// Constraints: No constraints specified.
  public string GenTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGenTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetGenTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetGenTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Flag indicating that this record contains forecast data.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Forecast { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this record contains derived data.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Derived { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(22); }
  /// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(28); }
  /// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigSensorId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(30); }
  /// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
  /// Example: /// Example: ONORBIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ObservatoryType { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObservatoryTypeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetObservatoryTypeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetObservatoryTypeArray() { return __p.__vector_as_array<byte>(32); }
  /// The name of the observatory from which this data was collected.
  /// Example: /// Example: GOES-16
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ObservatoryName { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObservatoryNameBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetObservatoryNameBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetObservatoryNameArray() { return __p.__vector_as_array<byte>(34); }
  /// Additional notes concerning the observatory.
  /// Example: /// Example: Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ObservatoryNotes { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObservatoryNotesBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetObservatoryNotesBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetObservatoryNotesArray() { return __p.__vector_as_array<byte>(36); }
  /// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
  /// Example: /// Example: MAGNETOMETER
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string InstrumentType { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInstrumentTypeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetInstrumentTypeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetInstrumentTypeArray() { return __p.__vector_as_array<byte>(38); }
  /// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.8339
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.8214
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 35785.3732
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public SpaceEnvObservation_Full_senReferenceFrame_Enum SenReferenceFrame { get { int o = __p.__offset(46); return o != 0 ? (SpaceEnvObservation_Full_senReferenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SpaceEnvObservation_Full_senReferenceFrame_Enum.J2000; } }
  /// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
  /// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
  /// Constraints: No constraints specified.
  public string SenPos(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SenPosLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
  /// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
  /// Constraints: No constraints specified.
  public string SenVel(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SenVelLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The sensor measurement type of the observation data contained in this record.
  /// Example: /// Example: ENERGETIC PARTICLES
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MeasType { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeasTypeBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetMeasTypeBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetMeasTypeArray() { return __p.__vector_as_array<byte>(52); }
  /// The energy level bin of the sensor associated with this measurement.
  /// Example: /// Example: 0500-700 keV
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SenEnergyLevel { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenEnergyLevelBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetSenEnergyLevelBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetSenEnergyLevelArray() { return __p.__vector_as_array<byte>(54); }
  /// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
  /// Example: /// Example: ECPOBSET-478125
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ObSetId { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObSetIdBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetObSetIdBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetObSetIdArray() { return __p.__vector_as_array<byte>(56); }
  /// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
  /// Example: /// Example: PROTON
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ParticleType { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetParticleTypeBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetParticleTypeBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetParticleTypeArray() { return __p.__vector_as_array<byte>(58); }
  /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(60); }
  /// A collection of individual space environment observations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SeoList(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SeoListLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Quality { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualityBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetQualityBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetQualityArray() { return __p.__vector_as_array<byte>(64); }
  /// Descriptive or additional information associated with this observation record.
  /// Example: /// Example: Observation Data Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Description { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(66); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: energetic charged particle
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(68); }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SPACEENVOB', 'SGI']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(74); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(76); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(78); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(80); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SpaceEnvObservation_Full_dataMode_Enum DataMode { get { int o = __p.__offset(82); return o != 0 ? (SpaceEnvObservation_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SpaceEnvObservation_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(84); }

  public static Offset<SpaceEnvObservation_Full> CreateSpaceEnvObservation_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset msgTypeOffset = default(StringOffset),
      StringOffset genSystemOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset dataTypeOffset = default(StringOffset),
      StringOffset genTimeOffset = default(StringOffset),
      bool forecast = false,
      bool derived = false,
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset observatoryTypeOffset = default(StringOffset),
      StringOffset observatoryNameOffset = default(StringOffset),
      StringOffset observatoryNotesOffset = default(StringOffset),
      StringOffset instrumentTypeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame = SpaceEnvObservation_Full_senReferenceFrame_Enum.J2000,
      VectorOffset senPosOffset = default(VectorOffset),
      VectorOffset senVelOffset = default(VectorOffset),
      StringOffset measTypeOffset = default(StringOffset),
      StringOffset senEnergyLevelOffset = default(StringOffset),
      StringOffset obSetIdOffset = default(StringOffset),
      StringOffset particleTypeOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      VectorOffset seoListOffset = default(VectorOffset),
      StringOffset qualityOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      SpaceEnvObservation_Full_dataMode_Enum dataMode = SpaceEnvObservation_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(41);
    SpaceEnvObservation_Full.AddAlt(builder, alt);
    SpaceEnvObservation_Full.AddLon(builder, lon);
    SpaceEnvObservation_Full.AddLat(builder, lat);
    SpaceEnvObservation_Full.AddOrigNetwork(builder, origNetworkOffset);
    SpaceEnvObservation_Full.AddOrigin(builder, originOffset);
    SpaceEnvObservation_Full.AddSource(builder, sourceOffset);
    SpaceEnvObservation_Full.AddCreatedBy(builder, createdByOffset);
    SpaceEnvObservation_Full.AddCreatedAt(builder, createdAtOffset);
    SpaceEnvObservation_Full.AddSrcIds(builder, srcIdsOffset);
    SpaceEnvObservation_Full.AddSrcTyps(builder, srcTypsOffset);
    SpaceEnvObservation_Full.AddDescriptor(builder, descriptorOffset);
    SpaceEnvObservation_Full.AddDescription(builder, descriptionOffset);
    SpaceEnvObservation_Full.AddQuality(builder, qualityOffset);
    SpaceEnvObservation_Full.AddSeoList(builder, seoListOffset);
    SpaceEnvObservation_Full.AddObTime(builder, obTimeOffset);
    SpaceEnvObservation_Full.AddParticleType(builder, particleTypeOffset);
    SpaceEnvObservation_Full.AddObSetId(builder, obSetIdOffset);
    SpaceEnvObservation_Full.AddSenEnergyLevel(builder, senEnergyLevelOffset);
    SpaceEnvObservation_Full.AddMeasType(builder, measTypeOffset);
    SpaceEnvObservation_Full.AddSenVel(builder, senVelOffset);
    SpaceEnvObservation_Full.AddSenPos(builder, senPosOffset);
    SpaceEnvObservation_Full.AddInstrumentType(builder, instrumentTypeOffset);
    SpaceEnvObservation_Full.AddObservatoryNotes(builder, observatoryNotesOffset);
    SpaceEnvObservation_Full.AddObservatoryName(builder, observatoryNameOffset);
    SpaceEnvObservation_Full.AddObservatoryType(builder, observatoryTypeOffset);
    SpaceEnvObservation_Full.AddOrigSensorId(builder, origSensorIdOffset);
    SpaceEnvObservation_Full.AddIdSensor(builder, idSensorOffset);
    SpaceEnvObservation_Full.AddOrigObjectId(builder, origObjectIdOffset);
    SpaceEnvObservation_Full.AddSatNo(builder, satNo);
    SpaceEnvObservation_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    SpaceEnvObservation_Full.AddGenTime(builder, genTimeOffset);
    SpaceEnvObservation_Full.AddDataType(builder, dataTypeOffset);
    SpaceEnvObservation_Full.AddExternalId(builder, externalIdOffset);
    SpaceEnvObservation_Full.AddGenSystem(builder, genSystemOffset);
    SpaceEnvObservation_Full.AddMsgType(builder, msgTypeOffset);
    SpaceEnvObservation_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    SpaceEnvObservation_Full.AddId(builder, idOffset);
    SpaceEnvObservation_Full.AddDataMode(builder, dataMode);
    SpaceEnvObservation_Full.AddSenReferenceFrame(builder, senReferenceFrame);
    SpaceEnvObservation_Full.AddDerived(builder, derived);
    SpaceEnvObservation_Full.AddForecast(builder, forecast);
    return SpaceEnvObservation_Full.EndSpaceEnvObservation_Full(builder);
  }

  public static void StartSpaceEnvObservation_Full(FlatBufferBuilder builder) { builder.StartTable(41); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, StringOffset msgTypeOffset) { builder.AddOffset(2, msgTypeOffset.Value, 0); }
  public static void AddGenSystem(FlatBufferBuilder builder, StringOffset genSystemOffset) { builder.AddOffset(3, genSystemOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(4, externalIdOffset.Value, 0); }
  public static void AddDataType(FlatBufferBuilder builder, StringOffset dataTypeOffset) { builder.AddOffset(5, dataTypeOffset.Value, 0); }
  public static void AddGenTime(FlatBufferBuilder builder, StringOffset genTimeOffset) { builder.AddOffset(6, genTimeOffset.Value, 0); }
  public static void AddForecast(FlatBufferBuilder builder, bool forecast) { builder.AddBool(7, forecast, false); }
  public static void AddDerived(FlatBufferBuilder builder, bool derived) { builder.AddBool(8, derived, false); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(9, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(10, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(11, origObjectIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(12, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(13, origSensorIdOffset.Value, 0); }
  public static void AddObservatoryType(FlatBufferBuilder builder, StringOffset observatoryTypeOffset) { builder.AddOffset(14, observatoryTypeOffset.Value, 0); }
  public static void AddObservatoryName(FlatBufferBuilder builder, StringOffset observatoryNameOffset) { builder.AddOffset(15, observatoryNameOffset.Value, 0); }
  public static void AddObservatoryNotes(FlatBufferBuilder builder, StringOffset observatoryNotesOffset) { builder.AddOffset(16, observatoryNotesOffset.Value, 0); }
  public static void AddInstrumentType(FlatBufferBuilder builder, StringOffset instrumentTypeOffset) { builder.AddOffset(17, instrumentTypeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(18, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(19, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(20, alt, 0.0); }
  public static void AddSenReferenceFrame(FlatBufferBuilder builder, SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame) { builder.AddSbyte(21, (sbyte)senReferenceFrame, 0); }
  public static void AddSenPos(FlatBufferBuilder builder, VectorOffset senPosOffset) { builder.AddOffset(22, senPosOffset.Value, 0); }
  public static VectorOffset CreateSenPosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSenPosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenPosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSenPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSenVel(FlatBufferBuilder builder, VectorOffset senVelOffset) { builder.AddOffset(23, senVelOffset.Value, 0); }
  public static VectorOffset CreateSenVelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSenVelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenVelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenVelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSenVelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMeasType(FlatBufferBuilder builder, StringOffset measTypeOffset) { builder.AddOffset(24, measTypeOffset.Value, 0); }
  public static void AddSenEnergyLevel(FlatBufferBuilder builder, StringOffset senEnergyLevelOffset) { builder.AddOffset(25, senEnergyLevelOffset.Value, 0); }
  public static void AddObSetId(FlatBufferBuilder builder, StringOffset obSetIdOffset) { builder.AddOffset(26, obSetIdOffset.Value, 0); }
  public static void AddParticleType(FlatBufferBuilder builder, StringOffset particleTypeOffset) { builder.AddOffset(27, particleTypeOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(28, obTimeOffset.Value, 0); }
  public static void AddSeoList(FlatBufferBuilder builder, VectorOffset seoListOffset) { builder.AddOffset(29, seoListOffset.Value, 0); }
  public static VectorOffset CreateSeoListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSeoListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeoListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSeoListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSeoListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQuality(FlatBufferBuilder builder, StringOffset qualityOffset) { builder.AddOffset(30, qualityOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(31, descriptionOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(32, descriptorOffset.Value, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(33, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(34, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(35, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(36, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(37, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(38, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SpaceEnvObservation_Full_dataMode_Enum dataMode) { builder.AddSbyte(39, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(40, origNetworkOffset.Value, 0); }
  public static Offset<SpaceEnvObservation_Full> EndSpaceEnvObservation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SpaceEnvObservation_Full>(o);
  }
  public static void FinishSpaceEnvObservation_FullBuffer(FlatBufferBuilder builder, Offset<SpaceEnvObservation_Full> offset) { builder.Finish(offset.Value, "SPAC"); }
  public static void FinishSizePrefixedSpaceEnvObservation_FullBuffer(FlatBufferBuilder builder, Offset<SpaceEnvObservation_Full> offset) { builder.FinishSizePrefixed(offset.Value, "SPAC"); }
  public SpaceEnvObservation_FullT UnPack() {
    var _o = new SpaceEnvObservation_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpaceEnvObservation_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.MsgType = this.MsgType;
    _o.GenSystem = this.GenSystem;
    _o.ExternalId = this.ExternalId;
    _o.DataType = this.DataType;
    _o.GenTime = this.GenTime;
    _o.Forecast = this.Forecast;
    _o.Derived = this.Derived;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.ObservatoryType = this.ObservatoryType;
    _o.ObservatoryName = this.ObservatoryName;
    _o.ObservatoryNotes = this.ObservatoryNotes;
    _o.InstrumentType = this.InstrumentType;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.SenReferenceFrame = this.SenReferenceFrame;
    _o.SenPos = new List<string>();
    for (var _j = 0; _j < this.SenPosLength; ++_j) {_o.SenPos.Add(this.SenPos(_j));}
    _o.SenVel = new List<string>();
    for (var _j = 0; _j < this.SenVelLength; ++_j) {_o.SenVel.Add(this.SenVel(_j));}
    _o.MeasType = this.MeasType;
    _o.SenEnergyLevel = this.SenEnergyLevel;
    _o.ObSetId = this.ObSetId;
    _o.ParticleType = this.ParticleType;
    _o.ObTime = this.ObTime;
    _o.SeoList = new List<string>();
    for (var _j = 0; _j < this.SeoListLength; ++_j) {_o.SeoList.Add(this.SeoList(_j));}
    _o.Quality = this.Quality;
    _o.Description = this.Description;
    _o.Descriptor = this.Descriptor;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<SpaceEnvObservation_Full> Pack(FlatBufferBuilder builder, SpaceEnvObservation_FullT _o) {
    if (_o == null) return default(Offset<SpaceEnvObservation_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _msgType = _o.MsgType == null ? default(StringOffset) : builder.CreateString(_o.MsgType);
    var _genSystem = _o.GenSystem == null ? default(StringOffset) : builder.CreateString(_o.GenSystem);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _dataType = _o.DataType == null ? default(StringOffset) : builder.CreateString(_o.DataType);
    var _genTime = _o.GenTime == null ? default(StringOffset) : builder.CreateString(_o.GenTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _observatoryType = _o.ObservatoryType == null ? default(StringOffset) : builder.CreateString(_o.ObservatoryType);
    var _observatoryName = _o.ObservatoryName == null ? default(StringOffset) : builder.CreateString(_o.ObservatoryName);
    var _observatoryNotes = _o.ObservatoryNotes == null ? default(StringOffset) : builder.CreateString(_o.ObservatoryNotes);
    var _instrumentType = _o.InstrumentType == null ? default(StringOffset) : builder.CreateString(_o.InstrumentType);
    var _senPos = default(VectorOffset);
    if (_o.SenPos != null) {
      var __senPos = new StringOffset[_o.SenPos.Count];
      for (var _j = 0; _j < __senPos.Length; ++_j) { __senPos[_j] = builder.CreateString(_o.SenPos[_j]); }
      _senPos = CreateSenPosVector(builder, __senPos);
    }
    var _senVel = default(VectorOffset);
    if (_o.SenVel != null) {
      var __senVel = new StringOffset[_o.SenVel.Count];
      for (var _j = 0; _j < __senVel.Length; ++_j) { __senVel[_j] = builder.CreateString(_o.SenVel[_j]); }
      _senVel = CreateSenVelVector(builder, __senVel);
    }
    var _measType = _o.MeasType == null ? default(StringOffset) : builder.CreateString(_o.MeasType);
    var _senEnergyLevel = _o.SenEnergyLevel == null ? default(StringOffset) : builder.CreateString(_o.SenEnergyLevel);
    var _obSetId = _o.ObSetId == null ? default(StringOffset) : builder.CreateString(_o.ObSetId);
    var _particleType = _o.ParticleType == null ? default(StringOffset) : builder.CreateString(_o.ParticleType);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _seoList = default(VectorOffset);
    if (_o.SeoList != null) {
      var __seoList = new StringOffset[_o.SeoList.Count];
      for (var _j = 0; _j < __seoList.Length; ++_j) { __seoList[_j] = builder.CreateString(_o.SeoList[_j]); }
      _seoList = CreateSeoListVector(builder, __seoList);
    }
    var _quality = _o.Quality == null ? default(StringOffset) : builder.CreateString(_o.Quality);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSpaceEnvObservation_Full(
      builder,
      _id,
      _classificationMarking,
      _msgType,
      _genSystem,
      _externalId,
      _dataType,
      _genTime,
      _o.Forecast,
      _o.Derived,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _idSensor,
      _origSensorId,
      _observatoryType,
      _observatoryName,
      _observatoryNotes,
      _instrumentType,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.SenReferenceFrame,
      _senPos,
      _senVel,
      _measType,
      _senEnergyLevel,
      _obSetId,
      _particleType,
      _obTime,
      _seoList,
      _quality,
      _description,
      _descriptor,
      _srcTyps,
      _srcIds,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class SpaceEnvObservation_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string MsgType { get; set; }
  public string GenSystem { get; set; }
  public string ExternalId { get; set; }
  public string DataType { get; set; }
  public string GenTime { get; set; }
  public bool Forecast { get; set; }
  public bool Derived { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string ObservatoryType { get; set; }
  public string ObservatoryName { get; set; }
  public string ObservatoryNotes { get; set; }
  public string InstrumentType { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public SpaceEnvObservation_Full_senReferenceFrame_Enum SenReferenceFrame { get; set; }
  public List<string> SenPos { get; set; }
  public List<string> SenVel { get; set; }
  public string MeasType { get; set; }
  public string SenEnergyLevel { get; set; }
  public string ObSetId { get; set; }
  public string ParticleType { get; set; }
  public string ObTime { get; set; }
  public List<string> SeoList { get; set; }
  public string Quality { get; set; }
  public string Description { get; set; }
  public string Descriptor { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public SpaceEnvObservation_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public SpaceEnvObservation_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.MsgType = null;
    this.GenSystem = null;
    this.ExternalId = null;
    this.DataType = null;
    this.GenTime = null;
    this.Forecast = false;
    this.Derived = false;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.ObservatoryType = null;
    this.ObservatoryName = null;
    this.ObservatoryNotes = null;
    this.InstrumentType = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.SenReferenceFrame = SpaceEnvObservation_Full_senReferenceFrame_Enum.J2000;
    this.SenPos = null;
    this.SenVel = null;
    this.MeasType = null;
    this.SenEnergyLevel = null;
    this.ObSetId = null;
    this.ParticleType = null;
    this.ObTime = null;
    this.SeoList = null;
    this.Quality = null;
    this.Description = null;
    this.Descriptor = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = SpaceEnvObservation_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static SpaceEnvObservation_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return SpaceEnvObservation_Full.GetRootAsSpaceEnvObservation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SpaceEnvObservation_Full.FinishSpaceEnvObservation_FullBuffer(fbb, SpaceEnvObservation_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SpaceEnvObservation_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*MsgType*/, false)
      && verifier.VerifyString(tablePos, 10 /*GenSystem*/, false)
      && verifier.VerifyString(tablePos, 12 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 14 /*DataType*/, false)
      && verifier.VerifyString(tablePos, 16 /*GenTime*/, false)
      && verifier.VerifyField(tablePos, 18 /*Forecast*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*Derived*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 22 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 24 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 28 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 30 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 32 /*ObservatoryType*/, false)
      && verifier.VerifyString(tablePos, 34 /*ObservatoryName*/, false)
      && verifier.VerifyString(tablePos, 36 /*ObservatoryNotes*/, false)
      && verifier.VerifyString(tablePos, 38 /*InstrumentType*/, false)
      && verifier.VerifyField(tablePos, 40 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*SenReferenceFrame*/, 1 /*SpaceEnvObservation_Full_senReferenceFrame_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*SenPos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*SenVel*/, false)
      && verifier.VerifyString(tablePos, 52 /*MeasType*/, false)
      && verifier.VerifyString(tablePos, 54 /*SenEnergyLevel*/, false)
      && verifier.VerifyString(tablePos, 56 /*ObSetId*/, false)
      && verifier.VerifyString(tablePos, 58 /*ParticleType*/, false)
      && verifier.VerifyString(tablePos, 60 /*ObTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*SeoList*/, false)
      && verifier.VerifyString(tablePos, 64 /*Quality*/, false)
      && verifier.VerifyString(tablePos, 66 /*Description*/, false)
      && verifier.VerifyString(tablePos, 68 /*Descriptor*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 76 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 78 /*Source*/, false)
      && verifier.VerifyString(tablePos, 80 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 82 /*DataMode*/, 1 /*SpaceEnvObservation_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 84 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
