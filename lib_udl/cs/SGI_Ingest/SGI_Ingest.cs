// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
public struct SGI_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SGI_Ingest GetRootAsSGI_Ingest(ByteBuffer _bb) { return GetRootAsSGI_Ingest(_bb, new SGI_Ingest()); }
  public static SGI_Ingest GetRootAsSGI_Ingest(ByteBuffer _bb, SGI_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SGI_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SGII"); }
  public static bool VerifySGI_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SGII", false, SGI_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SGI_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SGI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EffectiveDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectiveDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEffectiveDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEffectiveDateArray() { return __p.__vector_as_array<byte>(8); }
  /// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string SgiDate { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSgiDateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSgiDateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSgiDateArray() { return __p.__vector_as_array<byte>(10); }
  /// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
  /// Example: /// Example: JBH09
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Type { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  public SGI_Ingest_state_Enum State { get { int o = __p.__offset(14); return o != 0 ? (SGI_Ingest_state_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SGI_Ingest_state_Enum.I; } }
  /// The name/location of the station that collected the geomagnetic data for this record.
  /// Example: /// Example: Boulder
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string StationName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStationNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStationNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStationNameArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The transmitted DCA mode of the record (1-3).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int Mode { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 1
  public SGI_Ingest_precedence_Enum Precedence { get { int o = __p.__offset(24); return o != 0 ? (SGI_Ingest_precedence_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SGI_Ingest_precedence_Enum.O; } }
  /// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  public string CoeffDegree(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CoeffDegreeLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  public string CoeffOrder(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CoeffOrderLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  public string Ctce(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CtceLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  public string Stce(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StceLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  public string Ctci(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CtciLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  public string Stci(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StciLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double E10 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double E54 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double S10 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double S54 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double M10 { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double M54 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Y10 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Y54 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double F10 { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double F54 { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double F81 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Ap { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int ApDuration { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int KIndex { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 4.66
  /// Constraints: No constraints specified.
  public double Kp { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int KpDuration { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 25
  /// Constraints: No constraints specified.
  public int Gamma { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Disturbance Storm Time geomagnetic index in nT.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Dst { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// delta exospheric temperature correction in units of K.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Dtc { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int RbRegionCode { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
  /// Example: /// Example: 1.02947164506
  /// Constraints: No constraints specified.
  public double RbIndex { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
  /// Example: /// Example: 2.12679e-07
  /// Constraints: No constraints specified.
  public double NormFactor { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
  /// Example: /// Example: 24
  /// Constraints: No constraints specified.
  public int RbDuration { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  public double AnalyzerAttenuation { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
  /// Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
  /// Constraints: No constraints specified.
  public string ObservedBaseline(int j) { int o = __p.__offset(86); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObservedBaselineLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
  /// Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
  /// Constraints: No constraints specified.
  public string Frequencies(int j) { int o = __p.__offset(88); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FrequenciesLength { get { int o = __p.__offset(88); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
  /// Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
  /// Constraints: No constraints specified.
  public string Powers(int j) { int o = __p.__offset(90); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PowersLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: rawFileURI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(92); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(94); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(98); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(100); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SGI_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(104); return o != 0 ? (SGI_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SGI_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(106); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(108); }

  public static Offset<SGI_Ingest> CreateSGI_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset effectiveDateOffset = default(StringOffset),
      StringOffset sgiDateOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      SGI_Ingest_state_Enum state = SGI_Ingest_state_Enum.I,
      StringOffset stationNameOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      int mode = 0,
      SGI_Ingest_precedence_Enum precedence = SGI_Ingest_precedence_Enum.O,
      VectorOffset coeffDegreeOffset = default(VectorOffset),
      VectorOffset coeffOrderOffset = default(VectorOffset),
      VectorOffset ctceOffset = default(VectorOffset),
      VectorOffset stceOffset = default(VectorOffset),
      VectorOffset ctciOffset = default(VectorOffset),
      VectorOffset stciOffset = default(VectorOffset),
      double e10 = 0.0,
      double e54 = 0.0,
      double s10 = 0.0,
      double s54 = 0.0,
      double m10 = 0.0,
      double m54 = 0.0,
      double y10 = 0.0,
      double y54 = 0.0,
      double f10 = 0.0,
      double f54 = 0.0,
      double f81 = 0.0,
      double ap = 0.0,
      int apDuration = 0,
      int kIndex = 0,
      double kp = 0.0,
      int kpDuration = 0,
      int gamma = 0,
      double dst = 0.0,
      double dtc = 0.0,
      int rbRegionCode = 0,
      double rbIndex = 0.0,
      double normFactor = 0.0,
      int rbDuration = 0,
      double analyzerAttenuation = 0.0,
      VectorOffset observedBaselineOffset = default(VectorOffset),
      VectorOffset frequenciesOffset = default(VectorOffset),
      VectorOffset powersOffset = default(VectorOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      SGI_Ingest_dataMode_Enum dataMode = SGI_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(53);
    SGI_Ingest.AddAnalyzerAttenuation(builder, analyzerAttenuation);
    SGI_Ingest.AddNormFactor(builder, normFactor);
    SGI_Ingest.AddRbIndex(builder, rbIndex);
    SGI_Ingest.AddDtc(builder, dtc);
    SGI_Ingest.AddDst(builder, dst);
    SGI_Ingest.AddKp(builder, kp);
    SGI_Ingest.AddAp(builder, ap);
    SGI_Ingest.AddF81(builder, f81);
    SGI_Ingest.AddF54(builder, f54);
    SGI_Ingest.AddF10(builder, f10);
    SGI_Ingest.AddY54(builder, y54);
    SGI_Ingest.AddY10(builder, y10);
    SGI_Ingest.AddM54(builder, m54);
    SGI_Ingest.AddM10(builder, m10);
    SGI_Ingest.AddS54(builder, s54);
    SGI_Ingest.AddS10(builder, s10);
    SGI_Ingest.AddE54(builder, e54);
    SGI_Ingest.AddE10(builder, e10);
    SGI_Ingest.AddCreatedBy(builder, createdByOffset);
    SGI_Ingest.AddCreatedAt(builder, createdAtOffset);
    SGI_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SGI_Ingest.AddOrigin(builder, originOffset);
    SGI_Ingest.AddSource(builder, sourceOffset);
    SGI_Ingest.AddTags(builder, tagsOffset);
    SGI_Ingest.AddTransactionId(builder, transactionIdOffset);
    SGI_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    SGI_Ingest.AddPowers(builder, powersOffset);
    SGI_Ingest.AddFrequencies(builder, frequenciesOffset);
    SGI_Ingest.AddObservedBaseline(builder, observedBaselineOffset);
    SGI_Ingest.AddRbDuration(builder, rbDuration);
    SGI_Ingest.AddRbRegionCode(builder, rbRegionCode);
    SGI_Ingest.AddGamma(builder, gamma);
    SGI_Ingest.AddKpDuration(builder, kpDuration);
    SGI_Ingest.AddKIndex(builder, kIndex);
    SGI_Ingest.AddApDuration(builder, apDuration);
    SGI_Ingest.AddStci(builder, stciOffset);
    SGI_Ingest.AddCtci(builder, ctciOffset);
    SGI_Ingest.AddStce(builder, stceOffset);
    SGI_Ingest.AddCtce(builder, ctceOffset);
    SGI_Ingest.AddCoeffOrder(builder, coeffOrderOffset);
    SGI_Ingest.AddCoeffDegree(builder, coeffDegreeOffset);
    SGI_Ingest.AddMode(builder, mode);
    SGI_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    SGI_Ingest.AddIdSensor(builder, idSensorOffset);
    SGI_Ingest.AddStationName(builder, stationNameOffset);
    SGI_Ingest.AddType(builder, typeOffset);
    SGI_Ingest.AddSgiDate(builder, sgiDateOffset);
    SGI_Ingest.AddEffectiveDate(builder, effectiveDateOffset);
    SGI_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SGI_Ingest.AddId(builder, idOffset);
    SGI_Ingest.AddDataMode(builder, dataMode);
    SGI_Ingest.AddPrecedence(builder, precedence);
    SGI_Ingest.AddState(builder, state);
    return SGI_Ingest.EndSGI_Ingest(builder);
  }

  public static void StartSGI_Ingest(FlatBufferBuilder builder) { builder.StartTable(53); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddEffectiveDate(FlatBufferBuilder builder, StringOffset effectiveDateOffset) { builder.AddOffset(2, effectiveDateOffset.Value, 0); }
  public static void AddSgiDate(FlatBufferBuilder builder, StringOffset sgiDateOffset) { builder.AddOffset(3, sgiDateOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(4, typeOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, SGI_Ingest_state_Enum state) { builder.AddSbyte(5, (sbyte)state, 0); }
  public static void AddStationName(FlatBufferBuilder builder, StringOffset stationNameOffset) { builder.AddOffset(6, stationNameOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(7, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(8, origSensorIdOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, int mode) { builder.AddInt(9, mode, 0); }
  public static void AddPrecedence(FlatBufferBuilder builder, SGI_Ingest_precedence_Enum precedence) { builder.AddSbyte(10, (sbyte)precedence, 0); }
  public static void AddCoeffDegree(FlatBufferBuilder builder, VectorOffset coeffDegreeOffset) { builder.AddOffset(11, coeffDegreeOffset.Value, 0); }
  public static VectorOffset CreateCoeffDegreeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCoeffDegreeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoeffDegreeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoeffDegreeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCoeffDegreeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCoeffOrder(FlatBufferBuilder builder, VectorOffset coeffOrderOffset) { builder.AddOffset(12, coeffOrderOffset.Value, 0); }
  public static VectorOffset CreateCoeffOrderVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCoeffOrderVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoeffOrderVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoeffOrderVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCoeffOrderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCtce(FlatBufferBuilder builder, VectorOffset ctceOffset) { builder.AddOffset(13, ctceOffset.Value, 0); }
  public static VectorOffset CreateCtceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCtceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCtceVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCtceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCtceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStce(FlatBufferBuilder builder, VectorOffset stceOffset) { builder.AddOffset(14, stceOffset.Value, 0); }
  public static VectorOffset CreateStceVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStceVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStceVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStceVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCtci(FlatBufferBuilder builder, VectorOffset ctciOffset) { builder.AddOffset(15, ctciOffset.Value, 0); }
  public static VectorOffset CreateCtciVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCtciVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCtciVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCtciVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCtciVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStci(FlatBufferBuilder builder, VectorOffset stciOffset) { builder.AddOffset(16, stciOffset.Value, 0); }
  public static VectorOffset CreateStciVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStciVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStciVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStciVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStciVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddE10(FlatBufferBuilder builder, double e10) { builder.AddDouble(17, e10, 0.0); }
  public static void AddE54(FlatBufferBuilder builder, double e54) { builder.AddDouble(18, e54, 0.0); }
  public static void AddS10(FlatBufferBuilder builder, double s10) { builder.AddDouble(19, s10, 0.0); }
  public static void AddS54(FlatBufferBuilder builder, double s54) { builder.AddDouble(20, s54, 0.0); }
  public static void AddM10(FlatBufferBuilder builder, double m10) { builder.AddDouble(21, m10, 0.0); }
  public static void AddM54(FlatBufferBuilder builder, double m54) { builder.AddDouble(22, m54, 0.0); }
  public static void AddY10(FlatBufferBuilder builder, double y10) { builder.AddDouble(23, y10, 0.0); }
  public static void AddY54(FlatBufferBuilder builder, double y54) { builder.AddDouble(24, y54, 0.0); }
  public static void AddF10(FlatBufferBuilder builder, double f10) { builder.AddDouble(25, f10, 0.0); }
  public static void AddF54(FlatBufferBuilder builder, double f54) { builder.AddDouble(26, f54, 0.0); }
  public static void AddF81(FlatBufferBuilder builder, double f81) { builder.AddDouble(27, f81, 0.0); }
  public static void AddAp(FlatBufferBuilder builder, double ap) { builder.AddDouble(28, ap, 0.0); }
  public static void AddApDuration(FlatBufferBuilder builder, int apDuration) { builder.AddInt(29, apDuration, 0); }
  public static void AddKIndex(FlatBufferBuilder builder, int kIndex) { builder.AddInt(30, kIndex, 0); }
  public static void AddKp(FlatBufferBuilder builder, double kp) { builder.AddDouble(31, kp, 0.0); }
  public static void AddKpDuration(FlatBufferBuilder builder, int kpDuration) { builder.AddInt(32, kpDuration, 0); }
  public static void AddGamma(FlatBufferBuilder builder, int gamma) { builder.AddInt(33, gamma, 0); }
  public static void AddDst(FlatBufferBuilder builder, double dst) { builder.AddDouble(34, dst, 0.0); }
  public static void AddDtc(FlatBufferBuilder builder, double dtc) { builder.AddDouble(35, dtc, 0.0); }
  public static void AddRbRegionCode(FlatBufferBuilder builder, int rbRegionCode) { builder.AddInt(36, rbRegionCode, 0); }
  public static void AddRbIndex(FlatBufferBuilder builder, double rbIndex) { builder.AddDouble(37, rbIndex, 0.0); }
  public static void AddNormFactor(FlatBufferBuilder builder, double normFactor) { builder.AddDouble(38, normFactor, 0.0); }
  public static void AddRbDuration(FlatBufferBuilder builder, int rbDuration) { builder.AddInt(39, rbDuration, 0); }
  public static void AddAnalyzerAttenuation(FlatBufferBuilder builder, double analyzerAttenuation) { builder.AddDouble(40, analyzerAttenuation, 0.0); }
  public static void AddObservedBaseline(FlatBufferBuilder builder, VectorOffset observedBaselineOffset) { builder.AddOffset(41, observedBaselineOffset.Value, 0); }
  public static VectorOffset CreateObservedBaselineVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObservedBaselineVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObservedBaselineVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObservedBaselineVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObservedBaselineVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFrequencies(FlatBufferBuilder builder, VectorOffset frequenciesOffset) { builder.AddOffset(42, frequenciesOffset.Value, 0); }
  public static VectorOffset CreateFrequenciesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFrequenciesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPowers(FlatBufferBuilder builder, VectorOffset powersOffset) { builder.AddOffset(43, powersOffset.Value, 0); }
  public static VectorOffset CreatePowersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPowersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(44, rawFileURIOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(45, transactionIdOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(46, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(47, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(48, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(49, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SGI_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(50, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(51, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(52, createdByOffset.Value, 0); }
  public static Offset<SGI_Ingest> EndSGI_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SGI_Ingest>(o);
  }
  public static void FinishSGI_IngestBuffer(FlatBufferBuilder builder, Offset<SGI_Ingest> offset) { builder.Finish(offset.Value, "SGII"); }
  public static void FinishSizePrefixedSGI_IngestBuffer(FlatBufferBuilder builder, Offset<SGI_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SGII"); }
  public SGI_IngestT UnPack() {
    var _o = new SGI_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SGI_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.EffectiveDate = this.EffectiveDate;
    _o.SgiDate = this.SgiDate;
    _o.Type = this.Type;
    _o.State = this.State;
    _o.StationName = this.StationName;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Mode = this.Mode;
    _o.Precedence = this.Precedence;
    _o.CoeffDegree = new List<string>();
    for (var _j = 0; _j < this.CoeffDegreeLength; ++_j) {_o.CoeffDegree.Add(this.CoeffDegree(_j));}
    _o.CoeffOrder = new List<string>();
    for (var _j = 0; _j < this.CoeffOrderLength; ++_j) {_o.CoeffOrder.Add(this.CoeffOrder(_j));}
    _o.Ctce = new List<string>();
    for (var _j = 0; _j < this.CtceLength; ++_j) {_o.Ctce.Add(this.Ctce(_j));}
    _o.Stce = new List<string>();
    for (var _j = 0; _j < this.StceLength; ++_j) {_o.Stce.Add(this.Stce(_j));}
    _o.Ctci = new List<string>();
    for (var _j = 0; _j < this.CtciLength; ++_j) {_o.Ctci.Add(this.Ctci(_j));}
    _o.Stci = new List<string>();
    for (var _j = 0; _j < this.StciLength; ++_j) {_o.Stci.Add(this.Stci(_j));}
    _o.E10 = this.E10;
    _o.E54 = this.E54;
    _o.S10 = this.S10;
    _o.S54 = this.S54;
    _o.M10 = this.M10;
    _o.M54 = this.M54;
    _o.Y10 = this.Y10;
    _o.Y54 = this.Y54;
    _o.F10 = this.F10;
    _o.F54 = this.F54;
    _o.F81 = this.F81;
    _o.Ap = this.Ap;
    _o.ApDuration = this.ApDuration;
    _o.KIndex = this.KIndex;
    _o.Kp = this.Kp;
    _o.KpDuration = this.KpDuration;
    _o.Gamma = this.Gamma;
    _o.Dst = this.Dst;
    _o.Dtc = this.Dtc;
    _o.RbRegionCode = this.RbRegionCode;
    _o.RbIndex = this.RbIndex;
    _o.NormFactor = this.NormFactor;
    _o.RbDuration = this.RbDuration;
    _o.AnalyzerAttenuation = this.AnalyzerAttenuation;
    _o.ObservedBaseline = new List<string>();
    for (var _j = 0; _j < this.ObservedBaselineLength; ++_j) {_o.ObservedBaseline.Add(this.ObservedBaseline(_j));}
    _o.Frequencies = new List<string>();
    for (var _j = 0; _j < this.FrequenciesLength; ++_j) {_o.Frequencies.Add(this.Frequencies(_j));}
    _o.Powers = new List<string>();
    for (var _j = 0; _j < this.PowersLength; ++_j) {_o.Powers.Add(this.Powers(_j));}
    _o.RawFileURI = this.RawFileURI;
    _o.TransactionId = this.TransactionId;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<SGI_Ingest> Pack(FlatBufferBuilder builder, SGI_IngestT _o) {
    if (_o == null) return default(Offset<SGI_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _effectiveDate = _o.EffectiveDate == null ? default(StringOffset) : builder.CreateString(_o.EffectiveDate);
    var _sgiDate = _o.SgiDate == null ? default(StringOffset) : builder.CreateString(_o.SgiDate);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _stationName = _o.StationName == null ? default(StringOffset) : builder.CreateString(_o.StationName);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _coeffDegree = default(VectorOffset);
    if (_o.CoeffDegree != null) {
      var __coeffDegree = new StringOffset[_o.CoeffDegree.Count];
      for (var _j = 0; _j < __coeffDegree.Length; ++_j) { __coeffDegree[_j] = builder.CreateString(_o.CoeffDegree[_j]); }
      _coeffDegree = CreateCoeffDegreeVector(builder, __coeffDegree);
    }
    var _coeffOrder = default(VectorOffset);
    if (_o.CoeffOrder != null) {
      var __coeffOrder = new StringOffset[_o.CoeffOrder.Count];
      for (var _j = 0; _j < __coeffOrder.Length; ++_j) { __coeffOrder[_j] = builder.CreateString(_o.CoeffOrder[_j]); }
      _coeffOrder = CreateCoeffOrderVector(builder, __coeffOrder);
    }
    var _ctce = default(VectorOffset);
    if (_o.Ctce != null) {
      var __ctce = new StringOffset[_o.Ctce.Count];
      for (var _j = 0; _j < __ctce.Length; ++_j) { __ctce[_j] = builder.CreateString(_o.Ctce[_j]); }
      _ctce = CreateCtceVector(builder, __ctce);
    }
    var _stce = default(VectorOffset);
    if (_o.Stce != null) {
      var __stce = new StringOffset[_o.Stce.Count];
      for (var _j = 0; _j < __stce.Length; ++_j) { __stce[_j] = builder.CreateString(_o.Stce[_j]); }
      _stce = CreateStceVector(builder, __stce);
    }
    var _ctci = default(VectorOffset);
    if (_o.Ctci != null) {
      var __ctci = new StringOffset[_o.Ctci.Count];
      for (var _j = 0; _j < __ctci.Length; ++_j) { __ctci[_j] = builder.CreateString(_o.Ctci[_j]); }
      _ctci = CreateCtciVector(builder, __ctci);
    }
    var _stci = default(VectorOffset);
    if (_o.Stci != null) {
      var __stci = new StringOffset[_o.Stci.Count];
      for (var _j = 0; _j < __stci.Length; ++_j) { __stci[_j] = builder.CreateString(_o.Stci[_j]); }
      _stci = CreateStciVector(builder, __stci);
    }
    var _observedBaseline = default(VectorOffset);
    if (_o.ObservedBaseline != null) {
      var __observedBaseline = new StringOffset[_o.ObservedBaseline.Count];
      for (var _j = 0; _j < __observedBaseline.Length; ++_j) { __observedBaseline[_j] = builder.CreateString(_o.ObservedBaseline[_j]); }
      _observedBaseline = CreateObservedBaselineVector(builder, __observedBaseline);
    }
    var _frequencies = default(VectorOffset);
    if (_o.Frequencies != null) {
      var __frequencies = new StringOffset[_o.Frequencies.Count];
      for (var _j = 0; _j < __frequencies.Length; ++_j) { __frequencies[_j] = builder.CreateString(_o.Frequencies[_j]); }
      _frequencies = CreateFrequenciesVector(builder, __frequencies);
    }
    var _powers = default(VectorOffset);
    if (_o.Powers != null) {
      var __powers = new StringOffset[_o.Powers.Count];
      for (var _j = 0; _j < __powers.Length; ++_j) { __powers[_j] = builder.CreateString(_o.Powers[_j]); }
      _powers = CreatePowersVector(builder, __powers);
    }
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateSGI_Ingest(
      builder,
      _id,
      _classificationMarking,
      _effectiveDate,
      _sgiDate,
      _type,
      _o.State,
      _stationName,
      _idSensor,
      _origSensorId,
      _o.Mode,
      _o.Precedence,
      _coeffDegree,
      _coeffOrder,
      _ctce,
      _stce,
      _ctci,
      _stci,
      _o.E10,
      _o.E54,
      _o.S10,
      _o.S54,
      _o.M10,
      _o.M54,
      _o.Y10,
      _o.Y54,
      _o.F10,
      _o.F54,
      _o.F81,
      _o.Ap,
      _o.ApDuration,
      _o.KIndex,
      _o.Kp,
      _o.KpDuration,
      _o.Gamma,
      _o.Dst,
      _o.Dtc,
      _o.RbRegionCode,
      _o.RbIndex,
      _o.NormFactor,
      _o.RbDuration,
      _o.AnalyzerAttenuation,
      _observedBaseline,
      _frequencies,
      _powers,
      _rawFileURI,
      _transactionId,
      _tags,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class SGI_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string EffectiveDate { get; set; }
  public string SgiDate { get; set; }
  public string Type { get; set; }
  public SGI_Ingest_state_Enum State { get; set; }
  public string StationName { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public int Mode { get; set; }
  public SGI_Ingest_precedence_Enum Precedence { get; set; }
  public List<string> CoeffDegree { get; set; }
  public List<string> CoeffOrder { get; set; }
  public List<string> Ctce { get; set; }
  public List<string> Stce { get; set; }
  public List<string> Ctci { get; set; }
  public List<string> Stci { get; set; }
  public double E10 { get; set; }
  public double E54 { get; set; }
  public double S10 { get; set; }
  public double S54 { get; set; }
  public double M10 { get; set; }
  public double M54 { get; set; }
  public double Y10 { get; set; }
  public double Y54 { get; set; }
  public double F10 { get; set; }
  public double F54 { get; set; }
  public double F81 { get; set; }
  public double Ap { get; set; }
  public int ApDuration { get; set; }
  public int KIndex { get; set; }
  public double Kp { get; set; }
  public int KpDuration { get; set; }
  public int Gamma { get; set; }
  public double Dst { get; set; }
  public double Dtc { get; set; }
  public int RbRegionCode { get; set; }
  public double RbIndex { get; set; }
  public double NormFactor { get; set; }
  public int RbDuration { get; set; }
  public double AnalyzerAttenuation { get; set; }
  public List<string> ObservedBaseline { get; set; }
  public List<string> Frequencies { get; set; }
  public List<string> Powers { get; set; }
  public string RawFileURI { get; set; }
  public string TransactionId { get; set; }
  public List<string> Tags { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public SGI_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public SGI_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.EffectiveDate = null;
    this.SgiDate = null;
    this.Type = null;
    this.State = SGI_Ingest_state_Enum.I;
    this.StationName = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.Mode = 0;
    this.Precedence = SGI_Ingest_precedence_Enum.O;
    this.CoeffDegree = null;
    this.CoeffOrder = null;
    this.Ctce = null;
    this.Stce = null;
    this.Ctci = null;
    this.Stci = null;
    this.E10 = 0.0;
    this.E54 = 0.0;
    this.S10 = 0.0;
    this.S54 = 0.0;
    this.M10 = 0.0;
    this.M54 = 0.0;
    this.Y10 = 0.0;
    this.Y54 = 0.0;
    this.F10 = 0.0;
    this.F54 = 0.0;
    this.F81 = 0.0;
    this.Ap = 0.0;
    this.ApDuration = 0;
    this.KIndex = 0;
    this.Kp = 0.0;
    this.KpDuration = 0;
    this.Gamma = 0;
    this.Dst = 0.0;
    this.Dtc = 0.0;
    this.RbRegionCode = 0;
    this.RbIndex = 0.0;
    this.NormFactor = 0.0;
    this.RbDuration = 0;
    this.AnalyzerAttenuation = 0.0;
    this.ObservedBaseline = null;
    this.Frequencies = null;
    this.Powers = null;
    this.RawFileURI = null;
    this.TransactionId = null;
    this.Tags = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = SGI_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static SGI_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SGI_Ingest.GetRootAsSGI_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SGI_Ingest.FinishSGI_IngestBuffer(fbb, SGI_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SGI_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*EffectiveDate*/, false)
      && verifier.VerifyString(tablePos, 10 /*SgiDate*/, false)
      && verifier.VerifyString(tablePos, 12 /*Type*/, false)
      && verifier.VerifyField(tablePos, 14 /*State*/, 1 /*SGI_Ingest_state_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*StationName*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 20 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 22 /*Mode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Precedence*/, 1 /*SGI_Ingest_precedence_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*CoeffDegree*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*CoeffOrder*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Ctce*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*Stce*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*Ctci*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*Stci*/, false)
      && verifier.VerifyField(tablePos, 38 /*E10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*E54*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*S10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*S54*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*M10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*M54*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Y10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*Y54*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*F10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*F54*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*F81*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*Ap*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*ApDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*KIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*Kp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*KpDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*Gamma*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*Dst*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*Dtc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*RbRegionCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*RbIndex*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*NormFactor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*RbDuration*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*AnalyzerAttenuation*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 86 /*ObservedBaseline*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 88 /*Frequencies*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 90 /*Powers*/, false)
      && verifier.VerifyString(tablePos, 92 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 94 /*TransactionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 96 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 98 /*Source*/, false)
      && verifier.VerifyString(tablePos, 100 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 102 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 104 /*DataMode*/, 1 /*SGI_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 106 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 108 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
