// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Maintenance schedule and operational status of Sensor.
public struct SensorMaintenance_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SensorMaintenance_Ingest GetRootAsSensorMaintenance_Ingest(ByteBuffer _bb) { return GetRootAsSensorMaintenance_Ingest(_bb, new SensorMaintenance_Ingest()); }
  public static SensorMaintenance_Ingest GetRootAsSensorMaintenance_Ingest(ByteBuffer _bb, SensorMaintenance_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SensorMaintenance_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensorMaintenance_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, SensorMaintenance_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SensorMaintenance_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORMAINTENANCE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
  /// Example: /// Example: site01
  /// Constraints: Minimum length = 1, Maximum length = 6
  public string SiteCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSiteCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSiteCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSiteCodeArray() { return __p.__vector_as_array<byte>(8); }
  /// UUID of the sensor.
  /// Example: /// Example: idSensor
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(10); }
  /// The planned outage start time in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// The planned outage end time in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The minimum time required to recall this activity, expressed as ddd:hh:mm.
  /// Example: /// Example: 128:16:52
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string Recall { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecallBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRecallBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRecallArray() { return __p.__vector_as_array<byte>(16); }
  /// The duration of the planned outage, expressed as ddd:hh:mm.
  /// Example: /// Example: 128:16:52
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string Duration { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDurationBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDurationBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDurationArray() { return __p.__vector_as_array<byte>(18); }
  /// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: G
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string MwOpsCap { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMwOpsCapBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMwOpsCapBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMwOpsCapArray() { return __p.__vector_as_array<byte>(20); }
  /// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: Y
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string SsOpsCap { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSsOpsCapBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSsOpsCapBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSsOpsCapArray() { return __p.__vector_as_array<byte>(22); }
  /// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string MdOpsCap { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMdOpsCapBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMdOpsCapBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMdOpsCapArray() { return __p.__vector_as_array<byte>(24); }
  /// The sensor face(s) to which this COLT maintenance item applies, if applicable.
  /// Example: /// Example: impactedFaces
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string ImpactedFaces { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImpactedFacesBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetImpactedFacesBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetImpactedFacesArray() { return __p.__vector_as_array<byte>(26); }
  /// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
  /// Example: /// Example: FMC
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string EquipStatus { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipStatusBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEquipStatusBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEquipStatusArray() { return __p.__vector_as_array<byte>(28); }
  /// Description of the activity taking place during this outage.
  /// Example: /// Example: Activity Description
  /// Constraints: No constraints specified.
  public string Activity { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivityBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetActivityBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetActivityArray() { return __p.__vector_as_array<byte>(30); }
  /// Remarks concerning this outage.
  /// Example: /// Example: Remarks
  /// Constraints: No constraints specified.
  public string Remark { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemarkBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetRemarkBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetRemarkArray() { return __p.__vector_as_array<byte>(32); }
  /// The name of the requestor.
  /// Example: /// Example: requestor
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string Requestor { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRequestorBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetRequestorBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetRequestorArray() { return __p.__vector_as_array<byte>(34); }
  /// The name of the changer, if applicable.
  /// Example: /// Example: changer
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string Changer { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChangerBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetChangerBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetChangerArray() { return __p.__vector_as_array<byte>(36); }
  /// The name of the approver.
  /// Example: /// Example: approver
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string Approver { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApproverBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetApproverBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetApproverArray() { return __p.__vector_as_array<byte>(38); }
  /// COLT EOWID.
  /// Example: /// Example: eowId
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string EowId { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEowIdBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEowIdBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEowIdArray() { return __p.__vector_as_array<byte>(40); }
  /// The revision number for this maintenance item.
  /// Example: /// Example: rev
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Rev { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRevBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetRevBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetRevArray() { return __p.__vector_as_array<byte>(42); }
  /// The priority of this maintenance item.
  /// Example: /// Example: low
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Priority { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriorityBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetPriorityBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetPriorityArray() { return __p.__vector_as_array<byte>(44); }
  /// Release.
  /// Example: /// Example: rel
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Rel { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRelBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetRelBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetRelArray() { return __p.__vector_as_array<byte>(46); }
  /// The internal COLT line number assigned to this item.
  /// Example: /// Example: lineNumber
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string LineNumber { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLineNumberBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetLineNumberBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetLineNumberArray() { return __p.__vector_as_array<byte>(48); }
  /// The name of the resource(s) affected by this maintenance item.
  /// Example: /// Example: resource
  /// Constraints: Minimum length = 0, Maximum length = 255
  public string Resource { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetResourceBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetResourceArray() { return __p.__vector_as_array<byte>(50); }
  /// The date that this item became inactive in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string InactiveDate { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInactiveDateBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetInactiveDateBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetInactiveDateArray() { return __p.__vector_as_array<byte>(52); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(54); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(56); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(58); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(60); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SensorMaintenance_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(62); return o != 0 ? (SensorMaintenance_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SensorMaintenance_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(64); }

  public static Offset<SensorMaintenance_Ingest> CreateSensorMaintenance_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset siteCodeOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset recallOffset = default(StringOffset),
      StringOffset durationOffset = default(StringOffset),
      StringOffset mwOpsCapOffset = default(StringOffset),
      StringOffset ssOpsCapOffset = default(StringOffset),
      StringOffset mdOpsCapOffset = default(StringOffset),
      StringOffset impactedFacesOffset = default(StringOffset),
      StringOffset equipStatusOffset = default(StringOffset),
      StringOffset activityOffset = default(StringOffset),
      StringOffset remarkOffset = default(StringOffset),
      StringOffset requestorOffset = default(StringOffset),
      StringOffset changerOffset = default(StringOffset),
      StringOffset approverOffset = default(StringOffset),
      StringOffset eowIdOffset = default(StringOffset),
      StringOffset revOffset = default(StringOffset),
      StringOffset priorityOffset = default(StringOffset),
      StringOffset relOffset = default(StringOffset),
      StringOffset lineNumberOffset = default(StringOffset),
      StringOffset resourceOffset = default(StringOffset),
      StringOffset inactiveDateOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      SensorMaintenance_Ingest_dataMode_Enum dataMode = SensorMaintenance_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(31);
    SensorMaintenance_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SensorMaintenance_Ingest.AddOrigin(builder, originOffset);
    SensorMaintenance_Ingest.AddSource(builder, sourceOffset);
    SensorMaintenance_Ingest.AddCreatedBy(builder, createdByOffset);
    SensorMaintenance_Ingest.AddCreatedAt(builder, createdAtOffset);
    SensorMaintenance_Ingest.AddInactiveDate(builder, inactiveDateOffset);
    SensorMaintenance_Ingest.AddResource(builder, resourceOffset);
    SensorMaintenance_Ingest.AddLineNumber(builder, lineNumberOffset);
    SensorMaintenance_Ingest.AddRel(builder, relOffset);
    SensorMaintenance_Ingest.AddPriority(builder, priorityOffset);
    SensorMaintenance_Ingest.AddRev(builder, revOffset);
    SensorMaintenance_Ingest.AddEowId(builder, eowIdOffset);
    SensorMaintenance_Ingest.AddApprover(builder, approverOffset);
    SensorMaintenance_Ingest.AddChanger(builder, changerOffset);
    SensorMaintenance_Ingest.AddRequestor(builder, requestorOffset);
    SensorMaintenance_Ingest.AddRemark(builder, remarkOffset);
    SensorMaintenance_Ingest.AddActivity(builder, activityOffset);
    SensorMaintenance_Ingest.AddEquipStatus(builder, equipStatusOffset);
    SensorMaintenance_Ingest.AddImpactedFaces(builder, impactedFacesOffset);
    SensorMaintenance_Ingest.AddMdOpsCap(builder, mdOpsCapOffset);
    SensorMaintenance_Ingest.AddSsOpsCap(builder, ssOpsCapOffset);
    SensorMaintenance_Ingest.AddMwOpsCap(builder, mwOpsCapOffset);
    SensorMaintenance_Ingest.AddDuration(builder, durationOffset);
    SensorMaintenance_Ingest.AddRecall(builder, recallOffset);
    SensorMaintenance_Ingest.AddEndTime(builder, endTimeOffset);
    SensorMaintenance_Ingest.AddStartTime(builder, startTimeOffset);
    SensorMaintenance_Ingest.AddIdSensor(builder, idSensorOffset);
    SensorMaintenance_Ingest.AddSiteCode(builder, siteCodeOffset);
    SensorMaintenance_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SensorMaintenance_Ingest.AddId(builder, idOffset);
    SensorMaintenance_Ingest.AddDataMode(builder, dataMode);
    return SensorMaintenance_Ingest.EndSensorMaintenance_Ingest(builder);
  }

  public static void StartSensorMaintenance_Ingest(FlatBufferBuilder builder) { builder.StartTable(31); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSiteCode(FlatBufferBuilder builder, StringOffset siteCodeOffset) { builder.AddOffset(2, siteCodeOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(3, idSensorOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(4, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(5, endTimeOffset.Value, 0); }
  public static void AddRecall(FlatBufferBuilder builder, StringOffset recallOffset) { builder.AddOffset(6, recallOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, StringOffset durationOffset) { builder.AddOffset(7, durationOffset.Value, 0); }
  public static void AddMwOpsCap(FlatBufferBuilder builder, StringOffset mwOpsCapOffset) { builder.AddOffset(8, mwOpsCapOffset.Value, 0); }
  public static void AddSsOpsCap(FlatBufferBuilder builder, StringOffset ssOpsCapOffset) { builder.AddOffset(9, ssOpsCapOffset.Value, 0); }
  public static void AddMdOpsCap(FlatBufferBuilder builder, StringOffset mdOpsCapOffset) { builder.AddOffset(10, mdOpsCapOffset.Value, 0); }
  public static void AddImpactedFaces(FlatBufferBuilder builder, StringOffset impactedFacesOffset) { builder.AddOffset(11, impactedFacesOffset.Value, 0); }
  public static void AddEquipStatus(FlatBufferBuilder builder, StringOffset equipStatusOffset) { builder.AddOffset(12, equipStatusOffset.Value, 0); }
  public static void AddActivity(FlatBufferBuilder builder, StringOffset activityOffset) { builder.AddOffset(13, activityOffset.Value, 0); }
  public static void AddRemark(FlatBufferBuilder builder, StringOffset remarkOffset) { builder.AddOffset(14, remarkOffset.Value, 0); }
  public static void AddRequestor(FlatBufferBuilder builder, StringOffset requestorOffset) { builder.AddOffset(15, requestorOffset.Value, 0); }
  public static void AddChanger(FlatBufferBuilder builder, StringOffset changerOffset) { builder.AddOffset(16, changerOffset.Value, 0); }
  public static void AddApprover(FlatBufferBuilder builder, StringOffset approverOffset) { builder.AddOffset(17, approverOffset.Value, 0); }
  public static void AddEowId(FlatBufferBuilder builder, StringOffset eowIdOffset) { builder.AddOffset(18, eowIdOffset.Value, 0); }
  public static void AddRev(FlatBufferBuilder builder, StringOffset revOffset) { builder.AddOffset(19, revOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, StringOffset priorityOffset) { builder.AddOffset(20, priorityOffset.Value, 0); }
  public static void AddRel(FlatBufferBuilder builder, StringOffset relOffset) { builder.AddOffset(21, relOffset.Value, 0); }
  public static void AddLineNumber(FlatBufferBuilder builder, StringOffset lineNumberOffset) { builder.AddOffset(22, lineNumberOffset.Value, 0); }
  public static void AddResource(FlatBufferBuilder builder, StringOffset resourceOffset) { builder.AddOffset(23, resourceOffset.Value, 0); }
  public static void AddInactiveDate(FlatBufferBuilder builder, StringOffset inactiveDateOffset) { builder.AddOffset(24, inactiveDateOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(25, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(26, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(27, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(28, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SensorMaintenance_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(29, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(30, origNetworkOffset.Value, 0); }
  public static Offset<SensorMaintenance_Ingest> EndSensorMaintenance_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SensorMaintenance_Ingest>(o);
  }
  public static void FinishSensorMaintenance_IngestBuffer(FlatBufferBuilder builder, Offset<SensorMaintenance_Ingest> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensorMaintenance_IngestBuffer(FlatBufferBuilder builder, Offset<SensorMaintenance_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public SensorMaintenance_IngestT UnPack() {
    var _o = new SensorMaintenance_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SensorMaintenance_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SiteCode = this.SiteCode;
    _o.IdSensor = this.IdSensor;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.Recall = this.Recall;
    _o.Duration = this.Duration;
    _o.MwOpsCap = this.MwOpsCap;
    _o.SsOpsCap = this.SsOpsCap;
    _o.MdOpsCap = this.MdOpsCap;
    _o.ImpactedFaces = this.ImpactedFaces;
    _o.EquipStatus = this.EquipStatus;
    _o.Activity = this.Activity;
    _o.Remark = this.Remark;
    _o.Requestor = this.Requestor;
    _o.Changer = this.Changer;
    _o.Approver = this.Approver;
    _o.EowId = this.EowId;
    _o.Rev = this.Rev;
    _o.Priority = this.Priority;
    _o.Rel = this.Rel;
    _o.LineNumber = this.LineNumber;
    _o.Resource = this.Resource;
    _o.InactiveDate = this.InactiveDate;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<SensorMaintenance_Ingest> Pack(FlatBufferBuilder builder, SensorMaintenance_IngestT _o) {
    if (_o == null) return default(Offset<SensorMaintenance_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _siteCode = _o.SiteCode == null ? default(StringOffset) : builder.CreateString(_o.SiteCode);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _recall = _o.Recall == null ? default(StringOffset) : builder.CreateString(_o.Recall);
    var _duration = _o.Duration == null ? default(StringOffset) : builder.CreateString(_o.Duration);
    var _mwOpsCap = _o.MwOpsCap == null ? default(StringOffset) : builder.CreateString(_o.MwOpsCap);
    var _ssOpsCap = _o.SsOpsCap == null ? default(StringOffset) : builder.CreateString(_o.SsOpsCap);
    var _mdOpsCap = _o.MdOpsCap == null ? default(StringOffset) : builder.CreateString(_o.MdOpsCap);
    var _impactedFaces = _o.ImpactedFaces == null ? default(StringOffset) : builder.CreateString(_o.ImpactedFaces);
    var _equipStatus = _o.EquipStatus == null ? default(StringOffset) : builder.CreateString(_o.EquipStatus);
    var _activity = _o.Activity == null ? default(StringOffset) : builder.CreateString(_o.Activity);
    var _remark = _o.Remark == null ? default(StringOffset) : builder.CreateString(_o.Remark);
    var _requestor = _o.Requestor == null ? default(StringOffset) : builder.CreateString(_o.Requestor);
    var _changer = _o.Changer == null ? default(StringOffset) : builder.CreateString(_o.Changer);
    var _approver = _o.Approver == null ? default(StringOffset) : builder.CreateString(_o.Approver);
    var _eowId = _o.EowId == null ? default(StringOffset) : builder.CreateString(_o.EowId);
    var _rev = _o.Rev == null ? default(StringOffset) : builder.CreateString(_o.Rev);
    var _priority = _o.Priority == null ? default(StringOffset) : builder.CreateString(_o.Priority);
    var _rel = _o.Rel == null ? default(StringOffset) : builder.CreateString(_o.Rel);
    var _lineNumber = _o.LineNumber == null ? default(StringOffset) : builder.CreateString(_o.LineNumber);
    var _resource = _o.Resource == null ? default(StringOffset) : builder.CreateString(_o.Resource);
    var _inactiveDate = _o.InactiveDate == null ? default(StringOffset) : builder.CreateString(_o.InactiveDate);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSensorMaintenance_Ingest(
      builder,
      _id,
      _classificationMarking,
      _siteCode,
      _idSensor,
      _startTime,
      _endTime,
      _recall,
      _duration,
      _mwOpsCap,
      _ssOpsCap,
      _mdOpsCap,
      _impactedFaces,
      _equipStatus,
      _activity,
      _remark,
      _requestor,
      _changer,
      _approver,
      _eowId,
      _rev,
      _priority,
      _rel,
      _lineNumber,
      _resource,
      _inactiveDate,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class SensorMaintenance_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string SiteCode { get; set; }
  public string IdSensor { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string Recall { get; set; }
  public string Duration { get; set; }
  public string MwOpsCap { get; set; }
  public string SsOpsCap { get; set; }
  public string MdOpsCap { get; set; }
  public string ImpactedFaces { get; set; }
  public string EquipStatus { get; set; }
  public string Activity { get; set; }
  public string Remark { get; set; }
  public string Requestor { get; set; }
  public string Changer { get; set; }
  public string Approver { get; set; }
  public string EowId { get; set; }
  public string Rev { get; set; }
  public string Priority { get; set; }
  public string Rel { get; set; }
  public string LineNumber { get; set; }
  public string Resource { get; set; }
  public string InactiveDate { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public SensorMaintenance_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public SensorMaintenance_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.SiteCode = null;
    this.IdSensor = null;
    this.StartTime = null;
    this.EndTime = null;
    this.Recall = null;
    this.Duration = null;
    this.MwOpsCap = null;
    this.SsOpsCap = null;
    this.MdOpsCap = null;
    this.ImpactedFaces = null;
    this.EquipStatus = null;
    this.Activity = null;
    this.Remark = null;
    this.Requestor = null;
    this.Changer = null;
    this.Approver = null;
    this.EowId = null;
    this.Rev = null;
    this.Priority = null;
    this.Rel = null;
    this.LineNumber = null;
    this.Resource = null;
    this.InactiveDate = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = SensorMaintenance_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static SensorMaintenance_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SensorMaintenance_Ingest.GetRootAsSensorMaintenance_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SensorMaintenance_Ingest.FinishSensorMaintenance_IngestBuffer(fbb, SensorMaintenance_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SensorMaintenance_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*SiteCode*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 12 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*Recall*/, false)
      && verifier.VerifyString(tablePos, 18 /*Duration*/, false)
      && verifier.VerifyString(tablePos, 20 /*MwOpsCap*/, false)
      && verifier.VerifyString(tablePos, 22 /*SsOpsCap*/, false)
      && verifier.VerifyString(tablePos, 24 /*MdOpsCap*/, false)
      && verifier.VerifyString(tablePos, 26 /*ImpactedFaces*/, false)
      && verifier.VerifyString(tablePos, 28 /*EquipStatus*/, false)
      && verifier.VerifyString(tablePos, 30 /*Activity*/, false)
      && verifier.VerifyString(tablePos, 32 /*Remark*/, false)
      && verifier.VerifyString(tablePos, 34 /*Requestor*/, false)
      && verifier.VerifyString(tablePos, 36 /*Changer*/, false)
      && verifier.VerifyString(tablePos, 38 /*Approver*/, false)
      && verifier.VerifyString(tablePos, 40 /*EowId*/, false)
      && verifier.VerifyString(tablePos, 42 /*Rev*/, false)
      && verifier.VerifyString(tablePos, 44 /*Priority*/, false)
      && verifier.VerifyString(tablePos, 46 /*Rel*/, false)
      && verifier.VerifyString(tablePos, 48 /*LineNumber*/, false)
      && verifier.VerifyString(tablePos, 50 /*Resource*/, false)
      && verifier.VerifyString(tablePos, 52 /*InactiveDate*/, false)
      && verifier.VerifyString(tablePos, 54 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 56 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 58 /*Source*/, false)
      && verifier.VerifyString(tablePos, 60 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 62 /*DataMode*/, 1 /*SensorMaintenance_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 64 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
