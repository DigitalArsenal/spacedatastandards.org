// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Discrepancy information associated with this LogisticsSupport record.
public struct LogisticsDiscrepancyInfos_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogisticsDiscrepancyInfos_Full GetRootAsLogisticsDiscrepancyInfos_Full(ByteBuffer _bb) { return GetRootAsLogisticsDiscrepancyInfos_Full(_bb, new LogisticsDiscrepancyInfos_Full()); }
  public static LogisticsDiscrepancyInfos_Full GetRootAsLogisticsDiscrepancyInfos_Full(ByteBuffer _bb, LogisticsDiscrepancyInfos_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LogisticsDiscrepancyInfos_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOGI"); }
  public static bool VerifyLogisticsDiscrepancyInfos_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOGI", false, LogisticsDiscrepancyInfos_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogisticsDiscrepancyInfos_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Job Control Number of the discrepancy.
  /// Example: /// Example: 231942400
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string Jcn { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJcnBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetJcnBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetJcnArray() { return __p.__vector_as_array<byte>(4); }
  /// The aircraft discrepancy description.
  /// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
  /// Constraints: Minimum length = 0, Maximum length = 680
  public string DiscrepancyInfo { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDiscrepancyInfoBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDiscrepancyInfoBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDiscrepancyInfoArray() { return __p.__vector_as_array<byte>(6); }
  /// The job start time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  public string JobStTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJobStTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetJobStTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetJobStTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  public string ClosureTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClosureTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetClosureTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClosureTimeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<LogisticsDiscrepancyInfos_Full> CreateLogisticsDiscrepancyInfos_Full(FlatBufferBuilder builder,
      StringOffset jcnOffset = default(StringOffset),
      StringOffset discrepancyInfoOffset = default(StringOffset),
      StringOffset jobStTimeOffset = default(StringOffset),
      StringOffset closureTimeOffset = default(StringOffset)) {
    builder.StartTable(4);
    LogisticsDiscrepancyInfos_Full.AddClosureTime(builder, closureTimeOffset);
    LogisticsDiscrepancyInfos_Full.AddJobStTime(builder, jobStTimeOffset);
    LogisticsDiscrepancyInfos_Full.AddDiscrepancyInfo(builder, discrepancyInfoOffset);
    LogisticsDiscrepancyInfos_Full.AddJcn(builder, jcnOffset);
    return LogisticsDiscrepancyInfos_Full.EndLogisticsDiscrepancyInfos_Full(builder);
  }

  public static void StartLogisticsDiscrepancyInfos_Full(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddJcn(FlatBufferBuilder builder, StringOffset jcnOffset) { builder.AddOffset(0, jcnOffset.Value, 0); }
  public static void AddDiscrepancyInfo(FlatBufferBuilder builder, StringOffset discrepancyInfoOffset) { builder.AddOffset(1, discrepancyInfoOffset.Value, 0); }
  public static void AddJobStTime(FlatBufferBuilder builder, StringOffset jobStTimeOffset) { builder.AddOffset(2, jobStTimeOffset.Value, 0); }
  public static void AddClosureTime(FlatBufferBuilder builder, StringOffset closureTimeOffset) { builder.AddOffset(3, closureTimeOffset.Value, 0); }
  public static Offset<LogisticsDiscrepancyInfos_Full> EndLogisticsDiscrepancyInfos_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LogisticsDiscrepancyInfos_Full>(o);
  }
  public static void FinishLogisticsDiscrepancyInfos_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsDiscrepancyInfos_Full> offset) { builder.Finish(offset.Value, "LOGI"); }
  public static void FinishSizePrefixedLogisticsDiscrepancyInfos_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsDiscrepancyInfos_Full> offset) { builder.FinishSizePrefixed(offset.Value, "LOGI"); }
  public LogisticsDiscrepancyInfos_FullT UnPack() {
    var _o = new LogisticsDiscrepancyInfos_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogisticsDiscrepancyInfos_FullT _o) {
    _o.Jcn = this.Jcn;
    _o.DiscrepancyInfo = this.DiscrepancyInfo;
    _o.JobStTime = this.JobStTime;
    _o.ClosureTime = this.ClosureTime;
  }
  public static Offset<LogisticsDiscrepancyInfos_Full> Pack(FlatBufferBuilder builder, LogisticsDiscrepancyInfos_FullT _o) {
    if (_o == null) return default(Offset<LogisticsDiscrepancyInfos_Full>);
    var _jcn = _o.Jcn == null ? default(StringOffset) : builder.CreateString(_o.Jcn);
    var _discrepancyInfo = _o.DiscrepancyInfo == null ? default(StringOffset) : builder.CreateString(_o.DiscrepancyInfo);
    var _jobStTime = _o.JobStTime == null ? default(StringOffset) : builder.CreateString(_o.JobStTime);
    var _closureTime = _o.ClosureTime == null ? default(StringOffset) : builder.CreateString(_o.ClosureTime);
    return CreateLogisticsDiscrepancyInfos_Full(
      builder,
      _jcn,
      _discrepancyInfo,
      _jobStTime,
      _closureTime);
  }
}

public class LogisticsDiscrepancyInfos_FullT
{
  public string Jcn { get; set; }
  public string DiscrepancyInfo { get; set; }
  public string JobStTime { get; set; }
  public string ClosureTime { get; set; }

  public LogisticsDiscrepancyInfos_FullT() {
    this.Jcn = null;
    this.DiscrepancyInfo = null;
    this.JobStTime = null;
    this.ClosureTime = null;
  }
  public static LogisticsDiscrepancyInfos_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return LogisticsDiscrepancyInfos_Full.GetRootAsLogisticsDiscrepancyInfos_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LogisticsDiscrepancyInfos_Full.FinishLogisticsDiscrepancyInfos_FullBuffer(fbb, LogisticsDiscrepancyInfos_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LogisticsDiscrepancyInfos_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Jcn*/, false)
      && verifier.VerifyString(tablePos, 6 /*DiscrepancyInfo*/, false)
      && verifier.VerifyString(tablePos, 8 /*JobStTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*ClosureTime*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
