// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
public struct Ephemeris_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Ephemeris_Ingest GetRootAsEphemeris_Ingest(ByteBuffer _bb) { return GetRootAsEphemeris_Ingest(_bb, new Ephemeris_Ingest()); }
  public static Ephemeris_Ingest GetRootAsEphemeris_Ingest(ByteBuffer _bb, Ephemeris_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Ephemeris_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EPHE"); }
  public static bool VerifyEphemeris_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EPHE", false, Ephemeris_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Ephemeris_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EPHEMERIS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
  /// Example: /// Example: ES-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string EsId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Time associated with the Ephemeris Point, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(10); }
  /// Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Xpos { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Ypos { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Zpos { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Xvel { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Yvel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Zvel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Xaccel { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Yaccel { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Zaccel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
  /// The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  /// The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Cov(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CovLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(32); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(34); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(36); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Ephemeris_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(38); return o != 0 ? (Ephemeris_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Ephemeris_Ingest_dataMode_Enum.REAL; } }
  /// Unique identifier of the on-orbit satellite object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(40); }
  /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(42); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(44); }

  public static Offset<Ephemeris_Ingest> CreateEphemeris_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset esIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      double xpos = 0.0,
      double ypos = 0.0,
      double zpos = 0.0,
      double xvel = 0.0,
      double yvel = 0.0,
      double zvel = 0.0,
      double xaccel = 0.0,
      double yaccel = 0.0,
      double zaccel = 0.0,
      VectorOffset covOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      Ephemeris_Ingest_dataMode_Enum dataMode = Ephemeris_Ingest_dataMode_Enum.REAL,
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset)) {
    builder.StartTable(21);
    Ephemeris_Ingest.AddZaccel(builder, zaccel);
    Ephemeris_Ingest.AddYaccel(builder, yaccel);
    Ephemeris_Ingest.AddXaccel(builder, xaccel);
    Ephemeris_Ingest.AddZvel(builder, zvel);
    Ephemeris_Ingest.AddYvel(builder, yvel);
    Ephemeris_Ingest.AddXvel(builder, xvel);
    Ephemeris_Ingest.AddZpos(builder, zpos);
    Ephemeris_Ingest.AddYpos(builder, ypos);
    Ephemeris_Ingest.AddXpos(builder, xpos);
    Ephemeris_Ingest.AddOrigin(builder, originOffset);
    Ephemeris_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    Ephemeris_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    Ephemeris_Ingest.AddSource(builder, sourceOffset);
    Ephemeris_Ingest.AddCreatedBy(builder, createdByOffset);
    Ephemeris_Ingest.AddCreatedAt(builder, createdAtOffset);
    Ephemeris_Ingest.AddCov(builder, covOffset);
    Ephemeris_Ingest.AddTs(builder, tsOffset);
    Ephemeris_Ingest.AddEsId(builder, esIdOffset);
    Ephemeris_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Ephemeris_Ingest.AddId(builder, idOffset);
    Ephemeris_Ingest.AddDataMode(builder, dataMode);
    return Ephemeris_Ingest.EndEphemeris_Ingest(builder);
  }

  public static void StartEphemeris_Ingest(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(2, esIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(3, tsOffset.Value, 0); }
  public static void AddXpos(FlatBufferBuilder builder, double xpos) { builder.AddDouble(4, xpos, 0.0); }
  public static void AddYpos(FlatBufferBuilder builder, double ypos) { builder.AddDouble(5, ypos, 0.0); }
  public static void AddZpos(FlatBufferBuilder builder, double zpos) { builder.AddDouble(6, zpos, 0.0); }
  public static void AddXvel(FlatBufferBuilder builder, double xvel) { builder.AddDouble(7, xvel, 0.0); }
  public static void AddYvel(FlatBufferBuilder builder, double yvel) { builder.AddDouble(8, yvel, 0.0); }
  public static void AddZvel(FlatBufferBuilder builder, double zvel) { builder.AddDouble(9, zvel, 0.0); }
  public static void AddXaccel(FlatBufferBuilder builder, double xaccel) { builder.AddDouble(10, xaccel, 0.0); }
  public static void AddYaccel(FlatBufferBuilder builder, double yaccel) { builder.AddDouble(11, yaccel, 0.0); }
  public static void AddZaccel(FlatBufferBuilder builder, double zaccel) { builder.AddDouble(12, zaccel, 0.0); }
  public static void AddCov(FlatBufferBuilder builder, VectorOffset covOffset) { builder.AddOffset(13, covOffset.Value, 0); }
  public static VectorOffset CreateCovVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCovVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(14, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(15, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(16, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Ephemeris_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(17, (sbyte)dataMode, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(18, idOnOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(19, origObjectIdOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(20, originOffset.Value, 0); }
  public static Offset<Ephemeris_Ingest> EndEphemeris_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ephemeris_Ingest>(o);
  }
  public static void FinishEphemeris_IngestBuffer(FlatBufferBuilder builder, Offset<Ephemeris_Ingest> offset) { builder.Finish(offset.Value, "EPHE"); }
  public static void FinishSizePrefixedEphemeris_IngestBuffer(FlatBufferBuilder builder, Offset<Ephemeris_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EPHE"); }
  public Ephemeris_IngestT UnPack() {
    var _o = new Ephemeris_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Ephemeris_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.EsId = this.EsId;
    _o.Ts = this.Ts;
    _o.Xpos = this.Xpos;
    _o.Ypos = this.Ypos;
    _o.Zpos = this.Zpos;
    _o.Xvel = this.Xvel;
    _o.Yvel = this.Yvel;
    _o.Zvel = this.Zvel;
    _o.Xaccel = this.Xaccel;
    _o.Yaccel = this.Yaccel;
    _o.Zaccel = this.Zaccel;
    _o.Cov = new List<string>();
    for (var _j = 0; _j < this.CovLength; ++_j) {_o.Cov.Add(this.Cov(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Origin = this.Origin;
  }
  public static Offset<Ephemeris_Ingest> Pack(FlatBufferBuilder builder, Ephemeris_IngestT _o) {
    if (_o == null) return default(Offset<Ephemeris_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _cov = default(VectorOffset);
    if (_o.Cov != null) {
      var __cov = new StringOffset[_o.Cov.Count];
      for (var _j = 0; _j < __cov.Length; ++_j) { __cov[_j] = builder.CreateString(_o.Cov[_j]); }
      _cov = CreateCovVector(builder, __cov);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateEphemeris_Ingest(
      builder,
      _id,
      _classificationMarking,
      _esId,
      _ts,
      _o.Xpos,
      _o.Ypos,
      _o.Zpos,
      _o.Xvel,
      _o.Yvel,
      _o.Zvel,
      _o.Xaccel,
      _o.Yaccel,
      _o.Zaccel,
      _cov,
      _createdAt,
      _createdBy,
      _source,
      _o.DataMode,
      _idOnOrbit,
      _origObjectId,
      _origin);
  }
}

public class Ephemeris_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string EsId { get; set; }
  public string Ts { get; set; }
  public double Xpos { get; set; }
  public double Ypos { get; set; }
  public double Zpos { get; set; }
  public double Xvel { get; set; }
  public double Yvel { get; set; }
  public double Zvel { get; set; }
  public double Xaccel { get; set; }
  public double Yaccel { get; set; }
  public double Zaccel { get; set; }
  public List<string> Cov { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public Ephemeris_Ingest_dataMode_Enum DataMode { get; set; }
  public string IdOnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public string Origin { get; set; }

  public Ephemeris_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.EsId = null;
    this.Ts = null;
    this.Xpos = 0.0;
    this.Ypos = 0.0;
    this.Zpos = 0.0;
    this.Xvel = 0.0;
    this.Yvel = 0.0;
    this.Zvel = 0.0;
    this.Xaccel = 0.0;
    this.Yaccel = 0.0;
    this.Zaccel = 0.0;
    this.Cov = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.DataMode = Ephemeris_Ingest_dataMode_Enum.REAL;
    this.IdOnOrbit = null;
    this.OrigObjectId = null;
    this.Origin = null;
  }
  public static Ephemeris_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Ephemeris_Ingest.GetRootAsEphemeris_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Ephemeris_Ingest.FinishEphemeris_IngestBuffer(fbb, Ephemeris_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Ephemeris_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*EsId*/, false)
      && verifier.VerifyString(tablePos, 10 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 12 /*Xpos*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Ypos*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Zpos*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Xvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Yvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Zvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Xaccel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*Yaccel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Zaccel*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Cov*/, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 36 /*Source*/, false)
      && verifier.VerifyField(tablePos, 38 /*DataMode*/, 1 /*Ephemeris_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 42 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 44 /*Origin*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
