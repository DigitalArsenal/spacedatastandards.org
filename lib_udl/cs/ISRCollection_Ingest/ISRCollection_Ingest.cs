// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// ISR Collection data.
public struct ISRCollection_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollection_Ingest GetRootAsISRCollection_Ingest(ByteBuffer _bb) { return GetRootAsISRCollection_Ingest(_bb, new ISRCollection_Ingest()); }
  public static ISRCollection_Ingest GetRootAsISRCollection_Ingest(ByteBuffer _bb, ISRCollection_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollection_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollection_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollection_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollection_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ISRCOLLECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Version of the IDEX software the request came from for compatibility.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int IdexVersion { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Human readable Mission Name.
  /// Example: /// Example: Example mission name
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Mission Identifier.
  /// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMissionIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMissionIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Designation of mission Area Of Responsibility.
  /// Example: /// Example: Kandahar
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionAOR { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionAORBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMissionAORBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMissionAORArray() { return __p.__vector_as_array<byte>(14); }
  /// Primary type of intelligence to be collected during the mission.
  /// Example: /// Example: Sig
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionPrimaryIntelDiscipline { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionPrimaryIntelDisciplineBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMissionPrimaryIntelDisciplineBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMissionPrimaryIntelDisciplineArray() { return __p.__vector_as_array<byte>(16); }
  /// Sub category of primary intelligence to be collected.
  /// Example: /// Example: FMV
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionPrimarySubCategory { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionPrimarySubCategoryBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMissionPrimarySubCategoryBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMissionPrimarySubCategoryArray() { return __p.__vector_as_array<byte>(18); }
  /// Type of intelligence to be collected second.
  /// Example: /// Example: Intelligence_2
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionSecondaryIntelDiscipline { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionSecondaryIntelDisciplineBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMissionSecondaryIntelDisciplineBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMissionSecondaryIntelDisciplineArray() { return __p.__vector_as_array<byte>(20); }
  /// Mission sub category for secondary intelligence discipline to be collected.
  /// Example: /// Example: Convoy
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionSecondarySubCategory { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionSecondarySubCategoryBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMissionSecondarySubCategoryBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMissionSecondarySubCategoryArray() { return __p.__vector_as_array<byte>(22); }
  /// What is the primary objective(Role) of this mission.
  /// Example: /// Example: Targeting of Lead Vehicle
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionRole { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionRoleBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMissionRoleBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMissionRoleArray() { return __p.__vector_as_array<byte>(24); }
  /// Mission operation name.
  /// Example: /// Example: OP-HONEY-BADGER
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionOperation { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionOperationBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMissionOperationBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMissionOperationArray() { return __p.__vector_as_array<byte>(26); }
  /// Mission Priority (1-n).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int MissionPriority { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Name of the Supporting unit/Location that is performing this mission.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionSupportedUnit { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionSupportedUnitBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMissionSupportedUnitBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMissionSupportedUnitArray() { return __p.__vector_as_array<byte>(30); }
  /// Text version of what we are emphasizing in this mission.
  /// Example: /// Example: Mission emphasis
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionEmphasis { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionEmphasisBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetMissionEmphasisBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetMissionEmphasisArray() { return __p.__vector_as_array<byte>(32); }
  /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double MissionStartPointLat { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  public double MissionStartPointLong { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Mission geographical collection area.
  /// Example: /// Example: Example collection area
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string MissionCollectionArea { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionCollectionAreaBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetMissionCollectionAreaBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetMissionCollectionAreaArray() { return __p.__vector_as_array<byte>(38); }
  /// Joint Operations Area.
  /// Example: /// Example: Operation area
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionJoa { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionJoaBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetMissionJoaBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetMissionJoaArray() { return __p.__vector_as_array<byte>(40); }
  /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
  /// Example: /// Example: MATRIX
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionSyncMatrixBin { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionSyncMatrixBinBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetMissionSyncMatrixBinBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetMissionSyncMatrixBinArray() { return __p.__vector_as_array<byte>(42); }
  /// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string MissionCountry { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionCountryBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetMissionCountryBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetMissionCountryArray() { return __p.__vector_as_array<byte>(44); }
  /// Region of the mission.
  /// Example: /// Example: Example Region
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionRegion { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionRegionBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetMissionRegionBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetMissionRegionArray() { return __p.__vector_as_array<byte>(46); }
  /// Subregion of the mission.
  /// Example: /// Example: Example Subregion
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string MissionSubRegion { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionSubRegionBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetMissionSubRegionBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetMissionSubRegionArray() { return __p.__vector_as_array<byte>(48); }
  /// Mission desired collection requirements.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CollectionRequirements(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CollectionRequirementsLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Object for data dissemination.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Transit(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TransitLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Individual taskings to complete the mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Taskings(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TaskingsLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(56); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(58); }
  /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(60); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(62); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(64); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(66); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public ISRCollection_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(68); return o != 0 ? (ISRCollection_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ISRCollection_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(70); }

  public static Offset<ISRCollection_Ingest> CreateISRCollection_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int idexVersion = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset missionIdOffset = default(StringOffset),
      StringOffset missionAOROffset = default(StringOffset),
      StringOffset missionPrimaryIntelDisciplineOffset = default(StringOffset),
      StringOffset missionPrimarySubCategoryOffset = default(StringOffset),
      StringOffset missionSecondaryIntelDisciplineOffset = default(StringOffset),
      StringOffset missionSecondarySubCategoryOffset = default(StringOffset),
      StringOffset missionRoleOffset = default(StringOffset),
      StringOffset missionOperationOffset = default(StringOffset),
      int missionPriority = 0,
      StringOffset missionSupportedUnitOffset = default(StringOffset),
      StringOffset missionEmphasisOffset = default(StringOffset),
      double missionStartPointLat = 0.0,
      double missionStartPointLong = 0.0,
      StringOffset missionCollectionAreaOffset = default(StringOffset),
      StringOffset missionJoaOffset = default(StringOffset),
      StringOffset missionSyncMatrixBinOffset = default(StringOffset),
      StringOffset missionCountryOffset = default(StringOffset),
      StringOffset missionRegionOffset = default(StringOffset),
      StringOffset missionSubRegionOffset = default(StringOffset),
      VectorOffset collectionRequirementsOffset = default(VectorOffset),
      VectorOffset transitOffset = default(VectorOffset),
      VectorOffset taskingsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      ISRCollection_Ingest_dataMode_Enum dataMode = ISRCollection_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(34);
    ISRCollection_Ingest.AddMissionStartPointLong(builder, missionStartPointLong);
    ISRCollection_Ingest.AddMissionStartPointLat(builder, missionStartPointLat);
    ISRCollection_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    ISRCollection_Ingest.AddOrigin(builder, originOffset);
    ISRCollection_Ingest.AddSource(builder, sourceOffset);
    ISRCollection_Ingest.AddUpdatedBy(builder, updatedByOffset);
    ISRCollection_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    ISRCollection_Ingest.AddCreatedBy(builder, createdByOffset);
    ISRCollection_Ingest.AddCreatedAt(builder, createdAtOffset);
    ISRCollection_Ingest.AddTaskings(builder, taskingsOffset);
    ISRCollection_Ingest.AddTransit(builder, transitOffset);
    ISRCollection_Ingest.AddCollectionRequirements(builder, collectionRequirementsOffset);
    ISRCollection_Ingest.AddMissionSubRegion(builder, missionSubRegionOffset);
    ISRCollection_Ingest.AddMissionRegion(builder, missionRegionOffset);
    ISRCollection_Ingest.AddMissionCountry(builder, missionCountryOffset);
    ISRCollection_Ingest.AddMissionSyncMatrixBin(builder, missionSyncMatrixBinOffset);
    ISRCollection_Ingest.AddMissionJoa(builder, missionJoaOffset);
    ISRCollection_Ingest.AddMissionCollectionArea(builder, missionCollectionAreaOffset);
    ISRCollection_Ingest.AddMissionEmphasis(builder, missionEmphasisOffset);
    ISRCollection_Ingest.AddMissionSupportedUnit(builder, missionSupportedUnitOffset);
    ISRCollection_Ingest.AddMissionPriority(builder, missionPriority);
    ISRCollection_Ingest.AddMissionOperation(builder, missionOperationOffset);
    ISRCollection_Ingest.AddMissionRole(builder, missionRoleOffset);
    ISRCollection_Ingest.AddMissionSecondarySubCategory(builder, missionSecondarySubCategoryOffset);
    ISRCollection_Ingest.AddMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDisciplineOffset);
    ISRCollection_Ingest.AddMissionPrimarySubCategory(builder, missionPrimarySubCategoryOffset);
    ISRCollection_Ingest.AddMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDisciplineOffset);
    ISRCollection_Ingest.AddMissionAOR(builder, missionAOROffset);
    ISRCollection_Ingest.AddMissionId(builder, missionIdOffset);
    ISRCollection_Ingest.AddName(builder, nameOffset);
    ISRCollection_Ingest.AddIdexVersion(builder, idexVersion);
    ISRCollection_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    ISRCollection_Ingest.AddId(builder, idOffset);
    ISRCollection_Ingest.AddDataMode(builder, dataMode);
    return ISRCollection_Ingest.EndISRCollection_Ingest(builder);
  }

  public static void StartISRCollection_Ingest(FlatBufferBuilder builder) { builder.StartTable(34); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdexVersion(FlatBufferBuilder builder, int idexVersion) { builder.AddInt(2, idexVersion, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddMissionId(FlatBufferBuilder builder, StringOffset missionIdOffset) { builder.AddOffset(4, missionIdOffset.Value, 0); }
  public static void AddMissionAOR(FlatBufferBuilder builder, StringOffset missionAOROffset) { builder.AddOffset(5, missionAOROffset.Value, 0); }
  public static void AddMissionPrimaryIntelDiscipline(FlatBufferBuilder builder, StringOffset missionPrimaryIntelDisciplineOffset) { builder.AddOffset(6, missionPrimaryIntelDisciplineOffset.Value, 0); }
  public static void AddMissionPrimarySubCategory(FlatBufferBuilder builder, StringOffset missionPrimarySubCategoryOffset) { builder.AddOffset(7, missionPrimarySubCategoryOffset.Value, 0); }
  public static void AddMissionSecondaryIntelDiscipline(FlatBufferBuilder builder, StringOffset missionSecondaryIntelDisciplineOffset) { builder.AddOffset(8, missionSecondaryIntelDisciplineOffset.Value, 0); }
  public static void AddMissionSecondarySubCategory(FlatBufferBuilder builder, StringOffset missionSecondarySubCategoryOffset) { builder.AddOffset(9, missionSecondarySubCategoryOffset.Value, 0); }
  public static void AddMissionRole(FlatBufferBuilder builder, StringOffset missionRoleOffset) { builder.AddOffset(10, missionRoleOffset.Value, 0); }
  public static void AddMissionOperation(FlatBufferBuilder builder, StringOffset missionOperationOffset) { builder.AddOffset(11, missionOperationOffset.Value, 0); }
  public static void AddMissionPriority(FlatBufferBuilder builder, int missionPriority) { builder.AddInt(12, missionPriority, 0); }
  public static void AddMissionSupportedUnit(FlatBufferBuilder builder, StringOffset missionSupportedUnitOffset) { builder.AddOffset(13, missionSupportedUnitOffset.Value, 0); }
  public static void AddMissionEmphasis(FlatBufferBuilder builder, StringOffset missionEmphasisOffset) { builder.AddOffset(14, missionEmphasisOffset.Value, 0); }
  public static void AddMissionStartPointLat(FlatBufferBuilder builder, double missionStartPointLat) { builder.AddDouble(15, missionStartPointLat, 0.0); }
  public static void AddMissionStartPointLong(FlatBufferBuilder builder, double missionStartPointLong) { builder.AddDouble(16, missionStartPointLong, 0.0); }
  public static void AddMissionCollectionArea(FlatBufferBuilder builder, StringOffset missionCollectionAreaOffset) { builder.AddOffset(17, missionCollectionAreaOffset.Value, 0); }
  public static void AddMissionJoa(FlatBufferBuilder builder, StringOffset missionJoaOffset) { builder.AddOffset(18, missionJoaOffset.Value, 0); }
  public static void AddMissionSyncMatrixBin(FlatBufferBuilder builder, StringOffset missionSyncMatrixBinOffset) { builder.AddOffset(19, missionSyncMatrixBinOffset.Value, 0); }
  public static void AddMissionCountry(FlatBufferBuilder builder, StringOffset missionCountryOffset) { builder.AddOffset(20, missionCountryOffset.Value, 0); }
  public static void AddMissionRegion(FlatBufferBuilder builder, StringOffset missionRegionOffset) { builder.AddOffset(21, missionRegionOffset.Value, 0); }
  public static void AddMissionSubRegion(FlatBufferBuilder builder, StringOffset missionSubRegionOffset) { builder.AddOffset(22, missionSubRegionOffset.Value, 0); }
  public static void AddCollectionRequirements(FlatBufferBuilder builder, VectorOffset collectionRequirementsOffset) { builder.AddOffset(23, collectionRequirementsOffset.Value, 0); }
  public static VectorOffset CreateCollectionRequirementsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCollectionRequirementsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectionRequirementsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectionRequirementsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCollectionRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransit(FlatBufferBuilder builder, VectorOffset transitOffset) { builder.AddOffset(24, transitOffset.Value, 0); }
  public static VectorOffset CreateTransitVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransitVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransitVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransitVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTransitVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTaskings(FlatBufferBuilder builder, VectorOffset taskingsOffset) { builder.AddOffset(25, taskingsOffset.Value, 0); }
  public static VectorOffset CreateTaskingsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTaskingsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskingsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTaskingsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTaskingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(26, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(27, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(28, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(29, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(30, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(31, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, ISRCollection_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(32, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(33, origNetworkOffset.Value, 0); }
  public static Offset<ISRCollection_Ingest> EndISRCollection_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollection_Ingest>(o);
  }
  public static void FinishISRCollection_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollection_Ingest> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollection_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollection_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollection_IngestT UnPack() {
    var _o = new ISRCollection_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollection_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdexVersion = this.IdexVersion;
    _o.Name = this.Name;
    _o.MissionId = this.MissionId;
    _o.MissionAOR = this.MissionAOR;
    _o.MissionPrimaryIntelDiscipline = this.MissionPrimaryIntelDiscipline;
    _o.MissionPrimarySubCategory = this.MissionPrimarySubCategory;
    _o.MissionSecondaryIntelDiscipline = this.MissionSecondaryIntelDiscipline;
    _o.MissionSecondarySubCategory = this.MissionSecondarySubCategory;
    _o.MissionRole = this.MissionRole;
    _o.MissionOperation = this.MissionOperation;
    _o.MissionPriority = this.MissionPriority;
    _o.MissionSupportedUnit = this.MissionSupportedUnit;
    _o.MissionEmphasis = this.MissionEmphasis;
    _o.MissionStartPointLat = this.MissionStartPointLat;
    _o.MissionStartPointLong = this.MissionStartPointLong;
    _o.MissionCollectionArea = this.MissionCollectionArea;
    _o.MissionJoa = this.MissionJoa;
    _o.MissionSyncMatrixBin = this.MissionSyncMatrixBin;
    _o.MissionCountry = this.MissionCountry;
    _o.MissionRegion = this.MissionRegion;
    _o.MissionSubRegion = this.MissionSubRegion;
    _o.CollectionRequirements = new List<string>();
    for (var _j = 0; _j < this.CollectionRequirementsLength; ++_j) {_o.CollectionRequirements.Add(this.CollectionRequirements(_j));}
    _o.Transit = new List<string>();
    for (var _j = 0; _j < this.TransitLength; ++_j) {_o.Transit.Add(this.Transit(_j));}
    _o.Taskings = new List<string>();
    for (var _j = 0; _j < this.TaskingsLength; ++_j) {_o.Taskings.Add(this.Taskings(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<ISRCollection_Ingest> Pack(FlatBufferBuilder builder, ISRCollection_IngestT _o) {
    if (_o == null) return default(Offset<ISRCollection_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _missionId = _o.MissionId == null ? default(StringOffset) : builder.CreateString(_o.MissionId);
    var _missionAOR = _o.MissionAOR == null ? default(StringOffset) : builder.CreateString(_o.MissionAOR);
    var _missionPrimaryIntelDiscipline = _o.MissionPrimaryIntelDiscipline == null ? default(StringOffset) : builder.CreateString(_o.MissionPrimaryIntelDiscipline);
    var _missionPrimarySubCategory = _o.MissionPrimarySubCategory == null ? default(StringOffset) : builder.CreateString(_o.MissionPrimarySubCategory);
    var _missionSecondaryIntelDiscipline = _o.MissionSecondaryIntelDiscipline == null ? default(StringOffset) : builder.CreateString(_o.MissionSecondaryIntelDiscipline);
    var _missionSecondarySubCategory = _o.MissionSecondarySubCategory == null ? default(StringOffset) : builder.CreateString(_o.MissionSecondarySubCategory);
    var _missionRole = _o.MissionRole == null ? default(StringOffset) : builder.CreateString(_o.MissionRole);
    var _missionOperation = _o.MissionOperation == null ? default(StringOffset) : builder.CreateString(_o.MissionOperation);
    var _missionSupportedUnit = _o.MissionSupportedUnit == null ? default(StringOffset) : builder.CreateString(_o.MissionSupportedUnit);
    var _missionEmphasis = _o.MissionEmphasis == null ? default(StringOffset) : builder.CreateString(_o.MissionEmphasis);
    var _missionCollectionArea = _o.MissionCollectionArea == null ? default(StringOffset) : builder.CreateString(_o.MissionCollectionArea);
    var _missionJoa = _o.MissionJoa == null ? default(StringOffset) : builder.CreateString(_o.MissionJoa);
    var _missionSyncMatrixBin = _o.MissionSyncMatrixBin == null ? default(StringOffset) : builder.CreateString(_o.MissionSyncMatrixBin);
    var _missionCountry = _o.MissionCountry == null ? default(StringOffset) : builder.CreateString(_o.MissionCountry);
    var _missionRegion = _o.MissionRegion == null ? default(StringOffset) : builder.CreateString(_o.MissionRegion);
    var _missionSubRegion = _o.MissionSubRegion == null ? default(StringOffset) : builder.CreateString(_o.MissionSubRegion);
    var _collectionRequirements = default(VectorOffset);
    if (_o.CollectionRequirements != null) {
      var __collectionRequirements = new StringOffset[_o.CollectionRequirements.Count];
      for (var _j = 0; _j < __collectionRequirements.Length; ++_j) { __collectionRequirements[_j] = builder.CreateString(_o.CollectionRequirements[_j]); }
      _collectionRequirements = CreateCollectionRequirementsVector(builder, __collectionRequirements);
    }
    var _transit = default(VectorOffset);
    if (_o.Transit != null) {
      var __transit = new StringOffset[_o.Transit.Count];
      for (var _j = 0; _j < __transit.Length; ++_j) { __transit[_j] = builder.CreateString(_o.Transit[_j]); }
      _transit = CreateTransitVector(builder, __transit);
    }
    var _taskings = default(VectorOffset);
    if (_o.Taskings != null) {
      var __taskings = new StringOffset[_o.Taskings.Count];
      for (var _j = 0; _j < __taskings.Length; ++_j) { __taskings[_j] = builder.CreateString(_o.Taskings[_j]); }
      _taskings = CreateTaskingsVector(builder, __taskings);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateISRCollection_Ingest(
      builder,
      _id,
      _classificationMarking,
      _o.IdexVersion,
      _name,
      _missionId,
      _missionAOR,
      _missionPrimaryIntelDiscipline,
      _missionPrimarySubCategory,
      _missionSecondaryIntelDiscipline,
      _missionSecondarySubCategory,
      _missionRole,
      _missionOperation,
      _o.MissionPriority,
      _missionSupportedUnit,
      _missionEmphasis,
      _o.MissionStartPointLat,
      _o.MissionStartPointLong,
      _missionCollectionArea,
      _missionJoa,
      _missionSyncMatrixBin,
      _missionCountry,
      _missionRegion,
      _missionSubRegion,
      _collectionRequirements,
      _transit,
      _taskings,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class ISRCollection_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public int IdexVersion { get; set; }
  public string Name { get; set; }
  public string MissionId { get; set; }
  public string MissionAOR { get; set; }
  public string MissionPrimaryIntelDiscipline { get; set; }
  public string MissionPrimarySubCategory { get; set; }
  public string MissionSecondaryIntelDiscipline { get; set; }
  public string MissionSecondarySubCategory { get; set; }
  public string MissionRole { get; set; }
  public string MissionOperation { get; set; }
  public int MissionPriority { get; set; }
  public string MissionSupportedUnit { get; set; }
  public string MissionEmphasis { get; set; }
  public double MissionStartPointLat { get; set; }
  public double MissionStartPointLong { get; set; }
  public string MissionCollectionArea { get; set; }
  public string MissionJoa { get; set; }
  public string MissionSyncMatrixBin { get; set; }
  public string MissionCountry { get; set; }
  public string MissionRegion { get; set; }
  public string MissionSubRegion { get; set; }
  public List<string> CollectionRequirements { get; set; }
  public List<string> Transit { get; set; }
  public List<string> Taskings { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public ISRCollection_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public ISRCollection_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdexVersion = 0;
    this.Name = null;
    this.MissionId = null;
    this.MissionAOR = null;
    this.MissionPrimaryIntelDiscipline = null;
    this.MissionPrimarySubCategory = null;
    this.MissionSecondaryIntelDiscipline = null;
    this.MissionSecondarySubCategory = null;
    this.MissionRole = null;
    this.MissionOperation = null;
    this.MissionPriority = 0;
    this.MissionSupportedUnit = null;
    this.MissionEmphasis = null;
    this.MissionStartPointLat = 0.0;
    this.MissionStartPointLong = 0.0;
    this.MissionCollectionArea = null;
    this.MissionJoa = null;
    this.MissionSyncMatrixBin = null;
    this.MissionCountry = null;
    this.MissionRegion = null;
    this.MissionSubRegion = null;
    this.CollectionRequirements = null;
    this.Transit = null;
    this.Taskings = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = ISRCollection_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static ISRCollection_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollection_Ingest.GetRootAsISRCollection_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollection_Ingest.FinishISRCollection_IngestBuffer(fbb, ISRCollection_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollection_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 8 /*IdexVersion*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*MissionId*/, false)
      && verifier.VerifyString(tablePos, 14 /*MissionAOR*/, false)
      && verifier.VerifyString(tablePos, 16 /*MissionPrimaryIntelDiscipline*/, false)
      && verifier.VerifyString(tablePos, 18 /*MissionPrimarySubCategory*/, false)
      && verifier.VerifyString(tablePos, 20 /*MissionSecondaryIntelDiscipline*/, false)
      && verifier.VerifyString(tablePos, 22 /*MissionSecondarySubCategory*/, false)
      && verifier.VerifyString(tablePos, 24 /*MissionRole*/, false)
      && verifier.VerifyString(tablePos, 26 /*MissionOperation*/, false)
      && verifier.VerifyField(tablePos, 28 /*MissionPriority*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*MissionSupportedUnit*/, false)
      && verifier.VerifyString(tablePos, 32 /*MissionEmphasis*/, false)
      && verifier.VerifyField(tablePos, 34 /*MissionStartPointLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*MissionStartPointLong*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 38 /*MissionCollectionArea*/, false)
      && verifier.VerifyString(tablePos, 40 /*MissionJoa*/, false)
      && verifier.VerifyString(tablePos, 42 /*MissionSyncMatrixBin*/, false)
      && verifier.VerifyString(tablePos, 44 /*MissionCountry*/, false)
      && verifier.VerifyString(tablePos, 46 /*MissionRegion*/, false)
      && verifier.VerifyString(tablePos, 48 /*MissionSubRegion*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*CollectionRequirements*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*Transit*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*Taskings*/, false)
      && verifier.VerifyString(tablePos, 56 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 58 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 60 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 62 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 64 /*Source*/, false)
      && verifier.VerifyString(tablePos, 66 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 68 /*DataMode*/, 1 /*ISRCollection_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 70 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
