// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
public struct AirLoadPlan_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirLoadPlan_Full GetRootAsAirLoadPlan_Full(ByteBuffer _bb) { return GetRootAsAirLoadPlan_Full(_bb, new AirLoadPlan_Full()); }
  public static AirLoadPlan_Full GetRootAsAirLoadPlan_Full(ByteBuffer _bb, AirLoadPlan_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirLoadPlan_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRL"); }
  public static bool VerifyAirLoadPlan_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRL", false, AirLoadPlan_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirLoadPlan_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string ExternalId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(8); }
  /// The UDL ID of the mission this record is associated with.
  /// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdMission { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdMissionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdMissionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdMissionArray() { return __p.__vector_as_array<byte>(10); }
  /// The mission number of the mission supporting this load plan.
  /// Example: /// Example: AJM123456123
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string MissionNumber { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionNumberBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMissionNumberBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMissionNumberArray() { return __p.__vector_as_array<byte>(12); }
  /// The UDL ID of the aircraft sortie this record is associated with.
  /// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSortie { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSortieBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSortieBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSortieArray() { return __p.__vector_as_array<byte>(14); }
  /// The leg number of the mission supporting this load plan.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  public int LegNum { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The call sign of the mission supporting this load plan.
  /// Example: /// Example: RCH1234
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CallSign { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(18); }
  /// The tail number of the aircraft supporting this load plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TailNumber { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTailNumberBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTailNumberBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTailNumberArray() { return __p.__vector_as_array<byte>(20); }
  /// The Model Design Series designation of the aircraft supporting this load plan.
  /// Example: /// Example: C17A
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string AircraftMDS { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftMDSBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAircraftMDSBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAircraftMDSArray() { return __p.__vector_as_array<byte>(22); }
  /// The departure International Civil Organization (ICAO) code of the departure airfield.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string DepICAO { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepICAOBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDepICAOBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDepICAOArray() { return __p.__vector_as_array<byte>(24); }
  /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DepAirfield { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepAirfieldBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDepAirfieldBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDepAirfieldArray() { return __p.__vector_as_array<byte>(26); }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EstDepTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstDepTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEstDepTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEstDepTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// The arrival International Civil Organization (ICAO) code of the landing airfield.
  /// Example: /// Example: ETAR
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ArrICAO { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrICAOBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetArrICAOBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetArrICAOArray() { return __p.__vector_as_array<byte>(30); }
  /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ArrAirfield { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrAirfieldBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetArrAirfieldBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetArrAirfieldArray() { return __p.__vector_as_array<byte>(32); }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string EstArrTime { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstArrTimeBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetEstArrTimeBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetEstArrTimeArray() { return __p.__vector_as_array<byte>(34); }
  /// The number of crew members on the aircraft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int CrewSize { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string CargoConfig { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCargoConfigBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCargoConfigBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCargoConfigArray() { return __p.__vector_as_array<byte>(38); }
  /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: Standard
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string EquipConfig { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEquipConfigBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEquipConfigBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEquipConfigArray() { return __p.__vector_as_array<byte>(40); }
  /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: ER
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string TankConfig { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTankConfigBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTankConfigBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTankConfigArray() { return __p.__vector_as_array<byte>(42); }
  /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double BasicWeight { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double BasicMoment { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The weight of usable fuel on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double FuelWeight { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double FuelMoment { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated weight of usable fuel upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double EstLandingFuelWeight { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double EstLandingFuelMoment { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The basic weight of the aircraft including passengers and equipment, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double OperatingWeight { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double OperatingMoment { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The weight of the cargo on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double CargoWeight { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double CargoMoment { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double ZeroFuelWeight { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double ZeroFuelMoment { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 39.5
  /// Constraints: No constraints specified.
  public double ZeroFuelCG { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double GrossWeight { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double GrossMoment { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.8
  /// Constraints: No constraints specified.
  public double GrossCG { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The gross weight of the aircraft upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double LandingWeight { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  public double LandingMoment { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.2
  /// Constraints: No constraints specified.
  public double LandingCG { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int CargoBayFSMin { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int CargoBayFSMax { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Width of the cargo bay, in meters.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  public double CargoBayWidth { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(88); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(90); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(92); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(94); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(96); }
  /// Source of the data.
  /// Example: /// Example: source
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(98); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(100); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(102); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AirLoadPlan_Full_dataMode_Enum DataMode { get { int o = __p.__offset(104); return o != 0 ? (AirLoadPlan_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AirLoadPlan_Full_dataMode_Enum.REAL; } }

  public static Offset<AirLoadPlan_Full> CreateAirLoadPlan_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset idMissionOffset = default(StringOffset),
      StringOffset missionNumberOffset = default(StringOffset),
      StringOffset idSortieOffset = default(StringOffset),
      int legNum = 0,
      StringOffset callSignOffset = default(StringOffset),
      StringOffset tailNumberOffset = default(StringOffset),
      StringOffset aircraftMDSOffset = default(StringOffset),
      StringOffset depICAOOffset = default(StringOffset),
      StringOffset depAirfieldOffset = default(StringOffset),
      StringOffset estDepTimeOffset = default(StringOffset),
      StringOffset arrICAOOffset = default(StringOffset),
      StringOffset arrAirfieldOffset = default(StringOffset),
      StringOffset estArrTimeOffset = default(StringOffset),
      int crewSize = 0,
      StringOffset cargoConfigOffset = default(StringOffset),
      StringOffset equipConfigOffset = default(StringOffset),
      StringOffset tankConfigOffset = default(StringOffset),
      double basicWeight = 0.0,
      double basicMoment = 0.0,
      double fuelWeight = 0.0,
      double fuelMoment = 0.0,
      double estLandingFuelWeight = 0.0,
      double estLandingFuelMoment = 0.0,
      double operatingWeight = 0.0,
      double operatingMoment = 0.0,
      double cargoWeight = 0.0,
      double cargoMoment = 0.0,
      double zeroFuelWeight = 0.0,
      double zeroFuelMoment = 0.0,
      double zeroFuelCG = 0.0,
      double grossWeight = 0.0,
      double grossMoment = 0.0,
      double grossCG = 0.0,
      double landingWeight = 0.0,
      double landingMoment = 0.0,
      double landingCG = 0.0,
      int cargoBayFSMin = 0,
      int cargoBayFSMax = 0,
      double cargoBayWidth = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AirLoadPlan_Full_dataMode_Enum dataMode = AirLoadPlan_Full_dataMode_Enum.REAL) {
    builder.StartTable(51);
    AirLoadPlan_Full.AddCargoBayWidth(builder, cargoBayWidth);
    AirLoadPlan_Full.AddLandingCG(builder, landingCG);
    AirLoadPlan_Full.AddLandingMoment(builder, landingMoment);
    AirLoadPlan_Full.AddLandingWeight(builder, landingWeight);
    AirLoadPlan_Full.AddGrossCG(builder, grossCG);
    AirLoadPlan_Full.AddGrossMoment(builder, grossMoment);
    AirLoadPlan_Full.AddGrossWeight(builder, grossWeight);
    AirLoadPlan_Full.AddZeroFuelCG(builder, zeroFuelCG);
    AirLoadPlan_Full.AddZeroFuelMoment(builder, zeroFuelMoment);
    AirLoadPlan_Full.AddZeroFuelWeight(builder, zeroFuelWeight);
    AirLoadPlan_Full.AddCargoMoment(builder, cargoMoment);
    AirLoadPlan_Full.AddCargoWeight(builder, cargoWeight);
    AirLoadPlan_Full.AddOperatingMoment(builder, operatingMoment);
    AirLoadPlan_Full.AddOperatingWeight(builder, operatingWeight);
    AirLoadPlan_Full.AddEstLandingFuelMoment(builder, estLandingFuelMoment);
    AirLoadPlan_Full.AddEstLandingFuelWeight(builder, estLandingFuelWeight);
    AirLoadPlan_Full.AddFuelMoment(builder, fuelMoment);
    AirLoadPlan_Full.AddFuelWeight(builder, fuelWeight);
    AirLoadPlan_Full.AddBasicMoment(builder, basicMoment);
    AirLoadPlan_Full.AddBasicWeight(builder, basicWeight);
    AirLoadPlan_Full.AddOrigNetwork(builder, origNetworkOffset);
    AirLoadPlan_Full.AddOrigin(builder, originOffset);
    AirLoadPlan_Full.AddSource(builder, sourceOffset);
    AirLoadPlan_Full.AddSourceDL(builder, sourceDLOffset);
    AirLoadPlan_Full.AddUpdatedBy(builder, updatedByOffset);
    AirLoadPlan_Full.AddUpdatedAt(builder, updatedAtOffset);
    AirLoadPlan_Full.AddCreatedBy(builder, createdByOffset);
    AirLoadPlan_Full.AddCreatedAt(builder, createdAtOffset);
    AirLoadPlan_Full.AddCargoBayFSMax(builder, cargoBayFSMax);
    AirLoadPlan_Full.AddCargoBayFSMin(builder, cargoBayFSMin);
    AirLoadPlan_Full.AddTankConfig(builder, tankConfigOffset);
    AirLoadPlan_Full.AddEquipConfig(builder, equipConfigOffset);
    AirLoadPlan_Full.AddCargoConfig(builder, cargoConfigOffset);
    AirLoadPlan_Full.AddCrewSize(builder, crewSize);
    AirLoadPlan_Full.AddEstArrTime(builder, estArrTimeOffset);
    AirLoadPlan_Full.AddArrAirfield(builder, arrAirfieldOffset);
    AirLoadPlan_Full.AddArrICAO(builder, arrICAOOffset);
    AirLoadPlan_Full.AddEstDepTime(builder, estDepTimeOffset);
    AirLoadPlan_Full.AddDepAirfield(builder, depAirfieldOffset);
    AirLoadPlan_Full.AddDepICAO(builder, depICAOOffset);
    AirLoadPlan_Full.AddAircraftMDS(builder, aircraftMDSOffset);
    AirLoadPlan_Full.AddTailNumber(builder, tailNumberOffset);
    AirLoadPlan_Full.AddCallSign(builder, callSignOffset);
    AirLoadPlan_Full.AddLegNum(builder, legNum);
    AirLoadPlan_Full.AddIdSortie(builder, idSortieOffset);
    AirLoadPlan_Full.AddMissionNumber(builder, missionNumberOffset);
    AirLoadPlan_Full.AddIdMission(builder, idMissionOffset);
    AirLoadPlan_Full.AddExternalId(builder, externalIdOffset);
    AirLoadPlan_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    AirLoadPlan_Full.AddId(builder, idOffset);
    AirLoadPlan_Full.AddDataMode(builder, dataMode);
    return AirLoadPlan_Full.EndAirLoadPlan_Full(builder);
  }

  public static void StartAirLoadPlan_Full(FlatBufferBuilder builder) { builder.StartTable(51); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(2, externalIdOffset.Value, 0); }
  public static void AddIdMission(FlatBufferBuilder builder, StringOffset idMissionOffset) { builder.AddOffset(3, idMissionOffset.Value, 0); }
  public static void AddMissionNumber(FlatBufferBuilder builder, StringOffset missionNumberOffset) { builder.AddOffset(4, missionNumberOffset.Value, 0); }
  public static void AddIdSortie(FlatBufferBuilder builder, StringOffset idSortieOffset) { builder.AddOffset(5, idSortieOffset.Value, 0); }
  public static void AddLegNum(FlatBufferBuilder builder, int legNum) { builder.AddInt(6, legNum, 0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(7, callSignOffset.Value, 0); }
  public static void AddTailNumber(FlatBufferBuilder builder, StringOffset tailNumberOffset) { builder.AddOffset(8, tailNumberOffset.Value, 0); }
  public static void AddAircraftMDS(FlatBufferBuilder builder, StringOffset aircraftMDSOffset) { builder.AddOffset(9, aircraftMDSOffset.Value, 0); }
  public static void AddDepICAO(FlatBufferBuilder builder, StringOffset depICAOOffset) { builder.AddOffset(10, depICAOOffset.Value, 0); }
  public static void AddDepAirfield(FlatBufferBuilder builder, StringOffset depAirfieldOffset) { builder.AddOffset(11, depAirfieldOffset.Value, 0); }
  public static void AddEstDepTime(FlatBufferBuilder builder, StringOffset estDepTimeOffset) { builder.AddOffset(12, estDepTimeOffset.Value, 0); }
  public static void AddArrICAO(FlatBufferBuilder builder, StringOffset arrICAOOffset) { builder.AddOffset(13, arrICAOOffset.Value, 0); }
  public static void AddArrAirfield(FlatBufferBuilder builder, StringOffset arrAirfieldOffset) { builder.AddOffset(14, arrAirfieldOffset.Value, 0); }
  public static void AddEstArrTime(FlatBufferBuilder builder, StringOffset estArrTimeOffset) { builder.AddOffset(15, estArrTimeOffset.Value, 0); }
  public static void AddCrewSize(FlatBufferBuilder builder, int crewSize) { builder.AddInt(16, crewSize, 0); }
  public static void AddCargoConfig(FlatBufferBuilder builder, StringOffset cargoConfigOffset) { builder.AddOffset(17, cargoConfigOffset.Value, 0); }
  public static void AddEquipConfig(FlatBufferBuilder builder, StringOffset equipConfigOffset) { builder.AddOffset(18, equipConfigOffset.Value, 0); }
  public static void AddTankConfig(FlatBufferBuilder builder, StringOffset tankConfigOffset) { builder.AddOffset(19, tankConfigOffset.Value, 0); }
  public static void AddBasicWeight(FlatBufferBuilder builder, double basicWeight) { builder.AddDouble(20, basicWeight, 0.0); }
  public static void AddBasicMoment(FlatBufferBuilder builder, double basicMoment) { builder.AddDouble(21, basicMoment, 0.0); }
  public static void AddFuelWeight(FlatBufferBuilder builder, double fuelWeight) { builder.AddDouble(22, fuelWeight, 0.0); }
  public static void AddFuelMoment(FlatBufferBuilder builder, double fuelMoment) { builder.AddDouble(23, fuelMoment, 0.0); }
  public static void AddEstLandingFuelWeight(FlatBufferBuilder builder, double estLandingFuelWeight) { builder.AddDouble(24, estLandingFuelWeight, 0.0); }
  public static void AddEstLandingFuelMoment(FlatBufferBuilder builder, double estLandingFuelMoment) { builder.AddDouble(25, estLandingFuelMoment, 0.0); }
  public static void AddOperatingWeight(FlatBufferBuilder builder, double operatingWeight) { builder.AddDouble(26, operatingWeight, 0.0); }
  public static void AddOperatingMoment(FlatBufferBuilder builder, double operatingMoment) { builder.AddDouble(27, operatingMoment, 0.0); }
  public static void AddCargoWeight(FlatBufferBuilder builder, double cargoWeight) { builder.AddDouble(28, cargoWeight, 0.0); }
  public static void AddCargoMoment(FlatBufferBuilder builder, double cargoMoment) { builder.AddDouble(29, cargoMoment, 0.0); }
  public static void AddZeroFuelWeight(FlatBufferBuilder builder, double zeroFuelWeight) { builder.AddDouble(30, zeroFuelWeight, 0.0); }
  public static void AddZeroFuelMoment(FlatBufferBuilder builder, double zeroFuelMoment) { builder.AddDouble(31, zeroFuelMoment, 0.0); }
  public static void AddZeroFuelCG(FlatBufferBuilder builder, double zeroFuelCG) { builder.AddDouble(32, zeroFuelCG, 0.0); }
  public static void AddGrossWeight(FlatBufferBuilder builder, double grossWeight) { builder.AddDouble(33, grossWeight, 0.0); }
  public static void AddGrossMoment(FlatBufferBuilder builder, double grossMoment) { builder.AddDouble(34, grossMoment, 0.0); }
  public static void AddGrossCG(FlatBufferBuilder builder, double grossCG) { builder.AddDouble(35, grossCG, 0.0); }
  public static void AddLandingWeight(FlatBufferBuilder builder, double landingWeight) { builder.AddDouble(36, landingWeight, 0.0); }
  public static void AddLandingMoment(FlatBufferBuilder builder, double landingMoment) { builder.AddDouble(37, landingMoment, 0.0); }
  public static void AddLandingCG(FlatBufferBuilder builder, double landingCG) { builder.AddDouble(38, landingCG, 0.0); }
  public static void AddCargoBayFSMin(FlatBufferBuilder builder, int cargoBayFSMin) { builder.AddInt(39, cargoBayFSMin, 0); }
  public static void AddCargoBayFSMax(FlatBufferBuilder builder, int cargoBayFSMax) { builder.AddInt(40, cargoBayFSMax, 0); }
  public static void AddCargoBayWidth(FlatBufferBuilder builder, double cargoBayWidth) { builder.AddDouble(41, cargoBayWidth, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(42, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(43, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(44, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(45, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(46, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(47, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(48, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(49, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AirLoadPlan_Full_dataMode_Enum dataMode) { builder.AddSbyte(50, (sbyte)dataMode, 0); }
  public static Offset<AirLoadPlan_Full> EndAirLoadPlan_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirLoadPlan_Full>(o);
  }
  public static void FinishAirLoadPlan_FullBuffer(FlatBufferBuilder builder, Offset<AirLoadPlan_Full> offset) { builder.Finish(offset.Value, "AIRL"); }
  public static void FinishSizePrefixedAirLoadPlan_FullBuffer(FlatBufferBuilder builder, Offset<AirLoadPlan_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRL"); }
  public AirLoadPlan_FullT UnPack() {
    var _o = new AirLoadPlan_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirLoadPlan_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ExternalId = this.ExternalId;
    _o.IdMission = this.IdMission;
    _o.MissionNumber = this.MissionNumber;
    _o.IdSortie = this.IdSortie;
    _o.LegNum = this.LegNum;
    _o.CallSign = this.CallSign;
    _o.TailNumber = this.TailNumber;
    _o.AircraftMDS = this.AircraftMDS;
    _o.DepICAO = this.DepICAO;
    _o.DepAirfield = this.DepAirfield;
    _o.EstDepTime = this.EstDepTime;
    _o.ArrICAO = this.ArrICAO;
    _o.ArrAirfield = this.ArrAirfield;
    _o.EstArrTime = this.EstArrTime;
    _o.CrewSize = this.CrewSize;
    _o.CargoConfig = this.CargoConfig;
    _o.EquipConfig = this.EquipConfig;
    _o.TankConfig = this.TankConfig;
    _o.BasicWeight = this.BasicWeight;
    _o.BasicMoment = this.BasicMoment;
    _o.FuelWeight = this.FuelWeight;
    _o.FuelMoment = this.FuelMoment;
    _o.EstLandingFuelWeight = this.EstLandingFuelWeight;
    _o.EstLandingFuelMoment = this.EstLandingFuelMoment;
    _o.OperatingWeight = this.OperatingWeight;
    _o.OperatingMoment = this.OperatingMoment;
    _o.CargoWeight = this.CargoWeight;
    _o.CargoMoment = this.CargoMoment;
    _o.ZeroFuelWeight = this.ZeroFuelWeight;
    _o.ZeroFuelMoment = this.ZeroFuelMoment;
    _o.ZeroFuelCG = this.ZeroFuelCG;
    _o.GrossWeight = this.GrossWeight;
    _o.GrossMoment = this.GrossMoment;
    _o.GrossCG = this.GrossCG;
    _o.LandingWeight = this.LandingWeight;
    _o.LandingMoment = this.LandingMoment;
    _o.LandingCG = this.LandingCG;
    _o.CargoBayFSMin = this.CargoBayFSMin;
    _o.CargoBayFSMax = this.CargoBayFSMax;
    _o.CargoBayWidth = this.CargoBayWidth;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AirLoadPlan_Full> Pack(FlatBufferBuilder builder, AirLoadPlan_FullT _o) {
    if (_o == null) return default(Offset<AirLoadPlan_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _idMission = _o.IdMission == null ? default(StringOffset) : builder.CreateString(_o.IdMission);
    var _missionNumber = _o.MissionNumber == null ? default(StringOffset) : builder.CreateString(_o.MissionNumber);
    var _idSortie = _o.IdSortie == null ? default(StringOffset) : builder.CreateString(_o.IdSortie);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _tailNumber = _o.TailNumber == null ? default(StringOffset) : builder.CreateString(_o.TailNumber);
    var _aircraftMDS = _o.AircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.AircraftMDS);
    var _depICAO = _o.DepICAO == null ? default(StringOffset) : builder.CreateString(_o.DepICAO);
    var _depAirfield = _o.DepAirfield == null ? default(StringOffset) : builder.CreateString(_o.DepAirfield);
    var _estDepTime = _o.EstDepTime == null ? default(StringOffset) : builder.CreateString(_o.EstDepTime);
    var _arrICAO = _o.ArrICAO == null ? default(StringOffset) : builder.CreateString(_o.ArrICAO);
    var _arrAirfield = _o.ArrAirfield == null ? default(StringOffset) : builder.CreateString(_o.ArrAirfield);
    var _estArrTime = _o.EstArrTime == null ? default(StringOffset) : builder.CreateString(_o.EstArrTime);
    var _cargoConfig = _o.CargoConfig == null ? default(StringOffset) : builder.CreateString(_o.CargoConfig);
    var _equipConfig = _o.EquipConfig == null ? default(StringOffset) : builder.CreateString(_o.EquipConfig);
    var _tankConfig = _o.TankConfig == null ? default(StringOffset) : builder.CreateString(_o.TankConfig);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAirLoadPlan_Full(
      builder,
      _id,
      _classificationMarking,
      _externalId,
      _idMission,
      _missionNumber,
      _idSortie,
      _o.LegNum,
      _callSign,
      _tailNumber,
      _aircraftMDS,
      _depICAO,
      _depAirfield,
      _estDepTime,
      _arrICAO,
      _arrAirfield,
      _estArrTime,
      _o.CrewSize,
      _cargoConfig,
      _equipConfig,
      _tankConfig,
      _o.BasicWeight,
      _o.BasicMoment,
      _o.FuelWeight,
      _o.FuelMoment,
      _o.EstLandingFuelWeight,
      _o.EstLandingFuelMoment,
      _o.OperatingWeight,
      _o.OperatingMoment,
      _o.CargoWeight,
      _o.CargoMoment,
      _o.ZeroFuelWeight,
      _o.ZeroFuelMoment,
      _o.ZeroFuelCG,
      _o.GrossWeight,
      _o.GrossMoment,
      _o.GrossCG,
      _o.LandingWeight,
      _o.LandingMoment,
      _o.LandingCG,
      _o.CargoBayFSMin,
      _o.CargoBayFSMax,
      _o.CargoBayWidth,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AirLoadPlan_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ExternalId { get; set; }
  public string IdMission { get; set; }
  public string MissionNumber { get; set; }
  public string IdSortie { get; set; }
  public int LegNum { get; set; }
  public string CallSign { get; set; }
  public string TailNumber { get; set; }
  public string AircraftMDS { get; set; }
  public string DepICAO { get; set; }
  public string DepAirfield { get; set; }
  public string EstDepTime { get; set; }
  public string ArrICAO { get; set; }
  public string ArrAirfield { get; set; }
  public string EstArrTime { get; set; }
  public int CrewSize { get; set; }
  public string CargoConfig { get; set; }
  public string EquipConfig { get; set; }
  public string TankConfig { get; set; }
  public double BasicWeight { get; set; }
  public double BasicMoment { get; set; }
  public double FuelWeight { get; set; }
  public double FuelMoment { get; set; }
  public double EstLandingFuelWeight { get; set; }
  public double EstLandingFuelMoment { get; set; }
  public double OperatingWeight { get; set; }
  public double OperatingMoment { get; set; }
  public double CargoWeight { get; set; }
  public double CargoMoment { get; set; }
  public double ZeroFuelWeight { get; set; }
  public double ZeroFuelMoment { get; set; }
  public double ZeroFuelCG { get; set; }
  public double GrossWeight { get; set; }
  public double GrossMoment { get; set; }
  public double GrossCG { get; set; }
  public double LandingWeight { get; set; }
  public double LandingMoment { get; set; }
  public double LandingCG { get; set; }
  public int CargoBayFSMin { get; set; }
  public int CargoBayFSMax { get; set; }
  public double CargoBayWidth { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AirLoadPlan_Full_dataMode_Enum DataMode { get; set; }

  public AirLoadPlan_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ExternalId = null;
    this.IdMission = null;
    this.MissionNumber = null;
    this.IdSortie = null;
    this.LegNum = 0;
    this.CallSign = null;
    this.TailNumber = null;
    this.AircraftMDS = null;
    this.DepICAO = null;
    this.DepAirfield = null;
    this.EstDepTime = null;
    this.ArrICAO = null;
    this.ArrAirfield = null;
    this.EstArrTime = null;
    this.CrewSize = 0;
    this.CargoConfig = null;
    this.EquipConfig = null;
    this.TankConfig = null;
    this.BasicWeight = 0.0;
    this.BasicMoment = 0.0;
    this.FuelWeight = 0.0;
    this.FuelMoment = 0.0;
    this.EstLandingFuelWeight = 0.0;
    this.EstLandingFuelMoment = 0.0;
    this.OperatingWeight = 0.0;
    this.OperatingMoment = 0.0;
    this.CargoWeight = 0.0;
    this.CargoMoment = 0.0;
    this.ZeroFuelWeight = 0.0;
    this.ZeroFuelMoment = 0.0;
    this.ZeroFuelCG = 0.0;
    this.GrossWeight = 0.0;
    this.GrossMoment = 0.0;
    this.GrossCG = 0.0;
    this.LandingWeight = 0.0;
    this.LandingMoment = 0.0;
    this.LandingCG = 0.0;
    this.CargoBayFSMin = 0;
    this.CargoBayFSMax = 0;
    this.CargoBayWidth = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AirLoadPlan_Full_dataMode_Enum.REAL;
  }
  public static AirLoadPlan_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirLoadPlan_Full.GetRootAsAirLoadPlan_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirLoadPlan_Full.FinishAirLoadPlan_FullBuffer(fbb, AirLoadPlan_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirLoadPlan_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdMission*/, false)
      && verifier.VerifyString(tablePos, 12 /*MissionNumber*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSortie*/, false)
      && verifier.VerifyField(tablePos, 16 /*LegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 20 /*TailNumber*/, false)
      && verifier.VerifyString(tablePos, 22 /*AircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 24 /*DepICAO*/, false)
      && verifier.VerifyString(tablePos, 26 /*DepAirfield*/, false)
      && verifier.VerifyString(tablePos, 28 /*EstDepTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*ArrICAO*/, false)
      && verifier.VerifyString(tablePos, 32 /*ArrAirfield*/, false)
      && verifier.VerifyString(tablePos, 34 /*EstArrTime*/, false)
      && verifier.VerifyField(tablePos, 36 /*CrewSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 38 /*CargoConfig*/, false)
      && verifier.VerifyString(tablePos, 40 /*EquipConfig*/, false)
      && verifier.VerifyString(tablePos, 42 /*TankConfig*/, false)
      && verifier.VerifyField(tablePos, 44 /*BasicWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*BasicMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*FuelWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*FuelMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*EstLandingFuelWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*EstLandingFuelMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*OperatingWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*OperatingMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*CargoWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*CargoMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*ZeroFuelWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*ZeroFuelMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*ZeroFuelCG*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*GrossWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*GrossMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*GrossCG*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*LandingWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*LandingMoment*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*LandingCG*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*CargoBayFSMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*CargoBayFSMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*CargoBayWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 88 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 90 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 92 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 94 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 96 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 98 /*Source*/, false)
      && verifier.VerifyString(tablePos, 100 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 102 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 104 /*DataMode*/, 1 /*AirLoadPlan_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
