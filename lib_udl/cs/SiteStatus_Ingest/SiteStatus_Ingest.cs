// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// No description available.
public struct SiteStatus_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SiteStatus_Ingest GetRootAsSiteStatus_Ingest(ByteBuffer _bb) { return GetRootAsSiteStatus_Ingest(_bb, new SiteStatus_Ingest()); }
  public static SiteStatus_Ingest GetRootAsSiteStatus_Ingest(ByteBuffer _bb, SiteStatus_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SiteStatus_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SITE"); }
  public static bool VerifySiteStatus_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SITE", false, SiteStatus_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SiteStatus_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SITESTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The ID of the site, if this status is associated with a fixed site or platform.
  /// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSite { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSiteBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSiteBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSiteArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
  /// Example: /// Example: ADOC
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SiteType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSiteTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSiteTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSiteTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// Alternate Identifier for a mobile or transportable platform provided by source.
  /// Example: /// Example: MOBILEALT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MobileAltId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMobileAltIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMobileAltIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMobileAltIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The POI (point of interest) ID related to this platform, if available.
  /// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Poiid { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPoiidBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPoiidBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPoiidArray() { return __p.__vector_as_array<byte>(14); }
  /// The track ID related to this platform (if mobile or transportable), if available.
  /// Example: /// Example: PCM4923-1656174732-4-1-257
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Link-16 specific reference track number.
  /// Example: /// Example: TrkNm
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string TrackRefL16 { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackRefL16Bytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTrackRefL16Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTrackRefL16Array() { return __p.__vector_as_array<byte>(18); }
  /// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
  /// Example: /// Example: Fully Operational
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string OpsCapability { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpsCapabilityBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOpsCapabilityBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOpsCapabilityArray() { return __p.__vector_as_array<byte>(20); }
  /// The status of the installation.
  /// FMC - Fully Mission Capable
  ///  PMC - Partially Mission Capable
  /// NMC - Non Mission Capable
  /// UNK - Unknown.
  /// Example: /// Example: PMC
  /// Constraints: Minimum length = 0, Maximum length = 3
  public SiteStatus_Ingest_instStatus_Enum InstStatus { get { int o = __p.__offset(22); return o != 0 ? (SiteStatus_Ingest_instStatus_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_instStatus_Enum.FMC; } }
  /// Force Protection Condition (FPCON).
  /// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
  /// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
  /// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
  /// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
  /// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
  /// Example: /// Example: BRAVO
  /// Constraints: Minimum length = 0, Maximum length = 7
  public SiteStatus_Ingest_fpcon_Enum Fpcon { get { int o = __p.__offset(24); return o != 0 ? (SiteStatus_Ingest_fpcon_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_fpcon_Enum.NORMAL; } }
  /// Health Protection Condition (HPCON).
  /// 0 - Routine, no community transmission.
  /// ALPHA - Limited, community transmission beginning.
  /// BRAVO - Moderate, increased community transmission.
  /// CHARLIE - Substantial, sustained community transmission.
  /// DELTA - Severe, widespread community transmission.
  /// Example: /// Example: CHARLIE
  /// Constraints: Minimum length = 0, Maximum length = 7
  public SiteStatus_Ingest_hpcon_Enum Hpcon { get { int o = __p.__offset(26); return o != 0 ? (SiteStatus_Ingest_hpcon_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_hpcon_Enum.E0; } }
  /// Cyberspace Protection Condition (CPCON).
  /// 1 - VERY HIGH - Critical functions.
  /// 2 - HIGH - Critical and essential functions.
  /// 3 - MEDIUM - Critical, essential, and support functions.
  /// 4 - LOW - All functions.
  /// 5 - VERY LOW - All functions.
  /// Example: /// Example: 4
  /// Constraints: Minimum length = 0, Maximum length = 1
  public SiteStatus_Ingest_cpcon_Enum Cpcon { get { int o = __p.__offset(28); return o != 0 ? (SiteStatus_Ingest_cpcon_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_cpcon_Enum.E1; } }
  /// Time of report, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string ReportTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetReportTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetReportTimeArray() { return __p.__vector_as_array<byte>(30); }
  /// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
  /// Example: /// Example: Activation
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string TimeFunction { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeFunctionBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetTimeFunctionBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetTimeFunctionArray() { return __p.__vector_as_array<byte>(32); }
  /// Description of the current weather conditions over a site.
  /// Example: /// Example: Heavy rain
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string WeatherMessage { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherMessageBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetWeatherMessageBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetWeatherMessageArray() { return __p.__vector_as_array<byte>(34); }
  /// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Pes { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Estimated number of hot missiles of all types remaining in weapons system inventory.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int HotInventory { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Estimated number of cold missiles of all types remaining in weapons system inventory.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int ColdInventory { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
  /// Example: /// Example: Initialization
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string SamMode { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSamModeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetSamModeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetSamModeArray() { return __p.__vector_as_array<byte>(42); }
  /// SAM sensor radar surveillance mode (Active, Passive, Off).
  /// Example: /// Example: Active
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string RadiateMode { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRadiateModeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetRadiateModeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetRadiateModeArray() { return __p.__vector_as_array<byte>(44); }
  /// The primary component degrading the operational capability of the platform or system.
  /// Example: /// Example: opsImpairment
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string OpsImpairment { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpsImpairmentBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOpsImpairmentBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOpsImpairmentArray() { return __p.__vector_as_array<byte>(46); }
  /// The communications component causing the platform or system to be less than fully operational.
  /// Example: /// Example: commImpairment
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CommImpairment { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommImpairmentBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetCommImpairmentBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetCommImpairmentArray() { return __p.__vector_as_array<byte>(48); }
  /// Crisis Action Team (CAT).
  /// COLD - Not in use.
  /// WARM - Facility prepped/possible skeleton crew.
  /// HOT - Fully active.
  /// Example: /// Example: COLD
  /// Constraints: Minimum length = 0, Maximum length = 4
  public SiteStatus_Ingest_cat_Enum Cat { get { int o = __p.__offset(50); return o != 0 ? (SiteStatus_Ingest_cat_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_cat_Enum.COLD; } }
  /// Emergency Operations Center (EOC) status.
  /// COLD - Not in use.
  /// WARM - Facility prepped/possible skeleton crew.
  /// HOT - Fully active.
  /// Example: /// Example: WARM
  /// Constraints: Minimum length = 0, Maximum length = 4
  public SiteStatus_Ingest_eoc_Enum Eoc { get { int o = __p.__offset(52); return o != 0 ? (SiteStatus_Ingest_eoc_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_eoc_Enum.COLD; } }
  /// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
  /// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
  /// Constraints: No constraints specified.
  public string Link(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LinkLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
  /// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
  /// Constraints: No constraints specified.
  public string LinkStatus(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LinkStatusLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
  /// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
  /// Constraints: No constraints specified.
  public string RadarSystem(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RadarSystemLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
  /// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
  /// Constraints: No constraints specified.
  public string RadarStatus(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RadarStatusLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
  /// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
  /// Constraints: No constraints specified.
  public string Missile(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MissileLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
  /// Example: /// Example: [5, 10, 100]
  /// Constraints: No constraints specified.
  public string MissileInventory(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MissileInventoryLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(66); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(68); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(70); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(72); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(74); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SiteStatus_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(76); return o != 0 ? (SiteStatus_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SiteStatus_Ingest_dataMode_Enum.REAL; } }

  public static Offset<SiteStatus_Ingest> CreateSiteStatus_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idSiteOffset = default(StringOffset),
      StringOffset siteTypeOffset = default(StringOffset),
      StringOffset mobileAltIdOffset = default(StringOffset),
      StringOffset poiidOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset trackRefL16Offset = default(StringOffset),
      StringOffset opsCapabilityOffset = default(StringOffset),
      SiteStatus_Ingest_instStatus_Enum instStatus = SiteStatus_Ingest_instStatus_Enum.FMC,
      SiteStatus_Ingest_fpcon_Enum fpcon = SiteStatus_Ingest_fpcon_Enum.NORMAL,
      SiteStatus_Ingest_hpcon_Enum hpcon = SiteStatus_Ingest_hpcon_Enum.E0,
      SiteStatus_Ingest_cpcon_Enum cpcon = SiteStatus_Ingest_cpcon_Enum.E1,
      StringOffset reportTimeOffset = default(StringOffset),
      StringOffset timeFunctionOffset = default(StringOffset),
      StringOffset weatherMessageOffset = default(StringOffset),
      bool pes = false,
      int hotInventory = 0,
      int coldInventory = 0,
      StringOffset samModeOffset = default(StringOffset),
      StringOffset radiateModeOffset = default(StringOffset),
      StringOffset opsImpairmentOffset = default(StringOffset),
      StringOffset commImpairmentOffset = default(StringOffset),
      SiteStatus_Ingest_cat_Enum cat = SiteStatus_Ingest_cat_Enum.COLD,
      SiteStatus_Ingest_eoc_Enum eoc = SiteStatus_Ingest_eoc_Enum.COLD,
      VectorOffset linkOffset = default(VectorOffset),
      VectorOffset linkStatusOffset = default(VectorOffset),
      VectorOffset radarSystemOffset = default(VectorOffset),
      VectorOffset radarStatusOffset = default(VectorOffset),
      VectorOffset missileOffset = default(VectorOffset),
      VectorOffset missileInventoryOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      SiteStatus_Ingest_dataMode_Enum dataMode = SiteStatus_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(37);
    SiteStatus_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SiteStatus_Ingest.AddOrigin(builder, originOffset);
    SiteStatus_Ingest.AddSource(builder, sourceOffset);
    SiteStatus_Ingest.AddCreatedBy(builder, createdByOffset);
    SiteStatus_Ingest.AddCreatedAt(builder, createdAtOffset);
    SiteStatus_Ingest.AddMissileInventory(builder, missileInventoryOffset);
    SiteStatus_Ingest.AddMissile(builder, missileOffset);
    SiteStatus_Ingest.AddRadarStatus(builder, radarStatusOffset);
    SiteStatus_Ingest.AddRadarSystem(builder, radarSystemOffset);
    SiteStatus_Ingest.AddLinkStatus(builder, linkStatusOffset);
    SiteStatus_Ingest.AddLink(builder, linkOffset);
    SiteStatus_Ingest.AddCommImpairment(builder, commImpairmentOffset);
    SiteStatus_Ingest.AddOpsImpairment(builder, opsImpairmentOffset);
    SiteStatus_Ingest.AddRadiateMode(builder, radiateModeOffset);
    SiteStatus_Ingest.AddSamMode(builder, samModeOffset);
    SiteStatus_Ingest.AddColdInventory(builder, coldInventory);
    SiteStatus_Ingest.AddHotInventory(builder, hotInventory);
    SiteStatus_Ingest.AddWeatherMessage(builder, weatherMessageOffset);
    SiteStatus_Ingest.AddTimeFunction(builder, timeFunctionOffset);
    SiteStatus_Ingest.AddReportTime(builder, reportTimeOffset);
    SiteStatus_Ingest.AddOpsCapability(builder, opsCapabilityOffset);
    SiteStatus_Ingest.AddTrackRefL16(builder, trackRefL16Offset);
    SiteStatus_Ingest.AddTrackId(builder, trackIdOffset);
    SiteStatus_Ingest.AddPoiid(builder, poiidOffset);
    SiteStatus_Ingest.AddMobileAltId(builder, mobileAltIdOffset);
    SiteStatus_Ingest.AddSiteType(builder, siteTypeOffset);
    SiteStatus_Ingest.AddIdSite(builder, idSiteOffset);
    SiteStatus_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SiteStatus_Ingest.AddId(builder, idOffset);
    SiteStatus_Ingest.AddDataMode(builder, dataMode);
    SiteStatus_Ingest.AddEoc(builder, eoc);
    SiteStatus_Ingest.AddCat(builder, cat);
    SiteStatus_Ingest.AddPes(builder, pes);
    SiteStatus_Ingest.AddCpcon(builder, cpcon);
    SiteStatus_Ingest.AddHpcon(builder, hpcon);
    SiteStatus_Ingest.AddFpcon(builder, fpcon);
    SiteStatus_Ingest.AddInstStatus(builder, instStatus);
    return SiteStatus_Ingest.EndSiteStatus_Ingest(builder);
  }

  public static void StartSiteStatus_Ingest(FlatBufferBuilder builder) { builder.StartTable(37); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdSite(FlatBufferBuilder builder, StringOffset idSiteOffset) { builder.AddOffset(2, idSiteOffset.Value, 0); }
  public static void AddSiteType(FlatBufferBuilder builder, StringOffset siteTypeOffset) { builder.AddOffset(3, siteTypeOffset.Value, 0); }
  public static void AddMobileAltId(FlatBufferBuilder builder, StringOffset mobileAltIdOffset) { builder.AddOffset(4, mobileAltIdOffset.Value, 0); }
  public static void AddPoiid(FlatBufferBuilder builder, StringOffset poiidOffset) { builder.AddOffset(5, poiidOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(6, trackIdOffset.Value, 0); }
  public static void AddTrackRefL16(FlatBufferBuilder builder, StringOffset trackRefL16Offset) { builder.AddOffset(7, trackRefL16Offset.Value, 0); }
  public static void AddOpsCapability(FlatBufferBuilder builder, StringOffset opsCapabilityOffset) { builder.AddOffset(8, opsCapabilityOffset.Value, 0); }
  public static void AddInstStatus(FlatBufferBuilder builder, SiteStatus_Ingest_instStatus_Enum instStatus) { builder.AddSbyte(9, (sbyte)instStatus, 0); }
  public static void AddFpcon(FlatBufferBuilder builder, SiteStatus_Ingest_fpcon_Enum fpcon) { builder.AddSbyte(10, (sbyte)fpcon, 0); }
  public static void AddHpcon(FlatBufferBuilder builder, SiteStatus_Ingest_hpcon_Enum hpcon) { builder.AddSbyte(11, (sbyte)hpcon, 0); }
  public static void AddCpcon(FlatBufferBuilder builder, SiteStatus_Ingest_cpcon_Enum cpcon) { builder.AddSbyte(12, (sbyte)cpcon, 0); }
  public static void AddReportTime(FlatBufferBuilder builder, StringOffset reportTimeOffset) { builder.AddOffset(13, reportTimeOffset.Value, 0); }
  public static void AddTimeFunction(FlatBufferBuilder builder, StringOffset timeFunctionOffset) { builder.AddOffset(14, timeFunctionOffset.Value, 0); }
  public static void AddWeatherMessage(FlatBufferBuilder builder, StringOffset weatherMessageOffset) { builder.AddOffset(15, weatherMessageOffset.Value, 0); }
  public static void AddPes(FlatBufferBuilder builder, bool pes) { builder.AddBool(16, pes, false); }
  public static void AddHotInventory(FlatBufferBuilder builder, int hotInventory) { builder.AddInt(17, hotInventory, 0); }
  public static void AddColdInventory(FlatBufferBuilder builder, int coldInventory) { builder.AddInt(18, coldInventory, 0); }
  public static void AddSamMode(FlatBufferBuilder builder, StringOffset samModeOffset) { builder.AddOffset(19, samModeOffset.Value, 0); }
  public static void AddRadiateMode(FlatBufferBuilder builder, StringOffset radiateModeOffset) { builder.AddOffset(20, radiateModeOffset.Value, 0); }
  public static void AddOpsImpairment(FlatBufferBuilder builder, StringOffset opsImpairmentOffset) { builder.AddOffset(21, opsImpairmentOffset.Value, 0); }
  public static void AddCommImpairment(FlatBufferBuilder builder, StringOffset commImpairmentOffset) { builder.AddOffset(22, commImpairmentOffset.Value, 0); }
  public static void AddCat(FlatBufferBuilder builder, SiteStatus_Ingest_cat_Enum cat) { builder.AddSbyte(23, (sbyte)cat, 0); }
  public static void AddEoc(FlatBufferBuilder builder, SiteStatus_Ingest_eoc_Enum eoc) { builder.AddSbyte(24, (sbyte)eoc, 0); }
  public static void AddLink(FlatBufferBuilder builder, VectorOffset linkOffset) { builder.AddOffset(25, linkOffset.Value, 0); }
  public static VectorOffset CreateLinkVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLinkVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinkVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinkVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLinkVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLinkStatus(FlatBufferBuilder builder, VectorOffset linkStatusOffset) { builder.AddOffset(26, linkStatusOffset.Value, 0); }
  public static VectorOffset CreateLinkStatusVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLinkStatusVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinkStatusVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLinkStatusVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLinkStatusVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRadarSystem(FlatBufferBuilder builder, VectorOffset radarSystemOffset) { builder.AddOffset(27, radarSystemOffset.Value, 0); }
  public static VectorOffset CreateRadarSystemVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRadarSystemVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarSystemVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarSystemVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRadarSystemVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRadarStatus(FlatBufferBuilder builder, VectorOffset radarStatusOffset) { builder.AddOffset(28, radarStatusOffset.Value, 0); }
  public static VectorOffset CreateRadarStatusVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRadarStatusVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarStatusVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarStatusVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRadarStatusVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissile(FlatBufferBuilder builder, VectorOffset missileOffset) { builder.AddOffset(29, missileOffset.Value, 0); }
  public static VectorOffset CreateMissileVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMissileVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissileVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissileVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissileVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMissileInventory(FlatBufferBuilder builder, VectorOffset missileInventoryOffset) { builder.AddOffset(30, missileInventoryOffset.Value, 0); }
  public static VectorOffset CreateMissileInventoryVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMissileInventoryVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissileInventoryVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMissileInventoryVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMissileInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(31, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(32, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(33, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(34, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(35, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SiteStatus_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(36, (sbyte)dataMode, 0); }
  public static Offset<SiteStatus_Ingest> EndSiteStatus_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SiteStatus_Ingest>(o);
  }
  public static void FinishSiteStatus_IngestBuffer(FlatBufferBuilder builder, Offset<SiteStatus_Ingest> offset) { builder.Finish(offset.Value, "SITE"); }
  public static void FinishSizePrefixedSiteStatus_IngestBuffer(FlatBufferBuilder builder, Offset<SiteStatus_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SITE"); }
  public SiteStatus_IngestT UnPack() {
    var _o = new SiteStatus_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SiteStatus_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdSite = this.IdSite;
    _o.SiteType = this.SiteType;
    _o.MobileAltId = this.MobileAltId;
    _o.Poiid = this.Poiid;
    _o.TrackId = this.TrackId;
    _o.TrackRefL16 = this.TrackRefL16;
    _o.OpsCapability = this.OpsCapability;
    _o.InstStatus = this.InstStatus;
    _o.Fpcon = this.Fpcon;
    _o.Hpcon = this.Hpcon;
    _o.Cpcon = this.Cpcon;
    _o.ReportTime = this.ReportTime;
    _o.TimeFunction = this.TimeFunction;
    _o.WeatherMessage = this.WeatherMessage;
    _o.Pes = this.Pes;
    _o.HotInventory = this.HotInventory;
    _o.ColdInventory = this.ColdInventory;
    _o.SamMode = this.SamMode;
    _o.RadiateMode = this.RadiateMode;
    _o.OpsImpairment = this.OpsImpairment;
    _o.CommImpairment = this.CommImpairment;
    _o.Cat = this.Cat;
    _o.Eoc = this.Eoc;
    _o.Link = new List<string>();
    for (var _j = 0; _j < this.LinkLength; ++_j) {_o.Link.Add(this.Link(_j));}
    _o.LinkStatus = new List<string>();
    for (var _j = 0; _j < this.LinkStatusLength; ++_j) {_o.LinkStatus.Add(this.LinkStatus(_j));}
    _o.RadarSystem = new List<string>();
    for (var _j = 0; _j < this.RadarSystemLength; ++_j) {_o.RadarSystem.Add(this.RadarSystem(_j));}
    _o.RadarStatus = new List<string>();
    for (var _j = 0; _j < this.RadarStatusLength; ++_j) {_o.RadarStatus.Add(this.RadarStatus(_j));}
    _o.Missile = new List<string>();
    for (var _j = 0; _j < this.MissileLength; ++_j) {_o.Missile.Add(this.Missile(_j));}
    _o.MissileInventory = new List<string>();
    for (var _j = 0; _j < this.MissileInventoryLength; ++_j) {_o.MissileInventory.Add(this.MissileInventory(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<SiteStatus_Ingest> Pack(FlatBufferBuilder builder, SiteStatus_IngestT _o) {
    if (_o == null) return default(Offset<SiteStatus_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idSite = _o.IdSite == null ? default(StringOffset) : builder.CreateString(_o.IdSite);
    var _siteType = _o.SiteType == null ? default(StringOffset) : builder.CreateString(_o.SiteType);
    var _mobileAltId = _o.MobileAltId == null ? default(StringOffset) : builder.CreateString(_o.MobileAltId);
    var _poiid = _o.Poiid == null ? default(StringOffset) : builder.CreateString(_o.Poiid);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _trackRefL16 = _o.TrackRefL16 == null ? default(StringOffset) : builder.CreateString(_o.TrackRefL16);
    var _opsCapability = _o.OpsCapability == null ? default(StringOffset) : builder.CreateString(_o.OpsCapability);
    var _reportTime = _o.ReportTime == null ? default(StringOffset) : builder.CreateString(_o.ReportTime);
    var _timeFunction = _o.TimeFunction == null ? default(StringOffset) : builder.CreateString(_o.TimeFunction);
    var _weatherMessage = _o.WeatherMessage == null ? default(StringOffset) : builder.CreateString(_o.WeatherMessage);
    var _samMode = _o.SamMode == null ? default(StringOffset) : builder.CreateString(_o.SamMode);
    var _radiateMode = _o.RadiateMode == null ? default(StringOffset) : builder.CreateString(_o.RadiateMode);
    var _opsImpairment = _o.OpsImpairment == null ? default(StringOffset) : builder.CreateString(_o.OpsImpairment);
    var _commImpairment = _o.CommImpairment == null ? default(StringOffset) : builder.CreateString(_o.CommImpairment);
    var _link = default(VectorOffset);
    if (_o.Link != null) {
      var __link = new StringOffset[_o.Link.Count];
      for (var _j = 0; _j < __link.Length; ++_j) { __link[_j] = builder.CreateString(_o.Link[_j]); }
      _link = CreateLinkVector(builder, __link);
    }
    var _linkStatus = default(VectorOffset);
    if (_o.LinkStatus != null) {
      var __linkStatus = new StringOffset[_o.LinkStatus.Count];
      for (var _j = 0; _j < __linkStatus.Length; ++_j) { __linkStatus[_j] = builder.CreateString(_o.LinkStatus[_j]); }
      _linkStatus = CreateLinkStatusVector(builder, __linkStatus);
    }
    var _radarSystem = default(VectorOffset);
    if (_o.RadarSystem != null) {
      var __radarSystem = new StringOffset[_o.RadarSystem.Count];
      for (var _j = 0; _j < __radarSystem.Length; ++_j) { __radarSystem[_j] = builder.CreateString(_o.RadarSystem[_j]); }
      _radarSystem = CreateRadarSystemVector(builder, __radarSystem);
    }
    var _radarStatus = default(VectorOffset);
    if (_o.RadarStatus != null) {
      var __radarStatus = new StringOffset[_o.RadarStatus.Count];
      for (var _j = 0; _j < __radarStatus.Length; ++_j) { __radarStatus[_j] = builder.CreateString(_o.RadarStatus[_j]); }
      _radarStatus = CreateRadarStatusVector(builder, __radarStatus);
    }
    var _missile = default(VectorOffset);
    if (_o.Missile != null) {
      var __missile = new StringOffset[_o.Missile.Count];
      for (var _j = 0; _j < __missile.Length; ++_j) { __missile[_j] = builder.CreateString(_o.Missile[_j]); }
      _missile = CreateMissileVector(builder, __missile);
    }
    var _missileInventory = default(VectorOffset);
    if (_o.MissileInventory != null) {
      var __missileInventory = new StringOffset[_o.MissileInventory.Count];
      for (var _j = 0; _j < __missileInventory.Length; ++_j) { __missileInventory[_j] = builder.CreateString(_o.MissileInventory[_j]); }
      _missileInventory = CreateMissileInventoryVector(builder, __missileInventory);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSiteStatus_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idSite,
      _siteType,
      _mobileAltId,
      _poiid,
      _trackId,
      _trackRefL16,
      _opsCapability,
      _o.InstStatus,
      _o.Fpcon,
      _o.Hpcon,
      _o.Cpcon,
      _reportTime,
      _timeFunction,
      _weatherMessage,
      _o.Pes,
      _o.HotInventory,
      _o.ColdInventory,
      _samMode,
      _radiateMode,
      _opsImpairment,
      _commImpairment,
      _o.Cat,
      _o.Eoc,
      _link,
      _linkStatus,
      _radarSystem,
      _radarStatus,
      _missile,
      _missileInventory,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class SiteStatus_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdSite { get; set; }
  public string SiteType { get; set; }
  public string MobileAltId { get; set; }
  public string Poiid { get; set; }
  public string TrackId { get; set; }
  public string TrackRefL16 { get; set; }
  public string OpsCapability { get; set; }
  public SiteStatus_Ingest_instStatus_Enum InstStatus { get; set; }
  public SiteStatus_Ingest_fpcon_Enum Fpcon { get; set; }
  public SiteStatus_Ingest_hpcon_Enum Hpcon { get; set; }
  public SiteStatus_Ingest_cpcon_Enum Cpcon { get; set; }
  public string ReportTime { get; set; }
  public string TimeFunction { get; set; }
  public string WeatherMessage { get; set; }
  public bool Pes { get; set; }
  public int HotInventory { get; set; }
  public int ColdInventory { get; set; }
  public string SamMode { get; set; }
  public string RadiateMode { get; set; }
  public string OpsImpairment { get; set; }
  public string CommImpairment { get; set; }
  public SiteStatus_Ingest_cat_Enum Cat { get; set; }
  public SiteStatus_Ingest_eoc_Enum Eoc { get; set; }
  public List<string> Link { get; set; }
  public List<string> LinkStatus { get; set; }
  public List<string> RadarSystem { get; set; }
  public List<string> RadarStatus { get; set; }
  public List<string> Missile { get; set; }
  public List<string> MissileInventory { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public SiteStatus_Ingest_dataMode_Enum DataMode { get; set; }

  public SiteStatus_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdSite = null;
    this.SiteType = null;
    this.MobileAltId = null;
    this.Poiid = null;
    this.TrackId = null;
    this.TrackRefL16 = null;
    this.OpsCapability = null;
    this.InstStatus = SiteStatus_Ingest_instStatus_Enum.FMC;
    this.Fpcon = SiteStatus_Ingest_fpcon_Enum.NORMAL;
    this.Hpcon = SiteStatus_Ingest_hpcon_Enum.E0;
    this.Cpcon = SiteStatus_Ingest_cpcon_Enum.E1;
    this.ReportTime = null;
    this.TimeFunction = null;
    this.WeatherMessage = null;
    this.Pes = false;
    this.HotInventory = 0;
    this.ColdInventory = 0;
    this.SamMode = null;
    this.RadiateMode = null;
    this.OpsImpairment = null;
    this.CommImpairment = null;
    this.Cat = SiteStatus_Ingest_cat_Enum.COLD;
    this.Eoc = SiteStatus_Ingest_eoc_Enum.COLD;
    this.Link = null;
    this.LinkStatus = null;
    this.RadarSystem = null;
    this.RadarStatus = null;
    this.Missile = null;
    this.MissileInventory = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = SiteStatus_Ingest_dataMode_Enum.REAL;
  }
  public static SiteStatus_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SiteStatus_Ingest.GetRootAsSiteStatus_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SiteStatus_Ingest.FinishSiteStatus_IngestBuffer(fbb, SiteStatus_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SiteStatus_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSite*/, false)
      && verifier.VerifyString(tablePos, 10 /*SiteType*/, false)
      && verifier.VerifyString(tablePos, 12 /*MobileAltId*/, false)
      && verifier.VerifyString(tablePos, 14 /*Poiid*/, false)
      && verifier.VerifyString(tablePos, 16 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 18 /*TrackRefL16*/, false)
      && verifier.VerifyString(tablePos, 20 /*OpsCapability*/, false)
      && verifier.VerifyField(tablePos, 22 /*InstStatus*/, 1 /*SiteStatus_Ingest_instStatus_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 24 /*Fpcon*/, 1 /*SiteStatus_Ingest_fpcon_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*Hpcon*/, 1 /*SiteStatus_Ingest_hpcon_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*Cpcon*/, 1 /*SiteStatus_Ingest_cpcon_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 30 /*ReportTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*TimeFunction*/, false)
      && verifier.VerifyString(tablePos, 34 /*WeatherMessage*/, false)
      && verifier.VerifyField(tablePos, 36 /*Pes*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*HotInventory*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*ColdInventory*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 42 /*SamMode*/, false)
      && verifier.VerifyString(tablePos, 44 /*RadiateMode*/, false)
      && verifier.VerifyString(tablePos, 46 /*OpsImpairment*/, false)
      && verifier.VerifyString(tablePos, 48 /*CommImpairment*/, false)
      && verifier.VerifyField(tablePos, 50 /*Cat*/, 1 /*SiteStatus_Ingest_cat_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*Eoc*/, 1 /*SiteStatus_Ingest_eoc_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*Link*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*LinkStatus*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*RadarSystem*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*RadarStatus*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*Missile*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*MissileInventory*/, false)
      && verifier.VerifyString(tablePos, 66 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 68 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 70 /*Source*/, false)
      && verifier.VerifyString(tablePos, 72 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 74 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 76 /*DataMode*/, 1 /*SiteStatus_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
