// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Additional start and stop for the collection.
public struct ISRCollectionAdditional_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionAdditional_Ingest GetRootAsISRCollectionAdditional_Ingest(ByteBuffer _bb) { return GetRootAsISRCollectionAdditional_Ingest(_bb, new ISRCollectionAdditional_Ingest()); }
  public static ISRCollectionAdditional_Ingest GetRootAsISRCollectionAdditional_Ingest(ByteBuffer _bb, ISRCollectionAdditional_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollectionAdditional_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollectionAdditional_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollectionAdditional_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollectionAdditional_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique Identifier of additional collection period.
  /// Example: /// Example: ISRCOLLECTIONADDITIONAL
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Start time of collection, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  public string Start { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStartBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStartArray() { return __p.__vector_as_array<byte>(6); }
  /// Stop time of collection, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  public string Stop { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStopBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStopArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<ISRCollectionAdditional_Ingest> CreateISRCollectionAdditional_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset startOffset = default(StringOffset),
      StringOffset stopOffset = default(StringOffset)) {
    builder.StartTable(3);
    ISRCollectionAdditional_Ingest.AddStop(builder, stopOffset);
    ISRCollectionAdditional_Ingest.AddStart(builder, startOffset);
    ISRCollectionAdditional_Ingest.AddId(builder, idOffset);
    return ISRCollectionAdditional_Ingest.EndISRCollectionAdditional_Ingest(builder);
  }

  public static void StartISRCollectionAdditional_Ingest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddStart(FlatBufferBuilder builder, StringOffset startOffset) { builder.AddOffset(1, startOffset.Value, 0); }
  public static void AddStop(FlatBufferBuilder builder, StringOffset stopOffset) { builder.AddOffset(2, stopOffset.Value, 0); }
  public static Offset<ISRCollectionAdditional_Ingest> EndISRCollectionAdditional_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollectionAdditional_Ingest>(o);
  }
  public static void FinishISRCollectionAdditional_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionAdditional_Ingest> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollectionAdditional_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionAdditional_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollectionAdditional_IngestT UnPack() {
    var _o = new ISRCollectionAdditional_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollectionAdditional_IngestT _o) {
    _o.Id = this.Id;
    _o.Start = this.Start;
    _o.Stop = this.Stop;
  }
  public static Offset<ISRCollectionAdditional_Ingest> Pack(FlatBufferBuilder builder, ISRCollectionAdditional_IngestT _o) {
    if (_o == null) return default(Offset<ISRCollectionAdditional_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _start = _o.Start == null ? default(StringOffset) : builder.CreateString(_o.Start);
    var _stop = _o.Stop == null ? default(StringOffset) : builder.CreateString(_o.Stop);
    return CreateISRCollectionAdditional_Ingest(
      builder,
      _id,
      _start,
      _stop);
  }
}

public class ISRCollectionAdditional_IngestT
{
  public string Id { get; set; }
  public string Start { get; set; }
  public string Stop { get; set; }

  public ISRCollectionAdditional_IngestT() {
    this.Id = null;
    this.Start = null;
    this.Stop = null;
  }
  public static ISRCollectionAdditional_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollectionAdditional_Ingest.GetRootAsISRCollectionAdditional_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollectionAdditional_Ingest.FinishISRCollectionAdditional_IngestBuffer(fbb, ISRCollectionAdditional_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollectionAdditional_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Start*/, false)
      && verifier.VerifyString(tablePos, 8 /*Stop*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
