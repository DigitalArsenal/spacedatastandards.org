// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
public struct Entity_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Entity_Ingest GetRootAsEntity_Ingest(ByteBuffer _bb) { return GetRootAsEntity_Ingest(_bb, new Entity_Ingest()); }
  public static Entity_Ingest GetRootAsEntity_Ingest(ByteBuffer _bb, Entity_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Entity_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ENTI"); }
  public static bool VerifyEntity_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ENTI", false, Entity_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Entity_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique entity name.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
  /// Example: /// Example: ONORBIT
  /// Constraints: Minimum length = 1, Maximum length = 45
  public Entity_Ingest_type_Enum Type { get { int o = __p.__offset(10); return o != 0 ? (Entity_Ingest_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Entity_Ingest_type_Enum.AIRCRAFT; } }
  /// Unique identifier of the entity location, if terrestrial/fixed.
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdLocation { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdLocationBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdLocationBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdLocationArray() { return __p.__vector_as_array<byte>(12); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(14); }
  /// Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 0, Maximum length = 32
  public Entity_Ingest_ownerType_Enum OwnerType { get { int o = __p.__offset(16); return o != 0 ? (Entity_Ingest_ownerType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Entity_Ingest_ownerType_Enum.COMMERCIAL; } }
  /// Boolean indicating if this entity is taskable.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Taskable { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// List of URLs to additional details/documents for this entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  public string Urls(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UrlsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(22); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(24); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(26); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(28); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Entity_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(30); return o != 0 ? (Entity_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Entity_Ingest_dataMode_Enum.REAL; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Location { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetLocationBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetLocationArray() { return __p.__vector_as_array<byte>(32); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(34); }
  /// Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(36); }
  /// Unique identifier of the associated operating unit object.
  /// Example: /// Example: OPERATINGUNIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOperatingUnit { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOperatingUnitBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetIdOperatingUnitBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetIdOperatingUnitArray() { return __p.__vector_as_array<byte>(38); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(40); }

  public static Offset<Entity_Ingest> CreateEntity_Ingest(FlatBufferBuilder builder,
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      Entity_Ingest_type_Enum type = Entity_Ingest_type_Enum.AIRCRAFT,
      StringOffset idLocationOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      Entity_Ingest_ownerType_Enum ownerType = Entity_Ingest_ownerType_Enum.COMMERCIAL,
      bool taskable = false,
      VectorOffset urlsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Entity_Ingest_dataMode_Enum dataMode = Entity_Ingest_dataMode_Enum.REAL,
      StringOffset locationOffset = default(StringOffset),
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idOperatingUnitOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(19);
    Entity_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Entity_Ingest.AddIdOperatingUnit(builder, idOperatingUnitOffset);
    Entity_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    Entity_Ingest.AddOnOrbit(builder, onOrbitOffset);
    Entity_Ingest.AddLocation(builder, locationOffset);
    Entity_Ingest.AddOrigin(builder, originOffset);
    Entity_Ingest.AddSource(builder, sourceOffset);
    Entity_Ingest.AddCreatedBy(builder, createdByOffset);
    Entity_Ingest.AddCreatedAt(builder, createdAtOffset);
    Entity_Ingest.AddUrls(builder, urlsOffset);
    Entity_Ingest.AddCountryCode(builder, countryCodeOffset);
    Entity_Ingest.AddIdLocation(builder, idLocationOffset);
    Entity_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Entity_Ingest.AddName(builder, nameOffset);
    Entity_Ingest.AddIdEntity(builder, idEntityOffset);
    Entity_Ingest.AddDataMode(builder, dataMode);
    Entity_Ingest.AddTaskable(builder, taskable);
    Entity_Ingest.AddOwnerType(builder, ownerType);
    Entity_Ingest.AddType(builder, type);
    return Entity_Ingest.EndEntity_Ingest(builder);
  }

  public static void StartEntity_Ingest(FlatBufferBuilder builder) { builder.StartTable(19); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(0, idEntityOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Entity_Ingest_type_Enum type) { builder.AddSbyte(3, (sbyte)type, 0); }
  public static void AddIdLocation(FlatBufferBuilder builder, StringOffset idLocationOffset) { builder.AddOffset(4, idLocationOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(5, countryCodeOffset.Value, 0); }
  public static void AddOwnerType(FlatBufferBuilder builder, Entity_Ingest_ownerType_Enum ownerType) { builder.AddSbyte(6, (sbyte)ownerType, 0); }
  public static void AddTaskable(FlatBufferBuilder builder, bool taskable) { builder.AddBool(7, taskable, false); }
  public static void AddUrls(FlatBufferBuilder builder, VectorOffset urlsOffset) { builder.AddOffset(8, urlsOffset.Value, 0); }
  public static VectorOffset CreateUrlsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUrlsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(9, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(10, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(11, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(12, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Entity_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(13, (sbyte)dataMode, 0); }
  public static void AddLocation(FlatBufferBuilder builder, StringOffset locationOffset) { builder.AddOffset(14, locationOffset.Value, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(15, onOrbitOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(16, idOnOrbitOffset.Value, 0); }
  public static void AddIdOperatingUnit(FlatBufferBuilder builder, StringOffset idOperatingUnitOffset) { builder.AddOffset(17, idOperatingUnitOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(18, origNetworkOffset.Value, 0); }
  public static Offset<Entity_Ingest> EndEntity_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Entity_Ingest>(o);
  }
  public static void FinishEntity_IngestBuffer(FlatBufferBuilder builder, Offset<Entity_Ingest> offset) { builder.Finish(offset.Value, "ENTI"); }
  public static void FinishSizePrefixedEntity_IngestBuffer(FlatBufferBuilder builder, Offset<Entity_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ENTI"); }
  public Entity_IngestT UnPack() {
    var _o = new Entity_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Entity_IngestT _o) {
    _o.IdEntity = this.IdEntity;
    _o.Name = this.Name;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.IdLocation = this.IdLocation;
    _o.CountryCode = this.CountryCode;
    _o.OwnerType = this.OwnerType;
    _o.Taskable = this.Taskable;
    _o.Urls = new List<string>();
    for (var _j = 0; _j < this.UrlsLength; ++_j) {_o.Urls.Add(this.Urls(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.Location = this.Location;
    _o.OnOrbit = this.OnOrbit;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdOperatingUnit = this.IdOperatingUnit;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Entity_Ingest> Pack(FlatBufferBuilder builder, Entity_IngestT _o) {
    if (_o == null) return default(Offset<Entity_Ingest>);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idLocation = _o.IdLocation == null ? default(StringOffset) : builder.CreateString(_o.IdLocation);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _urls = default(VectorOffset);
    if (_o.Urls != null) {
      var __urls = new StringOffset[_o.Urls.Count];
      for (var _j = 0; _j < __urls.Length; ++_j) { __urls[_j] = builder.CreateString(_o.Urls[_j]); }
      _urls = CreateUrlsVector(builder, __urls);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _location = _o.Location == null ? default(StringOffset) : builder.CreateString(_o.Location);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idOperatingUnit = _o.IdOperatingUnit == null ? default(StringOffset) : builder.CreateString(_o.IdOperatingUnit);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateEntity_Ingest(
      builder,
      _idEntity,
      _name,
      _classificationMarking,
      _o.Type,
      _idLocation,
      _countryCode,
      _o.OwnerType,
      _o.Taskable,
      _urls,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _location,
      _onOrbit,
      _idOnOrbit,
      _idOperatingUnit,
      _origNetwork);
  }
}

public class Entity_IngestT
{
  public string IdEntity { get; set; }
  public string Name { get; set; }
  public string ClassificationMarking { get; set; }
  public Entity_Ingest_type_Enum Type { get; set; }
  public string IdLocation { get; set; }
  public string CountryCode { get; set; }
  public Entity_Ingest_ownerType_Enum OwnerType { get; set; }
  public bool Taskable { get; set; }
  public List<string> Urls { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Entity_Ingest_dataMode_Enum DataMode { get; set; }
  public string Location { get; set; }
  public string OnOrbit { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdOperatingUnit { get; set; }
  public string OrigNetwork { get; set; }

  public Entity_IngestT() {
    this.IdEntity = null;
    this.Name = null;
    this.ClassificationMarking = null;
    this.Type = Entity_Ingest_type_Enum.AIRCRAFT;
    this.IdLocation = null;
    this.CountryCode = null;
    this.OwnerType = Entity_Ingest_ownerType_Enum.COMMERCIAL;
    this.Taskable = false;
    this.Urls = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Entity_Ingest_dataMode_Enum.REAL;
    this.Location = null;
    this.OnOrbit = null;
    this.IdOnOrbit = null;
    this.IdOperatingUnit = null;
    this.OrigNetwork = null;
  }
  public static Entity_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Entity_Ingest.GetRootAsEntity_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Entity_Ingest.FinishEntity_IngestBuffer(fbb, Entity_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Entity_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 1 /*Entity_Ingest_type_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*IdLocation*/, false)
      && verifier.VerifyString(tablePos, 14 /*CountryCode*/, false)
      && verifier.VerifyField(tablePos, 16 /*OwnerType*/, 1 /*Entity_Ingest_ownerType_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*Taskable*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*Urls*/, false)
      && verifier.VerifyString(tablePos, 22 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 26 /*Source*/, false)
      && verifier.VerifyString(tablePos, 28 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 30 /*DataMode*/, 1 /*Entity_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 32 /*Location*/, false)
      && verifier.VerifyString(tablePos, 34 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 36 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 38 /*IdOperatingUnit*/, false)
      && verifier.VerifyString(tablePos, 40 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
