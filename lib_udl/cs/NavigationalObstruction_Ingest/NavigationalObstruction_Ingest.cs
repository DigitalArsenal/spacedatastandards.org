// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
public struct NavigationalObstruction_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static NavigationalObstruction_Ingest GetRootAsNavigationalObstruction_Ingest(ByteBuffer _bb) { return GetRootAsNavigationalObstruction_Ingest(_bb, new NavigationalObstruction_Ingest()); }
  public static NavigationalObstruction_Ingest GetRootAsNavigationalObstruction_Ingest(ByteBuffer _bb, NavigationalObstruction_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool NavigationalObstruction_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "NAVI"); }
  public static bool VerifyNavigationalObstruction_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("NAVI", false, NavigationalObstruction_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NavigationalObstruction_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
  /// Example: /// Example: 2024-06-13
  /// Constraints: No constraints specified.
  public string CycleDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCycleDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCycleDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCycleDateArray() { return __p.__vector_as_array<byte>(8); }
  /// Type of obstacle (e.g. P for point, V for vector, L for line).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 1, Maximum length = 1
  public string ObstacleType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObstacleTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetObstacleTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetObstacleTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// The ID of this obstacle.
  /// Example: /// Example: 359655
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string ObstacleId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObstacleIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetObstacleIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetObstacleIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: OU812
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ExternalId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(14); }
  /// The original ID for this obstacle.
  /// Example: /// Example: L0000002289
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOrigIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOrigIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(18); }
  /// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
  /// Example: /// Example: 23
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ProvinceCode { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProvinceCodeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetProvinceCodeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetProvinceCodeArray() { return __p.__vector_as_array<byte>(20); }
  /// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 46.757211
  /// Constraints: No constraints specified.
  public double PointLat { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -67.759494
  /// Constraints: No constraints specified.
  public double PointLon { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.197891
  /// Constraints: No constraints specified.
  public double LineNELon { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 49.000584
  /// Constraints: No constraints specified.
  public double LineNELat { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.722946
  /// Constraints: No constraints specified.
  public double LineSWLon { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 48.507027
  /// Constraints: No constraints specified.
  public double LineSWLat { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ID of the starting point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  public int SegStartPoint { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// ID of the end point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  public int SegEndPoint { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Identifies the sequence number of a line segment.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SegNum { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
  /// Example: /// Example: AT040
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Facc { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFaccBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetFaccBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetFaccArray() { return __p.__vector_as_array<byte>(40); }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string FeatureCode { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFeatureCodeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetFeatureCodeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetFeatureCodeArray() { return __p.__vector_as_array<byte>(42); }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string FeatureType { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFeatureTypeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetFeatureTypeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetFeatureTypeArray() { return __p.__vector_as_array<byte>(44); }
  /// Type name of point obstacle.
  /// Example: /// Example: PYLON
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string FeatureName { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFeatureNameBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetFeatureNameBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetFeatureNameArray() { return __p.__vector_as_array<byte>(46); }
  /// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
  /// Example: /// Example: Powerline Pylon, General
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string FeatureDescription { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFeatureDescriptionBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetFeatureDescriptionBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetFeatureDescriptionArray() { return __p.__vector_as_array<byte>(48); }
  /// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
  /// Example: /// Example: 262
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Wac { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetWacBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetWacArray() { return __p.__vector_as_array<byte>(50); }
  /// This obstacle's World Area Code installation number (WAC-INNR).
  /// Example: /// Example: 0409-00039
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string WacINNR { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacINNRBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetWacINNRBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetWacINNRArray() { return __p.__vector_as_array<byte>(52); }
  /// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
  /// Example: /// Example: S
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string MultObs { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMultObsBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetMultObsBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetMultObsArray() { return __p.__vector_as_array<byte>(54); }
  /// Indicates the number of obstructions associated with a feature.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumObs { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
  /// Example: /// Example: WGS-84
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string HorizDatumCode { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHorizDatumCodeBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetHorizDatumCodeBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetHorizDatumCodeArray() { return __p.__vector_as_array<byte>(58); }
  /// The height Above Ground Level (AGL) of the point obstacle in feet.
  /// Example: /// Example: 314.1
  /// Constraints: No constraints specified.
  public double HeightAGL { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
  /// Example: /// Example: 30.1
  /// Constraints: No constraints specified.
  public double HeightAGLAcc { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
  /// Example: /// Example: 1154.1
  /// Constraints: No constraints specified.
  public double HeightMSL { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
  /// Example: /// Example: 34.1
  /// Constraints: No constraints specified.
  public double HeightMSLAcc { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The elevation at the point obstacle's location in feet.
  /// Example: /// Example: 840.1
  /// Constraints: No constraints specified.
  public double Elevation { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The difference between the assigned elevation of this point and its true elevation, in feet.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  public double ElevationAcc { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
  /// Example: /// Example: 8.1
  /// Constraints: No constraints specified.
  public double HorizAcc { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
  /// Example: /// Example: 0
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string Quality { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualityBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetQualityBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetQualityArray() { return __p.__vector_as_array<byte>(74); }
  /// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string LightingCode { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLightingCodeBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetLightingCodeBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetLightingCodeArray() { return __p.__vector_as_array<byte>(76); }
  /// The surface material composition code of this point obstacle.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string SurfaceMatCode { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSurfaceMatCodeBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetSurfaceMatCodeBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetSurfaceMatCodeArray() { return __p.__vector_as_array<byte>(78); }
  /// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int DirectivityCode { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Method used to confirm the existence of this obstacle.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int ValidationCode { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string TransactionCode { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionCodeBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTransactionCodeBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTransactionCodeArray() { return __p.__vector_as_array<byte>(84); }
  /// Code denoting the action, review, or process that updated this obstacle.
  /// Example: /// Example: OT
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ProcessCode { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProcessCodeBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetProcessCodeBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetProcessCodeArray() { return __p.__vector_as_array<byte>(86); }
  /// Indicates if this obstacle record is Active (A) or Deleted (D).
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string ActDelCode { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActDelCodeBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetActDelCodeBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetActDelCodeArray() { return __p.__vector_as_array<byte>(88); }
  /// Name of the agency that produced this obstruction data set.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Producer { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProducerBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetProducerBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetProducerArray() { return __p.__vector_as_array<byte>(90); }
  /// The organization that entered obstacle data other than the producer.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string DerivingOrg { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDerivingOrgBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetDerivingOrgBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetDerivingOrgArray() { return __p.__vector_as_array<byte>(92); }
  /// The organization that deleted this obstacle record.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string DeletingOrg { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeletingOrgBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetDeletingOrgBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetDeletingOrgArray() { return __p.__vector_as_array<byte>(94); }
  /// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2016-04-01
  /// Constraints: No constraints specified.
  public string SourceDate { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDateBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetSourceDateBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetSourceDateArray() { return __p.__vector_as_array<byte>(96); }
  /// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2020-02-26
  /// Constraints: No constraints specified.
  public string RevDate { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRevDateBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetRevDateBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetRevDateArray() { return __p.__vector_as_array<byte>(98); }
  /// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 1991-03-28
  /// Constraints: No constraints specified.
  public string InitRecordDate { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInitRecordDateBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetInitRecordDateBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetInitRecordDateArray() { return __p.__vector_as_array<byte>(100); }
  /// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  public string Keys(int j) { int o = __p.__offset(102); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int KeysLength { get { int o = __p.__offset(102); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  public string Values(int j) { int o = __p.__offset(104); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ValuesLength { get { int o = __p.__offset(104); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Remarks regarding this obstacle.
  /// Example: /// Example: Obstacle remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string ObstacleRemarks { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObstacleRemarksBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetObstacleRemarksBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetObstacleRemarksArray() { return __p.__vector_as_array<byte>(106); }
  /// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-07-11
  /// Constraints: No constraints specified.
  public string NextCycleDate { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNextCycleDateBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetNextCycleDateBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetNextCycleDateArray() { return __p.__vector_as_array<byte>(108); }
  /// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
  /// Example: /// Example: 2024-04-23
  /// Constraints: No constraints specified.
  public string BaselineCutoffDate { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBaselineCutoffDateBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetBaselineCutoffDateBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetBaselineCutoffDateArray() { return __p.__vector_as_array<byte>(110); }
  /// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-05-21
  /// Constraints: No constraints specified.
  public string CutoffDate { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCutoffDateBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetCutoffDateBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetCutoffDateArray() { return __p.__vector_as_array<byte>(112); }
  /// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2406
  /// Constraints: No constraints specified.
  public int AiracCycle { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2405
  /// Constraints: No constraints specified.
  public int BaseAiracCycle { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string OwnerCountryCode { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnerCountryCodeBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetOwnerCountryCodeBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetOwnerCountryCodeArray() { return __p.__vector_as_array<byte>(118); }
  /// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 99.1
  /// Constraints: No constraints specified.
  public double BoundNELon { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 29.1
  /// Constraints: No constraints specified.
  public double BoundNELat { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -144.1
  /// Constraints: No constraints specified.
  public double BoundSWLon { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -44.1
  /// Constraints: No constraints specified.
  public double BoundSWLat { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
  /// Example: /// Example: 20.1
  /// Constraints: No constraints specified.
  public double MinHeightAGL { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of point features associated with this obstruction data set.
  /// Example: /// Example: 21830590
  /// Constraints: No constraints specified.
  public int NumPoints { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of line features associated with this obstruction data set.
  /// Example: /// Example: 45993
  /// Constraints: No constraints specified.
  public int NumLines { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Remarks concerning this obstruction's data set.
  /// Example: /// Example: Data set remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string DataSetRemarks { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataSetRemarksBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetDataSetRemarksBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetDataSetRemarksArray() { return __p.__vector_as_array<byte>(134); }
  /// The name of the point file associated with this obstruction data set.
  /// Example: /// Example: points.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string PointsFilename { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointsFilenameBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetPointsFilenameBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetPointsFilenameArray() { return __p.__vector_as_array<byte>(136); }
  /// The name of the line file associated with this obstruction data set.
  /// Example: /// Example: lines.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string LinesFilename { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLinesFilenameBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetLinesFilenameBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetLinesFilenameArray() { return __p.__vector_as_array<byte>(138); }
  /// The name of the vector file associated with this obstruction data set.
  /// Example: /// Example: vectors.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string VectorsFilename { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVectorsFilenameBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetVectorsFilenameBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetVectorsFilenameArray() { return __p.__vector_as_array<byte>(140); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(142); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(142, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(142); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(142); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(144); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(146); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(148); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(150); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(150, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(150); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(150); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(152); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(154); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public NavigationalObstruction_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(156); return o != 0 ? (NavigationalObstruction_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : NavigationalObstruction_Ingest_dataMode_Enum.REAL; } }

  public static Offset<NavigationalObstruction_Ingest> CreateNavigationalObstruction_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset cycleDateOffset = default(StringOffset),
      StringOffset obstacleTypeOffset = default(StringOffset),
      StringOffset obstacleIdOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset origIdOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset provinceCodeOffset = default(StringOffset),
      double pointLat = 0.0,
      double pointLon = 0.0,
      double lineNELon = 0.0,
      double lineNELat = 0.0,
      double lineSWLon = 0.0,
      double lineSWLat = 0.0,
      int segStartPoint = 0,
      int segEndPoint = 0,
      int segNum = 0,
      StringOffset faccOffset = default(StringOffset),
      StringOffset featureCodeOffset = default(StringOffset),
      StringOffset featureTypeOffset = default(StringOffset),
      StringOffset featureNameOffset = default(StringOffset),
      StringOffset featureDescriptionOffset = default(StringOffset),
      StringOffset wacOffset = default(StringOffset),
      StringOffset wacINNROffset = default(StringOffset),
      StringOffset multObsOffset = default(StringOffset),
      int numObs = 0,
      StringOffset horizDatumCodeOffset = default(StringOffset),
      double heightAGL = 0.0,
      double heightAGLAcc = 0.0,
      double heightMSL = 0.0,
      double heightMSLAcc = 0.0,
      double elevation = 0.0,
      double elevationAcc = 0.0,
      double horizAcc = 0.0,
      StringOffset qualityOffset = default(StringOffset),
      StringOffset lightingCodeOffset = default(StringOffset),
      StringOffset surfaceMatCodeOffset = default(StringOffset),
      int directivityCode = 0,
      int validationCode = 0,
      StringOffset transactionCodeOffset = default(StringOffset),
      StringOffset processCodeOffset = default(StringOffset),
      StringOffset actDelCodeOffset = default(StringOffset),
      StringOffset producerOffset = default(StringOffset),
      StringOffset derivingOrgOffset = default(StringOffset),
      StringOffset deletingOrgOffset = default(StringOffset),
      StringOffset sourceDateOffset = default(StringOffset),
      StringOffset revDateOffset = default(StringOffset),
      StringOffset initRecordDateOffset = default(StringOffset),
      VectorOffset keysOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset),
      StringOffset obstacleRemarksOffset = default(StringOffset),
      StringOffset nextCycleDateOffset = default(StringOffset),
      StringOffset baselineCutoffDateOffset = default(StringOffset),
      StringOffset cutoffDateOffset = default(StringOffset),
      int airacCycle = 0,
      int baseAiracCycle = 0,
      StringOffset ownerCountryCodeOffset = default(StringOffset),
      double boundNELon = 0.0,
      double boundNELat = 0.0,
      double boundSWLon = 0.0,
      double boundSWLat = 0.0,
      double minHeightAGL = 0.0,
      int numPoints = 0,
      int numLines = 0,
      StringOffset dataSetRemarksOffset = default(StringOffset),
      StringOffset pointsFilenameOffset = default(StringOffset),
      StringOffset linesFilenameOffset = default(StringOffset),
      StringOffset vectorsFilenameOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      NavigationalObstruction_Ingest_dataMode_Enum dataMode = NavigationalObstruction_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(77);
    NavigationalObstruction_Ingest.AddMinHeightAGL(builder, minHeightAGL);
    NavigationalObstruction_Ingest.AddBoundSWLat(builder, boundSWLat);
    NavigationalObstruction_Ingest.AddBoundSWLon(builder, boundSWLon);
    NavigationalObstruction_Ingest.AddBoundNELat(builder, boundNELat);
    NavigationalObstruction_Ingest.AddBoundNELon(builder, boundNELon);
    NavigationalObstruction_Ingest.AddHorizAcc(builder, horizAcc);
    NavigationalObstruction_Ingest.AddElevationAcc(builder, elevationAcc);
    NavigationalObstruction_Ingest.AddElevation(builder, elevation);
    NavigationalObstruction_Ingest.AddHeightMSLAcc(builder, heightMSLAcc);
    NavigationalObstruction_Ingest.AddHeightMSL(builder, heightMSL);
    NavigationalObstruction_Ingest.AddHeightAGLAcc(builder, heightAGLAcc);
    NavigationalObstruction_Ingest.AddHeightAGL(builder, heightAGL);
    NavigationalObstruction_Ingest.AddLineSWLat(builder, lineSWLat);
    NavigationalObstruction_Ingest.AddLineSWLon(builder, lineSWLon);
    NavigationalObstruction_Ingest.AddLineNELat(builder, lineNELat);
    NavigationalObstruction_Ingest.AddLineNELon(builder, lineNELon);
    NavigationalObstruction_Ingest.AddPointLon(builder, pointLon);
    NavigationalObstruction_Ingest.AddPointLat(builder, pointLat);
    NavigationalObstruction_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    NavigationalObstruction_Ingest.AddOrigin(builder, originOffset);
    NavigationalObstruction_Ingest.AddSource(builder, sourceOffset);
    NavigationalObstruction_Ingest.AddSourceDL(builder, sourceDLOffset);
    NavigationalObstruction_Ingest.AddCreatedBy(builder, createdByOffset);
    NavigationalObstruction_Ingest.AddCreatedAt(builder, createdAtOffset);
    NavigationalObstruction_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    NavigationalObstruction_Ingest.AddVectorsFilename(builder, vectorsFilenameOffset);
    NavigationalObstruction_Ingest.AddLinesFilename(builder, linesFilenameOffset);
    NavigationalObstruction_Ingest.AddPointsFilename(builder, pointsFilenameOffset);
    NavigationalObstruction_Ingest.AddDataSetRemarks(builder, dataSetRemarksOffset);
    NavigationalObstruction_Ingest.AddNumLines(builder, numLines);
    NavigationalObstruction_Ingest.AddNumPoints(builder, numPoints);
    NavigationalObstruction_Ingest.AddOwnerCountryCode(builder, ownerCountryCodeOffset);
    NavigationalObstruction_Ingest.AddBaseAiracCycle(builder, baseAiracCycle);
    NavigationalObstruction_Ingest.AddAiracCycle(builder, airacCycle);
    NavigationalObstruction_Ingest.AddCutoffDate(builder, cutoffDateOffset);
    NavigationalObstruction_Ingest.AddBaselineCutoffDate(builder, baselineCutoffDateOffset);
    NavigationalObstruction_Ingest.AddNextCycleDate(builder, nextCycleDateOffset);
    NavigationalObstruction_Ingest.AddObstacleRemarks(builder, obstacleRemarksOffset);
    NavigationalObstruction_Ingest.AddValues(builder, valuesOffset);
    NavigationalObstruction_Ingest.AddKeys(builder, keysOffset);
    NavigationalObstruction_Ingest.AddInitRecordDate(builder, initRecordDateOffset);
    NavigationalObstruction_Ingest.AddRevDate(builder, revDateOffset);
    NavigationalObstruction_Ingest.AddSourceDate(builder, sourceDateOffset);
    NavigationalObstruction_Ingest.AddDeletingOrg(builder, deletingOrgOffset);
    NavigationalObstruction_Ingest.AddDerivingOrg(builder, derivingOrgOffset);
    NavigationalObstruction_Ingest.AddProducer(builder, producerOffset);
    NavigationalObstruction_Ingest.AddActDelCode(builder, actDelCodeOffset);
    NavigationalObstruction_Ingest.AddProcessCode(builder, processCodeOffset);
    NavigationalObstruction_Ingest.AddTransactionCode(builder, transactionCodeOffset);
    NavigationalObstruction_Ingest.AddValidationCode(builder, validationCode);
    NavigationalObstruction_Ingest.AddDirectivityCode(builder, directivityCode);
    NavigationalObstruction_Ingest.AddSurfaceMatCode(builder, surfaceMatCodeOffset);
    NavigationalObstruction_Ingest.AddLightingCode(builder, lightingCodeOffset);
    NavigationalObstruction_Ingest.AddQuality(builder, qualityOffset);
    NavigationalObstruction_Ingest.AddHorizDatumCode(builder, horizDatumCodeOffset);
    NavigationalObstruction_Ingest.AddNumObs(builder, numObs);
    NavigationalObstruction_Ingest.AddMultObs(builder, multObsOffset);
    NavigationalObstruction_Ingest.AddWacINNR(builder, wacINNROffset);
    NavigationalObstruction_Ingest.AddWac(builder, wacOffset);
    NavigationalObstruction_Ingest.AddFeatureDescription(builder, featureDescriptionOffset);
    NavigationalObstruction_Ingest.AddFeatureName(builder, featureNameOffset);
    NavigationalObstruction_Ingest.AddFeatureType(builder, featureTypeOffset);
    NavigationalObstruction_Ingest.AddFeatureCode(builder, featureCodeOffset);
    NavigationalObstruction_Ingest.AddFacc(builder, faccOffset);
    NavigationalObstruction_Ingest.AddSegNum(builder, segNum);
    NavigationalObstruction_Ingest.AddSegEndPoint(builder, segEndPoint);
    NavigationalObstruction_Ingest.AddSegStartPoint(builder, segStartPoint);
    NavigationalObstruction_Ingest.AddProvinceCode(builder, provinceCodeOffset);
    NavigationalObstruction_Ingest.AddCountryCode(builder, countryCodeOffset);
    NavigationalObstruction_Ingest.AddOrigId(builder, origIdOffset);
    NavigationalObstruction_Ingest.AddExternalId(builder, externalIdOffset);
    NavigationalObstruction_Ingest.AddObstacleId(builder, obstacleIdOffset);
    NavigationalObstruction_Ingest.AddObstacleType(builder, obstacleTypeOffset);
    NavigationalObstruction_Ingest.AddCycleDate(builder, cycleDateOffset);
    NavigationalObstruction_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    NavigationalObstruction_Ingest.AddId(builder, idOffset);
    NavigationalObstruction_Ingest.AddDataMode(builder, dataMode);
    return NavigationalObstruction_Ingest.EndNavigationalObstruction_Ingest(builder);
  }

  public static void StartNavigationalObstruction_Ingest(FlatBufferBuilder builder) { builder.StartTable(77); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddCycleDate(FlatBufferBuilder builder, StringOffset cycleDateOffset) { builder.AddOffset(2, cycleDateOffset.Value, 0); }
  public static void AddObstacleType(FlatBufferBuilder builder, StringOffset obstacleTypeOffset) { builder.AddOffset(3, obstacleTypeOffset.Value, 0); }
  public static void AddObstacleId(FlatBufferBuilder builder, StringOffset obstacleIdOffset) { builder.AddOffset(4, obstacleIdOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(5, externalIdOffset.Value, 0); }
  public static void AddOrigId(FlatBufferBuilder builder, StringOffset origIdOffset) { builder.AddOffset(6, origIdOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(7, countryCodeOffset.Value, 0); }
  public static void AddProvinceCode(FlatBufferBuilder builder, StringOffset provinceCodeOffset) { builder.AddOffset(8, provinceCodeOffset.Value, 0); }
  public static void AddPointLat(FlatBufferBuilder builder, double pointLat) { builder.AddDouble(9, pointLat, 0.0); }
  public static void AddPointLon(FlatBufferBuilder builder, double pointLon) { builder.AddDouble(10, pointLon, 0.0); }
  public static void AddLineNELon(FlatBufferBuilder builder, double lineNELon) { builder.AddDouble(11, lineNELon, 0.0); }
  public static void AddLineNELat(FlatBufferBuilder builder, double lineNELat) { builder.AddDouble(12, lineNELat, 0.0); }
  public static void AddLineSWLon(FlatBufferBuilder builder, double lineSWLon) { builder.AddDouble(13, lineSWLon, 0.0); }
  public static void AddLineSWLat(FlatBufferBuilder builder, double lineSWLat) { builder.AddDouble(14, lineSWLat, 0.0); }
  public static void AddSegStartPoint(FlatBufferBuilder builder, int segStartPoint) { builder.AddInt(15, segStartPoint, 0); }
  public static void AddSegEndPoint(FlatBufferBuilder builder, int segEndPoint) { builder.AddInt(16, segEndPoint, 0); }
  public static void AddSegNum(FlatBufferBuilder builder, int segNum) { builder.AddInt(17, segNum, 0); }
  public static void AddFacc(FlatBufferBuilder builder, StringOffset faccOffset) { builder.AddOffset(18, faccOffset.Value, 0); }
  public static void AddFeatureCode(FlatBufferBuilder builder, StringOffset featureCodeOffset) { builder.AddOffset(19, featureCodeOffset.Value, 0); }
  public static void AddFeatureType(FlatBufferBuilder builder, StringOffset featureTypeOffset) { builder.AddOffset(20, featureTypeOffset.Value, 0); }
  public static void AddFeatureName(FlatBufferBuilder builder, StringOffset featureNameOffset) { builder.AddOffset(21, featureNameOffset.Value, 0); }
  public static void AddFeatureDescription(FlatBufferBuilder builder, StringOffset featureDescriptionOffset) { builder.AddOffset(22, featureDescriptionOffset.Value, 0); }
  public static void AddWac(FlatBufferBuilder builder, StringOffset wacOffset) { builder.AddOffset(23, wacOffset.Value, 0); }
  public static void AddWacINNR(FlatBufferBuilder builder, StringOffset wacINNROffset) { builder.AddOffset(24, wacINNROffset.Value, 0); }
  public static void AddMultObs(FlatBufferBuilder builder, StringOffset multObsOffset) { builder.AddOffset(25, multObsOffset.Value, 0); }
  public static void AddNumObs(FlatBufferBuilder builder, int numObs) { builder.AddInt(26, numObs, 0); }
  public static void AddHorizDatumCode(FlatBufferBuilder builder, StringOffset horizDatumCodeOffset) { builder.AddOffset(27, horizDatumCodeOffset.Value, 0); }
  public static void AddHeightAGL(FlatBufferBuilder builder, double heightAGL) { builder.AddDouble(28, heightAGL, 0.0); }
  public static void AddHeightAGLAcc(FlatBufferBuilder builder, double heightAGLAcc) { builder.AddDouble(29, heightAGLAcc, 0.0); }
  public static void AddHeightMSL(FlatBufferBuilder builder, double heightMSL) { builder.AddDouble(30, heightMSL, 0.0); }
  public static void AddHeightMSLAcc(FlatBufferBuilder builder, double heightMSLAcc) { builder.AddDouble(31, heightMSLAcc, 0.0); }
  public static void AddElevation(FlatBufferBuilder builder, double elevation) { builder.AddDouble(32, elevation, 0.0); }
  public static void AddElevationAcc(FlatBufferBuilder builder, double elevationAcc) { builder.AddDouble(33, elevationAcc, 0.0); }
  public static void AddHorizAcc(FlatBufferBuilder builder, double horizAcc) { builder.AddDouble(34, horizAcc, 0.0); }
  public static void AddQuality(FlatBufferBuilder builder, StringOffset qualityOffset) { builder.AddOffset(35, qualityOffset.Value, 0); }
  public static void AddLightingCode(FlatBufferBuilder builder, StringOffset lightingCodeOffset) { builder.AddOffset(36, lightingCodeOffset.Value, 0); }
  public static void AddSurfaceMatCode(FlatBufferBuilder builder, StringOffset surfaceMatCodeOffset) { builder.AddOffset(37, surfaceMatCodeOffset.Value, 0); }
  public static void AddDirectivityCode(FlatBufferBuilder builder, int directivityCode) { builder.AddInt(38, directivityCode, 0); }
  public static void AddValidationCode(FlatBufferBuilder builder, int validationCode) { builder.AddInt(39, validationCode, 0); }
  public static void AddTransactionCode(FlatBufferBuilder builder, StringOffset transactionCodeOffset) { builder.AddOffset(40, transactionCodeOffset.Value, 0); }
  public static void AddProcessCode(FlatBufferBuilder builder, StringOffset processCodeOffset) { builder.AddOffset(41, processCodeOffset.Value, 0); }
  public static void AddActDelCode(FlatBufferBuilder builder, StringOffset actDelCodeOffset) { builder.AddOffset(42, actDelCodeOffset.Value, 0); }
  public static void AddProducer(FlatBufferBuilder builder, StringOffset producerOffset) { builder.AddOffset(43, producerOffset.Value, 0); }
  public static void AddDerivingOrg(FlatBufferBuilder builder, StringOffset derivingOrgOffset) { builder.AddOffset(44, derivingOrgOffset.Value, 0); }
  public static void AddDeletingOrg(FlatBufferBuilder builder, StringOffset deletingOrgOffset) { builder.AddOffset(45, deletingOrgOffset.Value, 0); }
  public static void AddSourceDate(FlatBufferBuilder builder, StringOffset sourceDateOffset) { builder.AddOffset(46, sourceDateOffset.Value, 0); }
  public static void AddRevDate(FlatBufferBuilder builder, StringOffset revDateOffset) { builder.AddOffset(47, revDateOffset.Value, 0); }
  public static void AddInitRecordDate(FlatBufferBuilder builder, StringOffset initRecordDateOffset) { builder.AddOffset(48, initRecordDateOffset.Value, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(49, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(50, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObstacleRemarks(FlatBufferBuilder builder, StringOffset obstacleRemarksOffset) { builder.AddOffset(51, obstacleRemarksOffset.Value, 0); }
  public static void AddNextCycleDate(FlatBufferBuilder builder, StringOffset nextCycleDateOffset) { builder.AddOffset(52, nextCycleDateOffset.Value, 0); }
  public static void AddBaselineCutoffDate(FlatBufferBuilder builder, StringOffset baselineCutoffDateOffset) { builder.AddOffset(53, baselineCutoffDateOffset.Value, 0); }
  public static void AddCutoffDate(FlatBufferBuilder builder, StringOffset cutoffDateOffset) { builder.AddOffset(54, cutoffDateOffset.Value, 0); }
  public static void AddAiracCycle(FlatBufferBuilder builder, int airacCycle) { builder.AddInt(55, airacCycle, 0); }
  public static void AddBaseAiracCycle(FlatBufferBuilder builder, int baseAiracCycle) { builder.AddInt(56, baseAiracCycle, 0); }
  public static void AddOwnerCountryCode(FlatBufferBuilder builder, StringOffset ownerCountryCodeOffset) { builder.AddOffset(57, ownerCountryCodeOffset.Value, 0); }
  public static void AddBoundNELon(FlatBufferBuilder builder, double boundNELon) { builder.AddDouble(58, boundNELon, 0.0); }
  public static void AddBoundNELat(FlatBufferBuilder builder, double boundNELat) { builder.AddDouble(59, boundNELat, 0.0); }
  public static void AddBoundSWLon(FlatBufferBuilder builder, double boundSWLon) { builder.AddDouble(60, boundSWLon, 0.0); }
  public static void AddBoundSWLat(FlatBufferBuilder builder, double boundSWLat) { builder.AddDouble(61, boundSWLat, 0.0); }
  public static void AddMinHeightAGL(FlatBufferBuilder builder, double minHeightAGL) { builder.AddDouble(62, minHeightAGL, 0.0); }
  public static void AddNumPoints(FlatBufferBuilder builder, int numPoints) { builder.AddInt(63, numPoints, 0); }
  public static void AddNumLines(FlatBufferBuilder builder, int numLines) { builder.AddInt(64, numLines, 0); }
  public static void AddDataSetRemarks(FlatBufferBuilder builder, StringOffset dataSetRemarksOffset) { builder.AddOffset(65, dataSetRemarksOffset.Value, 0); }
  public static void AddPointsFilename(FlatBufferBuilder builder, StringOffset pointsFilenameOffset) { builder.AddOffset(66, pointsFilenameOffset.Value, 0); }
  public static void AddLinesFilename(FlatBufferBuilder builder, StringOffset linesFilenameOffset) { builder.AddOffset(67, linesFilenameOffset.Value, 0); }
  public static void AddVectorsFilename(FlatBufferBuilder builder, StringOffset vectorsFilenameOffset) { builder.AddOffset(68, vectorsFilenameOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(69, rawFileURIOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(70, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(71, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(72, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(73, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(74, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(75, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, NavigationalObstruction_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(76, (sbyte)dataMode, 0); }
  public static Offset<NavigationalObstruction_Ingest> EndNavigationalObstruction_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<NavigationalObstruction_Ingest>(o);
  }
  public static void FinishNavigationalObstruction_IngestBuffer(FlatBufferBuilder builder, Offset<NavigationalObstruction_Ingest> offset) { builder.Finish(offset.Value, "NAVI"); }
  public static void FinishSizePrefixedNavigationalObstruction_IngestBuffer(FlatBufferBuilder builder, Offset<NavigationalObstruction_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "NAVI"); }
  public NavigationalObstruction_IngestT UnPack() {
    var _o = new NavigationalObstruction_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NavigationalObstruction_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.CycleDate = this.CycleDate;
    _o.ObstacleType = this.ObstacleType;
    _o.ObstacleId = this.ObstacleId;
    _o.ExternalId = this.ExternalId;
    _o.OrigId = this.OrigId;
    _o.CountryCode = this.CountryCode;
    _o.ProvinceCode = this.ProvinceCode;
    _o.PointLat = this.PointLat;
    _o.PointLon = this.PointLon;
    _o.LineNELon = this.LineNELon;
    _o.LineNELat = this.LineNELat;
    _o.LineSWLon = this.LineSWLon;
    _o.LineSWLat = this.LineSWLat;
    _o.SegStartPoint = this.SegStartPoint;
    _o.SegEndPoint = this.SegEndPoint;
    _o.SegNum = this.SegNum;
    _o.Facc = this.Facc;
    _o.FeatureCode = this.FeatureCode;
    _o.FeatureType = this.FeatureType;
    _o.FeatureName = this.FeatureName;
    _o.FeatureDescription = this.FeatureDescription;
    _o.Wac = this.Wac;
    _o.WacINNR = this.WacINNR;
    _o.MultObs = this.MultObs;
    _o.NumObs = this.NumObs;
    _o.HorizDatumCode = this.HorizDatumCode;
    _o.HeightAGL = this.HeightAGL;
    _o.HeightAGLAcc = this.HeightAGLAcc;
    _o.HeightMSL = this.HeightMSL;
    _o.HeightMSLAcc = this.HeightMSLAcc;
    _o.Elevation = this.Elevation;
    _o.ElevationAcc = this.ElevationAcc;
    _o.HorizAcc = this.HorizAcc;
    _o.Quality = this.Quality;
    _o.LightingCode = this.LightingCode;
    _o.SurfaceMatCode = this.SurfaceMatCode;
    _o.DirectivityCode = this.DirectivityCode;
    _o.ValidationCode = this.ValidationCode;
    _o.TransactionCode = this.TransactionCode;
    _o.ProcessCode = this.ProcessCode;
    _o.ActDelCode = this.ActDelCode;
    _o.Producer = this.Producer;
    _o.DerivingOrg = this.DerivingOrg;
    _o.DeletingOrg = this.DeletingOrg;
    _o.SourceDate = this.SourceDate;
    _o.RevDate = this.RevDate;
    _o.InitRecordDate = this.InitRecordDate;
    _o.Keys = new List<string>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j));}
    _o.Values = new List<string>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
    _o.ObstacleRemarks = this.ObstacleRemarks;
    _o.NextCycleDate = this.NextCycleDate;
    _o.BaselineCutoffDate = this.BaselineCutoffDate;
    _o.CutoffDate = this.CutoffDate;
    _o.AiracCycle = this.AiracCycle;
    _o.BaseAiracCycle = this.BaseAiracCycle;
    _o.OwnerCountryCode = this.OwnerCountryCode;
    _o.BoundNELon = this.BoundNELon;
    _o.BoundNELat = this.BoundNELat;
    _o.BoundSWLon = this.BoundSWLon;
    _o.BoundSWLat = this.BoundSWLat;
    _o.MinHeightAGL = this.MinHeightAGL;
    _o.NumPoints = this.NumPoints;
    _o.NumLines = this.NumLines;
    _o.DataSetRemarks = this.DataSetRemarks;
    _o.PointsFilename = this.PointsFilename;
    _o.LinesFilename = this.LinesFilename;
    _o.VectorsFilename = this.VectorsFilename;
    _o.RawFileURI = this.RawFileURI;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<NavigationalObstruction_Ingest> Pack(FlatBufferBuilder builder, NavigationalObstruction_IngestT _o) {
    if (_o == null) return default(Offset<NavigationalObstruction_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _cycleDate = _o.CycleDate == null ? default(StringOffset) : builder.CreateString(_o.CycleDate);
    var _obstacleType = _o.ObstacleType == null ? default(StringOffset) : builder.CreateString(_o.ObstacleType);
    var _obstacleId = _o.ObstacleId == null ? default(StringOffset) : builder.CreateString(_o.ObstacleId);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _origId = _o.OrigId == null ? default(StringOffset) : builder.CreateString(_o.OrigId);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _provinceCode = _o.ProvinceCode == null ? default(StringOffset) : builder.CreateString(_o.ProvinceCode);
    var _facc = _o.Facc == null ? default(StringOffset) : builder.CreateString(_o.Facc);
    var _featureCode = _o.FeatureCode == null ? default(StringOffset) : builder.CreateString(_o.FeatureCode);
    var _featureType = _o.FeatureType == null ? default(StringOffset) : builder.CreateString(_o.FeatureType);
    var _featureName = _o.FeatureName == null ? default(StringOffset) : builder.CreateString(_o.FeatureName);
    var _featureDescription = _o.FeatureDescription == null ? default(StringOffset) : builder.CreateString(_o.FeatureDescription);
    var _wac = _o.Wac == null ? default(StringOffset) : builder.CreateString(_o.Wac);
    var _wacINNR = _o.WacINNR == null ? default(StringOffset) : builder.CreateString(_o.WacINNR);
    var _multObs = _o.MultObs == null ? default(StringOffset) : builder.CreateString(_o.MultObs);
    var _horizDatumCode = _o.HorizDatumCode == null ? default(StringOffset) : builder.CreateString(_o.HorizDatumCode);
    var _quality = _o.Quality == null ? default(StringOffset) : builder.CreateString(_o.Quality);
    var _lightingCode = _o.LightingCode == null ? default(StringOffset) : builder.CreateString(_o.LightingCode);
    var _surfaceMatCode = _o.SurfaceMatCode == null ? default(StringOffset) : builder.CreateString(_o.SurfaceMatCode);
    var _transactionCode = _o.TransactionCode == null ? default(StringOffset) : builder.CreateString(_o.TransactionCode);
    var _processCode = _o.ProcessCode == null ? default(StringOffset) : builder.CreateString(_o.ProcessCode);
    var _actDelCode = _o.ActDelCode == null ? default(StringOffset) : builder.CreateString(_o.ActDelCode);
    var _producer = _o.Producer == null ? default(StringOffset) : builder.CreateString(_o.Producer);
    var _derivingOrg = _o.DerivingOrg == null ? default(StringOffset) : builder.CreateString(_o.DerivingOrg);
    var _deletingOrg = _o.DeletingOrg == null ? default(StringOffset) : builder.CreateString(_o.DeletingOrg);
    var _sourceDate = _o.SourceDate == null ? default(StringOffset) : builder.CreateString(_o.SourceDate);
    var _revDate = _o.RevDate == null ? default(StringOffset) : builder.CreateString(_o.RevDate);
    var _initRecordDate = _o.InitRecordDate == null ? default(StringOffset) : builder.CreateString(_o.InitRecordDate);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new StringOffset[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = builder.CreateString(_o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new StringOffset[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = builder.CreateString(_o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    var _obstacleRemarks = _o.ObstacleRemarks == null ? default(StringOffset) : builder.CreateString(_o.ObstacleRemarks);
    var _nextCycleDate = _o.NextCycleDate == null ? default(StringOffset) : builder.CreateString(_o.NextCycleDate);
    var _baselineCutoffDate = _o.BaselineCutoffDate == null ? default(StringOffset) : builder.CreateString(_o.BaselineCutoffDate);
    var _cutoffDate = _o.CutoffDate == null ? default(StringOffset) : builder.CreateString(_o.CutoffDate);
    var _ownerCountryCode = _o.OwnerCountryCode == null ? default(StringOffset) : builder.CreateString(_o.OwnerCountryCode);
    var _dataSetRemarks = _o.DataSetRemarks == null ? default(StringOffset) : builder.CreateString(_o.DataSetRemarks);
    var _pointsFilename = _o.PointsFilename == null ? default(StringOffset) : builder.CreateString(_o.PointsFilename);
    var _linesFilename = _o.LinesFilename == null ? default(StringOffset) : builder.CreateString(_o.LinesFilename);
    var _vectorsFilename = _o.VectorsFilename == null ? default(StringOffset) : builder.CreateString(_o.VectorsFilename);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateNavigationalObstruction_Ingest(
      builder,
      _id,
      _classificationMarking,
      _cycleDate,
      _obstacleType,
      _obstacleId,
      _externalId,
      _origId,
      _countryCode,
      _provinceCode,
      _o.PointLat,
      _o.PointLon,
      _o.LineNELon,
      _o.LineNELat,
      _o.LineSWLon,
      _o.LineSWLat,
      _o.SegStartPoint,
      _o.SegEndPoint,
      _o.SegNum,
      _facc,
      _featureCode,
      _featureType,
      _featureName,
      _featureDescription,
      _wac,
      _wacINNR,
      _multObs,
      _o.NumObs,
      _horizDatumCode,
      _o.HeightAGL,
      _o.HeightAGLAcc,
      _o.HeightMSL,
      _o.HeightMSLAcc,
      _o.Elevation,
      _o.ElevationAcc,
      _o.HorizAcc,
      _quality,
      _lightingCode,
      _surfaceMatCode,
      _o.DirectivityCode,
      _o.ValidationCode,
      _transactionCode,
      _processCode,
      _actDelCode,
      _producer,
      _derivingOrg,
      _deletingOrg,
      _sourceDate,
      _revDate,
      _initRecordDate,
      _keys,
      _values,
      _obstacleRemarks,
      _nextCycleDate,
      _baselineCutoffDate,
      _cutoffDate,
      _o.AiracCycle,
      _o.BaseAiracCycle,
      _ownerCountryCode,
      _o.BoundNELon,
      _o.BoundNELat,
      _o.BoundSWLon,
      _o.BoundSWLat,
      _o.MinHeightAGL,
      _o.NumPoints,
      _o.NumLines,
      _dataSetRemarks,
      _pointsFilename,
      _linesFilename,
      _vectorsFilename,
      _rawFileURI,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class NavigationalObstruction_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string CycleDate { get; set; }
  public string ObstacleType { get; set; }
  public string ObstacleId { get; set; }
  public string ExternalId { get; set; }
  public string OrigId { get; set; }
  public string CountryCode { get; set; }
  public string ProvinceCode { get; set; }
  public double PointLat { get; set; }
  public double PointLon { get; set; }
  public double LineNELon { get; set; }
  public double LineNELat { get; set; }
  public double LineSWLon { get; set; }
  public double LineSWLat { get; set; }
  public int SegStartPoint { get; set; }
  public int SegEndPoint { get; set; }
  public int SegNum { get; set; }
  public string Facc { get; set; }
  public string FeatureCode { get; set; }
  public string FeatureType { get; set; }
  public string FeatureName { get; set; }
  public string FeatureDescription { get; set; }
  public string Wac { get; set; }
  public string WacINNR { get; set; }
  public string MultObs { get; set; }
  public int NumObs { get; set; }
  public string HorizDatumCode { get; set; }
  public double HeightAGL { get; set; }
  public double HeightAGLAcc { get; set; }
  public double HeightMSL { get; set; }
  public double HeightMSLAcc { get; set; }
  public double Elevation { get; set; }
  public double ElevationAcc { get; set; }
  public double HorizAcc { get; set; }
  public string Quality { get; set; }
  public string LightingCode { get; set; }
  public string SurfaceMatCode { get; set; }
  public int DirectivityCode { get; set; }
  public int ValidationCode { get; set; }
  public string TransactionCode { get; set; }
  public string ProcessCode { get; set; }
  public string ActDelCode { get; set; }
  public string Producer { get; set; }
  public string DerivingOrg { get; set; }
  public string DeletingOrg { get; set; }
  public string SourceDate { get; set; }
  public string RevDate { get; set; }
  public string InitRecordDate { get; set; }
  public List<string> Keys { get; set; }
  public List<string> Values { get; set; }
  public string ObstacleRemarks { get; set; }
  public string NextCycleDate { get; set; }
  public string BaselineCutoffDate { get; set; }
  public string CutoffDate { get; set; }
  public int AiracCycle { get; set; }
  public int BaseAiracCycle { get; set; }
  public string OwnerCountryCode { get; set; }
  public double BoundNELon { get; set; }
  public double BoundNELat { get; set; }
  public double BoundSWLon { get; set; }
  public double BoundSWLat { get; set; }
  public double MinHeightAGL { get; set; }
  public int NumPoints { get; set; }
  public int NumLines { get; set; }
  public string DataSetRemarks { get; set; }
  public string PointsFilename { get; set; }
  public string LinesFilename { get; set; }
  public string VectorsFilename { get; set; }
  public string RawFileURI { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public NavigationalObstruction_Ingest_dataMode_Enum DataMode { get; set; }

  public NavigationalObstruction_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.CycleDate = null;
    this.ObstacleType = null;
    this.ObstacleId = null;
    this.ExternalId = null;
    this.OrigId = null;
    this.CountryCode = null;
    this.ProvinceCode = null;
    this.PointLat = 0.0;
    this.PointLon = 0.0;
    this.LineNELon = 0.0;
    this.LineNELat = 0.0;
    this.LineSWLon = 0.0;
    this.LineSWLat = 0.0;
    this.SegStartPoint = 0;
    this.SegEndPoint = 0;
    this.SegNum = 0;
    this.Facc = null;
    this.FeatureCode = null;
    this.FeatureType = null;
    this.FeatureName = null;
    this.FeatureDescription = null;
    this.Wac = null;
    this.WacINNR = null;
    this.MultObs = null;
    this.NumObs = 0;
    this.HorizDatumCode = null;
    this.HeightAGL = 0.0;
    this.HeightAGLAcc = 0.0;
    this.HeightMSL = 0.0;
    this.HeightMSLAcc = 0.0;
    this.Elevation = 0.0;
    this.ElevationAcc = 0.0;
    this.HorizAcc = 0.0;
    this.Quality = null;
    this.LightingCode = null;
    this.SurfaceMatCode = null;
    this.DirectivityCode = 0;
    this.ValidationCode = 0;
    this.TransactionCode = null;
    this.ProcessCode = null;
    this.ActDelCode = null;
    this.Producer = null;
    this.DerivingOrg = null;
    this.DeletingOrg = null;
    this.SourceDate = null;
    this.RevDate = null;
    this.InitRecordDate = null;
    this.Keys = null;
    this.Values = null;
    this.ObstacleRemarks = null;
    this.NextCycleDate = null;
    this.BaselineCutoffDate = null;
    this.CutoffDate = null;
    this.AiracCycle = 0;
    this.BaseAiracCycle = 0;
    this.OwnerCountryCode = null;
    this.BoundNELon = 0.0;
    this.BoundNELat = 0.0;
    this.BoundSWLon = 0.0;
    this.BoundSWLat = 0.0;
    this.MinHeightAGL = 0.0;
    this.NumPoints = 0;
    this.NumLines = 0;
    this.DataSetRemarks = null;
    this.PointsFilename = null;
    this.LinesFilename = null;
    this.VectorsFilename = null;
    this.RawFileURI = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = NavigationalObstruction_Ingest_dataMode_Enum.REAL;
  }
  public static NavigationalObstruction_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return NavigationalObstruction_Ingest.GetRootAsNavigationalObstruction_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    NavigationalObstruction_Ingest.FinishNavigationalObstruction_IngestBuffer(fbb, NavigationalObstruction_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class NavigationalObstruction_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*CycleDate*/, false)
      && verifier.VerifyString(tablePos, 10 /*ObstacleType*/, false)
      && verifier.VerifyString(tablePos, 12 /*ObstacleId*/, false)
      && verifier.VerifyString(tablePos, 14 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 16 /*OrigId*/, false)
      && verifier.VerifyString(tablePos, 18 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 20 /*ProvinceCode*/, false)
      && verifier.VerifyField(tablePos, 22 /*PointLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*PointLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*LineNELon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*LineNELat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*LineSWLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*LineSWLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*SegStartPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*SegEndPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*SegNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 40 /*Facc*/, false)
      && verifier.VerifyString(tablePos, 42 /*FeatureCode*/, false)
      && verifier.VerifyString(tablePos, 44 /*FeatureType*/, false)
      && verifier.VerifyString(tablePos, 46 /*FeatureName*/, false)
      && verifier.VerifyString(tablePos, 48 /*FeatureDescription*/, false)
      && verifier.VerifyString(tablePos, 50 /*Wac*/, false)
      && verifier.VerifyString(tablePos, 52 /*WacINNR*/, false)
      && verifier.VerifyString(tablePos, 54 /*MultObs*/, false)
      && verifier.VerifyField(tablePos, 56 /*NumObs*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 58 /*HorizDatumCode*/, false)
      && verifier.VerifyField(tablePos, 60 /*HeightAGL*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*HeightAGLAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*HeightMSL*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*HeightMSLAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*Elevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*ElevationAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*HorizAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 74 /*Quality*/, false)
      && verifier.VerifyString(tablePos, 76 /*LightingCode*/, false)
      && verifier.VerifyString(tablePos, 78 /*SurfaceMatCode*/, false)
      && verifier.VerifyField(tablePos, 80 /*DirectivityCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*ValidationCode*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 84 /*TransactionCode*/, false)
      && verifier.VerifyString(tablePos, 86 /*ProcessCode*/, false)
      && verifier.VerifyString(tablePos, 88 /*ActDelCode*/, false)
      && verifier.VerifyString(tablePos, 90 /*Producer*/, false)
      && verifier.VerifyString(tablePos, 92 /*DerivingOrg*/, false)
      && verifier.VerifyString(tablePos, 94 /*DeletingOrg*/, false)
      && verifier.VerifyString(tablePos, 96 /*SourceDate*/, false)
      && verifier.VerifyString(tablePos, 98 /*RevDate*/, false)
      && verifier.VerifyString(tablePos, 100 /*InitRecordDate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 102 /*Keys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 104 /*Values*/, false)
      && verifier.VerifyString(tablePos, 106 /*ObstacleRemarks*/, false)
      && verifier.VerifyString(tablePos, 108 /*NextCycleDate*/, false)
      && verifier.VerifyString(tablePos, 110 /*BaselineCutoffDate*/, false)
      && verifier.VerifyString(tablePos, 112 /*CutoffDate*/, false)
      && verifier.VerifyField(tablePos, 114 /*AiracCycle*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*BaseAiracCycle*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 118 /*OwnerCountryCode*/, false)
      && verifier.VerifyField(tablePos, 120 /*BoundNELon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*BoundNELat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*BoundSWLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*BoundSWLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*MinHeightAGL*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*NumPoints*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 132 /*NumLines*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 134 /*DataSetRemarks*/, false)
      && verifier.VerifyString(tablePos, 136 /*PointsFilename*/, false)
      && verifier.VerifyString(tablePos, 138 /*LinesFilename*/, false)
      && verifier.VerifyString(tablePos, 140 /*VectorsFilename*/, false)
      && verifier.VerifyString(tablePos, 142 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 144 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 146 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 148 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 150 /*Source*/, false)
      && verifier.VerifyString(tablePos, 152 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 154 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 156 /*DataMode*/, 1 /*NavigationalObstruction_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
