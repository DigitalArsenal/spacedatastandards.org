// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A single space environment observation.
public struct SEObservation_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SEObservation_Ingest GetRootAsSEObservation_Ingest(ByteBuffer _bb) { return GetRootAsSEObservation_Ingest(_bb, new SEObservation_Ingest()); }
  public static SEObservation_Ingest GetRootAsSEObservation_Ingest(ByteBuffer _bb, SEObservation_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SEObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SEOB"); }
  public static bool VerifySEObservation_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SEOB", false, SEObservation_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SEObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The type of observation associated with this record.
  /// Example: /// Example: INTEGRAL FLUX
  /// Constraints: Minimum length = 1, Maximum length = 24
  public string ObType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetObTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetObTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
  /// Example: /// Example: particles/cm^2/s/sr
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string ObUoM { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObUoMBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetObUoMBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetObUoMArray() { return __p.__vector_as_array<byte>(6); }
  /// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: 0.487687826
  /// Constraints: No constraints specified.
  public double ObValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: C1.3
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ObString { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObStringBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetObStringBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetObStringArray() { return __p.__vector_as_array<byte>(10); }
  /// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
  /// Constraints: No constraints specified.
  public string ObArray(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ObArrayLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool ObBool { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ObQuality { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObQualityBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetObQualityBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetObQualityArray() { return __p.__vector_as_array<byte>(16); }
  /// Descriptive or additional information associated with this individual observation.
  /// Example: /// Example: Observation Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string ObDescription { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetObDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetObDescriptionArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<SEObservation_Ingest> CreateSEObservation_Ingest(FlatBufferBuilder builder,
      StringOffset obTypeOffset = default(StringOffset),
      StringOffset obUoMOffset = default(StringOffset),
      double obValue = 0.0,
      StringOffset obStringOffset = default(StringOffset),
      VectorOffset obArrayOffset = default(VectorOffset),
      bool obBool = false,
      StringOffset obQualityOffset = default(StringOffset),
      StringOffset obDescriptionOffset = default(StringOffset)) {
    builder.StartTable(8);
    SEObservation_Ingest.AddObValue(builder, obValue);
    SEObservation_Ingest.AddObDescription(builder, obDescriptionOffset);
    SEObservation_Ingest.AddObQuality(builder, obQualityOffset);
    SEObservation_Ingest.AddObArray(builder, obArrayOffset);
    SEObservation_Ingest.AddObString(builder, obStringOffset);
    SEObservation_Ingest.AddObUoM(builder, obUoMOffset);
    SEObservation_Ingest.AddObType(builder, obTypeOffset);
    SEObservation_Ingest.AddObBool(builder, obBool);
    return SEObservation_Ingest.EndSEObservation_Ingest(builder);
  }

  public static void StartSEObservation_Ingest(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddObType(FlatBufferBuilder builder, StringOffset obTypeOffset) { builder.AddOffset(0, obTypeOffset.Value, 0); }
  public static void AddObUoM(FlatBufferBuilder builder, StringOffset obUoMOffset) { builder.AddOffset(1, obUoMOffset.Value, 0); }
  public static void AddObValue(FlatBufferBuilder builder, double obValue) { builder.AddDouble(2, obValue, 0.0); }
  public static void AddObString(FlatBufferBuilder builder, StringOffset obStringOffset) { builder.AddOffset(3, obStringOffset.Value, 0); }
  public static void AddObArray(FlatBufferBuilder builder, VectorOffset obArrayOffset) { builder.AddOffset(4, obArrayOffset.Value, 0); }
  public static VectorOffset CreateObArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObBool(FlatBufferBuilder builder, bool obBool) { builder.AddBool(5, obBool, false); }
  public static void AddObQuality(FlatBufferBuilder builder, StringOffset obQualityOffset) { builder.AddOffset(6, obQualityOffset.Value, 0); }
  public static void AddObDescription(FlatBufferBuilder builder, StringOffset obDescriptionOffset) { builder.AddOffset(7, obDescriptionOffset.Value, 0); }
  public static Offset<SEObservation_Ingest> EndSEObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SEObservation_Ingest>(o);
  }
  public static void FinishSEObservation_IngestBuffer(FlatBufferBuilder builder, Offset<SEObservation_Ingest> offset) { builder.Finish(offset.Value, "SEOB"); }
  public static void FinishSizePrefixedSEObservation_IngestBuffer(FlatBufferBuilder builder, Offset<SEObservation_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SEOB"); }
  public SEObservation_IngestT UnPack() {
    var _o = new SEObservation_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SEObservation_IngestT _o) {
    _o.ObType = this.ObType;
    _o.ObUoM = this.ObUoM;
    _o.ObValue = this.ObValue;
    _o.ObString = this.ObString;
    _o.ObArray = new List<string>();
    for (var _j = 0; _j < this.ObArrayLength; ++_j) {_o.ObArray.Add(this.ObArray(_j));}
    _o.ObBool = this.ObBool;
    _o.ObQuality = this.ObQuality;
    _o.ObDescription = this.ObDescription;
  }
  public static Offset<SEObservation_Ingest> Pack(FlatBufferBuilder builder, SEObservation_IngestT _o) {
    if (_o == null) return default(Offset<SEObservation_Ingest>);
    var _obType = _o.ObType == null ? default(StringOffset) : builder.CreateString(_o.ObType);
    var _obUoM = _o.ObUoM == null ? default(StringOffset) : builder.CreateString(_o.ObUoM);
    var _obString = _o.ObString == null ? default(StringOffset) : builder.CreateString(_o.ObString);
    var _obArray = default(VectorOffset);
    if (_o.ObArray != null) {
      var __obArray = new StringOffset[_o.ObArray.Count];
      for (var _j = 0; _j < __obArray.Length; ++_j) { __obArray[_j] = builder.CreateString(_o.ObArray[_j]); }
      _obArray = CreateObArrayVector(builder, __obArray);
    }
    var _obQuality = _o.ObQuality == null ? default(StringOffset) : builder.CreateString(_o.ObQuality);
    var _obDescription = _o.ObDescription == null ? default(StringOffset) : builder.CreateString(_o.ObDescription);
    return CreateSEObservation_Ingest(
      builder,
      _obType,
      _obUoM,
      _o.ObValue,
      _obString,
      _obArray,
      _o.ObBool,
      _obQuality,
      _obDescription);
  }
}

public class SEObservation_IngestT
{
  public string ObType { get; set; }
  public string ObUoM { get; set; }
  public double ObValue { get; set; }
  public string ObString { get; set; }
  public List<string> ObArray { get; set; }
  public bool ObBool { get; set; }
  public string ObQuality { get; set; }
  public string ObDescription { get; set; }

  public SEObservation_IngestT() {
    this.ObType = null;
    this.ObUoM = null;
    this.ObValue = 0.0;
    this.ObString = null;
    this.ObArray = null;
    this.ObBool = false;
    this.ObQuality = null;
    this.ObDescription = null;
  }
  public static SEObservation_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SEObservation_Ingest.GetRootAsSEObservation_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SEObservation_Ingest.FinishSEObservation_IngestBuffer(fbb, SEObservation_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SEObservation_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ObType*/, false)
      && verifier.VerifyString(tablePos, 6 /*ObUoM*/, false)
      && verifier.VerifyField(tablePos, 8 /*ObValue*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*ObString*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*ObArray*/, false)
      && verifier.VerifyField(tablePos, 14 /*ObBool*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 16 /*ObQuality*/, false)
      && verifier.VerifyString(tablePos, 18 /*ObDescription*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
