// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of Requirements associated with this Air Transport Mission.
public struct AircraftMissionRequirements_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionRequirements_Abridged GetRootAsAircraftMissionRequirements_Abridged(ByteBuffer _bb) { return GetRootAsAircraftMissionRequirements_Abridged(_bb, new AircraftMissionRequirements_Abridged()); }
  public static AircraftMissionRequirements_Abridged GetRootAsAircraftMissionRequirements_Abridged(ByteBuffer _bb, AircraftMissionRequirements_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftMissionRequirements_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftMissionRequirements_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftMissionRequirements_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftMissionRequirements_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Global Decision Support System (GDSS) mission requirement identifier.
  /// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string GdssReqId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGdssReqIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGdssReqIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGdssReqIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the onload itinerary location.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  public int OnloadId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Onload location code.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string OnloadLOCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnloadLOCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOnloadLOCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOnloadLOCodeArray() { return __p.__vector_as_array<byte>(8); }
  /// Identifier of the offload itinerary location.
  /// Example: /// Example: 300
  /// Constraints: No constraints specified.
  public int OffloadId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Offload location code.
  /// Example: /// Example: KHOP
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string OffloadLOCode { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOffloadLOCodeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOffloadLOCodeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOffloadLOCodeArray() { return __p.__vector_as_array<byte>(12); }
  /// Unit line number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Uln { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUlnBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUlnBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUlnArray() { return __p.__vector_as_array<byte>(14); }
  /// Transportation requirement number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string TransReqNum { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransReqNumBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTransReqNumBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTransReqNumArray() { return __p.__vector_as_array<byte>(16); }
  /// Project name.
  /// Example: /// Example: CENTINTRA21
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string ProjName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProjNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetProjNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetProjNameArray() { return __p.__vector_as_array<byte>(18); }
  /// Identification number of the Operation Plan (OPLAN) associated with this mission.
  /// Example: /// Example: 5027
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Oplan { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOplanBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOplanBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOplanArray() { return __p.__vector_as_array<byte>(20); }
  /// Number of passengers associated with the mission.
  /// Example: /// Example: 44
  /// Constraints: No constraints specified.
  public int NumPax { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of litter patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumLitter { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of ambulatory patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumAmbulatory { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of attendants tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumAttendant { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Total weight of the bulk cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  public double BulkWeight { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total weight of the oversized cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  public double OversizeWeight { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total weight of the outsize cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  public double OutsizeWeight { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Earliest available date the cargo can be picked up.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  public string Ead { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEadBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEadBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEadArray() { return __p.__vector_as_array<byte>(36); }
  /// Latest available date the cargo may be delivered.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  public string Lad { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLadBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetLadBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetLadArray() { return __p.__vector_as_array<byte>(38); }

  public static Offset<AircraftMissionRequirements_Abridged> CreateAircraftMissionRequirements_Abridged(FlatBufferBuilder builder,
      StringOffset gdssReqIdOffset = default(StringOffset),
      int onloadId = 0,
      StringOffset onloadLOCodeOffset = default(StringOffset),
      int offloadId = 0,
      StringOffset offloadLOCodeOffset = default(StringOffset),
      StringOffset ulnOffset = default(StringOffset),
      StringOffset transReqNumOffset = default(StringOffset),
      StringOffset projNameOffset = default(StringOffset),
      StringOffset oplanOffset = default(StringOffset),
      int numPax = 0,
      int numLitter = 0,
      int numAmbulatory = 0,
      int numAttendant = 0,
      double bulkWeight = 0.0,
      double oversizeWeight = 0.0,
      double outsizeWeight = 0.0,
      StringOffset eadOffset = default(StringOffset),
      StringOffset ladOffset = default(StringOffset)) {
    builder.StartTable(18);
    AircraftMissionRequirements_Abridged.AddOutsizeWeight(builder, outsizeWeight);
    AircraftMissionRequirements_Abridged.AddOversizeWeight(builder, oversizeWeight);
    AircraftMissionRequirements_Abridged.AddBulkWeight(builder, bulkWeight);
    AircraftMissionRequirements_Abridged.AddLad(builder, ladOffset);
    AircraftMissionRequirements_Abridged.AddEad(builder, eadOffset);
    AircraftMissionRequirements_Abridged.AddNumAttendant(builder, numAttendant);
    AircraftMissionRequirements_Abridged.AddNumAmbulatory(builder, numAmbulatory);
    AircraftMissionRequirements_Abridged.AddNumLitter(builder, numLitter);
    AircraftMissionRequirements_Abridged.AddNumPax(builder, numPax);
    AircraftMissionRequirements_Abridged.AddOplan(builder, oplanOffset);
    AircraftMissionRequirements_Abridged.AddProjName(builder, projNameOffset);
    AircraftMissionRequirements_Abridged.AddTransReqNum(builder, transReqNumOffset);
    AircraftMissionRequirements_Abridged.AddUln(builder, ulnOffset);
    AircraftMissionRequirements_Abridged.AddOffloadLOCode(builder, offloadLOCodeOffset);
    AircraftMissionRequirements_Abridged.AddOffloadId(builder, offloadId);
    AircraftMissionRequirements_Abridged.AddOnloadLOCode(builder, onloadLOCodeOffset);
    AircraftMissionRequirements_Abridged.AddOnloadId(builder, onloadId);
    AircraftMissionRequirements_Abridged.AddGdssReqId(builder, gdssReqIdOffset);
    return AircraftMissionRequirements_Abridged.EndAircraftMissionRequirements_Abridged(builder);
  }

  public static void StartAircraftMissionRequirements_Abridged(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddGdssReqId(FlatBufferBuilder builder, StringOffset gdssReqIdOffset) { builder.AddOffset(0, gdssReqIdOffset.Value, 0); }
  public static void AddOnloadId(FlatBufferBuilder builder, int onloadId) { builder.AddInt(1, onloadId, 0); }
  public static void AddOnloadLOCode(FlatBufferBuilder builder, StringOffset onloadLOCodeOffset) { builder.AddOffset(2, onloadLOCodeOffset.Value, 0); }
  public static void AddOffloadId(FlatBufferBuilder builder, int offloadId) { builder.AddInt(3, offloadId, 0); }
  public static void AddOffloadLOCode(FlatBufferBuilder builder, StringOffset offloadLOCodeOffset) { builder.AddOffset(4, offloadLOCodeOffset.Value, 0); }
  public static void AddUln(FlatBufferBuilder builder, StringOffset ulnOffset) { builder.AddOffset(5, ulnOffset.Value, 0); }
  public static void AddTransReqNum(FlatBufferBuilder builder, StringOffset transReqNumOffset) { builder.AddOffset(6, transReqNumOffset.Value, 0); }
  public static void AddProjName(FlatBufferBuilder builder, StringOffset projNameOffset) { builder.AddOffset(7, projNameOffset.Value, 0); }
  public static void AddOplan(FlatBufferBuilder builder, StringOffset oplanOffset) { builder.AddOffset(8, oplanOffset.Value, 0); }
  public static void AddNumPax(FlatBufferBuilder builder, int numPax) { builder.AddInt(9, numPax, 0); }
  public static void AddNumLitter(FlatBufferBuilder builder, int numLitter) { builder.AddInt(10, numLitter, 0); }
  public static void AddNumAmbulatory(FlatBufferBuilder builder, int numAmbulatory) { builder.AddInt(11, numAmbulatory, 0); }
  public static void AddNumAttendant(FlatBufferBuilder builder, int numAttendant) { builder.AddInt(12, numAttendant, 0); }
  public static void AddBulkWeight(FlatBufferBuilder builder, double bulkWeight) { builder.AddDouble(13, bulkWeight, 0.0); }
  public static void AddOversizeWeight(FlatBufferBuilder builder, double oversizeWeight) { builder.AddDouble(14, oversizeWeight, 0.0); }
  public static void AddOutsizeWeight(FlatBufferBuilder builder, double outsizeWeight) { builder.AddDouble(15, outsizeWeight, 0.0); }
  public static void AddEad(FlatBufferBuilder builder, StringOffset eadOffset) { builder.AddOffset(16, eadOffset.Value, 0); }
  public static void AddLad(FlatBufferBuilder builder, StringOffset ladOffset) { builder.AddOffset(17, ladOffset.Value, 0); }
  public static Offset<AircraftMissionRequirements_Abridged> EndAircraftMissionRequirements_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftMissionRequirements_Abridged>(o);
  }
  public static void FinishAircraftMissionRequirements_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftMissionRequirements_Abridged> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftMissionRequirements_AbridgedBuffer(FlatBufferBuilder builder, Offset<AircraftMissionRequirements_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftMissionRequirements_AbridgedT UnPack() {
    var _o = new AircraftMissionRequirements_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftMissionRequirements_AbridgedT _o) {
    _o.GdssReqId = this.GdssReqId;
    _o.OnloadId = this.OnloadId;
    _o.OnloadLOCode = this.OnloadLOCode;
    _o.OffloadId = this.OffloadId;
    _o.OffloadLOCode = this.OffloadLOCode;
    _o.Uln = this.Uln;
    _o.TransReqNum = this.TransReqNum;
    _o.ProjName = this.ProjName;
    _o.Oplan = this.Oplan;
    _o.NumPax = this.NumPax;
    _o.NumLitter = this.NumLitter;
    _o.NumAmbulatory = this.NumAmbulatory;
    _o.NumAttendant = this.NumAttendant;
    _o.BulkWeight = this.BulkWeight;
    _o.OversizeWeight = this.OversizeWeight;
    _o.OutsizeWeight = this.OutsizeWeight;
    _o.Ead = this.Ead;
    _o.Lad = this.Lad;
  }
  public static Offset<AircraftMissionRequirements_Abridged> Pack(FlatBufferBuilder builder, AircraftMissionRequirements_AbridgedT _o) {
    if (_o == null) return default(Offset<AircraftMissionRequirements_Abridged>);
    var _gdssReqId = _o.GdssReqId == null ? default(StringOffset) : builder.CreateString(_o.GdssReqId);
    var _onloadLOCode = _o.OnloadLOCode == null ? default(StringOffset) : builder.CreateString(_o.OnloadLOCode);
    var _offloadLOCode = _o.OffloadLOCode == null ? default(StringOffset) : builder.CreateString(_o.OffloadLOCode);
    var _uln = _o.Uln == null ? default(StringOffset) : builder.CreateString(_o.Uln);
    var _transReqNum = _o.TransReqNum == null ? default(StringOffset) : builder.CreateString(_o.TransReqNum);
    var _projName = _o.ProjName == null ? default(StringOffset) : builder.CreateString(_o.ProjName);
    var _oplan = _o.Oplan == null ? default(StringOffset) : builder.CreateString(_o.Oplan);
    var _ead = _o.Ead == null ? default(StringOffset) : builder.CreateString(_o.Ead);
    var _lad = _o.Lad == null ? default(StringOffset) : builder.CreateString(_o.Lad);
    return CreateAircraftMissionRequirements_Abridged(
      builder,
      _gdssReqId,
      _o.OnloadId,
      _onloadLOCode,
      _o.OffloadId,
      _offloadLOCode,
      _uln,
      _transReqNum,
      _projName,
      _oplan,
      _o.NumPax,
      _o.NumLitter,
      _o.NumAmbulatory,
      _o.NumAttendant,
      _o.BulkWeight,
      _o.OversizeWeight,
      _o.OutsizeWeight,
      _ead,
      _lad);
  }
}

public class AircraftMissionRequirements_AbridgedT
{
  public string GdssReqId { get; set; }
  public int OnloadId { get; set; }
  public string OnloadLOCode { get; set; }
  public int OffloadId { get; set; }
  public string OffloadLOCode { get; set; }
  public string Uln { get; set; }
  public string TransReqNum { get; set; }
  public string ProjName { get; set; }
  public string Oplan { get; set; }
  public int NumPax { get; set; }
  public int NumLitter { get; set; }
  public int NumAmbulatory { get; set; }
  public int NumAttendant { get; set; }
  public double BulkWeight { get; set; }
  public double OversizeWeight { get; set; }
  public double OutsizeWeight { get; set; }
  public string Ead { get; set; }
  public string Lad { get; set; }

  public AircraftMissionRequirements_AbridgedT() {
    this.GdssReqId = null;
    this.OnloadId = 0;
    this.OnloadLOCode = null;
    this.OffloadId = 0;
    this.OffloadLOCode = null;
    this.Uln = null;
    this.TransReqNum = null;
    this.ProjName = null;
    this.Oplan = null;
    this.NumPax = 0;
    this.NumLitter = 0;
    this.NumAmbulatory = 0;
    this.NumAttendant = 0;
    this.BulkWeight = 0.0;
    this.OversizeWeight = 0.0;
    this.OutsizeWeight = 0.0;
    this.Ead = null;
    this.Lad = null;
  }
  public static AircraftMissionRequirements_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftMissionRequirements_Abridged.GetRootAsAircraftMissionRequirements_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftMissionRequirements_Abridged.FinishAircraftMissionRequirements_AbridgedBuffer(fbb, AircraftMissionRequirements_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftMissionRequirements_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*GdssReqId*/, false)
      && verifier.VerifyField(tablePos, 6 /*OnloadId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*OnloadLOCode*/, false)
      && verifier.VerifyField(tablePos, 10 /*OffloadId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OffloadLOCode*/, false)
      && verifier.VerifyString(tablePos, 14 /*Uln*/, false)
      && verifier.VerifyString(tablePos, 16 /*TransReqNum*/, false)
      && verifier.VerifyString(tablePos, 18 /*ProjName*/, false)
      && verifier.VerifyString(tablePos, 20 /*Oplan*/, false)
      && verifier.VerifyField(tablePos, 22 /*NumPax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*NumLitter*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*NumAmbulatory*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*NumAttendant*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*BulkWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*OversizeWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*OutsizeWeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 36 /*Ead*/, false)
      && verifier.VerifyString(tablePos, 38 /*Lad*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
