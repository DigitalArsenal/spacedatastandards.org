// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model object representing on-orbit objects or satellites in the system.
public struct Onorbit_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Onorbit_Ingest GetRootAsOnorbit_Ingest(ByteBuffer _bb) { return GetRootAsOnorbit_Ingest(_bb, new Onorbit_Ingest()); }
  public static Onorbit_Ingest GetRootAsOnorbit_Ingest(ByteBuffer _bb, Onorbit_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Onorbit_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ONOR"); }
  public static bool VerifyOnorbit_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ONOR", false, Onorbit_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Onorbit_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Common name of the on-orbit object.
  /// Example: /// Example: Example common name
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string CommonName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommonNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCommonNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCommonNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Constellation to which this satellite belongs.
  /// Example: /// Example: Big Dipper
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Constellation { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConstellationBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetConstellationBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetConstellationArray() { return __p.__vector_as_array<byte>(12); }
  /// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
  /// Example: /// Example: 2021123ABC
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string IntlDes { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIntlDesBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIntlDesBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIntlDesArray() { return __p.__vector_as_array<byte>(14); }
  /// Date of launch.
  /// Example: /// Example: 2018-01-01
  /// Constraints: No constraints specified.
  public string LaunchDate { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLaunchDateBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLaunchDateBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLaunchDateArray() { return __p.__vector_as_array<byte>(16); }
  /// Date of decay.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string DecayDate { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDecayDateBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDecayDateBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDecayDateArray() { return __p.__vector_as_array<byte>(18); }
  /// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
  /// Example: /// Example: PAYLOAD
  /// Constraints: Minimum length = 0, Maximum length = 32
  public Onorbit_Ingest_objectType_Enum ObjectType { get { int o = __p.__offset(20); return o != 0 ? (Onorbit_Ingest_objectType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Onorbit_Ingest_objectType_Enum.ROCKET_BODY; } }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(22); }
  /// Mission number of the on-orbit object.
  /// Example: /// Example: Expedition 1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string MissionNumber { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionNumberBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetMissionNumberBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetMissionNumberArray() { return __p.__vector_as_array<byte>(24); }
  /// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
  /// Example: /// Example: Lunar
  /// Constraints: Minimum length = 0, Maximum length = 45
  public Onorbit_Ingest_category_Enum Category { get { int o = __p.__offset(26); return o != 0 ? (Onorbit_Ingest_category_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Onorbit_Ingest_category_Enum.UNKNOWN; } }
  /// Estimated lifetime of the on-orbit payload, if known.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int LifetimeYears { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Alternate name of the on-orbit object.
  /// Example: /// Example: Alternate Name
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AltName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetAltNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetAltNameArray() { return __p.__vector_as_array<byte>(30); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(32); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(34); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(36); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Onorbit_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(38); return o != 0 ? (Onorbit_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Onorbit_Ingest_dataMode_Enum.REAL; } }
  /// Id of the associated launchSite entity.
  /// Example: /// Example: LAUNCHSITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string LaunchSiteId { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLaunchSiteIdBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetLaunchSiteIdBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetLaunchSiteIdArray() { return __p.__vector_as_array<byte>(40); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: No constraints specified.
  public string CountryCode { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(42); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(44); }

  public static Offset<Onorbit_Ingest> CreateOnorbit_Ingest(FlatBufferBuilder builder,
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int satNo = 0,
      StringOffset commonNameOffset = default(StringOffset),
      StringOffset constellationOffset = default(StringOffset),
      StringOffset intlDesOffset = default(StringOffset),
      StringOffset launchDateOffset = default(StringOffset),
      StringOffset decayDateOffset = default(StringOffset),
      Onorbit_Ingest_objectType_Enum objectType = Onorbit_Ingest_objectType_Enum.ROCKET_BODY,
      StringOffset originOffset = default(StringOffset),
      StringOffset missionNumberOffset = default(StringOffset),
      Onorbit_Ingest_category_Enum category = Onorbit_Ingest_category_Enum.UNKNOWN,
      int lifetimeYears = 0,
      StringOffset altNameOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      Onorbit_Ingest_dataMode_Enum dataMode = Onorbit_Ingest_dataMode_Enum.REAL,
      StringOffset launchSiteIdOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(21);
    Onorbit_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Onorbit_Ingest.AddCountryCode(builder, countryCodeOffset);
    Onorbit_Ingest.AddLaunchSiteId(builder, launchSiteIdOffset);
    Onorbit_Ingest.AddSource(builder, sourceOffset);
    Onorbit_Ingest.AddCreatedBy(builder, createdByOffset);
    Onorbit_Ingest.AddCreatedAt(builder, createdAtOffset);
    Onorbit_Ingest.AddAltName(builder, altNameOffset);
    Onorbit_Ingest.AddLifetimeYears(builder, lifetimeYears);
    Onorbit_Ingest.AddMissionNumber(builder, missionNumberOffset);
    Onorbit_Ingest.AddOrigin(builder, originOffset);
    Onorbit_Ingest.AddDecayDate(builder, decayDateOffset);
    Onorbit_Ingest.AddLaunchDate(builder, launchDateOffset);
    Onorbit_Ingest.AddIntlDes(builder, intlDesOffset);
    Onorbit_Ingest.AddConstellation(builder, constellationOffset);
    Onorbit_Ingest.AddCommonName(builder, commonNameOffset);
    Onorbit_Ingest.AddSatNo(builder, satNo);
    Onorbit_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Onorbit_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    Onorbit_Ingest.AddDataMode(builder, dataMode);
    Onorbit_Ingest.AddCategory(builder, category);
    Onorbit_Ingest.AddObjectType(builder, objectType);
    return Onorbit_Ingest.EndOnorbit_Ingest(builder);
  }

  public static void StartOnorbit_Ingest(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(0, idOnOrbitOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(2, satNo, 0); }
  public static void AddCommonName(FlatBufferBuilder builder, StringOffset commonNameOffset) { builder.AddOffset(3, commonNameOffset.Value, 0); }
  public static void AddConstellation(FlatBufferBuilder builder, StringOffset constellationOffset) { builder.AddOffset(4, constellationOffset.Value, 0); }
  public static void AddIntlDes(FlatBufferBuilder builder, StringOffset intlDesOffset) { builder.AddOffset(5, intlDesOffset.Value, 0); }
  public static void AddLaunchDate(FlatBufferBuilder builder, StringOffset launchDateOffset) { builder.AddOffset(6, launchDateOffset.Value, 0); }
  public static void AddDecayDate(FlatBufferBuilder builder, StringOffset decayDateOffset) { builder.AddOffset(7, decayDateOffset.Value, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, Onorbit_Ingest_objectType_Enum objectType) { builder.AddSbyte(8, (sbyte)objectType, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(9, originOffset.Value, 0); }
  public static void AddMissionNumber(FlatBufferBuilder builder, StringOffset missionNumberOffset) { builder.AddOffset(10, missionNumberOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, Onorbit_Ingest_category_Enum category) { builder.AddSbyte(11, (sbyte)category, 0); }
  public static void AddLifetimeYears(FlatBufferBuilder builder, int lifetimeYears) { builder.AddInt(12, lifetimeYears, 0); }
  public static void AddAltName(FlatBufferBuilder builder, StringOffset altNameOffset) { builder.AddOffset(13, altNameOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(14, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(15, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(16, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Onorbit_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(17, (sbyte)dataMode, 0); }
  public static void AddLaunchSiteId(FlatBufferBuilder builder, StringOffset launchSiteIdOffset) { builder.AddOffset(18, launchSiteIdOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(19, countryCodeOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(20, origNetworkOffset.Value, 0); }
  public static Offset<Onorbit_Ingest> EndOnorbit_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Onorbit_Ingest>(o);
  }
  public static void FinishOnorbit_IngestBuffer(FlatBufferBuilder builder, Offset<Onorbit_Ingest> offset) { builder.Finish(offset.Value, "ONOR"); }
  public static void FinishSizePrefixedOnorbit_IngestBuffer(FlatBufferBuilder builder, Offset<Onorbit_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ONOR"); }
  public Onorbit_IngestT UnPack() {
    var _o = new Onorbit_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Onorbit_IngestT _o) {
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SatNo = this.SatNo;
    _o.CommonName = this.CommonName;
    _o.Constellation = this.Constellation;
    _o.IntlDes = this.IntlDes;
    _o.LaunchDate = this.LaunchDate;
    _o.DecayDate = this.DecayDate;
    _o.ObjectType = this.ObjectType;
    _o.Origin = this.Origin;
    _o.MissionNumber = this.MissionNumber;
    _o.Category = this.Category;
    _o.LifetimeYears = this.LifetimeYears;
    _o.AltName = this.AltName;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.LaunchSiteId = this.LaunchSiteId;
    _o.CountryCode = this.CountryCode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Onorbit_Ingest> Pack(FlatBufferBuilder builder, Onorbit_IngestT _o) {
    if (_o == null) return default(Offset<Onorbit_Ingest>);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _commonName = _o.CommonName == null ? default(StringOffset) : builder.CreateString(_o.CommonName);
    var _constellation = _o.Constellation == null ? default(StringOffset) : builder.CreateString(_o.Constellation);
    var _intlDes = _o.IntlDes == null ? default(StringOffset) : builder.CreateString(_o.IntlDes);
    var _launchDate = _o.LaunchDate == null ? default(StringOffset) : builder.CreateString(_o.LaunchDate);
    var _decayDate = _o.DecayDate == null ? default(StringOffset) : builder.CreateString(_o.DecayDate);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _missionNumber = _o.MissionNumber == null ? default(StringOffset) : builder.CreateString(_o.MissionNumber);
    var _altName = _o.AltName == null ? default(StringOffset) : builder.CreateString(_o.AltName);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _launchSiteId = _o.LaunchSiteId == null ? default(StringOffset) : builder.CreateString(_o.LaunchSiteId);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnorbit_Ingest(
      builder,
      _idOnOrbit,
      _classificationMarking,
      _o.SatNo,
      _commonName,
      _constellation,
      _intlDes,
      _launchDate,
      _decayDate,
      _o.ObjectType,
      _origin,
      _missionNumber,
      _o.Category,
      _o.LifetimeYears,
      _altName,
      _createdAt,
      _createdBy,
      _source,
      _o.DataMode,
      _launchSiteId,
      _countryCode,
      _origNetwork);
  }
}

public class Onorbit_IngestT
{
  public string IdOnOrbit { get; set; }
  public string ClassificationMarking { get; set; }
  public int SatNo { get; set; }
  public string CommonName { get; set; }
  public string Constellation { get; set; }
  public string IntlDes { get; set; }
  public string LaunchDate { get; set; }
  public string DecayDate { get; set; }
  public Onorbit_Ingest_objectType_Enum ObjectType { get; set; }
  public string Origin { get; set; }
  public string MissionNumber { get; set; }
  public Onorbit_Ingest_category_Enum Category { get; set; }
  public int LifetimeYears { get; set; }
  public string AltName { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public Onorbit_Ingest_dataMode_Enum DataMode { get; set; }
  public string LaunchSiteId { get; set; }
  public string CountryCode { get; set; }
  public string OrigNetwork { get; set; }

  public Onorbit_IngestT() {
    this.IdOnOrbit = null;
    this.ClassificationMarking = null;
    this.SatNo = 0;
    this.CommonName = null;
    this.Constellation = null;
    this.IntlDes = null;
    this.LaunchDate = null;
    this.DecayDate = null;
    this.ObjectType = Onorbit_Ingest_objectType_Enum.ROCKET_BODY;
    this.Origin = null;
    this.MissionNumber = null;
    this.Category = Onorbit_Ingest_category_Enum.UNKNOWN;
    this.LifetimeYears = 0;
    this.AltName = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.DataMode = Onorbit_Ingest_dataMode_Enum.REAL;
    this.LaunchSiteId = null;
    this.CountryCode = null;
    this.OrigNetwork = null;
  }
  public static Onorbit_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Onorbit_Ingest.GetRootAsOnorbit_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Onorbit_Ingest.FinishOnorbit_IngestBuffer(fbb, Onorbit_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Onorbit_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 8 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*CommonName*/, false)
      && verifier.VerifyString(tablePos, 12 /*Constellation*/, false)
      && verifier.VerifyString(tablePos, 14 /*IntlDes*/, false)
      && verifier.VerifyString(tablePos, 16 /*LaunchDate*/, false)
      && verifier.VerifyString(tablePos, 18 /*DecayDate*/, false)
      && verifier.VerifyField(tablePos, 20 /*ObjectType*/, 1 /*Onorbit_Ingest_objectType_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 22 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 24 /*MissionNumber*/, false)
      && verifier.VerifyField(tablePos, 26 /*Category*/, 1 /*Onorbit_Ingest_category_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*LifetimeYears*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*AltName*/, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 36 /*Source*/, false)
      && verifier.VerifyField(tablePos, 38 /*DataMode*/, 1 /*Onorbit_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*LaunchSiteId*/, false)
      && verifier.VerifyString(tablePos, 42 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 44 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
