// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
public struct DataLinkVoiceCoord_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLinkVoiceCoord_Ingest GetRootAsDataLinkVoiceCoord_Ingest(ByteBuffer _bb) { return GetRootAsDataLinkVoiceCoord_Ingest(_bb, new DataLinkVoiceCoord_Ingest()); }
  public static DataLinkVoiceCoord_Ingest GetRootAsDataLinkVoiceCoord_Ingest(ByteBuffer _bb, DataLinkVoiceCoord_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLinkVoiceCoord_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLinkVoiceCoord_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLinkVoiceCoord_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLinkVoiceCoord_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string VoiceNetDes { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVoiceNetDesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetVoiceNetDesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetVoiceNetDesArray() { return __p.__vector_as_array<byte>(4); }
  /// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string FreqDes { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFreqDesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFreqDesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFreqDesArray() { return __p.__vector_as_array<byte>(6); }
  /// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string CommPri { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommPriBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommPriBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommPriArray() { return __p.__vector_as_array<byte>(8); }
  /// Array of telephone numbers or contact frequencies used for interface control for this data link message.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  public string TeleFreqNums(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TeleFreqNumsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DataLinkVoiceCoord_Ingest> CreateDataLinkVoiceCoord_Ingest(FlatBufferBuilder builder,
      StringOffset voiceNetDesOffset = default(StringOffset),
      StringOffset freqDesOffset = default(StringOffset),
      StringOffset commPriOffset = default(StringOffset),
      VectorOffset teleFreqNumsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    DataLinkVoiceCoord_Ingest.AddTeleFreqNums(builder, teleFreqNumsOffset);
    DataLinkVoiceCoord_Ingest.AddCommPri(builder, commPriOffset);
    DataLinkVoiceCoord_Ingest.AddFreqDes(builder, freqDesOffset);
    DataLinkVoiceCoord_Ingest.AddVoiceNetDes(builder, voiceNetDesOffset);
    return DataLinkVoiceCoord_Ingest.EndDataLinkVoiceCoord_Ingest(builder);
  }

  public static void StartDataLinkVoiceCoord_Ingest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddVoiceNetDes(FlatBufferBuilder builder, StringOffset voiceNetDesOffset) { builder.AddOffset(0, voiceNetDesOffset.Value, 0); }
  public static void AddFreqDes(FlatBufferBuilder builder, StringOffset freqDesOffset) { builder.AddOffset(1, freqDesOffset.Value, 0); }
  public static void AddCommPri(FlatBufferBuilder builder, StringOffset commPriOffset) { builder.AddOffset(2, commPriOffset.Value, 0); }
  public static void AddTeleFreqNums(FlatBufferBuilder builder, VectorOffset teleFreqNumsOffset) { builder.AddOffset(3, teleFreqNumsOffset.Value, 0); }
  public static VectorOffset CreateTeleFreqNumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeleFreqNumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeleFreqNumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTeleFreqNumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTeleFreqNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DataLinkVoiceCoord_Ingest> EndDataLinkVoiceCoord_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLinkVoiceCoord_Ingest>(o);
  }
  public static void FinishDataLinkVoiceCoord_IngestBuffer(FlatBufferBuilder builder, Offset<DataLinkVoiceCoord_Ingest> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLinkVoiceCoord_IngestBuffer(FlatBufferBuilder builder, Offset<DataLinkVoiceCoord_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLinkVoiceCoord_IngestT UnPack() {
    var _o = new DataLinkVoiceCoord_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLinkVoiceCoord_IngestT _o) {
    _o.VoiceNetDes = this.VoiceNetDes;
    _o.FreqDes = this.FreqDes;
    _o.CommPri = this.CommPri;
    _o.TeleFreqNums = new List<string>();
    for (var _j = 0; _j < this.TeleFreqNumsLength; ++_j) {_o.TeleFreqNums.Add(this.TeleFreqNums(_j));}
  }
  public static Offset<DataLinkVoiceCoord_Ingest> Pack(FlatBufferBuilder builder, DataLinkVoiceCoord_IngestT _o) {
    if (_o == null) return default(Offset<DataLinkVoiceCoord_Ingest>);
    var _voiceNetDes = _o.VoiceNetDes == null ? default(StringOffset) : builder.CreateString(_o.VoiceNetDes);
    var _freqDes = _o.FreqDes == null ? default(StringOffset) : builder.CreateString(_o.FreqDes);
    var _commPri = _o.CommPri == null ? default(StringOffset) : builder.CreateString(_o.CommPri);
    var _teleFreqNums = default(VectorOffset);
    if (_o.TeleFreqNums != null) {
      var __teleFreqNums = new StringOffset[_o.TeleFreqNums.Count];
      for (var _j = 0; _j < __teleFreqNums.Length; ++_j) { __teleFreqNums[_j] = builder.CreateString(_o.TeleFreqNums[_j]); }
      _teleFreqNums = CreateTeleFreqNumsVector(builder, __teleFreqNums);
    }
    return CreateDataLinkVoiceCoord_Ingest(
      builder,
      _voiceNetDes,
      _freqDes,
      _commPri,
      _teleFreqNums);
  }
}

public class DataLinkVoiceCoord_IngestT
{
  public string VoiceNetDes { get; set; }
  public string FreqDes { get; set; }
  public string CommPri { get; set; }
  public List<string> TeleFreqNums { get; set; }

  public DataLinkVoiceCoord_IngestT() {
    this.VoiceNetDes = null;
    this.FreqDes = null;
    this.CommPri = null;
    this.TeleFreqNums = null;
  }
  public static DataLinkVoiceCoord_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLinkVoiceCoord_Ingest.GetRootAsDataLinkVoiceCoord_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLinkVoiceCoord_Ingest.FinishDataLinkVoiceCoord_IngestBuffer(fbb, DataLinkVoiceCoord_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLinkVoiceCoord_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*VoiceNetDes*/, false)
      && verifier.VerifyString(tablePos, 6 /*FreqDes*/, false)
      && verifier.VerifyString(tablePos, 8 /*CommPri*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*TeleFreqNums*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
