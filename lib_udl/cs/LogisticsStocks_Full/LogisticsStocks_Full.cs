// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The supply stocks for this support item.
public struct LogisticsStocks_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogisticsStocks_Full GetRootAsLogisticsStocks_Full(ByteBuffer _bb) { return GetRootAsLogisticsStocks_Full(_bb, new LogisticsStocks_Full()); }
  public static LogisticsStocks_Full GetRootAsLogisticsStocks_Full(ByteBuffer _bb, LogisticsStocks_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LogisticsStocks_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOGI"); }
  public static bool VerifyLogisticsStocks_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOGI", false, LogisticsStocks_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogisticsStocks_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The ICAO code for the primary location with available parts.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string SourceICAO { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceICAOBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSourceICAOBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSourceICAOArray() { return __p.__vector_as_array<byte>(4); }
  /// The quantity of available parts needed from sourceICAO.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int Quantity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  public string StockCheckTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStockCheckTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStockCheckTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStockCheckTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// The point of contact at the sourced location.
  /// Example: /// Example: SMITH, JOHN J
  /// Constraints: Minimum length = 0, Maximum length = 68
  public string StockPOC { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStockPOCBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStockPOCBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStockPOCArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<LogisticsStocks_Full> CreateLogisticsStocks_Full(FlatBufferBuilder builder,
      StringOffset sourceICAOOffset = default(StringOffset),
      int quantity = 0,
      StringOffset stockCheckTimeOffset = default(StringOffset),
      StringOffset stockPOCOffset = default(StringOffset)) {
    builder.StartTable(4);
    LogisticsStocks_Full.AddStockPOC(builder, stockPOCOffset);
    LogisticsStocks_Full.AddStockCheckTime(builder, stockCheckTimeOffset);
    LogisticsStocks_Full.AddQuantity(builder, quantity);
    LogisticsStocks_Full.AddSourceICAO(builder, sourceICAOOffset);
    return LogisticsStocks_Full.EndLogisticsStocks_Full(builder);
  }

  public static void StartLogisticsStocks_Full(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddSourceICAO(FlatBufferBuilder builder, StringOffset sourceICAOOffset) { builder.AddOffset(0, sourceICAOOffset.Value, 0); }
  public static void AddQuantity(FlatBufferBuilder builder, int quantity) { builder.AddInt(1, quantity, 0); }
  public static void AddStockCheckTime(FlatBufferBuilder builder, StringOffset stockCheckTimeOffset) { builder.AddOffset(2, stockCheckTimeOffset.Value, 0); }
  public static void AddStockPOC(FlatBufferBuilder builder, StringOffset stockPOCOffset) { builder.AddOffset(3, stockPOCOffset.Value, 0); }
  public static Offset<LogisticsStocks_Full> EndLogisticsStocks_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LogisticsStocks_Full>(o);
  }
  public static void FinishLogisticsStocks_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsStocks_Full> offset) { builder.Finish(offset.Value, "LOGI"); }
  public static void FinishSizePrefixedLogisticsStocks_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsStocks_Full> offset) { builder.FinishSizePrefixed(offset.Value, "LOGI"); }
  public LogisticsStocks_FullT UnPack() {
    var _o = new LogisticsStocks_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogisticsStocks_FullT _o) {
    _o.SourceICAO = this.SourceICAO;
    _o.Quantity = this.Quantity;
    _o.StockCheckTime = this.StockCheckTime;
    _o.StockPOC = this.StockPOC;
  }
  public static Offset<LogisticsStocks_Full> Pack(FlatBufferBuilder builder, LogisticsStocks_FullT _o) {
    if (_o == null) return default(Offset<LogisticsStocks_Full>);
    var _sourceICAO = _o.SourceICAO == null ? default(StringOffset) : builder.CreateString(_o.SourceICAO);
    var _stockCheckTime = _o.StockCheckTime == null ? default(StringOffset) : builder.CreateString(_o.StockCheckTime);
    var _stockPOC = _o.StockPOC == null ? default(StringOffset) : builder.CreateString(_o.StockPOC);
    return CreateLogisticsStocks_Full(
      builder,
      _sourceICAO,
      _o.Quantity,
      _stockCheckTime,
      _stockPOC);
  }
}

public class LogisticsStocks_FullT
{
  public string SourceICAO { get; set; }
  public int Quantity { get; set; }
  public string StockCheckTime { get; set; }
  public string StockPOC { get; set; }

  public LogisticsStocks_FullT() {
    this.SourceICAO = null;
    this.Quantity = 0;
    this.StockCheckTime = null;
    this.StockPOC = null;
  }
  public static LogisticsStocks_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return LogisticsStocks_Full.GetRootAsLogisticsStocks_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LogisticsStocks_Full.FinishLogisticsStocks_FullBuffer(fbb, LogisticsStocks_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LogisticsStocks_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*SourceICAO*/, false)
      && verifier.VerifyField(tablePos, 6 /*Quantity*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*StockCheckTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*StockPOC*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
