// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
public struct RadarSOIObservation_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RadarSOIObservation_Full GetRootAsRadarSOIObservation_Full(ByteBuffer _bb) { return GetRootAsRadarSOIObservation_Full(_bb, new RadarSOIObservation_Full()); }
  public static RadarSOIObservation_Full GetRootAsRadarSOIObservation_Full(ByteBuffer _bb, RadarSOIObservation_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RadarSOIObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RADA"); }
  public static bool VerifyRadarSOIObservation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RADA", false, RadarSOIObservation_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RadarSOIObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Observation detection start time in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.888456Z
  /// Constraints: No constraints specified.
  public string ObStartTime { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObStartTimeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetObStartTimeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetObStartTimeArray() { return __p.__vector_as_array<byte>(4); }
  /// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
  /// Constraints: No constraints specified.
  public string Tovs(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TovsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
  /// Example: /// Example: [0.006, 0.006, 0.006]
  /// Constraints: No constraints specified.
  public string Rspaces(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RspacesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
  /// Example: /// Example: [0.006, 0.006, 0.006]
  /// Constraints: No constraints specified.
  public string Xspaces(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int XspacesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
  /// Example: /// Example: [5644.27, 5644.27, 5644.27]
  /// Constraints: No constraints specified.
  public string Doppler2XRs(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int Doppler2XRsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
  /// Example: /// Example: [0.005, 0.005, 0.005]
  /// Constraints: No constraints specified.
  public string DeltaTimes(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeltaTimesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
  /// Example: /// Example: [4.278, 4.278, 4.278]
  /// Constraints: No constraints specified.
  public string AspectAngles(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AspectAnglesLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
  /// Example: /// Example: [0.166, 0.166, 0.166]
  /// Constraints: No constraints specified.
  public string ProjAngVels(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ProjAngVelsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional id of assumed StateVector of object being observed.
  /// Example: /// Example: 99a0de63-b38f-4d81-b057
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVectorBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIdStateVectorBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIdStateVectorArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional id of assumed AttitudeSet of object being observed.
  /// Example: /// Example: 99a0de63-b38f-4d81-b057
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAttitudeSet { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAttitudeSetBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIdAttitudeSetBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIdAttitudeSetArray() { return __p.__vector_as_array<byte>(22); }
  /// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
  /// Example: /// Example: [877.938, 877.938, 877.938]
  /// Constraints: No constraints specified.
  public string Ranges(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RangesLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
  /// Example: /// Example: [278.27, 278.27, 278.27]
  /// Constraints: No constraints specified.
  public string Azimuths(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AzimuthsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
  /// Example: /// Example: [70.85, 70.85, 70.85]
  /// Constraints: No constraints specified.
  public string Elevations(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElevationsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
  /// Example: /// Example: [0.317, 0.317, 0.317]
  /// Constraints: No constraints specified.
  public string RangeRates(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RangeRatesLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
  /// Example: /// Example: [-1.481, -1.481, -1.481]
  /// Constraints: No constraints specified.
  public string AzimuthRates(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AzimuthRatesLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
  /// Example: /// Example: [-0.074, -0.074, -0.074]
  /// Constraints: No constraints specified.
  public string ElevationRates(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElevationRatesLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
  /// Example: /// Example: [45.23, 45.23, 45.23]
  /// Constraints: No constraints specified.
  public string AzimuthBiases(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AzimuthBiasesLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
  /// Example: /// Example: [1.23, 1.23, 1.23]
  /// Constraints: No constraints specified.
  public string ElevationBiases(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElevationBiasesLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
  /// Example: /// Example: [1.23, 1.23, 1.23]
  /// Constraints: No constraints specified.
  public string RangeBiases(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RangeBiasesLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
  /// Example: /// Example: [8.594, 8.594, 8.594]
  /// Constraints: No constraints specified.
  public string IntegrationAngles(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntegrationAnglesLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
  /// Example: /// Example: [11.301, 11.301, 11.301]
  /// Constraints: No constraints specified.
  public string CrossRangeRes(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CrossRangeResLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Beta angle (between target and radar-image frame z axis) in degrees.
  /// Example: /// Example: -89.97
  /// Constraints: No constraints specified.
  public double Beta { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
  /// Example: /// Example: 103.04
  /// Constraints: No constraints specified.
  public double Kappa { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
  /// Example: /// Example: [33.1, 33.1, 33.1]
  /// Constraints: No constraints specified.
  public string PeakAmplitudes(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PeakAmplitudesLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Radar center frequency of the radar in hertz.
  /// Example: /// Example: 160047.0625
  /// Constraints: No constraints specified.
  public double CenterFrequency { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bandwidth of radar pulse in hertz.
  /// Example: /// Example: 24094.12
  /// Constraints: No constraints specified.
  public double PulseBandwidth { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
  /// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
  /// Constraints: No constraints specified.
  public string Xpos(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int XposLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
  /// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
  /// Constraints: No constraints specified.
  public string Ypos(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int YposLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
  /// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
  /// Constraints: No constraints specified.
  public string Zpos(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZposLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
  /// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
  /// Constraints: No constraints specified.
  public string Xvel(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int XvelLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
  /// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
  /// Constraints: No constraints specified.
  public string Yvel(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int YvelLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
  /// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
  /// Constraints: No constraints specified.
  public string Zvel(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZvelLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<RadarSOIObservation_Full> CreateRadarSOIObservation_Full(FlatBufferBuilder builder,
      StringOffset obStartTimeOffset = default(StringOffset),
      VectorOffset tovsOffset = default(VectorOffset),
      VectorOffset rspacesOffset = default(VectorOffset),
      VectorOffset xspacesOffset = default(VectorOffset),
      VectorOffset doppler2XRsOffset = default(VectorOffset),
      VectorOffset deltaTimesOffset = default(VectorOffset),
      VectorOffset aspectAnglesOffset = default(VectorOffset),
      VectorOffset projAngVelsOffset = default(VectorOffset),
      StringOffset idStateVectorOffset = default(StringOffset),
      StringOffset idAttitudeSetOffset = default(StringOffset),
      VectorOffset rangesOffset = default(VectorOffset),
      VectorOffset azimuthsOffset = default(VectorOffset),
      VectorOffset elevationsOffset = default(VectorOffset),
      VectorOffset rangeRatesOffset = default(VectorOffset),
      VectorOffset azimuthRatesOffset = default(VectorOffset),
      VectorOffset elevationRatesOffset = default(VectorOffset),
      VectorOffset azimuthBiasesOffset = default(VectorOffset),
      VectorOffset elevationBiasesOffset = default(VectorOffset),
      VectorOffset rangeBiasesOffset = default(VectorOffset),
      VectorOffset integrationAnglesOffset = default(VectorOffset),
      VectorOffset crossRangeResOffset = default(VectorOffset),
      double beta = 0.0,
      double kappa = 0.0,
      VectorOffset peakAmplitudesOffset = default(VectorOffset),
      double centerFrequency = 0.0,
      double pulseBandwidth = 0.0,
      VectorOffset xposOffset = default(VectorOffset),
      VectorOffset yposOffset = default(VectorOffset),
      VectorOffset zposOffset = default(VectorOffset),
      VectorOffset xvelOffset = default(VectorOffset),
      VectorOffset yvelOffset = default(VectorOffset),
      VectorOffset zvelOffset = default(VectorOffset)) {
    builder.StartTable(32);
    RadarSOIObservation_Full.AddPulseBandwidth(builder, pulseBandwidth);
    RadarSOIObservation_Full.AddCenterFrequency(builder, centerFrequency);
    RadarSOIObservation_Full.AddKappa(builder, kappa);
    RadarSOIObservation_Full.AddBeta(builder, beta);
    RadarSOIObservation_Full.AddZvel(builder, zvelOffset);
    RadarSOIObservation_Full.AddYvel(builder, yvelOffset);
    RadarSOIObservation_Full.AddXvel(builder, xvelOffset);
    RadarSOIObservation_Full.AddZpos(builder, zposOffset);
    RadarSOIObservation_Full.AddYpos(builder, yposOffset);
    RadarSOIObservation_Full.AddXpos(builder, xposOffset);
    RadarSOIObservation_Full.AddPeakAmplitudes(builder, peakAmplitudesOffset);
    RadarSOIObservation_Full.AddCrossRangeRes(builder, crossRangeResOffset);
    RadarSOIObservation_Full.AddIntegrationAngles(builder, integrationAnglesOffset);
    RadarSOIObservation_Full.AddRangeBiases(builder, rangeBiasesOffset);
    RadarSOIObservation_Full.AddElevationBiases(builder, elevationBiasesOffset);
    RadarSOIObservation_Full.AddAzimuthBiases(builder, azimuthBiasesOffset);
    RadarSOIObservation_Full.AddElevationRates(builder, elevationRatesOffset);
    RadarSOIObservation_Full.AddAzimuthRates(builder, azimuthRatesOffset);
    RadarSOIObservation_Full.AddRangeRates(builder, rangeRatesOffset);
    RadarSOIObservation_Full.AddElevations(builder, elevationsOffset);
    RadarSOIObservation_Full.AddAzimuths(builder, azimuthsOffset);
    RadarSOIObservation_Full.AddRanges(builder, rangesOffset);
    RadarSOIObservation_Full.AddIdAttitudeSet(builder, idAttitudeSetOffset);
    RadarSOIObservation_Full.AddIdStateVector(builder, idStateVectorOffset);
    RadarSOIObservation_Full.AddProjAngVels(builder, projAngVelsOffset);
    RadarSOIObservation_Full.AddAspectAngles(builder, aspectAnglesOffset);
    RadarSOIObservation_Full.AddDeltaTimes(builder, deltaTimesOffset);
    RadarSOIObservation_Full.AddDoppler2XRs(builder, doppler2XRsOffset);
    RadarSOIObservation_Full.AddXspaces(builder, xspacesOffset);
    RadarSOIObservation_Full.AddRspaces(builder, rspacesOffset);
    RadarSOIObservation_Full.AddTovs(builder, tovsOffset);
    RadarSOIObservation_Full.AddObStartTime(builder, obStartTimeOffset);
    return RadarSOIObservation_Full.EndRadarSOIObservation_Full(builder);
  }

  public static void StartRadarSOIObservation_Full(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddObStartTime(FlatBufferBuilder builder, StringOffset obStartTimeOffset) { builder.AddOffset(0, obStartTimeOffset.Value, 0); }
  public static void AddTovs(FlatBufferBuilder builder, VectorOffset tovsOffset) { builder.AddOffset(1, tovsOffset.Value, 0); }
  public static VectorOffset CreateTovsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTovsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTovsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTovsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTovsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRspaces(FlatBufferBuilder builder, VectorOffset rspacesOffset) { builder.AddOffset(2, rspacesOffset.Value, 0); }
  public static VectorOffset CreateRspacesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRspacesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRspacesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRspacesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRspacesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddXspaces(FlatBufferBuilder builder, VectorOffset xspacesOffset) { builder.AddOffset(3, xspacesOffset.Value, 0); }
  public static VectorOffset CreateXspacesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXspacesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXspacesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXspacesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartXspacesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDoppler2XRs(FlatBufferBuilder builder, VectorOffset doppler2XRsOffset) { builder.AddOffset(4, doppler2XRsOffset.Value, 0); }
  public static VectorOffset CreateDoppler2XRsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDoppler2XRsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoppler2XRsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoppler2XRsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDoppler2XRsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeltaTimes(FlatBufferBuilder builder, VectorOffset deltaTimesOffset) { builder.AddOffset(5, deltaTimesOffset.Value, 0); }
  public static VectorOffset CreateDeltaTimesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTimesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTimesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTimesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeltaTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAspectAngles(FlatBufferBuilder builder, VectorOffset aspectAnglesOffset) { builder.AddOffset(6, aspectAnglesOffset.Value, 0); }
  public static VectorOffset CreateAspectAnglesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAspectAnglesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAspectAnglesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAspectAnglesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAspectAnglesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddProjAngVels(FlatBufferBuilder builder, VectorOffset projAngVelsOffset) { builder.AddOffset(7, projAngVelsOffset.Value, 0); }
  public static VectorOffset CreateProjAngVelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateProjAngVelsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProjAngVelsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateProjAngVelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartProjAngVelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdStateVector(FlatBufferBuilder builder, StringOffset idStateVectorOffset) { builder.AddOffset(8, idStateVectorOffset.Value, 0); }
  public static void AddIdAttitudeSet(FlatBufferBuilder builder, StringOffset idAttitudeSetOffset) { builder.AddOffset(9, idAttitudeSetOffset.Value, 0); }
  public static void AddRanges(FlatBufferBuilder builder, VectorOffset rangesOffset) { builder.AddOffset(10, rangesOffset.Value, 0); }
  public static VectorOffset CreateRangesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRangesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRangesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAzimuths(FlatBufferBuilder builder, VectorOffset azimuthsOffset) { builder.AddOffset(11, azimuthsOffset.Value, 0); }
  public static VectorOffset CreateAzimuthsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAzimuthsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElevations(FlatBufferBuilder builder, VectorOffset elevationsOffset) { builder.AddOffset(12, elevationsOffset.Value, 0); }
  public static VectorOffset CreateElevationsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElevationsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElevationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRangeRates(FlatBufferBuilder builder, VectorOffset rangeRatesOffset) { builder.AddOffset(13, rangeRatesOffset.Value, 0); }
  public static VectorOffset CreateRangeRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRangeRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAzimuthRates(FlatBufferBuilder builder, VectorOffset azimuthRatesOffset) { builder.AddOffset(14, azimuthRatesOffset.Value, 0); }
  public static VectorOffset CreateAzimuthRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAzimuthRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElevationRates(FlatBufferBuilder builder, VectorOffset elevationRatesOffset) { builder.AddOffset(15, elevationRatesOffset.Value, 0); }
  public static VectorOffset CreateElevationRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElevationRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElevationRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAzimuthBiases(FlatBufferBuilder builder, VectorOffset azimuthBiasesOffset) { builder.AddOffset(16, azimuthBiasesOffset.Value, 0); }
  public static VectorOffset CreateAzimuthBiasesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthBiasesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthBiasesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAzimuthBiasesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAzimuthBiasesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddElevationBiases(FlatBufferBuilder builder, VectorOffset elevationBiasesOffset) { builder.AddOffset(17, elevationBiasesOffset.Value, 0); }
  public static VectorOffset CreateElevationBiasesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElevationBiasesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationBiasesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElevationBiasesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElevationBiasesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRangeBiases(FlatBufferBuilder builder, VectorOffset rangeBiasesOffset) { builder.AddOffset(18, rangeBiasesOffset.Value, 0); }
  public static VectorOffset CreateRangeBiasesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRangeBiasesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeBiasesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRangeBiasesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRangeBiasesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIntegrationAngles(FlatBufferBuilder builder, VectorOffset integrationAnglesOffset) { builder.AddOffset(19, integrationAnglesOffset.Value, 0); }
  public static VectorOffset CreateIntegrationAnglesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntegrationAnglesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntegrationAnglesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntegrationAnglesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntegrationAnglesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrossRangeRes(FlatBufferBuilder builder, VectorOffset crossRangeResOffset) { builder.AddOffset(20, crossRangeResOffset.Value, 0); }
  public static VectorOffset CreateCrossRangeResVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCrossRangeResVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCrossRangeResVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCrossRangeResVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCrossRangeResVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBeta(FlatBufferBuilder builder, double beta) { builder.AddDouble(21, beta, 0.0); }
  public static void AddKappa(FlatBufferBuilder builder, double kappa) { builder.AddDouble(22, kappa, 0.0); }
  public static void AddPeakAmplitudes(FlatBufferBuilder builder, VectorOffset peakAmplitudesOffset) { builder.AddOffset(23, peakAmplitudesOffset.Value, 0); }
  public static VectorOffset CreatePeakAmplitudesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePeakAmplitudesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePeakAmplitudesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePeakAmplitudesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPeakAmplitudesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCenterFrequency(FlatBufferBuilder builder, double centerFrequency) { builder.AddDouble(24, centerFrequency, 0.0); }
  public static void AddPulseBandwidth(FlatBufferBuilder builder, double pulseBandwidth) { builder.AddDouble(25, pulseBandwidth, 0.0); }
  public static void AddXpos(FlatBufferBuilder builder, VectorOffset xposOffset) { builder.AddOffset(26, xposOffset.Value, 0); }
  public static VectorOffset CreateXposVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXposVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXposVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXposVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartXposVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYpos(FlatBufferBuilder builder, VectorOffset yposOffset) { builder.AddOffset(27, yposOffset.Value, 0); }
  public static VectorOffset CreateYposVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateYposVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYposVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYposVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartYposVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZpos(FlatBufferBuilder builder, VectorOffset zposOffset) { builder.AddOffset(28, zposOffset.Value, 0); }
  public static VectorOffset CreateZposVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZposVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZposVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZposVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZposVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddXvel(FlatBufferBuilder builder, VectorOffset xvelOffset) { builder.AddOffset(29, xvelOffset.Value, 0); }
  public static VectorOffset CreateXvelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXvelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXvelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXvelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartXvelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYvel(FlatBufferBuilder builder, VectorOffset yvelOffset) { builder.AddOffset(30, yvelOffset.Value, 0); }
  public static VectorOffset CreateYvelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateYvelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYvelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYvelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartYvelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZvel(FlatBufferBuilder builder, VectorOffset zvelOffset) { builder.AddOffset(31, zvelOffset.Value, 0); }
  public static VectorOffset CreateZvelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZvelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZvelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZvelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZvelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RadarSOIObservation_Full> EndRadarSOIObservation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RadarSOIObservation_Full>(o);
  }
  public static void FinishRadarSOIObservation_FullBuffer(FlatBufferBuilder builder, Offset<RadarSOIObservation_Full> offset) { builder.Finish(offset.Value, "RADA"); }
  public static void FinishSizePrefixedRadarSOIObservation_FullBuffer(FlatBufferBuilder builder, Offset<RadarSOIObservation_Full> offset) { builder.FinishSizePrefixed(offset.Value, "RADA"); }
  public RadarSOIObservation_FullT UnPack() {
    var _o = new RadarSOIObservation_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RadarSOIObservation_FullT _o) {
    _o.ObStartTime = this.ObStartTime;
    _o.Tovs = new List<string>();
    for (var _j = 0; _j < this.TovsLength; ++_j) {_o.Tovs.Add(this.Tovs(_j));}
    _o.Rspaces = new List<string>();
    for (var _j = 0; _j < this.RspacesLength; ++_j) {_o.Rspaces.Add(this.Rspaces(_j));}
    _o.Xspaces = new List<string>();
    for (var _j = 0; _j < this.XspacesLength; ++_j) {_o.Xspaces.Add(this.Xspaces(_j));}
    _o.Doppler2XRs = new List<string>();
    for (var _j = 0; _j < this.Doppler2XRsLength; ++_j) {_o.Doppler2XRs.Add(this.Doppler2XRs(_j));}
    _o.DeltaTimes = new List<string>();
    for (var _j = 0; _j < this.DeltaTimesLength; ++_j) {_o.DeltaTimes.Add(this.DeltaTimes(_j));}
    _o.AspectAngles = new List<string>();
    for (var _j = 0; _j < this.AspectAnglesLength; ++_j) {_o.AspectAngles.Add(this.AspectAngles(_j));}
    _o.ProjAngVels = new List<string>();
    for (var _j = 0; _j < this.ProjAngVelsLength; ++_j) {_o.ProjAngVels.Add(this.ProjAngVels(_j));}
    _o.IdStateVector = this.IdStateVector;
    _o.IdAttitudeSet = this.IdAttitudeSet;
    _o.Ranges = new List<string>();
    for (var _j = 0; _j < this.RangesLength; ++_j) {_o.Ranges.Add(this.Ranges(_j));}
    _o.Azimuths = new List<string>();
    for (var _j = 0; _j < this.AzimuthsLength; ++_j) {_o.Azimuths.Add(this.Azimuths(_j));}
    _o.Elevations = new List<string>();
    for (var _j = 0; _j < this.ElevationsLength; ++_j) {_o.Elevations.Add(this.Elevations(_j));}
    _o.RangeRates = new List<string>();
    for (var _j = 0; _j < this.RangeRatesLength; ++_j) {_o.RangeRates.Add(this.RangeRates(_j));}
    _o.AzimuthRates = new List<string>();
    for (var _j = 0; _j < this.AzimuthRatesLength; ++_j) {_o.AzimuthRates.Add(this.AzimuthRates(_j));}
    _o.ElevationRates = new List<string>();
    for (var _j = 0; _j < this.ElevationRatesLength; ++_j) {_o.ElevationRates.Add(this.ElevationRates(_j));}
    _o.AzimuthBiases = new List<string>();
    for (var _j = 0; _j < this.AzimuthBiasesLength; ++_j) {_o.AzimuthBiases.Add(this.AzimuthBiases(_j));}
    _o.ElevationBiases = new List<string>();
    for (var _j = 0; _j < this.ElevationBiasesLength; ++_j) {_o.ElevationBiases.Add(this.ElevationBiases(_j));}
    _o.RangeBiases = new List<string>();
    for (var _j = 0; _j < this.RangeBiasesLength; ++_j) {_o.RangeBiases.Add(this.RangeBiases(_j));}
    _o.IntegrationAngles = new List<string>();
    for (var _j = 0; _j < this.IntegrationAnglesLength; ++_j) {_o.IntegrationAngles.Add(this.IntegrationAngles(_j));}
    _o.CrossRangeRes = new List<string>();
    for (var _j = 0; _j < this.CrossRangeResLength; ++_j) {_o.CrossRangeRes.Add(this.CrossRangeRes(_j));}
    _o.Beta = this.Beta;
    _o.Kappa = this.Kappa;
    _o.PeakAmplitudes = new List<string>();
    for (var _j = 0; _j < this.PeakAmplitudesLength; ++_j) {_o.PeakAmplitudes.Add(this.PeakAmplitudes(_j));}
    _o.CenterFrequency = this.CenterFrequency;
    _o.PulseBandwidth = this.PulseBandwidth;
    _o.Xpos = new List<string>();
    for (var _j = 0; _j < this.XposLength; ++_j) {_o.Xpos.Add(this.Xpos(_j));}
    _o.Ypos = new List<string>();
    for (var _j = 0; _j < this.YposLength; ++_j) {_o.Ypos.Add(this.Ypos(_j));}
    _o.Zpos = new List<string>();
    for (var _j = 0; _j < this.ZposLength; ++_j) {_o.Zpos.Add(this.Zpos(_j));}
    _o.Xvel = new List<string>();
    for (var _j = 0; _j < this.XvelLength; ++_j) {_o.Xvel.Add(this.Xvel(_j));}
    _o.Yvel = new List<string>();
    for (var _j = 0; _j < this.YvelLength; ++_j) {_o.Yvel.Add(this.Yvel(_j));}
    _o.Zvel = new List<string>();
    for (var _j = 0; _j < this.ZvelLength; ++_j) {_o.Zvel.Add(this.Zvel(_j));}
  }
  public static Offset<RadarSOIObservation_Full> Pack(FlatBufferBuilder builder, RadarSOIObservation_FullT _o) {
    if (_o == null) return default(Offset<RadarSOIObservation_Full>);
    var _obStartTime = _o.ObStartTime == null ? default(StringOffset) : builder.CreateString(_o.ObStartTime);
    var _tovs = default(VectorOffset);
    if (_o.Tovs != null) {
      var __tovs = new StringOffset[_o.Tovs.Count];
      for (var _j = 0; _j < __tovs.Length; ++_j) { __tovs[_j] = builder.CreateString(_o.Tovs[_j]); }
      _tovs = CreateTovsVector(builder, __tovs);
    }
    var _rspaces = default(VectorOffset);
    if (_o.Rspaces != null) {
      var __rspaces = new StringOffset[_o.Rspaces.Count];
      for (var _j = 0; _j < __rspaces.Length; ++_j) { __rspaces[_j] = builder.CreateString(_o.Rspaces[_j]); }
      _rspaces = CreateRspacesVector(builder, __rspaces);
    }
    var _xspaces = default(VectorOffset);
    if (_o.Xspaces != null) {
      var __xspaces = new StringOffset[_o.Xspaces.Count];
      for (var _j = 0; _j < __xspaces.Length; ++_j) { __xspaces[_j] = builder.CreateString(_o.Xspaces[_j]); }
      _xspaces = CreateXspacesVector(builder, __xspaces);
    }
    var _doppler2XRs = default(VectorOffset);
    if (_o.Doppler2XRs != null) {
      var __doppler2XRs = new StringOffset[_o.Doppler2XRs.Count];
      for (var _j = 0; _j < __doppler2XRs.Length; ++_j) { __doppler2XRs[_j] = builder.CreateString(_o.Doppler2XRs[_j]); }
      _doppler2XRs = CreateDoppler2XRsVector(builder, __doppler2XRs);
    }
    var _deltaTimes = default(VectorOffset);
    if (_o.DeltaTimes != null) {
      var __deltaTimes = new StringOffset[_o.DeltaTimes.Count];
      for (var _j = 0; _j < __deltaTimes.Length; ++_j) { __deltaTimes[_j] = builder.CreateString(_o.DeltaTimes[_j]); }
      _deltaTimes = CreateDeltaTimesVector(builder, __deltaTimes);
    }
    var _aspectAngles = default(VectorOffset);
    if (_o.AspectAngles != null) {
      var __aspectAngles = new StringOffset[_o.AspectAngles.Count];
      for (var _j = 0; _j < __aspectAngles.Length; ++_j) { __aspectAngles[_j] = builder.CreateString(_o.AspectAngles[_j]); }
      _aspectAngles = CreateAspectAnglesVector(builder, __aspectAngles);
    }
    var _projAngVels = default(VectorOffset);
    if (_o.ProjAngVels != null) {
      var __projAngVels = new StringOffset[_o.ProjAngVels.Count];
      for (var _j = 0; _j < __projAngVels.Length; ++_j) { __projAngVels[_j] = builder.CreateString(_o.ProjAngVels[_j]); }
      _projAngVels = CreateProjAngVelsVector(builder, __projAngVels);
    }
    var _idStateVector = _o.IdStateVector == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector);
    var _idAttitudeSet = _o.IdAttitudeSet == null ? default(StringOffset) : builder.CreateString(_o.IdAttitudeSet);
    var _ranges = default(VectorOffset);
    if (_o.Ranges != null) {
      var __ranges = new StringOffset[_o.Ranges.Count];
      for (var _j = 0; _j < __ranges.Length; ++_j) { __ranges[_j] = builder.CreateString(_o.Ranges[_j]); }
      _ranges = CreateRangesVector(builder, __ranges);
    }
    var _azimuths = default(VectorOffset);
    if (_o.Azimuths != null) {
      var __azimuths = new StringOffset[_o.Azimuths.Count];
      for (var _j = 0; _j < __azimuths.Length; ++_j) { __azimuths[_j] = builder.CreateString(_o.Azimuths[_j]); }
      _azimuths = CreateAzimuthsVector(builder, __azimuths);
    }
    var _elevations = default(VectorOffset);
    if (_o.Elevations != null) {
      var __elevations = new StringOffset[_o.Elevations.Count];
      for (var _j = 0; _j < __elevations.Length; ++_j) { __elevations[_j] = builder.CreateString(_o.Elevations[_j]); }
      _elevations = CreateElevationsVector(builder, __elevations);
    }
    var _rangeRates = default(VectorOffset);
    if (_o.RangeRates != null) {
      var __rangeRates = new StringOffset[_o.RangeRates.Count];
      for (var _j = 0; _j < __rangeRates.Length; ++_j) { __rangeRates[_j] = builder.CreateString(_o.RangeRates[_j]); }
      _rangeRates = CreateRangeRatesVector(builder, __rangeRates);
    }
    var _azimuthRates = default(VectorOffset);
    if (_o.AzimuthRates != null) {
      var __azimuthRates = new StringOffset[_o.AzimuthRates.Count];
      for (var _j = 0; _j < __azimuthRates.Length; ++_j) { __azimuthRates[_j] = builder.CreateString(_o.AzimuthRates[_j]); }
      _azimuthRates = CreateAzimuthRatesVector(builder, __azimuthRates);
    }
    var _elevationRates = default(VectorOffset);
    if (_o.ElevationRates != null) {
      var __elevationRates = new StringOffset[_o.ElevationRates.Count];
      for (var _j = 0; _j < __elevationRates.Length; ++_j) { __elevationRates[_j] = builder.CreateString(_o.ElevationRates[_j]); }
      _elevationRates = CreateElevationRatesVector(builder, __elevationRates);
    }
    var _azimuthBiases = default(VectorOffset);
    if (_o.AzimuthBiases != null) {
      var __azimuthBiases = new StringOffset[_o.AzimuthBiases.Count];
      for (var _j = 0; _j < __azimuthBiases.Length; ++_j) { __azimuthBiases[_j] = builder.CreateString(_o.AzimuthBiases[_j]); }
      _azimuthBiases = CreateAzimuthBiasesVector(builder, __azimuthBiases);
    }
    var _elevationBiases = default(VectorOffset);
    if (_o.ElevationBiases != null) {
      var __elevationBiases = new StringOffset[_o.ElevationBiases.Count];
      for (var _j = 0; _j < __elevationBiases.Length; ++_j) { __elevationBiases[_j] = builder.CreateString(_o.ElevationBiases[_j]); }
      _elevationBiases = CreateElevationBiasesVector(builder, __elevationBiases);
    }
    var _rangeBiases = default(VectorOffset);
    if (_o.RangeBiases != null) {
      var __rangeBiases = new StringOffset[_o.RangeBiases.Count];
      for (var _j = 0; _j < __rangeBiases.Length; ++_j) { __rangeBiases[_j] = builder.CreateString(_o.RangeBiases[_j]); }
      _rangeBiases = CreateRangeBiasesVector(builder, __rangeBiases);
    }
    var _integrationAngles = default(VectorOffset);
    if (_o.IntegrationAngles != null) {
      var __integrationAngles = new StringOffset[_o.IntegrationAngles.Count];
      for (var _j = 0; _j < __integrationAngles.Length; ++_j) { __integrationAngles[_j] = builder.CreateString(_o.IntegrationAngles[_j]); }
      _integrationAngles = CreateIntegrationAnglesVector(builder, __integrationAngles);
    }
    var _crossRangeRes = default(VectorOffset);
    if (_o.CrossRangeRes != null) {
      var __crossRangeRes = new StringOffset[_o.CrossRangeRes.Count];
      for (var _j = 0; _j < __crossRangeRes.Length; ++_j) { __crossRangeRes[_j] = builder.CreateString(_o.CrossRangeRes[_j]); }
      _crossRangeRes = CreateCrossRangeResVector(builder, __crossRangeRes);
    }
    var _peakAmplitudes = default(VectorOffset);
    if (_o.PeakAmplitudes != null) {
      var __peakAmplitudes = new StringOffset[_o.PeakAmplitudes.Count];
      for (var _j = 0; _j < __peakAmplitudes.Length; ++_j) { __peakAmplitudes[_j] = builder.CreateString(_o.PeakAmplitudes[_j]); }
      _peakAmplitudes = CreatePeakAmplitudesVector(builder, __peakAmplitudes);
    }
    var _xpos = default(VectorOffset);
    if (_o.Xpos != null) {
      var __xpos = new StringOffset[_o.Xpos.Count];
      for (var _j = 0; _j < __xpos.Length; ++_j) { __xpos[_j] = builder.CreateString(_o.Xpos[_j]); }
      _xpos = CreateXposVector(builder, __xpos);
    }
    var _ypos = default(VectorOffset);
    if (_o.Ypos != null) {
      var __ypos = new StringOffset[_o.Ypos.Count];
      for (var _j = 0; _j < __ypos.Length; ++_j) { __ypos[_j] = builder.CreateString(_o.Ypos[_j]); }
      _ypos = CreateYposVector(builder, __ypos);
    }
    var _zpos = default(VectorOffset);
    if (_o.Zpos != null) {
      var __zpos = new StringOffset[_o.Zpos.Count];
      for (var _j = 0; _j < __zpos.Length; ++_j) { __zpos[_j] = builder.CreateString(_o.Zpos[_j]); }
      _zpos = CreateZposVector(builder, __zpos);
    }
    var _xvel = default(VectorOffset);
    if (_o.Xvel != null) {
      var __xvel = new StringOffset[_o.Xvel.Count];
      for (var _j = 0; _j < __xvel.Length; ++_j) { __xvel[_j] = builder.CreateString(_o.Xvel[_j]); }
      _xvel = CreateXvelVector(builder, __xvel);
    }
    var _yvel = default(VectorOffset);
    if (_o.Yvel != null) {
      var __yvel = new StringOffset[_o.Yvel.Count];
      for (var _j = 0; _j < __yvel.Length; ++_j) { __yvel[_j] = builder.CreateString(_o.Yvel[_j]); }
      _yvel = CreateYvelVector(builder, __yvel);
    }
    var _zvel = default(VectorOffset);
    if (_o.Zvel != null) {
      var __zvel = new StringOffset[_o.Zvel.Count];
      for (var _j = 0; _j < __zvel.Length; ++_j) { __zvel[_j] = builder.CreateString(_o.Zvel[_j]); }
      _zvel = CreateZvelVector(builder, __zvel);
    }
    return CreateRadarSOIObservation_Full(
      builder,
      _obStartTime,
      _tovs,
      _rspaces,
      _xspaces,
      _doppler2XRs,
      _deltaTimes,
      _aspectAngles,
      _projAngVels,
      _idStateVector,
      _idAttitudeSet,
      _ranges,
      _azimuths,
      _elevations,
      _rangeRates,
      _azimuthRates,
      _elevationRates,
      _azimuthBiases,
      _elevationBiases,
      _rangeBiases,
      _integrationAngles,
      _crossRangeRes,
      _o.Beta,
      _o.Kappa,
      _peakAmplitudes,
      _o.CenterFrequency,
      _o.PulseBandwidth,
      _xpos,
      _ypos,
      _zpos,
      _xvel,
      _yvel,
      _zvel);
  }
}

public class RadarSOIObservation_FullT
{
  public string ObStartTime { get; set; }
  public List<string> Tovs { get; set; }
  public List<string> Rspaces { get; set; }
  public List<string> Xspaces { get; set; }
  public List<string> Doppler2XRs { get; set; }
  public List<string> DeltaTimes { get; set; }
  public List<string> AspectAngles { get; set; }
  public List<string> ProjAngVels { get; set; }
  public string IdStateVector { get; set; }
  public string IdAttitudeSet { get; set; }
  public List<string> Ranges { get; set; }
  public List<string> Azimuths { get; set; }
  public List<string> Elevations { get; set; }
  public List<string> RangeRates { get; set; }
  public List<string> AzimuthRates { get; set; }
  public List<string> ElevationRates { get; set; }
  public List<string> AzimuthBiases { get; set; }
  public List<string> ElevationBiases { get; set; }
  public List<string> RangeBiases { get; set; }
  public List<string> IntegrationAngles { get; set; }
  public List<string> CrossRangeRes { get; set; }
  public double Beta { get; set; }
  public double Kappa { get; set; }
  public List<string> PeakAmplitudes { get; set; }
  public double CenterFrequency { get; set; }
  public double PulseBandwidth { get; set; }
  public List<string> Xpos { get; set; }
  public List<string> Ypos { get; set; }
  public List<string> Zpos { get; set; }
  public List<string> Xvel { get; set; }
  public List<string> Yvel { get; set; }
  public List<string> Zvel { get; set; }

  public RadarSOIObservation_FullT() {
    this.ObStartTime = null;
    this.Tovs = null;
    this.Rspaces = null;
    this.Xspaces = null;
    this.Doppler2XRs = null;
    this.DeltaTimes = null;
    this.AspectAngles = null;
    this.ProjAngVels = null;
    this.IdStateVector = null;
    this.IdAttitudeSet = null;
    this.Ranges = null;
    this.Azimuths = null;
    this.Elevations = null;
    this.RangeRates = null;
    this.AzimuthRates = null;
    this.ElevationRates = null;
    this.AzimuthBiases = null;
    this.ElevationBiases = null;
    this.RangeBiases = null;
    this.IntegrationAngles = null;
    this.CrossRangeRes = null;
    this.Beta = 0.0;
    this.Kappa = 0.0;
    this.PeakAmplitudes = null;
    this.CenterFrequency = 0.0;
    this.PulseBandwidth = 0.0;
    this.Xpos = null;
    this.Ypos = null;
    this.Zpos = null;
    this.Xvel = null;
    this.Yvel = null;
    this.Zvel = null;
  }
  public static RadarSOIObservation_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return RadarSOIObservation_Full.GetRootAsRadarSOIObservation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RadarSOIObservation_Full.FinishRadarSOIObservation_FullBuffer(fbb, RadarSOIObservation_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RadarSOIObservation_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ObStartTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*Tovs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*Rspaces*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*Xspaces*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Doppler2XRs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*DeltaTimes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*AspectAngles*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*ProjAngVels*/, false)
      && verifier.VerifyString(tablePos, 20 /*IdStateVector*/, false)
      && verifier.VerifyString(tablePos, 22 /*IdAttitudeSet*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*Ranges*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*Azimuths*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*Elevations*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*RangeRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*AzimuthRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*ElevationRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*AzimuthBiases*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*ElevationBiases*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*RangeBiases*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*IntegrationAngles*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*CrossRangeRes*/, false)
      && verifier.VerifyField(tablePos, 46 /*Beta*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*Kappa*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*PeakAmplitudes*/, false)
      && verifier.VerifyField(tablePos, 52 /*CenterFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*PulseBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*Xpos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*Ypos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*Zpos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*Xvel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*Yvel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 66 /*Zvel*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
