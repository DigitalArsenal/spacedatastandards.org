// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
public struct LogisticsTransportationPlans_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogisticsTransportationPlans_Ingest GetRootAsLogisticsTransportationPlans_Ingest(ByteBuffer _bb) { return GetRootAsLogisticsTransportationPlans_Ingest(_bb, new LogisticsTransportationPlans_Ingest()); }
  public static LogisticsTransportationPlans_Ingest GetRootAsLogisticsTransportationPlans_Ingest(ByteBuffer _bb, LogisticsTransportationPlans_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LogisticsTransportationPlans_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOGI"); }
  public static bool VerifyLogisticsTransportationPlans_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOGI", false, LogisticsTransportationPlans_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogisticsTransportationPlans_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89002
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string PlansNumber { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlansNumberBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlansNumberBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlansNumberArray() { return __p.__vector_as_array<byte>(4); }
  /// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool MissionChange { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Defines the transporation plan as either a deployment or redeployment.
  /// Example: /// Example: DEPLOY
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string PlanDefinition { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlanDefinitionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPlanDefinitionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPlanDefinitionArray() { return __p.__vector_as_array<byte>(8); }
  /// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 1, Maximum length = 1
  public string StatusCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStatusCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStatusCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
  /// Example: /// Example: SMITH, JOHN
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Coordinator { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordinatorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCoordinatorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCoordinatorArray() { return __p.__vector_as_array<byte>(12); }
  /// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
  /// Example: /// Example: TACC
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string CoordinatorUnit { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordinatorUnitBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCoordinatorUnitBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCoordinatorUnitArray() { return __p.__vector_as_array<byte>(14); }
  /// The origin location.
  /// Example: /// Example: KATL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string OriginICAO { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginICAOBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOriginICAOBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOriginICAOArray() { return __p.__vector_as_array<byte>(16); }
  /// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-15T14:25:00.123Z
  /// Constraints: No constraints specified.
  public string EstDepTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstDepTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEstDepTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEstDepTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-15T14:25:00.123Z
  /// Constraints: No constraints specified.
  public string EstArrTime { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEstArrTimeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEstArrTimeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEstArrTimeArray() { return __p.__vector_as_array<byte>(20); }
  /// Destination location ICAO.
  /// Example: /// Example: YBCS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string DestinationICAO { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDestinationICAOBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDestinationICAOBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDestinationICAOArray() { return __p.__vector_as_array<byte>(22); }
  /// The identifier that represents a Logistics Master Record.
  /// Example: /// Example: L62126
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string LogisticMasterRecordId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogisticMasterRecordIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetLogisticMasterRecordIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetLogisticMasterRecordIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Contains the tail number displayed by GDSS2.
  /// Example: /// Example: 99209
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string TpTailNumber { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTpTailNumberBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTpTailNumberBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTpTailNumberArray() { return __p.__vector_as_array<byte>(26); }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: C17A
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string TpAircraftMDS { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTpAircraftMDSBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTpAircraftMDSBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTpAircraftMDSArray() { return __p.__vector_as_array<byte>(28); }
  /// The major command for the current unit.
  /// Example: /// Example: HQAMC
  /// Constraints: Minimum length = 0, Maximum length = 250
  public string Majcom { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMajcomBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMajcomBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMajcomArray() { return __p.__vector_as_array<byte>(30); }
  /// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  public string ApproxArrTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApproxArrTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetApproxArrTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetApproxArrTimeArray() { return __p.__vector_as_array<byte>(32); }
  /// Transportation plan duration, expressed in the format MMM:SS.
  /// Example: /// Example: 086:20
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string Duration { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDurationBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetDurationBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetDurationArray() { return __p.__vector_as_array<byte>(34); }
  /// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T19:37:00.123Z
  /// Constraints: No constraints specified.
  public string ActDepTime { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActDepTimeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetActDepTimeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetActDepTimeArray() { return __p.__vector_as_array<byte>(36); }
  /// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  public string ClosedDate { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClosedDateBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetClosedDateBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetClosedDateArray() { return __p.__vector_as_array<byte>(38); }
  /// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  public string CancelledDate { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCancelledDateBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCancelledDateBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCancelledDateArray() { return __p.__vector_as_array<byte>(40); }
  /// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
  /// Example: /// Example: NMCMU
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string AircraftStatus { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAircraftStatusBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetAircraftStatusBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetAircraftStatusArray() { return __p.__vector_as_array<byte>(42); }
  /// Transportation plan enroute stops.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int NumEnrouteStops { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
  /// Example: /// Example: 9009209
  /// Constraints: Minimum length = 0, Maximum length = 30
  public string SerialNumber { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumberBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetSerialNumberBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetSerialNumberArray() { return __p.__vector_as_array<byte>(46); }
  /// The number of transloads for this Transportation Plan.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumTransLoads { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  public string LastChangedDate { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastChangedDateBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetLastChangedDateBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetLastChangedDateArray() { return __p.__vector_as_array<byte>(50); }
  /// The transportation segments associated with this transportation plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string LogisticsSegments(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LogisticsSegmentsLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Remarks associated with this transportation plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string LogisticsTransportationPlansRemarks(int j) { int o = __p.__offset(54); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LogisticsTransportationPlansRemarksLength { get { int o = __p.__offset(54); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LogisticsTransportationPlans_Ingest> CreateLogisticsTransportationPlans_Ingest(FlatBufferBuilder builder,
      StringOffset plansNumberOffset = default(StringOffset),
      bool missionChange = false,
      StringOffset planDefinitionOffset = default(StringOffset),
      StringOffset statusCodeOffset = default(StringOffset),
      StringOffset coordinatorOffset = default(StringOffset),
      StringOffset coordinatorUnitOffset = default(StringOffset),
      StringOffset originICAOOffset = default(StringOffset),
      StringOffset estDepTimeOffset = default(StringOffset),
      StringOffset estArrTimeOffset = default(StringOffset),
      StringOffset destinationICAOOffset = default(StringOffset),
      StringOffset logisticMasterRecordIdOffset = default(StringOffset),
      StringOffset tpTailNumberOffset = default(StringOffset),
      StringOffset tpAircraftMDSOffset = default(StringOffset),
      StringOffset majcomOffset = default(StringOffset),
      StringOffset approxArrTimeOffset = default(StringOffset),
      StringOffset durationOffset = default(StringOffset),
      StringOffset actDepTimeOffset = default(StringOffset),
      StringOffset closedDateOffset = default(StringOffset),
      StringOffset cancelledDateOffset = default(StringOffset),
      StringOffset aircraftStatusOffset = default(StringOffset),
      int numEnrouteStops = 0,
      StringOffset serialNumberOffset = default(StringOffset),
      int numTransLoads = 0,
      StringOffset lastChangedDateOffset = default(StringOffset),
      VectorOffset logisticsSegmentsOffset = default(VectorOffset),
      VectorOffset logisticsTransportationPlansRemarksOffset = default(VectorOffset)) {
    builder.StartTable(26);
    LogisticsTransportationPlans_Ingest.AddLogisticsTransportationPlansRemarks(builder, logisticsTransportationPlansRemarksOffset);
    LogisticsTransportationPlans_Ingest.AddLogisticsSegments(builder, logisticsSegmentsOffset);
    LogisticsTransportationPlans_Ingest.AddLastChangedDate(builder, lastChangedDateOffset);
    LogisticsTransportationPlans_Ingest.AddNumTransLoads(builder, numTransLoads);
    LogisticsTransportationPlans_Ingest.AddSerialNumber(builder, serialNumberOffset);
    LogisticsTransportationPlans_Ingest.AddNumEnrouteStops(builder, numEnrouteStops);
    LogisticsTransportationPlans_Ingest.AddAircraftStatus(builder, aircraftStatusOffset);
    LogisticsTransportationPlans_Ingest.AddCancelledDate(builder, cancelledDateOffset);
    LogisticsTransportationPlans_Ingest.AddClosedDate(builder, closedDateOffset);
    LogisticsTransportationPlans_Ingest.AddActDepTime(builder, actDepTimeOffset);
    LogisticsTransportationPlans_Ingest.AddDuration(builder, durationOffset);
    LogisticsTransportationPlans_Ingest.AddApproxArrTime(builder, approxArrTimeOffset);
    LogisticsTransportationPlans_Ingest.AddMajcom(builder, majcomOffset);
    LogisticsTransportationPlans_Ingest.AddTpAircraftMDS(builder, tpAircraftMDSOffset);
    LogisticsTransportationPlans_Ingest.AddTpTailNumber(builder, tpTailNumberOffset);
    LogisticsTransportationPlans_Ingest.AddLogisticMasterRecordId(builder, logisticMasterRecordIdOffset);
    LogisticsTransportationPlans_Ingest.AddDestinationICAO(builder, destinationICAOOffset);
    LogisticsTransportationPlans_Ingest.AddEstArrTime(builder, estArrTimeOffset);
    LogisticsTransportationPlans_Ingest.AddEstDepTime(builder, estDepTimeOffset);
    LogisticsTransportationPlans_Ingest.AddOriginICAO(builder, originICAOOffset);
    LogisticsTransportationPlans_Ingest.AddCoordinatorUnit(builder, coordinatorUnitOffset);
    LogisticsTransportationPlans_Ingest.AddCoordinator(builder, coordinatorOffset);
    LogisticsTransportationPlans_Ingest.AddStatusCode(builder, statusCodeOffset);
    LogisticsTransportationPlans_Ingest.AddPlanDefinition(builder, planDefinitionOffset);
    LogisticsTransportationPlans_Ingest.AddPlansNumber(builder, plansNumberOffset);
    LogisticsTransportationPlans_Ingest.AddMissionChange(builder, missionChange);
    return LogisticsTransportationPlans_Ingest.EndLogisticsTransportationPlans_Ingest(builder);
  }

  public static void StartLogisticsTransportationPlans_Ingest(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddPlansNumber(FlatBufferBuilder builder, StringOffset plansNumberOffset) { builder.AddOffset(0, plansNumberOffset.Value, 0); }
  public static void AddMissionChange(FlatBufferBuilder builder, bool missionChange) { builder.AddBool(1, missionChange, false); }
  public static void AddPlanDefinition(FlatBufferBuilder builder, StringOffset planDefinitionOffset) { builder.AddOffset(2, planDefinitionOffset.Value, 0); }
  public static void AddStatusCode(FlatBufferBuilder builder, StringOffset statusCodeOffset) { builder.AddOffset(3, statusCodeOffset.Value, 0); }
  public static void AddCoordinator(FlatBufferBuilder builder, StringOffset coordinatorOffset) { builder.AddOffset(4, coordinatorOffset.Value, 0); }
  public static void AddCoordinatorUnit(FlatBufferBuilder builder, StringOffset coordinatorUnitOffset) { builder.AddOffset(5, coordinatorUnitOffset.Value, 0); }
  public static void AddOriginICAO(FlatBufferBuilder builder, StringOffset originICAOOffset) { builder.AddOffset(6, originICAOOffset.Value, 0); }
  public static void AddEstDepTime(FlatBufferBuilder builder, StringOffset estDepTimeOffset) { builder.AddOffset(7, estDepTimeOffset.Value, 0); }
  public static void AddEstArrTime(FlatBufferBuilder builder, StringOffset estArrTimeOffset) { builder.AddOffset(8, estArrTimeOffset.Value, 0); }
  public static void AddDestinationICAO(FlatBufferBuilder builder, StringOffset destinationICAOOffset) { builder.AddOffset(9, destinationICAOOffset.Value, 0); }
  public static void AddLogisticMasterRecordId(FlatBufferBuilder builder, StringOffset logisticMasterRecordIdOffset) { builder.AddOffset(10, logisticMasterRecordIdOffset.Value, 0); }
  public static void AddTpTailNumber(FlatBufferBuilder builder, StringOffset tpTailNumberOffset) { builder.AddOffset(11, tpTailNumberOffset.Value, 0); }
  public static void AddTpAircraftMDS(FlatBufferBuilder builder, StringOffset tpAircraftMDSOffset) { builder.AddOffset(12, tpAircraftMDSOffset.Value, 0); }
  public static void AddMajcom(FlatBufferBuilder builder, StringOffset majcomOffset) { builder.AddOffset(13, majcomOffset.Value, 0); }
  public static void AddApproxArrTime(FlatBufferBuilder builder, StringOffset approxArrTimeOffset) { builder.AddOffset(14, approxArrTimeOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, StringOffset durationOffset) { builder.AddOffset(15, durationOffset.Value, 0); }
  public static void AddActDepTime(FlatBufferBuilder builder, StringOffset actDepTimeOffset) { builder.AddOffset(16, actDepTimeOffset.Value, 0); }
  public static void AddClosedDate(FlatBufferBuilder builder, StringOffset closedDateOffset) { builder.AddOffset(17, closedDateOffset.Value, 0); }
  public static void AddCancelledDate(FlatBufferBuilder builder, StringOffset cancelledDateOffset) { builder.AddOffset(18, cancelledDateOffset.Value, 0); }
  public static void AddAircraftStatus(FlatBufferBuilder builder, StringOffset aircraftStatusOffset) { builder.AddOffset(19, aircraftStatusOffset.Value, 0); }
  public static void AddNumEnrouteStops(FlatBufferBuilder builder, int numEnrouteStops) { builder.AddInt(20, numEnrouteStops, 0); }
  public static void AddSerialNumber(FlatBufferBuilder builder, StringOffset serialNumberOffset) { builder.AddOffset(21, serialNumberOffset.Value, 0); }
  public static void AddNumTransLoads(FlatBufferBuilder builder, int numTransLoads) { builder.AddInt(22, numTransLoads, 0); }
  public static void AddLastChangedDate(FlatBufferBuilder builder, StringOffset lastChangedDateOffset) { builder.AddOffset(23, lastChangedDateOffset.Value, 0); }
  public static void AddLogisticsSegments(FlatBufferBuilder builder, VectorOffset logisticsSegmentsOffset) { builder.AddOffset(24, logisticsSegmentsOffset.Value, 0); }
  public static VectorOffset CreateLogisticsSegmentsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsSegmentsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsSegmentsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsSegmentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogisticsSegmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLogisticsTransportationPlansRemarks(FlatBufferBuilder builder, VectorOffset logisticsTransportationPlansRemarksOffset) { builder.AddOffset(25, logisticsTransportationPlansRemarksOffset.Value, 0); }
  public static VectorOffset CreateLogisticsTransportationPlansRemarksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsTransportationPlansRemarksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsTransportationPlansRemarksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsTransportationPlansRemarksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogisticsTransportationPlansRemarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LogisticsTransportationPlans_Ingest> EndLogisticsTransportationPlans_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LogisticsTransportationPlans_Ingest>(o);
  }
  public static void FinishLogisticsTransportationPlans_IngestBuffer(FlatBufferBuilder builder, Offset<LogisticsTransportationPlans_Ingest> offset) { builder.Finish(offset.Value, "LOGI"); }
  public static void FinishSizePrefixedLogisticsTransportationPlans_IngestBuffer(FlatBufferBuilder builder, Offset<LogisticsTransportationPlans_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "LOGI"); }
  public LogisticsTransportationPlans_IngestT UnPack() {
    var _o = new LogisticsTransportationPlans_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogisticsTransportationPlans_IngestT _o) {
    _o.PlansNumber = this.PlansNumber;
    _o.MissionChange = this.MissionChange;
    _o.PlanDefinition = this.PlanDefinition;
    _o.StatusCode = this.StatusCode;
    _o.Coordinator = this.Coordinator;
    _o.CoordinatorUnit = this.CoordinatorUnit;
    _o.OriginICAO = this.OriginICAO;
    _o.EstDepTime = this.EstDepTime;
    _o.EstArrTime = this.EstArrTime;
    _o.DestinationICAO = this.DestinationICAO;
    _o.LogisticMasterRecordId = this.LogisticMasterRecordId;
    _o.TpTailNumber = this.TpTailNumber;
    _o.TpAircraftMDS = this.TpAircraftMDS;
    _o.Majcom = this.Majcom;
    _o.ApproxArrTime = this.ApproxArrTime;
    _o.Duration = this.Duration;
    _o.ActDepTime = this.ActDepTime;
    _o.ClosedDate = this.ClosedDate;
    _o.CancelledDate = this.CancelledDate;
    _o.AircraftStatus = this.AircraftStatus;
    _o.NumEnrouteStops = this.NumEnrouteStops;
    _o.SerialNumber = this.SerialNumber;
    _o.NumTransLoads = this.NumTransLoads;
    _o.LastChangedDate = this.LastChangedDate;
    _o.LogisticsSegments = new List<string>();
    for (var _j = 0; _j < this.LogisticsSegmentsLength; ++_j) {_o.LogisticsSegments.Add(this.LogisticsSegments(_j));}
    _o.LogisticsTransportationPlansRemarks = new List<string>();
    for (var _j = 0; _j < this.LogisticsTransportationPlansRemarksLength; ++_j) {_o.LogisticsTransportationPlansRemarks.Add(this.LogisticsTransportationPlansRemarks(_j));}
  }
  public static Offset<LogisticsTransportationPlans_Ingest> Pack(FlatBufferBuilder builder, LogisticsTransportationPlans_IngestT _o) {
    if (_o == null) return default(Offset<LogisticsTransportationPlans_Ingest>);
    var _plansNumber = _o.PlansNumber == null ? default(StringOffset) : builder.CreateString(_o.PlansNumber);
    var _planDefinition = _o.PlanDefinition == null ? default(StringOffset) : builder.CreateString(_o.PlanDefinition);
    var _statusCode = _o.StatusCode == null ? default(StringOffset) : builder.CreateString(_o.StatusCode);
    var _coordinator = _o.Coordinator == null ? default(StringOffset) : builder.CreateString(_o.Coordinator);
    var _coordinatorUnit = _o.CoordinatorUnit == null ? default(StringOffset) : builder.CreateString(_o.CoordinatorUnit);
    var _originICAO = _o.OriginICAO == null ? default(StringOffset) : builder.CreateString(_o.OriginICAO);
    var _estDepTime = _o.EstDepTime == null ? default(StringOffset) : builder.CreateString(_o.EstDepTime);
    var _estArrTime = _o.EstArrTime == null ? default(StringOffset) : builder.CreateString(_o.EstArrTime);
    var _destinationICAO = _o.DestinationICAO == null ? default(StringOffset) : builder.CreateString(_o.DestinationICAO);
    var _logisticMasterRecordId = _o.LogisticMasterRecordId == null ? default(StringOffset) : builder.CreateString(_o.LogisticMasterRecordId);
    var _tpTailNumber = _o.TpTailNumber == null ? default(StringOffset) : builder.CreateString(_o.TpTailNumber);
    var _tpAircraftMDS = _o.TpAircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.TpAircraftMDS);
    var _majcom = _o.Majcom == null ? default(StringOffset) : builder.CreateString(_o.Majcom);
    var _approxArrTime = _o.ApproxArrTime == null ? default(StringOffset) : builder.CreateString(_o.ApproxArrTime);
    var _duration = _o.Duration == null ? default(StringOffset) : builder.CreateString(_o.Duration);
    var _actDepTime = _o.ActDepTime == null ? default(StringOffset) : builder.CreateString(_o.ActDepTime);
    var _closedDate = _o.ClosedDate == null ? default(StringOffset) : builder.CreateString(_o.ClosedDate);
    var _cancelledDate = _o.CancelledDate == null ? default(StringOffset) : builder.CreateString(_o.CancelledDate);
    var _aircraftStatus = _o.AircraftStatus == null ? default(StringOffset) : builder.CreateString(_o.AircraftStatus);
    var _serialNumber = _o.SerialNumber == null ? default(StringOffset) : builder.CreateString(_o.SerialNumber);
    var _lastChangedDate = _o.LastChangedDate == null ? default(StringOffset) : builder.CreateString(_o.LastChangedDate);
    var _logisticsSegments = default(VectorOffset);
    if (_o.LogisticsSegments != null) {
      var __logisticsSegments = new StringOffset[_o.LogisticsSegments.Count];
      for (var _j = 0; _j < __logisticsSegments.Length; ++_j) { __logisticsSegments[_j] = builder.CreateString(_o.LogisticsSegments[_j]); }
      _logisticsSegments = CreateLogisticsSegmentsVector(builder, __logisticsSegments);
    }
    var _logisticsTransportationPlansRemarks = default(VectorOffset);
    if (_o.LogisticsTransportationPlansRemarks != null) {
      var __logisticsTransportationPlansRemarks = new StringOffset[_o.LogisticsTransportationPlansRemarks.Count];
      for (var _j = 0; _j < __logisticsTransportationPlansRemarks.Length; ++_j) { __logisticsTransportationPlansRemarks[_j] = builder.CreateString(_o.LogisticsTransportationPlansRemarks[_j]); }
      _logisticsTransportationPlansRemarks = CreateLogisticsTransportationPlansRemarksVector(builder, __logisticsTransportationPlansRemarks);
    }
    return CreateLogisticsTransportationPlans_Ingest(
      builder,
      _plansNumber,
      _o.MissionChange,
      _planDefinition,
      _statusCode,
      _coordinator,
      _coordinatorUnit,
      _originICAO,
      _estDepTime,
      _estArrTime,
      _destinationICAO,
      _logisticMasterRecordId,
      _tpTailNumber,
      _tpAircraftMDS,
      _majcom,
      _approxArrTime,
      _duration,
      _actDepTime,
      _closedDate,
      _cancelledDate,
      _aircraftStatus,
      _o.NumEnrouteStops,
      _serialNumber,
      _o.NumTransLoads,
      _lastChangedDate,
      _logisticsSegments,
      _logisticsTransportationPlansRemarks);
  }
}

public class LogisticsTransportationPlans_IngestT
{
  public string PlansNumber { get; set; }
  public bool MissionChange { get; set; }
  public string PlanDefinition { get; set; }
  public string StatusCode { get; set; }
  public string Coordinator { get; set; }
  public string CoordinatorUnit { get; set; }
  public string OriginICAO { get; set; }
  public string EstDepTime { get; set; }
  public string EstArrTime { get; set; }
  public string DestinationICAO { get; set; }
  public string LogisticMasterRecordId { get; set; }
  public string TpTailNumber { get; set; }
  public string TpAircraftMDS { get; set; }
  public string Majcom { get; set; }
  public string ApproxArrTime { get; set; }
  public string Duration { get; set; }
  public string ActDepTime { get; set; }
  public string ClosedDate { get; set; }
  public string CancelledDate { get; set; }
  public string AircraftStatus { get; set; }
  public int NumEnrouteStops { get; set; }
  public string SerialNumber { get; set; }
  public int NumTransLoads { get; set; }
  public string LastChangedDate { get; set; }
  public List<string> LogisticsSegments { get; set; }
  public List<string> LogisticsTransportationPlansRemarks { get; set; }

  public LogisticsTransportationPlans_IngestT() {
    this.PlansNumber = null;
    this.MissionChange = false;
    this.PlanDefinition = null;
    this.StatusCode = null;
    this.Coordinator = null;
    this.CoordinatorUnit = null;
    this.OriginICAO = null;
    this.EstDepTime = null;
    this.EstArrTime = null;
    this.DestinationICAO = null;
    this.LogisticMasterRecordId = null;
    this.TpTailNumber = null;
    this.TpAircraftMDS = null;
    this.Majcom = null;
    this.ApproxArrTime = null;
    this.Duration = null;
    this.ActDepTime = null;
    this.ClosedDate = null;
    this.CancelledDate = null;
    this.AircraftStatus = null;
    this.NumEnrouteStops = 0;
    this.SerialNumber = null;
    this.NumTransLoads = 0;
    this.LastChangedDate = null;
    this.LogisticsSegments = null;
    this.LogisticsTransportationPlansRemarks = null;
  }
  public static LogisticsTransportationPlans_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return LogisticsTransportationPlans_Ingest.GetRootAsLogisticsTransportationPlans_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LogisticsTransportationPlans_Ingest.FinishLogisticsTransportationPlans_IngestBuffer(fbb, LogisticsTransportationPlans_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LogisticsTransportationPlans_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlansNumber*/, false)
      && verifier.VerifyField(tablePos, 6 /*MissionChange*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 8 /*PlanDefinition*/, false)
      && verifier.VerifyString(tablePos, 10 /*StatusCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*Coordinator*/, false)
      && verifier.VerifyString(tablePos, 14 /*CoordinatorUnit*/, false)
      && verifier.VerifyString(tablePos, 16 /*OriginICAO*/, false)
      && verifier.VerifyString(tablePos, 18 /*EstDepTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*EstArrTime*/, false)
      && verifier.VerifyString(tablePos, 22 /*DestinationICAO*/, false)
      && verifier.VerifyString(tablePos, 24 /*LogisticMasterRecordId*/, false)
      && verifier.VerifyString(tablePos, 26 /*TpTailNumber*/, false)
      && verifier.VerifyString(tablePos, 28 /*TpAircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 30 /*Majcom*/, false)
      && verifier.VerifyString(tablePos, 32 /*ApproxArrTime*/, false)
      && verifier.VerifyString(tablePos, 34 /*Duration*/, false)
      && verifier.VerifyString(tablePos, 36 /*ActDepTime*/, false)
      && verifier.VerifyString(tablePos, 38 /*ClosedDate*/, false)
      && verifier.VerifyString(tablePos, 40 /*CancelledDate*/, false)
      && verifier.VerifyString(tablePos, 42 /*AircraftStatus*/, false)
      && verifier.VerifyField(tablePos, 44 /*NumEnrouteStops*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 46 /*SerialNumber*/, false)
      && verifier.VerifyField(tablePos, 48 /*NumTransLoads*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*LastChangedDate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*LogisticsSegments*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 54 /*LogisticsTransportationPlansRemarks*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
