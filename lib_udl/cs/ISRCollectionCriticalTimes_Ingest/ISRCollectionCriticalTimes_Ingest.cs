// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// High priority time windows.
public struct ISRCollectionCriticalTimes_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionCriticalTimes_Ingest GetRootAsISRCollectionCriticalTimes_Ingest(ByteBuffer _bb) { return GetRootAsISRCollectionCriticalTimes_Ingest(_bb, new ISRCollectionCriticalTimes_Ingest()); }
  public static ISRCollectionCriticalTimes_Ingest GetRootAsISRCollectionCriticalTimes_Ingest(ByteBuffer _bb, ISRCollectionCriticalTimes_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ISRCollectionCriticalTimes_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ISRC"); }
  public static bool VerifyISRCollectionCriticalTimes_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ISRC", false, ISRCollectionCriticalTimes_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ISRCollectionCriticalTimes_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Critical start time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  public string EarliestImagingTime { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEarliestImagingTimeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetEarliestImagingTimeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetEarliestImagingTimeArray() { return __p.__vector_as_array<byte>(4); }
  /// Critical stop time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:11:15.001Z
  /// Constraints: No constraints specified.
  public string LatestImagingTime { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLatestImagingTimeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetLatestImagingTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetLatestImagingTimeArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<ISRCollectionCriticalTimes_Ingest> CreateISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder,
      StringOffset earliestImagingTimeOffset = default(StringOffset),
      StringOffset latestImagingTimeOffset = default(StringOffset)) {
    builder.StartTable(2);
    ISRCollectionCriticalTimes_Ingest.AddLatestImagingTime(builder, latestImagingTimeOffset);
    ISRCollectionCriticalTimes_Ingest.AddEarliestImagingTime(builder, earliestImagingTimeOffset);
    return ISRCollectionCriticalTimes_Ingest.EndISRCollectionCriticalTimes_Ingest(builder);
  }

  public static void StartISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEarliestImagingTime(FlatBufferBuilder builder, StringOffset earliestImagingTimeOffset) { builder.AddOffset(0, earliestImagingTimeOffset.Value, 0); }
  public static void AddLatestImagingTime(FlatBufferBuilder builder, StringOffset latestImagingTimeOffset) { builder.AddOffset(1, latestImagingTimeOffset.Value, 0); }
  public static Offset<ISRCollectionCriticalTimes_Ingest> EndISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ISRCollectionCriticalTimes_Ingest>(o);
  }
  public static void FinishISRCollectionCriticalTimes_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionCriticalTimes_Ingest> offset) { builder.Finish(offset.Value, "ISRC"); }
  public static void FinishSizePrefixedISRCollectionCriticalTimes_IngestBuffer(FlatBufferBuilder builder, Offset<ISRCollectionCriticalTimes_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ISRC"); }
  public ISRCollectionCriticalTimes_IngestT UnPack() {
    var _o = new ISRCollectionCriticalTimes_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ISRCollectionCriticalTimes_IngestT _o) {
    _o.EarliestImagingTime = this.EarliestImagingTime;
    _o.LatestImagingTime = this.LatestImagingTime;
  }
  public static Offset<ISRCollectionCriticalTimes_Ingest> Pack(FlatBufferBuilder builder, ISRCollectionCriticalTimes_IngestT _o) {
    if (_o == null) return default(Offset<ISRCollectionCriticalTimes_Ingest>);
    var _earliestImagingTime = _o.EarliestImagingTime == null ? default(StringOffset) : builder.CreateString(_o.EarliestImagingTime);
    var _latestImagingTime = _o.LatestImagingTime == null ? default(StringOffset) : builder.CreateString(_o.LatestImagingTime);
    return CreateISRCollectionCriticalTimes_Ingest(
      builder,
      _earliestImagingTime,
      _latestImagingTime);
  }
}

public class ISRCollectionCriticalTimes_IngestT
{
  public string EarliestImagingTime { get; set; }
  public string LatestImagingTime { get; set; }

  public ISRCollectionCriticalTimes_IngestT() {
    this.EarliestImagingTime = null;
    this.LatestImagingTime = null;
  }
  public static ISRCollectionCriticalTimes_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ISRCollectionCriticalTimes_Ingest.GetRootAsISRCollectionCriticalTimes_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ISRCollectionCriticalTimes_Ingest.FinishISRCollectionCriticalTimes_IngestBuffer(fbb, ISRCollectionCriticalTimes_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ISRCollectionCriticalTimes_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*EarliestImagingTime*/, false)
      && verifier.VerifyString(tablePos, 6 /*LatestImagingTime*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
