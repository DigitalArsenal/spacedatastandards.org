// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
public struct ObjectOfInterest_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ObjectOfInterest_Abridged GetRootAsObjectOfInterest_Abridged(ByteBuffer _bb) { return GetRootAsObjectOfInterest_Abridged(_bb, new ObjectOfInterest_Abridged()); }
  public static ObjectOfInterest_Abridged GetRootAsObjectOfInterest_Abridged(ByteBuffer _bb, ObjectOfInterest_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ObjectOfInterest_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "OBJE"); }
  public static bool VerifyObjectOfInterest_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("OBJE", false, ObjectOfInterest_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ObjectOfInterest_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: OBJECTOFINTEREST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Unique name of the object of interest event.
  /// Example: /// Example: Example_name
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  /// Sensor tasking start time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string SensorTaskingStartTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorTaskingStartTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSensorTaskingStartTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSensorTaskingStartTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// Sensor tasking stop time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string SensorTaskingStopTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorTaskingStopTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSensorTaskingStopTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSensorTaskingStopTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Priority of the object of interest as an integer (1=highest priority).
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int Priority { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
  /// Example: /// Example: OPEN
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Status { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(20); }
  /// Time of last status change of the object of interest event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  public string StatusDate { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusDateBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetStatusDateBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetStatusDateArray() { return __p.__vector_as_array<byte>(22); }
  /// Description of the object of interest event.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Description { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(24); }
  /// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LastObTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetLastObTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetLastObTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string MissedObTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissedObTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMissedObTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMissedObTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// Possible delta V applications for the object of interest, in km/sec.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  public string DeltaVs(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeltaVsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Possible delta time applications for the object of interest, in seconds.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  public string DeltaTs(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeltaTsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string SvEpoch { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSvEpochBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetSvEpochBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetSvEpochArray() { return __p.__vector_as_array<byte>(34); }
  /// Last reported x position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double X { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported y position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Y { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported z position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Z { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported x velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Xvel { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported y velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Yvel { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported z velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Zvel { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ElsetEpoch { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElsetEpochBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetElsetEpochBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetElsetEpochArray() { return __p.__vector_as_array<byte>(48); }
  /// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double MeanMotion { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Eccentricity { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Inclination { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Raan { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double ArgOfPerigee { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double MeanAnomaly { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int RevNo { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double BStar { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double MeanMotionDot { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double MeanMotionDDot { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double SemiMajorAxis { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Period { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Apogee { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Perigee { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(78); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(80); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(82); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(84); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(86); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public ObjectOfInterest_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(88); return o != 0 ? (ObjectOfInterest_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ObjectOfInterest_Abridged_dataMode_Enum.REAL; } }

  public static Offset<ObjectOfInterest_Abridged> CreateObjectOfInterest_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset sensorTaskingStartTimeOffset = default(StringOffset),
      StringOffset sensorTaskingStopTimeOffset = default(StringOffset),
      int priority = 0,
      StringOffset statusOffset = default(StringOffset),
      StringOffset statusDateOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset lastObTimeOffset = default(StringOffset),
      StringOffset missedObTimeOffset = default(StringOffset),
      VectorOffset deltaVsOffset = default(VectorOffset),
      VectorOffset deltaTsOffset = default(VectorOffset),
      StringOffset svEpochOffset = default(StringOffset),
      double x = 0.0,
      double y = 0.0,
      double z = 0.0,
      double xvel = 0.0,
      double yvel = 0.0,
      double zvel = 0.0,
      StringOffset elsetEpochOffset = default(StringOffset),
      double meanMotion = 0.0,
      double eccentricity = 0.0,
      double inclination = 0.0,
      double raan = 0.0,
      double argOfPerigee = 0.0,
      double meanAnomaly = 0.0,
      int revNo = 0,
      double bStar = 0.0,
      double meanMotionDot = 0.0,
      double meanMotionDDot = 0.0,
      double semiMajorAxis = 0.0,
      double period = 0.0,
      double apogee = 0.0,
      double perigee = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      ObjectOfInterest_Abridged_dataMode_Enum dataMode = ObjectOfInterest_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(43);
    ObjectOfInterest_Abridged.AddPerigee(builder, perigee);
    ObjectOfInterest_Abridged.AddApogee(builder, apogee);
    ObjectOfInterest_Abridged.AddPeriod(builder, period);
    ObjectOfInterest_Abridged.AddSemiMajorAxis(builder, semiMajorAxis);
    ObjectOfInterest_Abridged.AddMeanMotionDDot(builder, meanMotionDDot);
    ObjectOfInterest_Abridged.AddMeanMotionDot(builder, meanMotionDot);
    ObjectOfInterest_Abridged.AddBStar(builder, bStar);
    ObjectOfInterest_Abridged.AddMeanAnomaly(builder, meanAnomaly);
    ObjectOfInterest_Abridged.AddArgOfPerigee(builder, argOfPerigee);
    ObjectOfInterest_Abridged.AddRaan(builder, raan);
    ObjectOfInterest_Abridged.AddInclination(builder, inclination);
    ObjectOfInterest_Abridged.AddEccentricity(builder, eccentricity);
    ObjectOfInterest_Abridged.AddMeanMotion(builder, meanMotion);
    ObjectOfInterest_Abridged.AddZvel(builder, zvel);
    ObjectOfInterest_Abridged.AddYvel(builder, yvel);
    ObjectOfInterest_Abridged.AddXvel(builder, xvel);
    ObjectOfInterest_Abridged.AddZ(builder, z);
    ObjectOfInterest_Abridged.AddY(builder, y);
    ObjectOfInterest_Abridged.AddX(builder, x);
    ObjectOfInterest_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    ObjectOfInterest_Abridged.AddOrigin(builder, originOffset);
    ObjectOfInterest_Abridged.AddSource(builder, sourceOffset);
    ObjectOfInterest_Abridged.AddCreatedBy(builder, createdByOffset);
    ObjectOfInterest_Abridged.AddCreatedAt(builder, createdAtOffset);
    ObjectOfInterest_Abridged.AddRevNo(builder, revNo);
    ObjectOfInterest_Abridged.AddElsetEpoch(builder, elsetEpochOffset);
    ObjectOfInterest_Abridged.AddSvEpoch(builder, svEpochOffset);
    ObjectOfInterest_Abridged.AddDeltaTs(builder, deltaTsOffset);
    ObjectOfInterest_Abridged.AddDeltaVs(builder, deltaVsOffset);
    ObjectOfInterest_Abridged.AddMissedObTime(builder, missedObTimeOffset);
    ObjectOfInterest_Abridged.AddLastObTime(builder, lastObTimeOffset);
    ObjectOfInterest_Abridged.AddDescription(builder, descriptionOffset);
    ObjectOfInterest_Abridged.AddStatusDate(builder, statusDateOffset);
    ObjectOfInterest_Abridged.AddStatus(builder, statusOffset);
    ObjectOfInterest_Abridged.AddPriority(builder, priority);
    ObjectOfInterest_Abridged.AddSensorTaskingStopTime(builder, sensorTaskingStopTimeOffset);
    ObjectOfInterest_Abridged.AddSensorTaskingStartTime(builder, sensorTaskingStartTimeOffset);
    ObjectOfInterest_Abridged.AddName(builder, nameOffset);
    ObjectOfInterest_Abridged.AddSatNo(builder, satNo);
    ObjectOfInterest_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    ObjectOfInterest_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    ObjectOfInterest_Abridged.AddId(builder, idOffset);
    ObjectOfInterest_Abridged.AddDataMode(builder, dataMode);
    return ObjectOfInterest_Abridged.EndObjectOfInterest_Abridged(builder);
  }

  public static void StartObjectOfInterest_Abridged(FlatBufferBuilder builder) { builder.StartTable(43); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddSensorTaskingStartTime(FlatBufferBuilder builder, StringOffset sensorTaskingStartTimeOffset) { builder.AddOffset(5, sensorTaskingStartTimeOffset.Value, 0); }
  public static void AddSensorTaskingStopTime(FlatBufferBuilder builder, StringOffset sensorTaskingStopTimeOffset) { builder.AddOffset(6, sensorTaskingStopTimeOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int priority) { builder.AddInt(7, priority, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(8, statusOffset.Value, 0); }
  public static void AddStatusDate(FlatBufferBuilder builder, StringOffset statusDateOffset) { builder.AddOffset(9, statusDateOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(10, descriptionOffset.Value, 0); }
  public static void AddLastObTime(FlatBufferBuilder builder, StringOffset lastObTimeOffset) { builder.AddOffset(11, lastObTimeOffset.Value, 0); }
  public static void AddMissedObTime(FlatBufferBuilder builder, StringOffset missedObTimeOffset) { builder.AddOffset(12, missedObTimeOffset.Value, 0); }
  public static void AddDeltaVs(FlatBufferBuilder builder, VectorOffset deltaVsOffset) { builder.AddOffset(13, deltaVsOffset.Value, 0); }
  public static VectorOffset CreateDeltaVsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeltaVsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaVsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaVsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeltaVsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeltaTs(FlatBufferBuilder builder, VectorOffset deltaTsOffset) { builder.AddOffset(14, deltaTsOffset.Value, 0); }
  public static VectorOffset CreateDeltaTsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaTsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeltaTsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSvEpoch(FlatBufferBuilder builder, StringOffset svEpochOffset) { builder.AddOffset(15, svEpochOffset.Value, 0); }
  public static void AddX(FlatBufferBuilder builder, double x) { builder.AddDouble(16, x, 0.0); }
  public static void AddY(FlatBufferBuilder builder, double y) { builder.AddDouble(17, y, 0.0); }
  public static void AddZ(FlatBufferBuilder builder, double z) { builder.AddDouble(18, z, 0.0); }
  public static void AddXvel(FlatBufferBuilder builder, double xvel) { builder.AddDouble(19, xvel, 0.0); }
  public static void AddYvel(FlatBufferBuilder builder, double yvel) { builder.AddDouble(20, yvel, 0.0); }
  public static void AddZvel(FlatBufferBuilder builder, double zvel) { builder.AddDouble(21, zvel, 0.0); }
  public static void AddElsetEpoch(FlatBufferBuilder builder, StringOffset elsetEpochOffset) { builder.AddOffset(22, elsetEpochOffset.Value, 0); }
  public static void AddMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.AddDouble(23, meanMotion, 0.0); }
  public static void AddEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.AddDouble(24, eccentricity, 0.0); }
  public static void AddInclination(FlatBufferBuilder builder, double inclination) { builder.AddDouble(25, inclination, 0.0); }
  public static void AddRaan(FlatBufferBuilder builder, double raan) { builder.AddDouble(26, raan, 0.0); }
  public static void AddArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.AddDouble(27, argOfPerigee, 0.0); }
  public static void AddMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.AddDouble(28, meanAnomaly, 0.0); }
  public static void AddRevNo(FlatBufferBuilder builder, int revNo) { builder.AddInt(29, revNo, 0); }
  public static void AddBStar(FlatBufferBuilder builder, double bStar) { builder.AddDouble(30, bStar, 0.0); }
  public static void AddMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.AddDouble(31, meanMotionDot, 0.0); }
  public static void AddMeanMotionDDot(FlatBufferBuilder builder, double meanMotionDDot) { builder.AddDouble(32, meanMotionDDot, 0.0); }
  public static void AddSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.AddDouble(33, semiMajorAxis, 0.0); }
  public static void AddPeriod(FlatBufferBuilder builder, double period) { builder.AddDouble(34, period, 0.0); }
  public static void AddApogee(FlatBufferBuilder builder, double apogee) { builder.AddDouble(35, apogee, 0.0); }
  public static void AddPerigee(FlatBufferBuilder builder, double perigee) { builder.AddDouble(36, perigee, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(37, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(38, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(39, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(40, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(41, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, ObjectOfInterest_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(42, (sbyte)dataMode, 0); }
  public static Offset<ObjectOfInterest_Abridged> EndObjectOfInterest_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ObjectOfInterest_Abridged>(o);
  }
  public static void FinishObjectOfInterest_AbridgedBuffer(FlatBufferBuilder builder, Offset<ObjectOfInterest_Abridged> offset) { builder.Finish(offset.Value, "OBJE"); }
  public static void FinishSizePrefixedObjectOfInterest_AbridgedBuffer(FlatBufferBuilder builder, Offset<ObjectOfInterest_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "OBJE"); }
  public ObjectOfInterest_AbridgedT UnPack() {
    var _o = new ObjectOfInterest_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ObjectOfInterest_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.Name = this.Name;
    _o.SensorTaskingStartTime = this.SensorTaskingStartTime;
    _o.SensorTaskingStopTime = this.SensorTaskingStopTime;
    _o.Priority = this.Priority;
    _o.Status = this.Status;
    _o.StatusDate = this.StatusDate;
    _o.Description = this.Description;
    _o.LastObTime = this.LastObTime;
    _o.MissedObTime = this.MissedObTime;
    _o.DeltaVs = new List<string>();
    for (var _j = 0; _j < this.DeltaVsLength; ++_j) {_o.DeltaVs.Add(this.DeltaVs(_j));}
    _o.DeltaTs = new List<string>();
    for (var _j = 0; _j < this.DeltaTsLength; ++_j) {_o.DeltaTs.Add(this.DeltaTs(_j));}
    _o.SvEpoch = this.SvEpoch;
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.Xvel = this.Xvel;
    _o.Yvel = this.Yvel;
    _o.Zvel = this.Zvel;
    _o.ElsetEpoch = this.ElsetEpoch;
    _o.MeanMotion = this.MeanMotion;
    _o.Eccentricity = this.Eccentricity;
    _o.Inclination = this.Inclination;
    _o.Raan = this.Raan;
    _o.ArgOfPerigee = this.ArgOfPerigee;
    _o.MeanAnomaly = this.MeanAnomaly;
    _o.RevNo = this.RevNo;
    _o.BStar = this.BStar;
    _o.MeanMotionDot = this.MeanMotionDot;
    _o.MeanMotionDDot = this.MeanMotionDDot;
    _o.SemiMajorAxis = this.SemiMajorAxis;
    _o.Period = this.Period;
    _o.Apogee = this.Apogee;
    _o.Perigee = this.Perigee;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<ObjectOfInterest_Abridged> Pack(FlatBufferBuilder builder, ObjectOfInterest_AbridgedT _o) {
    if (_o == null) return default(Offset<ObjectOfInterest_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _sensorTaskingStartTime = _o.SensorTaskingStartTime == null ? default(StringOffset) : builder.CreateString(_o.SensorTaskingStartTime);
    var _sensorTaskingStopTime = _o.SensorTaskingStopTime == null ? default(StringOffset) : builder.CreateString(_o.SensorTaskingStopTime);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _statusDate = _o.StatusDate == null ? default(StringOffset) : builder.CreateString(_o.StatusDate);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _lastObTime = _o.LastObTime == null ? default(StringOffset) : builder.CreateString(_o.LastObTime);
    var _missedObTime = _o.MissedObTime == null ? default(StringOffset) : builder.CreateString(_o.MissedObTime);
    var _deltaVs = default(VectorOffset);
    if (_o.DeltaVs != null) {
      var __deltaVs = new StringOffset[_o.DeltaVs.Count];
      for (var _j = 0; _j < __deltaVs.Length; ++_j) { __deltaVs[_j] = builder.CreateString(_o.DeltaVs[_j]); }
      _deltaVs = CreateDeltaVsVector(builder, __deltaVs);
    }
    var _deltaTs = default(VectorOffset);
    if (_o.DeltaTs != null) {
      var __deltaTs = new StringOffset[_o.DeltaTs.Count];
      for (var _j = 0; _j < __deltaTs.Length; ++_j) { __deltaTs[_j] = builder.CreateString(_o.DeltaTs[_j]); }
      _deltaTs = CreateDeltaTsVector(builder, __deltaTs);
    }
    var _svEpoch = _o.SvEpoch == null ? default(StringOffset) : builder.CreateString(_o.SvEpoch);
    var _elsetEpoch = _o.ElsetEpoch == null ? default(StringOffset) : builder.CreateString(_o.ElsetEpoch);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateObjectOfInterest_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _name,
      _sensorTaskingStartTime,
      _sensorTaskingStopTime,
      _o.Priority,
      _status,
      _statusDate,
      _description,
      _lastObTime,
      _missedObTime,
      _deltaVs,
      _deltaTs,
      _svEpoch,
      _o.X,
      _o.Y,
      _o.Z,
      _o.Xvel,
      _o.Yvel,
      _o.Zvel,
      _elsetEpoch,
      _o.MeanMotion,
      _o.Eccentricity,
      _o.Inclination,
      _o.Raan,
      _o.ArgOfPerigee,
      _o.MeanAnomaly,
      _o.RevNo,
      _o.BStar,
      _o.MeanMotionDot,
      _o.MeanMotionDDot,
      _o.SemiMajorAxis,
      _o.Period,
      _o.Apogee,
      _o.Perigee,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class ObjectOfInterest_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string Name { get; set; }
  public string SensorTaskingStartTime { get; set; }
  public string SensorTaskingStopTime { get; set; }
  public int Priority { get; set; }
  public string Status { get; set; }
  public string StatusDate { get; set; }
  public string Description { get; set; }
  public string LastObTime { get; set; }
  public string MissedObTime { get; set; }
  public List<string> DeltaVs { get; set; }
  public List<string> DeltaTs { get; set; }
  public string SvEpoch { get; set; }
  public double X { get; set; }
  public double Y { get; set; }
  public double Z { get; set; }
  public double Xvel { get; set; }
  public double Yvel { get; set; }
  public double Zvel { get; set; }
  public string ElsetEpoch { get; set; }
  public double MeanMotion { get; set; }
  public double Eccentricity { get; set; }
  public double Inclination { get; set; }
  public double Raan { get; set; }
  public double ArgOfPerigee { get; set; }
  public double MeanAnomaly { get; set; }
  public int RevNo { get; set; }
  public double BStar { get; set; }
  public double MeanMotionDot { get; set; }
  public double MeanMotionDDot { get; set; }
  public double SemiMajorAxis { get; set; }
  public double Period { get; set; }
  public double Apogee { get; set; }
  public double Perigee { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public ObjectOfInterest_Abridged_dataMode_Enum DataMode { get; set; }

  public ObjectOfInterest_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.Name = null;
    this.SensorTaskingStartTime = null;
    this.SensorTaskingStopTime = null;
    this.Priority = 0;
    this.Status = null;
    this.StatusDate = null;
    this.Description = null;
    this.LastObTime = null;
    this.MissedObTime = null;
    this.DeltaVs = null;
    this.DeltaTs = null;
    this.SvEpoch = null;
    this.X = 0.0;
    this.Y = 0.0;
    this.Z = 0.0;
    this.Xvel = 0.0;
    this.Yvel = 0.0;
    this.Zvel = 0.0;
    this.ElsetEpoch = null;
    this.MeanMotion = 0.0;
    this.Eccentricity = 0.0;
    this.Inclination = 0.0;
    this.Raan = 0.0;
    this.ArgOfPerigee = 0.0;
    this.MeanAnomaly = 0.0;
    this.RevNo = 0;
    this.BStar = 0.0;
    this.MeanMotionDot = 0.0;
    this.MeanMotionDDot = 0.0;
    this.SemiMajorAxis = 0.0;
    this.Period = 0.0;
    this.Apogee = 0.0;
    this.Perigee = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = ObjectOfInterest_Abridged_dataMode_Enum.REAL;
  }
  public static ObjectOfInterest_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return ObjectOfInterest_Abridged.GetRootAsObjectOfInterest_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ObjectOfInterest_Abridged.FinishObjectOfInterest_AbridgedBuffer(fbb, ObjectOfInterest_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ObjectOfInterest_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyString(tablePos, 14 /*SensorTaskingStartTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*SensorTaskingStopTime*/, false)
      && verifier.VerifyField(tablePos, 18 /*Priority*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*Status*/, false)
      && verifier.VerifyString(tablePos, 22 /*StatusDate*/, false)
      && verifier.VerifyString(tablePos, 24 /*Description*/, false)
      && verifier.VerifyString(tablePos, 26 /*LastObTime*/, false)
      && verifier.VerifyString(tablePos, 28 /*MissedObTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*DeltaVs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*DeltaTs*/, false)
      && verifier.VerifyString(tablePos, 34 /*SvEpoch*/, false)
      && verifier.VerifyField(tablePos, 36 /*X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Xvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Yvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Zvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*ElsetEpoch*/, false)
      && verifier.VerifyField(tablePos, 50 /*MeanMotion*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*Eccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Inclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Raan*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*ArgOfPerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*MeanAnomaly*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*RevNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*BStar*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*MeanMotionDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*MeanMotionDDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*SemiMajorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*Period*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*Apogee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*Perigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 78 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 80 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 82 /*Source*/, false)
      && verifier.VerifyString(tablePos, 84 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 86 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 88 /*DataMode*/, 1 /*ObjectOfInterest_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
