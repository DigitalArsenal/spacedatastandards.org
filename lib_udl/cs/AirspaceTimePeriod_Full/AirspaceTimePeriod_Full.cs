// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The timePeriod set describes the effective datetime for a given airspace control means.
public struct AirspaceTimePeriod_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirspaceTimePeriod_Full GetRootAsAirspaceTimePeriod_Full(ByteBuffer _bb) { return GetRootAsAirspaceTimePeriod_Full(_bb, new AirspaceTimePeriod_Full()); }
  public static AirspaceTimePeriod_Full GetRootAsAirspaceTimePeriod_Full(ByteBuffer _bb, AirspaceTimePeriod_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirspaceTimePeriod_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRS"); }
  public static bool VerifyAirspaceTimePeriod_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRS", false, AirspaceTimePeriod_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirspaceTimePeriod_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
  /// Example: /// Example: DISCRETE
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string TimeMode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeModeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTimeModeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTimeModeArray() { return __p.__vector_as_array<byte>(4); }
  /// The start time designating that the airspace control order is active.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TimeStart { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeStartBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTimeStartBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTimeStartArray() { return __p.__vector_as_array<byte>(6); }
  /// The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string TimeEnd { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeEndBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTimeEndBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTimeEndArray() { return __p.__vector_as_array<byte>(8); }
  /// Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
  /// Example: /// Example: ['WEEKLY']
  /// Constraints: No constraints specified.
  public string IntFreq(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntFreqLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
  /// Example: /// Example: ['65WK']
  /// Constraints: No constraints specified.
  public string IntDur(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IntDurLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AirspaceTimePeriod_Full> CreateAirspaceTimePeriod_Full(FlatBufferBuilder builder,
      StringOffset timeModeOffset = default(StringOffset),
      StringOffset timeStartOffset = default(StringOffset),
      StringOffset timeEndOffset = default(StringOffset),
      VectorOffset intFreqOffset = default(VectorOffset),
      VectorOffset intDurOffset = default(VectorOffset)) {
    builder.StartTable(5);
    AirspaceTimePeriod_Full.AddIntDur(builder, intDurOffset);
    AirspaceTimePeriod_Full.AddIntFreq(builder, intFreqOffset);
    AirspaceTimePeriod_Full.AddTimeEnd(builder, timeEndOffset);
    AirspaceTimePeriod_Full.AddTimeStart(builder, timeStartOffset);
    AirspaceTimePeriod_Full.AddTimeMode(builder, timeModeOffset);
    return AirspaceTimePeriod_Full.EndAirspaceTimePeriod_Full(builder);
  }

  public static void StartAirspaceTimePeriod_Full(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTimeMode(FlatBufferBuilder builder, StringOffset timeModeOffset) { builder.AddOffset(0, timeModeOffset.Value, 0); }
  public static void AddTimeStart(FlatBufferBuilder builder, StringOffset timeStartOffset) { builder.AddOffset(1, timeStartOffset.Value, 0); }
  public static void AddTimeEnd(FlatBufferBuilder builder, StringOffset timeEndOffset) { builder.AddOffset(2, timeEndOffset.Value, 0); }
  public static void AddIntFreq(FlatBufferBuilder builder, VectorOffset intFreqOffset) { builder.AddOffset(3, intFreqOffset.Value, 0); }
  public static VectorOffset CreateIntFreqVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntFreqVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntFreqVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntFreqVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntFreqVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIntDur(FlatBufferBuilder builder, VectorOffset intDurOffset) { builder.AddOffset(4, intDurOffset.Value, 0); }
  public static VectorOffset CreateIntDurVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIntDurVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntDurVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIntDurVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIntDurVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AirspaceTimePeriod_Full> EndAirspaceTimePeriod_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirspaceTimePeriod_Full>(o);
  }
  public static void FinishAirspaceTimePeriod_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceTimePeriod_Full> offset) { builder.Finish(offset.Value, "AIRS"); }
  public static void FinishSizePrefixedAirspaceTimePeriod_FullBuffer(FlatBufferBuilder builder, Offset<AirspaceTimePeriod_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRS"); }
  public AirspaceTimePeriod_FullT UnPack() {
    var _o = new AirspaceTimePeriod_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirspaceTimePeriod_FullT _o) {
    _o.TimeMode = this.TimeMode;
    _o.TimeStart = this.TimeStart;
    _o.TimeEnd = this.TimeEnd;
    _o.IntFreq = new List<string>();
    for (var _j = 0; _j < this.IntFreqLength; ++_j) {_o.IntFreq.Add(this.IntFreq(_j));}
    _o.IntDur = new List<string>();
    for (var _j = 0; _j < this.IntDurLength; ++_j) {_o.IntDur.Add(this.IntDur(_j));}
  }
  public static Offset<AirspaceTimePeriod_Full> Pack(FlatBufferBuilder builder, AirspaceTimePeriod_FullT _o) {
    if (_o == null) return default(Offset<AirspaceTimePeriod_Full>);
    var _timeMode = _o.TimeMode == null ? default(StringOffset) : builder.CreateString(_o.TimeMode);
    var _timeStart = _o.TimeStart == null ? default(StringOffset) : builder.CreateString(_o.TimeStart);
    var _timeEnd = _o.TimeEnd == null ? default(StringOffset) : builder.CreateString(_o.TimeEnd);
    var _intFreq = default(VectorOffset);
    if (_o.IntFreq != null) {
      var __intFreq = new StringOffset[_o.IntFreq.Count];
      for (var _j = 0; _j < __intFreq.Length; ++_j) { __intFreq[_j] = builder.CreateString(_o.IntFreq[_j]); }
      _intFreq = CreateIntFreqVector(builder, __intFreq);
    }
    var _intDur = default(VectorOffset);
    if (_o.IntDur != null) {
      var __intDur = new StringOffset[_o.IntDur.Count];
      for (var _j = 0; _j < __intDur.Length; ++_j) { __intDur[_j] = builder.CreateString(_o.IntDur[_j]); }
      _intDur = CreateIntDurVector(builder, __intDur);
    }
    return CreateAirspaceTimePeriod_Full(
      builder,
      _timeMode,
      _timeStart,
      _timeEnd,
      _intFreq,
      _intDur);
  }
}

public class AirspaceTimePeriod_FullT
{
  public string TimeMode { get; set; }
  public string TimeStart { get; set; }
  public string TimeEnd { get; set; }
  public List<string> IntFreq { get; set; }
  public List<string> IntDur { get; set; }

  public AirspaceTimePeriod_FullT() {
    this.TimeMode = null;
    this.TimeStart = null;
    this.TimeEnd = null;
    this.IntFreq = null;
    this.IntDur = null;
  }
  public static AirspaceTimePeriod_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AirspaceTimePeriod_Full.GetRootAsAirspaceTimePeriod_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirspaceTimePeriod_Full.FinishAirspaceTimePeriod_FullBuffer(fbb, AirspaceTimePeriod_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirspaceTimePeriod_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*TimeMode*/, false)
      && verifier.VerifyString(tablePos, 6 /*TimeStart*/, false)
      && verifier.VerifyString(tablePos, 8 /*TimeEnd*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*IntFreq*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*IntDur*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
