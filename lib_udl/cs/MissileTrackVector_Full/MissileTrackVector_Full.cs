// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Schema for Missile Track Vector data.
public struct MissileTrackVector_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MissileTrackVector_Full GetRootAsMissileTrackVector_Full(ByteBuffer _bb) { return GetRootAsMissileTrackVector_Full(_bb, new MissileTrackVector_Full()); }
  public static MissileTrackVector_Full GetRootAsMissileTrackVector_Full(ByteBuffer _bb, MissileTrackVector_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MissileTrackVector_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MISS"); }
  public static bool VerifyMissileTrackVector_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MISS", false, MissileTrackVector_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MissileTrackVector_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Type of vector represented (e.g. LOS, PREDICTED, STATE).
  /// Example: /// Example: STATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// Object to which this vector applies.
  /// Example: /// Example: TARGET
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Object { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetObjectBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetObjectArray() { return __p.__vector_as_array<byte>(6); }
  /// Vector timestamp in ISO8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2024-03-30T15:02:39.346768Z
  /// Constraints: No constraints specified.
  public string Epoch { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEpochBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEpochBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEpochArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the reporting sensor of the object.
  /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 46
  public string OrigSensorId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
  /// Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
  /// Constraints: No constraints specified.
  public string Pos(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PosLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
  /// Example: /// Example: [-1.21981, -6.60208, -3.36515]
  /// Constraints: No constraints specified.
  public string Vel(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VelLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
  /// Example: /// Example: [0.59236, -0.03537, 0.35675]
  /// Constraints: No constraints specified.
  public string Accel(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AccelLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Track object course, in degrees clockwise from true north.
  /// Example: /// Example: 7.3580153
  /// Constraints: No constraints specified.
  public double Course { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track object speed, in kilometers/sec.
  /// Example: /// Example: 15.03443
  /// Constraints: No constraints specified.
  public double Spd { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
  /// Example: /// Example: ECEF
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ReferenceFrame { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReferenceFrameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetReferenceFrameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetReferenceFrameArray() { return __p.__vector_as_array<byte>(24); }
  /// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
  /// If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
  /// The covariance elements are position dependent within the array with values ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
  /// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
  /// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
  /// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
  /// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
  /// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
  /// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
  /// x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
  /// y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
  /// z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
  /// The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  public string Cov(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CovLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
  /// Example: /// Example: ECEF
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CovReferenceFrame { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCovReferenceFrameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCovReferenceFrameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCovReferenceFrameArray() { return __p.__vector_as_array<byte>(28); }
  /// WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.0
  /// Constraints: No constraints specified.
  public double VectorLat { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 150.0
  /// Constraints: No constraints specified.
  public double VectorLon { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 25.0
  /// Constraints: No constraints specified.
  public double VectorAlt { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Confidence of the vector, 0-100.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  public int Confidence { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Status of the vector (e.g. INITIAL, UPDATE).
  /// Example: /// Example: INITIAL
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Status { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(38); }
  /// Source of the time value.
  /// Example: /// Example: Sensor 1
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string TimeSource { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeSourceBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetTimeSourceBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetTimeSourceArray() { return __p.__vector_as_array<byte>(40); }
  /// The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  public string Quat(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int QuatLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The flight azimuth associated with the current state vector (0-360 degrees).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double FlightAz { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<MissileTrackVector_Full> CreateMissileTrackVector_Full(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset @objectOffset = default(StringOffset),
      StringOffset epochOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      VectorOffset posOffset = default(VectorOffset),
      VectorOffset velOffset = default(VectorOffset),
      VectorOffset accelOffset = default(VectorOffset),
      double course = 0.0,
      double spd = 0.0,
      StringOffset referenceFrameOffset = default(StringOffset),
      VectorOffset covOffset = default(VectorOffset),
      StringOffset covReferenceFrameOffset = default(StringOffset),
      double vectorLat = 0.0,
      double vectorLon = 0.0,
      double vectorAlt = 0.0,
      int confidence = 0,
      StringOffset statusOffset = default(StringOffset),
      StringOffset timeSourceOffset = default(StringOffset),
      VectorOffset quatOffset = default(VectorOffset),
      double flightAz = 0.0) {
    builder.StartTable(21);
    MissileTrackVector_Full.AddFlightAz(builder, flightAz);
    MissileTrackVector_Full.AddVectorAlt(builder, vectorAlt);
    MissileTrackVector_Full.AddVectorLon(builder, vectorLon);
    MissileTrackVector_Full.AddVectorLat(builder, vectorLat);
    MissileTrackVector_Full.AddSpd(builder, spd);
    MissileTrackVector_Full.AddCourse(builder, course);
    MissileTrackVector_Full.AddQuat(builder, quatOffset);
    MissileTrackVector_Full.AddTimeSource(builder, timeSourceOffset);
    MissileTrackVector_Full.AddStatus(builder, statusOffset);
    MissileTrackVector_Full.AddConfidence(builder, confidence);
    MissileTrackVector_Full.AddCovReferenceFrame(builder, covReferenceFrameOffset);
    MissileTrackVector_Full.AddCov(builder, covOffset);
    MissileTrackVector_Full.AddReferenceFrame(builder, referenceFrameOffset);
    MissileTrackVector_Full.AddAccel(builder, accelOffset);
    MissileTrackVector_Full.AddVel(builder, velOffset);
    MissileTrackVector_Full.AddPos(builder, posOffset);
    MissileTrackVector_Full.AddOrigSensorId(builder, origSensorIdOffset);
    MissileTrackVector_Full.AddIdSensor(builder, idSensorOffset);
    MissileTrackVector_Full.AddEpoch(builder, epochOffset);
    MissileTrackVector_Full.AddObject(builder, @objectOffset);
    MissileTrackVector_Full.AddType(builder, typeOffset);
    return MissileTrackVector_Full.EndMissileTrackVector_Full(builder);
  }

  public static void StartMissileTrackVector_Full(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddObject(FlatBufferBuilder builder, StringOffset objectOffset) { builder.AddOffset(1, objectOffset.Value, 0); }
  public static void AddEpoch(FlatBufferBuilder builder, StringOffset epochOffset) { builder.AddOffset(2, epochOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(3, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(4, origSensorIdOffset.Value, 0); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(5, posOffset.Value, 0); }
  public static VectorOffset CreatePosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVel(FlatBufferBuilder builder, VectorOffset velOffset) { builder.AddOffset(6, velOffset.Value, 0); }
  public static VectorOffset CreateVelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAccel(FlatBufferBuilder builder, VectorOffset accelOffset) { builder.AddOffset(7, accelOffset.Value, 0); }
  public static VectorOffset CreateAccelVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAccelVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccelVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAccelVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAccelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCourse(FlatBufferBuilder builder, double course) { builder.AddDouble(8, course, 0.0); }
  public static void AddSpd(FlatBufferBuilder builder, double spd) { builder.AddDouble(9, spd, 0.0); }
  public static void AddReferenceFrame(FlatBufferBuilder builder, StringOffset referenceFrameOffset) { builder.AddOffset(10, referenceFrameOffset.Value, 0); }
  public static void AddCov(FlatBufferBuilder builder, VectorOffset covOffset) { builder.AddOffset(11, covOffset.Value, 0); }
  public static VectorOffset CreateCovVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCovVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCovReferenceFrame(FlatBufferBuilder builder, StringOffset covReferenceFrameOffset) { builder.AddOffset(12, covReferenceFrameOffset.Value, 0); }
  public static void AddVectorLat(FlatBufferBuilder builder, double vectorLat) { builder.AddDouble(13, vectorLat, 0.0); }
  public static void AddVectorLon(FlatBufferBuilder builder, double vectorLon) { builder.AddDouble(14, vectorLon, 0.0); }
  public static void AddVectorAlt(FlatBufferBuilder builder, double vectorAlt) { builder.AddDouble(15, vectorAlt, 0.0); }
  public static void AddConfidence(FlatBufferBuilder builder, int confidence) { builder.AddInt(16, confidence, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(17, statusOffset.Value, 0); }
  public static void AddTimeSource(FlatBufferBuilder builder, StringOffset timeSourceOffset) { builder.AddOffset(18, timeSourceOffset.Value, 0); }
  public static void AddQuat(FlatBufferBuilder builder, VectorOffset quatOffset) { builder.AddOffset(19, quatOffset.Value, 0); }
  public static VectorOffset CreateQuatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartQuatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFlightAz(FlatBufferBuilder builder, double flightAz) { builder.AddDouble(20, flightAz, 0.0); }
  public static Offset<MissileTrackVector_Full> EndMissileTrackVector_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MissileTrackVector_Full>(o);
  }
  public static void FinishMissileTrackVector_FullBuffer(FlatBufferBuilder builder, Offset<MissileTrackVector_Full> offset) { builder.Finish(offset.Value, "MISS"); }
  public static void FinishSizePrefixedMissileTrackVector_FullBuffer(FlatBufferBuilder builder, Offset<MissileTrackVector_Full> offset) { builder.FinishSizePrefixed(offset.Value, "MISS"); }
  public MissileTrackVector_FullT UnPack() {
    var _o = new MissileTrackVector_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MissileTrackVector_FullT _o) {
    _o.Type = this.Type;
    _o.Object = this.Object;
    _o.Epoch = this.Epoch;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Pos = new List<string>();
    for (var _j = 0; _j < this.PosLength; ++_j) {_o.Pos.Add(this.Pos(_j));}
    _o.Vel = new List<string>();
    for (var _j = 0; _j < this.VelLength; ++_j) {_o.Vel.Add(this.Vel(_j));}
    _o.Accel = new List<string>();
    for (var _j = 0; _j < this.AccelLength; ++_j) {_o.Accel.Add(this.Accel(_j));}
    _o.Course = this.Course;
    _o.Spd = this.Spd;
    _o.ReferenceFrame = this.ReferenceFrame;
    _o.Cov = new List<string>();
    for (var _j = 0; _j < this.CovLength; ++_j) {_o.Cov.Add(this.Cov(_j));}
    _o.CovReferenceFrame = this.CovReferenceFrame;
    _o.VectorLat = this.VectorLat;
    _o.VectorLon = this.VectorLon;
    _o.VectorAlt = this.VectorAlt;
    _o.Confidence = this.Confidence;
    _o.Status = this.Status;
    _o.TimeSource = this.TimeSource;
    _o.Quat = new List<string>();
    for (var _j = 0; _j < this.QuatLength; ++_j) {_o.Quat.Add(this.Quat(_j));}
    _o.FlightAz = this.FlightAz;
  }
  public static Offset<MissileTrackVector_Full> Pack(FlatBufferBuilder builder, MissileTrackVector_FullT _o) {
    if (_o == null) return default(Offset<MissileTrackVector_Full>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _object = _o.Object == null ? default(StringOffset) : builder.CreateString(_o.Object);
    var _epoch = _o.Epoch == null ? default(StringOffset) : builder.CreateString(_o.Epoch);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _pos = default(VectorOffset);
    if (_o.Pos != null) {
      var __pos = new StringOffset[_o.Pos.Count];
      for (var _j = 0; _j < __pos.Length; ++_j) { __pos[_j] = builder.CreateString(_o.Pos[_j]); }
      _pos = CreatePosVector(builder, __pos);
    }
    var _vel = default(VectorOffset);
    if (_o.Vel != null) {
      var __vel = new StringOffset[_o.Vel.Count];
      for (var _j = 0; _j < __vel.Length; ++_j) { __vel[_j] = builder.CreateString(_o.Vel[_j]); }
      _vel = CreateVelVector(builder, __vel);
    }
    var _accel = default(VectorOffset);
    if (_o.Accel != null) {
      var __accel = new StringOffset[_o.Accel.Count];
      for (var _j = 0; _j < __accel.Length; ++_j) { __accel[_j] = builder.CreateString(_o.Accel[_j]); }
      _accel = CreateAccelVector(builder, __accel);
    }
    var _referenceFrame = _o.ReferenceFrame == null ? default(StringOffset) : builder.CreateString(_o.ReferenceFrame);
    var _cov = default(VectorOffset);
    if (_o.Cov != null) {
      var __cov = new StringOffset[_o.Cov.Count];
      for (var _j = 0; _j < __cov.Length; ++_j) { __cov[_j] = builder.CreateString(_o.Cov[_j]); }
      _cov = CreateCovVector(builder, __cov);
    }
    var _covReferenceFrame = _o.CovReferenceFrame == null ? default(StringOffset) : builder.CreateString(_o.CovReferenceFrame);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _timeSource = _o.TimeSource == null ? default(StringOffset) : builder.CreateString(_o.TimeSource);
    var _quat = default(VectorOffset);
    if (_o.Quat != null) {
      var __quat = new StringOffset[_o.Quat.Count];
      for (var _j = 0; _j < __quat.Length; ++_j) { __quat[_j] = builder.CreateString(_o.Quat[_j]); }
      _quat = CreateQuatVector(builder, __quat);
    }
    return CreateMissileTrackVector_Full(
      builder,
      _type,
      _object,
      _epoch,
      _idSensor,
      _origSensorId,
      _pos,
      _vel,
      _accel,
      _o.Course,
      _o.Spd,
      _referenceFrame,
      _cov,
      _covReferenceFrame,
      _o.VectorLat,
      _o.VectorLon,
      _o.VectorAlt,
      _o.Confidence,
      _status,
      _timeSource,
      _quat,
      _o.FlightAz);
  }
}

public class MissileTrackVector_FullT
{
  public string Type { get; set; }
  public string Object { get; set; }
  public string Epoch { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public List<string> Pos { get; set; }
  public List<string> Vel { get; set; }
  public List<string> Accel { get; set; }
  public double Course { get; set; }
  public double Spd { get; set; }
  public string ReferenceFrame { get; set; }
  public List<string> Cov { get; set; }
  public string CovReferenceFrame { get; set; }
  public double VectorLat { get; set; }
  public double VectorLon { get; set; }
  public double VectorAlt { get; set; }
  public int Confidence { get; set; }
  public string Status { get; set; }
  public string TimeSource { get; set; }
  public List<string> Quat { get; set; }
  public double FlightAz { get; set; }

  public MissileTrackVector_FullT() {
    this.Type = null;
    this.Object = null;
    this.Epoch = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.Pos = null;
    this.Vel = null;
    this.Accel = null;
    this.Course = 0.0;
    this.Spd = 0.0;
    this.ReferenceFrame = null;
    this.Cov = null;
    this.CovReferenceFrame = null;
    this.VectorLat = 0.0;
    this.VectorLon = 0.0;
    this.VectorAlt = 0.0;
    this.Confidence = 0;
    this.Status = null;
    this.TimeSource = null;
    this.Quat = null;
    this.FlightAz = 0.0;
  }
  public static MissileTrackVector_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return MissileTrackVector_Full.GetRootAsMissileTrackVector_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MissileTrackVector_Full.FinishMissileTrackVector_FullBuffer(fbb, MissileTrackVector_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MissileTrackVector_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyString(tablePos, 6 /*Object*/, false)
      && verifier.VerifyString(tablePos, 8 /*Epoch*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 12 /*OrigSensorId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*Pos*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*Vel*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*Accel*/, false)
      && verifier.VerifyField(tablePos, 20 /*Course*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Spd*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 24 /*ReferenceFrame*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*Cov*/, false)
      && verifier.VerifyString(tablePos, 28 /*CovReferenceFrame*/, false)
      && verifier.VerifyField(tablePos, 30 /*VectorLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*VectorLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*VectorAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Confidence*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 38 /*Status*/, false)
      && verifier.VerifyString(tablePos, 40 /*TimeSource*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*Quat*/, false)
      && verifier.VerifyField(tablePos, 44 /*FlightAz*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
