// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
public struct DataLinkReferences_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLinkReferences_Full GetRootAsDataLinkReferences_Full(ByteBuffer _bb) { return GetRootAsDataLinkReferences_Full(_bb, new DataLinkReferences_Full()); }
  public static DataLinkReferences_Full GetRootAsDataLinkReferences_Full(ByteBuffer _bb, DataLinkReferences_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLinkReferences_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLinkReferences_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLinkReferences_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLinkReferences_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string RefSerialId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefSerialIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRefSerialIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRefSerialIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Specifies the type of document referenced.
  /// Example: /// Example: ABSTAT
  /// Constraints: Minimum length = 0, Maximum length = 56
  public string RefType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRefTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRefTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// The originator of this reference.
  /// Example: /// Example: CENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 30
  public string RefOriginator { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefOriginatorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetRefOriginatorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetRefOriginatorArray() { return __p.__vector_as_array<byte>(8); }
  /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string RefTs { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefTsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRefTsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRefTsArray() { return __p.__vector_as_array<byte>(10); }
  /// Serial number assigned to this reference.
  /// Example: /// Example: 1402001
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string RefSerialNum { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefSerialNumBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetRefSerialNumBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetRefSerialNumArray() { return __p.__vector_as_array<byte>(12); }
  /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
  /// Example: /// Example: NOTAL
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string RefSpecialNotation { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRefSpecialNotationBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRefSpecialNotationBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRefSpecialNotationArray() { return __p.__vector_as_array<byte>(14); }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  /// Example: /// Example: ['RDU', 'C-123-92']
  /// Constraints: No constraints specified.
  public string RefSICs(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RefSICsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DataLinkReferences_Full> CreateDataLinkReferences_Full(FlatBufferBuilder builder,
      StringOffset refSerialIdOffset = default(StringOffset),
      StringOffset refTypeOffset = default(StringOffset),
      StringOffset refOriginatorOffset = default(StringOffset),
      StringOffset refTsOffset = default(StringOffset),
      StringOffset refSerialNumOffset = default(StringOffset),
      StringOffset refSpecialNotationOffset = default(StringOffset),
      VectorOffset refSICsOffset = default(VectorOffset)) {
    builder.StartTable(7);
    DataLinkReferences_Full.AddRefSICs(builder, refSICsOffset);
    DataLinkReferences_Full.AddRefSpecialNotation(builder, refSpecialNotationOffset);
    DataLinkReferences_Full.AddRefSerialNum(builder, refSerialNumOffset);
    DataLinkReferences_Full.AddRefTs(builder, refTsOffset);
    DataLinkReferences_Full.AddRefOriginator(builder, refOriginatorOffset);
    DataLinkReferences_Full.AddRefType(builder, refTypeOffset);
    DataLinkReferences_Full.AddRefSerialId(builder, refSerialIdOffset);
    return DataLinkReferences_Full.EndDataLinkReferences_Full(builder);
  }

  public static void StartDataLinkReferences_Full(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddRefSerialId(FlatBufferBuilder builder, StringOffset refSerialIdOffset) { builder.AddOffset(0, refSerialIdOffset.Value, 0); }
  public static void AddRefType(FlatBufferBuilder builder, StringOffset refTypeOffset) { builder.AddOffset(1, refTypeOffset.Value, 0); }
  public static void AddRefOriginator(FlatBufferBuilder builder, StringOffset refOriginatorOffset) { builder.AddOffset(2, refOriginatorOffset.Value, 0); }
  public static void AddRefTs(FlatBufferBuilder builder, StringOffset refTsOffset) { builder.AddOffset(3, refTsOffset.Value, 0); }
  public static void AddRefSerialNum(FlatBufferBuilder builder, StringOffset refSerialNumOffset) { builder.AddOffset(4, refSerialNumOffset.Value, 0); }
  public static void AddRefSpecialNotation(FlatBufferBuilder builder, StringOffset refSpecialNotationOffset) { builder.AddOffset(5, refSpecialNotationOffset.Value, 0); }
  public static void AddRefSICs(FlatBufferBuilder builder, VectorOffset refSICsOffset) { builder.AddOffset(6, refSICsOffset.Value, 0); }
  public static VectorOffset CreateRefSICsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRefSICsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRefSICsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRefSICsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRefSICsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DataLinkReferences_Full> EndDataLinkReferences_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLinkReferences_Full>(o);
  }
  public static void FinishDataLinkReferences_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkReferences_Full> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLinkReferences_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkReferences_Full> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLinkReferences_FullT UnPack() {
    var _o = new DataLinkReferences_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLinkReferences_FullT _o) {
    _o.RefSerialId = this.RefSerialId;
    _o.RefType = this.RefType;
    _o.RefOriginator = this.RefOriginator;
    _o.RefTs = this.RefTs;
    _o.RefSerialNum = this.RefSerialNum;
    _o.RefSpecialNotation = this.RefSpecialNotation;
    _o.RefSICs = new List<string>();
    for (var _j = 0; _j < this.RefSICsLength; ++_j) {_o.RefSICs.Add(this.RefSICs(_j));}
  }
  public static Offset<DataLinkReferences_Full> Pack(FlatBufferBuilder builder, DataLinkReferences_FullT _o) {
    if (_o == null) return default(Offset<DataLinkReferences_Full>);
    var _refSerialId = _o.RefSerialId == null ? default(StringOffset) : builder.CreateString(_o.RefSerialId);
    var _refType = _o.RefType == null ? default(StringOffset) : builder.CreateString(_o.RefType);
    var _refOriginator = _o.RefOriginator == null ? default(StringOffset) : builder.CreateString(_o.RefOriginator);
    var _refTs = _o.RefTs == null ? default(StringOffset) : builder.CreateString(_o.RefTs);
    var _refSerialNum = _o.RefSerialNum == null ? default(StringOffset) : builder.CreateString(_o.RefSerialNum);
    var _refSpecialNotation = _o.RefSpecialNotation == null ? default(StringOffset) : builder.CreateString(_o.RefSpecialNotation);
    var _refSICs = default(VectorOffset);
    if (_o.RefSICs != null) {
      var __refSICs = new StringOffset[_o.RefSICs.Count];
      for (var _j = 0; _j < __refSICs.Length; ++_j) { __refSICs[_j] = builder.CreateString(_o.RefSICs[_j]); }
      _refSICs = CreateRefSICsVector(builder, __refSICs);
    }
    return CreateDataLinkReferences_Full(
      builder,
      _refSerialId,
      _refType,
      _refOriginator,
      _refTs,
      _refSerialNum,
      _refSpecialNotation,
      _refSICs);
  }
}

public class DataLinkReferences_FullT
{
  public string RefSerialId { get; set; }
  public string RefType { get; set; }
  public string RefOriginator { get; set; }
  public string RefTs { get; set; }
  public string RefSerialNum { get; set; }
  public string RefSpecialNotation { get; set; }
  public List<string> RefSICs { get; set; }

  public DataLinkReferences_FullT() {
    this.RefSerialId = null;
    this.RefType = null;
    this.RefOriginator = null;
    this.RefTs = null;
    this.RefSerialNum = null;
    this.RefSpecialNotation = null;
    this.RefSICs = null;
  }
  public static DataLinkReferences_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLinkReferences_Full.GetRootAsDataLinkReferences_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLinkReferences_Full.FinishDataLinkReferences_FullBuffer(fbb, DataLinkReferences_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLinkReferences_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*RefSerialId*/, false)
      && verifier.VerifyString(tablePos, 6 /*RefType*/, false)
      && verifier.VerifyString(tablePos, 8 /*RefOriginator*/, false)
      && verifier.VerifyString(tablePos, 10 /*RefTs*/, false)
      && verifier.VerifyString(tablePos, 12 /*RefSerialNum*/, false)
      && verifier.VerifyString(tablePos, 14 /*RefSpecialNotation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*RefSICs*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
