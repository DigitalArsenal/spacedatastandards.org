// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
public struct AttitudeSet_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AttitudeSet_Full GetRootAsAttitudeSet_Full(ByteBuffer _bb) { return GetRootAsAttitudeSet_Full(_bb, new AttitudeSet_Full()); }
  public static AttitudeSet_Full GetRootAsAttitudeSet_Full(ByteBuffer _bb, AttitudeSet_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AttitudeSet_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ATTI"); }
  public static bool VerifyAttitudeSet_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ATTI", false, AttitudeSet_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttitudeSet_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ATTITUDESET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the on-orbit satellite to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/catalog number of the on-orbit object to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: D6593
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The type of attitude message or messages associated with this set.
  /// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
  /// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
  /// Example: /// Example: AEM
  /// Constraints: Minimum length = 1, Maximum length = 3
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
  /// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
  /// Constraints: No constraints specified.
  public string AsRef(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AsRefLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
  /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(22); }
  /// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
  /// Example: /// Example: 2022-07-07T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
  /// Example: /// Example: 2022-07-07T18:00:00.654321Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: SCBODY
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Frame1 { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFrame1Bytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetFrame1Bytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetFrame1Array() { return __p.__vector_as_array<byte>(28); }
  /// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Frame2 { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFrame2Bytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetFrame2Bytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetFrame2Array() { return __p.__vector_as_array<byte>(30); }
  /// Number of attitude records contained in this set.
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  public int NumPoints { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
  /// Example: /// Example: 60
  /// Constraints: No constraints specified.
  public int StepSize { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Initial precession angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 30.5
  /// Constraints: No constraints specified.
  public double PrecAngleInit { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Initial spin angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 25.5
  /// Constraints: No constraints specified.
  public double SpinAngleInit { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
  /// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string EulerRotSeq { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEulerRotSeqBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetEulerRotSeqBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetEulerRotSeqArray() { return __p.__vector_as_array<byte>(40); }
  /// Collection of attitude data associated with this Attitude Set.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AttitudeList(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AttitudeListLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Recommended interpolation method for estimating attitude ephemeris data.
  /// Example: /// Example: LINEAR
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Interpolator { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInterpolatorBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetInterpolatorBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetInterpolatorArray() { return __p.__vector_as_array<byte>(44); }
  /// Recommended polynomial interpolation degree.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int InterpolatorDegree { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional notes/comments for this attitude set.
  /// Example: /// Example: Notes for this attitude set
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(48); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-07-05T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(50); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(52); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(54); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(56); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AttitudeSet_Full_dataMode_Enum DataMode { get { int o = __p.__offset(58); return o != 0 ? (AttitudeSet_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AttitudeSet_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(60); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(62); }

  public static Offset<AttitudeSet_Full> CreateAttitudeSet_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset esIdOffset = default(StringOffset),
      VectorOffset asRefOffset = default(VectorOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset frame1Offset = default(StringOffset),
      StringOffset frame2Offset = default(StringOffset),
      int numPoints = 0,
      int stepSize = 0,
      double precAngleInit = 0.0,
      double spinAngleInit = 0.0,
      StringOffset eulerRotSeqOffset = default(StringOffset),
      VectorOffset attitudeListOffset = default(VectorOffset),
      StringOffset interpolatorOffset = default(StringOffset),
      int interpolatorDegree = 0,
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      AttitudeSet_Full_dataMode_Enum dataMode = AttitudeSet_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset onOrbitOffset = default(StringOffset)) {
    builder.StartTable(30);
    AttitudeSet_Full.AddSpinAngleInit(builder, spinAngleInit);
    AttitudeSet_Full.AddPrecAngleInit(builder, precAngleInit);
    AttitudeSet_Full.AddOnOrbit(builder, onOrbitOffset);
    AttitudeSet_Full.AddOrigNetwork(builder, origNetworkOffset);
    AttitudeSet_Full.AddOrigin(builder, originOffset);
    AttitudeSet_Full.AddSource(builder, sourceOffset);
    AttitudeSet_Full.AddCreatedBy(builder, createdByOffset);
    AttitudeSet_Full.AddCreatedAt(builder, createdAtOffset);
    AttitudeSet_Full.AddNotes(builder, notesOffset);
    AttitudeSet_Full.AddInterpolatorDegree(builder, interpolatorDegree);
    AttitudeSet_Full.AddInterpolator(builder, interpolatorOffset);
    AttitudeSet_Full.AddAttitudeList(builder, attitudeListOffset);
    AttitudeSet_Full.AddEulerRotSeq(builder, eulerRotSeqOffset);
    AttitudeSet_Full.AddStepSize(builder, stepSize);
    AttitudeSet_Full.AddNumPoints(builder, numPoints);
    AttitudeSet_Full.AddFrame2(builder, frame2Offset);
    AttitudeSet_Full.AddFrame1(builder, frame1Offset);
    AttitudeSet_Full.AddEndTime(builder, endTimeOffset);
    AttitudeSet_Full.AddStartTime(builder, startTimeOffset);
    AttitudeSet_Full.AddOrigSensorId(builder, origSensorIdOffset);
    AttitudeSet_Full.AddIdSensor(builder, idSensorOffset);
    AttitudeSet_Full.AddAsRef(builder, asRefOffset);
    AttitudeSet_Full.AddEsId(builder, esIdOffset);
    AttitudeSet_Full.AddType(builder, typeOffset);
    AttitudeSet_Full.AddOrigObjectId(builder, origObjectIdOffset);
    AttitudeSet_Full.AddSatNo(builder, satNo);
    AttitudeSet_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    AttitudeSet_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    AttitudeSet_Full.AddId(builder, idOffset);
    AttitudeSet_Full.AddDataMode(builder, dataMode);
    return AttitudeSet_Full.EndAttitudeSet_Full(builder);
  }

  public static void StartAttitudeSet_Full(FlatBufferBuilder builder) { builder.StartTable(30); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(6, esIdOffset.Value, 0); }
  public static void AddAsRef(FlatBufferBuilder builder, VectorOffset asRefOffset) { builder.AddOffset(7, asRefOffset.Value, 0); }
  public static VectorOffset CreateAsRefVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAsRefVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAsRefVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAsRefVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAsRefVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(8, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(9, origSensorIdOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(10, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(11, endTimeOffset.Value, 0); }
  public static void AddFrame1(FlatBufferBuilder builder, StringOffset frame1Offset) { builder.AddOffset(12, frame1Offset.Value, 0); }
  public static void AddFrame2(FlatBufferBuilder builder, StringOffset frame2Offset) { builder.AddOffset(13, frame2Offset.Value, 0); }
  public static void AddNumPoints(FlatBufferBuilder builder, int numPoints) { builder.AddInt(14, numPoints, 0); }
  public static void AddStepSize(FlatBufferBuilder builder, int stepSize) { builder.AddInt(15, stepSize, 0); }
  public static void AddPrecAngleInit(FlatBufferBuilder builder, double precAngleInit) { builder.AddDouble(16, precAngleInit, 0.0); }
  public static void AddSpinAngleInit(FlatBufferBuilder builder, double spinAngleInit) { builder.AddDouble(17, spinAngleInit, 0.0); }
  public static void AddEulerRotSeq(FlatBufferBuilder builder, StringOffset eulerRotSeqOffset) { builder.AddOffset(18, eulerRotSeqOffset.Value, 0); }
  public static void AddAttitudeList(FlatBufferBuilder builder, VectorOffset attitudeListOffset) { builder.AddOffset(19, attitudeListOffset.Value, 0); }
  public static VectorOffset CreateAttitudeListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttitudeListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttitudeListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttitudeListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttitudeListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInterpolator(FlatBufferBuilder builder, StringOffset interpolatorOffset) { builder.AddOffset(20, interpolatorOffset.Value, 0); }
  public static void AddInterpolatorDegree(FlatBufferBuilder builder, int interpolatorDegree) { builder.AddInt(21, interpolatorDegree, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(22, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(23, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(24, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(25, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(26, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AttitudeSet_Full_dataMode_Enum dataMode) { builder.AddSbyte(27, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(28, origNetworkOffset.Value, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(29, onOrbitOffset.Value, 0); }
  public static Offset<AttitudeSet_Full> EndAttitudeSet_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AttitudeSet_Full>(o);
  }
  public static void FinishAttitudeSet_FullBuffer(FlatBufferBuilder builder, Offset<AttitudeSet_Full> offset) { builder.Finish(offset.Value, "ATTI"); }
  public static void FinishSizePrefixedAttitudeSet_FullBuffer(FlatBufferBuilder builder, Offset<AttitudeSet_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ATTI"); }
  public AttitudeSet_FullT UnPack() {
    var _o = new AttitudeSet_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttitudeSet_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Type = this.Type;
    _o.EsId = this.EsId;
    _o.AsRef = new List<string>();
    for (var _j = 0; _j < this.AsRefLength; ++_j) {_o.AsRef.Add(this.AsRef(_j));}
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.Frame1 = this.Frame1;
    _o.Frame2 = this.Frame2;
    _o.NumPoints = this.NumPoints;
    _o.StepSize = this.StepSize;
    _o.PrecAngleInit = this.PrecAngleInit;
    _o.SpinAngleInit = this.SpinAngleInit;
    _o.EulerRotSeq = this.EulerRotSeq;
    _o.AttitudeList = new List<string>();
    for (var _j = 0; _j < this.AttitudeListLength; ++_j) {_o.AttitudeList.Add(this.AttitudeList(_j));}
    _o.Interpolator = this.Interpolator;
    _o.InterpolatorDegree = this.InterpolatorDegree;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
    _o.OnOrbit = this.OnOrbit;
  }
  public static Offset<AttitudeSet_Full> Pack(FlatBufferBuilder builder, AttitudeSet_FullT _o) {
    if (_o == null) return default(Offset<AttitudeSet_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _asRef = default(VectorOffset);
    if (_o.AsRef != null) {
      var __asRef = new StringOffset[_o.AsRef.Count];
      for (var _j = 0; _j < __asRef.Length; ++_j) { __asRef[_j] = builder.CreateString(_o.AsRef[_j]); }
      _asRef = CreateAsRefVector(builder, __asRef);
    }
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _frame1 = _o.Frame1 == null ? default(StringOffset) : builder.CreateString(_o.Frame1);
    var _frame2 = _o.Frame2 == null ? default(StringOffset) : builder.CreateString(_o.Frame2);
    var _eulerRotSeq = _o.EulerRotSeq == null ? default(StringOffset) : builder.CreateString(_o.EulerRotSeq);
    var _attitudeList = default(VectorOffset);
    if (_o.AttitudeList != null) {
      var __attitudeList = new StringOffset[_o.AttitudeList.Count];
      for (var _j = 0; _j < __attitudeList.Length; ++_j) { __attitudeList[_j] = builder.CreateString(_o.AttitudeList[_j]); }
      _attitudeList = CreateAttitudeListVector(builder, __attitudeList);
    }
    var _interpolator = _o.Interpolator == null ? default(StringOffset) : builder.CreateString(_o.Interpolator);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    return CreateAttitudeSet_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _type,
      _esId,
      _asRef,
      _idSensor,
      _origSensorId,
      _startTime,
      _endTime,
      _frame1,
      _frame2,
      _o.NumPoints,
      _o.StepSize,
      _o.PrecAngleInit,
      _o.SpinAngleInit,
      _eulerRotSeq,
      _attitudeList,
      _interpolator,
      _o.InterpolatorDegree,
      _notes,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork,
      _onOrbit);
  }
}

public class AttitudeSet_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string Type { get; set; }
  public string EsId { get; set; }
  public List<string> AsRef { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string Frame1 { get; set; }
  public string Frame2 { get; set; }
  public int NumPoints { get; set; }
  public int StepSize { get; set; }
  public double PrecAngleInit { get; set; }
  public double SpinAngleInit { get; set; }
  public string EulerRotSeq { get; set; }
  public List<string> AttitudeList { get; set; }
  public string Interpolator { get; set; }
  public int InterpolatorDegree { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public AttitudeSet_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }
  public string OnOrbit { get; set; }

  public AttitudeSet_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.Type = null;
    this.EsId = null;
    this.AsRef = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.StartTime = null;
    this.EndTime = null;
    this.Frame1 = null;
    this.Frame2 = null;
    this.NumPoints = 0;
    this.StepSize = 0;
    this.PrecAngleInit = 0.0;
    this.SpinAngleInit = 0.0;
    this.EulerRotSeq = null;
    this.AttitudeList = null;
    this.Interpolator = null;
    this.InterpolatorDegree = 0;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = AttitudeSet_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
    this.OnOrbit = null;
  }
  public static AttitudeSet_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AttitudeSet_Full.GetRootAsAttitudeSet_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AttitudeSet_Full.FinishAttitudeSet_FullBuffer(fbb, AttitudeSet_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AttitudeSet_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyString(tablePos, 16 /*EsId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*AsRef*/, false)
      && verifier.VerifyString(tablePos, 20 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 22 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 24 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 28 /*Frame1*/, false)
      && verifier.VerifyString(tablePos, 30 /*Frame2*/, false)
      && verifier.VerifyField(tablePos, 32 /*NumPoints*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*StepSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*PrecAngleInit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*SpinAngleInit*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 40 /*EulerRotSeq*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*AttitudeList*/, false)
      && verifier.VerifyString(tablePos, 44 /*Interpolator*/, false)
      && verifier.VerifyField(tablePos, 46 /*InterpolatorDegree*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 48 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 50 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 52 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 54 /*Source*/, false)
      && verifier.VerifyString(tablePos, 56 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 58 /*DataMode*/, 1 /*AttitudeSet_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 60 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 62 /*OnOrbit*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
