// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Properties and characteristics of equipment that can be associated with a site or other entity.
public struct Equipment_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Equipment_Abridged GetRootAsEquipment_Abridged(ByteBuffer _bb) { return GetRootAsEquipment_Abridged(_bb, new Equipment_Abridged()); }
  public static Equipment_Abridged GetRootAsEquipment_Abridged(ByteBuffer _bb, Equipment_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Equipment_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EQUI"); }
  public static bool VerifyEquipment_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EQUI", false, Equipment_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Equipment_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the Parent equipment record associated with this equipment record.
  /// Example: /// Example: PARENT-EQUIPMENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdParentEquipment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdParentEquipmentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdParentEquipmentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdParentEquipmentArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the Site Entity associated with the equipment record.
  /// Example: /// Example: SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSite { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSiteBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSiteBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSiteArray() { return __p.__vector_as_array<byte>(10); }
  /// Unique identifier of the operating unit associated with the equipment record.
  /// Example: /// Example: UNIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOperatingUnit { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOperatingUnitBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdOperatingUnitBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdOperatingUnitArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the Equipment record from the originating system.
  /// Example: /// Example: ORIG-EQP-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltEqpId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltEqpIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAltEqpIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAltEqpIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
  /// Example: /// Example: X12345
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string EqpCode { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEqpCodeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEqpCodeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEqpCodeArray() { return __p.__vector_as_array<byte>(16); }
  /// Uniquely identifies each item or group of equipment associated with a unit, facility or site.
  /// Example: /// Example: 001
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string EqpIdNum { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEqpIdNumBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEqpIdNumBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEqpIdNumArray() { return __p.__vector_as_array<byte>(18); }
  /// The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: IQ
  /// Constraints: Minimum length = 1, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(20); }
  /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string AltCountryCode { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltCountryCodeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetAltCountryCodeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetAltCountryCodeArray() { return __p.__vector_as_array<byte>(22); }
  /// World Aeronautical Chart identifier for the area in which a designated place is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Wac { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWacBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetWacBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetWacArray() { return __p.__vector_as_array<byte>(24); }
  /// Provider specific sequential number assigned to the equipment.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int SeqNum { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
  /// Example: /// Example: AMPHIBIOUS WARFARE SHIP
  /// Constraints: Minimum length = 0, Maximum length = 54
  public string Nomen { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNomenBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetNomenBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetNomenArray() { return __p.__vector_as_array<byte>(28); }
  /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string OperStatus { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperStatusBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOperStatusBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOperStatusArray() { return __p.__vector_as_array<byte>(30); }
  /// The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Condition { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(32); }
  /// Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ConditionAvail { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionAvailBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetConditionAvailBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetConditionAvailArray() { return __p.__vector_as_array<byte>(34); }
  /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int Eval { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: NOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Fpa { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFpaBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetFpaBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetFpaArray() { return __p.__vector_as_array<byte>(38); }
  /// Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OCC
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string Function { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctionBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetFunctionBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetFunctionArray() { return __p.__vector_as_array<byte>(40); }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Ident { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetIdentBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetIdentArray() { return __p.__vector_as_array<byte>(42); }
  /// The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Allegiance { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAllegianceBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetAllegianceBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetAllegianceArray() { return __p.__vector_as_array<byte>(44); }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string AltAllegiance { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltAllegianceBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetAltAllegianceBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetAltAllegianceArray() { return __p.__vector_as_array<byte>(46); }
  /// Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: GR
  /// Constraints: Minimum length = 0, Maximum length = 9
  public string LocReason { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocReasonBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetLocReasonBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetLocReasonArray() { return __p.__vector_as_array<byte>(48); }
  /// Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
  /// Example: /// Example: Territorial Sea
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OperAreaPrimary { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperAreaPrimaryBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetOperAreaPrimaryBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetOperAreaPrimaryArray() { return __p.__vector_as_array<byte>(50); }
  /// Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: JG
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string FunctPrimary { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFunctPrimaryBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetFunctPrimaryBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetFunctPrimaryArray() { return __p.__vector_as_array<byte>(52); }
  /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CoordDatum { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordDatumBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetCoordDatumBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetCoordDatumArray() { return __p.__vector_as_array<byte>(54); }
  /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  public string Coord { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCoordBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCoordArray() { return __p.__vector_as_array<byte>(56); }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  public double CoordDerivAcc { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 39.019242
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.251659
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  public double ElevMsl { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int ElevMslConfLvl { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double ElevMslDerivAcc { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  public double GeoidalMslSep { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator.
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  public string MilGridSys { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridSysBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetMilGridSysBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetMilGridSysArray() { return __p.__vector_as_array<byte>(72); }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string MilGrid { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilGridBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetMilGridBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetMilGridArray() { return __p.__vector_as_array<byte>(74); }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Utm { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUtmBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetUtmBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetUtmArray() { return __p.__vector_as_array<byte>(76); }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string AirDefArea { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirDefAreaBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetAirDefAreaBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetAirDefAreaArray() { return __p.__vector_as_array<byte>(78); }
  /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZ07
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string PolSubdiv { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPolSubdivBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetPolSubdivBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetPolSubdivArray() { return __p.__vector_as_array<byte>(80); }
  /// Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int QtyOH { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string SymCode { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSymCodeBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetSymCodeBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetSymCodeArray() { return __p.__vector_as_array<byte>(84); }
  /// Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
  /// 0 - Not of significant importance of the system
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string ClassRating { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassRatingBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetClassRatingBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetClassRatingArray() { return __p.__vector_as_array<byte>(86); }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string RecStatus { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecStatusBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetRecStatusBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetRecStatusArray() { return __p.__vector_as_array<byte>(88); }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  public string ReviewDate { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviewDateBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetReviewDateBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetReviewDateArray() { return __p.__vector_as_array<byte>(90); }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ResProd { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResProdBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetResProdBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetResProdArray() { return __p.__vector_as_array<byte>(92); }
  /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ReferenceDoc { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReferenceDocBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetReferenceDocBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetReferenceDocArray() { return __p.__vector_as_array<byte>(94); }
  /// Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['AIRCRAFT']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['SRC_ID_1']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(100); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(102); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(104); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(106); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Equipment_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(108); return o != 0 ? (Equipment_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Equipment_Abridged_dataMode_Enum.REAL; } }

  public static Offset<Equipment_Abridged> CreateEquipment_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idParentEquipmentOffset = default(StringOffset),
      StringOffset idSiteOffset = default(StringOffset),
      StringOffset idOperatingUnitOffset = default(StringOffset),
      StringOffset altEqpIdOffset = default(StringOffset),
      StringOffset eqpCodeOffset = default(StringOffset),
      StringOffset eqpIdNumOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset altCountryCodeOffset = default(StringOffset),
      StringOffset wacOffset = default(StringOffset),
      int seqNum = 0,
      StringOffset nomenOffset = default(StringOffset),
      StringOffset operStatusOffset = default(StringOffset),
      StringOffset conditionOffset = default(StringOffset),
      StringOffset conditionAvailOffset = default(StringOffset),
      int eval = 0,
      StringOffset fpaOffset = default(StringOffset),
      StringOffset functionOffset = default(StringOffset),
      StringOffset identOffset = default(StringOffset),
      StringOffset allegianceOffset = default(StringOffset),
      StringOffset altAllegianceOffset = default(StringOffset),
      StringOffset locReasonOffset = default(StringOffset),
      StringOffset operAreaPrimaryOffset = default(StringOffset),
      StringOffset functPrimaryOffset = default(StringOffset),
      StringOffset coordDatumOffset = default(StringOffset),
      StringOffset coordOffset = default(StringOffset),
      double coordDerivAcc = 0.0,
      double lat = 0.0,
      double lon = 0.0,
      double elevMsl = 0.0,
      int elevMslConfLvl = 0,
      double elevMslDerivAcc = 0.0,
      double geoidalMslSep = 0.0,
      StringOffset milGridSysOffset = default(StringOffset),
      StringOffset milGridOffset = default(StringOffset),
      StringOffset utmOffset = default(StringOffset),
      StringOffset airDefAreaOffset = default(StringOffset),
      StringOffset polSubdivOffset = default(StringOffset),
      int qtyOH = 0,
      StringOffset symCodeOffset = default(StringOffset),
      StringOffset classRatingOffset = default(StringOffset),
      StringOffset recStatusOffset = default(StringOffset),
      StringOffset reviewDateOffset = default(StringOffset),
      StringOffset resProdOffset = default(StringOffset),
      StringOffset referenceDocOffset = default(StringOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Equipment_Abridged_dataMode_Enum dataMode = Equipment_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(53);
    Equipment_Abridged.AddGeoidalMslSep(builder, geoidalMslSep);
    Equipment_Abridged.AddElevMslDerivAcc(builder, elevMslDerivAcc);
    Equipment_Abridged.AddElevMsl(builder, elevMsl);
    Equipment_Abridged.AddLon(builder, lon);
    Equipment_Abridged.AddLat(builder, lat);
    Equipment_Abridged.AddCoordDerivAcc(builder, coordDerivAcc);
    Equipment_Abridged.AddOrigin(builder, originOffset);
    Equipment_Abridged.AddSource(builder, sourceOffset);
    Equipment_Abridged.AddCreatedBy(builder, createdByOffset);
    Equipment_Abridged.AddCreatedAt(builder, createdAtOffset);
    Equipment_Abridged.AddSrcIds(builder, srcIdsOffset);
    Equipment_Abridged.AddSrcTyps(builder, srcTypsOffset);
    Equipment_Abridged.AddReferenceDoc(builder, referenceDocOffset);
    Equipment_Abridged.AddResProd(builder, resProdOffset);
    Equipment_Abridged.AddReviewDate(builder, reviewDateOffset);
    Equipment_Abridged.AddRecStatus(builder, recStatusOffset);
    Equipment_Abridged.AddClassRating(builder, classRatingOffset);
    Equipment_Abridged.AddSymCode(builder, symCodeOffset);
    Equipment_Abridged.AddQtyOH(builder, qtyOH);
    Equipment_Abridged.AddPolSubdiv(builder, polSubdivOffset);
    Equipment_Abridged.AddAirDefArea(builder, airDefAreaOffset);
    Equipment_Abridged.AddUtm(builder, utmOffset);
    Equipment_Abridged.AddMilGrid(builder, milGridOffset);
    Equipment_Abridged.AddMilGridSys(builder, milGridSysOffset);
    Equipment_Abridged.AddElevMslConfLvl(builder, elevMslConfLvl);
    Equipment_Abridged.AddCoord(builder, coordOffset);
    Equipment_Abridged.AddCoordDatum(builder, coordDatumOffset);
    Equipment_Abridged.AddFunctPrimary(builder, functPrimaryOffset);
    Equipment_Abridged.AddOperAreaPrimary(builder, operAreaPrimaryOffset);
    Equipment_Abridged.AddLocReason(builder, locReasonOffset);
    Equipment_Abridged.AddAltAllegiance(builder, altAllegianceOffset);
    Equipment_Abridged.AddAllegiance(builder, allegianceOffset);
    Equipment_Abridged.AddIdent(builder, identOffset);
    Equipment_Abridged.AddFunction(builder, functionOffset);
    Equipment_Abridged.AddFpa(builder, fpaOffset);
    Equipment_Abridged.AddEval(builder, eval);
    Equipment_Abridged.AddConditionAvail(builder, conditionAvailOffset);
    Equipment_Abridged.AddCondition(builder, conditionOffset);
    Equipment_Abridged.AddOperStatus(builder, operStatusOffset);
    Equipment_Abridged.AddNomen(builder, nomenOffset);
    Equipment_Abridged.AddSeqNum(builder, seqNum);
    Equipment_Abridged.AddWac(builder, wacOffset);
    Equipment_Abridged.AddAltCountryCode(builder, altCountryCodeOffset);
    Equipment_Abridged.AddCountryCode(builder, countryCodeOffset);
    Equipment_Abridged.AddEqpIdNum(builder, eqpIdNumOffset);
    Equipment_Abridged.AddEqpCode(builder, eqpCodeOffset);
    Equipment_Abridged.AddAltEqpId(builder, altEqpIdOffset);
    Equipment_Abridged.AddIdOperatingUnit(builder, idOperatingUnitOffset);
    Equipment_Abridged.AddIdSite(builder, idSiteOffset);
    Equipment_Abridged.AddIdParentEquipment(builder, idParentEquipmentOffset);
    Equipment_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Equipment_Abridged.AddId(builder, idOffset);
    Equipment_Abridged.AddDataMode(builder, dataMode);
    return Equipment_Abridged.EndEquipment_Abridged(builder);
  }

  public static void StartEquipment_Abridged(FlatBufferBuilder builder) { builder.StartTable(53); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdParentEquipment(FlatBufferBuilder builder, StringOffset idParentEquipmentOffset) { builder.AddOffset(2, idParentEquipmentOffset.Value, 0); }
  public static void AddIdSite(FlatBufferBuilder builder, StringOffset idSiteOffset) { builder.AddOffset(3, idSiteOffset.Value, 0); }
  public static void AddIdOperatingUnit(FlatBufferBuilder builder, StringOffset idOperatingUnitOffset) { builder.AddOffset(4, idOperatingUnitOffset.Value, 0); }
  public static void AddAltEqpId(FlatBufferBuilder builder, StringOffset altEqpIdOffset) { builder.AddOffset(5, altEqpIdOffset.Value, 0); }
  public static void AddEqpCode(FlatBufferBuilder builder, StringOffset eqpCodeOffset) { builder.AddOffset(6, eqpCodeOffset.Value, 0); }
  public static void AddEqpIdNum(FlatBufferBuilder builder, StringOffset eqpIdNumOffset) { builder.AddOffset(7, eqpIdNumOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(8, countryCodeOffset.Value, 0); }
  public static void AddAltCountryCode(FlatBufferBuilder builder, StringOffset altCountryCodeOffset) { builder.AddOffset(9, altCountryCodeOffset.Value, 0); }
  public static void AddWac(FlatBufferBuilder builder, StringOffset wacOffset) { builder.AddOffset(10, wacOffset.Value, 0); }
  public static void AddSeqNum(FlatBufferBuilder builder, int seqNum) { builder.AddInt(11, seqNum, 0); }
  public static void AddNomen(FlatBufferBuilder builder, StringOffset nomenOffset) { builder.AddOffset(12, nomenOffset.Value, 0); }
  public static void AddOperStatus(FlatBufferBuilder builder, StringOffset operStatusOffset) { builder.AddOffset(13, operStatusOffset.Value, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(14, conditionOffset.Value, 0); }
  public static void AddConditionAvail(FlatBufferBuilder builder, StringOffset conditionAvailOffset) { builder.AddOffset(15, conditionAvailOffset.Value, 0); }
  public static void AddEval(FlatBufferBuilder builder, int eval) { builder.AddInt(16, eval, 0); }
  public static void AddFpa(FlatBufferBuilder builder, StringOffset fpaOffset) { builder.AddOffset(17, fpaOffset.Value, 0); }
  public static void AddFunction(FlatBufferBuilder builder, StringOffset functionOffset) { builder.AddOffset(18, functionOffset.Value, 0); }
  public static void AddIdent(FlatBufferBuilder builder, StringOffset identOffset) { builder.AddOffset(19, identOffset.Value, 0); }
  public static void AddAllegiance(FlatBufferBuilder builder, StringOffset allegianceOffset) { builder.AddOffset(20, allegianceOffset.Value, 0); }
  public static void AddAltAllegiance(FlatBufferBuilder builder, StringOffset altAllegianceOffset) { builder.AddOffset(21, altAllegianceOffset.Value, 0); }
  public static void AddLocReason(FlatBufferBuilder builder, StringOffset locReasonOffset) { builder.AddOffset(22, locReasonOffset.Value, 0); }
  public static void AddOperAreaPrimary(FlatBufferBuilder builder, StringOffset operAreaPrimaryOffset) { builder.AddOffset(23, operAreaPrimaryOffset.Value, 0); }
  public static void AddFunctPrimary(FlatBufferBuilder builder, StringOffset functPrimaryOffset) { builder.AddOffset(24, functPrimaryOffset.Value, 0); }
  public static void AddCoordDatum(FlatBufferBuilder builder, StringOffset coordDatumOffset) { builder.AddOffset(25, coordDatumOffset.Value, 0); }
  public static void AddCoord(FlatBufferBuilder builder, StringOffset coordOffset) { builder.AddOffset(26, coordOffset.Value, 0); }
  public static void AddCoordDerivAcc(FlatBufferBuilder builder, double coordDerivAcc) { builder.AddDouble(27, coordDerivAcc, 0.0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(28, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(29, lon, 0.0); }
  public static void AddElevMsl(FlatBufferBuilder builder, double elevMsl) { builder.AddDouble(30, elevMsl, 0.0); }
  public static void AddElevMslConfLvl(FlatBufferBuilder builder, int elevMslConfLvl) { builder.AddInt(31, elevMslConfLvl, 0); }
  public static void AddElevMslDerivAcc(FlatBufferBuilder builder, double elevMslDerivAcc) { builder.AddDouble(32, elevMslDerivAcc, 0.0); }
  public static void AddGeoidalMslSep(FlatBufferBuilder builder, double geoidalMslSep) { builder.AddDouble(33, geoidalMslSep, 0.0); }
  public static void AddMilGridSys(FlatBufferBuilder builder, StringOffset milGridSysOffset) { builder.AddOffset(34, milGridSysOffset.Value, 0); }
  public static void AddMilGrid(FlatBufferBuilder builder, StringOffset milGridOffset) { builder.AddOffset(35, milGridOffset.Value, 0); }
  public static void AddUtm(FlatBufferBuilder builder, StringOffset utmOffset) { builder.AddOffset(36, utmOffset.Value, 0); }
  public static void AddAirDefArea(FlatBufferBuilder builder, StringOffset airDefAreaOffset) { builder.AddOffset(37, airDefAreaOffset.Value, 0); }
  public static void AddPolSubdiv(FlatBufferBuilder builder, StringOffset polSubdivOffset) { builder.AddOffset(38, polSubdivOffset.Value, 0); }
  public static void AddQtyOH(FlatBufferBuilder builder, int qtyOH) { builder.AddInt(39, qtyOH, 0); }
  public static void AddSymCode(FlatBufferBuilder builder, StringOffset symCodeOffset) { builder.AddOffset(40, symCodeOffset.Value, 0); }
  public static void AddClassRating(FlatBufferBuilder builder, StringOffset classRatingOffset) { builder.AddOffset(41, classRatingOffset.Value, 0); }
  public static void AddRecStatus(FlatBufferBuilder builder, StringOffset recStatusOffset) { builder.AddOffset(42, recStatusOffset.Value, 0); }
  public static void AddReviewDate(FlatBufferBuilder builder, StringOffset reviewDateOffset) { builder.AddOffset(43, reviewDateOffset.Value, 0); }
  public static void AddResProd(FlatBufferBuilder builder, StringOffset resProdOffset) { builder.AddOffset(44, resProdOffset.Value, 0); }
  public static void AddReferenceDoc(FlatBufferBuilder builder, StringOffset referenceDocOffset) { builder.AddOffset(45, referenceDocOffset.Value, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(46, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(47, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(48, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(49, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(50, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(51, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Equipment_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(52, (sbyte)dataMode, 0); }
  public static Offset<Equipment_Abridged> EndEquipment_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Equipment_Abridged>(o);
  }
  public static void FinishEquipment_AbridgedBuffer(FlatBufferBuilder builder, Offset<Equipment_Abridged> offset) { builder.Finish(offset.Value, "EQUI"); }
  public static void FinishSizePrefixedEquipment_AbridgedBuffer(FlatBufferBuilder builder, Offset<Equipment_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EQUI"); }
  public Equipment_AbridgedT UnPack() {
    var _o = new Equipment_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Equipment_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdParentEquipment = this.IdParentEquipment;
    _o.IdSite = this.IdSite;
    _o.IdOperatingUnit = this.IdOperatingUnit;
    _o.AltEqpId = this.AltEqpId;
    _o.EqpCode = this.EqpCode;
    _o.EqpIdNum = this.EqpIdNum;
    _o.CountryCode = this.CountryCode;
    _o.AltCountryCode = this.AltCountryCode;
    _o.Wac = this.Wac;
    _o.SeqNum = this.SeqNum;
    _o.Nomen = this.Nomen;
    _o.OperStatus = this.OperStatus;
    _o.Condition = this.Condition;
    _o.ConditionAvail = this.ConditionAvail;
    _o.Eval = this.Eval;
    _o.Fpa = this.Fpa;
    _o.Function = this.Function;
    _o.Ident = this.Ident;
    _o.Allegiance = this.Allegiance;
    _o.AltAllegiance = this.AltAllegiance;
    _o.LocReason = this.LocReason;
    _o.OperAreaPrimary = this.OperAreaPrimary;
    _o.FunctPrimary = this.FunctPrimary;
    _o.CoordDatum = this.CoordDatum;
    _o.Coord = this.Coord;
    _o.CoordDerivAcc = this.CoordDerivAcc;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.ElevMsl = this.ElevMsl;
    _o.ElevMslConfLvl = this.ElevMslConfLvl;
    _o.ElevMslDerivAcc = this.ElevMslDerivAcc;
    _o.GeoidalMslSep = this.GeoidalMslSep;
    _o.MilGridSys = this.MilGridSys;
    _o.MilGrid = this.MilGrid;
    _o.Utm = this.Utm;
    _o.AirDefArea = this.AirDefArea;
    _o.PolSubdiv = this.PolSubdiv;
    _o.QtyOH = this.QtyOH;
    _o.SymCode = this.SymCode;
    _o.ClassRating = this.ClassRating;
    _o.RecStatus = this.RecStatus;
    _o.ReviewDate = this.ReviewDate;
    _o.ResProd = this.ResProd;
    _o.ReferenceDoc = this.ReferenceDoc;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Equipment_Abridged> Pack(FlatBufferBuilder builder, Equipment_AbridgedT _o) {
    if (_o == null) return default(Offset<Equipment_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idParentEquipment = _o.IdParentEquipment == null ? default(StringOffset) : builder.CreateString(_o.IdParentEquipment);
    var _idSite = _o.IdSite == null ? default(StringOffset) : builder.CreateString(_o.IdSite);
    var _idOperatingUnit = _o.IdOperatingUnit == null ? default(StringOffset) : builder.CreateString(_o.IdOperatingUnit);
    var _altEqpId = _o.AltEqpId == null ? default(StringOffset) : builder.CreateString(_o.AltEqpId);
    var _eqpCode = _o.EqpCode == null ? default(StringOffset) : builder.CreateString(_o.EqpCode);
    var _eqpIdNum = _o.EqpIdNum == null ? default(StringOffset) : builder.CreateString(_o.EqpIdNum);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _altCountryCode = _o.AltCountryCode == null ? default(StringOffset) : builder.CreateString(_o.AltCountryCode);
    var _wac = _o.Wac == null ? default(StringOffset) : builder.CreateString(_o.Wac);
    var _nomen = _o.Nomen == null ? default(StringOffset) : builder.CreateString(_o.Nomen);
    var _operStatus = _o.OperStatus == null ? default(StringOffset) : builder.CreateString(_o.OperStatus);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _conditionAvail = _o.ConditionAvail == null ? default(StringOffset) : builder.CreateString(_o.ConditionAvail);
    var _fpa = _o.Fpa == null ? default(StringOffset) : builder.CreateString(_o.Fpa);
    var _function = _o.Function == null ? default(StringOffset) : builder.CreateString(_o.Function);
    var _ident = _o.Ident == null ? default(StringOffset) : builder.CreateString(_o.Ident);
    var _allegiance = _o.Allegiance == null ? default(StringOffset) : builder.CreateString(_o.Allegiance);
    var _altAllegiance = _o.AltAllegiance == null ? default(StringOffset) : builder.CreateString(_o.AltAllegiance);
    var _locReason = _o.LocReason == null ? default(StringOffset) : builder.CreateString(_o.LocReason);
    var _operAreaPrimary = _o.OperAreaPrimary == null ? default(StringOffset) : builder.CreateString(_o.OperAreaPrimary);
    var _functPrimary = _o.FunctPrimary == null ? default(StringOffset) : builder.CreateString(_o.FunctPrimary);
    var _coordDatum = _o.CoordDatum == null ? default(StringOffset) : builder.CreateString(_o.CoordDatum);
    var _coord = _o.Coord == null ? default(StringOffset) : builder.CreateString(_o.Coord);
    var _milGridSys = _o.MilGridSys == null ? default(StringOffset) : builder.CreateString(_o.MilGridSys);
    var _milGrid = _o.MilGrid == null ? default(StringOffset) : builder.CreateString(_o.MilGrid);
    var _utm = _o.Utm == null ? default(StringOffset) : builder.CreateString(_o.Utm);
    var _airDefArea = _o.AirDefArea == null ? default(StringOffset) : builder.CreateString(_o.AirDefArea);
    var _polSubdiv = _o.PolSubdiv == null ? default(StringOffset) : builder.CreateString(_o.PolSubdiv);
    var _symCode = _o.SymCode == null ? default(StringOffset) : builder.CreateString(_o.SymCode);
    var _classRating = _o.ClassRating == null ? default(StringOffset) : builder.CreateString(_o.ClassRating);
    var _recStatus = _o.RecStatus == null ? default(StringOffset) : builder.CreateString(_o.RecStatus);
    var _reviewDate = _o.ReviewDate == null ? default(StringOffset) : builder.CreateString(_o.ReviewDate);
    var _resProd = _o.ResProd == null ? default(StringOffset) : builder.CreateString(_o.ResProd);
    var _referenceDoc = _o.ReferenceDoc == null ? default(StringOffset) : builder.CreateString(_o.ReferenceDoc);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateEquipment_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idParentEquipment,
      _idSite,
      _idOperatingUnit,
      _altEqpId,
      _eqpCode,
      _eqpIdNum,
      _countryCode,
      _altCountryCode,
      _wac,
      _o.SeqNum,
      _nomen,
      _operStatus,
      _condition,
      _conditionAvail,
      _o.Eval,
      _fpa,
      _function,
      _ident,
      _allegiance,
      _altAllegiance,
      _locReason,
      _operAreaPrimary,
      _functPrimary,
      _coordDatum,
      _coord,
      _o.CoordDerivAcc,
      _o.Lat,
      _o.Lon,
      _o.ElevMsl,
      _o.ElevMslConfLvl,
      _o.ElevMslDerivAcc,
      _o.GeoidalMslSep,
      _milGridSys,
      _milGrid,
      _utm,
      _airDefArea,
      _polSubdiv,
      _o.QtyOH,
      _symCode,
      _classRating,
      _recStatus,
      _reviewDate,
      _resProd,
      _referenceDoc,
      _srcTyps,
      _srcIds,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode);
  }
}

public class Equipment_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdParentEquipment { get; set; }
  public string IdSite { get; set; }
  public string IdOperatingUnit { get; set; }
  public string AltEqpId { get; set; }
  public string EqpCode { get; set; }
  public string EqpIdNum { get; set; }
  public string CountryCode { get; set; }
  public string AltCountryCode { get; set; }
  public string Wac { get; set; }
  public int SeqNum { get; set; }
  public string Nomen { get; set; }
  public string OperStatus { get; set; }
  public string Condition { get; set; }
  public string ConditionAvail { get; set; }
  public int Eval { get; set; }
  public string Fpa { get; set; }
  public string Function { get; set; }
  public string Ident { get; set; }
  public string Allegiance { get; set; }
  public string AltAllegiance { get; set; }
  public string LocReason { get; set; }
  public string OperAreaPrimary { get; set; }
  public string FunctPrimary { get; set; }
  public string CoordDatum { get; set; }
  public string Coord { get; set; }
  public double CoordDerivAcc { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double ElevMsl { get; set; }
  public int ElevMslConfLvl { get; set; }
  public double ElevMslDerivAcc { get; set; }
  public double GeoidalMslSep { get; set; }
  public string MilGridSys { get; set; }
  public string MilGrid { get; set; }
  public string Utm { get; set; }
  public string AirDefArea { get; set; }
  public string PolSubdiv { get; set; }
  public int QtyOH { get; set; }
  public string SymCode { get; set; }
  public string ClassRating { get; set; }
  public string RecStatus { get; set; }
  public string ReviewDate { get; set; }
  public string ResProd { get; set; }
  public string ReferenceDoc { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Equipment_Abridged_dataMode_Enum DataMode { get; set; }

  public Equipment_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdParentEquipment = null;
    this.IdSite = null;
    this.IdOperatingUnit = null;
    this.AltEqpId = null;
    this.EqpCode = null;
    this.EqpIdNum = null;
    this.CountryCode = null;
    this.AltCountryCode = null;
    this.Wac = null;
    this.SeqNum = 0;
    this.Nomen = null;
    this.OperStatus = null;
    this.Condition = null;
    this.ConditionAvail = null;
    this.Eval = 0;
    this.Fpa = null;
    this.Function = null;
    this.Ident = null;
    this.Allegiance = null;
    this.AltAllegiance = null;
    this.LocReason = null;
    this.OperAreaPrimary = null;
    this.FunctPrimary = null;
    this.CoordDatum = null;
    this.Coord = null;
    this.CoordDerivAcc = 0.0;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.ElevMsl = 0.0;
    this.ElevMslConfLvl = 0;
    this.ElevMslDerivAcc = 0.0;
    this.GeoidalMslSep = 0.0;
    this.MilGridSys = null;
    this.MilGrid = null;
    this.Utm = null;
    this.AirDefArea = null;
    this.PolSubdiv = null;
    this.QtyOH = 0;
    this.SymCode = null;
    this.ClassRating = null;
    this.RecStatus = null;
    this.ReviewDate = null;
    this.ResProd = null;
    this.ReferenceDoc = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Equipment_Abridged_dataMode_Enum.REAL;
  }
  public static Equipment_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Equipment_Abridged.GetRootAsEquipment_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Equipment_Abridged.FinishEquipment_AbridgedBuffer(fbb, Equipment_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Equipment_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdParentEquipment*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSite*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdOperatingUnit*/, false)
      && verifier.VerifyString(tablePos, 14 /*AltEqpId*/, false)
      && verifier.VerifyString(tablePos, 16 /*EqpCode*/, false)
      && verifier.VerifyString(tablePos, 18 /*EqpIdNum*/, false)
      && verifier.VerifyString(tablePos, 20 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 22 /*AltCountryCode*/, false)
      && verifier.VerifyString(tablePos, 24 /*Wac*/, false)
      && verifier.VerifyField(tablePos, 26 /*SeqNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*Nomen*/, false)
      && verifier.VerifyString(tablePos, 30 /*OperStatus*/, false)
      && verifier.VerifyString(tablePos, 32 /*Condition*/, false)
      && verifier.VerifyString(tablePos, 34 /*ConditionAvail*/, false)
      && verifier.VerifyField(tablePos, 36 /*Eval*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 38 /*Fpa*/, false)
      && verifier.VerifyString(tablePos, 40 /*Function*/, false)
      && verifier.VerifyString(tablePos, 42 /*Ident*/, false)
      && verifier.VerifyString(tablePos, 44 /*Allegiance*/, false)
      && verifier.VerifyString(tablePos, 46 /*AltAllegiance*/, false)
      && verifier.VerifyString(tablePos, 48 /*LocReason*/, false)
      && verifier.VerifyString(tablePos, 50 /*OperAreaPrimary*/, false)
      && verifier.VerifyString(tablePos, 52 /*FunctPrimary*/, false)
      && verifier.VerifyString(tablePos, 54 /*CoordDatum*/, false)
      && verifier.VerifyString(tablePos, 56 /*Coord*/, false)
      && verifier.VerifyField(tablePos, 58 /*CoordDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*ElevMsl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*ElevMslConfLvl*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*ElevMslDerivAcc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*GeoidalMslSep*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 72 /*MilGridSys*/, false)
      && verifier.VerifyString(tablePos, 74 /*MilGrid*/, false)
      && verifier.VerifyString(tablePos, 76 /*Utm*/, false)
      && verifier.VerifyString(tablePos, 78 /*AirDefArea*/, false)
      && verifier.VerifyString(tablePos, 80 /*PolSubdiv*/, false)
      && verifier.VerifyField(tablePos, 82 /*QtyOH*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 84 /*SymCode*/, false)
      && verifier.VerifyString(tablePos, 86 /*ClassRating*/, false)
      && verifier.VerifyString(tablePos, 88 /*RecStatus*/, false)
      && verifier.VerifyString(tablePos, 90 /*ReviewDate*/, false)
      && verifier.VerifyString(tablePos, 92 /*ResProd*/, false)
      && verifier.VerifyString(tablePos, 94 /*ReferenceDoc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 96 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 98 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 100 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 102 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 104 /*Source*/, false)
      && verifier.VerifyString(tablePos, 106 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 108 /*DataMode*/, 1 /*Equipment_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
