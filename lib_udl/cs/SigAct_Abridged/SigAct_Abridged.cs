// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
public struct SigAct_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SigAct_Abridged GetRootAsSigAct_Abridged(ByteBuffer _bb) { return GetRootAsSigAct_Abridged(_bb, new SigAct_Abridged()); }
  public static SigAct_Abridged GetRootAsSigAct_Abridged(ByteBuffer _bb, SigAct_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SigAct_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SIGA"); }
  public static bool VerifySigAct_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SIGA", false, SigAct_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SigAct_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SIGACT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The source language of the significant event using the ISO 639-3, 3 character code definition.
  /// Example: /// Example: eng
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string SourceLanguage { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceLanguageBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSourceLanguageBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSourceLanguageArray() { return __p.__vector_as_array<byte>(8); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// The city in or near which this event occurred.
  /// Example: /// Example: Austin
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string City { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCityBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCityBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCityArray() { return __p.__vector_as_array<byte>(12); }
  /// The district in which this event occurred.
  /// Example: /// Example: district 12
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string District { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDistrictBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDistrictBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDistrictArray() { return __p.__vector_as_array<byte>(14); }
  /// The province in which this event occurred.
  /// Example: /// Example: Province_Example
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Province { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProvinceBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetProvinceBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetProvinceArray() { return __p.__vector_as_array<byte>(16); }
  /// WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.31
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// &nbsp;&nbsp;4Q (grid zone designator, GZD)
  /// &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
  /// &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Milgrid { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMilgridBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMilgridBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMilgridArray() { return __p.__vector_as_array<byte>(22); }
  /// Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
  /// Example: /// Example: Kabul
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Theater { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTheaterBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTheaterBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTheaterArray() { return __p.__vector_as_array<byte>(24); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Atext { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(26); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Agjson { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(28); }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(30); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The approximate start time of the event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:03.123Z
  /// Constraints: No constraints specified.
  public string EventStart { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventStartBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEventStartBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEventStartArray() { return __p.__vector_as_array<byte>(36); }
  /// The approximate end time of the event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:03.123Z
  /// Constraints: No constraints specified.
  public string EventEnd { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventEndBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetEventEndBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetEventEndArray() { return __p.__vector_as_array<byte>(38); }
  /// Date of the report or filing.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ReportDate { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportDateBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetReportDateBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetReportDateArray() { return __p.__vector_as_array<byte>(40); }
  /// A list of one or more actors involved in the event.
  /// Example: /// Example: ['US', 'CAN']
  /// Constraints: No constraints specified.
  public string Actors(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ActorsLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Number of civilians abducted in the activity.
  /// Example: /// Example: 423
  /// Constraints: No constraints specified.
  public int CivAbd { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of civilians detained in the activity.
  /// Example: /// Example: 234
  /// Constraints: No constraints specified.
  public int CivDet { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of civilians killed in the activity.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int CivKIA { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of civilians wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int CivWound { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of coalition members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int CoalAbd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of coalition members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int CoalDet { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of coalition members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int CoalKIA { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of coalition members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int CoalWound { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of enemy combatants abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int EnemyAbd { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of enemy combatants detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int EnemyDet { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of enemy combatants killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int EnemyKIA { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of friendlies abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int FriendlyAbd { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of friendlies in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int FriendlyDet { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of friendlies killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int FriendlyKIA { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of friendlies wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int FriendlyWound { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Host Nation members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int HostNatAbd { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Host Nation members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int HostNatDet { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Host Nation members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int HostNatKIA { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of Host Nation members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int HostNatWound { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side A members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideAAbd { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side A members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideADet { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side A members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideAKIA { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side A members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideAWound { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side B members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideBAbd { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side B members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideBDet { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side B members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideBKIA { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of side B members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int SideBWound { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The name of the target.  The target may be an individual, an entity, or a country/region.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Target { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetTargetBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetTargetArray() { return __p.__vector_as_array<byte>(98); }
  /// A description of the event.
  /// Example: /// Example: Example_Description
  /// Constraints: Minimum length = 0, Maximum length = 4096
  public string EventDescription { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventDescriptionBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetEventDescriptionBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetEventDescriptionArray() { return __p.__vector_as_array<byte>(100); }
  /// The type of event (e.g.  Military, Natural, Political, Social, etc.).
  /// Example: /// Example: Military
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string EventType { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventTypeBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetEventTypeArray() { return __p.__vector_as_array<byte>(102); }
  /// The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
  /// Example: /// Example: IED Explosion
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string TypeOfAttack { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeOfAttackBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetTypeOfAttackBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetTypeOfAttackArray() { return __p.__vector_as_array<byte>(104); }
  /// Flag indicating that this attack was of a complex or coordinated nature.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool ComplexAttack { get { int o = __p.__offset(106); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
  /// Example: /// Example: NUMBER-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string IdNumber { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdNumberBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetIdNumberBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetIdNumberArray() { return __p.__vector_as_array<byte>(108); }
  /// Estimate of the confidence that this event occurred.
  /// Example: /// Example: 13
  /// Constraints: No constraints specified.
  public int Confidence { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Estimate of the accuracy that this event occurred as described/reported.
  /// Example: /// Example: 13
  /// Constraints: No constraints specified.
  public int Accuracy { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
  /// 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int Clarity { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
  /// Example: /// Example: CAMEO_CODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CameoCode { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameoCodeBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetCameoCodeBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetCameoCodeArray() { return __p.__vector_as_array<byte>(116); }
  /// CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  /// Example: /// Example: Example_cameoBaseCode
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CameoBaseCode { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameoBaseCodeBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetCameoBaseCodeBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetCameoBaseCodeArray() { return __p.__vector_as_array<byte>(118); }
  /// Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  /// Example: /// Example: Example_cameoRootCode
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CameoRootCode { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameoRootCodeBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetCameoRootCodeBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetCameoRootCodeArray() { return __p.__vector_as_array<byte>(120); }
  /// Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
  /// Example: /// Example: 9.32
  /// Constraints: No constraints specified.
  public double Goldstein { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The source of the document or report.
  /// Example: /// Example: Example_documentSource
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string DocumentSource { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDocumentSourceBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetDocumentSourceBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetDocumentSourceArray() { return __p.__vector_as_array<byte>(124); }
  /// The filename of the document or report.
  /// Example: /// Example: Example_documentFilename
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string DocumentFilename { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDocumentFilenameBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetDocumentFilenameBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetDocumentFilenameArray() { return __p.__vector_as_array<byte>(126); }
  /// Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool HasAttachment { get { int o = __p.__offset(128); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public long Filesize { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ChecksumValue { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChecksumValueBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetChecksumValueBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetChecksumValueArray() { return __p.__vector_as_array<byte>(132); }
  /// The reporting unit.
  /// Example: /// Example: Unit_1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string RepUnit { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRepUnitBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetRepUnitBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetRepUnitArray() { return __p.__vector_as_array<byte>(134); }
  /// The reporting unit type.
  /// Example: /// Example: Example_repUnitType
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string RepUnitType { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRepUnitTypeBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetRepUnitTypeBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetRepUnitTypeArray() { return __p.__vector_as_array<byte>(136); }
  /// The activity the unit was engaged in.
  /// Example: /// Example: Example_Activity
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string RepUnitActivity { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRepUnitActivityBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetRepUnitActivityBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetRepUnitActivityArray() { return __p.__vector_as_array<byte>(138); }
  /// This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int NumMentions { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int NumSources { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int NumArticles { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
  /// Example: /// Example: 8.23
  /// Constraints: No constraints specified.
  public double AvgTone { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
  /// Example: /// Example: Example_URL
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string SourceUrl { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceUrlBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetSourceUrlBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetSourceUrlArray() { return __p.__vector_as_array<byte>(148); }
  /// Related document ids.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string RelatedDocs(int j) { int o = __p.__offset(150); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RelatedDocsLength { get { int o = __p.__offset(150); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A summary of the event.
  /// Example: /// Example: Example_Summary
  /// Constraints: Minimum length = 0, Maximum length = 4096
  public string Summary { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetSummaryBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetSummaryArray() { return __p.__vector_as_array<byte>(152); }
  /// Notes related to the documents or event.
  /// Example: /// Example: Example_Notes
  /// Constraints: Minimum length = 0, Maximum length = 4096
  public string Notes { get { int o = __p.__offset(154); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(154, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(154); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(154); }
  /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(156); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: No constraints specified.
  public string CreatedBy { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(158); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(160); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(162); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SigAct_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(164); return o != 0 ? (SigAct_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SigAct_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(166); }

  public static Offset<SigAct_Abridged> CreateSigAct_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset sourceLanguageOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset cityOffset = default(StringOffset),
      StringOffset districtOffset = default(StringOffset),
      StringOffset provinceOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      StringOffset milgridOffset = default(StringOffset),
      StringOffset theaterOffset = default(StringOffset),
      StringOffset atextOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atypeOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      StringOffset eventStartOffset = default(StringOffset),
      StringOffset eventEndOffset = default(StringOffset),
      StringOffset reportDateOffset = default(StringOffset),
      VectorOffset actorsOffset = default(VectorOffset),
      int civAbd = 0,
      int civDet = 0,
      int civKIA = 0,
      int civWound = 0,
      int coalAbd = 0,
      int coalDet = 0,
      int coalKIA = 0,
      int coalWound = 0,
      int enemyAbd = 0,
      int enemyDet = 0,
      int enemyKIA = 0,
      int friendlyAbd = 0,
      int friendlyDet = 0,
      int friendlyKIA = 0,
      int friendlyWound = 0,
      int hostNatAbd = 0,
      int hostNatDet = 0,
      int hostNatKIA = 0,
      int hostNatWound = 0,
      int sideAAbd = 0,
      int sideADet = 0,
      int sideAKIA = 0,
      int sideAWound = 0,
      int sideBAbd = 0,
      int sideBDet = 0,
      int sideBKIA = 0,
      int sideBWound = 0,
      StringOffset targetOffset = default(StringOffset),
      StringOffset eventDescriptionOffset = default(StringOffset),
      StringOffset eventTypeOffset = default(StringOffset),
      StringOffset typeOfAttackOffset = default(StringOffset),
      bool complexAttack = false,
      StringOffset idNumberOffset = default(StringOffset),
      int confidence = 0,
      int accuracy = 0,
      int clarity = 0,
      StringOffset cameoCodeOffset = default(StringOffset),
      StringOffset cameoBaseCodeOffset = default(StringOffset),
      StringOffset cameoRootCodeOffset = default(StringOffset),
      double goldstein = 0.0,
      StringOffset documentSourceOffset = default(StringOffset),
      StringOffset documentFilenameOffset = default(StringOffset),
      bool hasAttachment = false,
      long filesize = 0,
      StringOffset checksumValueOffset = default(StringOffset),
      StringOffset repUnitOffset = default(StringOffset),
      StringOffset repUnitTypeOffset = default(StringOffset),
      StringOffset repUnitActivityOffset = default(StringOffset),
      int numMentions = 0,
      int numSources = 0,
      int numArticles = 0,
      double avgTone = 0.0,
      StringOffset sourceUrlOffset = default(StringOffset),
      VectorOffset relatedDocsOffset = default(VectorOffset),
      StringOffset summaryOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      SigAct_Abridged_dataMode_Enum dataMode = SigAct_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(82);
    SigAct_Abridged.AddAvgTone(builder, avgTone);
    SigAct_Abridged.AddFilesize(builder, filesize);
    SigAct_Abridged.AddGoldstein(builder, goldstein);
    SigAct_Abridged.AddLon(builder, lon);
    SigAct_Abridged.AddLat(builder, lat);
    SigAct_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    SigAct_Abridged.AddOrigin(builder, originOffset);
    SigAct_Abridged.AddSource(builder, sourceOffset);
    SigAct_Abridged.AddCreatedBy(builder, createdByOffset);
    SigAct_Abridged.AddCreatedAt(builder, createdAtOffset);
    SigAct_Abridged.AddNotes(builder, notesOffset);
    SigAct_Abridged.AddSummary(builder, summaryOffset);
    SigAct_Abridged.AddRelatedDocs(builder, relatedDocsOffset);
    SigAct_Abridged.AddSourceUrl(builder, sourceUrlOffset);
    SigAct_Abridged.AddNumArticles(builder, numArticles);
    SigAct_Abridged.AddNumSources(builder, numSources);
    SigAct_Abridged.AddNumMentions(builder, numMentions);
    SigAct_Abridged.AddRepUnitActivity(builder, repUnitActivityOffset);
    SigAct_Abridged.AddRepUnitType(builder, repUnitTypeOffset);
    SigAct_Abridged.AddRepUnit(builder, repUnitOffset);
    SigAct_Abridged.AddChecksumValue(builder, checksumValueOffset);
    SigAct_Abridged.AddDocumentFilename(builder, documentFilenameOffset);
    SigAct_Abridged.AddDocumentSource(builder, documentSourceOffset);
    SigAct_Abridged.AddCameoRootCode(builder, cameoRootCodeOffset);
    SigAct_Abridged.AddCameoBaseCode(builder, cameoBaseCodeOffset);
    SigAct_Abridged.AddCameoCode(builder, cameoCodeOffset);
    SigAct_Abridged.AddClarity(builder, clarity);
    SigAct_Abridged.AddAccuracy(builder, accuracy);
    SigAct_Abridged.AddConfidence(builder, confidence);
    SigAct_Abridged.AddIdNumber(builder, idNumberOffset);
    SigAct_Abridged.AddTypeOfAttack(builder, typeOfAttackOffset);
    SigAct_Abridged.AddEventType(builder, eventTypeOffset);
    SigAct_Abridged.AddEventDescription(builder, eventDescriptionOffset);
    SigAct_Abridged.AddTarget(builder, targetOffset);
    SigAct_Abridged.AddSideBWound(builder, sideBWound);
    SigAct_Abridged.AddSideBKIA(builder, sideBKIA);
    SigAct_Abridged.AddSideBDet(builder, sideBDet);
    SigAct_Abridged.AddSideBAbd(builder, sideBAbd);
    SigAct_Abridged.AddSideAWound(builder, sideAWound);
    SigAct_Abridged.AddSideAKIA(builder, sideAKIA);
    SigAct_Abridged.AddSideADet(builder, sideADet);
    SigAct_Abridged.AddSideAAbd(builder, sideAAbd);
    SigAct_Abridged.AddHostNatWound(builder, hostNatWound);
    SigAct_Abridged.AddHostNatKIA(builder, hostNatKIA);
    SigAct_Abridged.AddHostNatDet(builder, hostNatDet);
    SigAct_Abridged.AddHostNatAbd(builder, hostNatAbd);
    SigAct_Abridged.AddFriendlyWound(builder, friendlyWound);
    SigAct_Abridged.AddFriendlyKIA(builder, friendlyKIA);
    SigAct_Abridged.AddFriendlyDet(builder, friendlyDet);
    SigAct_Abridged.AddFriendlyAbd(builder, friendlyAbd);
    SigAct_Abridged.AddEnemyKIA(builder, enemyKIA);
    SigAct_Abridged.AddEnemyDet(builder, enemyDet);
    SigAct_Abridged.AddEnemyAbd(builder, enemyAbd);
    SigAct_Abridged.AddCoalWound(builder, coalWound);
    SigAct_Abridged.AddCoalKIA(builder, coalKIA);
    SigAct_Abridged.AddCoalDet(builder, coalDet);
    SigAct_Abridged.AddCoalAbd(builder, coalAbd);
    SigAct_Abridged.AddCivWound(builder, civWound);
    SigAct_Abridged.AddCivKIA(builder, civKIA);
    SigAct_Abridged.AddCivDet(builder, civDet);
    SigAct_Abridged.AddCivAbd(builder, civAbd);
    SigAct_Abridged.AddActors(builder, actorsOffset);
    SigAct_Abridged.AddReportDate(builder, reportDateOffset);
    SigAct_Abridged.AddEventEnd(builder, eventEndOffset);
    SigAct_Abridged.AddEventStart(builder, eventStartOffset);
    SigAct_Abridged.AddAsrid(builder, asrid);
    SigAct_Abridged.AddAndims(builder, andims);
    SigAct_Abridged.AddAtype(builder, atypeOffset);
    SigAct_Abridged.AddAgjson(builder, agjsonOffset);
    SigAct_Abridged.AddAtext(builder, atextOffset);
    SigAct_Abridged.AddTheater(builder, theaterOffset);
    SigAct_Abridged.AddMilgrid(builder, milgridOffset);
    SigAct_Abridged.AddProvince(builder, provinceOffset);
    SigAct_Abridged.AddDistrict(builder, districtOffset);
    SigAct_Abridged.AddCity(builder, cityOffset);
    SigAct_Abridged.AddCountryCode(builder, countryCodeOffset);
    SigAct_Abridged.AddSourceLanguage(builder, sourceLanguageOffset);
    SigAct_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    SigAct_Abridged.AddId(builder, idOffset);
    SigAct_Abridged.AddDataMode(builder, dataMode);
    SigAct_Abridged.AddHasAttachment(builder, hasAttachment);
    SigAct_Abridged.AddComplexAttack(builder, complexAttack);
    return SigAct_Abridged.EndSigAct_Abridged(builder);
  }

  public static void StartSigAct_Abridged(FlatBufferBuilder builder) { builder.StartTable(82); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSourceLanguage(FlatBufferBuilder builder, StringOffset sourceLanguageOffset) { builder.AddOffset(2, sourceLanguageOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(3, countryCodeOffset.Value, 0); }
  public static void AddCity(FlatBufferBuilder builder, StringOffset cityOffset) { builder.AddOffset(4, cityOffset.Value, 0); }
  public static void AddDistrict(FlatBufferBuilder builder, StringOffset districtOffset) { builder.AddOffset(5, districtOffset.Value, 0); }
  public static void AddProvince(FlatBufferBuilder builder, StringOffset provinceOffset) { builder.AddOffset(6, provinceOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(7, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(8, lon, 0.0); }
  public static void AddMilgrid(FlatBufferBuilder builder, StringOffset milgridOffset) { builder.AddOffset(9, milgridOffset.Value, 0); }
  public static void AddTheater(FlatBufferBuilder builder, StringOffset theaterOffset) { builder.AddOffset(10, theaterOffset.Value, 0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(11, atextOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(12, agjsonOffset.Value, 0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(13, atypeOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(14, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(15, asrid, 0); }
  public static void AddEventStart(FlatBufferBuilder builder, StringOffset eventStartOffset) { builder.AddOffset(16, eventStartOffset.Value, 0); }
  public static void AddEventEnd(FlatBufferBuilder builder, StringOffset eventEndOffset) { builder.AddOffset(17, eventEndOffset.Value, 0); }
  public static void AddReportDate(FlatBufferBuilder builder, StringOffset reportDateOffset) { builder.AddOffset(18, reportDateOffset.Value, 0); }
  public static void AddActors(FlatBufferBuilder builder, VectorOffset actorsOffset) { builder.AddOffset(19, actorsOffset.Value, 0); }
  public static VectorOffset CreateActorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCivAbd(FlatBufferBuilder builder, int civAbd) { builder.AddInt(20, civAbd, 0); }
  public static void AddCivDet(FlatBufferBuilder builder, int civDet) { builder.AddInt(21, civDet, 0); }
  public static void AddCivKIA(FlatBufferBuilder builder, int civKIA) { builder.AddInt(22, civKIA, 0); }
  public static void AddCivWound(FlatBufferBuilder builder, int civWound) { builder.AddInt(23, civWound, 0); }
  public static void AddCoalAbd(FlatBufferBuilder builder, int coalAbd) { builder.AddInt(24, coalAbd, 0); }
  public static void AddCoalDet(FlatBufferBuilder builder, int coalDet) { builder.AddInt(25, coalDet, 0); }
  public static void AddCoalKIA(FlatBufferBuilder builder, int coalKIA) { builder.AddInt(26, coalKIA, 0); }
  public static void AddCoalWound(FlatBufferBuilder builder, int coalWound) { builder.AddInt(27, coalWound, 0); }
  public static void AddEnemyAbd(FlatBufferBuilder builder, int enemyAbd) { builder.AddInt(28, enemyAbd, 0); }
  public static void AddEnemyDet(FlatBufferBuilder builder, int enemyDet) { builder.AddInt(29, enemyDet, 0); }
  public static void AddEnemyKIA(FlatBufferBuilder builder, int enemyKIA) { builder.AddInt(30, enemyKIA, 0); }
  public static void AddFriendlyAbd(FlatBufferBuilder builder, int friendlyAbd) { builder.AddInt(31, friendlyAbd, 0); }
  public static void AddFriendlyDet(FlatBufferBuilder builder, int friendlyDet) { builder.AddInt(32, friendlyDet, 0); }
  public static void AddFriendlyKIA(FlatBufferBuilder builder, int friendlyKIA) { builder.AddInt(33, friendlyKIA, 0); }
  public static void AddFriendlyWound(FlatBufferBuilder builder, int friendlyWound) { builder.AddInt(34, friendlyWound, 0); }
  public static void AddHostNatAbd(FlatBufferBuilder builder, int hostNatAbd) { builder.AddInt(35, hostNatAbd, 0); }
  public static void AddHostNatDet(FlatBufferBuilder builder, int hostNatDet) { builder.AddInt(36, hostNatDet, 0); }
  public static void AddHostNatKIA(FlatBufferBuilder builder, int hostNatKIA) { builder.AddInt(37, hostNatKIA, 0); }
  public static void AddHostNatWound(FlatBufferBuilder builder, int hostNatWound) { builder.AddInt(38, hostNatWound, 0); }
  public static void AddSideAAbd(FlatBufferBuilder builder, int sideAAbd) { builder.AddInt(39, sideAAbd, 0); }
  public static void AddSideADet(FlatBufferBuilder builder, int sideADet) { builder.AddInt(40, sideADet, 0); }
  public static void AddSideAKIA(FlatBufferBuilder builder, int sideAKIA) { builder.AddInt(41, sideAKIA, 0); }
  public static void AddSideAWound(FlatBufferBuilder builder, int sideAWound) { builder.AddInt(42, sideAWound, 0); }
  public static void AddSideBAbd(FlatBufferBuilder builder, int sideBAbd) { builder.AddInt(43, sideBAbd, 0); }
  public static void AddSideBDet(FlatBufferBuilder builder, int sideBDet) { builder.AddInt(44, sideBDet, 0); }
  public static void AddSideBKIA(FlatBufferBuilder builder, int sideBKIA) { builder.AddInt(45, sideBKIA, 0); }
  public static void AddSideBWound(FlatBufferBuilder builder, int sideBWound) { builder.AddInt(46, sideBWound, 0); }
  public static void AddTarget(FlatBufferBuilder builder, StringOffset targetOffset) { builder.AddOffset(47, targetOffset.Value, 0); }
  public static void AddEventDescription(FlatBufferBuilder builder, StringOffset eventDescriptionOffset) { builder.AddOffset(48, eventDescriptionOffset.Value, 0); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(49, eventTypeOffset.Value, 0); }
  public static void AddTypeOfAttack(FlatBufferBuilder builder, StringOffset typeOfAttackOffset) { builder.AddOffset(50, typeOfAttackOffset.Value, 0); }
  public static void AddComplexAttack(FlatBufferBuilder builder, bool complexAttack) { builder.AddBool(51, complexAttack, false); }
  public static void AddIdNumber(FlatBufferBuilder builder, StringOffset idNumberOffset) { builder.AddOffset(52, idNumberOffset.Value, 0); }
  public static void AddConfidence(FlatBufferBuilder builder, int confidence) { builder.AddInt(53, confidence, 0); }
  public static void AddAccuracy(FlatBufferBuilder builder, int accuracy) { builder.AddInt(54, accuracy, 0); }
  public static void AddClarity(FlatBufferBuilder builder, int clarity) { builder.AddInt(55, clarity, 0); }
  public static void AddCameoCode(FlatBufferBuilder builder, StringOffset cameoCodeOffset) { builder.AddOffset(56, cameoCodeOffset.Value, 0); }
  public static void AddCameoBaseCode(FlatBufferBuilder builder, StringOffset cameoBaseCodeOffset) { builder.AddOffset(57, cameoBaseCodeOffset.Value, 0); }
  public static void AddCameoRootCode(FlatBufferBuilder builder, StringOffset cameoRootCodeOffset) { builder.AddOffset(58, cameoRootCodeOffset.Value, 0); }
  public static void AddGoldstein(FlatBufferBuilder builder, double goldstein) { builder.AddDouble(59, goldstein, 0.0); }
  public static void AddDocumentSource(FlatBufferBuilder builder, StringOffset documentSourceOffset) { builder.AddOffset(60, documentSourceOffset.Value, 0); }
  public static void AddDocumentFilename(FlatBufferBuilder builder, StringOffset documentFilenameOffset) { builder.AddOffset(61, documentFilenameOffset.Value, 0); }
  public static void AddHasAttachment(FlatBufferBuilder builder, bool hasAttachment) { builder.AddBool(62, hasAttachment, false); }
  public static void AddFilesize(FlatBufferBuilder builder, long filesize) { builder.AddLong(63, filesize, 0); }
  public static void AddChecksumValue(FlatBufferBuilder builder, StringOffset checksumValueOffset) { builder.AddOffset(64, checksumValueOffset.Value, 0); }
  public static void AddRepUnit(FlatBufferBuilder builder, StringOffset repUnitOffset) { builder.AddOffset(65, repUnitOffset.Value, 0); }
  public static void AddRepUnitType(FlatBufferBuilder builder, StringOffset repUnitTypeOffset) { builder.AddOffset(66, repUnitTypeOffset.Value, 0); }
  public static void AddRepUnitActivity(FlatBufferBuilder builder, StringOffset repUnitActivityOffset) { builder.AddOffset(67, repUnitActivityOffset.Value, 0); }
  public static void AddNumMentions(FlatBufferBuilder builder, int numMentions) { builder.AddInt(68, numMentions, 0); }
  public static void AddNumSources(FlatBufferBuilder builder, int numSources) { builder.AddInt(69, numSources, 0); }
  public static void AddNumArticles(FlatBufferBuilder builder, int numArticles) { builder.AddInt(70, numArticles, 0); }
  public static void AddAvgTone(FlatBufferBuilder builder, double avgTone) { builder.AddDouble(71, avgTone, 0.0); }
  public static void AddSourceUrl(FlatBufferBuilder builder, StringOffset sourceUrlOffset) { builder.AddOffset(72, sourceUrlOffset.Value, 0); }
  public static void AddRelatedDocs(FlatBufferBuilder builder, VectorOffset relatedDocsOffset) { builder.AddOffset(73, relatedDocsOffset.Value, 0); }
  public static VectorOffset CreateRelatedDocsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRelatedDocsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelatedDocsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRelatedDocsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRelatedDocsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSummary(FlatBufferBuilder builder, StringOffset summaryOffset) { builder.AddOffset(74, summaryOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(75, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(76, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(77, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(78, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(79, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SigAct_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(80, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(81, origNetworkOffset.Value, 0); }
  public static Offset<SigAct_Abridged> EndSigAct_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SigAct_Abridged>(o);
  }
  public static void FinishSigAct_AbridgedBuffer(FlatBufferBuilder builder, Offset<SigAct_Abridged> offset) { builder.Finish(offset.Value, "SIGA"); }
  public static void FinishSizePrefixedSigAct_AbridgedBuffer(FlatBufferBuilder builder, Offset<SigAct_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SIGA"); }
  public SigAct_AbridgedT UnPack() {
    var _o = new SigAct_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SigAct_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SourceLanguage = this.SourceLanguage;
    _o.CountryCode = this.CountryCode;
    _o.City = this.City;
    _o.District = this.District;
    _o.Province = this.Province;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Milgrid = this.Milgrid;
    _o.Theater = this.Theater;
    _o.Atext = this.Atext;
    _o.Agjson = this.Agjson;
    _o.Atype = this.Atype;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.EventStart = this.EventStart;
    _o.EventEnd = this.EventEnd;
    _o.ReportDate = this.ReportDate;
    _o.Actors = new List<string>();
    for (var _j = 0; _j < this.ActorsLength; ++_j) {_o.Actors.Add(this.Actors(_j));}
    _o.CivAbd = this.CivAbd;
    _o.CivDet = this.CivDet;
    _o.CivKIA = this.CivKIA;
    _o.CivWound = this.CivWound;
    _o.CoalAbd = this.CoalAbd;
    _o.CoalDet = this.CoalDet;
    _o.CoalKIA = this.CoalKIA;
    _o.CoalWound = this.CoalWound;
    _o.EnemyAbd = this.EnemyAbd;
    _o.EnemyDet = this.EnemyDet;
    _o.EnemyKIA = this.EnemyKIA;
    _o.FriendlyAbd = this.FriendlyAbd;
    _o.FriendlyDet = this.FriendlyDet;
    _o.FriendlyKIA = this.FriendlyKIA;
    _o.FriendlyWound = this.FriendlyWound;
    _o.HostNatAbd = this.HostNatAbd;
    _o.HostNatDet = this.HostNatDet;
    _o.HostNatKIA = this.HostNatKIA;
    _o.HostNatWound = this.HostNatWound;
    _o.SideAAbd = this.SideAAbd;
    _o.SideADet = this.SideADet;
    _o.SideAKIA = this.SideAKIA;
    _o.SideAWound = this.SideAWound;
    _o.SideBAbd = this.SideBAbd;
    _o.SideBDet = this.SideBDet;
    _o.SideBKIA = this.SideBKIA;
    _o.SideBWound = this.SideBWound;
    _o.Target = this.Target;
    _o.EventDescription = this.EventDescription;
    _o.EventType = this.EventType;
    _o.TypeOfAttack = this.TypeOfAttack;
    _o.ComplexAttack = this.ComplexAttack;
    _o.IdNumber = this.IdNumber;
    _o.Confidence = this.Confidence;
    _o.Accuracy = this.Accuracy;
    _o.Clarity = this.Clarity;
    _o.CameoCode = this.CameoCode;
    _o.CameoBaseCode = this.CameoBaseCode;
    _o.CameoRootCode = this.CameoRootCode;
    _o.Goldstein = this.Goldstein;
    _o.DocumentSource = this.DocumentSource;
    _o.DocumentFilename = this.DocumentFilename;
    _o.HasAttachment = this.HasAttachment;
    _o.Filesize = this.Filesize;
    _o.ChecksumValue = this.ChecksumValue;
    _o.RepUnit = this.RepUnit;
    _o.RepUnitType = this.RepUnitType;
    _o.RepUnitActivity = this.RepUnitActivity;
    _o.NumMentions = this.NumMentions;
    _o.NumSources = this.NumSources;
    _o.NumArticles = this.NumArticles;
    _o.AvgTone = this.AvgTone;
    _o.SourceUrl = this.SourceUrl;
    _o.RelatedDocs = new List<string>();
    for (var _j = 0; _j < this.RelatedDocsLength; ++_j) {_o.RelatedDocs.Add(this.RelatedDocs(_j));}
    _o.Summary = this.Summary;
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<SigAct_Abridged> Pack(FlatBufferBuilder builder, SigAct_AbridgedT _o) {
    if (_o == null) return default(Offset<SigAct_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _sourceLanguage = _o.SourceLanguage == null ? default(StringOffset) : builder.CreateString(_o.SourceLanguage);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _city = _o.City == null ? default(StringOffset) : builder.CreateString(_o.City);
    var _district = _o.District == null ? default(StringOffset) : builder.CreateString(_o.District);
    var _province = _o.Province == null ? default(StringOffset) : builder.CreateString(_o.Province);
    var _milgrid = _o.Milgrid == null ? default(StringOffset) : builder.CreateString(_o.Milgrid);
    var _theater = _o.Theater == null ? default(StringOffset) : builder.CreateString(_o.Theater);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _eventStart = _o.EventStart == null ? default(StringOffset) : builder.CreateString(_o.EventStart);
    var _eventEnd = _o.EventEnd == null ? default(StringOffset) : builder.CreateString(_o.EventEnd);
    var _reportDate = _o.ReportDate == null ? default(StringOffset) : builder.CreateString(_o.ReportDate);
    var _actors = default(VectorOffset);
    if (_o.Actors != null) {
      var __actors = new StringOffset[_o.Actors.Count];
      for (var _j = 0; _j < __actors.Length; ++_j) { __actors[_j] = builder.CreateString(_o.Actors[_j]); }
      _actors = CreateActorsVector(builder, __actors);
    }
    var _target = _o.Target == null ? default(StringOffset) : builder.CreateString(_o.Target);
    var _eventDescription = _o.EventDescription == null ? default(StringOffset) : builder.CreateString(_o.EventDescription);
    var _eventType = _o.EventType == null ? default(StringOffset) : builder.CreateString(_o.EventType);
    var _typeOfAttack = _o.TypeOfAttack == null ? default(StringOffset) : builder.CreateString(_o.TypeOfAttack);
    var _idNumber = _o.IdNumber == null ? default(StringOffset) : builder.CreateString(_o.IdNumber);
    var _cameoCode = _o.CameoCode == null ? default(StringOffset) : builder.CreateString(_o.CameoCode);
    var _cameoBaseCode = _o.CameoBaseCode == null ? default(StringOffset) : builder.CreateString(_o.CameoBaseCode);
    var _cameoRootCode = _o.CameoRootCode == null ? default(StringOffset) : builder.CreateString(_o.CameoRootCode);
    var _documentSource = _o.DocumentSource == null ? default(StringOffset) : builder.CreateString(_o.DocumentSource);
    var _documentFilename = _o.DocumentFilename == null ? default(StringOffset) : builder.CreateString(_o.DocumentFilename);
    var _checksumValue = _o.ChecksumValue == null ? default(StringOffset) : builder.CreateString(_o.ChecksumValue);
    var _repUnit = _o.RepUnit == null ? default(StringOffset) : builder.CreateString(_o.RepUnit);
    var _repUnitType = _o.RepUnitType == null ? default(StringOffset) : builder.CreateString(_o.RepUnitType);
    var _repUnitActivity = _o.RepUnitActivity == null ? default(StringOffset) : builder.CreateString(_o.RepUnitActivity);
    var _sourceUrl = _o.SourceUrl == null ? default(StringOffset) : builder.CreateString(_o.SourceUrl);
    var _relatedDocs = default(VectorOffset);
    if (_o.RelatedDocs != null) {
      var __relatedDocs = new StringOffset[_o.RelatedDocs.Count];
      for (var _j = 0; _j < __relatedDocs.Length; ++_j) { __relatedDocs[_j] = builder.CreateString(_o.RelatedDocs[_j]); }
      _relatedDocs = CreateRelatedDocsVector(builder, __relatedDocs);
    }
    var _summary = _o.Summary == null ? default(StringOffset) : builder.CreateString(_o.Summary);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSigAct_Abridged(
      builder,
      _id,
      _classificationMarking,
      _sourceLanguage,
      _countryCode,
      _city,
      _district,
      _province,
      _o.Lat,
      _o.Lon,
      _milgrid,
      _theater,
      _atext,
      _agjson,
      _atype,
      _o.Andims,
      _o.Asrid,
      _eventStart,
      _eventEnd,
      _reportDate,
      _actors,
      _o.CivAbd,
      _o.CivDet,
      _o.CivKIA,
      _o.CivWound,
      _o.CoalAbd,
      _o.CoalDet,
      _o.CoalKIA,
      _o.CoalWound,
      _o.EnemyAbd,
      _o.EnemyDet,
      _o.EnemyKIA,
      _o.FriendlyAbd,
      _o.FriendlyDet,
      _o.FriendlyKIA,
      _o.FriendlyWound,
      _o.HostNatAbd,
      _o.HostNatDet,
      _o.HostNatKIA,
      _o.HostNatWound,
      _o.SideAAbd,
      _o.SideADet,
      _o.SideAKIA,
      _o.SideAWound,
      _o.SideBAbd,
      _o.SideBDet,
      _o.SideBKIA,
      _o.SideBWound,
      _target,
      _eventDescription,
      _eventType,
      _typeOfAttack,
      _o.ComplexAttack,
      _idNumber,
      _o.Confidence,
      _o.Accuracy,
      _o.Clarity,
      _cameoCode,
      _cameoBaseCode,
      _cameoRootCode,
      _o.Goldstein,
      _documentSource,
      _documentFilename,
      _o.HasAttachment,
      _o.Filesize,
      _checksumValue,
      _repUnit,
      _repUnitType,
      _repUnitActivity,
      _o.NumMentions,
      _o.NumSources,
      _o.NumArticles,
      _o.AvgTone,
      _sourceUrl,
      _relatedDocs,
      _summary,
      _notes,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class SigAct_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string SourceLanguage { get; set; }
  public string CountryCode { get; set; }
  public string City { get; set; }
  public string District { get; set; }
  public string Province { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string Milgrid { get; set; }
  public string Theater { get; set; }
  public string Atext { get; set; }
  public string Agjson { get; set; }
  public string Atype { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public string EventStart { get; set; }
  public string EventEnd { get; set; }
  public string ReportDate { get; set; }
  public List<string> Actors { get; set; }
  public int CivAbd { get; set; }
  public int CivDet { get; set; }
  public int CivKIA { get; set; }
  public int CivWound { get; set; }
  public int CoalAbd { get; set; }
  public int CoalDet { get; set; }
  public int CoalKIA { get; set; }
  public int CoalWound { get; set; }
  public int EnemyAbd { get; set; }
  public int EnemyDet { get; set; }
  public int EnemyKIA { get; set; }
  public int FriendlyAbd { get; set; }
  public int FriendlyDet { get; set; }
  public int FriendlyKIA { get; set; }
  public int FriendlyWound { get; set; }
  public int HostNatAbd { get; set; }
  public int HostNatDet { get; set; }
  public int HostNatKIA { get; set; }
  public int HostNatWound { get; set; }
  public int SideAAbd { get; set; }
  public int SideADet { get; set; }
  public int SideAKIA { get; set; }
  public int SideAWound { get; set; }
  public int SideBAbd { get; set; }
  public int SideBDet { get; set; }
  public int SideBKIA { get; set; }
  public int SideBWound { get; set; }
  public string Target { get; set; }
  public string EventDescription { get; set; }
  public string EventType { get; set; }
  public string TypeOfAttack { get; set; }
  public bool ComplexAttack { get; set; }
  public string IdNumber { get; set; }
  public int Confidence { get; set; }
  public int Accuracy { get; set; }
  public int Clarity { get; set; }
  public string CameoCode { get; set; }
  public string CameoBaseCode { get; set; }
  public string CameoRootCode { get; set; }
  public double Goldstein { get; set; }
  public string DocumentSource { get; set; }
  public string DocumentFilename { get; set; }
  public bool HasAttachment { get; set; }
  public long Filesize { get; set; }
  public string ChecksumValue { get; set; }
  public string RepUnit { get; set; }
  public string RepUnitType { get; set; }
  public string RepUnitActivity { get; set; }
  public int NumMentions { get; set; }
  public int NumSources { get; set; }
  public int NumArticles { get; set; }
  public double AvgTone { get; set; }
  public string SourceUrl { get; set; }
  public List<string> RelatedDocs { get; set; }
  public string Summary { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public SigAct_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public SigAct_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.SourceLanguage = null;
    this.CountryCode = null;
    this.City = null;
    this.District = null;
    this.Province = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Milgrid = null;
    this.Theater = null;
    this.Atext = null;
    this.Agjson = null;
    this.Atype = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.EventStart = null;
    this.EventEnd = null;
    this.ReportDate = null;
    this.Actors = null;
    this.CivAbd = 0;
    this.CivDet = 0;
    this.CivKIA = 0;
    this.CivWound = 0;
    this.CoalAbd = 0;
    this.CoalDet = 0;
    this.CoalKIA = 0;
    this.CoalWound = 0;
    this.EnemyAbd = 0;
    this.EnemyDet = 0;
    this.EnemyKIA = 0;
    this.FriendlyAbd = 0;
    this.FriendlyDet = 0;
    this.FriendlyKIA = 0;
    this.FriendlyWound = 0;
    this.HostNatAbd = 0;
    this.HostNatDet = 0;
    this.HostNatKIA = 0;
    this.HostNatWound = 0;
    this.SideAAbd = 0;
    this.SideADet = 0;
    this.SideAKIA = 0;
    this.SideAWound = 0;
    this.SideBAbd = 0;
    this.SideBDet = 0;
    this.SideBKIA = 0;
    this.SideBWound = 0;
    this.Target = null;
    this.EventDescription = null;
    this.EventType = null;
    this.TypeOfAttack = null;
    this.ComplexAttack = false;
    this.IdNumber = null;
    this.Confidence = 0;
    this.Accuracy = 0;
    this.Clarity = 0;
    this.CameoCode = null;
    this.CameoBaseCode = null;
    this.CameoRootCode = null;
    this.Goldstein = 0.0;
    this.DocumentSource = null;
    this.DocumentFilename = null;
    this.HasAttachment = false;
    this.Filesize = 0;
    this.ChecksumValue = null;
    this.RepUnit = null;
    this.RepUnitType = null;
    this.RepUnitActivity = null;
    this.NumMentions = 0;
    this.NumSources = 0;
    this.NumArticles = 0;
    this.AvgTone = 0.0;
    this.SourceUrl = null;
    this.RelatedDocs = null;
    this.Summary = null;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = SigAct_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static SigAct_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return SigAct_Abridged.GetRootAsSigAct_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SigAct_Abridged.FinishSigAct_AbridgedBuffer(fbb, SigAct_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SigAct_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*SourceLanguage*/, false)
      && verifier.VerifyString(tablePos, 10 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*City*/, false)
      && verifier.VerifyString(tablePos, 14 /*District*/, false)
      && verifier.VerifyString(tablePos, 16 /*Province*/, false)
      && verifier.VerifyField(tablePos, 18 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*Milgrid*/, false)
      && verifier.VerifyString(tablePos, 24 /*Theater*/, false)
      && verifier.VerifyString(tablePos, 26 /*Atext*/, false)
      && verifier.VerifyString(tablePos, 28 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 30 /*Atype*/, false)
      && verifier.VerifyField(tablePos, 32 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 36 /*EventStart*/, false)
      && verifier.VerifyString(tablePos, 38 /*EventEnd*/, false)
      && verifier.VerifyString(tablePos, 40 /*ReportDate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*Actors*/, false)
      && verifier.VerifyField(tablePos, 44 /*CivAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*CivDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*CivKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*CivWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*CoalAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*CoalDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*CoalKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*CoalWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*EnemyAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*EnemyDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*EnemyKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*FriendlyAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*FriendlyDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*FriendlyKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*FriendlyWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*HostNatAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*HostNatDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*HostNatKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*HostNatWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*SideAAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*SideADet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*SideAKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*SideAWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*SideBAbd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*SideBDet*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 94 /*SideBKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 96 /*SideBWound*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 98 /*Target*/, false)
      && verifier.VerifyString(tablePos, 100 /*EventDescription*/, false)
      && verifier.VerifyString(tablePos, 102 /*EventType*/, false)
      && verifier.VerifyString(tablePos, 104 /*TypeOfAttack*/, false)
      && verifier.VerifyField(tablePos, 106 /*ComplexAttack*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 108 /*IdNumber*/, false)
      && verifier.VerifyField(tablePos, 110 /*Confidence*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 112 /*Accuracy*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*Clarity*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 116 /*CameoCode*/, false)
      && verifier.VerifyString(tablePos, 118 /*CameoBaseCode*/, false)
      && verifier.VerifyString(tablePos, 120 /*CameoRootCode*/, false)
      && verifier.VerifyField(tablePos, 122 /*Goldstein*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 124 /*DocumentSource*/, false)
      && verifier.VerifyString(tablePos, 126 /*DocumentFilename*/, false)
      && verifier.VerifyField(tablePos, 128 /*HasAttachment*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 130 /*Filesize*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 132 /*ChecksumValue*/, false)
      && verifier.VerifyString(tablePos, 134 /*RepUnit*/, false)
      && verifier.VerifyString(tablePos, 136 /*RepUnitType*/, false)
      && verifier.VerifyString(tablePos, 138 /*RepUnitActivity*/, false)
      && verifier.VerifyField(tablePos, 140 /*NumMentions*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 142 /*NumSources*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 144 /*NumArticles*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 146 /*AvgTone*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 148 /*SourceUrl*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 150 /*RelatedDocs*/, false)
      && verifier.VerifyString(tablePos, 152 /*Summary*/, false)
      && verifier.VerifyString(tablePos, 154 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 156 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 158 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 160 /*Source*/, false)
      && verifier.VerifyString(tablePos, 162 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 164 /*DataMode*/, 1 /*SigAct_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 166 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
