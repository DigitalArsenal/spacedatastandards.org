// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
public struct IonoObservationElevation_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationElevation_Ingest GetRootAsIonoObservationElevation_Ingest(ByteBuffer _bb) { return GetRootAsIonoObservationElevation_Ingest(_bb, new IonoObservationElevation_Ingest()); }
  public static IonoObservationElevation_Ingest GetRootAsIonoObservationElevation_Ingest(ByteBuffer _bb, IonoObservationElevation_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IonoObservationElevation_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "IONO"); }
  public static bool VerifyIonoObservationElevation_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("IONO", false, IonoObservationElevation_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IonoObservationElevation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Notes for the elevation data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Notes { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(4); }
  /// Array of integers of the elevation array dimensions.
  /// Example: /// Example: [2, 3]
  /// Constraints: No constraints specified.
  public string Dimensions(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DimensionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of names for dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  public string DimensionName(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DimensionNameLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of incoming elevation at the receiver.
  /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
  /// Constraints: No constraints specified.
  public string Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<IonoObservationElevation_Ingest> CreateIonoObservationElevation_Ingest(FlatBufferBuilder builder,
      StringOffset notesOffset = default(StringOffset),
      VectorOffset dimensionsOffset = default(VectorOffset),
      VectorOffset dimensionNameOffset = default(VectorOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(4);
    IonoObservationElevation_Ingest.AddData(builder, dataOffset);
    IonoObservationElevation_Ingest.AddDimensionName(builder, dimensionNameOffset);
    IonoObservationElevation_Ingest.AddDimensions(builder, dimensionsOffset);
    IonoObservationElevation_Ingest.AddNotes(builder, notesOffset);
    return IonoObservationElevation_Ingest.EndIonoObservationElevation_Ingest(builder);
  }

  public static void StartIonoObservationElevation_Ingest(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(0, notesOffset.Value, 0); }
  public static void AddDimensions(FlatBufferBuilder builder, VectorOffset dimensionsOffset) { builder.AddOffset(1, dimensionsOffset.Value, 0); }
  public static VectorOffset CreateDimensionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDimensionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDimensionName(FlatBufferBuilder builder, VectorOffset dimensionNameOffset) { builder.AddOffset(2, dimensionNameOffset.Value, 0); }
  public static VectorOffset CreateDimensionNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDimensionNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<IonoObservationElevation_Ingest> EndIonoObservationElevation_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IonoObservationElevation_Ingest>(o);
  }
  public static void FinishIonoObservationElevation_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservationElevation_Ingest> offset) { builder.Finish(offset.Value, "IONO"); }
  public static void FinishSizePrefixedIonoObservationElevation_IngestBuffer(FlatBufferBuilder builder, Offset<IonoObservationElevation_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "IONO"); }
  public IonoObservationElevation_IngestT UnPack() {
    var _o = new IonoObservationElevation_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IonoObservationElevation_IngestT _o) {
    _o.Notes = this.Notes;
    _o.Dimensions = new List<string>();
    for (var _j = 0; _j < this.DimensionsLength; ++_j) {_o.Dimensions.Add(this.Dimensions(_j));}
    _o.DimensionName = new List<string>();
    for (var _j = 0; _j < this.DimensionNameLength; ++_j) {_o.DimensionName.Add(this.DimensionName(_j));}
    _o.Data = new List<string>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<IonoObservationElevation_Ingest> Pack(FlatBufferBuilder builder, IonoObservationElevation_IngestT _o) {
    if (_o == null) return default(Offset<IonoObservationElevation_Ingest>);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _dimensions = default(VectorOffset);
    if (_o.Dimensions != null) {
      var __dimensions = new StringOffset[_o.Dimensions.Count];
      for (var _j = 0; _j < __dimensions.Length; ++_j) { __dimensions[_j] = builder.CreateString(_o.Dimensions[_j]); }
      _dimensions = CreateDimensionsVector(builder, __dimensions);
    }
    var _dimensionName = default(VectorOffset);
    if (_o.DimensionName != null) {
      var __dimensionName = new StringOffset[_o.DimensionName.Count];
      for (var _j = 0; _j < __dimensionName.Length; ++_j) { __dimensionName[_j] = builder.CreateString(_o.DimensionName[_j]); }
      _dimensionName = CreateDimensionNameVector(builder, __dimensionName);
    }
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = new StringOffset[_o.Data.Count];
      for (var _j = 0; _j < __data.Length; ++_j) { __data[_j] = builder.CreateString(_o.Data[_j]); }
      _data = CreateDataVector(builder, __data);
    }
    return CreateIonoObservationElevation_Ingest(
      builder,
      _notes,
      _dimensions,
      _dimensionName,
      _data);
  }
}

public class IonoObservationElevation_IngestT
{
  public string Notes { get; set; }
  public List<string> Dimensions { get; set; }
  public List<string> DimensionName { get; set; }
  public List<string> Data { get; set; }

  public IonoObservationElevation_IngestT() {
    this.Notes = null;
    this.Dimensions = null;
    this.DimensionName = null;
    this.Data = null;
  }
  public static IonoObservationElevation_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return IonoObservationElevation_Ingest.GetRootAsIonoObservationElevation_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IonoObservationElevation_Ingest.FinishIonoObservationElevation_IngestBuffer(fbb, IonoObservationElevation_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IonoObservationElevation_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Notes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*Dimensions*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*DimensionName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*Data*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
