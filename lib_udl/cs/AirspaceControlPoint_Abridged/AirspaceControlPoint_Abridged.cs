// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
public struct AirspaceControlPoint_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlPoint_Abridged GetRootAsAirspaceControlPoint_Abridged(ByteBuffer _bb) { return GetRootAsAirspaceControlPoint_Abridged(_bb, new AirspaceControlPoint_Abridged()); }
  public static AirspaceControlPoint_Abridged GetRootAsAirspaceControlPoint_Abridged(ByteBuffer _bb, AirspaceControlPoint_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AirspaceControlPoint_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRS"); }
  public static bool VerifyAirspaceControlPoint_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRS", false, AirspaceControlPoint_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AirspaceControlPoint_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// One of possible control point type codes, such as CP, ER, OT, etc.
  /// Example: /// Example: CP
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string CtrlPtType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCtrlPtTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCtrlPtTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCtrlPtTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// The name applied to the control point, used as a reference.
  /// Example: /// Example: APPLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CtrlPtName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCtrlPtNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCtrlPtNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCtrlPtNameArray() { return __p.__vector_as_array<byte>(6); }
  /// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
  /// Example: /// Example: 203632N0594256E
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CtrlPtLocation { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCtrlPtLocationBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCtrlPtLocationBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCtrlPtLocationArray() { return __p.__vector_as_array<byte>(8); }
  /// The altitude of the control point.
  /// Example: /// Example: BRFL:MSL-FL230
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CtrlPtAltitude { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCtrlPtAltitudeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCtrlPtAltitudeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCtrlPtAltitudeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<AirspaceControlPoint_Abridged> CreateAirspaceControlPoint_Abridged(FlatBufferBuilder builder,
      StringOffset ctrlPtTypeOffset = default(StringOffset),
      StringOffset ctrlPtNameOffset = default(StringOffset),
      StringOffset ctrlPtLocationOffset = default(StringOffset),
      StringOffset ctrlPtAltitudeOffset = default(StringOffset)) {
    builder.StartTable(4);
    AirspaceControlPoint_Abridged.AddCtrlPtAltitude(builder, ctrlPtAltitudeOffset);
    AirspaceControlPoint_Abridged.AddCtrlPtLocation(builder, ctrlPtLocationOffset);
    AirspaceControlPoint_Abridged.AddCtrlPtName(builder, ctrlPtNameOffset);
    AirspaceControlPoint_Abridged.AddCtrlPtType(builder, ctrlPtTypeOffset);
    return AirspaceControlPoint_Abridged.EndAirspaceControlPoint_Abridged(builder);
  }

  public static void StartAirspaceControlPoint_Abridged(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCtrlPtType(FlatBufferBuilder builder, StringOffset ctrlPtTypeOffset) { builder.AddOffset(0, ctrlPtTypeOffset.Value, 0); }
  public static void AddCtrlPtName(FlatBufferBuilder builder, StringOffset ctrlPtNameOffset) { builder.AddOffset(1, ctrlPtNameOffset.Value, 0); }
  public static void AddCtrlPtLocation(FlatBufferBuilder builder, StringOffset ctrlPtLocationOffset) { builder.AddOffset(2, ctrlPtLocationOffset.Value, 0); }
  public static void AddCtrlPtAltitude(FlatBufferBuilder builder, StringOffset ctrlPtAltitudeOffset) { builder.AddOffset(3, ctrlPtAltitudeOffset.Value, 0); }
  public static Offset<AirspaceControlPoint_Abridged> EndAirspaceControlPoint_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AirspaceControlPoint_Abridged>(o);
  }
  public static void FinishAirspaceControlPoint_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirspaceControlPoint_Abridged> offset) { builder.Finish(offset.Value, "AIRS"); }
  public static void FinishSizePrefixedAirspaceControlPoint_AbridgedBuffer(FlatBufferBuilder builder, Offset<AirspaceControlPoint_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "AIRS"); }
  public AirspaceControlPoint_AbridgedT UnPack() {
    var _o = new AirspaceControlPoint_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AirspaceControlPoint_AbridgedT _o) {
    _o.CtrlPtType = this.CtrlPtType;
    _o.CtrlPtName = this.CtrlPtName;
    _o.CtrlPtLocation = this.CtrlPtLocation;
    _o.CtrlPtAltitude = this.CtrlPtAltitude;
  }
  public static Offset<AirspaceControlPoint_Abridged> Pack(FlatBufferBuilder builder, AirspaceControlPoint_AbridgedT _o) {
    if (_o == null) return default(Offset<AirspaceControlPoint_Abridged>);
    var _ctrlPtType = _o.CtrlPtType == null ? default(StringOffset) : builder.CreateString(_o.CtrlPtType);
    var _ctrlPtName = _o.CtrlPtName == null ? default(StringOffset) : builder.CreateString(_o.CtrlPtName);
    var _ctrlPtLocation = _o.CtrlPtLocation == null ? default(StringOffset) : builder.CreateString(_o.CtrlPtLocation);
    var _ctrlPtAltitude = _o.CtrlPtAltitude == null ? default(StringOffset) : builder.CreateString(_o.CtrlPtAltitude);
    return CreateAirspaceControlPoint_Abridged(
      builder,
      _ctrlPtType,
      _ctrlPtName,
      _ctrlPtLocation,
      _ctrlPtAltitude);
  }
}

public class AirspaceControlPoint_AbridgedT
{
  public string CtrlPtType { get; set; }
  public string CtrlPtName { get; set; }
  public string CtrlPtLocation { get; set; }
  public string CtrlPtAltitude { get; set; }

  public AirspaceControlPoint_AbridgedT() {
    this.CtrlPtType = null;
    this.CtrlPtName = null;
    this.CtrlPtLocation = null;
    this.CtrlPtAltitude = null;
  }
  public static AirspaceControlPoint_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AirspaceControlPoint_Abridged.GetRootAsAirspaceControlPoint_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AirspaceControlPoint_Abridged.FinishAirspaceControlPoint_AbridgedBuffer(fbb, AirspaceControlPoint_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AirspaceControlPoint_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CtrlPtType*/, false)
      && verifier.VerifyString(tablePos, 6 /*CtrlPtName*/, false)
      && verifier.VerifyString(tablePos, 8 /*CtrlPtLocation*/, false)
      && verifier.VerifyString(tablePos, 10 /*CtrlPtAltitude*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
