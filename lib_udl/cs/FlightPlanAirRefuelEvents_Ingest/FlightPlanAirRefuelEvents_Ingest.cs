// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of air refueling events occurring on this flight.
public struct FlightPlanAirRefuelEvents_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanAirRefuelEvents_Ingest GetRootAsFlightPlanAirRefuelEvents_Ingest(ByteBuffer _bb) { return GetRootAsFlightPlanAirRefuelEvents_Ingest(_bb, new FlightPlanAirRefuelEvents_Ingest()); }
  public static FlightPlanAirRefuelEvents_Ingest GetRootAsFlightPlanAirRefuelEvents_Ingest(ByteBuffer _bb, FlightPlanAirRefuelEvents_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool FlightPlanAirRefuelEvents_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "FLIG"); }
  public static bool VerifyFlightPlanAirRefuelEvents_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("FLIG", false, FlightPlanAirRefuelEvents_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FlightPlanAirRefuelEvents_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  public double ArDegrade { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of this air refueling event within the flight plan.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int ArNum { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  public double ArExchangedFuel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
  /// Example: /// Example: 143000.1
  /// Constraints: No constraints specified.
  public double DivertFuel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fuel remaining at the air refueling exit in pounds.
  /// Example: /// Example: 160000.1
  /// Constraints: No constraints specified.
  public double ExitFuel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<FlightPlanAirRefuelEvents_Ingest> CreateFlightPlanAirRefuelEvents_Ingest(FlatBufferBuilder builder,
      double arDegrade = 0.0,
      int arNum = 0,
      double arExchangedFuel = 0.0,
      double divertFuel = 0.0,
      double exitFuel = 0.0) {
    builder.StartTable(5);
    FlightPlanAirRefuelEvents_Ingest.AddExitFuel(builder, exitFuel);
    FlightPlanAirRefuelEvents_Ingest.AddDivertFuel(builder, divertFuel);
    FlightPlanAirRefuelEvents_Ingest.AddArExchangedFuel(builder, arExchangedFuel);
    FlightPlanAirRefuelEvents_Ingest.AddArDegrade(builder, arDegrade);
    FlightPlanAirRefuelEvents_Ingest.AddArNum(builder, arNum);
    return FlightPlanAirRefuelEvents_Ingest.EndFlightPlanAirRefuelEvents_Ingest(builder);
  }

  public static void StartFlightPlanAirRefuelEvents_Ingest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddArDegrade(FlatBufferBuilder builder, double arDegrade) { builder.AddDouble(0, arDegrade, 0.0); }
  public static void AddArNum(FlatBufferBuilder builder, int arNum) { builder.AddInt(1, arNum, 0); }
  public static void AddArExchangedFuel(FlatBufferBuilder builder, double arExchangedFuel) { builder.AddDouble(2, arExchangedFuel, 0.0); }
  public static void AddDivertFuel(FlatBufferBuilder builder, double divertFuel) { builder.AddDouble(3, divertFuel, 0.0); }
  public static void AddExitFuel(FlatBufferBuilder builder, double exitFuel) { builder.AddDouble(4, exitFuel, 0.0); }
  public static Offset<FlightPlanAirRefuelEvents_Ingest> EndFlightPlanAirRefuelEvents_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FlightPlanAirRefuelEvents_Ingest>(o);
  }
  public static void FinishFlightPlanAirRefuelEvents_IngestBuffer(FlatBufferBuilder builder, Offset<FlightPlanAirRefuelEvents_Ingest> offset) { builder.Finish(offset.Value, "FLIG"); }
  public static void FinishSizePrefixedFlightPlanAirRefuelEvents_IngestBuffer(FlatBufferBuilder builder, Offset<FlightPlanAirRefuelEvents_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "FLIG"); }
  public FlightPlanAirRefuelEvents_IngestT UnPack() {
    var _o = new FlightPlanAirRefuelEvents_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FlightPlanAirRefuelEvents_IngestT _o) {
    _o.ArDegrade = this.ArDegrade;
    _o.ArNum = this.ArNum;
    _o.ArExchangedFuel = this.ArExchangedFuel;
    _o.DivertFuel = this.DivertFuel;
    _o.ExitFuel = this.ExitFuel;
  }
  public static Offset<FlightPlanAirRefuelEvents_Ingest> Pack(FlatBufferBuilder builder, FlightPlanAirRefuelEvents_IngestT _o) {
    if (_o == null) return default(Offset<FlightPlanAirRefuelEvents_Ingest>);
    return CreateFlightPlanAirRefuelEvents_Ingest(
      builder,
      _o.ArDegrade,
      _o.ArNum,
      _o.ArExchangedFuel,
      _o.DivertFuel,
      _o.ExitFuel);
  }
}

public class FlightPlanAirRefuelEvents_IngestT
{
  public double ArDegrade { get; set; }
  public int ArNum { get; set; }
  public double ArExchangedFuel { get; set; }
  public double DivertFuel { get; set; }
  public double ExitFuel { get; set; }

  public FlightPlanAirRefuelEvents_IngestT() {
    this.ArDegrade = 0.0;
    this.ArNum = 0;
    this.ArExchangedFuel = 0.0;
    this.DivertFuel = 0.0;
    this.ExitFuel = 0.0;
  }
  public static FlightPlanAirRefuelEvents_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return FlightPlanAirRefuelEvents_Ingest.GetRootAsFlightPlanAirRefuelEvents_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    FlightPlanAirRefuelEvents_Ingest.FinishFlightPlanAirRefuelEvents_IngestBuffer(fbb, FlightPlanAirRefuelEvents_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class FlightPlanAirRefuelEvents_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ArDegrade*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ArNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*ArExchangedFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*DivertFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*ExitFuel*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
