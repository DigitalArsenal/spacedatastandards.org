// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide operations for posting space object idenfification observation sets.
public struct SOIObservationSet_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SOIObservationSet_Ingest GetRootAsSOIObservationSet_Ingest(ByteBuffer _bb) { return GetRootAsSOIObservationSet_Ingest(_bb, new SOIObservationSet_Ingest()); }
  public static SOIObservationSet_Ingest GetRootAsSOIObservationSet_Ingest(ByteBuffer _bb, SOIObservationSet_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SOIObservationSet_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SOIO"); }
  public static bool VerifySOIObservationSet_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SOIO", false, SOIObservationSet_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SOIObservationSet_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
  /// Example: /// Example: 2022-07-07T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string MsgCreateDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgCreateDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMsgCreateDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMsgCreateDateArray() { return __p.__vector_as_array<byte>(8); }
  /// ID of the observing sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(12); }
  /// ID of the AttitudeSet record for the observing sensor.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SensorAsId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSensorAsIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSensorAsIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSensorAsIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(16); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senx { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Seny { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senz { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelx { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvely { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelz { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ID of the UDL Elset of the Space Object under observation.
  /// Example: /// Example: REF-ELSET-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdElset { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdElsetBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetIdElsetBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetIdElsetArray() { return __p.__vector_as_array<byte>(40); }
  /// Observation set detection start time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(42); }
  /// Observation set detection end time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(44); }
  /// The number of observation records in the set.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumObs { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Observation type (OPTICAL, RADAR).
  /// Example: /// Example: OPTICAL
  /// Constraints: Minimum length = 1, Maximum length = 24
  public SOIObservationSet_Ingest_type_Enum Type { get { int o = __p.__offset(48); return o != 0 ? (SOIObservationSet_Ingest_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SOIObservationSet_Ingest_type_Enum.OPTICAL; } }
  /// Polar angle of the gimbal/mount at observation set detection start time in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PolarAngleStart { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Polar angle of the gimbal/mount at observation set detection end time in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PolarAngleEnd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public SOIObservationSet_Ingest_referenceFrame_Enum ReferenceFrame { get { int o = __p.__offset(54); return o != 0 ? (SOIObservationSet_Ingest_referenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SOIObservationSet_Ingest_referenceFrame_Enum.J2000; } }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public SOIObservationSet_Ingest_senReferenceFrame_Enum SenReferenceFrame { get { int o = __p.__offset(56); return o != 0 ? (SOIObservationSet_Ingest_senReferenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SOIObservationSet_Ingest_senReferenceFrame_Enum.J2000; } }
  /// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double LosDeclinationStart { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double LosDeclinationEnd { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PointingAngleAzStart { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PointingAngleAzEnd { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PointingAngleElStart { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PointingAngleElEnd { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pixel array size (width) in pixels.
  /// Example: /// Example: 32
  /// Constraints: No constraints specified.
  public int PixelArrayWidth { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Pixel array size (height) in pixels.
  /// Example: /// Example: 32
  /// Constraints: No constraints specified.
  public int PixelArrayHeight { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The value is the number of spectral filters used.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumSpectralFilters { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: ['Keyword1', 'Keyword2']
  /// Constraints: No constraints specified.
  public string SpectralFilters(int j) { int o = __p.__offset(76); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpectralFiltersLength { get { int o = __p.__offset(76); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  /// Example: /// Example: RATE TRACK
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CollectionMode { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionModeBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetCollectionModeBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetCollectionModeArray() { return __p.__vector_as_array<byte>(78); }
  /// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
  /// Example: /// Example: 234.2
  /// Constraints: No constraints specified.
  public double Gain { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of pixels binned horizontally.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int BinningHoriz { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of pixels binned vertically.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int BinningVert { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The in-band solar magnitude at 1 A.U.
  /// Example: /// Example: -26.91
  /// Constraints: No constraints specified.
  public double SolarMag { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The minimum valid pixel value.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int PixelMin { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The maximum valid pixel value.
  /// Example: /// Example: 16383
  /// Constraints: No constraints specified.
  public int PixelMax { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Software Version used to Capture, Process, and Deliver the data.
  /// Example: /// Example: GSV99/17-1
  /// Constraints: Minimum length = 0, Maximum length = 70
  public string SoftwareVersion { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoftwareVersionBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetSoftwareVersionBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetSoftwareVersionArray() { return __p.__vector_as_array<byte>(92); }
  /// Name of the target satellite.
  /// Example: /// Example: TITAN 3C TRANSTAGE R/B
  /// Constraints: Minimum length = 0, Maximum length = 70
  public string SatelliteName { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatelliteNameBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetSatelliteNameBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetSatelliteNameArray() { return __p.__vector_as_array<byte>(94); }
  /// Name of the Star Catalog used for photometry and astrometry.
  /// Example: /// Example: SSTRC5
  /// Constraints: Minimum length = 0, Maximum length = 70
  public string StarCatName { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStarCatNameBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetStarCatNameBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetStarCatNameArray() { return __p.__vector_as_array<byte>(96); }
  /// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
  /// Example: /// Example: 0.327
  /// Constraints: No constraints specified.
  public double CorrQuality { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(100); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
  /// Example: /// Example: BOTH
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ValidCalibrations { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValidCalibrationsBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetValidCalibrationsBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetValidCalibrationsArray() { return __p.__vector_as_array<byte>(102); }
  /// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
  /// Example: /// Example: ALL SKY
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CalibrationType { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCalibrationTypeBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetCalibrationTypeBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetCalibrationTypeArray() { return __p.__vector_as_array<byte>(104); }
  /// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double PercentSatThreshold { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Boolean indicating if any change event was detected, based on historical collection data for the object.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool ChangeDetected { get { int o = __p.__offset(108); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool PeriodicityChangeDetected { get { int o = __p.__offset(110); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool BrightnessVarianceChangeDetected { get { int o = __p.__offset(112); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool SolarPhaseAngleBrightnessChangeDetected { get { int o = __p.__offset(114); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ChangeConf { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChangeConfBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetChangeConfBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetChangeConfArray() { return __p.__vector_as_array<byte>(116); }
  /// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CollectionDensityConf { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionDensityConfBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetCollectionDensityConfBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetCollectionDensityConfArray() { return __p.__vector_as_array<byte>(118); }
  /// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PeriodicitySamplingConf { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPeriodicitySamplingConfBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetPeriodicitySamplingConfBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetPeriodicitySamplingConfArray() { return __p.__vector_as_array<byte>(120); }
  /// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PeriodicityDetectionConf { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPeriodicityDetectionConfBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetPeriodicityDetectionConfBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetPeriodicityDetectionConfArray() { return __p.__vector_as_array<byte>(122); }
  /// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
  /// Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CollectionId { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionIdBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCollectionIdBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCollectionIdArray() { return __p.__vector_as_array<byte>(124); }
  /// Array of SOI Calibrations associated with this SOIObservationSet.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Calibrations(int j) { int o = __p.__offset(126); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CalibrationsLength { get { int o = __p.__offset(126); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(128); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(128); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(130); }
  /// OpticalSOIObservations associated with this SOIObservationSet.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OpticalSOIObservationList(int j) { int o = __p.__offset(132); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OpticalSOIObservationListLength { get { int o = __p.__offset(132); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// RadarSOIObservations associated with this RadarSOIObservationSet.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string RadarSOIObservationList(int j) { int o = __p.__offset(134); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RadarSOIObservationListLength { get { int o = __p.__offset(134); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(136); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(138); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(140); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(142); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(142, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(142); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(142); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(144); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(146); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SOIObservationSet_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(148); return o != 0 ? (SOIObservationSet_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SOIObservationSet_Ingest_dataMode_Enum.REAL; } }

  public static Offset<SOIObservationSet_Ingest> CreateSOIObservationSet_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset msgCreateDateOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset sensorAsIdOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      double senx = 0.0,
      double seny = 0.0,
      double senz = 0.0,
      double senvelx = 0.0,
      double senvely = 0.0,
      double senvelz = 0.0,
      StringOffset idElsetOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      int numObs = 0,
      SOIObservationSet_Ingest_type_Enum type = SOIObservationSet_Ingest_type_Enum.OPTICAL,
      double polarAngleStart = 0.0,
      double polarAngleEnd = 0.0,
      SOIObservationSet_Ingest_referenceFrame_Enum referenceFrame = SOIObservationSet_Ingest_referenceFrame_Enum.J2000,
      SOIObservationSet_Ingest_senReferenceFrame_Enum senReferenceFrame = SOIObservationSet_Ingest_senReferenceFrame_Enum.J2000,
      double losDeclinationStart = 0.0,
      double losDeclinationEnd = 0.0,
      double pointingAngleAzStart = 0.0,
      double pointingAngleAzEnd = 0.0,
      double pointingAngleElStart = 0.0,
      double pointingAngleElEnd = 0.0,
      int pixelArrayWidth = 0,
      int pixelArrayHeight = 0,
      int numSpectralFilters = 0,
      VectorOffset spectralFiltersOffset = default(VectorOffset),
      StringOffset collectionModeOffset = default(StringOffset),
      double gain = 0.0,
      int binningHoriz = 0,
      int binningVert = 0,
      double solarMag = 0.0,
      int pixelMin = 0,
      int pixelMax = 0,
      StringOffset softwareVersionOffset = default(StringOffset),
      StringOffset satelliteNameOffset = default(StringOffset),
      StringOffset starCatNameOffset = default(StringOffset),
      double corrQuality = 0.0,
      bool uct = false,
      StringOffset validCalibrationsOffset = default(StringOffset),
      StringOffset calibrationTypeOffset = default(StringOffset),
      double percentSatThreshold = 0.0,
      bool changeDetected = false,
      bool periodicityChangeDetected = false,
      bool brightnessVarianceChangeDetected = false,
      bool solarPhaseAngleBrightnessChangeDetected = false,
      StringOffset changeConfOffset = default(StringOffset),
      StringOffset collectionDensityConfOffset = default(StringOffset),
      StringOffset periodicitySamplingConfOffset = default(StringOffset),
      StringOffset periodicityDetectionConfOffset = default(StringOffset),
      StringOffset collectionIdOffset = default(StringOffset),
      VectorOffset calibrationsOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      VectorOffset opticalSOIObservationListOffset = default(VectorOffset),
      VectorOffset radarSOIObservationListOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      SOIObservationSet_Ingest_dataMode_Enum dataMode = SOIObservationSet_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(73);
    SOIObservationSet_Ingest.AddPercentSatThreshold(builder, percentSatThreshold);
    SOIObservationSet_Ingest.AddCorrQuality(builder, corrQuality);
    SOIObservationSet_Ingest.AddSolarMag(builder, solarMag);
    SOIObservationSet_Ingest.AddGain(builder, gain);
    SOIObservationSet_Ingest.AddPointingAngleElEnd(builder, pointingAngleElEnd);
    SOIObservationSet_Ingest.AddPointingAngleElStart(builder, pointingAngleElStart);
    SOIObservationSet_Ingest.AddPointingAngleAzEnd(builder, pointingAngleAzEnd);
    SOIObservationSet_Ingest.AddPointingAngleAzStart(builder, pointingAngleAzStart);
    SOIObservationSet_Ingest.AddLosDeclinationEnd(builder, losDeclinationEnd);
    SOIObservationSet_Ingest.AddLosDeclinationStart(builder, losDeclinationStart);
    SOIObservationSet_Ingest.AddPolarAngleEnd(builder, polarAngleEnd);
    SOIObservationSet_Ingest.AddPolarAngleStart(builder, polarAngleStart);
    SOIObservationSet_Ingest.AddSenvelz(builder, senvelz);
    SOIObservationSet_Ingest.AddSenvely(builder, senvely);
    SOIObservationSet_Ingest.AddSenvelx(builder, senvelx);
    SOIObservationSet_Ingest.AddSenz(builder, senz);
    SOIObservationSet_Ingest.AddSeny(builder, seny);
    SOIObservationSet_Ingest.AddSenx(builder, senx);
    SOIObservationSet_Ingest.AddSenalt(builder, senalt);
    SOIObservationSet_Ingest.AddSenlon(builder, senlon);
    SOIObservationSet_Ingest.AddSenlat(builder, senlat);
    SOIObservationSet_Ingest.AddSourceDL(builder, sourceDLOffset);
    SOIObservationSet_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SOIObservationSet_Ingest.AddOrigin(builder, originOffset);
    SOIObservationSet_Ingest.AddSource(builder, sourceOffset);
    SOIObservationSet_Ingest.AddCreatedBy(builder, createdByOffset);
    SOIObservationSet_Ingest.AddCreatedAt(builder, createdAtOffset);
    SOIObservationSet_Ingest.AddRadarSOIObservationList(builder, radarSOIObservationListOffset);
    SOIObservationSet_Ingest.AddOpticalSOIObservationList(builder, opticalSOIObservationListOffset);
    SOIObservationSet_Ingest.AddTransactionId(builder, transactionIdOffset);
    SOIObservationSet_Ingest.AddTags(builder, tagsOffset);
    SOIObservationSet_Ingest.AddCalibrations(builder, calibrationsOffset);
    SOIObservationSet_Ingest.AddCollectionId(builder, collectionIdOffset);
    SOIObservationSet_Ingest.AddPeriodicityDetectionConf(builder, periodicityDetectionConfOffset);
    SOIObservationSet_Ingest.AddPeriodicitySamplingConf(builder, periodicitySamplingConfOffset);
    SOIObservationSet_Ingest.AddCollectionDensityConf(builder, collectionDensityConfOffset);
    SOIObservationSet_Ingest.AddChangeConf(builder, changeConfOffset);
    SOIObservationSet_Ingest.AddCalibrationType(builder, calibrationTypeOffset);
    SOIObservationSet_Ingest.AddValidCalibrations(builder, validCalibrationsOffset);
    SOIObservationSet_Ingest.AddStarCatName(builder, starCatNameOffset);
    SOIObservationSet_Ingest.AddSatelliteName(builder, satelliteNameOffset);
    SOIObservationSet_Ingest.AddSoftwareVersion(builder, softwareVersionOffset);
    SOIObservationSet_Ingest.AddPixelMax(builder, pixelMax);
    SOIObservationSet_Ingest.AddPixelMin(builder, pixelMin);
    SOIObservationSet_Ingest.AddBinningVert(builder, binningVert);
    SOIObservationSet_Ingest.AddBinningHoriz(builder, binningHoriz);
    SOIObservationSet_Ingest.AddCollectionMode(builder, collectionModeOffset);
    SOIObservationSet_Ingest.AddSpectralFilters(builder, spectralFiltersOffset);
    SOIObservationSet_Ingest.AddNumSpectralFilters(builder, numSpectralFilters);
    SOIObservationSet_Ingest.AddPixelArrayHeight(builder, pixelArrayHeight);
    SOIObservationSet_Ingest.AddPixelArrayWidth(builder, pixelArrayWidth);
    SOIObservationSet_Ingest.AddNumObs(builder, numObs);
    SOIObservationSet_Ingest.AddEndTime(builder, endTimeOffset);
    SOIObservationSet_Ingest.AddStartTime(builder, startTimeOffset);
    SOIObservationSet_Ingest.AddIdElset(builder, idElsetOffset);
    SOIObservationSet_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    SOIObservationSet_Ingest.AddSatNo(builder, satNo);
    SOIObservationSet_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    SOIObservationSet_Ingest.AddSensorAsId(builder, sensorAsIdOffset);
    SOIObservationSet_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    SOIObservationSet_Ingest.AddIdSensor(builder, idSensorOffset);
    SOIObservationSet_Ingest.AddMsgCreateDate(builder, msgCreateDateOffset);
    SOIObservationSet_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SOIObservationSet_Ingest.AddId(builder, idOffset);
    SOIObservationSet_Ingest.AddDataMode(builder, dataMode);
    SOIObservationSet_Ingest.AddSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected);
    SOIObservationSet_Ingest.AddBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected);
    SOIObservationSet_Ingest.AddPeriodicityChangeDetected(builder, periodicityChangeDetected);
    SOIObservationSet_Ingest.AddChangeDetected(builder, changeDetected);
    SOIObservationSet_Ingest.AddUct(builder, uct);
    SOIObservationSet_Ingest.AddSenReferenceFrame(builder, senReferenceFrame);
    SOIObservationSet_Ingest.AddReferenceFrame(builder, referenceFrame);
    SOIObservationSet_Ingest.AddType(builder, type);
    return SOIObservationSet_Ingest.EndSOIObservationSet_Ingest(builder);
  }

  public static void StartSOIObservationSet_Ingest(FlatBufferBuilder builder) { builder.StartTable(73); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddMsgCreateDate(FlatBufferBuilder builder, StringOffset msgCreateDateOffset) { builder.AddOffset(2, msgCreateDateOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(3, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(4, origSensorIdOffset.Value, 0); }
  public static void AddSensorAsId(FlatBufferBuilder builder, StringOffset sensorAsIdOffset) { builder.AddOffset(5, sensorAsIdOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(6, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(7, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(8, origObjectIdOffset.Value, 0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(9, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(10, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(11, senalt, 0.0); }
  public static void AddSenx(FlatBufferBuilder builder, double senx) { builder.AddDouble(12, senx, 0.0); }
  public static void AddSeny(FlatBufferBuilder builder, double seny) { builder.AddDouble(13, seny, 0.0); }
  public static void AddSenz(FlatBufferBuilder builder, double senz) { builder.AddDouble(14, senz, 0.0); }
  public static void AddSenvelx(FlatBufferBuilder builder, double senvelx) { builder.AddDouble(15, senvelx, 0.0); }
  public static void AddSenvely(FlatBufferBuilder builder, double senvely) { builder.AddDouble(16, senvely, 0.0); }
  public static void AddSenvelz(FlatBufferBuilder builder, double senvelz) { builder.AddDouble(17, senvelz, 0.0); }
  public static void AddIdElset(FlatBufferBuilder builder, StringOffset idElsetOffset) { builder.AddOffset(18, idElsetOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(19, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(20, endTimeOffset.Value, 0); }
  public static void AddNumObs(FlatBufferBuilder builder, int numObs) { builder.AddInt(21, numObs, 0); }
  public static void AddType(FlatBufferBuilder builder, SOIObservationSet_Ingest_type_Enum type) { builder.AddSbyte(22, (sbyte)type, 0); }
  public static void AddPolarAngleStart(FlatBufferBuilder builder, double polarAngleStart) { builder.AddDouble(23, polarAngleStart, 0.0); }
  public static void AddPolarAngleEnd(FlatBufferBuilder builder, double polarAngleEnd) { builder.AddDouble(24, polarAngleEnd, 0.0); }
  public static void AddReferenceFrame(FlatBufferBuilder builder, SOIObservationSet_Ingest_referenceFrame_Enum referenceFrame) { builder.AddSbyte(25, (sbyte)referenceFrame, 0); }
  public static void AddSenReferenceFrame(FlatBufferBuilder builder, SOIObservationSet_Ingest_senReferenceFrame_Enum senReferenceFrame) { builder.AddSbyte(26, (sbyte)senReferenceFrame, 0); }
  public static void AddLosDeclinationStart(FlatBufferBuilder builder, double losDeclinationStart) { builder.AddDouble(27, losDeclinationStart, 0.0); }
  public static void AddLosDeclinationEnd(FlatBufferBuilder builder, double losDeclinationEnd) { builder.AddDouble(28, losDeclinationEnd, 0.0); }
  public static void AddPointingAngleAzStart(FlatBufferBuilder builder, double pointingAngleAzStart) { builder.AddDouble(29, pointingAngleAzStart, 0.0); }
  public static void AddPointingAngleAzEnd(FlatBufferBuilder builder, double pointingAngleAzEnd) { builder.AddDouble(30, pointingAngleAzEnd, 0.0); }
  public static void AddPointingAngleElStart(FlatBufferBuilder builder, double pointingAngleElStart) { builder.AddDouble(31, pointingAngleElStart, 0.0); }
  public static void AddPointingAngleElEnd(FlatBufferBuilder builder, double pointingAngleElEnd) { builder.AddDouble(32, pointingAngleElEnd, 0.0); }
  public static void AddPixelArrayWidth(FlatBufferBuilder builder, int pixelArrayWidth) { builder.AddInt(33, pixelArrayWidth, 0); }
  public static void AddPixelArrayHeight(FlatBufferBuilder builder, int pixelArrayHeight) { builder.AddInt(34, pixelArrayHeight, 0); }
  public static void AddNumSpectralFilters(FlatBufferBuilder builder, int numSpectralFilters) { builder.AddInt(35, numSpectralFilters, 0); }
  public static void AddSpectralFilters(FlatBufferBuilder builder, VectorOffset spectralFiltersOffset) { builder.AddOffset(36, spectralFiltersOffset.Value, 0); }
  public static VectorOffset CreateSpectralFiltersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpectralFiltersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCollectionMode(FlatBufferBuilder builder, StringOffset collectionModeOffset) { builder.AddOffset(37, collectionModeOffset.Value, 0); }
  public static void AddGain(FlatBufferBuilder builder, double gain) { builder.AddDouble(38, gain, 0.0); }
  public static void AddBinningHoriz(FlatBufferBuilder builder, int binningHoriz) { builder.AddInt(39, binningHoriz, 0); }
  public static void AddBinningVert(FlatBufferBuilder builder, int binningVert) { builder.AddInt(40, binningVert, 0); }
  public static void AddSolarMag(FlatBufferBuilder builder, double solarMag) { builder.AddDouble(41, solarMag, 0.0); }
  public static void AddPixelMin(FlatBufferBuilder builder, int pixelMin) { builder.AddInt(42, pixelMin, 0); }
  public static void AddPixelMax(FlatBufferBuilder builder, int pixelMax) { builder.AddInt(43, pixelMax, 0); }
  public static void AddSoftwareVersion(FlatBufferBuilder builder, StringOffset softwareVersionOffset) { builder.AddOffset(44, softwareVersionOffset.Value, 0); }
  public static void AddSatelliteName(FlatBufferBuilder builder, StringOffset satelliteNameOffset) { builder.AddOffset(45, satelliteNameOffset.Value, 0); }
  public static void AddStarCatName(FlatBufferBuilder builder, StringOffset starCatNameOffset) { builder.AddOffset(46, starCatNameOffset.Value, 0); }
  public static void AddCorrQuality(FlatBufferBuilder builder, double corrQuality) { builder.AddDouble(47, corrQuality, 0.0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(48, uct, false); }
  public static void AddValidCalibrations(FlatBufferBuilder builder, StringOffset validCalibrationsOffset) { builder.AddOffset(49, validCalibrationsOffset.Value, 0); }
  public static void AddCalibrationType(FlatBufferBuilder builder, StringOffset calibrationTypeOffset) { builder.AddOffset(50, calibrationTypeOffset.Value, 0); }
  public static void AddPercentSatThreshold(FlatBufferBuilder builder, double percentSatThreshold) { builder.AddDouble(51, percentSatThreshold, 0.0); }
  public static void AddChangeDetected(FlatBufferBuilder builder, bool changeDetected) { builder.AddBool(52, changeDetected, false); }
  public static void AddPeriodicityChangeDetected(FlatBufferBuilder builder, bool periodicityChangeDetected) { builder.AddBool(53, periodicityChangeDetected, false); }
  public static void AddBrightnessVarianceChangeDetected(FlatBufferBuilder builder, bool brightnessVarianceChangeDetected) { builder.AddBool(54, brightnessVarianceChangeDetected, false); }
  public static void AddSolarPhaseAngleBrightnessChangeDetected(FlatBufferBuilder builder, bool solarPhaseAngleBrightnessChangeDetected) { builder.AddBool(55, solarPhaseAngleBrightnessChangeDetected, false); }
  public static void AddChangeConf(FlatBufferBuilder builder, StringOffset changeConfOffset) { builder.AddOffset(56, changeConfOffset.Value, 0); }
  public static void AddCollectionDensityConf(FlatBufferBuilder builder, StringOffset collectionDensityConfOffset) { builder.AddOffset(57, collectionDensityConfOffset.Value, 0); }
  public static void AddPeriodicitySamplingConf(FlatBufferBuilder builder, StringOffset periodicitySamplingConfOffset) { builder.AddOffset(58, periodicitySamplingConfOffset.Value, 0); }
  public static void AddPeriodicityDetectionConf(FlatBufferBuilder builder, StringOffset periodicityDetectionConfOffset) { builder.AddOffset(59, periodicityDetectionConfOffset.Value, 0); }
  public static void AddCollectionId(FlatBufferBuilder builder, StringOffset collectionIdOffset) { builder.AddOffset(60, collectionIdOffset.Value, 0); }
  public static void AddCalibrations(FlatBufferBuilder builder, VectorOffset calibrationsOffset) { builder.AddOffset(61, calibrationsOffset.Value, 0); }
  public static VectorOffset CreateCalibrationsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCalibrationsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalibrationsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCalibrationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCalibrationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(62, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(63, transactionIdOffset.Value, 0); }
  public static void AddOpticalSOIObservationList(FlatBufferBuilder builder, VectorOffset opticalSOIObservationListOffset) { builder.AddOffset(64, opticalSOIObservationListOffset.Value, 0); }
  public static VectorOffset CreateOpticalSOIObservationListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOpticalSOIObservationListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpticalSOIObservationListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpticalSOIObservationListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpticalSOIObservationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRadarSOIObservationList(FlatBufferBuilder builder, VectorOffset radarSOIObservationListOffset) { builder.AddOffset(65, radarSOIObservationListOffset.Value, 0); }
  public static VectorOffset CreateRadarSOIObservationListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRadarSOIObservationListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarSOIObservationListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRadarSOIObservationListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRadarSOIObservationListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(66, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(67, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(68, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(69, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(70, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(71, sourceDLOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SOIObservationSet_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(72, (sbyte)dataMode, 0); }
  public static Offset<SOIObservationSet_Ingest> EndSOIObservationSet_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SOIObservationSet_Ingest>(o);
  }
  public static void FinishSOIObservationSet_IngestBuffer(FlatBufferBuilder builder, Offset<SOIObservationSet_Ingest> offset) { builder.Finish(offset.Value, "SOIO"); }
  public static void FinishSizePrefixedSOIObservationSet_IngestBuffer(FlatBufferBuilder builder, Offset<SOIObservationSet_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SOIO"); }
  public SOIObservationSet_IngestT UnPack() {
    var _o = new SOIObservationSet_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SOIObservationSet_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.MsgCreateDate = this.MsgCreateDate;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.SensorAsId = this.SensorAsId;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Senx = this.Senx;
    _o.Seny = this.Seny;
    _o.Senz = this.Senz;
    _o.Senvelx = this.Senvelx;
    _o.Senvely = this.Senvely;
    _o.Senvelz = this.Senvelz;
    _o.IdElset = this.IdElset;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.NumObs = this.NumObs;
    _o.Type = this.Type;
    _o.PolarAngleStart = this.PolarAngleStart;
    _o.PolarAngleEnd = this.PolarAngleEnd;
    _o.ReferenceFrame = this.ReferenceFrame;
    _o.SenReferenceFrame = this.SenReferenceFrame;
    _o.LosDeclinationStart = this.LosDeclinationStart;
    _o.LosDeclinationEnd = this.LosDeclinationEnd;
    _o.PointingAngleAzStart = this.PointingAngleAzStart;
    _o.PointingAngleAzEnd = this.PointingAngleAzEnd;
    _o.PointingAngleElStart = this.PointingAngleElStart;
    _o.PointingAngleElEnd = this.PointingAngleElEnd;
    _o.PixelArrayWidth = this.PixelArrayWidth;
    _o.PixelArrayHeight = this.PixelArrayHeight;
    _o.NumSpectralFilters = this.NumSpectralFilters;
    _o.SpectralFilters = new List<string>();
    for (var _j = 0; _j < this.SpectralFiltersLength; ++_j) {_o.SpectralFilters.Add(this.SpectralFilters(_j));}
    _o.CollectionMode = this.CollectionMode;
    _o.Gain = this.Gain;
    _o.BinningHoriz = this.BinningHoriz;
    _o.BinningVert = this.BinningVert;
    _o.SolarMag = this.SolarMag;
    _o.PixelMin = this.PixelMin;
    _o.PixelMax = this.PixelMax;
    _o.SoftwareVersion = this.SoftwareVersion;
    _o.SatelliteName = this.SatelliteName;
    _o.StarCatName = this.StarCatName;
    _o.CorrQuality = this.CorrQuality;
    _o.Uct = this.Uct;
    _o.ValidCalibrations = this.ValidCalibrations;
    _o.CalibrationType = this.CalibrationType;
    _o.PercentSatThreshold = this.PercentSatThreshold;
    _o.ChangeDetected = this.ChangeDetected;
    _o.PeriodicityChangeDetected = this.PeriodicityChangeDetected;
    _o.BrightnessVarianceChangeDetected = this.BrightnessVarianceChangeDetected;
    _o.SolarPhaseAngleBrightnessChangeDetected = this.SolarPhaseAngleBrightnessChangeDetected;
    _o.ChangeConf = this.ChangeConf;
    _o.CollectionDensityConf = this.CollectionDensityConf;
    _o.PeriodicitySamplingConf = this.PeriodicitySamplingConf;
    _o.PeriodicityDetectionConf = this.PeriodicityDetectionConf;
    _o.CollectionId = this.CollectionId;
    _o.Calibrations = new List<string>();
    for (var _j = 0; _j < this.CalibrationsLength; ++_j) {_o.Calibrations.Add(this.Calibrations(_j));}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.TransactionId = this.TransactionId;
    _o.OpticalSOIObservationList = new List<string>();
    for (var _j = 0; _j < this.OpticalSOIObservationListLength; ++_j) {_o.OpticalSOIObservationList.Add(this.OpticalSOIObservationList(_j));}
    _o.RadarSOIObservationList = new List<string>();
    for (var _j = 0; _j < this.RadarSOIObservationListLength; ++_j) {_o.RadarSOIObservationList.Add(this.RadarSOIObservationList(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.DataMode = this.DataMode;
  }
  public static Offset<SOIObservationSet_Ingest> Pack(FlatBufferBuilder builder, SOIObservationSet_IngestT _o) {
    if (_o == null) return default(Offset<SOIObservationSet_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _msgCreateDate = _o.MsgCreateDate == null ? default(StringOffset) : builder.CreateString(_o.MsgCreateDate);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _sensorAsId = _o.SensorAsId == null ? default(StringOffset) : builder.CreateString(_o.SensorAsId);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idElset = _o.IdElset == null ? default(StringOffset) : builder.CreateString(_o.IdElset);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _spectralFilters = default(VectorOffset);
    if (_o.SpectralFilters != null) {
      var __spectralFilters = new StringOffset[_o.SpectralFilters.Count];
      for (var _j = 0; _j < __spectralFilters.Length; ++_j) { __spectralFilters[_j] = builder.CreateString(_o.SpectralFilters[_j]); }
      _spectralFilters = CreateSpectralFiltersVector(builder, __spectralFilters);
    }
    var _collectionMode = _o.CollectionMode == null ? default(StringOffset) : builder.CreateString(_o.CollectionMode);
    var _softwareVersion = _o.SoftwareVersion == null ? default(StringOffset) : builder.CreateString(_o.SoftwareVersion);
    var _satelliteName = _o.SatelliteName == null ? default(StringOffset) : builder.CreateString(_o.SatelliteName);
    var _starCatName = _o.StarCatName == null ? default(StringOffset) : builder.CreateString(_o.StarCatName);
    var _validCalibrations = _o.ValidCalibrations == null ? default(StringOffset) : builder.CreateString(_o.ValidCalibrations);
    var _calibrationType = _o.CalibrationType == null ? default(StringOffset) : builder.CreateString(_o.CalibrationType);
    var _changeConf = _o.ChangeConf == null ? default(StringOffset) : builder.CreateString(_o.ChangeConf);
    var _collectionDensityConf = _o.CollectionDensityConf == null ? default(StringOffset) : builder.CreateString(_o.CollectionDensityConf);
    var _periodicitySamplingConf = _o.PeriodicitySamplingConf == null ? default(StringOffset) : builder.CreateString(_o.PeriodicitySamplingConf);
    var _periodicityDetectionConf = _o.PeriodicityDetectionConf == null ? default(StringOffset) : builder.CreateString(_o.PeriodicityDetectionConf);
    var _collectionId = _o.CollectionId == null ? default(StringOffset) : builder.CreateString(_o.CollectionId);
    var _calibrations = default(VectorOffset);
    if (_o.Calibrations != null) {
      var __calibrations = new StringOffset[_o.Calibrations.Count];
      for (var _j = 0; _j < __calibrations.Length; ++_j) { __calibrations[_j] = builder.CreateString(_o.Calibrations[_j]); }
      _calibrations = CreateCalibrationsVector(builder, __calibrations);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _opticalSOIObservationList = default(VectorOffset);
    if (_o.OpticalSOIObservationList != null) {
      var __opticalSOIObservationList = new StringOffset[_o.OpticalSOIObservationList.Count];
      for (var _j = 0; _j < __opticalSOIObservationList.Length; ++_j) { __opticalSOIObservationList[_j] = builder.CreateString(_o.OpticalSOIObservationList[_j]); }
      _opticalSOIObservationList = CreateOpticalSOIObservationListVector(builder, __opticalSOIObservationList);
    }
    var _radarSOIObservationList = default(VectorOffset);
    if (_o.RadarSOIObservationList != null) {
      var __radarSOIObservationList = new StringOffset[_o.RadarSOIObservationList.Count];
      for (var _j = 0; _j < __radarSOIObservationList.Length; ++_j) { __radarSOIObservationList[_j] = builder.CreateString(_o.RadarSOIObservationList[_j]); }
      _radarSOIObservationList = CreateRadarSOIObservationListVector(builder, __radarSOIObservationList);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    return CreateSOIObservationSet_Ingest(
      builder,
      _id,
      _classificationMarking,
      _msgCreateDate,
      _idSensor,
      _origSensorId,
      _sensorAsId,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.Senx,
      _o.Seny,
      _o.Senz,
      _o.Senvelx,
      _o.Senvely,
      _o.Senvelz,
      _idElset,
      _startTime,
      _endTime,
      _o.NumObs,
      _o.Type,
      _o.PolarAngleStart,
      _o.PolarAngleEnd,
      _o.ReferenceFrame,
      _o.SenReferenceFrame,
      _o.LosDeclinationStart,
      _o.LosDeclinationEnd,
      _o.PointingAngleAzStart,
      _o.PointingAngleAzEnd,
      _o.PointingAngleElStart,
      _o.PointingAngleElEnd,
      _o.PixelArrayWidth,
      _o.PixelArrayHeight,
      _o.NumSpectralFilters,
      _spectralFilters,
      _collectionMode,
      _o.Gain,
      _o.BinningHoriz,
      _o.BinningVert,
      _o.SolarMag,
      _o.PixelMin,
      _o.PixelMax,
      _softwareVersion,
      _satelliteName,
      _starCatName,
      _o.CorrQuality,
      _o.Uct,
      _validCalibrations,
      _calibrationType,
      _o.PercentSatThreshold,
      _o.ChangeDetected,
      _o.PeriodicityChangeDetected,
      _o.BrightnessVarianceChangeDetected,
      _o.SolarPhaseAngleBrightnessChangeDetected,
      _changeConf,
      _collectionDensityConf,
      _periodicitySamplingConf,
      _periodicityDetectionConf,
      _collectionId,
      _calibrations,
      _tags,
      _transactionId,
      _opticalSOIObservationList,
      _radarSOIObservationList,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _o.DataMode);
  }
}

public class SOIObservationSet_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string MsgCreateDate { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string SensorAsId { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public double Senx { get; set; }
  public double Seny { get; set; }
  public double Senz { get; set; }
  public double Senvelx { get; set; }
  public double Senvely { get; set; }
  public double Senvelz { get; set; }
  public string IdElset { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public int NumObs { get; set; }
  public SOIObservationSet_Ingest_type_Enum Type { get; set; }
  public double PolarAngleStart { get; set; }
  public double PolarAngleEnd { get; set; }
  public SOIObservationSet_Ingest_referenceFrame_Enum ReferenceFrame { get; set; }
  public SOIObservationSet_Ingest_senReferenceFrame_Enum SenReferenceFrame { get; set; }
  public double LosDeclinationStart { get; set; }
  public double LosDeclinationEnd { get; set; }
  public double PointingAngleAzStart { get; set; }
  public double PointingAngleAzEnd { get; set; }
  public double PointingAngleElStart { get; set; }
  public double PointingAngleElEnd { get; set; }
  public int PixelArrayWidth { get; set; }
  public int PixelArrayHeight { get; set; }
  public int NumSpectralFilters { get; set; }
  public List<string> SpectralFilters { get; set; }
  public string CollectionMode { get; set; }
  public double Gain { get; set; }
  public int BinningHoriz { get; set; }
  public int BinningVert { get; set; }
  public double SolarMag { get; set; }
  public int PixelMin { get; set; }
  public int PixelMax { get; set; }
  public string SoftwareVersion { get; set; }
  public string SatelliteName { get; set; }
  public string StarCatName { get; set; }
  public double CorrQuality { get; set; }
  public bool Uct { get; set; }
  public string ValidCalibrations { get; set; }
  public string CalibrationType { get; set; }
  public double PercentSatThreshold { get; set; }
  public bool ChangeDetected { get; set; }
  public bool PeriodicityChangeDetected { get; set; }
  public bool BrightnessVarianceChangeDetected { get; set; }
  public bool SolarPhaseAngleBrightnessChangeDetected { get; set; }
  public string ChangeConf { get; set; }
  public string CollectionDensityConf { get; set; }
  public string PeriodicitySamplingConf { get; set; }
  public string PeriodicityDetectionConf { get; set; }
  public string CollectionId { get; set; }
  public List<string> Calibrations { get; set; }
  public List<string> Tags { get; set; }
  public string TransactionId { get; set; }
  public List<string> OpticalSOIObservationList { get; set; }
  public List<string> RadarSOIObservationList { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public SOIObservationSet_Ingest_dataMode_Enum DataMode { get; set; }

  public SOIObservationSet_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.MsgCreateDate = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.SensorAsId = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Senx = 0.0;
    this.Seny = 0.0;
    this.Senz = 0.0;
    this.Senvelx = 0.0;
    this.Senvely = 0.0;
    this.Senvelz = 0.0;
    this.IdElset = null;
    this.StartTime = null;
    this.EndTime = null;
    this.NumObs = 0;
    this.Type = SOIObservationSet_Ingest_type_Enum.OPTICAL;
    this.PolarAngleStart = 0.0;
    this.PolarAngleEnd = 0.0;
    this.ReferenceFrame = SOIObservationSet_Ingest_referenceFrame_Enum.J2000;
    this.SenReferenceFrame = SOIObservationSet_Ingest_senReferenceFrame_Enum.J2000;
    this.LosDeclinationStart = 0.0;
    this.LosDeclinationEnd = 0.0;
    this.PointingAngleAzStart = 0.0;
    this.PointingAngleAzEnd = 0.0;
    this.PointingAngleElStart = 0.0;
    this.PointingAngleElEnd = 0.0;
    this.PixelArrayWidth = 0;
    this.PixelArrayHeight = 0;
    this.NumSpectralFilters = 0;
    this.SpectralFilters = null;
    this.CollectionMode = null;
    this.Gain = 0.0;
    this.BinningHoriz = 0;
    this.BinningVert = 0;
    this.SolarMag = 0.0;
    this.PixelMin = 0;
    this.PixelMax = 0;
    this.SoftwareVersion = null;
    this.SatelliteName = null;
    this.StarCatName = null;
    this.CorrQuality = 0.0;
    this.Uct = false;
    this.ValidCalibrations = null;
    this.CalibrationType = null;
    this.PercentSatThreshold = 0.0;
    this.ChangeDetected = false;
    this.PeriodicityChangeDetected = false;
    this.BrightnessVarianceChangeDetected = false;
    this.SolarPhaseAngleBrightnessChangeDetected = false;
    this.ChangeConf = null;
    this.CollectionDensityConf = null;
    this.PeriodicitySamplingConf = null;
    this.PeriodicityDetectionConf = null;
    this.CollectionId = null;
    this.Calibrations = null;
    this.Tags = null;
    this.TransactionId = null;
    this.OpticalSOIObservationList = null;
    this.RadarSOIObservationList = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.DataMode = SOIObservationSet_Ingest_dataMode_Enum.REAL;
  }
  public static SOIObservationSet_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SOIObservationSet_Ingest.GetRootAsSOIObservationSet_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SOIObservationSet_Ingest.FinishSOIObservationSet_IngestBuffer(fbb, SOIObservationSet_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SOIObservationSet_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*MsgCreateDate*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 12 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 14 /*SensorAsId*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 18 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*OrigObjectId*/, false)
      && verifier.VerifyField(tablePos, 22 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Senx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Seny*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Senz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*Senvelx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Senvely*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Senvelz*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 40 /*IdElset*/, false)
      && verifier.VerifyString(tablePos, 42 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 44 /*EndTime*/, false)
      && verifier.VerifyField(tablePos, 46 /*NumObs*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*Type*/, 1 /*SOIObservationSet_Ingest_type_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 50 /*PolarAngleStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*PolarAngleEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*ReferenceFrame*/, 1 /*SOIObservationSet_Ingest_referenceFrame_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 56 /*SenReferenceFrame*/, 1 /*SOIObservationSet_Ingest_senReferenceFrame_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 58 /*LosDeclinationStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*LosDeclinationEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*PointingAngleAzStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*PointingAngleAzEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*PointingAngleElStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*PointingAngleElEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*PixelArrayWidth*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*PixelArrayHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*NumSpectralFilters*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 76 /*SpectralFilters*/, false)
      && verifier.VerifyString(tablePos, 78 /*CollectionMode*/, false)
      && verifier.VerifyField(tablePos, 80 /*Gain*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*BinningHoriz*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*BinningVert*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*SolarMag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*PixelMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*PixelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 92 /*SoftwareVersion*/, false)
      && verifier.VerifyString(tablePos, 94 /*SatelliteName*/, false)
      && verifier.VerifyString(tablePos, 96 /*StarCatName*/, false)
      && verifier.VerifyField(tablePos, 98 /*CorrQuality*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 102 /*ValidCalibrations*/, false)
      && verifier.VerifyString(tablePos, 104 /*CalibrationType*/, false)
      && verifier.VerifyField(tablePos, 106 /*PercentSatThreshold*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*ChangeDetected*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 110 /*PeriodicityChangeDetected*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 112 /*BrightnessVarianceChangeDetected*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 114 /*SolarPhaseAngleBrightnessChangeDetected*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 116 /*ChangeConf*/, false)
      && verifier.VerifyString(tablePos, 118 /*CollectionDensityConf*/, false)
      && verifier.VerifyString(tablePos, 120 /*PeriodicitySamplingConf*/, false)
      && verifier.VerifyString(tablePos, 122 /*PeriodicityDetectionConf*/, false)
      && verifier.VerifyString(tablePos, 124 /*CollectionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 126 /*Calibrations*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 128 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 130 /*TransactionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 132 /*OpticalSOIObservationList*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 134 /*RadarSOIObservationList*/, false)
      && verifier.VerifyString(tablePos, 136 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 138 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 140 /*Source*/, false)
      && verifier.VerifyString(tablePos, 142 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 144 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 146 /*SourceDL*/, false)
      && verifier.VerifyField(tablePos, 148 /*DataMode*/, 1 /*SOIObservationSet_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
