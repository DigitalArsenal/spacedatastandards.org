// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A track route is a prescribed route for performing training events or operations such as air refueling.
public struct TrackRoute_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TrackRoute_Ingest GetRootAsTrackRoute_Ingest(ByteBuffer _bb) { return GetRootAsTrackRoute_Ingest(_bb, new TrackRoute_Ingest()); }
  public static TrackRoute_Ingest GetRootAsTrackRoute_Ingest(ByteBuffer _bb, TrackRoute_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool TrackRoute_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TRAC"); }
  public static bool VerifyTrackRoute_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("TRAC", false, TrackRoute_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackRoute_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The track route type represented by this record (ex. AIR REFUELING).
  /// Example: /// Example: AIR REFUELING
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Type { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: GDSSMH121004232315303094
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(10); }
  /// The principal compass direction (cardinal or ordinal) of the track route.
  /// Example: /// Example: NE
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string Direction { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDirectionBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDirectionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDirectionArray() { return __p.__vector_as_array<byte>(12); }
  /// The name of the creating organization of the track route.
  /// Example: /// Example: HQPAC
  /// Constraints: Minimum length = 0, Maximum length = 250
  public string CreatingOrg { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatingOrgBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCreatingOrgBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCreatingOrgArray() { return __p.__vector_as_array<byte>(14); }
  /// Track location ID.
  /// Example: /// Example: POACHR
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string LocationTrackId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationTrackIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLocationTrackIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLocationTrackIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Identifier of the track.
  /// Example: /// Example: CH61A
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Name of the track.
  /// Example: /// Example: CH61 POST
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string TrackName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTrackNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTrackNameArray() { return __p.__vector_as_array<byte>(20); }
  /// Abbreviated name of the track.
  /// Example: /// Example: CH61
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ShortName { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShortNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetShortNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetShortNameArray() { return __p.__vector_as_array<byte>(22); }
  /// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string TypeCode { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeCodeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTypeCodeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTypeCodeArray() { return __p.__vector_as_array<byte>(24); }
  /// Region code indicating where the track resides as determined by the data source.
  /// Example: /// Example: 5
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string RegionCode { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionCodeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetRegionCodeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetRegionCodeArray() { return __p.__vector_as_array<byte>(26); }
  /// Region where the track resides.
  /// Example: /// Example: North America
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string RegionName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetRegionNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetRegionNameArray() { return __p.__vector_as_array<byte>(28); }
  /// The APX radar code sent and received by the aircraft for identification.
  /// Example: /// Example: 5/1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ApxBeaconCode { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApxBeaconCodeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetApxBeaconCodeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetApxBeaconCodeArray() { return __p.__vector_as_array<byte>(30); }
  /// The receiver tanker channel identifer for air refueling tracks.
  /// Example: /// Example: 31/094
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ReceiverTankerCHCode { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverTankerCHCodeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetReceiverTankerCHCodeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetReceiverTankerCHCodeArray() { return __p.__vector_as_array<byte>(32); }
  /// The APN radar code sent and received by the aircraft for identification.
  /// Example: /// Example: 1-3-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ApnSetting { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApnSettingBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetApnSettingBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetApnSettingArray() { return __p.__vector_as_array<byte>(34); }
  /// Standard Indicator Code of the air refueling track.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Sic { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSicBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSicBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSicArray() { return __p.__vector_as_array<byte>(36); }
  /// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-16T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ReviewDate { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReviewDateBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetReviewDateBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetReviewDateArray() { return __p.__vector_as_array<byte>(38); }
  /// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LastUsedDate { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastUsedDateBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetLastUsedDateBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetLastUsedDateArray() { return __p.__vector_as_array<byte>(40); }
  /// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LastUpdateDate { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastUpdateDateBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetLastUpdateDateBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetLastUpdateDateArray() { return __p.__vector_as_array<byte>(42); }
  /// The primary UHF radio frequency used for the track route in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  public double PriFreq { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The secondary UHF radio frequency used for the track route in megahertz.
  /// Example: /// Example: 319.7
  /// Constraints: No constraints specified.
  public double SecFreq { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Air Refueling Track Control Center message.
  /// Example: /// Example: OAKLAND CTR/GUAM CERAP
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ArtccMessage { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArtccMessageBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetArtccMessageBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetArtccMessageArray() { return __p.__vector_as_array<byte>(48); }
  /// Point of contact for the air refueling track route scheduler.
  /// Example: /// Example: 97 OSS/OSOS DSN 866-5555
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string SchedulerOrgName { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSchedulerOrgNameBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSchedulerOrgNameBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSchedulerOrgNameArray() { return __p.__vector_as_array<byte>(50); }
  /// The unit responsible for scheduling the track route.
  /// Example: /// Example: 612 AOC
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string SchedulerOrgUnit { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSchedulerOrgUnitBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetSchedulerOrgUnitBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetSchedulerOrgUnitArray() { return __p.__vector_as_array<byte>(52); }
  /// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EffectiveDate { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectiveDateBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetEffectiveDateBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetEffectiveDateArray() { return __p.__vector_as_array<byte>(54); }
  /// Points identified within the route.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string RoutePoints(int j) { int o = __p.__offset(56); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RoutePointsLength { get { int o = __p.__offset(56); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Minimum and maximum altitude bounds for the track.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AltitudeBlocks(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AltitudeBlocksLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Point of contacts for scheduling or modifying the route.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Poc(int j) { int o = __p.__offset(60); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PocLength { get { int o = __p.__offset(60); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(62); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(64); }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(66); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(68); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(70); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(72); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(74); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(76); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public TrackRoute_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(78); return o != 0 ? (TrackRoute_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : TrackRoute_Ingest_dataMode_Enum.REAL; } }

  public static Offset<TrackRoute_Ingest> CreateTrackRoute_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset directionOffset = default(StringOffset),
      StringOffset creatingOrgOffset = default(StringOffset),
      StringOffset locationTrackIdOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset trackNameOffset = default(StringOffset),
      StringOffset shortNameOffset = default(StringOffset),
      StringOffset typeCodeOffset = default(StringOffset),
      StringOffset regionCodeOffset = default(StringOffset),
      StringOffset regionNameOffset = default(StringOffset),
      StringOffset apxBeaconCodeOffset = default(StringOffset),
      StringOffset receiverTankerCHCodeOffset = default(StringOffset),
      StringOffset apnSettingOffset = default(StringOffset),
      StringOffset sicOffset = default(StringOffset),
      StringOffset reviewDateOffset = default(StringOffset),
      StringOffset lastUsedDateOffset = default(StringOffset),
      StringOffset lastUpdateDateOffset = default(StringOffset),
      double priFreq = 0.0,
      double secFreq = 0.0,
      StringOffset artccMessageOffset = default(StringOffset),
      StringOffset schedulerOrgNameOffset = default(StringOffset),
      StringOffset schedulerOrgUnitOffset = default(StringOffset),
      StringOffset effectiveDateOffset = default(StringOffset),
      VectorOffset routePointsOffset = default(VectorOffset),
      VectorOffset altitudeBlocksOffset = default(VectorOffset),
      VectorOffset pocOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      TrackRoute_Ingest_dataMode_Enum dataMode = TrackRoute_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(38);
    TrackRoute_Ingest.AddSecFreq(builder, secFreq);
    TrackRoute_Ingest.AddPriFreq(builder, priFreq);
    TrackRoute_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    TrackRoute_Ingest.AddOrigin(builder, originOffset);
    TrackRoute_Ingest.AddSource(builder, sourceOffset);
    TrackRoute_Ingest.AddSourceDL(builder, sourceDLOffset);
    TrackRoute_Ingest.AddUpdatedBy(builder, updatedByOffset);
    TrackRoute_Ingest.AddUpdatedAt(builder, updatedAtOffset);
    TrackRoute_Ingest.AddCreatedBy(builder, createdByOffset);
    TrackRoute_Ingest.AddCreatedAt(builder, createdAtOffset);
    TrackRoute_Ingest.AddPoc(builder, pocOffset);
    TrackRoute_Ingest.AddAltitudeBlocks(builder, altitudeBlocksOffset);
    TrackRoute_Ingest.AddRoutePoints(builder, routePointsOffset);
    TrackRoute_Ingest.AddEffectiveDate(builder, effectiveDateOffset);
    TrackRoute_Ingest.AddSchedulerOrgUnit(builder, schedulerOrgUnitOffset);
    TrackRoute_Ingest.AddSchedulerOrgName(builder, schedulerOrgNameOffset);
    TrackRoute_Ingest.AddArtccMessage(builder, artccMessageOffset);
    TrackRoute_Ingest.AddLastUpdateDate(builder, lastUpdateDateOffset);
    TrackRoute_Ingest.AddLastUsedDate(builder, lastUsedDateOffset);
    TrackRoute_Ingest.AddReviewDate(builder, reviewDateOffset);
    TrackRoute_Ingest.AddSic(builder, sicOffset);
    TrackRoute_Ingest.AddApnSetting(builder, apnSettingOffset);
    TrackRoute_Ingest.AddReceiverTankerCHCode(builder, receiverTankerCHCodeOffset);
    TrackRoute_Ingest.AddApxBeaconCode(builder, apxBeaconCodeOffset);
    TrackRoute_Ingest.AddRegionName(builder, regionNameOffset);
    TrackRoute_Ingest.AddRegionCode(builder, regionCodeOffset);
    TrackRoute_Ingest.AddTypeCode(builder, typeCodeOffset);
    TrackRoute_Ingest.AddShortName(builder, shortNameOffset);
    TrackRoute_Ingest.AddTrackName(builder, trackNameOffset);
    TrackRoute_Ingest.AddTrackId(builder, trackIdOffset);
    TrackRoute_Ingest.AddLocationTrackId(builder, locationTrackIdOffset);
    TrackRoute_Ingest.AddCreatingOrg(builder, creatingOrgOffset);
    TrackRoute_Ingest.AddDirection(builder, directionOffset);
    TrackRoute_Ingest.AddExternalId(builder, externalIdOffset);
    TrackRoute_Ingest.AddType(builder, typeOffset);
    TrackRoute_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    TrackRoute_Ingest.AddId(builder, idOffset);
    TrackRoute_Ingest.AddDataMode(builder, dataMode);
    return TrackRoute_Ingest.EndTrackRoute_Ingest(builder);
  }

  public static void StartTrackRoute_Ingest(FlatBufferBuilder builder) { builder.StartTable(38); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(3, externalIdOffset.Value, 0); }
  public static void AddDirection(FlatBufferBuilder builder, StringOffset directionOffset) { builder.AddOffset(4, directionOffset.Value, 0); }
  public static void AddCreatingOrg(FlatBufferBuilder builder, StringOffset creatingOrgOffset) { builder.AddOffset(5, creatingOrgOffset.Value, 0); }
  public static void AddLocationTrackId(FlatBufferBuilder builder, StringOffset locationTrackIdOffset) { builder.AddOffset(6, locationTrackIdOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(7, trackIdOffset.Value, 0); }
  public static void AddTrackName(FlatBufferBuilder builder, StringOffset trackNameOffset) { builder.AddOffset(8, trackNameOffset.Value, 0); }
  public static void AddShortName(FlatBufferBuilder builder, StringOffset shortNameOffset) { builder.AddOffset(9, shortNameOffset.Value, 0); }
  public static void AddTypeCode(FlatBufferBuilder builder, StringOffset typeCodeOffset) { builder.AddOffset(10, typeCodeOffset.Value, 0); }
  public static void AddRegionCode(FlatBufferBuilder builder, StringOffset regionCodeOffset) { builder.AddOffset(11, regionCodeOffset.Value, 0); }
  public static void AddRegionName(FlatBufferBuilder builder, StringOffset regionNameOffset) { builder.AddOffset(12, regionNameOffset.Value, 0); }
  public static void AddApxBeaconCode(FlatBufferBuilder builder, StringOffset apxBeaconCodeOffset) { builder.AddOffset(13, apxBeaconCodeOffset.Value, 0); }
  public static void AddReceiverTankerCHCode(FlatBufferBuilder builder, StringOffset receiverTankerCHCodeOffset) { builder.AddOffset(14, receiverTankerCHCodeOffset.Value, 0); }
  public static void AddApnSetting(FlatBufferBuilder builder, StringOffset apnSettingOffset) { builder.AddOffset(15, apnSettingOffset.Value, 0); }
  public static void AddSic(FlatBufferBuilder builder, StringOffset sicOffset) { builder.AddOffset(16, sicOffset.Value, 0); }
  public static void AddReviewDate(FlatBufferBuilder builder, StringOffset reviewDateOffset) { builder.AddOffset(17, reviewDateOffset.Value, 0); }
  public static void AddLastUsedDate(FlatBufferBuilder builder, StringOffset lastUsedDateOffset) { builder.AddOffset(18, lastUsedDateOffset.Value, 0); }
  public static void AddLastUpdateDate(FlatBufferBuilder builder, StringOffset lastUpdateDateOffset) { builder.AddOffset(19, lastUpdateDateOffset.Value, 0); }
  public static void AddPriFreq(FlatBufferBuilder builder, double priFreq) { builder.AddDouble(20, priFreq, 0.0); }
  public static void AddSecFreq(FlatBufferBuilder builder, double secFreq) { builder.AddDouble(21, secFreq, 0.0); }
  public static void AddArtccMessage(FlatBufferBuilder builder, StringOffset artccMessageOffset) { builder.AddOffset(22, artccMessageOffset.Value, 0); }
  public static void AddSchedulerOrgName(FlatBufferBuilder builder, StringOffset schedulerOrgNameOffset) { builder.AddOffset(23, schedulerOrgNameOffset.Value, 0); }
  public static void AddSchedulerOrgUnit(FlatBufferBuilder builder, StringOffset schedulerOrgUnitOffset) { builder.AddOffset(24, schedulerOrgUnitOffset.Value, 0); }
  public static void AddEffectiveDate(FlatBufferBuilder builder, StringOffset effectiveDateOffset) { builder.AddOffset(25, effectiveDateOffset.Value, 0); }
  public static void AddRoutePoints(FlatBufferBuilder builder, VectorOffset routePointsOffset) { builder.AddOffset(26, routePointsOffset.Value, 0); }
  public static VectorOffset CreateRoutePointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRoutePointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoutePointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRoutePointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRoutePointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAltitudeBlocks(FlatBufferBuilder builder, VectorOffset altitudeBlocksOffset) { builder.AddOffset(27, altitudeBlocksOffset.Value, 0); }
  public static VectorOffset CreateAltitudeBlocksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAltitudeBlocksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAltitudeBlocksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAltitudeBlocksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAltitudeBlocksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPoc(FlatBufferBuilder builder, VectorOffset pocOffset) { builder.AddOffset(28, pocOffset.Value, 0); }
  public static VectorOffset CreatePocVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePocVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePocVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePocVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPocVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(29, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(30, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(31, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(32, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(33, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(34, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(35, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(36, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, TrackRoute_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(37, (sbyte)dataMode, 0); }
  public static Offset<TrackRoute_Ingest> EndTrackRoute_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TrackRoute_Ingest>(o);
  }
  public static void FinishTrackRoute_IngestBuffer(FlatBufferBuilder builder, Offset<TrackRoute_Ingest> offset) { builder.Finish(offset.Value, "TRAC"); }
  public static void FinishSizePrefixedTrackRoute_IngestBuffer(FlatBufferBuilder builder, Offset<TrackRoute_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "TRAC"); }
  public TrackRoute_IngestT UnPack() {
    var _o = new TrackRoute_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackRoute_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.ExternalId = this.ExternalId;
    _o.Direction = this.Direction;
    _o.CreatingOrg = this.CreatingOrg;
    _o.LocationTrackId = this.LocationTrackId;
    _o.TrackId = this.TrackId;
    _o.TrackName = this.TrackName;
    _o.ShortName = this.ShortName;
    _o.TypeCode = this.TypeCode;
    _o.RegionCode = this.RegionCode;
    _o.RegionName = this.RegionName;
    _o.ApxBeaconCode = this.ApxBeaconCode;
    _o.ReceiverTankerCHCode = this.ReceiverTankerCHCode;
    _o.ApnSetting = this.ApnSetting;
    _o.Sic = this.Sic;
    _o.ReviewDate = this.ReviewDate;
    _o.LastUsedDate = this.LastUsedDate;
    _o.LastUpdateDate = this.LastUpdateDate;
    _o.PriFreq = this.PriFreq;
    _o.SecFreq = this.SecFreq;
    _o.ArtccMessage = this.ArtccMessage;
    _o.SchedulerOrgName = this.SchedulerOrgName;
    _o.SchedulerOrgUnit = this.SchedulerOrgUnit;
    _o.EffectiveDate = this.EffectiveDate;
    _o.RoutePoints = new List<string>();
    for (var _j = 0; _j < this.RoutePointsLength; ++_j) {_o.RoutePoints.Add(this.RoutePoints(_j));}
    _o.AltitudeBlocks = new List<string>();
    for (var _j = 0; _j < this.AltitudeBlocksLength; ++_j) {_o.AltitudeBlocks.Add(this.AltitudeBlocks(_j));}
    _o.Poc = new List<string>();
    for (var _j = 0; _j < this.PocLength; ++_j) {_o.Poc.Add(this.Poc(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<TrackRoute_Ingest> Pack(FlatBufferBuilder builder, TrackRoute_IngestT _o) {
    if (_o == null) return default(Offset<TrackRoute_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _direction = _o.Direction == null ? default(StringOffset) : builder.CreateString(_o.Direction);
    var _creatingOrg = _o.CreatingOrg == null ? default(StringOffset) : builder.CreateString(_o.CreatingOrg);
    var _locationTrackId = _o.LocationTrackId == null ? default(StringOffset) : builder.CreateString(_o.LocationTrackId);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _trackName = _o.TrackName == null ? default(StringOffset) : builder.CreateString(_o.TrackName);
    var _shortName = _o.ShortName == null ? default(StringOffset) : builder.CreateString(_o.ShortName);
    var _typeCode = _o.TypeCode == null ? default(StringOffset) : builder.CreateString(_o.TypeCode);
    var _regionCode = _o.RegionCode == null ? default(StringOffset) : builder.CreateString(_o.RegionCode);
    var _regionName = _o.RegionName == null ? default(StringOffset) : builder.CreateString(_o.RegionName);
    var _apxBeaconCode = _o.ApxBeaconCode == null ? default(StringOffset) : builder.CreateString(_o.ApxBeaconCode);
    var _receiverTankerCHCode = _o.ReceiverTankerCHCode == null ? default(StringOffset) : builder.CreateString(_o.ReceiverTankerCHCode);
    var _apnSetting = _o.ApnSetting == null ? default(StringOffset) : builder.CreateString(_o.ApnSetting);
    var _sic = _o.Sic == null ? default(StringOffset) : builder.CreateString(_o.Sic);
    var _reviewDate = _o.ReviewDate == null ? default(StringOffset) : builder.CreateString(_o.ReviewDate);
    var _lastUsedDate = _o.LastUsedDate == null ? default(StringOffset) : builder.CreateString(_o.LastUsedDate);
    var _lastUpdateDate = _o.LastUpdateDate == null ? default(StringOffset) : builder.CreateString(_o.LastUpdateDate);
    var _artccMessage = _o.ArtccMessage == null ? default(StringOffset) : builder.CreateString(_o.ArtccMessage);
    var _schedulerOrgName = _o.SchedulerOrgName == null ? default(StringOffset) : builder.CreateString(_o.SchedulerOrgName);
    var _schedulerOrgUnit = _o.SchedulerOrgUnit == null ? default(StringOffset) : builder.CreateString(_o.SchedulerOrgUnit);
    var _effectiveDate = _o.EffectiveDate == null ? default(StringOffset) : builder.CreateString(_o.EffectiveDate);
    var _routePoints = default(VectorOffset);
    if (_o.RoutePoints != null) {
      var __routePoints = new StringOffset[_o.RoutePoints.Count];
      for (var _j = 0; _j < __routePoints.Length; ++_j) { __routePoints[_j] = builder.CreateString(_o.RoutePoints[_j]); }
      _routePoints = CreateRoutePointsVector(builder, __routePoints);
    }
    var _altitudeBlocks = default(VectorOffset);
    if (_o.AltitudeBlocks != null) {
      var __altitudeBlocks = new StringOffset[_o.AltitudeBlocks.Count];
      for (var _j = 0; _j < __altitudeBlocks.Length; ++_j) { __altitudeBlocks[_j] = builder.CreateString(_o.AltitudeBlocks[_j]); }
      _altitudeBlocks = CreateAltitudeBlocksVector(builder, __altitudeBlocks);
    }
    var _poc = default(VectorOffset);
    if (_o.Poc != null) {
      var __poc = new StringOffset[_o.Poc.Count];
      for (var _j = 0; _j < __poc.Length; ++_j) { __poc[_j] = builder.CreateString(_o.Poc[_j]); }
      _poc = CreatePocVector(builder, __poc);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateTrackRoute_Ingest(
      builder,
      _id,
      _classificationMarking,
      _type,
      _externalId,
      _direction,
      _creatingOrg,
      _locationTrackId,
      _trackId,
      _trackName,
      _shortName,
      _typeCode,
      _regionCode,
      _regionName,
      _apxBeaconCode,
      _receiverTankerCHCode,
      _apnSetting,
      _sic,
      _reviewDate,
      _lastUsedDate,
      _lastUpdateDate,
      _o.PriFreq,
      _o.SecFreq,
      _artccMessage,
      _schedulerOrgName,
      _schedulerOrgUnit,
      _effectiveDate,
      _routePoints,
      _altitudeBlocks,
      _poc,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class TrackRoute_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string ExternalId { get; set; }
  public string Direction { get; set; }
  public string CreatingOrg { get; set; }
  public string LocationTrackId { get; set; }
  public string TrackId { get; set; }
  public string TrackName { get; set; }
  public string ShortName { get; set; }
  public string TypeCode { get; set; }
  public string RegionCode { get; set; }
  public string RegionName { get; set; }
  public string ApxBeaconCode { get; set; }
  public string ReceiverTankerCHCode { get; set; }
  public string ApnSetting { get; set; }
  public string Sic { get; set; }
  public string ReviewDate { get; set; }
  public string LastUsedDate { get; set; }
  public string LastUpdateDate { get; set; }
  public double PriFreq { get; set; }
  public double SecFreq { get; set; }
  public string ArtccMessage { get; set; }
  public string SchedulerOrgName { get; set; }
  public string SchedulerOrgUnit { get; set; }
  public string EffectiveDate { get; set; }
  public List<string> RoutePoints { get; set; }
  public List<string> AltitudeBlocks { get; set; }
  public List<string> Poc { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public TrackRoute_Ingest_dataMode_Enum DataMode { get; set; }

  public TrackRoute_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.ExternalId = null;
    this.Direction = null;
    this.CreatingOrg = null;
    this.LocationTrackId = null;
    this.TrackId = null;
    this.TrackName = null;
    this.ShortName = null;
    this.TypeCode = null;
    this.RegionCode = null;
    this.RegionName = null;
    this.ApxBeaconCode = null;
    this.ReceiverTankerCHCode = null;
    this.ApnSetting = null;
    this.Sic = null;
    this.ReviewDate = null;
    this.LastUsedDate = null;
    this.LastUpdateDate = null;
    this.PriFreq = 0.0;
    this.SecFreq = 0.0;
    this.ArtccMessage = null;
    this.SchedulerOrgName = null;
    this.SchedulerOrgUnit = null;
    this.EffectiveDate = null;
    this.RoutePoints = null;
    this.AltitudeBlocks = null;
    this.Poc = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = TrackRoute_Ingest_dataMode_Enum.REAL;
  }
  public static TrackRoute_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return TrackRoute_Ingest.GetRootAsTrackRoute_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    TrackRoute_Ingest.FinishTrackRoute_IngestBuffer(fbb, TrackRoute_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class TrackRoute_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Type*/, false)
      && verifier.VerifyString(tablePos, 10 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 12 /*Direction*/, false)
      && verifier.VerifyString(tablePos, 14 /*CreatingOrg*/, false)
      && verifier.VerifyString(tablePos, 16 /*LocationTrackId*/, false)
      && verifier.VerifyString(tablePos, 18 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 20 /*TrackName*/, false)
      && verifier.VerifyString(tablePos, 22 /*ShortName*/, false)
      && verifier.VerifyString(tablePos, 24 /*TypeCode*/, false)
      && verifier.VerifyString(tablePos, 26 /*RegionCode*/, false)
      && verifier.VerifyString(tablePos, 28 /*RegionName*/, false)
      && verifier.VerifyString(tablePos, 30 /*ApxBeaconCode*/, false)
      && verifier.VerifyString(tablePos, 32 /*ReceiverTankerCHCode*/, false)
      && verifier.VerifyString(tablePos, 34 /*ApnSetting*/, false)
      && verifier.VerifyString(tablePos, 36 /*Sic*/, false)
      && verifier.VerifyString(tablePos, 38 /*ReviewDate*/, false)
      && verifier.VerifyString(tablePos, 40 /*LastUsedDate*/, false)
      && verifier.VerifyString(tablePos, 42 /*LastUpdateDate*/, false)
      && verifier.VerifyField(tablePos, 44 /*PriFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*SecFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 48 /*ArtccMessage*/, false)
      && verifier.VerifyString(tablePos, 50 /*SchedulerOrgName*/, false)
      && verifier.VerifyString(tablePos, 52 /*SchedulerOrgUnit*/, false)
      && verifier.VerifyString(tablePos, 54 /*EffectiveDate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 56 /*RoutePoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*AltitudeBlocks*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 60 /*Poc*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 64 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 66 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 68 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 70 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 72 /*Source*/, false)
      && verifier.VerifyString(tablePos, 74 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 76 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 78 /*DataMode*/, 1 /*TrackRoute_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
