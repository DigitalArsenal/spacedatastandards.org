// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
public struct SARObservation_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SARObservation_Abridged GetRootAsSARObservation_Abridged(ByteBuffer _bb) { return GetRootAsSARObservation_Abridged(_bb, new SARObservation_Abridged()); }
  public static SARObservation_Abridged GetRootAsSARObservation_Abridged(ByteBuffer _bb, SARObservation_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SARObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SARO"); }
  public static bool VerifySARObservation_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SARO", false, SARObservation_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SARObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SAROBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the spacecraft hosting the sensor associated with this collection.
  /// Example: /// Example: 36036
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
  /// Example: /// Example: 36036
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: 36036
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 36036-1L
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(14); }
  /// Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: SMOS-1L
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: EXTERNAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier to indicate the specific collection tasking which produced this observation.
  /// Example: /// Example: COLLECTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CollectionId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCollectionIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCollectionIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Identifier of the specific detection within a collection which produced this observation.
  /// Example: /// Example: DETECTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DetectionId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectionIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDetectionIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDetectionIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Collection start time in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2023-04-22T17:35:00.123456Z
  /// Constraints: No constraints specified.
  public string CollectionStart { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionStartBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCollectionStartBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCollectionStartArray() { return __p.__vector_as_array<byte>(24); }
  /// Collection end time in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2023-04-22T17:38:10.20177Z
  /// Constraints: No constraints specified.
  public string CollectionEnd { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionEndBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCollectionEndBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCollectionEndArray() { return __p.__vector_as_array<byte>(26); }
  /// The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2023-04-22T17:36:35.100885Z
  /// Constraints: No constraints specified.
  public string CenterTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCenterTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCenterTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCenterTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// The detection start time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2023-07-08T17:35:01.615396Z
  /// Constraints: No constraints specified.
  public string DetectionStart { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectionStartBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetDetectionStartBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetDetectionStartArray() { return __p.__vector_as_array<byte>(30); }
  /// The detection end time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2023-07-08T17:35:20.77219Z
  /// Constraints: No constraints specified.
  public string DetectionEnd { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectionEndBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetDetectionEndBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetDetectionEndArray() { return __p.__vector_as_array<byte>(32); }
  /// The duration, in seconds, of this detection.
  /// Example: /// Example: 79.156794
  /// Constraints: No constraints specified.
  public double DwellTime { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
  /// Example: /// Example: ASCENDING
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string OrbitState { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrbitStateBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOrbitStateBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOrbitStateArray() { return __p.__vector_as_array<byte>(36); }
  /// Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
  /// Example: /// Example: SPOTLIGHT
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string SarMode { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSarModeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSarModeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSarModeArray() { return __p.__vector_as_array<byte>(38); }
  /// Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: L
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string OperatingBand { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperatingBandBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOperatingBandBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOperatingBandArray() { return __p.__vector_as_array<byte>(40); }
  /// The operating frequency, in Mhz, for the collection.
  /// Example: /// Example: 2345.6
  /// Constraints: No constraints specified.
  public double OperatingFreq { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Snr { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string TxPolarization { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTxPolarizationBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetTxPolarizationBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetTxPolarizationArray() { return __p.__vector_as_array<byte>(46); }
  /// Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string RxPolarization { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRxPolarizationBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetRxPolarizationBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetRxPolarizationArray() { return __p.__vector_as_array<byte>(48); }
  /// The graze angle (also referred to as look angle) for the collection in degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double GrazeAngle { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The center incidence angle in degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double IncidenceAngle { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The squint angle for the collection in degrees.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double SquintAngle { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The bandwidth frequency of the pulse in Mhz.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  public double PulseBandwidth { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The duration of a pulse in seconds.
  /// Example: /// Example: 1.1e-05
  /// Constraints: No constraints specified.
  public double PulseDuration { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Required sweep angle for the continuous spot scene in degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double ContinuousSpotAngle { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Slant distance from sensor to center point of imaging event in kilometers.
  /// Example: /// Example: 60.1
  /// Constraints: No constraints specified.
  public double SlantRange { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Specifies the closest range, in kilometers, from the flight path to target during the collection.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  public double NearRange { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Specifies the farthest range, in kilometers, from the flight path to target during the collection.
  /// Example: /// Example: 34.1
  /// Constraints: No constraints specified.
  public double FarRange { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The length of the collection as projected on the ground in kilometers.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  public double SwathLength { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Atext { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(70); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string Agjson { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(72); }
  /// Type of region as projected on the ground (POLYGON, POINT, LINE).
  /// Example: /// Example: POLYGON
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(74); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The pixel spacing in the range direction measured in meters.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double SpacingRange { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The pixel spacing in the azimuth direction measured in meters.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double SpacingAzimuth { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The number of looks in the azimuth direction.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int LooksAzimuth { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of looks in the range direction.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int LooksRange { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The resolution in the range direction measured in meters.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double ResolutionRange { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The resolution in the azimuth direction measured in meters.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  public double ResolutionAzimuth { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The antenna pointing direction (LEFT, RIGHT).
  /// Example: /// Example: RIGHT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string ObDirection { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObDirectionBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetObDirectionBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetObDirectionArray() { return __p.__vector_as_array<byte>(92); }
  /// The coordinate system used for the sensor velocity and target position vectors for the collection.
  /// Example: /// Example: ECEF
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string CoordSys { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoordSysBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetCoordSysBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetCoordSysArray() { return __p.__vector_as_array<byte>(94); }
  /// The collection target X position in kilometers.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Targetposx { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The collection target Y position in kilometers.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Targetposy { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The collection target Z position in kilometers.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Targetposz { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude during collection in kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor platform X-velocity during collection in kilometers/second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelx { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor platform Y-velocity during collection in kilometers/second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvely { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor platform Z-velocity during collection in kilometers/second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelz { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double SenlatStart { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double SenlonStart { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double SenlatEnd { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double SenlonEnd { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(118); }
  /// Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['ESID', 'GROUNDIMAGE']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(120); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
  /// Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(122); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(122); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-04-22T17:51:40.854Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(124); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(126); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(128); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(130); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(132); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(134); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SARObservation_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(136); return o != 0 ? (SARObservation_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SARObservation_Abridged_dataMode_Enum.REAL; } }

  public static Offset<SARObservation_Abridged> CreateSARObservation_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset collectionIdOffset = default(StringOffset),
      StringOffset detectionIdOffset = default(StringOffset),
      StringOffset collectionStartOffset = default(StringOffset),
      StringOffset collectionEndOffset = default(StringOffset),
      StringOffset centerTimeOffset = default(StringOffset),
      StringOffset detectionStartOffset = default(StringOffset),
      StringOffset detectionEndOffset = default(StringOffset),
      double dwellTime = 0.0,
      StringOffset orbitStateOffset = default(StringOffset),
      StringOffset sarModeOffset = default(StringOffset),
      StringOffset operatingBandOffset = default(StringOffset),
      double operatingFreq = 0.0,
      double snr = 0.0,
      StringOffset txPolarizationOffset = default(StringOffset),
      StringOffset rxPolarizationOffset = default(StringOffset),
      double grazeAngle = 0.0,
      double incidenceAngle = 0.0,
      double squintAngle = 0.0,
      double pulseBandwidth = 0.0,
      double pulseDuration = 0.0,
      double continuousSpotAngle = 0.0,
      double slantRange = 0.0,
      double nearRange = 0.0,
      double farRange = 0.0,
      double swathLength = 0.0,
      StringOffset atextOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atypeOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      double spacingRange = 0.0,
      double spacingAzimuth = 0.0,
      int looksAzimuth = 0,
      int looksRange = 0,
      double resolutionRange = 0.0,
      double resolutionAzimuth = 0.0,
      StringOffset obDirectionOffset = default(StringOffset),
      StringOffset coordSysOffset = default(StringOffset),
      double targetposx = 0.0,
      double targetposy = 0.0,
      double targetposz = 0.0,
      double senalt = 0.0,
      double senvelx = 0.0,
      double senvely = 0.0,
      double senvelz = 0.0,
      double senlatStart = 0.0,
      double senlonStart = 0.0,
      double senlatEnd = 0.0,
      double senlonEnd = 0.0,
      StringOffset transactionIdOffset = default(StringOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      SARObservation_Abridged_dataMode_Enum dataMode = SARObservation_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(67);
    SARObservation_Abridged.AddSenlonEnd(builder, senlonEnd);
    SARObservation_Abridged.AddSenlatEnd(builder, senlatEnd);
    SARObservation_Abridged.AddSenlonStart(builder, senlonStart);
    SARObservation_Abridged.AddSenlatStart(builder, senlatStart);
    SARObservation_Abridged.AddSenvelz(builder, senvelz);
    SARObservation_Abridged.AddSenvely(builder, senvely);
    SARObservation_Abridged.AddSenvelx(builder, senvelx);
    SARObservation_Abridged.AddSenalt(builder, senalt);
    SARObservation_Abridged.AddTargetposz(builder, targetposz);
    SARObservation_Abridged.AddTargetposy(builder, targetposy);
    SARObservation_Abridged.AddTargetposx(builder, targetposx);
    SARObservation_Abridged.AddResolutionAzimuth(builder, resolutionAzimuth);
    SARObservation_Abridged.AddResolutionRange(builder, resolutionRange);
    SARObservation_Abridged.AddSpacingAzimuth(builder, spacingAzimuth);
    SARObservation_Abridged.AddSpacingRange(builder, spacingRange);
    SARObservation_Abridged.AddSwathLength(builder, swathLength);
    SARObservation_Abridged.AddFarRange(builder, farRange);
    SARObservation_Abridged.AddNearRange(builder, nearRange);
    SARObservation_Abridged.AddSlantRange(builder, slantRange);
    SARObservation_Abridged.AddContinuousSpotAngle(builder, continuousSpotAngle);
    SARObservation_Abridged.AddPulseDuration(builder, pulseDuration);
    SARObservation_Abridged.AddPulseBandwidth(builder, pulseBandwidth);
    SARObservation_Abridged.AddSquintAngle(builder, squintAngle);
    SARObservation_Abridged.AddIncidenceAngle(builder, incidenceAngle);
    SARObservation_Abridged.AddGrazeAngle(builder, grazeAngle);
    SARObservation_Abridged.AddSnr(builder, snr);
    SARObservation_Abridged.AddOperatingFreq(builder, operatingFreq);
    SARObservation_Abridged.AddDwellTime(builder, dwellTime);
    SARObservation_Abridged.AddSourceDL(builder, sourceDLOffset);
    SARObservation_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    SARObservation_Abridged.AddOrigin(builder, originOffset);
    SARObservation_Abridged.AddSource(builder, sourceOffset);
    SARObservation_Abridged.AddCreatedBy(builder, createdByOffset);
    SARObservation_Abridged.AddCreatedAt(builder, createdAtOffset);
    SARObservation_Abridged.AddSrcIds(builder, srcIdsOffset);
    SARObservation_Abridged.AddSrcTyps(builder, srcTypsOffset);
    SARObservation_Abridged.AddTransactionId(builder, transactionIdOffset);
    SARObservation_Abridged.AddCoordSys(builder, coordSysOffset);
    SARObservation_Abridged.AddObDirection(builder, obDirectionOffset);
    SARObservation_Abridged.AddLooksRange(builder, looksRange);
    SARObservation_Abridged.AddLooksAzimuth(builder, looksAzimuth);
    SARObservation_Abridged.AddAsrid(builder, asrid);
    SARObservation_Abridged.AddAndims(builder, andims);
    SARObservation_Abridged.AddAtype(builder, atypeOffset);
    SARObservation_Abridged.AddAgjson(builder, agjsonOffset);
    SARObservation_Abridged.AddAtext(builder, atextOffset);
    SARObservation_Abridged.AddRxPolarization(builder, rxPolarizationOffset);
    SARObservation_Abridged.AddTxPolarization(builder, txPolarizationOffset);
    SARObservation_Abridged.AddOperatingBand(builder, operatingBandOffset);
    SARObservation_Abridged.AddSarMode(builder, sarModeOffset);
    SARObservation_Abridged.AddOrbitState(builder, orbitStateOffset);
    SARObservation_Abridged.AddDetectionEnd(builder, detectionEndOffset);
    SARObservation_Abridged.AddDetectionStart(builder, detectionStartOffset);
    SARObservation_Abridged.AddCenterTime(builder, centerTimeOffset);
    SARObservation_Abridged.AddCollectionEnd(builder, collectionEndOffset);
    SARObservation_Abridged.AddCollectionStart(builder, collectionStartOffset);
    SARObservation_Abridged.AddDetectionId(builder, detectionIdOffset);
    SARObservation_Abridged.AddCollectionId(builder, collectionIdOffset);
    SARObservation_Abridged.AddExternalId(builder, externalIdOffset);
    SARObservation_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    SARObservation_Abridged.AddIdSensor(builder, idSensorOffset);
    SARObservation_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    SARObservation_Abridged.AddSatNo(builder, satNo);
    SARObservation_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    SARObservation_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    SARObservation_Abridged.AddId(builder, idOffset);
    SARObservation_Abridged.AddDataMode(builder, dataMode);
    return SARObservation_Abridged.EndSARObservation_Abridged(builder);
  }

  public static void StartSARObservation_Abridged(FlatBufferBuilder builder) { builder.StartTable(67); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(5, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(6, origSensorIdOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(7, externalIdOffset.Value, 0); }
  public static void AddCollectionId(FlatBufferBuilder builder, StringOffset collectionIdOffset) { builder.AddOffset(8, collectionIdOffset.Value, 0); }
  public static void AddDetectionId(FlatBufferBuilder builder, StringOffset detectionIdOffset) { builder.AddOffset(9, detectionIdOffset.Value, 0); }
  public static void AddCollectionStart(FlatBufferBuilder builder, StringOffset collectionStartOffset) { builder.AddOffset(10, collectionStartOffset.Value, 0); }
  public static void AddCollectionEnd(FlatBufferBuilder builder, StringOffset collectionEndOffset) { builder.AddOffset(11, collectionEndOffset.Value, 0); }
  public static void AddCenterTime(FlatBufferBuilder builder, StringOffset centerTimeOffset) { builder.AddOffset(12, centerTimeOffset.Value, 0); }
  public static void AddDetectionStart(FlatBufferBuilder builder, StringOffset detectionStartOffset) { builder.AddOffset(13, detectionStartOffset.Value, 0); }
  public static void AddDetectionEnd(FlatBufferBuilder builder, StringOffset detectionEndOffset) { builder.AddOffset(14, detectionEndOffset.Value, 0); }
  public static void AddDwellTime(FlatBufferBuilder builder, double dwellTime) { builder.AddDouble(15, dwellTime, 0.0); }
  public static void AddOrbitState(FlatBufferBuilder builder, StringOffset orbitStateOffset) { builder.AddOffset(16, orbitStateOffset.Value, 0); }
  public static void AddSarMode(FlatBufferBuilder builder, StringOffset sarModeOffset) { builder.AddOffset(17, sarModeOffset.Value, 0); }
  public static void AddOperatingBand(FlatBufferBuilder builder, StringOffset operatingBandOffset) { builder.AddOffset(18, operatingBandOffset.Value, 0); }
  public static void AddOperatingFreq(FlatBufferBuilder builder, double operatingFreq) { builder.AddDouble(19, operatingFreq, 0.0); }
  public static void AddSnr(FlatBufferBuilder builder, double snr) { builder.AddDouble(20, snr, 0.0); }
  public static void AddTxPolarization(FlatBufferBuilder builder, StringOffset txPolarizationOffset) { builder.AddOffset(21, txPolarizationOffset.Value, 0); }
  public static void AddRxPolarization(FlatBufferBuilder builder, StringOffset rxPolarizationOffset) { builder.AddOffset(22, rxPolarizationOffset.Value, 0); }
  public static void AddGrazeAngle(FlatBufferBuilder builder, double grazeAngle) { builder.AddDouble(23, grazeAngle, 0.0); }
  public static void AddIncidenceAngle(FlatBufferBuilder builder, double incidenceAngle) { builder.AddDouble(24, incidenceAngle, 0.0); }
  public static void AddSquintAngle(FlatBufferBuilder builder, double squintAngle) { builder.AddDouble(25, squintAngle, 0.0); }
  public static void AddPulseBandwidth(FlatBufferBuilder builder, double pulseBandwidth) { builder.AddDouble(26, pulseBandwidth, 0.0); }
  public static void AddPulseDuration(FlatBufferBuilder builder, double pulseDuration) { builder.AddDouble(27, pulseDuration, 0.0); }
  public static void AddContinuousSpotAngle(FlatBufferBuilder builder, double continuousSpotAngle) { builder.AddDouble(28, continuousSpotAngle, 0.0); }
  public static void AddSlantRange(FlatBufferBuilder builder, double slantRange) { builder.AddDouble(29, slantRange, 0.0); }
  public static void AddNearRange(FlatBufferBuilder builder, double nearRange) { builder.AddDouble(30, nearRange, 0.0); }
  public static void AddFarRange(FlatBufferBuilder builder, double farRange) { builder.AddDouble(31, farRange, 0.0); }
  public static void AddSwathLength(FlatBufferBuilder builder, double swathLength) { builder.AddDouble(32, swathLength, 0.0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(33, atextOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(34, agjsonOffset.Value, 0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(35, atypeOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(36, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(37, asrid, 0); }
  public static void AddSpacingRange(FlatBufferBuilder builder, double spacingRange) { builder.AddDouble(38, spacingRange, 0.0); }
  public static void AddSpacingAzimuth(FlatBufferBuilder builder, double spacingAzimuth) { builder.AddDouble(39, spacingAzimuth, 0.0); }
  public static void AddLooksAzimuth(FlatBufferBuilder builder, int looksAzimuth) { builder.AddInt(40, looksAzimuth, 0); }
  public static void AddLooksRange(FlatBufferBuilder builder, int looksRange) { builder.AddInt(41, looksRange, 0); }
  public static void AddResolutionRange(FlatBufferBuilder builder, double resolutionRange) { builder.AddDouble(42, resolutionRange, 0.0); }
  public static void AddResolutionAzimuth(FlatBufferBuilder builder, double resolutionAzimuth) { builder.AddDouble(43, resolutionAzimuth, 0.0); }
  public static void AddObDirection(FlatBufferBuilder builder, StringOffset obDirectionOffset) { builder.AddOffset(44, obDirectionOffset.Value, 0); }
  public static void AddCoordSys(FlatBufferBuilder builder, StringOffset coordSysOffset) { builder.AddOffset(45, coordSysOffset.Value, 0); }
  public static void AddTargetposx(FlatBufferBuilder builder, double targetposx) { builder.AddDouble(46, targetposx, 0.0); }
  public static void AddTargetposy(FlatBufferBuilder builder, double targetposy) { builder.AddDouble(47, targetposy, 0.0); }
  public static void AddTargetposz(FlatBufferBuilder builder, double targetposz) { builder.AddDouble(48, targetposz, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(49, senalt, 0.0); }
  public static void AddSenvelx(FlatBufferBuilder builder, double senvelx) { builder.AddDouble(50, senvelx, 0.0); }
  public static void AddSenvely(FlatBufferBuilder builder, double senvely) { builder.AddDouble(51, senvely, 0.0); }
  public static void AddSenvelz(FlatBufferBuilder builder, double senvelz) { builder.AddDouble(52, senvelz, 0.0); }
  public static void AddSenlatStart(FlatBufferBuilder builder, double senlatStart) { builder.AddDouble(53, senlatStart, 0.0); }
  public static void AddSenlonStart(FlatBufferBuilder builder, double senlonStart) { builder.AddDouble(54, senlonStart, 0.0); }
  public static void AddSenlatEnd(FlatBufferBuilder builder, double senlatEnd) { builder.AddDouble(55, senlatEnd, 0.0); }
  public static void AddSenlonEnd(FlatBufferBuilder builder, double senlonEnd) { builder.AddDouble(56, senlonEnd, 0.0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(57, transactionIdOffset.Value, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(58, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(59, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(60, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(61, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(62, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(63, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(64, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(65, sourceDLOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SARObservation_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(66, (sbyte)dataMode, 0); }
  public static Offset<SARObservation_Abridged> EndSARObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SARObservation_Abridged>(o);
  }
  public static void FinishSARObservation_AbridgedBuffer(FlatBufferBuilder builder, Offset<SARObservation_Abridged> offset) { builder.Finish(offset.Value, "SARO"); }
  public static void FinishSizePrefixedSARObservation_AbridgedBuffer(FlatBufferBuilder builder, Offset<SARObservation_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SARO"); }
  public SARObservation_AbridgedT UnPack() {
    var _o = new SARObservation_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SARObservation_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.ExternalId = this.ExternalId;
    _o.CollectionId = this.CollectionId;
    _o.DetectionId = this.DetectionId;
    _o.CollectionStart = this.CollectionStart;
    _o.CollectionEnd = this.CollectionEnd;
    _o.CenterTime = this.CenterTime;
    _o.DetectionStart = this.DetectionStart;
    _o.DetectionEnd = this.DetectionEnd;
    _o.DwellTime = this.DwellTime;
    _o.OrbitState = this.OrbitState;
    _o.SarMode = this.SarMode;
    _o.OperatingBand = this.OperatingBand;
    _o.OperatingFreq = this.OperatingFreq;
    _o.Snr = this.Snr;
    _o.TxPolarization = this.TxPolarization;
    _o.RxPolarization = this.RxPolarization;
    _o.GrazeAngle = this.GrazeAngle;
    _o.IncidenceAngle = this.IncidenceAngle;
    _o.SquintAngle = this.SquintAngle;
    _o.PulseBandwidth = this.PulseBandwidth;
    _o.PulseDuration = this.PulseDuration;
    _o.ContinuousSpotAngle = this.ContinuousSpotAngle;
    _o.SlantRange = this.SlantRange;
    _o.NearRange = this.NearRange;
    _o.FarRange = this.FarRange;
    _o.SwathLength = this.SwathLength;
    _o.Atext = this.Atext;
    _o.Agjson = this.Agjson;
    _o.Atype = this.Atype;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.SpacingRange = this.SpacingRange;
    _o.SpacingAzimuth = this.SpacingAzimuth;
    _o.LooksAzimuth = this.LooksAzimuth;
    _o.LooksRange = this.LooksRange;
    _o.ResolutionRange = this.ResolutionRange;
    _o.ResolutionAzimuth = this.ResolutionAzimuth;
    _o.ObDirection = this.ObDirection;
    _o.CoordSys = this.CoordSys;
    _o.Targetposx = this.Targetposx;
    _o.Targetposy = this.Targetposy;
    _o.Targetposz = this.Targetposz;
    _o.Senalt = this.Senalt;
    _o.Senvelx = this.Senvelx;
    _o.Senvely = this.Senvely;
    _o.Senvelz = this.Senvelz;
    _o.SenlatStart = this.SenlatStart;
    _o.SenlonStart = this.SenlonStart;
    _o.SenlatEnd = this.SenlatEnd;
    _o.SenlonEnd = this.SenlonEnd;
    _o.TransactionId = this.TransactionId;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.DataMode = this.DataMode;
  }
  public static Offset<SARObservation_Abridged> Pack(FlatBufferBuilder builder, SARObservation_AbridgedT _o) {
    if (_o == null) return default(Offset<SARObservation_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _collectionId = _o.CollectionId == null ? default(StringOffset) : builder.CreateString(_o.CollectionId);
    var _detectionId = _o.DetectionId == null ? default(StringOffset) : builder.CreateString(_o.DetectionId);
    var _collectionStart = _o.CollectionStart == null ? default(StringOffset) : builder.CreateString(_o.CollectionStart);
    var _collectionEnd = _o.CollectionEnd == null ? default(StringOffset) : builder.CreateString(_o.CollectionEnd);
    var _centerTime = _o.CenterTime == null ? default(StringOffset) : builder.CreateString(_o.CenterTime);
    var _detectionStart = _o.DetectionStart == null ? default(StringOffset) : builder.CreateString(_o.DetectionStart);
    var _detectionEnd = _o.DetectionEnd == null ? default(StringOffset) : builder.CreateString(_o.DetectionEnd);
    var _orbitState = _o.OrbitState == null ? default(StringOffset) : builder.CreateString(_o.OrbitState);
    var _sarMode = _o.SarMode == null ? default(StringOffset) : builder.CreateString(_o.SarMode);
    var _operatingBand = _o.OperatingBand == null ? default(StringOffset) : builder.CreateString(_o.OperatingBand);
    var _txPolarization = _o.TxPolarization == null ? default(StringOffset) : builder.CreateString(_o.TxPolarization);
    var _rxPolarization = _o.RxPolarization == null ? default(StringOffset) : builder.CreateString(_o.RxPolarization);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _obDirection = _o.ObDirection == null ? default(StringOffset) : builder.CreateString(_o.ObDirection);
    var _coordSys = _o.CoordSys == null ? default(StringOffset) : builder.CreateString(_o.CoordSys);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    return CreateSARObservation_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _idSensor,
      _origSensorId,
      _externalId,
      _collectionId,
      _detectionId,
      _collectionStart,
      _collectionEnd,
      _centerTime,
      _detectionStart,
      _detectionEnd,
      _o.DwellTime,
      _orbitState,
      _sarMode,
      _operatingBand,
      _o.OperatingFreq,
      _o.Snr,
      _txPolarization,
      _rxPolarization,
      _o.GrazeAngle,
      _o.IncidenceAngle,
      _o.SquintAngle,
      _o.PulseBandwidth,
      _o.PulseDuration,
      _o.ContinuousSpotAngle,
      _o.SlantRange,
      _o.NearRange,
      _o.FarRange,
      _o.SwathLength,
      _atext,
      _agjson,
      _atype,
      _o.Andims,
      _o.Asrid,
      _o.SpacingRange,
      _o.SpacingAzimuth,
      _o.LooksAzimuth,
      _o.LooksRange,
      _o.ResolutionRange,
      _o.ResolutionAzimuth,
      _obDirection,
      _coordSys,
      _o.Targetposx,
      _o.Targetposy,
      _o.Targetposz,
      _o.Senalt,
      _o.Senvelx,
      _o.Senvely,
      _o.Senvelz,
      _o.SenlatStart,
      _o.SenlonStart,
      _o.SenlatEnd,
      _o.SenlonEnd,
      _transactionId,
      _srcTyps,
      _srcIds,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _o.DataMode);
  }
}

public class SARObservation_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string ExternalId { get; set; }
  public string CollectionId { get; set; }
  public string DetectionId { get; set; }
  public string CollectionStart { get; set; }
  public string CollectionEnd { get; set; }
  public string CenterTime { get; set; }
  public string DetectionStart { get; set; }
  public string DetectionEnd { get; set; }
  public double DwellTime { get; set; }
  public string OrbitState { get; set; }
  public string SarMode { get; set; }
  public string OperatingBand { get; set; }
  public double OperatingFreq { get; set; }
  public double Snr { get; set; }
  public string TxPolarization { get; set; }
  public string RxPolarization { get; set; }
  public double GrazeAngle { get; set; }
  public double IncidenceAngle { get; set; }
  public double SquintAngle { get; set; }
  public double PulseBandwidth { get; set; }
  public double PulseDuration { get; set; }
  public double ContinuousSpotAngle { get; set; }
  public double SlantRange { get; set; }
  public double NearRange { get; set; }
  public double FarRange { get; set; }
  public double SwathLength { get; set; }
  public string Atext { get; set; }
  public string Agjson { get; set; }
  public string Atype { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public double SpacingRange { get; set; }
  public double SpacingAzimuth { get; set; }
  public int LooksAzimuth { get; set; }
  public int LooksRange { get; set; }
  public double ResolutionRange { get; set; }
  public double ResolutionAzimuth { get; set; }
  public string ObDirection { get; set; }
  public string CoordSys { get; set; }
  public double Targetposx { get; set; }
  public double Targetposy { get; set; }
  public double Targetposz { get; set; }
  public double Senalt { get; set; }
  public double Senvelx { get; set; }
  public double Senvely { get; set; }
  public double Senvelz { get; set; }
  public double SenlatStart { get; set; }
  public double SenlonStart { get; set; }
  public double SenlatEnd { get; set; }
  public double SenlonEnd { get; set; }
  public string TransactionId { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public SARObservation_Abridged_dataMode_Enum DataMode { get; set; }

  public SARObservation_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.ExternalId = null;
    this.CollectionId = null;
    this.DetectionId = null;
    this.CollectionStart = null;
    this.CollectionEnd = null;
    this.CenterTime = null;
    this.DetectionStart = null;
    this.DetectionEnd = null;
    this.DwellTime = 0.0;
    this.OrbitState = null;
    this.SarMode = null;
    this.OperatingBand = null;
    this.OperatingFreq = 0.0;
    this.Snr = 0.0;
    this.TxPolarization = null;
    this.RxPolarization = null;
    this.GrazeAngle = 0.0;
    this.IncidenceAngle = 0.0;
    this.SquintAngle = 0.0;
    this.PulseBandwidth = 0.0;
    this.PulseDuration = 0.0;
    this.ContinuousSpotAngle = 0.0;
    this.SlantRange = 0.0;
    this.NearRange = 0.0;
    this.FarRange = 0.0;
    this.SwathLength = 0.0;
    this.Atext = null;
    this.Agjson = null;
    this.Atype = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.SpacingRange = 0.0;
    this.SpacingAzimuth = 0.0;
    this.LooksAzimuth = 0;
    this.LooksRange = 0;
    this.ResolutionRange = 0.0;
    this.ResolutionAzimuth = 0.0;
    this.ObDirection = null;
    this.CoordSys = null;
    this.Targetposx = 0.0;
    this.Targetposy = 0.0;
    this.Targetposz = 0.0;
    this.Senalt = 0.0;
    this.Senvelx = 0.0;
    this.Senvely = 0.0;
    this.Senvelz = 0.0;
    this.SenlatStart = 0.0;
    this.SenlonStart = 0.0;
    this.SenlatEnd = 0.0;
    this.SenlonEnd = 0.0;
    this.TransactionId = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.DataMode = SARObservation_Abridged_dataMode_Enum.REAL;
  }
  public static SARObservation_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return SARObservation_Abridged.GetRootAsSARObservation_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SARObservation_Abridged.FinishSARObservation_AbridgedBuffer(fbb, SARObservation_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SARObservation_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 16 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 18 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 20 /*CollectionId*/, false)
      && verifier.VerifyString(tablePos, 22 /*DetectionId*/, false)
      && verifier.VerifyString(tablePos, 24 /*CollectionStart*/, false)
      && verifier.VerifyString(tablePos, 26 /*CollectionEnd*/, false)
      && verifier.VerifyString(tablePos, 28 /*CenterTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*DetectionStart*/, false)
      && verifier.VerifyString(tablePos, 32 /*DetectionEnd*/, false)
      && verifier.VerifyField(tablePos, 34 /*DwellTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 36 /*OrbitState*/, false)
      && verifier.VerifyString(tablePos, 38 /*SarMode*/, false)
      && verifier.VerifyString(tablePos, 40 /*OperatingBand*/, false)
      && verifier.VerifyField(tablePos, 42 /*OperatingFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Snr*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 46 /*TxPolarization*/, false)
      && verifier.VerifyString(tablePos, 48 /*RxPolarization*/, false)
      && verifier.VerifyField(tablePos, 50 /*GrazeAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*IncidenceAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*SquintAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*PulseBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*PulseDuration*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*ContinuousSpotAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*SlantRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*NearRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*FarRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*SwathLength*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 70 /*Atext*/, false)
      && verifier.VerifyString(tablePos, 72 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 74 /*Atype*/, false)
      && verifier.VerifyField(tablePos, 76 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*SpacingRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*SpacingAzimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*LooksAzimuth*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*LooksRange*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*ResolutionRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*ResolutionAzimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 92 /*ObDirection*/, false)
      && verifier.VerifyString(tablePos, 94 /*CoordSys*/, false)
      && verifier.VerifyField(tablePos, 96 /*Targetposx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*Targetposy*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*Targetposz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*Senvelx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*Senvely*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*Senvelz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*SenlatStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*SenlonStart*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*SenlatEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*SenlonEnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 118 /*TransactionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 120 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 122 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 124 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 126 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 128 /*Source*/, false)
      && verifier.VerifyString(tablePos, 130 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 132 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 134 /*SourceDL*/, false)
      && verifier.VerifyField(tablePos, 136 /*DataMode*/, 1 /*SARObservation_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
