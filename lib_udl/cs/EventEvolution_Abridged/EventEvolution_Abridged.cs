// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
public struct EventEvolution_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventEvolution_Abridged GetRootAsEventEvolution_Abridged(ByteBuffer _bb) { return GetRootAsEventEvolution_Abridged(_bb, new EventEvolution_Abridged()); }
  public static EventEvolution_Abridged GetRootAsEventEvolution_Abridged(ByteBuffer _bb, EventEvolution_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EventEvolution_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVEN"); }
  public static bool VerifyEventEvolution_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVEN", false, EventEvolution_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventEvolution_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EVENT_EVOL_ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
  /// Example: /// Example: EVENT_ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string EventId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(8); }
  /// The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
  /// Example: /// Example: PROTEST
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Category { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(10); }
  /// Summary or description of the activity or event.
  /// Example: /// Example: Example summary of the event.
  /// Constraints: Minimum length = 1, Maximum length = 4096
  public string Summary { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSummaryBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSummaryBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSummaryArray() { return __p.__vector_as_array<byte>(12); }
  /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-12-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-12-03T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
  /// Example: /// Example: UNKNOWN
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Status { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(18); }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(20); }
  /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GeoAdminLevel1 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoAdminLevel1Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetGeoAdminLevel1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetGeoAdminLevel1Array() { return __p.__vector_as_array<byte>(22); }
  /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  /// Example: /// Example: El Paso County
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GeoAdminLevel2 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoAdminLevel2Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetGeoAdminLevel2Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetGeoAdminLevel2Array() { return __p.__vector_as_array<byte>(24); }
  /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GeoAdminLevel3 { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoAdminLevel3Bytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetGeoAdminLevel3Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetGeoAdminLevel3Array() { return __p.__vector_as_array<byte>(26); }
  /// Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Redact { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['AIS', 'CONJUNCTION']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
  /// Example: /// Example: Description of relationship between srcTyps and srcIds
  /// Constraints: Minimum length = 0, Maximum length = 2056
  public string DataDescription { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataDescriptionBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetDataDescriptionBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetDataDescriptionArray() { return __p.__vector_as_array<byte>(34); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Atext { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(36); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string Agjson { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(38); }
  /// Type of region as projected on the ground.
  /// Example: /// Example: POLYGON
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(40); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// List of URLs to before/after images of this point of interest entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  public string Url(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UrlLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-12-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(50); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(52); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(54); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(56); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(58); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EventEvolution_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(60); return o != 0 ? (EventEvolution_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EventEvolution_Abridged_dataMode_Enum.REAL; } }

  public static Offset<EventEvolution_Abridged> CreateEventEvolution_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset eventIdOffset = default(StringOffset),
      StringOffset categoryOffset = default(StringOffset),
      StringOffset summaryOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset geoAdminLevel1Offset = default(StringOffset),
      StringOffset geoAdminLevel2Offset = default(StringOffset),
      StringOffset geoAdminLevel3Offset = default(StringOffset),
      bool redact = false,
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset dataDescriptionOffset = default(StringOffset),
      StringOffset atextOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atypeOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      VectorOffset urlOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      EventEvolution_Abridged_dataMode_Enum dataMode = EventEvolution_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(29);
    EventEvolution_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    EventEvolution_Abridged.AddOrigin(builder, originOffset);
    EventEvolution_Abridged.AddSource(builder, sourceOffset);
    EventEvolution_Abridged.AddCreatedBy(builder, createdByOffset);
    EventEvolution_Abridged.AddCreatedAt(builder, createdAtOffset);
    EventEvolution_Abridged.AddTags(builder, tagsOffset);
    EventEvolution_Abridged.AddUrl(builder, urlOffset);
    EventEvolution_Abridged.AddAsrid(builder, asrid);
    EventEvolution_Abridged.AddAndims(builder, andims);
    EventEvolution_Abridged.AddAtype(builder, atypeOffset);
    EventEvolution_Abridged.AddAgjson(builder, agjsonOffset);
    EventEvolution_Abridged.AddAtext(builder, atextOffset);
    EventEvolution_Abridged.AddDataDescription(builder, dataDescriptionOffset);
    EventEvolution_Abridged.AddSrcIds(builder, srcIdsOffset);
    EventEvolution_Abridged.AddSrcTyps(builder, srcTypsOffset);
    EventEvolution_Abridged.AddGeoAdminLevel3(builder, geoAdminLevel3Offset);
    EventEvolution_Abridged.AddGeoAdminLevel2(builder, geoAdminLevel2Offset);
    EventEvolution_Abridged.AddGeoAdminLevel1(builder, geoAdminLevel1Offset);
    EventEvolution_Abridged.AddCountryCode(builder, countryCodeOffset);
    EventEvolution_Abridged.AddStatus(builder, statusOffset);
    EventEvolution_Abridged.AddEndTime(builder, endTimeOffset);
    EventEvolution_Abridged.AddStartTime(builder, startTimeOffset);
    EventEvolution_Abridged.AddSummary(builder, summaryOffset);
    EventEvolution_Abridged.AddCategory(builder, categoryOffset);
    EventEvolution_Abridged.AddEventId(builder, eventIdOffset);
    EventEvolution_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    EventEvolution_Abridged.AddId(builder, idOffset);
    EventEvolution_Abridged.AddDataMode(builder, dataMode);
    EventEvolution_Abridged.AddRedact(builder, redact);
    return EventEvolution_Abridged.EndEventEvolution_Abridged(builder);
  }

  public static void StartEventEvolution_Abridged(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) { builder.AddOffset(2, eventIdOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(3, categoryOffset.Value, 0); }
  public static void AddSummary(FlatBufferBuilder builder, StringOffset summaryOffset) { builder.AddOffset(4, summaryOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(5, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(6, endTimeOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(7, statusOffset.Value, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(8, countryCodeOffset.Value, 0); }
  public static void AddGeoAdminLevel1(FlatBufferBuilder builder, StringOffset geoAdminLevel1Offset) { builder.AddOffset(9, geoAdminLevel1Offset.Value, 0); }
  public static void AddGeoAdminLevel2(FlatBufferBuilder builder, StringOffset geoAdminLevel2Offset) { builder.AddOffset(10, geoAdminLevel2Offset.Value, 0); }
  public static void AddGeoAdminLevel3(FlatBufferBuilder builder, StringOffset geoAdminLevel3Offset) { builder.AddOffset(11, geoAdminLevel3Offset.Value, 0); }
  public static void AddRedact(FlatBufferBuilder builder, bool redact) { builder.AddBool(12, redact, false); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(13, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(14, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDataDescription(FlatBufferBuilder builder, StringOffset dataDescriptionOffset) { builder.AddOffset(15, dataDescriptionOffset.Value, 0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(16, atextOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(17, agjsonOffset.Value, 0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(18, atypeOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(19, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(20, asrid, 0); }
  public static void AddUrl(FlatBufferBuilder builder, VectorOffset urlOffset) { builder.AddOffset(21, urlOffset.Value, 0); }
  public static VectorOffset CreateUrlVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUrlVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUrlVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(22, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(23, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(24, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(25, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(26, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(27, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EventEvolution_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(28, (sbyte)dataMode, 0); }
  public static Offset<EventEvolution_Abridged> EndEventEvolution_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EventEvolution_Abridged>(o);
  }
  public static void FinishEventEvolution_AbridgedBuffer(FlatBufferBuilder builder, Offset<EventEvolution_Abridged> offset) { builder.Finish(offset.Value, "EVEN"); }
  public static void FinishSizePrefixedEventEvolution_AbridgedBuffer(FlatBufferBuilder builder, Offset<EventEvolution_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EVEN"); }
  public EventEvolution_AbridgedT UnPack() {
    var _o = new EventEvolution_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventEvolution_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.EventId = this.EventId;
    _o.Category = this.Category;
    _o.Summary = this.Summary;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.Status = this.Status;
    _o.CountryCode = this.CountryCode;
    _o.GeoAdminLevel1 = this.GeoAdminLevel1;
    _o.GeoAdminLevel2 = this.GeoAdminLevel2;
    _o.GeoAdminLevel3 = this.GeoAdminLevel3;
    _o.Redact = this.Redact;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.DataDescription = this.DataDescription;
    _o.Atext = this.Atext;
    _o.Agjson = this.Agjson;
    _o.Atype = this.Atype;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.Url = new List<string>();
    for (var _j = 0; _j < this.UrlLength; ++_j) {_o.Url.Add(this.Url(_j));}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<EventEvolution_Abridged> Pack(FlatBufferBuilder builder, EventEvolution_AbridgedT _o) {
    if (_o == null) return default(Offset<EventEvolution_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _eventId = _o.EventId == null ? default(StringOffset) : builder.CreateString(_o.EventId);
    var _category = _o.Category == null ? default(StringOffset) : builder.CreateString(_o.Category);
    var _summary = _o.Summary == null ? default(StringOffset) : builder.CreateString(_o.Summary);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _geoAdminLevel1 = _o.GeoAdminLevel1 == null ? default(StringOffset) : builder.CreateString(_o.GeoAdminLevel1);
    var _geoAdminLevel2 = _o.GeoAdminLevel2 == null ? default(StringOffset) : builder.CreateString(_o.GeoAdminLevel2);
    var _geoAdminLevel3 = _o.GeoAdminLevel3 == null ? default(StringOffset) : builder.CreateString(_o.GeoAdminLevel3);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _dataDescription = _o.DataDescription == null ? default(StringOffset) : builder.CreateString(_o.DataDescription);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _url = default(VectorOffset);
    if (_o.Url != null) {
      var __url = new StringOffset[_o.Url.Count];
      for (var _j = 0; _j < __url.Length; ++_j) { __url[_j] = builder.CreateString(_o.Url[_j]); }
      _url = CreateUrlVector(builder, __url);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateEventEvolution_Abridged(
      builder,
      _id,
      _classificationMarking,
      _eventId,
      _category,
      _summary,
      _startTime,
      _endTime,
      _status,
      _countryCode,
      _geoAdminLevel1,
      _geoAdminLevel2,
      _geoAdminLevel3,
      _o.Redact,
      _srcTyps,
      _srcIds,
      _dataDescription,
      _atext,
      _agjson,
      _atype,
      _o.Andims,
      _o.Asrid,
      _url,
      _tags,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class EventEvolution_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string EventId { get; set; }
  public string Category { get; set; }
  public string Summary { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string Status { get; set; }
  public string CountryCode { get; set; }
  public string GeoAdminLevel1 { get; set; }
  public string GeoAdminLevel2 { get; set; }
  public string GeoAdminLevel3 { get; set; }
  public bool Redact { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string DataDescription { get; set; }
  public string Atext { get; set; }
  public string Agjson { get; set; }
  public string Atype { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public List<string> Url { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public EventEvolution_Abridged_dataMode_Enum DataMode { get; set; }

  public EventEvolution_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.EventId = null;
    this.Category = null;
    this.Summary = null;
    this.StartTime = null;
    this.EndTime = null;
    this.Status = null;
    this.CountryCode = null;
    this.GeoAdminLevel1 = null;
    this.GeoAdminLevel2 = null;
    this.GeoAdminLevel3 = null;
    this.Redact = false;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.DataDescription = null;
    this.Atext = null;
    this.Agjson = null;
    this.Atype = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.Url = null;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = EventEvolution_Abridged_dataMode_Enum.REAL;
  }
  public static EventEvolution_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return EventEvolution_Abridged.GetRootAsEventEvolution_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EventEvolution_Abridged.FinishEventEvolution_AbridgedBuffer(fbb, EventEvolution_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EventEvolution_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*EventId*/, false)
      && verifier.VerifyString(tablePos, 10 /*Category*/, false)
      && verifier.VerifyString(tablePos, 12 /*Summary*/, false)
      && verifier.VerifyString(tablePos, 14 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*Status*/, false)
      && verifier.VerifyString(tablePos, 20 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 22 /*GeoAdminLevel1*/, false)
      && verifier.VerifyString(tablePos, 24 /*GeoAdminLevel2*/, false)
      && verifier.VerifyString(tablePos, 26 /*GeoAdminLevel3*/, false)
      && verifier.VerifyField(tablePos, 28 /*Redact*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 34 /*DataDescription*/, false)
      && verifier.VerifyString(tablePos, 36 /*Atext*/, false)
      && verifier.VerifyString(tablePos, 38 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 40 /*Atype*/, false)
      && verifier.VerifyField(tablePos, 42 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*Url*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 50 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 52 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 54 /*Source*/, false)
      && verifier.VerifyString(tablePos, 56 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 58 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 60 /*DataMode*/, 1 /*EventEvolution_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
