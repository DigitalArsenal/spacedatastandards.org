// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Sensor type..see the /udl/sensortype service for a complete list of all available sensor types.
public struct Sensortype_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Sensortype_Ingest GetRootAsSensortype_Ingest(ByteBuffer _bb) { return GetRootAsSensortype_Ingest(_bb, new Sensortype_Ingest()); }
  public static Sensortype_Ingest GetRootAsSensortype_Ingest(ByteBuffer _bb, Sensortype_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Sensortype_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensortype_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, Sensortype_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sensortype_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 12344411
  /// Constraints: No constraints specified.
  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The specific sensor type and/or surveillance capability of this sensor.
  /// Example: /// Example: Space Borne
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(8); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(10); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<Sensortype_Ingest> CreateSensortype_Ingest(FlatBufferBuilder builder,
      int id = 0,
      StringOffset typeOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(5);
    Sensortype_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Sensortype_Ingest.AddCreatedBy(builder, createdByOffset);
    Sensortype_Ingest.AddCreatedAt(builder, createdAtOffset);
    Sensortype_Ingest.AddType(builder, typeOffset);
    Sensortype_Ingest.AddId(builder, id);
    return Sensortype_Ingest.EndSensortype_Ingest(builder);
  }

  public static void StartSensortype_Ingest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(2, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(3, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(4, origNetworkOffset.Value, 0); }
  public static Offset<Sensortype_Ingest> EndSensortype_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Sensortype_Ingest>(o);
  }
  public static void FinishSensortype_IngestBuffer(FlatBufferBuilder builder, Offset<Sensortype_Ingest> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensortype_IngestBuffer(FlatBufferBuilder builder, Offset<Sensortype_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public Sensortype_IngestT UnPack() {
    var _o = new Sensortype_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Sensortype_IngestT _o) {
    _o.Id = this.Id;
    _o.Type = this.Type;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Sensortype_Ingest> Pack(FlatBufferBuilder builder, Sensortype_IngestT _o) {
    if (_o == null) return default(Offset<Sensortype_Ingest>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSensortype_Ingest(
      builder,
      _o.Id,
      _type,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class Sensortype_IngestT
{
  public int Id { get; set; }
  public string Type { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public Sensortype_IngestT() {
    this.Id = 0;
    this.Type = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static Sensortype_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Sensortype_Ingest.GetRootAsSensortype_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Sensortype_Ingest.FinishSensortype_IngestBuffer(fbb, Sensortype_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Sensortype_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyString(tablePos, 8 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 10 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 12 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
