// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of Remarks associated with this Air Transport Mission.
public struct AircraftMissionRemarks_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionRemarks_Ingest GetRootAsAircraftMissionRemarks_Ingest(ByteBuffer _bb) { return GetRootAsAircraftMissionRemarks_Ingest(_bb, new AircraftMissionRemarks_Ingest()); }
  public static AircraftMissionRemarks_Ingest GetRootAsAircraftMissionRemarks_Ingest(ByteBuffer _bb, AircraftMissionRemarks_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftMissionRemarks_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftMissionRemarks_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftMissionRemarks_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftMissionRemarks_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Global Decision Support System (GDSS) remark identifier.
  /// Example: /// Example: GDSSREMARK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string GdssRemarkId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGdssRemarkIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetGdssRemarkIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetGdssRemarkIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Remark type.
  /// Example: /// Example: MP
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string Type { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// Text of the remark.
  /// Example: /// Example: Example mission remarks.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Text { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(8); }
  /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Date { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDateBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDateBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDateArray() { return __p.__vector_as_array<byte>(10); }
  /// User who published the remark.
  /// Example: /// Example: John Doe
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string User { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetUserBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetUserArray() { return __p.__vector_as_array<byte>(12); }
  /// If the remark is sortie specific, this is the number of the sortie it applies to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  public int ItineraryNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<AircraftMissionRemarks_Ingest> CreateAircraftMissionRemarks_Ingest(FlatBufferBuilder builder,
      StringOffset gdssRemarkIdOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset textOffset = default(StringOffset),
      StringOffset dateOffset = default(StringOffset),
      StringOffset userOffset = default(StringOffset),
      int itineraryNum = 0) {
    builder.StartTable(6);
    AircraftMissionRemarks_Ingest.AddItineraryNum(builder, itineraryNum);
    AircraftMissionRemarks_Ingest.AddUser(builder, userOffset);
    AircraftMissionRemarks_Ingest.AddDate(builder, dateOffset);
    AircraftMissionRemarks_Ingest.AddText(builder, textOffset);
    AircraftMissionRemarks_Ingest.AddType(builder, typeOffset);
    AircraftMissionRemarks_Ingest.AddGdssRemarkId(builder, gdssRemarkIdOffset);
    return AircraftMissionRemarks_Ingest.EndAircraftMissionRemarks_Ingest(builder);
  }

  public static void StartAircraftMissionRemarks_Ingest(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddGdssRemarkId(FlatBufferBuilder builder, StringOffset gdssRemarkIdOffset) { builder.AddOffset(0, gdssRemarkIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(2, textOffset.Value, 0); }
  public static void AddDate(FlatBufferBuilder builder, StringOffset dateOffset) { builder.AddOffset(3, dateOffset.Value, 0); }
  public static void AddUser(FlatBufferBuilder builder, StringOffset userOffset) { builder.AddOffset(4, userOffset.Value, 0); }
  public static void AddItineraryNum(FlatBufferBuilder builder, int itineraryNum) { builder.AddInt(5, itineraryNum, 0); }
  public static Offset<AircraftMissionRemarks_Ingest> EndAircraftMissionRemarks_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftMissionRemarks_Ingest>(o);
  }
  public static void FinishAircraftMissionRemarks_IngestBuffer(FlatBufferBuilder builder, Offset<AircraftMissionRemarks_Ingest> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftMissionRemarks_IngestBuffer(FlatBufferBuilder builder, Offset<AircraftMissionRemarks_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftMissionRemarks_IngestT UnPack() {
    var _o = new AircraftMissionRemarks_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftMissionRemarks_IngestT _o) {
    _o.GdssRemarkId = this.GdssRemarkId;
    _o.Type = this.Type;
    _o.Text = this.Text;
    _o.Date = this.Date;
    _o.User = this.User;
    _o.ItineraryNum = this.ItineraryNum;
  }
  public static Offset<AircraftMissionRemarks_Ingest> Pack(FlatBufferBuilder builder, AircraftMissionRemarks_IngestT _o) {
    if (_o == null) return default(Offset<AircraftMissionRemarks_Ingest>);
    var _gdssRemarkId = _o.GdssRemarkId == null ? default(StringOffset) : builder.CreateString(_o.GdssRemarkId);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _text = _o.Text == null ? default(StringOffset) : builder.CreateString(_o.Text);
    var _date = _o.Date == null ? default(StringOffset) : builder.CreateString(_o.Date);
    var _user = _o.User == null ? default(StringOffset) : builder.CreateString(_o.User);
    return CreateAircraftMissionRemarks_Ingest(
      builder,
      _gdssRemarkId,
      _type,
      _text,
      _date,
      _user,
      _o.ItineraryNum);
  }
}

public class AircraftMissionRemarks_IngestT
{
  public string GdssRemarkId { get; set; }
  public string Type { get; set; }
  public string Text { get; set; }
  public string Date { get; set; }
  public string User { get; set; }
  public int ItineraryNum { get; set; }

  public AircraftMissionRemarks_IngestT() {
    this.GdssRemarkId = null;
    this.Type = null;
    this.Text = null;
    this.Date = null;
    this.User = null;
    this.ItineraryNum = 0;
  }
  public static AircraftMissionRemarks_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftMissionRemarks_Ingest.GetRootAsAircraftMissionRemarks_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftMissionRemarks_Ingest.FinishAircraftMissionRemarks_IngestBuffer(fbb, AircraftMissionRemarks_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftMissionRemarks_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*GdssRemarkId*/, false)
      && verifier.VerifyString(tablePos, 6 /*Type*/, false)
      && verifier.VerifyString(tablePos, 8 /*Text*/, false)
      && verifier.VerifyString(tablePos, 10 /*Date*/, false)
      && verifier.VerifyString(tablePos, 12 /*User*/, false)
      && verifier.VerifyField(tablePos, 14 /*ItineraryNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
