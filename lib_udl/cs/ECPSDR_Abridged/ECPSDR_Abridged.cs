// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
public struct ECPSDR_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ECPSDR_Abridged GetRootAsECPSDR_Abridged(ByteBuffer _bb) { return GetRootAsECPSDR_Abridged(_bb, new ECPSDR_Abridged()); }
  public static ECPSDR_Abridged GetRootAsECPSDR_Abridged(ByteBuffer _bb, ECPSDR_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ECPSDR_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ECPS"); }
  public static bool VerifyECPSDR_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ECPS", false, ECPSDR_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ECPSDR_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ECPSDR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the on-orbit satellite hosting the sensor.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/catalog number of the on-orbit satellite hosting the sensor.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(14); }
  /// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The type of data associated with this record (STANDARD, TRANSIENT).
  /// Example: /// Example: STANDARD
  /// Constraints: Minimum length = 1, Maximum length = 12
  public string Type { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(18); }
  /// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string MsgTime { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsgTimeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMsgTimeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMsgTimeArray() { return __p.__vector_as_array<byte>(20); }
  /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(22); }
  /// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Retransmit { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The sensor mode associated with this measurements (NORMAL, TEST).
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string SenMode { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenModeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSenModeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSenModeArray() { return __p.__vector_as_array<byte>(26); }
  /// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int DosBias { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Asl5VCurrMon { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Dsl5VCurrMon { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Power supply temperature monitor.  This is sensor status telemetry.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int PsTempMon { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int CdsPlateVMon { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int CdsRefVMon { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Unitless sensor mounting plate temperature.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int MpTemp { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int VRef { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Photodiode 1 signal level.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Pd1SigLev { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Photodiode 2 signal level.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Pd2SigLev { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of ESD triggers, low byte of 2-byte counter.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int EsdTrigCountL { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of ESD triggers, high byte of 2-byte counter.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int EsdTrigCountH { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int LowLetL { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int LowLetM { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet1L { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet1M { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet2L { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet2M { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet3L { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet3M { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet4L { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int MedLet4M { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int HiLetL { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int HiLetM { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SurfDosL { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SurfDosM { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SurfDosH { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SurfDosChargeL { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SurfDosChargeH { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Surface dosimeter status byte.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int SurfDosStat { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CDS throttle number of seconds between CDS transient capture readouts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int CdsThrottle { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int CdsThreshold { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int Checksum { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of 144 digitized samples of ESD waveform for transient packets.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  public string TransientData(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TransientDataLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(96); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(98); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(100); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(102); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public ECPSDR_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(106); return o != 0 ? (ECPSDR_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ECPSDR_Abridged_dataMode_Enum.REAL; } }

  public static Offset<ECPSDR_Abridged> CreateECPSDR_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset msgTimeOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      bool retransmit = false,
      StringOffset senModeOffset = default(StringOffset),
      int dosBias = 0,
      int asl5VCurrMon = 0,
      int dsl5VCurrMon = 0,
      int psTempMon = 0,
      int cdsPlateVMon = 0,
      int cdsRefVMon = 0,
      int mpTemp = 0,
      int vRef = 0,
      int pd1SigLev = 0,
      int pd2SigLev = 0,
      int esdTrigCountL = 0,
      int esdTrigCountH = 0,
      int lowLetL = 0,
      int lowLetM = 0,
      int medLet1L = 0,
      int medLet1M = 0,
      int medLet2L = 0,
      int medLet2M = 0,
      int medLet3L = 0,
      int medLet3M = 0,
      int medLet4L = 0,
      int medLet4M = 0,
      int hiLetL = 0,
      int hiLetM = 0,
      int surfDosL = 0,
      int surfDosM = 0,
      int surfDosH = 0,
      int surfDosChargeL = 0,
      int surfDosChargeH = 0,
      int surfDosStat = 0,
      int cdsThrottle = 0,
      int cdsThreshold = 0,
      int checksum = 0,
      VectorOffset transientDataOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      ECPSDR_Abridged_dataMode_Enum dataMode = ECPSDR_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(52);
    ECPSDR_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    ECPSDR_Abridged.AddOrigin(builder, originOffset);
    ECPSDR_Abridged.AddSource(builder, sourceOffset);
    ECPSDR_Abridged.AddCreatedBy(builder, createdByOffset);
    ECPSDR_Abridged.AddCreatedAt(builder, createdAtOffset);
    ECPSDR_Abridged.AddTransientData(builder, transientDataOffset);
    ECPSDR_Abridged.AddChecksum(builder, checksum);
    ECPSDR_Abridged.AddCdsThreshold(builder, cdsThreshold);
    ECPSDR_Abridged.AddCdsThrottle(builder, cdsThrottle);
    ECPSDR_Abridged.AddSurfDosStat(builder, surfDosStat);
    ECPSDR_Abridged.AddSurfDosChargeH(builder, surfDosChargeH);
    ECPSDR_Abridged.AddSurfDosChargeL(builder, surfDosChargeL);
    ECPSDR_Abridged.AddSurfDosH(builder, surfDosH);
    ECPSDR_Abridged.AddSurfDosM(builder, surfDosM);
    ECPSDR_Abridged.AddSurfDosL(builder, surfDosL);
    ECPSDR_Abridged.AddHiLetM(builder, hiLetM);
    ECPSDR_Abridged.AddHiLetL(builder, hiLetL);
    ECPSDR_Abridged.AddMedLet4M(builder, medLet4M);
    ECPSDR_Abridged.AddMedLet4L(builder, medLet4L);
    ECPSDR_Abridged.AddMedLet3M(builder, medLet3M);
    ECPSDR_Abridged.AddMedLet3L(builder, medLet3L);
    ECPSDR_Abridged.AddMedLet2M(builder, medLet2M);
    ECPSDR_Abridged.AddMedLet2L(builder, medLet2L);
    ECPSDR_Abridged.AddMedLet1M(builder, medLet1M);
    ECPSDR_Abridged.AddMedLet1L(builder, medLet1L);
    ECPSDR_Abridged.AddLowLetM(builder, lowLetM);
    ECPSDR_Abridged.AddLowLetL(builder, lowLetL);
    ECPSDR_Abridged.AddEsdTrigCountH(builder, esdTrigCountH);
    ECPSDR_Abridged.AddEsdTrigCountL(builder, esdTrigCountL);
    ECPSDR_Abridged.AddPd2SigLev(builder, pd2SigLev);
    ECPSDR_Abridged.AddPd1SigLev(builder, pd1SigLev);
    ECPSDR_Abridged.AddVRef(builder, vRef);
    ECPSDR_Abridged.AddMpTemp(builder, mpTemp);
    ECPSDR_Abridged.AddCdsRefVMon(builder, cdsRefVMon);
    ECPSDR_Abridged.AddCdsPlateVMon(builder, cdsPlateVMon);
    ECPSDR_Abridged.AddPsTempMon(builder, psTempMon);
    ECPSDR_Abridged.AddDsl5VCurrMon(builder, dsl5VCurrMon);
    ECPSDR_Abridged.AddAsl5VCurrMon(builder, asl5VCurrMon);
    ECPSDR_Abridged.AddDosBias(builder, dosBias);
    ECPSDR_Abridged.AddSenMode(builder, senModeOffset);
    ECPSDR_Abridged.AddObTime(builder, obTimeOffset);
    ECPSDR_Abridged.AddMsgTime(builder, msgTimeOffset);
    ECPSDR_Abridged.AddType(builder, typeOffset);
    ECPSDR_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    ECPSDR_Abridged.AddIdSensor(builder, idSensorOffset);
    ECPSDR_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    ECPSDR_Abridged.AddSatNo(builder, satNo);
    ECPSDR_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    ECPSDR_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    ECPSDR_Abridged.AddId(builder, idOffset);
    ECPSDR_Abridged.AddDataMode(builder, dataMode);
    ECPSDR_Abridged.AddRetransmit(builder, retransmit);
    return ECPSDR_Abridged.EndECPSDR_Abridged(builder);
  }

  public static void StartECPSDR_Abridged(FlatBufferBuilder builder) { builder.StartTable(52); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(5, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(6, origSensorIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(7, typeOffset.Value, 0); }
  public static void AddMsgTime(FlatBufferBuilder builder, StringOffset msgTimeOffset) { builder.AddOffset(8, msgTimeOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(9, obTimeOffset.Value, 0); }
  public static void AddRetransmit(FlatBufferBuilder builder, bool retransmit) { builder.AddBool(10, retransmit, false); }
  public static void AddSenMode(FlatBufferBuilder builder, StringOffset senModeOffset) { builder.AddOffset(11, senModeOffset.Value, 0); }
  public static void AddDosBias(FlatBufferBuilder builder, int dosBias) { builder.AddInt(12, dosBias, 0); }
  public static void AddAsl5VCurrMon(FlatBufferBuilder builder, int asl5VCurrMon) { builder.AddInt(13, asl5VCurrMon, 0); }
  public static void AddDsl5VCurrMon(FlatBufferBuilder builder, int dsl5VCurrMon) { builder.AddInt(14, dsl5VCurrMon, 0); }
  public static void AddPsTempMon(FlatBufferBuilder builder, int psTempMon) { builder.AddInt(15, psTempMon, 0); }
  public static void AddCdsPlateVMon(FlatBufferBuilder builder, int cdsPlateVMon) { builder.AddInt(16, cdsPlateVMon, 0); }
  public static void AddCdsRefVMon(FlatBufferBuilder builder, int cdsRefVMon) { builder.AddInt(17, cdsRefVMon, 0); }
  public static void AddMpTemp(FlatBufferBuilder builder, int mpTemp) { builder.AddInt(18, mpTemp, 0); }
  public static void AddVRef(FlatBufferBuilder builder, int vRef) { builder.AddInt(19, vRef, 0); }
  public static void AddPd1SigLev(FlatBufferBuilder builder, int pd1SigLev) { builder.AddInt(20, pd1SigLev, 0); }
  public static void AddPd2SigLev(FlatBufferBuilder builder, int pd2SigLev) { builder.AddInt(21, pd2SigLev, 0); }
  public static void AddEsdTrigCountL(FlatBufferBuilder builder, int esdTrigCountL) { builder.AddInt(22, esdTrigCountL, 0); }
  public static void AddEsdTrigCountH(FlatBufferBuilder builder, int esdTrigCountH) { builder.AddInt(23, esdTrigCountH, 0); }
  public static void AddLowLetL(FlatBufferBuilder builder, int lowLetL) { builder.AddInt(24, lowLetL, 0); }
  public static void AddLowLetM(FlatBufferBuilder builder, int lowLetM) { builder.AddInt(25, lowLetM, 0); }
  public static void AddMedLet1L(FlatBufferBuilder builder, int medLet1L) { builder.AddInt(26, medLet1L, 0); }
  public static void AddMedLet1M(FlatBufferBuilder builder, int medLet1M) { builder.AddInt(27, medLet1M, 0); }
  public static void AddMedLet2L(FlatBufferBuilder builder, int medLet2L) { builder.AddInt(28, medLet2L, 0); }
  public static void AddMedLet2M(FlatBufferBuilder builder, int medLet2M) { builder.AddInt(29, medLet2M, 0); }
  public static void AddMedLet3L(FlatBufferBuilder builder, int medLet3L) { builder.AddInt(30, medLet3L, 0); }
  public static void AddMedLet3M(FlatBufferBuilder builder, int medLet3M) { builder.AddInt(31, medLet3M, 0); }
  public static void AddMedLet4L(FlatBufferBuilder builder, int medLet4L) { builder.AddInt(32, medLet4L, 0); }
  public static void AddMedLet4M(FlatBufferBuilder builder, int medLet4M) { builder.AddInt(33, medLet4M, 0); }
  public static void AddHiLetL(FlatBufferBuilder builder, int hiLetL) { builder.AddInt(34, hiLetL, 0); }
  public static void AddHiLetM(FlatBufferBuilder builder, int hiLetM) { builder.AddInt(35, hiLetM, 0); }
  public static void AddSurfDosL(FlatBufferBuilder builder, int surfDosL) { builder.AddInt(36, surfDosL, 0); }
  public static void AddSurfDosM(FlatBufferBuilder builder, int surfDosM) { builder.AddInt(37, surfDosM, 0); }
  public static void AddSurfDosH(FlatBufferBuilder builder, int surfDosH) { builder.AddInt(38, surfDosH, 0); }
  public static void AddSurfDosChargeL(FlatBufferBuilder builder, int surfDosChargeL) { builder.AddInt(39, surfDosChargeL, 0); }
  public static void AddSurfDosChargeH(FlatBufferBuilder builder, int surfDosChargeH) { builder.AddInt(40, surfDosChargeH, 0); }
  public static void AddSurfDosStat(FlatBufferBuilder builder, int surfDosStat) { builder.AddInt(41, surfDosStat, 0); }
  public static void AddCdsThrottle(FlatBufferBuilder builder, int cdsThrottle) { builder.AddInt(42, cdsThrottle, 0); }
  public static void AddCdsThreshold(FlatBufferBuilder builder, int cdsThreshold) { builder.AddInt(43, cdsThreshold, 0); }
  public static void AddChecksum(FlatBufferBuilder builder, int checksum) { builder.AddInt(44, checksum, 0); }
  public static void AddTransientData(FlatBufferBuilder builder, VectorOffset transientDataOffset) { builder.AddOffset(45, transientDataOffset.Value, 0); }
  public static VectorOffset CreateTransientDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTransientDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransientDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTransientDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTransientDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(46, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(47, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(48, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(49, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(50, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, ECPSDR_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(51, (sbyte)dataMode, 0); }
  public static Offset<ECPSDR_Abridged> EndECPSDR_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ECPSDR_Abridged>(o);
  }
  public static void FinishECPSDR_AbridgedBuffer(FlatBufferBuilder builder, Offset<ECPSDR_Abridged> offset) { builder.Finish(offset.Value, "ECPS"); }
  public static void FinishSizePrefixedECPSDR_AbridgedBuffer(FlatBufferBuilder builder, Offset<ECPSDR_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ECPS"); }
  public ECPSDR_AbridgedT UnPack() {
    var _o = new ECPSDR_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ECPSDR_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Type = this.Type;
    _o.MsgTime = this.MsgTime;
    _o.ObTime = this.ObTime;
    _o.Retransmit = this.Retransmit;
    _o.SenMode = this.SenMode;
    _o.DosBias = this.DosBias;
    _o.Asl5VCurrMon = this.Asl5VCurrMon;
    _o.Dsl5VCurrMon = this.Dsl5VCurrMon;
    _o.PsTempMon = this.PsTempMon;
    _o.CdsPlateVMon = this.CdsPlateVMon;
    _o.CdsRefVMon = this.CdsRefVMon;
    _o.MpTemp = this.MpTemp;
    _o.VRef = this.VRef;
    _o.Pd1SigLev = this.Pd1SigLev;
    _o.Pd2SigLev = this.Pd2SigLev;
    _o.EsdTrigCountL = this.EsdTrigCountL;
    _o.EsdTrigCountH = this.EsdTrigCountH;
    _o.LowLetL = this.LowLetL;
    _o.LowLetM = this.LowLetM;
    _o.MedLet1L = this.MedLet1L;
    _o.MedLet1M = this.MedLet1M;
    _o.MedLet2L = this.MedLet2L;
    _o.MedLet2M = this.MedLet2M;
    _o.MedLet3L = this.MedLet3L;
    _o.MedLet3M = this.MedLet3M;
    _o.MedLet4L = this.MedLet4L;
    _o.MedLet4M = this.MedLet4M;
    _o.HiLetL = this.HiLetL;
    _o.HiLetM = this.HiLetM;
    _o.SurfDosL = this.SurfDosL;
    _o.SurfDosM = this.SurfDosM;
    _o.SurfDosH = this.SurfDosH;
    _o.SurfDosChargeL = this.SurfDosChargeL;
    _o.SurfDosChargeH = this.SurfDosChargeH;
    _o.SurfDosStat = this.SurfDosStat;
    _o.CdsThrottle = this.CdsThrottle;
    _o.CdsThreshold = this.CdsThreshold;
    _o.Checksum = this.Checksum;
    _o.TransientData = new List<string>();
    for (var _j = 0; _j < this.TransientDataLength; ++_j) {_o.TransientData.Add(this.TransientData(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<ECPSDR_Abridged> Pack(FlatBufferBuilder builder, ECPSDR_AbridgedT _o) {
    if (_o == null) return default(Offset<ECPSDR_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _msgTime = _o.MsgTime == null ? default(StringOffset) : builder.CreateString(_o.MsgTime);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _senMode = _o.SenMode == null ? default(StringOffset) : builder.CreateString(_o.SenMode);
    var _transientData = default(VectorOffset);
    if (_o.TransientData != null) {
      var __transientData = new StringOffset[_o.TransientData.Count];
      for (var _j = 0; _j < __transientData.Length; ++_j) { __transientData[_j] = builder.CreateString(_o.TransientData[_j]); }
      _transientData = CreateTransientDataVector(builder, __transientData);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateECPSDR_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _idSensor,
      _origSensorId,
      _type,
      _msgTime,
      _obTime,
      _o.Retransmit,
      _senMode,
      _o.DosBias,
      _o.Asl5VCurrMon,
      _o.Dsl5VCurrMon,
      _o.PsTempMon,
      _o.CdsPlateVMon,
      _o.CdsRefVMon,
      _o.MpTemp,
      _o.VRef,
      _o.Pd1SigLev,
      _o.Pd2SigLev,
      _o.EsdTrigCountL,
      _o.EsdTrigCountH,
      _o.LowLetL,
      _o.LowLetM,
      _o.MedLet1L,
      _o.MedLet1M,
      _o.MedLet2L,
      _o.MedLet2M,
      _o.MedLet3L,
      _o.MedLet3M,
      _o.MedLet4L,
      _o.MedLet4M,
      _o.HiLetL,
      _o.HiLetM,
      _o.SurfDosL,
      _o.SurfDosM,
      _o.SurfDosH,
      _o.SurfDosChargeL,
      _o.SurfDosChargeH,
      _o.SurfDosStat,
      _o.CdsThrottle,
      _o.CdsThreshold,
      _o.Checksum,
      _transientData,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class ECPSDR_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string Type { get; set; }
  public string MsgTime { get; set; }
  public string ObTime { get; set; }
  public bool Retransmit { get; set; }
  public string SenMode { get; set; }
  public int DosBias { get; set; }
  public int Asl5VCurrMon { get; set; }
  public int Dsl5VCurrMon { get; set; }
  public int PsTempMon { get; set; }
  public int CdsPlateVMon { get; set; }
  public int CdsRefVMon { get; set; }
  public int MpTemp { get; set; }
  public int VRef { get; set; }
  public int Pd1SigLev { get; set; }
  public int Pd2SigLev { get; set; }
  public int EsdTrigCountL { get; set; }
  public int EsdTrigCountH { get; set; }
  public int LowLetL { get; set; }
  public int LowLetM { get; set; }
  public int MedLet1L { get; set; }
  public int MedLet1M { get; set; }
  public int MedLet2L { get; set; }
  public int MedLet2M { get; set; }
  public int MedLet3L { get; set; }
  public int MedLet3M { get; set; }
  public int MedLet4L { get; set; }
  public int MedLet4M { get; set; }
  public int HiLetL { get; set; }
  public int HiLetM { get; set; }
  public int SurfDosL { get; set; }
  public int SurfDosM { get; set; }
  public int SurfDosH { get; set; }
  public int SurfDosChargeL { get; set; }
  public int SurfDosChargeH { get; set; }
  public int SurfDosStat { get; set; }
  public int CdsThrottle { get; set; }
  public int CdsThreshold { get; set; }
  public int Checksum { get; set; }
  public List<string> TransientData { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public ECPSDR_Abridged_dataMode_Enum DataMode { get; set; }

  public ECPSDR_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.Type = null;
    this.MsgTime = null;
    this.ObTime = null;
    this.Retransmit = false;
    this.SenMode = null;
    this.DosBias = 0;
    this.Asl5VCurrMon = 0;
    this.Dsl5VCurrMon = 0;
    this.PsTempMon = 0;
    this.CdsPlateVMon = 0;
    this.CdsRefVMon = 0;
    this.MpTemp = 0;
    this.VRef = 0;
    this.Pd1SigLev = 0;
    this.Pd2SigLev = 0;
    this.EsdTrigCountL = 0;
    this.EsdTrigCountH = 0;
    this.LowLetL = 0;
    this.LowLetM = 0;
    this.MedLet1L = 0;
    this.MedLet1M = 0;
    this.MedLet2L = 0;
    this.MedLet2M = 0;
    this.MedLet3L = 0;
    this.MedLet3M = 0;
    this.MedLet4L = 0;
    this.MedLet4M = 0;
    this.HiLetL = 0;
    this.HiLetM = 0;
    this.SurfDosL = 0;
    this.SurfDosM = 0;
    this.SurfDosH = 0;
    this.SurfDosChargeL = 0;
    this.SurfDosChargeH = 0;
    this.SurfDosStat = 0;
    this.CdsThrottle = 0;
    this.CdsThreshold = 0;
    this.Checksum = 0;
    this.TransientData = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = ECPSDR_Abridged_dataMode_Enum.REAL;
  }
  public static ECPSDR_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return ECPSDR_Abridged.GetRootAsECPSDR_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ECPSDR_Abridged.FinishECPSDR_AbridgedBuffer(fbb, ECPSDR_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ECPSDR_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 16 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 18 /*Type*/, false)
      && verifier.VerifyString(tablePos, 20 /*MsgTime*/, false)
      && verifier.VerifyString(tablePos, 22 /*ObTime*/, false)
      && verifier.VerifyField(tablePos, 24 /*Retransmit*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*SenMode*/, false)
      && verifier.VerifyField(tablePos, 28 /*DosBias*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*Asl5VCurrMon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*Dsl5VCurrMon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*PsTempMon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*CdsPlateVMon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*CdsRefVMon*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*MpTemp*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*VRef*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*Pd1SigLev*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*Pd2SigLev*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*EsdTrigCountL*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*EsdTrigCountH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*LowLetL*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*LowLetM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*MedLet1L*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*MedLet1M*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*MedLet2L*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*MedLet2M*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*MedLet3L*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*MedLet3M*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*MedLet4L*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*MedLet4M*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*HiLetL*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*HiLetM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*SurfDosL*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*SurfDosM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*SurfDosH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*SurfDosChargeL*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*SurfDosChargeH*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*SurfDosStat*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*CdsThrottle*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*CdsThreshold*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 92 /*Checksum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*TransientData*/, false)
      && verifier.VerifyString(tablePos, 96 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 98 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 100 /*Source*/, false)
      && verifier.VerifyString(tablePos, 102 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 104 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 106 /*DataMode*/, 1 /*ECPSDR_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
