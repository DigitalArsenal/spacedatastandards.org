// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
public struct GNSSRawIF_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GNSSRawIF_Ingest GetRootAsGNSSRawIF_Ingest(ByteBuffer _bb) { return GetRootAsGNSSRawIF_Ingest(_bb, new GNSSRawIF_Ingest()); }
  public static GNSSRawIF_Ingest GetRootAsGNSSRawIF_Ingest(ByteBuffer _bb, GNSSRawIF_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GNSSRawIF_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "GNSS"); }
  public static bool VerifyGNSSRawIF_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("GNSS", false, GNSSRawIF_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GNSSRawIF_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GNSSRawIF-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: L2045
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(14); }
  /// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
  /// Example: /// Example: GPS1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Receiver { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceiverBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetReceiverBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetReceiverArray() { return __p.__vector_as_array<byte>(16); }
  /// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  /// Example: /// Example: [0, 1, 0]
  /// Constraints: No constraints specified.
  public string Boresight(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BoresightLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
  /// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
  /// Constraints: No constraints specified.
  public string Quat(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int QuatLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int StartIndex { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:11:28.919768Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:12:28.919768Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.834
  /// Constraints: No constraints specified.
  public double StartLat { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.821
  /// Constraints: No constraints specified.
  public double StartLon { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.664
  /// Constraints: No constraints specified.
  public double StartAlt { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.922
  /// Constraints: No constraints specified.
  public double EndLat { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.67
  /// Constraints: No constraints specified.
  public double EndLon { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.626
  /// Constraints: No constraints specified.
  public double EndAlt { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
  /// Example: /// Example: [1227.6, 1575.4]
  /// Constraints: No constraints specified.
  public string CenterFreq(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CenterFreqLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
  /// Example: /// Example: [4.09, 5.87]
  /// Constraints: No constraints specified.
  public string IfFreq(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IfFreqLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The number of samples taken per second.
  /// Example: /// Example: [8000, 9000]
  /// Constraints: No constraints specified.
  public string SampleRate(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SampleRateLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
  /// Example: /// Example: ['NONE', 'NONE']
  /// Constraints: No constraints specified.
  public string PostFourier(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PostFourierLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
  /// Example: /// Example: COMPLEX
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string SampleType { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSampleTypeBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetSampleTypeBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetSampleTypeArray() { return __p.__vector_as_array<byte>(48); }
  /// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  public int BitDepth { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
  /// Example: /// Example: [0.0271, 0.0016]
  /// Constraints: No constraints specified.
  public string DiffCodeBias(int j) { int o = __p.__offset(52); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DiffCodeBiasLength { get { int o = __p.__offset(52); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The amount of data generated per unit time, expressed in Megabytes/minute.
  /// Example: /// Example: 0.205
  /// Constraints: No constraints specified.
  public double DataRate { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
  /// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
  /// Constraints: No constraints specified.
  public string SetId { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSetIdBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetSetIdBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetSetIdArray() { return __p.__vector_as_array<byte>(56); }
  /// The number of raw IF records/files in a set.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int SetLength { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SequenceID { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
  /// Example: /// Example: somefile.hdf5
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string FileName { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(62); }
  /// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['GNSSSET']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
  /// Example: /// Example: ['GNSSSET_ID']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: 3168895
  /// Constraints: No constraints specified.
  public long FileSize { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(76); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(78); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public GNSSRawIF_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(80); return o != 0 ? (GNSSRawIF_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : GNSSRawIF_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(82); }

  public static Offset<GNSSRawIF_Ingest> CreateGNSSRawIF_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset esIdOffset = default(StringOffset),
      StringOffset receiverOffset = default(StringOffset),
      VectorOffset boresightOffset = default(VectorOffset),
      VectorOffset quatOffset = default(VectorOffset),
      int startIndex = 0,
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      double startLat = 0.0,
      double startLon = 0.0,
      double startAlt = 0.0,
      double endLat = 0.0,
      double endLon = 0.0,
      double endAlt = 0.0,
      VectorOffset centerFreqOffset = default(VectorOffset),
      VectorOffset ifFreqOffset = default(VectorOffset),
      VectorOffset sampleRateOffset = default(VectorOffset),
      VectorOffset postFourierOffset = default(VectorOffset),
      StringOffset sampleTypeOffset = default(StringOffset),
      int bitDepth = 0,
      VectorOffset diffCodeBiasOffset = default(VectorOffset),
      double dataRate = 0.0,
      StringOffset setIdOffset = default(StringOffset),
      int setLength = 0,
      int sequenceID = 0,
      StringOffset fileNameOffset = default(StringOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      long fileSize = 0,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      GNSSRawIF_Ingest_dataMode_Enum dataMode = GNSSRawIF_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(40);
    GNSSRawIF_Ingest.AddFileSize(builder, fileSize);
    GNSSRawIF_Ingest.AddDataRate(builder, dataRate);
    GNSSRawIF_Ingest.AddEndAlt(builder, endAlt);
    GNSSRawIF_Ingest.AddEndLon(builder, endLon);
    GNSSRawIF_Ingest.AddEndLat(builder, endLat);
    GNSSRawIF_Ingest.AddStartAlt(builder, startAlt);
    GNSSRawIF_Ingest.AddStartLon(builder, startLon);
    GNSSRawIF_Ingest.AddStartLat(builder, startLat);
    GNSSRawIF_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    GNSSRawIF_Ingest.AddOrigin(builder, originOffset);
    GNSSRawIF_Ingest.AddSource(builder, sourceOffset);
    GNSSRawIF_Ingest.AddCreatedBy(builder, createdByOffset);
    GNSSRawIF_Ingest.AddCreatedAt(builder, createdAtOffset);
    GNSSRawIF_Ingest.AddTags(builder, tagsOffset);
    GNSSRawIF_Ingest.AddSrcIds(builder, srcIdsOffset);
    GNSSRawIF_Ingest.AddSrcTyps(builder, srcTypsOffset);
    GNSSRawIF_Ingest.AddFileName(builder, fileNameOffset);
    GNSSRawIF_Ingest.AddSequenceID(builder, sequenceID);
    GNSSRawIF_Ingest.AddSetLength(builder, setLength);
    GNSSRawIF_Ingest.AddSetId(builder, setIdOffset);
    GNSSRawIF_Ingest.AddDiffCodeBias(builder, diffCodeBiasOffset);
    GNSSRawIF_Ingest.AddBitDepth(builder, bitDepth);
    GNSSRawIF_Ingest.AddSampleType(builder, sampleTypeOffset);
    GNSSRawIF_Ingest.AddPostFourier(builder, postFourierOffset);
    GNSSRawIF_Ingest.AddSampleRate(builder, sampleRateOffset);
    GNSSRawIF_Ingest.AddIfFreq(builder, ifFreqOffset);
    GNSSRawIF_Ingest.AddCenterFreq(builder, centerFreqOffset);
    GNSSRawIF_Ingest.AddEndTime(builder, endTimeOffset);
    GNSSRawIF_Ingest.AddStartTime(builder, startTimeOffset);
    GNSSRawIF_Ingest.AddStartIndex(builder, startIndex);
    GNSSRawIF_Ingest.AddQuat(builder, quatOffset);
    GNSSRawIF_Ingest.AddBoresight(builder, boresightOffset);
    GNSSRawIF_Ingest.AddReceiver(builder, receiverOffset);
    GNSSRawIF_Ingest.AddEsId(builder, esIdOffset);
    GNSSRawIF_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    GNSSRawIF_Ingest.AddSatNo(builder, satNo);
    GNSSRawIF_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    GNSSRawIF_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    GNSSRawIF_Ingest.AddId(builder, idOffset);
    GNSSRawIF_Ingest.AddDataMode(builder, dataMode);
    return GNSSRawIF_Ingest.EndGNSSRawIF_Ingest(builder);
  }

  public static void StartGNSSRawIF_Ingest(FlatBufferBuilder builder) { builder.StartTable(40); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(5, esIdOffset.Value, 0); }
  public static void AddReceiver(FlatBufferBuilder builder, StringOffset receiverOffset) { builder.AddOffset(6, receiverOffset.Value, 0); }
  public static void AddBoresight(FlatBufferBuilder builder, VectorOffset boresightOffset) { builder.AddOffset(7, boresightOffset.Value, 0); }
  public static VectorOffset CreateBoresightVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBoresightVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBoresightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQuat(FlatBufferBuilder builder, VectorOffset quatOffset) { builder.AddOffset(8, quatOffset.Value, 0); }
  public static VectorOffset CreateQuatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateQuatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartQuatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStartIndex(FlatBufferBuilder builder, int startIndex) { builder.AddInt(9, startIndex, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(10, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(11, endTimeOffset.Value, 0); }
  public static void AddStartLat(FlatBufferBuilder builder, double startLat) { builder.AddDouble(12, startLat, 0.0); }
  public static void AddStartLon(FlatBufferBuilder builder, double startLon) { builder.AddDouble(13, startLon, 0.0); }
  public static void AddStartAlt(FlatBufferBuilder builder, double startAlt) { builder.AddDouble(14, startAlt, 0.0); }
  public static void AddEndLat(FlatBufferBuilder builder, double endLat) { builder.AddDouble(15, endLat, 0.0); }
  public static void AddEndLon(FlatBufferBuilder builder, double endLon) { builder.AddDouble(16, endLon, 0.0); }
  public static void AddEndAlt(FlatBufferBuilder builder, double endAlt) { builder.AddDouble(17, endAlt, 0.0); }
  public static void AddCenterFreq(FlatBufferBuilder builder, VectorOffset centerFreqOffset) { builder.AddOffset(18, centerFreqOffset.Value, 0); }
  public static VectorOffset CreateCenterFreqVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCenterFreqVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCenterFreqVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCenterFreqVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCenterFreqVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIfFreq(FlatBufferBuilder builder, VectorOffset ifFreqOffset) { builder.AddOffset(19, ifFreqOffset.Value, 0); }
  public static VectorOffset CreateIfFreqVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIfFreqVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIfFreqVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIfFreqVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIfFreqVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSampleRate(FlatBufferBuilder builder, VectorOffset sampleRateOffset) { builder.AddOffset(20, sampleRateOffset.Value, 0); }
  public static VectorOffset CreateSampleRateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSampleRateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSampleRateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSampleRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSampleRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPostFourier(FlatBufferBuilder builder, VectorOffset postFourierOffset) { builder.AddOffset(21, postFourierOffset.Value, 0); }
  public static VectorOffset CreatePostFourierVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePostFourierVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostFourierVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePostFourierVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPostFourierVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSampleType(FlatBufferBuilder builder, StringOffset sampleTypeOffset) { builder.AddOffset(22, sampleTypeOffset.Value, 0); }
  public static void AddBitDepth(FlatBufferBuilder builder, int bitDepth) { builder.AddInt(23, bitDepth, 0); }
  public static void AddDiffCodeBias(FlatBufferBuilder builder, VectorOffset diffCodeBiasOffset) { builder.AddOffset(24, diffCodeBiasOffset.Value, 0); }
  public static VectorOffset CreateDiffCodeBiasVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDiffCodeBiasVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiffCodeBiasVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDiffCodeBiasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDiffCodeBiasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDataRate(FlatBufferBuilder builder, double dataRate) { builder.AddDouble(25, dataRate, 0.0); }
  public static void AddSetId(FlatBufferBuilder builder, StringOffset setIdOffset) { builder.AddOffset(26, setIdOffset.Value, 0); }
  public static void AddSetLength(FlatBufferBuilder builder, int setLength) { builder.AddInt(27, setLength, 0); }
  public static void AddSequenceID(FlatBufferBuilder builder, int sequenceID) { builder.AddInt(28, sequenceID, 0); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(29, fileNameOffset.Value, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(30, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(31, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFileSize(FlatBufferBuilder builder, long fileSize) { builder.AddLong(32, fileSize, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(33, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(36, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(37, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, GNSSRawIF_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(38, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(39, origNetworkOffset.Value, 0); }
  public static Offset<GNSSRawIF_Ingest> EndGNSSRawIF_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GNSSRawIF_Ingest>(o);
  }
  public static void FinishGNSSRawIF_IngestBuffer(FlatBufferBuilder builder, Offset<GNSSRawIF_Ingest> offset) { builder.Finish(offset.Value, "GNSS"); }
  public static void FinishSizePrefixedGNSSRawIF_IngestBuffer(FlatBufferBuilder builder, Offset<GNSSRawIF_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "GNSS"); }
  public GNSSRawIF_IngestT UnPack() {
    var _o = new GNSSRawIF_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GNSSRawIF_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.EsId = this.EsId;
    _o.Receiver = this.Receiver;
    _o.Boresight = new List<string>();
    for (var _j = 0; _j < this.BoresightLength; ++_j) {_o.Boresight.Add(this.Boresight(_j));}
    _o.Quat = new List<string>();
    for (var _j = 0; _j < this.QuatLength; ++_j) {_o.Quat.Add(this.Quat(_j));}
    _o.StartIndex = this.StartIndex;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.StartLat = this.StartLat;
    _o.StartLon = this.StartLon;
    _o.StartAlt = this.StartAlt;
    _o.EndLat = this.EndLat;
    _o.EndLon = this.EndLon;
    _o.EndAlt = this.EndAlt;
    _o.CenterFreq = new List<string>();
    for (var _j = 0; _j < this.CenterFreqLength; ++_j) {_o.CenterFreq.Add(this.CenterFreq(_j));}
    _o.IfFreq = new List<string>();
    for (var _j = 0; _j < this.IfFreqLength; ++_j) {_o.IfFreq.Add(this.IfFreq(_j));}
    _o.SampleRate = new List<string>();
    for (var _j = 0; _j < this.SampleRateLength; ++_j) {_o.SampleRate.Add(this.SampleRate(_j));}
    _o.PostFourier = new List<string>();
    for (var _j = 0; _j < this.PostFourierLength; ++_j) {_o.PostFourier.Add(this.PostFourier(_j));}
    _o.SampleType = this.SampleType;
    _o.BitDepth = this.BitDepth;
    _o.DiffCodeBias = new List<string>();
    for (var _j = 0; _j < this.DiffCodeBiasLength; ++_j) {_o.DiffCodeBias.Add(this.DiffCodeBias(_j));}
    _o.DataRate = this.DataRate;
    _o.SetId = this.SetId;
    _o.SetLength = this.SetLength;
    _o.SequenceID = this.SequenceID;
    _o.FileName = this.FileName;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.FileSize = this.FileSize;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<GNSSRawIF_Ingest> Pack(FlatBufferBuilder builder, GNSSRawIF_IngestT _o) {
    if (_o == null) return default(Offset<GNSSRawIF_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _receiver = _o.Receiver == null ? default(StringOffset) : builder.CreateString(_o.Receiver);
    var _boresight = default(VectorOffset);
    if (_o.Boresight != null) {
      var __boresight = new StringOffset[_o.Boresight.Count];
      for (var _j = 0; _j < __boresight.Length; ++_j) { __boresight[_j] = builder.CreateString(_o.Boresight[_j]); }
      _boresight = CreateBoresightVector(builder, __boresight);
    }
    var _quat = default(VectorOffset);
    if (_o.Quat != null) {
      var __quat = new StringOffset[_o.Quat.Count];
      for (var _j = 0; _j < __quat.Length; ++_j) { __quat[_j] = builder.CreateString(_o.Quat[_j]); }
      _quat = CreateQuatVector(builder, __quat);
    }
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _centerFreq = default(VectorOffset);
    if (_o.CenterFreq != null) {
      var __centerFreq = new StringOffset[_o.CenterFreq.Count];
      for (var _j = 0; _j < __centerFreq.Length; ++_j) { __centerFreq[_j] = builder.CreateString(_o.CenterFreq[_j]); }
      _centerFreq = CreateCenterFreqVector(builder, __centerFreq);
    }
    var _ifFreq = default(VectorOffset);
    if (_o.IfFreq != null) {
      var __ifFreq = new StringOffset[_o.IfFreq.Count];
      for (var _j = 0; _j < __ifFreq.Length; ++_j) { __ifFreq[_j] = builder.CreateString(_o.IfFreq[_j]); }
      _ifFreq = CreateIfFreqVector(builder, __ifFreq);
    }
    var _sampleRate = default(VectorOffset);
    if (_o.SampleRate != null) {
      var __sampleRate = new StringOffset[_o.SampleRate.Count];
      for (var _j = 0; _j < __sampleRate.Length; ++_j) { __sampleRate[_j] = builder.CreateString(_o.SampleRate[_j]); }
      _sampleRate = CreateSampleRateVector(builder, __sampleRate);
    }
    var _postFourier = default(VectorOffset);
    if (_o.PostFourier != null) {
      var __postFourier = new StringOffset[_o.PostFourier.Count];
      for (var _j = 0; _j < __postFourier.Length; ++_j) { __postFourier[_j] = builder.CreateString(_o.PostFourier[_j]); }
      _postFourier = CreatePostFourierVector(builder, __postFourier);
    }
    var _sampleType = _o.SampleType == null ? default(StringOffset) : builder.CreateString(_o.SampleType);
    var _diffCodeBias = default(VectorOffset);
    if (_o.DiffCodeBias != null) {
      var __diffCodeBias = new StringOffset[_o.DiffCodeBias.Count];
      for (var _j = 0; _j < __diffCodeBias.Length; ++_j) { __diffCodeBias[_j] = builder.CreateString(_o.DiffCodeBias[_j]); }
      _diffCodeBias = CreateDiffCodeBiasVector(builder, __diffCodeBias);
    }
    var _setId = _o.SetId == null ? default(StringOffset) : builder.CreateString(_o.SetId);
    var _fileName = _o.FileName == null ? default(StringOffset) : builder.CreateString(_o.FileName);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateGNSSRawIF_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _esId,
      _receiver,
      _boresight,
      _quat,
      _o.StartIndex,
      _startTime,
      _endTime,
      _o.StartLat,
      _o.StartLon,
      _o.StartAlt,
      _o.EndLat,
      _o.EndLon,
      _o.EndAlt,
      _centerFreq,
      _ifFreq,
      _sampleRate,
      _postFourier,
      _sampleType,
      _o.BitDepth,
      _diffCodeBias,
      _o.DataRate,
      _setId,
      _o.SetLength,
      _o.SequenceID,
      _fileName,
      _srcTyps,
      _srcIds,
      _o.FileSize,
      _tags,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class GNSSRawIF_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string EsId { get; set; }
  public string Receiver { get; set; }
  public List<string> Boresight { get; set; }
  public List<string> Quat { get; set; }
  public int StartIndex { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public double StartLat { get; set; }
  public double StartLon { get; set; }
  public double StartAlt { get; set; }
  public double EndLat { get; set; }
  public double EndLon { get; set; }
  public double EndAlt { get; set; }
  public List<string> CenterFreq { get; set; }
  public List<string> IfFreq { get; set; }
  public List<string> SampleRate { get; set; }
  public List<string> PostFourier { get; set; }
  public string SampleType { get; set; }
  public int BitDepth { get; set; }
  public List<string> DiffCodeBias { get; set; }
  public double DataRate { get; set; }
  public string SetId { get; set; }
  public int SetLength { get; set; }
  public int SequenceID { get; set; }
  public string FileName { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public long FileSize { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public GNSSRawIF_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public GNSSRawIF_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.EsId = null;
    this.Receiver = null;
    this.Boresight = null;
    this.Quat = null;
    this.StartIndex = 0;
    this.StartTime = null;
    this.EndTime = null;
    this.StartLat = 0.0;
    this.StartLon = 0.0;
    this.StartAlt = 0.0;
    this.EndLat = 0.0;
    this.EndLon = 0.0;
    this.EndAlt = 0.0;
    this.CenterFreq = null;
    this.IfFreq = null;
    this.SampleRate = null;
    this.PostFourier = null;
    this.SampleType = null;
    this.BitDepth = 0;
    this.DiffCodeBias = null;
    this.DataRate = 0.0;
    this.SetId = null;
    this.SetLength = 0;
    this.SequenceID = 0;
    this.FileName = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.FileSize = 0;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = GNSSRawIF_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static GNSSRawIF_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return GNSSRawIF_Ingest.GetRootAsGNSSRawIF_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GNSSRawIF_Ingest.FinishGNSSRawIF_IngestBuffer(fbb, GNSSRawIF_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GNSSRawIF_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 14 /*EsId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Receiver*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*Boresight*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*Quat*/, false)
      && verifier.VerifyField(tablePos, 22 /*StartIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*EndTime*/, false)
      && verifier.VerifyField(tablePos, 28 /*StartLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*StartLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*StartAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*EndLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*EndLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*EndAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*CenterFreq*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*IfFreq*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*SampleRate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*PostFourier*/, false)
      && verifier.VerifyString(tablePos, 48 /*SampleType*/, false)
      && verifier.VerifyField(tablePos, 50 /*BitDepth*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 52 /*DiffCodeBias*/, false)
      && verifier.VerifyField(tablePos, 54 /*DataRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*SetId*/, false)
      && verifier.VerifyField(tablePos, 58 /*SetLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*SequenceID*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 62 /*FileName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 66 /*SrcIds*/, false)
      && verifier.VerifyField(tablePos, 68 /*FileSize*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*Source*/, false)
      && verifier.VerifyString(tablePos, 78 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 80 /*DataMode*/, 1 /*GNSSRawIF_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 82 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
