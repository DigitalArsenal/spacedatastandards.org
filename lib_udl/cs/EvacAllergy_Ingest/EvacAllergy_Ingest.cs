// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Allergy information.
public struct EvacAllergy_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacAllergy_Ingest GetRootAsEvacAllergy_Ingest(ByteBuffer _bb) { return GetRootAsEvacAllergy_Ingest(_bb, new EvacAllergy_Ingest()); }
  public static EvacAllergy_Ingest GetRootAsEvacAllergy_Ingest(ByteBuffer _bb, EvacAllergy_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacAllergy_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacAllergy_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacAllergy_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacAllergy_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
  /// Example: /// Example: PENICILLIN
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// Additional comments on the  patient's allergy information.
  /// Example: /// Example: Comments on the patient's allergies.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Comments { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<EvacAllergy_Ingest> CreateEvacAllergy_Ingest(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset commentsOffset = default(StringOffset)) {
    builder.StartTable(2);
    EvacAllergy_Ingest.AddComments(builder, commentsOffset);
    EvacAllergy_Ingest.AddType(builder, typeOffset);
    return EvacAllergy_Ingest.EndEvacAllergy_Ingest(builder);
  }

  public static void StartEvacAllergy_Ingest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(1, commentsOffset.Value, 0); }
  public static Offset<EvacAllergy_Ingest> EndEvacAllergy_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacAllergy_Ingest>(o);
  }
  public static void FinishEvacAllergy_IngestBuffer(FlatBufferBuilder builder, Offset<EvacAllergy_Ingest> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacAllergy_IngestBuffer(FlatBufferBuilder builder, Offset<EvacAllergy_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacAllergy_IngestT UnPack() {
    var _o = new EvacAllergy_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacAllergy_IngestT _o) {
    _o.Type = this.Type;
    _o.Comments = this.Comments;
  }
  public static Offset<EvacAllergy_Ingest> Pack(FlatBufferBuilder builder, EvacAllergy_IngestT _o) {
    if (_o == null) return default(Offset<EvacAllergy_Ingest>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    return CreateEvacAllergy_Ingest(
      builder,
      _type,
      _comments);
  }
}

public class EvacAllergy_IngestT
{
  public string Type { get; set; }
  public string Comments { get; set; }

  public EvacAllergy_IngestT() {
    this.Type = null;
    this.Comments = null;
  }
  public static EvacAllergy_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacAllergy_Ingest.GetRootAsEvacAllergy_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacAllergy_Ingest.FinishEvacAllergy_IngestBuffer(fbb, EvacAllergy_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacAllergy_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyString(tablePos, 6 /*Comments*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
