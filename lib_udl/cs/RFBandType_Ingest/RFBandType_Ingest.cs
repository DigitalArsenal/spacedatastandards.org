// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// This table contains descriptions for common satellite RF bands.
public struct RFBandType_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFBandType_Ingest GetRootAsRFBandType_Ingest(ByteBuffer _bb) { return GetRootAsRFBandType_Ingest(_bb, new RFBandType_Ingest()); }
  public static RFBandType_Ingest GetRootAsRFBandType_Ingest(ByteBuffer _bb, RFBandType_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFBandType_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RFBA"); }
  public static bool VerifyRFBandType_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RFBA", false, RFBandType_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFBandType_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier for the RF band (e.g. X, K, Ku, etc).
  /// Example: /// Example: Ku
  /// Constraints: Minimum length = 1, Maximum length = 5
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Description of the band and common uses.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 1, Maximum length = 256
  public string Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  /// Approximate start of the band frequency range, in Ghz.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double StartFreq { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Approximate end of the band frequency range, in Ghz.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double EndFreq { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(14); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(16); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RFBandType_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(18); return o != 0 ? (RFBandType_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFBandType_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(20); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<RFBandType_Ingest> CreateRFBandType_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      double startFreq = 0.0,
      double endFreq = 0.0,
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      RFBandType_Ingest_dataMode_Enum dataMode = RFBandType_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(10);
    RFBandType_Ingest.AddEndFreq(builder, endFreq);
    RFBandType_Ingest.AddStartFreq(builder, startFreq);
    RFBandType_Ingest.AddCreatedBy(builder, createdByOffset);
    RFBandType_Ingest.AddCreatedAt(builder, createdAtOffset);
    RFBandType_Ingest.AddOrigin(builder, originOffset);
    RFBandType_Ingest.AddSource(builder, sourceOffset);
    RFBandType_Ingest.AddDescription(builder, descriptionOffset);
    RFBandType_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    RFBandType_Ingest.AddId(builder, idOffset);
    RFBandType_Ingest.AddDataMode(builder, dataMode);
    return RFBandType_Ingest.EndRFBandType_Ingest(builder);
  }

  public static void StartRFBandType_Ingest(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(2, descriptionOffset.Value, 0); }
  public static void AddStartFreq(FlatBufferBuilder builder, double startFreq) { builder.AddDouble(3, startFreq, 0.0); }
  public static void AddEndFreq(FlatBufferBuilder builder, double endFreq) { builder.AddDouble(4, endFreq, 0.0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(5, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(6, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RFBandType_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(7, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(8, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(9, createdByOffset.Value, 0); }
  public static Offset<RFBandType_Ingest> EndRFBandType_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFBandType_Ingest>(o);
  }
  public static void FinishRFBandType_IngestBuffer(FlatBufferBuilder builder, Offset<RFBandType_Ingest> offset) { builder.Finish(offset.Value, "RFBA"); }
  public static void FinishSizePrefixedRFBandType_IngestBuffer(FlatBufferBuilder builder, Offset<RFBandType_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "RFBA"); }
  public RFBandType_IngestT UnPack() {
    var _o = new RFBandType_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFBandType_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Description = this.Description;
    _o.StartFreq = this.StartFreq;
    _o.EndFreq = this.EndFreq;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<RFBandType_Ingest> Pack(FlatBufferBuilder builder, RFBandType_IngestT _o) {
    if (_o == null) return default(Offset<RFBandType_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateRFBandType_Ingest(
      builder,
      _id,
      _classificationMarking,
      _description,
      _o.StartFreq,
      _o.EndFreq,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class RFBandType_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Description { get; set; }
  public double StartFreq { get; set; }
  public double EndFreq { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public RFBandType_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public RFBandType_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Description = null;
    this.StartFreq = 0.0;
    this.EndFreq = 0.0;
    this.Source = null;
    this.Origin = null;
    this.DataMode = RFBandType_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static RFBandType_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return RFBandType_Ingest.GetRootAsRFBandType_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFBandType_Ingest.FinishRFBandType_IngestBuffer(fbb, RFBandType_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFBandType_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Description*/, false)
      && verifier.VerifyField(tablePos, 10 /*StartFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*EndFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 14 /*Source*/, false)
      && verifier.VerifyString(tablePos, 16 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 18 /*DataMode*/, 1 /*RFBandType_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 22 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
