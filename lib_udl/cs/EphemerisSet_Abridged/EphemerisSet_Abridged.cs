// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
public struct EphemerisSet_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EphemerisSet_Abridged GetRootAsEphemerisSet_Abridged(ByteBuffer _bb) { return GetRootAsEphemerisSet_Abridged(_bb, new EphemerisSet_Abridged()); }
  public static EphemerisSet_Abridged GetRootAsEphemerisSet_Abridged(ByteBuffer _bb, EphemerisSet_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EphemerisSet_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EPHE"); }
  public static bool VerifyEphemerisSet_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EPHE", false, EphemerisSet_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EphemerisSet_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EPHEMERISSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Start time/first time point of the ephemeris, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string PointStartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPointStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPointStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:10:00.123456Z
  /// Constraints: No constraints specified.
  public string UsableStartTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsableStartTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUsableStartTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUsableStartTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// End time/last time point of the ephemeris, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string PointEndTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointEndTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPointEndTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPointEndTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2018-01-01T20:50:00.123456Z
  /// Constraints: No constraints specified.
  public string UsableEndTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsableEndTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUsableEndTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUsableEndTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// Ephemeris step size, in seconds.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int StepSize { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of points contained in the ephemeris.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int NumPoints { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
  /// Example: /// Example: LAUNCH
  /// Constraints: Minimum length = 1, Maximum length = 24
  public string Type { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(24); }
  /// The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
  /// Example: /// Example: PROPAGATED
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Pedigree { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPedigreeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPedigreeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPedigreeArray() { return __p.__vector_as_array<byte>(26); }
  /// The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
  /// Example: /// Example: ANALYST
  /// Constraints: Minimum length = 1, Maximum length = 24
  public string Category { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(28); }
  /// ID of the State Vector used to generate the ephemeris.
  /// Example: /// Example: STATEVECTOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVectorBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetIdStateVectorBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetIdStateVectorArray() { return __p.__vector_as_array<byte>(30); }
  /// Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool HasMnvr { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
  /// Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
  /// Constraints: No constraints specified.
  public string IdManeuvers(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IdManeuversLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Boolean indicating whether covariance data is provided with the ephemeris.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool HasCov { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating whether acceleration data is provided with the ephemeris.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool HasAccel { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
  /// Example: /// Example: Earth
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CentBody { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCentBodyBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCentBodyBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCentBodyArray() { return __p.__vector_as_array<byte>(40); }
  /// Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
  /// Example: /// Example: COWELL
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Integrator { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIntegratorBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetIntegratorBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetIntegratorArray() { return __p.__vector_as_array<byte>(42); }
  /// Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
  /// Example: /// Example: GEM-T3
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string GeopotentialModel { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeopotentialModelBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetGeopotentialModelBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetGeopotentialModelArray() { return __p.__vector_as_array<byte>(44); }
  /// Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
  /// Example: /// Example: JAC70
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string DragModel { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDragModelBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetDragModelBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetDragModelArray() { return __p.__vector_as_array<byte>(46); }
  /// Boolean indicating use of lunar/solar data in ephemeris generation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool LunarSolar { get { int o = __p.__offset(48); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating use of solid earth tide data in ephemeris generation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool SolidEarthTides { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// First derivative of ballistic coefficient (m^2/kg-s).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double BDot { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Edr { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The recommended interpolation method for the ephemeris data.
  /// Example: /// Example: LINEAR
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Interpolation { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInterpolationBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetInterpolationBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetInterpolationArray() { return __p.__vector_as_array<byte>(56); }
  /// The recommended interpolation degree for the ephemeris data.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int InterpolationDegree { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
  /// Example: /// Example: Example file name
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Filename { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilenameBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetFilenameBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetFilenameArray() { return __p.__vector_as_array<byte>(60); }
  /// Additional source provided comments associated with the ephemeris.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Comments { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(62); }
  /// Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Description { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(64); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(66); }
  /// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public EphemerisSet_Abridged_referenceFrame_Enum ReferenceFrame { get { int o = __p.__offset(68); return o != 0 ? (EphemerisSet_Abridged_referenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EphemerisSet_Abridged_referenceFrame_Enum.J2000; } }
  /// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public EphemerisSet_Abridged_covReferenceFrame_Enum CovReferenceFrame { get { int o = __p.__offset(70); return o != 0 ? (EphemerisSet_Abridged_covReferenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EphemerisSet_Abridged_covReferenceFrame_Enum.J2000; } }
  /// Time the row was created in the database, in UTC.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(76); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(78); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EphemerisSet_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(80); return o != 0 ? (EphemerisSet_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EphemerisSet_Abridged_dataMode_Enum.REAL; } }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(84); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(86); }

  public static Offset<EphemerisSet_Abridged> CreateEphemerisSet_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset pointStartTimeOffset = default(StringOffset),
      StringOffset usableStartTimeOffset = default(StringOffset),
      StringOffset pointEndTimeOffset = default(StringOffset),
      StringOffset usableEndTimeOffset = default(StringOffset),
      int stepSize = 0,
      int numPoints = 0,
      StringOffset typeOffset = default(StringOffset),
      StringOffset pedigreeOffset = default(StringOffset),
      StringOffset categoryOffset = default(StringOffset),
      StringOffset idStateVectorOffset = default(StringOffset),
      bool hasMnvr = false,
      VectorOffset idManeuversOffset = default(VectorOffset),
      bool hasCov = false,
      bool hasAccel = false,
      StringOffset centBodyOffset = default(StringOffset),
      StringOffset integratorOffset = default(StringOffset),
      StringOffset geopotentialModelOffset = default(StringOffset),
      StringOffset dragModelOffset = default(StringOffset),
      bool lunarSolar = false,
      bool solidEarthTides = false,
      double bDot = 0.0,
      double edr = 0.0,
      StringOffset interpolationOffset = default(StringOffset),
      int interpolationDegree = 0,
      StringOffset filenameOffset = default(StringOffset),
      StringOffset commentsOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      EphemerisSet_Abridged_referenceFrame_Enum referenceFrame = EphemerisSet_Abridged_referenceFrame_Enum.J2000,
      EphemerisSet_Abridged_covReferenceFrame_Enum covReferenceFrame = EphemerisSet_Abridged_covReferenceFrame_Enum.J2000,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      EphemerisSet_Abridged_dataMode_Enum dataMode = EphemerisSet_Abridged_dataMode_Enum.REAL,
      int satNo = 0,
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(42);
    EphemerisSet_Abridged.AddEdr(builder, edr);
    EphemerisSet_Abridged.AddBDot(builder, bDot);
    EphemerisSet_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    EphemerisSet_Abridged.AddTransactionId(builder, transactionIdOffset);
    EphemerisSet_Abridged.AddSatNo(builder, satNo);
    EphemerisSet_Abridged.AddOrigin(builder, originOffset);
    EphemerisSet_Abridged.AddSource(builder, sourceOffset);
    EphemerisSet_Abridged.AddCreatedBy(builder, createdByOffset);
    EphemerisSet_Abridged.AddCreatedAt(builder, createdAtOffset);
    EphemerisSet_Abridged.AddDescriptor(builder, descriptorOffset);
    EphemerisSet_Abridged.AddDescription(builder, descriptionOffset);
    EphemerisSet_Abridged.AddComments(builder, commentsOffset);
    EphemerisSet_Abridged.AddFilename(builder, filenameOffset);
    EphemerisSet_Abridged.AddInterpolationDegree(builder, interpolationDegree);
    EphemerisSet_Abridged.AddInterpolation(builder, interpolationOffset);
    EphemerisSet_Abridged.AddDragModel(builder, dragModelOffset);
    EphemerisSet_Abridged.AddGeopotentialModel(builder, geopotentialModelOffset);
    EphemerisSet_Abridged.AddIntegrator(builder, integratorOffset);
    EphemerisSet_Abridged.AddCentBody(builder, centBodyOffset);
    EphemerisSet_Abridged.AddIdManeuvers(builder, idManeuversOffset);
    EphemerisSet_Abridged.AddIdStateVector(builder, idStateVectorOffset);
    EphemerisSet_Abridged.AddCategory(builder, categoryOffset);
    EphemerisSet_Abridged.AddPedigree(builder, pedigreeOffset);
    EphemerisSet_Abridged.AddType(builder, typeOffset);
    EphemerisSet_Abridged.AddNumPoints(builder, numPoints);
    EphemerisSet_Abridged.AddStepSize(builder, stepSize);
    EphemerisSet_Abridged.AddUsableEndTime(builder, usableEndTimeOffset);
    EphemerisSet_Abridged.AddPointEndTime(builder, pointEndTimeOffset);
    EphemerisSet_Abridged.AddUsableStartTime(builder, usableStartTimeOffset);
    EphemerisSet_Abridged.AddPointStartTime(builder, pointStartTimeOffset);
    EphemerisSet_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    EphemerisSet_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    EphemerisSet_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    EphemerisSet_Abridged.AddId(builder, idOffset);
    EphemerisSet_Abridged.AddDataMode(builder, dataMode);
    EphemerisSet_Abridged.AddCovReferenceFrame(builder, covReferenceFrame);
    EphemerisSet_Abridged.AddReferenceFrame(builder, referenceFrame);
    EphemerisSet_Abridged.AddSolidEarthTides(builder, solidEarthTides);
    EphemerisSet_Abridged.AddLunarSolar(builder, lunarSolar);
    EphemerisSet_Abridged.AddHasAccel(builder, hasAccel);
    EphemerisSet_Abridged.AddHasCov(builder, hasCov);
    EphemerisSet_Abridged.AddHasMnvr(builder, hasMnvr);
    return EphemerisSet_Abridged.EndEphemerisSet_Abridged(builder);
  }

  public static void StartEphemerisSet_Abridged(FlatBufferBuilder builder) { builder.StartTable(42); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(3, origObjectIdOffset.Value, 0); }
  public static void AddPointStartTime(FlatBufferBuilder builder, StringOffset pointStartTimeOffset) { builder.AddOffset(4, pointStartTimeOffset.Value, 0); }
  public static void AddUsableStartTime(FlatBufferBuilder builder, StringOffset usableStartTimeOffset) { builder.AddOffset(5, usableStartTimeOffset.Value, 0); }
  public static void AddPointEndTime(FlatBufferBuilder builder, StringOffset pointEndTimeOffset) { builder.AddOffset(6, pointEndTimeOffset.Value, 0); }
  public static void AddUsableEndTime(FlatBufferBuilder builder, StringOffset usableEndTimeOffset) { builder.AddOffset(7, usableEndTimeOffset.Value, 0); }
  public static void AddStepSize(FlatBufferBuilder builder, int stepSize) { builder.AddInt(8, stepSize, 0); }
  public static void AddNumPoints(FlatBufferBuilder builder, int numPoints) { builder.AddInt(9, numPoints, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(10, typeOffset.Value, 0); }
  public static void AddPedigree(FlatBufferBuilder builder, StringOffset pedigreeOffset) { builder.AddOffset(11, pedigreeOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(12, categoryOffset.Value, 0); }
  public static void AddIdStateVector(FlatBufferBuilder builder, StringOffset idStateVectorOffset) { builder.AddOffset(13, idStateVectorOffset.Value, 0); }
  public static void AddHasMnvr(FlatBufferBuilder builder, bool hasMnvr) { builder.AddBool(14, hasMnvr, false); }
  public static void AddIdManeuvers(FlatBufferBuilder builder, VectorOffset idManeuversOffset) { builder.AddOffset(15, idManeuversOffset.Value, 0); }
  public static VectorOffset CreateIdManeuversVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIdManeuversVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdManeuversVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdManeuversVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdManeuversVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddHasCov(FlatBufferBuilder builder, bool hasCov) { builder.AddBool(16, hasCov, false); }
  public static void AddHasAccel(FlatBufferBuilder builder, bool hasAccel) { builder.AddBool(17, hasAccel, false); }
  public static void AddCentBody(FlatBufferBuilder builder, StringOffset centBodyOffset) { builder.AddOffset(18, centBodyOffset.Value, 0); }
  public static void AddIntegrator(FlatBufferBuilder builder, StringOffset integratorOffset) { builder.AddOffset(19, integratorOffset.Value, 0); }
  public static void AddGeopotentialModel(FlatBufferBuilder builder, StringOffset geopotentialModelOffset) { builder.AddOffset(20, geopotentialModelOffset.Value, 0); }
  public static void AddDragModel(FlatBufferBuilder builder, StringOffset dragModelOffset) { builder.AddOffset(21, dragModelOffset.Value, 0); }
  public static void AddLunarSolar(FlatBufferBuilder builder, bool lunarSolar) { builder.AddBool(22, lunarSolar, false); }
  public static void AddSolidEarthTides(FlatBufferBuilder builder, bool solidEarthTides) { builder.AddBool(23, solidEarthTides, false); }
  public static void AddBDot(FlatBufferBuilder builder, double bDot) { builder.AddDouble(24, bDot, 0.0); }
  public static void AddEdr(FlatBufferBuilder builder, double edr) { builder.AddDouble(25, edr, 0.0); }
  public static void AddInterpolation(FlatBufferBuilder builder, StringOffset interpolationOffset) { builder.AddOffset(26, interpolationOffset.Value, 0); }
  public static void AddInterpolationDegree(FlatBufferBuilder builder, int interpolationDegree) { builder.AddInt(27, interpolationDegree, 0); }
  public static void AddFilename(FlatBufferBuilder builder, StringOffset filenameOffset) { builder.AddOffset(28, filenameOffset.Value, 0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(29, commentsOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(30, descriptionOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(31, descriptorOffset.Value, 0); }
  public static void AddReferenceFrame(FlatBufferBuilder builder, EphemerisSet_Abridged_referenceFrame_Enum referenceFrame) { builder.AddSbyte(32, (sbyte)referenceFrame, 0); }
  public static void AddCovReferenceFrame(FlatBufferBuilder builder, EphemerisSet_Abridged_covReferenceFrame_Enum covReferenceFrame) { builder.AddSbyte(33, (sbyte)covReferenceFrame, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(36, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(37, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EphemerisSet_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(38, (sbyte)dataMode, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(39, satNo, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(40, transactionIdOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(41, origNetworkOffset.Value, 0); }
  public static Offset<EphemerisSet_Abridged> EndEphemerisSet_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EphemerisSet_Abridged>(o);
  }
  public static void FinishEphemerisSet_AbridgedBuffer(FlatBufferBuilder builder, Offset<EphemerisSet_Abridged> offset) { builder.Finish(offset.Value, "EPHE"); }
  public static void FinishSizePrefixedEphemerisSet_AbridgedBuffer(FlatBufferBuilder builder, Offset<EphemerisSet_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EPHE"); }
  public EphemerisSet_AbridgedT UnPack() {
    var _o = new EphemerisSet_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EphemerisSet_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.PointStartTime = this.PointStartTime;
    _o.UsableStartTime = this.UsableStartTime;
    _o.PointEndTime = this.PointEndTime;
    _o.UsableEndTime = this.UsableEndTime;
    _o.StepSize = this.StepSize;
    _o.NumPoints = this.NumPoints;
    _o.Type = this.Type;
    _o.Pedigree = this.Pedigree;
    _o.Category = this.Category;
    _o.IdStateVector = this.IdStateVector;
    _o.HasMnvr = this.HasMnvr;
    _o.IdManeuvers = new List<string>();
    for (var _j = 0; _j < this.IdManeuversLength; ++_j) {_o.IdManeuvers.Add(this.IdManeuvers(_j));}
    _o.HasCov = this.HasCov;
    _o.HasAccel = this.HasAccel;
    _o.CentBody = this.CentBody;
    _o.Integrator = this.Integrator;
    _o.GeopotentialModel = this.GeopotentialModel;
    _o.DragModel = this.DragModel;
    _o.LunarSolar = this.LunarSolar;
    _o.SolidEarthTides = this.SolidEarthTides;
    _o.BDot = this.BDot;
    _o.Edr = this.Edr;
    _o.Interpolation = this.Interpolation;
    _o.InterpolationDegree = this.InterpolationDegree;
    _o.Filename = this.Filename;
    _o.Comments = this.Comments;
    _o.Description = this.Description;
    _o.Descriptor = this.Descriptor;
    _o.ReferenceFrame = this.ReferenceFrame;
    _o.CovReferenceFrame = this.CovReferenceFrame;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.SatNo = this.SatNo;
    _o.TransactionId = this.TransactionId;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<EphemerisSet_Abridged> Pack(FlatBufferBuilder builder, EphemerisSet_AbridgedT _o) {
    if (_o == null) return default(Offset<EphemerisSet_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _pointStartTime = _o.PointStartTime == null ? default(StringOffset) : builder.CreateString(_o.PointStartTime);
    var _usableStartTime = _o.UsableStartTime == null ? default(StringOffset) : builder.CreateString(_o.UsableStartTime);
    var _pointEndTime = _o.PointEndTime == null ? default(StringOffset) : builder.CreateString(_o.PointEndTime);
    var _usableEndTime = _o.UsableEndTime == null ? default(StringOffset) : builder.CreateString(_o.UsableEndTime);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _pedigree = _o.Pedigree == null ? default(StringOffset) : builder.CreateString(_o.Pedigree);
    var _category = _o.Category == null ? default(StringOffset) : builder.CreateString(_o.Category);
    var _idStateVector = _o.IdStateVector == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector);
    var _idManeuvers = default(VectorOffset);
    if (_o.IdManeuvers != null) {
      var __idManeuvers = new StringOffset[_o.IdManeuvers.Count];
      for (var _j = 0; _j < __idManeuvers.Length; ++_j) { __idManeuvers[_j] = builder.CreateString(_o.IdManeuvers[_j]); }
      _idManeuvers = CreateIdManeuversVector(builder, __idManeuvers);
    }
    var _centBody = _o.CentBody == null ? default(StringOffset) : builder.CreateString(_o.CentBody);
    var _integrator = _o.Integrator == null ? default(StringOffset) : builder.CreateString(_o.Integrator);
    var _geopotentialModel = _o.GeopotentialModel == null ? default(StringOffset) : builder.CreateString(_o.GeopotentialModel);
    var _dragModel = _o.DragModel == null ? default(StringOffset) : builder.CreateString(_o.DragModel);
    var _interpolation = _o.Interpolation == null ? default(StringOffset) : builder.CreateString(_o.Interpolation);
    var _filename = _o.Filename == null ? default(StringOffset) : builder.CreateString(_o.Filename);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateEphemerisSet_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _origObjectId,
      _pointStartTime,
      _usableStartTime,
      _pointEndTime,
      _usableEndTime,
      _o.StepSize,
      _o.NumPoints,
      _type,
      _pedigree,
      _category,
      _idStateVector,
      _o.HasMnvr,
      _idManeuvers,
      _o.HasCov,
      _o.HasAccel,
      _centBody,
      _integrator,
      _geopotentialModel,
      _dragModel,
      _o.LunarSolar,
      _o.SolidEarthTides,
      _o.BDot,
      _o.Edr,
      _interpolation,
      _o.InterpolationDegree,
      _filename,
      _comments,
      _description,
      _descriptor,
      _o.ReferenceFrame,
      _o.CovReferenceFrame,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _o.SatNo,
      _transactionId,
      _origNetwork);
  }
}

public class EphemerisSet_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public string PointStartTime { get; set; }
  public string UsableStartTime { get; set; }
  public string PointEndTime { get; set; }
  public string UsableEndTime { get; set; }
  public int StepSize { get; set; }
  public int NumPoints { get; set; }
  public string Type { get; set; }
  public string Pedigree { get; set; }
  public string Category { get; set; }
  public string IdStateVector { get; set; }
  public bool HasMnvr { get; set; }
  public List<string> IdManeuvers { get; set; }
  public bool HasCov { get; set; }
  public bool HasAccel { get; set; }
  public string CentBody { get; set; }
  public string Integrator { get; set; }
  public string GeopotentialModel { get; set; }
  public string DragModel { get; set; }
  public bool LunarSolar { get; set; }
  public bool SolidEarthTides { get; set; }
  public double BDot { get; set; }
  public double Edr { get; set; }
  public string Interpolation { get; set; }
  public int InterpolationDegree { get; set; }
  public string Filename { get; set; }
  public string Comments { get; set; }
  public string Description { get; set; }
  public string Descriptor { get; set; }
  public EphemerisSet_Abridged_referenceFrame_Enum ReferenceFrame { get; set; }
  public EphemerisSet_Abridged_covReferenceFrame_Enum CovReferenceFrame { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public EphemerisSet_Abridged_dataMode_Enum DataMode { get; set; }
  public int SatNo { get; set; }
  public string TransactionId { get; set; }
  public string OrigNetwork { get; set; }

  public EphemerisSet_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.OrigObjectId = null;
    this.PointStartTime = null;
    this.UsableStartTime = null;
    this.PointEndTime = null;
    this.UsableEndTime = null;
    this.StepSize = 0;
    this.NumPoints = 0;
    this.Type = null;
    this.Pedigree = null;
    this.Category = null;
    this.IdStateVector = null;
    this.HasMnvr = false;
    this.IdManeuvers = null;
    this.HasCov = false;
    this.HasAccel = false;
    this.CentBody = null;
    this.Integrator = null;
    this.GeopotentialModel = null;
    this.DragModel = null;
    this.LunarSolar = false;
    this.SolidEarthTides = false;
    this.BDot = 0.0;
    this.Edr = 0.0;
    this.Interpolation = null;
    this.InterpolationDegree = 0;
    this.Filename = null;
    this.Comments = null;
    this.Description = null;
    this.Descriptor = null;
    this.ReferenceFrame = EphemerisSet_Abridged_referenceFrame_Enum.J2000;
    this.CovReferenceFrame = EphemerisSet_Abridged_covReferenceFrame_Enum.J2000;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = EphemerisSet_Abridged_dataMode_Enum.REAL;
    this.SatNo = 0;
    this.TransactionId = null;
    this.OrigNetwork = null;
  }
  public static EphemerisSet_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return EphemerisSet_Abridged.GetRootAsEphemerisSet_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EphemerisSet_Abridged.FinishEphemerisSet_AbridgedBuffer(fbb, EphemerisSet_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EphemerisSet_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 12 /*PointStartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*UsableStartTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*PointEndTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*UsableEndTime*/, false)
      && verifier.VerifyField(tablePos, 20 /*StepSize*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*NumPoints*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*Type*/, false)
      && verifier.VerifyString(tablePos, 26 /*Pedigree*/, false)
      && verifier.VerifyString(tablePos, 28 /*Category*/, false)
      && verifier.VerifyString(tablePos, 30 /*IdStateVector*/, false)
      && verifier.VerifyField(tablePos, 32 /*HasMnvr*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*IdManeuvers*/, false)
      && verifier.VerifyField(tablePos, 36 /*HasCov*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 38 /*HasAccel*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*CentBody*/, false)
      && verifier.VerifyString(tablePos, 42 /*Integrator*/, false)
      && verifier.VerifyString(tablePos, 44 /*GeopotentialModel*/, false)
      && verifier.VerifyString(tablePos, 46 /*DragModel*/, false)
      && verifier.VerifyField(tablePos, 48 /*LunarSolar*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 50 /*SolidEarthTides*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 52 /*BDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Edr*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*Interpolation*/, false)
      && verifier.VerifyField(tablePos, 58 /*InterpolationDegree*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 60 /*Filename*/, false)
      && verifier.VerifyString(tablePos, 62 /*Comments*/, false)
      && verifier.VerifyString(tablePos, 64 /*Description*/, false)
      && verifier.VerifyString(tablePos, 66 /*Descriptor*/, false)
      && verifier.VerifyField(tablePos, 68 /*ReferenceFrame*/, 1 /*EphemerisSet_Abridged_referenceFrame_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*CovReferenceFrame*/, 1 /*EphemerisSet_Abridged_covReferenceFrame_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*Source*/, false)
      && verifier.VerifyString(tablePos, 78 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 80 /*DataMode*/, 1 /*EphemerisSet_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 84 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 86 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
