// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
public struct Sensorlimits_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Sensorlimits_Abridged GetRootAsSensorlimits_Abridged(ByteBuffer _bb) { return GetRootAsSensorlimits_Abridged(_bb, new Sensorlimits_Abridged()); }
  public static Sensorlimits_Abridged GetRootAsSensorlimits_Abridged(ByteBuffer _bb, Sensorlimits_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Sensorlimits_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensorlimits_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, Sensorlimits_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sensorlimits_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORLIMITS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSensorLimits { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorLimitsBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdSensorLimitsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdSensorLimitsArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(8); }
  /// Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double UpperLeftAzimuthLimit { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double UpperRightAzimuthLimit { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LowerRightAzimuthLimit { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LowerLeftAzimuthLimit { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LowerLeftElevationLimit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double UpperLeftElevationLimit { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double LowerRightElevationLimit { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double UpperRightElevationLimit { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(26); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Sensorlimits_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(28); return o != 0 ? (Sensorlimits_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Sensorlimits_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(30); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(32); }
  /// Unique identifier of the target sensor object.
  /// Example: /// Example: SENSORLIMITS-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(34); }

  public static Offset<Sensorlimits_Abridged> CreateSensorlimits_Abridged(FlatBufferBuilder builder,
      StringOffset idSensorLimitsOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      double upperLeftAzimuthLimit = 0.0,
      double upperRightAzimuthLimit = 0.0,
      double lowerRightAzimuthLimit = 0.0,
      double lowerLeftAzimuthLimit = 0.0,
      double lowerLeftElevationLimit = 0.0,
      double upperLeftElevationLimit = 0.0,
      double lowerRightElevationLimit = 0.0,
      double upperRightElevationLimit = 0.0,
      StringOffset sourceOffset = default(StringOffset),
      Sensorlimits_Abridged_dataMode_Enum dataMode = Sensorlimits_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset)) {
    builder.StartTable(16);
    Sensorlimits_Abridged.AddUpperRightElevationLimit(builder, upperRightElevationLimit);
    Sensorlimits_Abridged.AddLowerRightElevationLimit(builder, lowerRightElevationLimit);
    Sensorlimits_Abridged.AddUpperLeftElevationLimit(builder, upperLeftElevationLimit);
    Sensorlimits_Abridged.AddLowerLeftElevationLimit(builder, lowerLeftElevationLimit);
    Sensorlimits_Abridged.AddLowerLeftAzimuthLimit(builder, lowerLeftAzimuthLimit);
    Sensorlimits_Abridged.AddLowerRightAzimuthLimit(builder, lowerRightAzimuthLimit);
    Sensorlimits_Abridged.AddUpperRightAzimuthLimit(builder, upperRightAzimuthLimit);
    Sensorlimits_Abridged.AddUpperLeftAzimuthLimit(builder, upperLeftAzimuthLimit);
    Sensorlimits_Abridged.AddIdSensor(builder, idSensorOffset);
    Sensorlimits_Abridged.AddCreatedBy(builder, createdByOffset);
    Sensorlimits_Abridged.AddCreatedAt(builder, createdAtOffset);
    Sensorlimits_Abridged.AddSource(builder, sourceOffset);
    Sensorlimits_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Sensorlimits_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Sensorlimits_Abridged.AddIdSensorLimits(builder, idSensorLimitsOffset);
    Sensorlimits_Abridged.AddDataMode(builder, dataMode);
    return Sensorlimits_Abridged.EndSensorlimits_Abridged(builder);
  }

  public static void StartSensorlimits_Abridged(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddIdSensorLimits(FlatBufferBuilder builder, StringOffset idSensorLimitsOffset) { builder.AddOffset(0, idSensorLimitsOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(2, origNetworkOffset.Value, 0); }
  public static void AddUpperLeftAzimuthLimit(FlatBufferBuilder builder, double upperLeftAzimuthLimit) { builder.AddDouble(3, upperLeftAzimuthLimit, 0.0); }
  public static void AddUpperRightAzimuthLimit(FlatBufferBuilder builder, double upperRightAzimuthLimit) { builder.AddDouble(4, upperRightAzimuthLimit, 0.0); }
  public static void AddLowerRightAzimuthLimit(FlatBufferBuilder builder, double lowerRightAzimuthLimit) { builder.AddDouble(5, lowerRightAzimuthLimit, 0.0); }
  public static void AddLowerLeftAzimuthLimit(FlatBufferBuilder builder, double lowerLeftAzimuthLimit) { builder.AddDouble(6, lowerLeftAzimuthLimit, 0.0); }
  public static void AddLowerLeftElevationLimit(FlatBufferBuilder builder, double lowerLeftElevationLimit) { builder.AddDouble(7, lowerLeftElevationLimit, 0.0); }
  public static void AddUpperLeftElevationLimit(FlatBufferBuilder builder, double upperLeftElevationLimit) { builder.AddDouble(8, upperLeftElevationLimit, 0.0); }
  public static void AddLowerRightElevationLimit(FlatBufferBuilder builder, double lowerRightElevationLimit) { builder.AddDouble(9, lowerRightElevationLimit, 0.0); }
  public static void AddUpperRightElevationLimit(FlatBufferBuilder builder, double upperRightElevationLimit) { builder.AddDouble(10, upperRightElevationLimit, 0.0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(11, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Sensorlimits_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(12, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(13, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(14, createdByOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(15, idSensorOffset.Value, 0); }
  public static Offset<Sensorlimits_Abridged> EndSensorlimits_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Sensorlimits_Abridged>(o);
  }
  public static void FinishSensorlimits_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensorlimits_Abridged> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensorlimits_AbridgedBuffer(FlatBufferBuilder builder, Offset<Sensorlimits_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public Sensorlimits_AbridgedT UnPack() {
    var _o = new Sensorlimits_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Sensorlimits_AbridgedT _o) {
    _o.IdSensorLimits = this.IdSensorLimits;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigNetwork = this.OrigNetwork;
    _o.UpperLeftAzimuthLimit = this.UpperLeftAzimuthLimit;
    _o.UpperRightAzimuthLimit = this.UpperRightAzimuthLimit;
    _o.LowerRightAzimuthLimit = this.LowerRightAzimuthLimit;
    _o.LowerLeftAzimuthLimit = this.LowerLeftAzimuthLimit;
    _o.LowerLeftElevationLimit = this.LowerLeftElevationLimit;
    _o.UpperLeftElevationLimit = this.UpperLeftElevationLimit;
    _o.LowerRightElevationLimit = this.LowerRightElevationLimit;
    _o.UpperRightElevationLimit = this.UpperRightElevationLimit;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.IdSensor = this.IdSensor;
  }
  public static Offset<Sensorlimits_Abridged> Pack(FlatBufferBuilder builder, Sensorlimits_AbridgedT _o) {
    if (_o == null) return default(Offset<Sensorlimits_Abridged>);
    var _idSensorLimits = _o.IdSensorLimits == null ? default(StringOffset) : builder.CreateString(_o.IdSensorLimits);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    return CreateSensorlimits_Abridged(
      builder,
      _idSensorLimits,
      _classificationMarking,
      _origNetwork,
      _o.UpperLeftAzimuthLimit,
      _o.UpperRightAzimuthLimit,
      _o.LowerRightAzimuthLimit,
      _o.LowerLeftAzimuthLimit,
      _o.LowerLeftElevationLimit,
      _o.UpperLeftElevationLimit,
      _o.LowerRightElevationLimit,
      _o.UpperRightElevationLimit,
      _source,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _idSensor);
  }
}

public class Sensorlimits_AbridgedT
{
  public string IdSensorLimits { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigNetwork { get; set; }
  public double UpperLeftAzimuthLimit { get; set; }
  public double UpperRightAzimuthLimit { get; set; }
  public double LowerRightAzimuthLimit { get; set; }
  public double LowerLeftAzimuthLimit { get; set; }
  public double LowerLeftElevationLimit { get; set; }
  public double UpperLeftElevationLimit { get; set; }
  public double LowerRightElevationLimit { get; set; }
  public double UpperRightElevationLimit { get; set; }
  public string Source { get; set; }
  public Sensorlimits_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string IdSensor { get; set; }

  public Sensorlimits_AbridgedT() {
    this.IdSensorLimits = null;
    this.ClassificationMarking = null;
    this.OrigNetwork = null;
    this.UpperLeftAzimuthLimit = 0.0;
    this.UpperRightAzimuthLimit = 0.0;
    this.LowerRightAzimuthLimit = 0.0;
    this.LowerLeftAzimuthLimit = 0.0;
    this.LowerLeftElevationLimit = 0.0;
    this.UpperLeftElevationLimit = 0.0;
    this.LowerRightElevationLimit = 0.0;
    this.UpperRightElevationLimit = 0.0;
    this.Source = null;
    this.DataMode = Sensorlimits_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.IdSensor = null;
  }
  public static Sensorlimits_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Sensorlimits_Abridged.GetRootAsSensorlimits_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Sensorlimits_Abridged.FinishSensorlimits_AbridgedBuffer(fbb, Sensorlimits_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Sensorlimits_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdSensorLimits*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 10 /*UpperLeftAzimuthLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*UpperRightAzimuthLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*LowerRightAzimuthLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*LowerLeftAzimuthLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*LowerLeftElevationLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*UpperLeftElevationLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*LowerRightElevationLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*UpperRightElevationLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 26 /*Source*/, false)
      && verifier.VerifyField(tablePos, 28 /*DataMode*/, 1 /*Sensorlimits_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 30 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 34 /*IdSensor*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
