// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Properties and characteristics of a remark that is associated with an aircraft status.
public struct AircraftStatusRemark_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftStatusRemark_Ingest GetRootAsAircraftStatusRemark_Ingest(ByteBuffer _bb) { return GetRootAsAircraftStatusRemark_Ingest(_bb, new AircraftStatusRemark_Ingest()); }
  public static AircraftStatusRemark_Ingest GetRootAsAircraftStatusRemark_Ingest(ByteBuffer _bb, AircraftStatusRemark_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftStatusRemark_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftStatusRemark_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftStatusRemark_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftStatusRemark_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The ID of the Aircraft Status to which this remark applies.
  /// Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdAircraftStatus { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAircraftStatusBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdAircraftStatusBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdAircraftStatusArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the Aircraft Status Remark record from the originating system.
  /// Example: /// Example: GDSSBL022307131714250077
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltRmkId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltRmkIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAltRmkIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAltRmkIdArray() { return __p.__vector_as_array<byte>(10); }
  /// The name of the remark.
  /// Example: /// Example: DISCREPANCY - 202297501
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }
  /// The text of the remark.
  /// Example: /// Example: Remark text
  /// Constraints: Minimum length = 1, Maximum length = 1024
  public string Text { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTextArray() { return __p.__vector_as_array<byte>(14); }
  /// Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T15:00:00.123Z
  /// Constraints: No constraints specified.
  public string Timestamp { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimestampBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTimestampBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTimestampArray() { return __p.__vector_as_array<byte>(16); }
  /// The name or ID of the external user that updated this remark in the originating system.
  /// Example: /// Example: JOHN SMITH
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string LastUpdatedBy { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastUpdatedByBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLastUpdatedByBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLastUpdatedByArray() { return __p.__vector_as_array<byte>(18); }
  /// Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LastUpdatedAt { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastUpdatedAtBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLastUpdatedAtBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLastUpdatedAtArray() { return __p.__vector_as_array<byte>(20); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(22); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(24); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(26); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(28); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(30); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(32); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AircraftStatusRemark_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(34); return o != 0 ? (AircraftStatusRemark_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AircraftStatusRemark_Ingest_dataMode_Enum.REAL; } }

  public static Offset<AircraftStatusRemark_Ingest> CreateAircraftStatusRemark_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idAircraftStatusOffset = default(StringOffset),
      StringOffset altRmkIdOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset textOffset = default(StringOffset),
      StringOffset timestampOffset = default(StringOffset),
      StringOffset lastUpdatedByOffset = default(StringOffset),
      StringOffset lastUpdatedAtOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      AircraftStatusRemark_Ingest_dataMode_Enum dataMode = AircraftStatusRemark_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(16);
    AircraftStatusRemark_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    AircraftStatusRemark_Ingest.AddOrigin(builder, originOffset);
    AircraftStatusRemark_Ingest.AddSource(builder, sourceOffset);
    AircraftStatusRemark_Ingest.AddSourceDL(builder, sourceDLOffset);
    AircraftStatusRemark_Ingest.AddCreatedBy(builder, createdByOffset);
    AircraftStatusRemark_Ingest.AddCreatedAt(builder, createdAtOffset);
    AircraftStatusRemark_Ingest.AddLastUpdatedAt(builder, lastUpdatedAtOffset);
    AircraftStatusRemark_Ingest.AddLastUpdatedBy(builder, lastUpdatedByOffset);
    AircraftStatusRemark_Ingest.AddTimestamp(builder, timestampOffset);
    AircraftStatusRemark_Ingest.AddText(builder, textOffset);
    AircraftStatusRemark_Ingest.AddName(builder, nameOffset);
    AircraftStatusRemark_Ingest.AddAltRmkId(builder, altRmkIdOffset);
    AircraftStatusRemark_Ingest.AddIdAircraftStatus(builder, idAircraftStatusOffset);
    AircraftStatusRemark_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    AircraftStatusRemark_Ingest.AddId(builder, idOffset);
    AircraftStatusRemark_Ingest.AddDataMode(builder, dataMode);
    return AircraftStatusRemark_Ingest.EndAircraftStatusRemark_Ingest(builder);
  }

  public static void StartAircraftStatusRemark_Ingest(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdAircraftStatus(FlatBufferBuilder builder, StringOffset idAircraftStatusOffset) { builder.AddOffset(2, idAircraftStatusOffset.Value, 0); }
  public static void AddAltRmkId(FlatBufferBuilder builder, StringOffset altRmkIdOffset) { builder.AddOffset(3, altRmkIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(5, textOffset.Value, 0); }
  public static void AddTimestamp(FlatBufferBuilder builder, StringOffset timestampOffset) { builder.AddOffset(6, timestampOffset.Value, 0); }
  public static void AddLastUpdatedBy(FlatBufferBuilder builder, StringOffset lastUpdatedByOffset) { builder.AddOffset(7, lastUpdatedByOffset.Value, 0); }
  public static void AddLastUpdatedAt(FlatBufferBuilder builder, StringOffset lastUpdatedAtOffset) { builder.AddOffset(8, lastUpdatedAtOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(9, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(10, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(11, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(12, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(13, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(14, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AircraftStatusRemark_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(15, (sbyte)dataMode, 0); }
  public static Offset<AircraftStatusRemark_Ingest> EndAircraftStatusRemark_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftStatusRemark_Ingest>(o);
  }
  public static void FinishAircraftStatusRemark_IngestBuffer(FlatBufferBuilder builder, Offset<AircraftStatusRemark_Ingest> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftStatusRemark_IngestBuffer(FlatBufferBuilder builder, Offset<AircraftStatusRemark_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftStatusRemark_IngestT UnPack() {
    var _o = new AircraftStatusRemark_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftStatusRemark_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdAircraftStatus = this.IdAircraftStatus;
    _o.AltRmkId = this.AltRmkId;
    _o.Name = this.Name;
    _o.Text = this.Text;
    _o.Timestamp = this.Timestamp;
    _o.LastUpdatedBy = this.LastUpdatedBy;
    _o.LastUpdatedAt = this.LastUpdatedAt;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<AircraftStatusRemark_Ingest> Pack(FlatBufferBuilder builder, AircraftStatusRemark_IngestT _o) {
    if (_o == null) return default(Offset<AircraftStatusRemark_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idAircraftStatus = _o.IdAircraftStatus == null ? default(StringOffset) : builder.CreateString(_o.IdAircraftStatus);
    var _altRmkId = _o.AltRmkId == null ? default(StringOffset) : builder.CreateString(_o.AltRmkId);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _text = _o.Text == null ? default(StringOffset) : builder.CreateString(_o.Text);
    var _timestamp = _o.Timestamp == null ? default(StringOffset) : builder.CreateString(_o.Timestamp);
    var _lastUpdatedBy = _o.LastUpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.LastUpdatedBy);
    var _lastUpdatedAt = _o.LastUpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.LastUpdatedAt);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAircraftStatusRemark_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idAircraftStatus,
      _altRmkId,
      _name,
      _text,
      _timestamp,
      _lastUpdatedBy,
      _lastUpdatedAt,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class AircraftStatusRemark_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdAircraftStatus { get; set; }
  public string AltRmkId { get; set; }
  public string Name { get; set; }
  public string Text { get; set; }
  public string Timestamp { get; set; }
  public string LastUpdatedBy { get; set; }
  public string LastUpdatedAt { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public AircraftStatusRemark_Ingest_dataMode_Enum DataMode { get; set; }

  public AircraftStatusRemark_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdAircraftStatus = null;
    this.AltRmkId = null;
    this.Name = null;
    this.Text = null;
    this.Timestamp = null;
    this.LastUpdatedBy = null;
    this.LastUpdatedAt = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = AircraftStatusRemark_Ingest_dataMode_Enum.REAL;
  }
  public static AircraftStatusRemark_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftStatusRemark_Ingest.GetRootAsAircraftStatusRemark_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftStatusRemark_Ingest.FinishAircraftStatusRemark_IngestBuffer(fbb, AircraftStatusRemark_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftStatusRemark_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdAircraftStatus*/, false)
      && verifier.VerifyString(tablePos, 10 /*AltRmkId*/, false)
      && verifier.VerifyString(tablePos, 12 /*Name*/, false)
      && verifier.VerifyString(tablePos, 14 /*Text*/, false)
      && verifier.VerifyString(tablePos, 16 /*Timestamp*/, false)
      && verifier.VerifyString(tablePos, 18 /*LastUpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 20 /*LastUpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 22 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 26 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 28 /*Source*/, false)
      && verifier.VerifyString(tablePos, 30 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 32 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 34 /*DataMode*/, 1 /*AircraftStatusRemark_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
