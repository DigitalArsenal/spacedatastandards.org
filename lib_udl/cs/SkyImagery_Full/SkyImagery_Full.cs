// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
public struct SkyImagery_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SkyImagery_Full GetRootAsSkyImagery_Full(ByteBuffer _bb) { return GetRootAsSkyImagery_Full(_bb, new SkyImagery_Full()); }
  public static SkyImagery_Full GetRootAsSkyImagery_Full(ByteBuffer _bb, SkyImagery_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SkyImagery_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SKYI"); }
  public static bool VerifySkyImagery_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SKYI", false, SkyImagery_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkyImagery_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SKYIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Optional identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: 44920
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: X15-23452
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
  /// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAttitudeSet { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAttitudeSetBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdAttitudeSetBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdAttitudeSetArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 420
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(16); }
  /// Catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: origSensorId
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -33.283048
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 149.372549
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 14.483619321
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 14.52
  /// Constraints: No constraints specified.
  public double Senx { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 32.41
  /// Constraints: No constraints specified.
  public double Seny { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 376.12
  /// Constraints: No constraints specified.
  public double Senz { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  public string SenQuat(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SenQuatLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  public string SenQuatDot(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SenQuatDotLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
  /// Example: /// Example: imageType
  /// Constraints: Minimum length = 1, Maximum length = 24
  public string ImageType { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageTypeBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetImageTypeBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetImageTypeArray() { return __p.__vector_as_array<byte>(38); }
  /// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ExpStartTime { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExpStartTimeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetExpStartTimeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetExpStartTimeArray() { return __p.__vector_as_array<byte>(40); }
  /// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ExpEndTime { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExpEndTimeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetExpEndTimeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetExpEndTimeArray() { return __p.__vector_as_array<byte>(42); }
  /// String that uniquely identifies the data source.
  /// Example: /// Example: imageSourceInfo
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string ImageSourceInfo { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageSourceInfoBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetImageSourceInfoBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetImageSourceInfoArray() { return __p.__vector_as_array<byte>(44); }
  /// The telescope pointing azimuth, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  public double TopLeftStartAz { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The telescope pointing elevation, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  public double TopLeftStartEl { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 3.7
  /// Constraints: No constraints specified.
  public double TopLeftStopAz { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The telescope pointing elevation, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 34.233
  /// Constraints: No constraints specified.
  public double TopLeftStopEl { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The user-defined set ID of a sequence of images.
  /// Example: /// Example: imageSetId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ImageSetId { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageSetIdBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetImageSetIdBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetImageSetIdArray() { return __p.__vector_as_array<byte>(54); }
  /// The number of images in an image set.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  public int ImageSetLength { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The sequence ID of an image within an image set.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SequenceId { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Field Of View frame width, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  public double FrameFOVWidth { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Field Of View frame height, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  public double FrameFOVHeight { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Field Of View pixel width, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  public double PixelFOVWidth { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Field Of View pixel height, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  public double PixelFOVHeight { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Frame width of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int FrameWidthPixels { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Frame height of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int FrameHeightPixels { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Bit depth of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int PixelBitDepth { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Reference to an annotation document associated with this image.
  /// Example: /// Example: annotationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string AnnotationKey { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAnnotationKeyBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetAnnotationKeyBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetAnnotationKeyArray() { return __p.__vector_as_array<byte>(74); }
  /// Reference to a calibration document associated with this image.
  /// Example: /// Example: calibrationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string CalibrationKey { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCalibrationKeyBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCalibrationKeyBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCalibrationKeyArray() { return __p.__vector_as_array<byte>(76); }
  /// Name of the uploaded image file.
  /// Example: /// Example: filename.jpg
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Filename { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilenameBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetFilenameBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetFilenameArray() { return __p.__vector_as_array<byte>(78); }
  /// Size of the image file, in bytes.
  /// Example: /// Example: 371945
  /// Constraints: No constraints specified.
  public long Filesize { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: checksumValue
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ChecksumValue { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChecksumValueBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetChecksumValueBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetChecksumValueArray() { return __p.__vector_as_array<byte>(82); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(84); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(86); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(86); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(88); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(90); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(92); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(94); }
  /// Optional name/description associated with this image.
  /// Example: /// Example: description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string Description { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(96); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SkyImagery_Full_dataMode_Enum DataMode { get { int o = __p.__offset(98); return o != 0 ? (SkyImagery_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SkyImagery_Full_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(100); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(102); }
  /// Collection of linked EOObservations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string EoObservations(int j) { int o = __p.__offset(104); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EoObservationsLength { get { int o = __p.__offset(104); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SkyImagery_Full> CreateSkyImagery_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idAttitudeSetOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origSensorIdOffset = default(StringOffset),
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      double senx = 0.0,
      double seny = 0.0,
      double senz = 0.0,
      VectorOffset senQuatOffset = default(VectorOffset),
      VectorOffset senQuatDotOffset = default(VectorOffset),
      StringOffset imageTypeOffset = default(StringOffset),
      StringOffset expStartTimeOffset = default(StringOffset),
      StringOffset expEndTimeOffset = default(StringOffset),
      StringOffset imageSourceInfoOffset = default(StringOffset),
      double topLeftStartAz = 0.0,
      double topLeftStartEl = 0.0,
      double topLeftStopAz = 0.0,
      double topLeftStopEl = 0.0,
      StringOffset imageSetIdOffset = default(StringOffset),
      int imageSetLength = 0,
      int sequenceId = 0,
      double frameFOVWidth = 0.0,
      double frameFOVHeight = 0.0,
      double pixelFOVWidth = 0.0,
      double pixelFOVHeight = 0.0,
      int frameWidthPixels = 0,
      int frameHeightPixels = 0,
      int pixelBitDepth = 0,
      StringOffset annotationKeyOffset = default(StringOffset),
      StringOffset calibrationKeyOffset = default(StringOffset),
      StringOffset filenameOffset = default(StringOffset),
      long filesize = 0,
      StringOffset checksumValueOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      SkyImagery_Full_dataMode_Enum dataMode = SkyImagery_Full_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      VectorOffset eoObservationsOffset = default(VectorOffset)) {
    builder.StartTable(51);
    SkyImagery_Full.AddFilesize(builder, filesize);
    SkyImagery_Full.AddPixelFOVHeight(builder, pixelFOVHeight);
    SkyImagery_Full.AddPixelFOVWidth(builder, pixelFOVWidth);
    SkyImagery_Full.AddFrameFOVHeight(builder, frameFOVHeight);
    SkyImagery_Full.AddFrameFOVWidth(builder, frameFOVWidth);
    SkyImagery_Full.AddTopLeftStopEl(builder, topLeftStopEl);
    SkyImagery_Full.AddTopLeftStopAz(builder, topLeftStopAz);
    SkyImagery_Full.AddTopLeftStartEl(builder, topLeftStartEl);
    SkyImagery_Full.AddTopLeftStartAz(builder, topLeftStartAz);
    SkyImagery_Full.AddSenz(builder, senz);
    SkyImagery_Full.AddSeny(builder, seny);
    SkyImagery_Full.AddSenx(builder, senx);
    SkyImagery_Full.AddSenalt(builder, senalt);
    SkyImagery_Full.AddSenlon(builder, senlon);
    SkyImagery_Full.AddSenlat(builder, senlat);
    SkyImagery_Full.AddEoObservations(builder, eoObservationsOffset);
    SkyImagery_Full.AddCreatedBy(builder, createdByOffset);
    SkyImagery_Full.AddCreatedAt(builder, createdAtOffset);
    SkyImagery_Full.AddDescription(builder, descriptionOffset);
    SkyImagery_Full.AddSourceDL(builder, sourceDLOffset);
    SkyImagery_Full.AddOrigNetwork(builder, origNetworkOffset);
    SkyImagery_Full.AddOrigin(builder, originOffset);
    SkyImagery_Full.AddSource(builder, sourceOffset);
    SkyImagery_Full.AddTags(builder, tagsOffset);
    SkyImagery_Full.AddTransactionId(builder, transactionIdOffset);
    SkyImagery_Full.AddChecksumValue(builder, checksumValueOffset);
    SkyImagery_Full.AddFilename(builder, filenameOffset);
    SkyImagery_Full.AddCalibrationKey(builder, calibrationKeyOffset);
    SkyImagery_Full.AddAnnotationKey(builder, annotationKeyOffset);
    SkyImagery_Full.AddPixelBitDepth(builder, pixelBitDepth);
    SkyImagery_Full.AddFrameHeightPixels(builder, frameHeightPixels);
    SkyImagery_Full.AddFrameWidthPixels(builder, frameWidthPixels);
    SkyImagery_Full.AddSequenceId(builder, sequenceId);
    SkyImagery_Full.AddImageSetLength(builder, imageSetLength);
    SkyImagery_Full.AddImageSetId(builder, imageSetIdOffset);
    SkyImagery_Full.AddImageSourceInfo(builder, imageSourceInfoOffset);
    SkyImagery_Full.AddExpEndTime(builder, expEndTimeOffset);
    SkyImagery_Full.AddExpStartTime(builder, expStartTimeOffset);
    SkyImagery_Full.AddImageType(builder, imageTypeOffset);
    SkyImagery_Full.AddSenQuatDot(builder, senQuatDotOffset);
    SkyImagery_Full.AddSenQuat(builder, senQuatOffset);
    SkyImagery_Full.AddOrigSensorId(builder, origSensorIdOffset);
    SkyImagery_Full.AddSatNo(builder, satNo);
    SkyImagery_Full.AddIdSensor(builder, idSensorOffset);
    SkyImagery_Full.AddIdAttitudeSet(builder, idAttitudeSetOffset);
    SkyImagery_Full.AddOrigObjectId(builder, origObjectIdOffset);
    SkyImagery_Full.AddOnOrbit(builder, onOrbitOffset);
    SkyImagery_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    SkyImagery_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    SkyImagery_Full.AddId(builder, idOffset);
    SkyImagery_Full.AddDataMode(builder, dataMode);
    return SkyImagery_Full.EndSkyImagery_Full(builder);
  }

  public static void StartSkyImagery_Full(FlatBufferBuilder builder) { builder.StartTable(51); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(3, onOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddIdAttitudeSet(FlatBufferBuilder builder, StringOffset idAttitudeSetOffset) { builder.AddOffset(5, idAttitudeSetOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(6, idSensorOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(7, satNo, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(8, origSensorIdOffset.Value, 0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(9, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(10, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(11, senalt, 0.0); }
  public static void AddSenx(FlatBufferBuilder builder, double senx) { builder.AddDouble(12, senx, 0.0); }
  public static void AddSeny(FlatBufferBuilder builder, double seny) { builder.AddDouble(13, seny, 0.0); }
  public static void AddSenz(FlatBufferBuilder builder, double senz) { builder.AddDouble(14, senz, 0.0); }
  public static void AddSenQuat(FlatBufferBuilder builder, VectorOffset senQuatOffset) { builder.AddOffset(15, senQuatOffset.Value, 0); }
  public static VectorOffset CreateSenQuatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSenQuatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSenQuatDot(FlatBufferBuilder builder, VectorOffset senQuatDotOffset) { builder.AddOffset(16, senQuatDotOffset.Value, 0); }
  public static VectorOffset CreateSenQuatDotVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatDotVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatDotVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatDotVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSenQuatDotVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddImageType(FlatBufferBuilder builder, StringOffset imageTypeOffset) { builder.AddOffset(17, imageTypeOffset.Value, 0); }
  public static void AddExpStartTime(FlatBufferBuilder builder, StringOffset expStartTimeOffset) { builder.AddOffset(18, expStartTimeOffset.Value, 0); }
  public static void AddExpEndTime(FlatBufferBuilder builder, StringOffset expEndTimeOffset) { builder.AddOffset(19, expEndTimeOffset.Value, 0); }
  public static void AddImageSourceInfo(FlatBufferBuilder builder, StringOffset imageSourceInfoOffset) { builder.AddOffset(20, imageSourceInfoOffset.Value, 0); }
  public static void AddTopLeftStartAz(FlatBufferBuilder builder, double topLeftStartAz) { builder.AddDouble(21, topLeftStartAz, 0.0); }
  public static void AddTopLeftStartEl(FlatBufferBuilder builder, double topLeftStartEl) { builder.AddDouble(22, topLeftStartEl, 0.0); }
  public static void AddTopLeftStopAz(FlatBufferBuilder builder, double topLeftStopAz) { builder.AddDouble(23, topLeftStopAz, 0.0); }
  public static void AddTopLeftStopEl(FlatBufferBuilder builder, double topLeftStopEl) { builder.AddDouble(24, topLeftStopEl, 0.0); }
  public static void AddImageSetId(FlatBufferBuilder builder, StringOffset imageSetIdOffset) { builder.AddOffset(25, imageSetIdOffset.Value, 0); }
  public static void AddImageSetLength(FlatBufferBuilder builder, int imageSetLength) { builder.AddInt(26, imageSetLength, 0); }
  public static void AddSequenceId(FlatBufferBuilder builder, int sequenceId) { builder.AddInt(27, sequenceId, 0); }
  public static void AddFrameFOVWidth(FlatBufferBuilder builder, double frameFOVWidth) { builder.AddDouble(28, frameFOVWidth, 0.0); }
  public static void AddFrameFOVHeight(FlatBufferBuilder builder, double frameFOVHeight) { builder.AddDouble(29, frameFOVHeight, 0.0); }
  public static void AddPixelFOVWidth(FlatBufferBuilder builder, double pixelFOVWidth) { builder.AddDouble(30, pixelFOVWidth, 0.0); }
  public static void AddPixelFOVHeight(FlatBufferBuilder builder, double pixelFOVHeight) { builder.AddDouble(31, pixelFOVHeight, 0.0); }
  public static void AddFrameWidthPixels(FlatBufferBuilder builder, int frameWidthPixels) { builder.AddInt(32, frameWidthPixels, 0); }
  public static void AddFrameHeightPixels(FlatBufferBuilder builder, int frameHeightPixels) { builder.AddInt(33, frameHeightPixels, 0); }
  public static void AddPixelBitDepth(FlatBufferBuilder builder, int pixelBitDepth) { builder.AddInt(34, pixelBitDepth, 0); }
  public static void AddAnnotationKey(FlatBufferBuilder builder, StringOffset annotationKeyOffset) { builder.AddOffset(35, annotationKeyOffset.Value, 0); }
  public static void AddCalibrationKey(FlatBufferBuilder builder, StringOffset calibrationKeyOffset) { builder.AddOffset(36, calibrationKeyOffset.Value, 0); }
  public static void AddFilename(FlatBufferBuilder builder, StringOffset filenameOffset) { builder.AddOffset(37, filenameOffset.Value, 0); }
  public static void AddFilesize(FlatBufferBuilder builder, long filesize) { builder.AddLong(38, filesize, 0); }
  public static void AddChecksumValue(FlatBufferBuilder builder, StringOffset checksumValueOffset) { builder.AddOffset(39, checksumValueOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(40, transactionIdOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(41, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(42, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(43, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(44, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(45, sourceDLOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(46, descriptionOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SkyImagery_Full_dataMode_Enum dataMode) { builder.AddSbyte(47, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(48, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(49, createdByOffset.Value, 0); }
  public static void AddEoObservations(FlatBufferBuilder builder, VectorOffset eoObservationsOffset) { builder.AddOffset(50, eoObservationsOffset.Value, 0); }
  public static VectorOffset CreateEoObservationsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEoObservationsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEoObservationsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEoObservationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEoObservationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SkyImagery_Full> EndSkyImagery_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SkyImagery_Full>(o);
  }
  public static void FinishSkyImagery_FullBuffer(FlatBufferBuilder builder, Offset<SkyImagery_Full> offset) { builder.Finish(offset.Value, "SKYI"); }
  public static void FinishSizePrefixedSkyImagery_FullBuffer(FlatBufferBuilder builder, Offset<SkyImagery_Full> offset) { builder.FinishSizePrefixed(offset.Value, "SKYI"); }
  public SkyImagery_FullT UnPack() {
    var _o = new SkyImagery_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkyImagery_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.OnOrbit = this.OnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdAttitudeSet = this.IdAttitudeSet;
    _o.IdSensor = this.IdSensor;
    _o.SatNo = this.SatNo;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Senx = this.Senx;
    _o.Seny = this.Seny;
    _o.Senz = this.Senz;
    _o.SenQuat = new List<string>();
    for (var _j = 0; _j < this.SenQuatLength; ++_j) {_o.SenQuat.Add(this.SenQuat(_j));}
    _o.SenQuatDot = new List<string>();
    for (var _j = 0; _j < this.SenQuatDotLength; ++_j) {_o.SenQuatDot.Add(this.SenQuatDot(_j));}
    _o.ImageType = this.ImageType;
    _o.ExpStartTime = this.ExpStartTime;
    _o.ExpEndTime = this.ExpEndTime;
    _o.ImageSourceInfo = this.ImageSourceInfo;
    _o.TopLeftStartAz = this.TopLeftStartAz;
    _o.TopLeftStartEl = this.TopLeftStartEl;
    _o.TopLeftStopAz = this.TopLeftStopAz;
    _o.TopLeftStopEl = this.TopLeftStopEl;
    _o.ImageSetId = this.ImageSetId;
    _o.ImageSetLength = this.ImageSetLength;
    _o.SequenceId = this.SequenceId;
    _o.FrameFOVWidth = this.FrameFOVWidth;
    _o.FrameFOVHeight = this.FrameFOVHeight;
    _o.PixelFOVWidth = this.PixelFOVWidth;
    _o.PixelFOVHeight = this.PixelFOVHeight;
    _o.FrameWidthPixels = this.FrameWidthPixels;
    _o.FrameHeightPixels = this.FrameHeightPixels;
    _o.PixelBitDepth = this.PixelBitDepth;
    _o.AnnotationKey = this.AnnotationKey;
    _o.CalibrationKey = this.CalibrationKey;
    _o.Filename = this.Filename;
    _o.Filesize = this.Filesize;
    _o.ChecksumValue = this.ChecksumValue;
    _o.TransactionId = this.TransactionId;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.Description = this.Description;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.EoObservations = new List<string>();
    for (var _j = 0; _j < this.EoObservationsLength; ++_j) {_o.EoObservations.Add(this.EoObservations(_j));}
  }
  public static Offset<SkyImagery_Full> Pack(FlatBufferBuilder builder, SkyImagery_FullT _o) {
    if (_o == null) return default(Offset<SkyImagery_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idAttitudeSet = _o.IdAttitudeSet == null ? default(StringOffset) : builder.CreateString(_o.IdAttitudeSet);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _senQuat = default(VectorOffset);
    if (_o.SenQuat != null) {
      var __senQuat = new StringOffset[_o.SenQuat.Count];
      for (var _j = 0; _j < __senQuat.Length; ++_j) { __senQuat[_j] = builder.CreateString(_o.SenQuat[_j]); }
      _senQuat = CreateSenQuatVector(builder, __senQuat);
    }
    var _senQuatDot = default(VectorOffset);
    if (_o.SenQuatDot != null) {
      var __senQuatDot = new StringOffset[_o.SenQuatDot.Count];
      for (var _j = 0; _j < __senQuatDot.Length; ++_j) { __senQuatDot[_j] = builder.CreateString(_o.SenQuatDot[_j]); }
      _senQuatDot = CreateSenQuatDotVector(builder, __senQuatDot);
    }
    var _imageType = _o.ImageType == null ? default(StringOffset) : builder.CreateString(_o.ImageType);
    var _expStartTime = _o.ExpStartTime == null ? default(StringOffset) : builder.CreateString(_o.ExpStartTime);
    var _expEndTime = _o.ExpEndTime == null ? default(StringOffset) : builder.CreateString(_o.ExpEndTime);
    var _imageSourceInfo = _o.ImageSourceInfo == null ? default(StringOffset) : builder.CreateString(_o.ImageSourceInfo);
    var _imageSetId = _o.ImageSetId == null ? default(StringOffset) : builder.CreateString(_o.ImageSetId);
    var _annotationKey = _o.AnnotationKey == null ? default(StringOffset) : builder.CreateString(_o.AnnotationKey);
    var _calibrationKey = _o.CalibrationKey == null ? default(StringOffset) : builder.CreateString(_o.CalibrationKey);
    var _filename = _o.Filename == null ? default(StringOffset) : builder.CreateString(_o.Filename);
    var _checksumValue = _o.ChecksumValue == null ? default(StringOffset) : builder.CreateString(_o.ChecksumValue);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _eoObservations = default(VectorOffset);
    if (_o.EoObservations != null) {
      var __eoObservations = new StringOffset[_o.EoObservations.Count];
      for (var _j = 0; _j < __eoObservations.Length; ++_j) { __eoObservations[_j] = builder.CreateString(_o.EoObservations[_j]); }
      _eoObservations = CreateEoObservationsVector(builder, __eoObservations);
    }
    return CreateSkyImagery_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _onOrbit,
      _origObjectId,
      _idAttitudeSet,
      _idSensor,
      _o.SatNo,
      _origSensorId,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.Senx,
      _o.Seny,
      _o.Senz,
      _senQuat,
      _senQuatDot,
      _imageType,
      _expStartTime,
      _expEndTime,
      _imageSourceInfo,
      _o.TopLeftStartAz,
      _o.TopLeftStartEl,
      _o.TopLeftStopAz,
      _o.TopLeftStopEl,
      _imageSetId,
      _o.ImageSetLength,
      _o.SequenceId,
      _o.FrameFOVWidth,
      _o.FrameFOVHeight,
      _o.PixelFOVWidth,
      _o.PixelFOVHeight,
      _o.FrameWidthPixels,
      _o.FrameHeightPixels,
      _o.PixelBitDepth,
      _annotationKey,
      _calibrationKey,
      _filename,
      _o.Filesize,
      _checksumValue,
      _transactionId,
      _tags,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _description,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _eoObservations);
  }
}

public class SkyImagery_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public string OnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public string IdAttitudeSet { get; set; }
  public string IdSensor { get; set; }
  public int SatNo { get; set; }
  public string OrigSensorId { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public double Senx { get; set; }
  public double Seny { get; set; }
  public double Senz { get; set; }
  public List<string> SenQuat { get; set; }
  public List<string> SenQuatDot { get; set; }
  public string ImageType { get; set; }
  public string ExpStartTime { get; set; }
  public string ExpEndTime { get; set; }
  public string ImageSourceInfo { get; set; }
  public double TopLeftStartAz { get; set; }
  public double TopLeftStartEl { get; set; }
  public double TopLeftStopAz { get; set; }
  public double TopLeftStopEl { get; set; }
  public string ImageSetId { get; set; }
  public int ImageSetLength { get; set; }
  public int SequenceId { get; set; }
  public double FrameFOVWidth { get; set; }
  public double FrameFOVHeight { get; set; }
  public double PixelFOVWidth { get; set; }
  public double PixelFOVHeight { get; set; }
  public int FrameWidthPixels { get; set; }
  public int FrameHeightPixels { get; set; }
  public int PixelBitDepth { get; set; }
  public string AnnotationKey { get; set; }
  public string CalibrationKey { get; set; }
  public string Filename { get; set; }
  public long Filesize { get; set; }
  public string ChecksumValue { get; set; }
  public string TransactionId { get; set; }
  public List<string> Tags { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public string Description { get; set; }
  public SkyImagery_Full_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public List<string> EoObservations { get; set; }

  public SkyImagery_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.OnOrbit = null;
    this.OrigObjectId = null;
    this.IdAttitudeSet = null;
    this.IdSensor = null;
    this.SatNo = 0;
    this.OrigSensorId = null;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Senx = 0.0;
    this.Seny = 0.0;
    this.Senz = 0.0;
    this.SenQuat = null;
    this.SenQuatDot = null;
    this.ImageType = null;
    this.ExpStartTime = null;
    this.ExpEndTime = null;
    this.ImageSourceInfo = null;
    this.TopLeftStartAz = 0.0;
    this.TopLeftStartEl = 0.0;
    this.TopLeftStopAz = 0.0;
    this.TopLeftStopEl = 0.0;
    this.ImageSetId = null;
    this.ImageSetLength = 0;
    this.SequenceId = 0;
    this.FrameFOVWidth = 0.0;
    this.FrameFOVHeight = 0.0;
    this.PixelFOVWidth = 0.0;
    this.PixelFOVHeight = 0.0;
    this.FrameWidthPixels = 0;
    this.FrameHeightPixels = 0;
    this.PixelBitDepth = 0;
    this.AnnotationKey = null;
    this.CalibrationKey = null;
    this.Filename = null;
    this.Filesize = 0;
    this.ChecksumValue = null;
    this.TransactionId = null;
    this.Tags = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.Description = null;
    this.DataMode = SkyImagery_Full_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.EoObservations = null;
  }
  public static SkyImagery_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return SkyImagery_Full.GetRootAsSkyImagery_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SkyImagery_Full.FinishSkyImagery_FullBuffer(fbb, SkyImagery_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SkyImagery_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 10 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdAttitudeSet*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdSensor*/, false)
      && verifier.VerifyField(tablePos, 18 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 20 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 22 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Senx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Seny*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Senz*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*SenQuat*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*SenQuatDot*/, false)
      && verifier.VerifyString(tablePos, 38 /*ImageType*/, false)
      && verifier.VerifyString(tablePos, 40 /*ExpStartTime*/, false)
      && verifier.VerifyString(tablePos, 42 /*ExpEndTime*/, false)
      && verifier.VerifyString(tablePos, 44 /*ImageSourceInfo*/, false)
      && verifier.VerifyField(tablePos, 46 /*TopLeftStartAz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*TopLeftStartEl*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*TopLeftStopAz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*TopLeftStopEl*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*ImageSetId*/, false)
      && verifier.VerifyField(tablePos, 56 /*ImageSetLength*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*SequenceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*FrameFOVWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*FrameFOVHeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*PixelFOVWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*PixelFOVHeight*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*FrameWidthPixels*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*FrameHeightPixels*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*PixelBitDepth*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 74 /*AnnotationKey*/, false)
      && verifier.VerifyString(tablePos, 76 /*CalibrationKey*/, false)
      && verifier.VerifyString(tablePos, 78 /*Filename*/, false)
      && verifier.VerifyField(tablePos, 80 /*Filesize*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 82 /*ChecksumValue*/, false)
      && verifier.VerifyString(tablePos, 84 /*TransactionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 86 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 88 /*Source*/, false)
      && verifier.VerifyString(tablePos, 90 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 92 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 94 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 96 /*Description*/, false)
      && verifier.VerifyField(tablePos, 98 /*DataMode*/, 1 /*SkyImagery_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 100 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 102 /*CreatedBy*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 104 /*EoObservations*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
