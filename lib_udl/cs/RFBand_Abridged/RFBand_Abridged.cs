// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
public struct RFBand_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFBand_Abridged GetRootAsRFBand_Abridged(ByteBuffer _bb) { return GetRootAsRFBand_Abridged(_bb, new RFBand_Abridged()); }
  public static RFBand_Abridged GetRootAsRFBand_Abridged(ByteBuffer _bb, RFBand_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFBand_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RFBA"); }
  public static bool VerifyRFBand_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RFBA", false, RFBand_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFBand_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFBAND-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier of the parent Entity which uses this band.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// RF Band name.
  /// Example: /// Example: BAND_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: Ku
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string Band { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBandBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBandBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBandArray() { return __p.__vector_as_array<byte>(12); }
  /// RF Band mode (e.g. TX, RX).
  /// Example: /// Example: TX
  /// Constraints: Minimum length = 0, Maximum length = 4
  public RFBand_Abridged_mode_Enum Mode { get { int o = __p.__offset(14); return o != 0 ? (RFBand_Abridged_mode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFBand_Abridged_mode_Enum.TX; } }
  /// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
  /// Example: /// Example: TTC
  /// Constraints: Minimum length = 0, Maximum length = 16
  public RFBand_Abridged_purpose_Enum Purpose { get { int o = __p.__offset(16); return o != 0 ? (RFBand_Abridged_purpose_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFBand_Abridged_purpose_Enum.COMM; } }
  /// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double FreqMin { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// End/maximum of transmit RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 2000.23
  /// Constraints: No constraints specified.
  public double FreqMax { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Center frequency of RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 1000.23
  /// Constraints: No constraints specified.
  public double CenterFreq { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// RF Range maximum gain, in dBi.
  /// Example: /// Example: 120.23
  /// Constraints: No constraints specified.
  public double PeakGain { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// RF Range edge gain, in dBi.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double EdgeGain { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// RF Band frequency range bandwidth in Mhz.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Bandwidth { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Beamwidth { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 4
  public RFBand_Abridged_polarization_Enum Polarization { get { int o = __p.__offset(32); return o != 0 ? (RFBand_Abridged_polarization_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFBand_Abridged_polarization_Enum.H; } }
  /// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  /// Example: /// Example: 2.23
  /// Constraints: No constraints specified.
  public double Erp { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  /// Example: /// Example: 2.23
  /// Constraints: No constraints specified.
  public double Eirp { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(38); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(40); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RFBand_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(42); return o != 0 ? (RFBand_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFBand_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(44); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(46); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(48); }

  public static Offset<RFBand_Abridged> CreateRFBand_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset bandOffset = default(StringOffset),
      RFBand_Abridged_mode_Enum mode = RFBand_Abridged_mode_Enum.TX,
      RFBand_Abridged_purpose_Enum purpose = RFBand_Abridged_purpose_Enum.COMM,
      double freqMin = 0.0,
      double freqMax = 0.0,
      double centerFreq = 0.0,
      double peakGain = 0.0,
      double edgeGain = 0.0,
      double bandwidth = 0.0,
      double beamwidth = 0.0,
      RFBand_Abridged_polarization_Enum polarization = RFBand_Abridged_polarization_Enum.H,
      double erp = 0.0,
      double eirp = 0.0,
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      RFBand_Abridged_dataMode_Enum dataMode = RFBand_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(23);
    RFBand_Abridged.AddEirp(builder, eirp);
    RFBand_Abridged.AddErp(builder, erp);
    RFBand_Abridged.AddBeamwidth(builder, beamwidth);
    RFBand_Abridged.AddBandwidth(builder, bandwidth);
    RFBand_Abridged.AddEdgeGain(builder, edgeGain);
    RFBand_Abridged.AddPeakGain(builder, peakGain);
    RFBand_Abridged.AddCenterFreq(builder, centerFreq);
    RFBand_Abridged.AddFreqMax(builder, freqMax);
    RFBand_Abridged.AddFreqMin(builder, freqMin);
    RFBand_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    RFBand_Abridged.AddCreatedBy(builder, createdByOffset);
    RFBand_Abridged.AddCreatedAt(builder, createdAtOffset);
    RFBand_Abridged.AddOrigin(builder, originOffset);
    RFBand_Abridged.AddSource(builder, sourceOffset);
    RFBand_Abridged.AddBand(builder, bandOffset);
    RFBand_Abridged.AddName(builder, nameOffset);
    RFBand_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    RFBand_Abridged.AddIdEntity(builder, idEntityOffset);
    RFBand_Abridged.AddId(builder, idOffset);
    RFBand_Abridged.AddDataMode(builder, dataMode);
    RFBand_Abridged.AddPolarization(builder, polarization);
    RFBand_Abridged.AddPurpose(builder, purpose);
    RFBand_Abridged.AddMode(builder, mode);
    return RFBand_Abridged.EndRFBand_Abridged(builder);
  }

  public static void StartRFBand_Abridged(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(1, idEntityOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddBand(FlatBufferBuilder builder, StringOffset bandOffset) { builder.AddOffset(4, bandOffset.Value, 0); }
  public static void AddMode(FlatBufferBuilder builder, RFBand_Abridged_mode_Enum mode) { builder.AddSbyte(5, (sbyte)mode, 0); }
  public static void AddPurpose(FlatBufferBuilder builder, RFBand_Abridged_purpose_Enum purpose) { builder.AddSbyte(6, (sbyte)purpose, 0); }
  public static void AddFreqMin(FlatBufferBuilder builder, double freqMin) { builder.AddDouble(7, freqMin, 0.0); }
  public static void AddFreqMax(FlatBufferBuilder builder, double freqMax) { builder.AddDouble(8, freqMax, 0.0); }
  public static void AddCenterFreq(FlatBufferBuilder builder, double centerFreq) { builder.AddDouble(9, centerFreq, 0.0); }
  public static void AddPeakGain(FlatBufferBuilder builder, double peakGain) { builder.AddDouble(10, peakGain, 0.0); }
  public static void AddEdgeGain(FlatBufferBuilder builder, double edgeGain) { builder.AddDouble(11, edgeGain, 0.0); }
  public static void AddBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.AddDouble(12, bandwidth, 0.0); }
  public static void AddBeamwidth(FlatBufferBuilder builder, double beamwidth) { builder.AddDouble(13, beamwidth, 0.0); }
  public static void AddPolarization(FlatBufferBuilder builder, RFBand_Abridged_polarization_Enum polarization) { builder.AddSbyte(14, (sbyte)polarization, 0); }
  public static void AddErp(FlatBufferBuilder builder, double erp) { builder.AddDouble(15, erp, 0.0); }
  public static void AddEirp(FlatBufferBuilder builder, double eirp) { builder.AddDouble(16, eirp, 0.0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(17, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(18, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RFBand_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(19, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(20, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(21, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(22, origNetworkOffset.Value, 0); }
  public static Offset<RFBand_Abridged> EndRFBand_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFBand_Abridged>(o);
  }
  public static void FinishRFBand_AbridgedBuffer(FlatBufferBuilder builder, Offset<RFBand_Abridged> offset) { builder.Finish(offset.Value, "RFBA"); }
  public static void FinishSizePrefixedRFBand_AbridgedBuffer(FlatBufferBuilder builder, Offset<RFBand_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "RFBA"); }
  public RFBand_AbridgedT UnPack() {
    var _o = new RFBand_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFBand_AbridgedT _o) {
    _o.Id = this.Id;
    _o.IdEntity = this.IdEntity;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Name = this.Name;
    _o.Band = this.Band;
    _o.Mode = this.Mode;
    _o.Purpose = this.Purpose;
    _o.FreqMin = this.FreqMin;
    _o.FreqMax = this.FreqMax;
    _o.CenterFreq = this.CenterFreq;
    _o.PeakGain = this.PeakGain;
    _o.EdgeGain = this.EdgeGain;
    _o.Bandwidth = this.Bandwidth;
    _o.Beamwidth = this.Beamwidth;
    _o.Polarization = this.Polarization;
    _o.Erp = this.Erp;
    _o.Eirp = this.Eirp;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<RFBand_Abridged> Pack(FlatBufferBuilder builder, RFBand_AbridgedT _o) {
    if (_o == null) return default(Offset<RFBand_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _band = _o.Band == null ? default(StringOffset) : builder.CreateString(_o.Band);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateRFBand_Abridged(
      builder,
      _id,
      _idEntity,
      _classificationMarking,
      _name,
      _band,
      _o.Mode,
      _o.Purpose,
      _o.FreqMin,
      _o.FreqMax,
      _o.CenterFreq,
      _o.PeakGain,
      _o.EdgeGain,
      _o.Bandwidth,
      _o.Beamwidth,
      _o.Polarization,
      _o.Erp,
      _o.Eirp,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class RFBand_AbridgedT
{
  public string Id { get; set; }
  public string IdEntity { get; set; }
  public string ClassificationMarking { get; set; }
  public string Name { get; set; }
  public string Band { get; set; }
  public RFBand_Abridged_mode_Enum Mode { get; set; }
  public RFBand_Abridged_purpose_Enum Purpose { get; set; }
  public double FreqMin { get; set; }
  public double FreqMax { get; set; }
  public double CenterFreq { get; set; }
  public double PeakGain { get; set; }
  public double EdgeGain { get; set; }
  public double Bandwidth { get; set; }
  public double Beamwidth { get; set; }
  public RFBand_Abridged_polarization_Enum Polarization { get; set; }
  public double Erp { get; set; }
  public double Eirp { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public RFBand_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public RFBand_AbridgedT() {
    this.Id = null;
    this.IdEntity = null;
    this.ClassificationMarking = null;
    this.Name = null;
    this.Band = null;
    this.Mode = RFBand_Abridged_mode_Enum.TX;
    this.Purpose = RFBand_Abridged_purpose_Enum.COMM;
    this.FreqMin = 0.0;
    this.FreqMax = 0.0;
    this.CenterFreq = 0.0;
    this.PeakGain = 0.0;
    this.EdgeGain = 0.0;
    this.Bandwidth = 0.0;
    this.Beamwidth = 0.0;
    this.Polarization = RFBand_Abridged_polarization_Enum.H;
    this.Erp = 0.0;
    this.Eirp = 0.0;
    this.Source = null;
    this.Origin = null;
    this.DataMode = RFBand_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static RFBand_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return RFBand_Abridged.GetRootAsRFBand_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFBand_Abridged.FinishRFBand_AbridgedBuffer(fbb, RFBand_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFBand_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*Band*/, false)
      && verifier.VerifyField(tablePos, 14 /*Mode*/, 1 /*RFBand_Abridged_mode_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*Purpose*/, 1 /*RFBand_Abridged_purpose_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*FreqMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*FreqMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*CenterFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*PeakGain*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*EdgeGain*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Bandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Beamwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Polarization*/, 1 /*RFBand_Abridged_polarization_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 34 /*Erp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Eirp*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 38 /*Source*/, false)
      && verifier.VerifyString(tablePos, 40 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 42 /*DataMode*/, 1 /*RFBand_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 44 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 46 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 48 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
