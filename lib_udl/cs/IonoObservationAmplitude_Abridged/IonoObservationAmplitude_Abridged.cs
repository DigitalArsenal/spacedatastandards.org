// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Multi-dimensional array with the same dimensions as power plus one additional dimension antenna_element. This variable is enabled for post-process polarization or antenna array determination. Can be combined with phase to create a phasors and subsequently enable post-processing of polarization and/or antenna array determination.
public struct IonoObservationAmplitude_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationAmplitude_Abridged GetRootAsIonoObservationAmplitude_Abridged(ByteBuffer _bb) { return GetRootAsIonoObservationAmplitude_Abridged(_bb, new IonoObservationAmplitude_Abridged()); }
  public static IonoObservationAmplitude_Abridged GetRootAsIonoObservationAmplitude_Abridged(ByteBuffer _bb, IonoObservationAmplitude_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool IonoObservationAmplitude_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "IONO"); }
  public static bool VerifyIonoObservationAmplitude_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("IONO", false, IonoObservationAmplitude_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IonoObservationAmplitude_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Notes for the amplitude data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string Notes { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(4); }
  /// Array of integers for amplitude dimensions.
  /// Example: /// Example: [4, 5]
  /// Constraints: No constraints specified.
  public string Dimensions(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DimensionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of names for dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  public string DimensionName(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DimensionNameLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of amplitude data.
  /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
  /// Constraints: No constraints specified.
  public string Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<IonoObservationAmplitude_Abridged> CreateIonoObservationAmplitude_Abridged(FlatBufferBuilder builder,
      StringOffset notesOffset = default(StringOffset),
      VectorOffset dimensionsOffset = default(VectorOffset),
      VectorOffset dimensionNameOffset = default(VectorOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(4);
    IonoObservationAmplitude_Abridged.AddData(builder, dataOffset);
    IonoObservationAmplitude_Abridged.AddDimensionName(builder, dimensionNameOffset);
    IonoObservationAmplitude_Abridged.AddDimensions(builder, dimensionsOffset);
    IonoObservationAmplitude_Abridged.AddNotes(builder, notesOffset);
    return IonoObservationAmplitude_Abridged.EndIonoObservationAmplitude_Abridged(builder);
  }

  public static void StartIonoObservationAmplitude_Abridged(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(0, notesOffset.Value, 0); }
  public static void AddDimensions(FlatBufferBuilder builder, VectorOffset dimensionsOffset) { builder.AddOffset(1, dimensionsOffset.Value, 0); }
  public static VectorOffset CreateDimensionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDimensionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDimensionName(FlatBufferBuilder builder, VectorOffset dimensionNameOffset) { builder.AddOffset(2, dimensionNameOffset.Value, 0); }
  public static VectorOffset CreateDimensionNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDimensionNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDimensionNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<IonoObservationAmplitude_Abridged> EndIonoObservationAmplitude_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IonoObservationAmplitude_Abridged>(o);
  }
  public static void FinishIonoObservationAmplitude_AbridgedBuffer(FlatBufferBuilder builder, Offset<IonoObservationAmplitude_Abridged> offset) { builder.Finish(offset.Value, "IONO"); }
  public static void FinishSizePrefixedIonoObservationAmplitude_AbridgedBuffer(FlatBufferBuilder builder, Offset<IonoObservationAmplitude_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "IONO"); }
  public IonoObservationAmplitude_AbridgedT UnPack() {
    var _o = new IonoObservationAmplitude_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IonoObservationAmplitude_AbridgedT _o) {
    _o.Notes = this.Notes;
    _o.Dimensions = new List<string>();
    for (var _j = 0; _j < this.DimensionsLength; ++_j) {_o.Dimensions.Add(this.Dimensions(_j));}
    _o.DimensionName = new List<string>();
    for (var _j = 0; _j < this.DimensionNameLength; ++_j) {_o.DimensionName.Add(this.DimensionName(_j));}
    _o.Data = new List<string>();
    for (var _j = 0; _j < this.DataLength; ++_j) {_o.Data.Add(this.Data(_j));}
  }
  public static Offset<IonoObservationAmplitude_Abridged> Pack(FlatBufferBuilder builder, IonoObservationAmplitude_AbridgedT _o) {
    if (_o == null) return default(Offset<IonoObservationAmplitude_Abridged>);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _dimensions = default(VectorOffset);
    if (_o.Dimensions != null) {
      var __dimensions = new StringOffset[_o.Dimensions.Count];
      for (var _j = 0; _j < __dimensions.Length; ++_j) { __dimensions[_j] = builder.CreateString(_o.Dimensions[_j]); }
      _dimensions = CreateDimensionsVector(builder, __dimensions);
    }
    var _dimensionName = default(VectorOffset);
    if (_o.DimensionName != null) {
      var __dimensionName = new StringOffset[_o.DimensionName.Count];
      for (var _j = 0; _j < __dimensionName.Length; ++_j) { __dimensionName[_j] = builder.CreateString(_o.DimensionName[_j]); }
      _dimensionName = CreateDimensionNameVector(builder, __dimensionName);
    }
    var _data = default(VectorOffset);
    if (_o.Data != null) {
      var __data = new StringOffset[_o.Data.Count];
      for (var _j = 0; _j < __data.Length; ++_j) { __data[_j] = builder.CreateString(_o.Data[_j]); }
      _data = CreateDataVector(builder, __data);
    }
    return CreateIonoObservationAmplitude_Abridged(
      builder,
      _notes,
      _dimensions,
      _dimensionName,
      _data);
  }
}

public class IonoObservationAmplitude_AbridgedT
{
  public string Notes { get; set; }
  public List<string> Dimensions { get; set; }
  public List<string> DimensionName { get; set; }
  public List<string> Data { get; set; }

  public IonoObservationAmplitude_AbridgedT() {
    this.Notes = null;
    this.Dimensions = null;
    this.DimensionName = null;
    this.Data = null;
  }
  public static IonoObservationAmplitude_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return IonoObservationAmplitude_Abridged.GetRootAsIonoObservationAmplitude_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IonoObservationAmplitude_Abridged.FinishIonoObservationAmplitude_AbridgedBuffer(fbb, IonoObservationAmplitude_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IonoObservationAmplitude_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Notes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*Dimensions*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*DimensionName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*Data*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
