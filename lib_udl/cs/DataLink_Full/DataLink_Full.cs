// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
public struct DataLink_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLink_Full GetRootAsDataLink_Full(ByteBuffer _bb) { return GetRootAsDataLink_Full(_bb, new DataLink_Full()); }
  public static DataLink_Full GetRootAsDataLink_Full(ByteBuffer _bb, DataLink_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLink_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLink_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLink_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLink_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string OpExName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOpExNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOpExNameArray() { return __p.__vector_as_array<byte>(8); }
  /// The identifier of the originator of this message.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Originator { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginatorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOriginatorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOriginatorArray() { return __p.__vector_as_array<byte>(10); }
  /// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string StopTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStopTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStopTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  /// Example: /// Example: AFTER
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string StopTimeMod { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStopTimeModBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStopTimeModBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStopTimeModArray() { return __p.__vector_as_array<byte>(16); }
  /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  /// Example: /// Example: SACEUR 106
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PlanOrigNum { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlanOrigNumBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPlanOrigNumBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPlanOrigNumArray() { return __p.__vector_as_array<byte>(18); }
  /// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
  /// Example: /// Example: CONTROL
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OpExInfo { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExInfoBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOpExInfoBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOpExInfoArray() { return __p.__vector_as_array<byte>(20); }
  /// The secondary nickname of the option or the alternative of the operational plan or order.
  /// Example: /// Example: ORANGE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string OpExInfoAlt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOpExInfoAltBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOpExInfoAltBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOpExInfoAltArray() { return __p.__vector_as_array<byte>(22); }
  /// The unique message identifier assigned by the originator.
  /// Example: /// Example: 1201003
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string SerialNum { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSerialNumBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSerialNumArray() { return __p.__vector_as_array<byte>(24); }
  /// The month in which this message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string Month { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonthBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMonthBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMonthArray() { return __p.__vector_as_array<byte>(26); }
  /// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Qualifier { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQualifierBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetQualifierBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetQualifierArray() { return __p.__vector_as_array<byte>(28); }
  /// The serial number associated with the message qualifier.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int QualSN { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string References(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ReferencesLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The identifier for this data link message cancellation.
  /// Example: /// Example: ABSTAT
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string CanxId { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCanxIdBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCanxIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCanxIdArray() { return __p.__vector_as_array<byte>(34); }
  /// The originator of this data link message cancellation.
  /// Example: /// Example: 505 AOC
  /// Constraints: Minimum length = 0, Maximum length = 30
  public string CanxOriginator { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCanxOriginatorBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCanxOriginatorBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCanxOriginatorArray() { return __p.__vector_as_array<byte>(36); }
  /// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  public string CanxTs { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCanxTsBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCanxTsBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCanxTsArray() { return __p.__vector_as_array<byte>(38); }
  /// Serial number assigned to this data link message cancellation.
  /// Example: /// Example: ABC1234567
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string CanxSerialNum { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCanxSerialNumBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCanxSerialNumBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCanxSerialNumArray() { return __p.__vector_as_array<byte>(40); }
  /// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
  /// Example: /// Example: PASEP
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string CanxSpecialNotation { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCanxSpecialNotationBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCanxSpecialNotationBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCanxSpecialNotationArray() { return __p.__vector_as_array<byte>(42); }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
  /// Example: /// Example: ['RDU', 'X234BS']
  /// Constraints: No constraints specified.
  public string CanxSICs(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CanxSICsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The name of the point of contact for this data link message.
  /// Example: /// Example: F. BURNS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string PocName { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocNameBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetPocNameBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetPocNameArray() { return __p.__vector_as_array<byte>(46); }
  /// The rank or position of the point of contact for this data link message in a military or civilian organization.
  /// Example: /// Example: MAJ
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string PocRank { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocRankBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPocRankBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPocRankArray() { return __p.__vector_as_array<byte>(48); }
  /// The unit identifier or call sign of the point of contact for this data link message.
  /// Example: /// Example: 4077 MASH
  /// Constraints: Minimum length = 0, Maximum length = 38
  public string PocCallSign { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocCallSignBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetPocCallSignBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetPocCallSignArray() { return __p.__vector_as_array<byte>(50); }
  /// The location name of the point of contact for this data link message.
  /// Example: /// Example: CAMP SWAMPY
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string PocLocName { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocLocNameBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetPocLocNameBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetPocLocNameArray() { return __p.__vector_as_array<byte>(52); }
  /// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double PocLat { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double PocLon { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  public string PocNums(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PocNumsLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The code for the point of reference from which the coordinates and networks are computed.
  /// Example: /// Example: EUR-T
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string GeoDatum { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeoDatumBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetGeoDatumBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetGeoDatumArray() { return __p.__vector_as_array<byte>(60); }
  /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string RefPoints(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RefPointsLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string VoiceCoord(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int VoiceCoordLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
  /// Example: /// Example: MAN
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string SysDefaultCode { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSysDefaultCodeBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSysDefaultCodeBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSysDefaultCodeArray() { return __p.__vector_as_array<byte>(66); }
  /// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  public double WinSizeMult { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
  /// Example: /// Example: 1.25
  /// Constraints: No constraints specified.
  public double WinSizeMin { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
  /// Example: /// Example: 6
  /// Constraints: No constraints specified.
  public int MinTrackQual { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int MaxTrackQual { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int ResTrackQual { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
  /// Example: /// Example: 60
  /// Constraints: No constraints specified.
  public int CourseDiff { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int SpeedDiff { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int AltDiff { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int MinGeoPosQual { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int MaxGeoPosQual { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
  /// Example: /// Example: 1.7
  /// Constraints: No constraints specified.
  public double DecorrWinMult { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int ConsecDecorr { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string MultiDuty(int j) { int o = __p.__offset(92); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MultiDutyLength { get { int o = __p.__offset(92); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Ops(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int OpsLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Designator of the unit for Joint Range Extension (JRE).
  /// Example: /// Example: CVN-72
  /// Constraints: Minimum length = 0, Maximum length = 30
  public string JreUnitDes { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJreUnitDesBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetJreUnitDesBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetJreUnitDesArray() { return __p.__vector_as_array<byte>(96); }
  /// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
  /// Example: /// Example: CHARLIE ONE
  /// Constraints: Minimum length = 0, Maximum length = 38
  public string JreCallSign { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJreCallSignBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetJreCallSignBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetJreCallSignArray() { return __p.__vector_as_array<byte>(98); }
  /// Link-16 octal track number assigned as the primary JTIDS unit address.
  /// Example: /// Example: 71777
  /// Constraints: No constraints specified.
  public int JrePriAdd { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Link-16 octal track number assigned as the secondary JTIDS unit address.
  /// Example: /// Example: 77771
  /// Constraints: No constraints specified.
  public int JreSecAdd { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Joint Range Extension (JRE) unit details.
  /// Example: /// Example: JRE details
  /// Constraints: Minimum length = 0, Maximum length = 3000
  public string JreDetails { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJreDetailsBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetJreDetailsBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetJreDetailsArray() { return __p.__vector_as_array<byte>(104); }
  /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SpecTracks(int j) { int o = __p.__offset(106); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpecTracksLength { get { int o = __p.__offset(106); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of non-link specific data unit designators.
  /// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
  /// Constraints: No constraints specified.
  public string NonLinkUnitDes(int j) { int o = __p.__offset(108); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NonLinkUnitDesLength { get { int o = __p.__offset(108); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Link-16 octal track numbers used as the lower limit of a track block.
  /// Example: /// Example: [1234, 2345]
  /// Constraints: No constraints specified.
  public string TrackNumBlockLLs(int j) { int o = __p.__offset(110); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TrackNumBlockLLsLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
  /// Example: /// Example: ['0200-0300', '0400-4412']
  /// Constraints: No constraints specified.
  public string TrackNumBlocks(int j) { int o = __p.__offset(112); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TrackNumBlocksLength { get { int o = __p.__offset(112); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Data link management code word.
  /// Example: /// Example: VICTOR
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string MgmtCode { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMgmtCodeBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetMgmtCodeBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetMgmtCodeArray() { return __p.__vector_as_array<byte>(114); }
  /// Data link management code word meaning.
  /// Example: /// Example: ORBIT AT POINT BRAVO
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string MgmtCodeMeaning { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMgmtCodeMeaningBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetMgmtCodeMeaningBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetMgmtCodeMeaningArray() { return __p.__vector_as_array<byte>(116); }
  /// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool AckReq { get { int o = __p.__offset(118); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
  /// Example: /// Example: ['AOC EXT 2345', '317 AW']
  /// Constraints: No constraints specified.
  public string AckInstUnits(int j) { int o = __p.__offset(120); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AckInstUnitsLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Markings that define the source material or the original classification authority for this data link message.
  /// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
  /// Constraints: Minimum length = 0, Maximum length = 55
  public string ClassSource { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassSourceBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetClassSourceBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetClassSourceArray() { return __p.__vector_as_array<byte>(122); }
  /// Array of codes that indicate the reasons material is classified.
  /// Example: /// Example: ['15C', '15D']
  /// Constraints: No constraints specified.
  public string ClassReasons(int j) { int o = __p.__offset(124); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ClassReasonsLength { get { int o = __p.__offset(124); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
  /// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
  /// Constraints: No constraints specified.
  public string DecInstDates(int j) { int o = __p.__offset(126); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DecInstDatesLength { get { int o = __p.__offset(126); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of codes that provide justification for exemption from automatic downgrading or declassification.
  /// Example: /// Example: ['X1', 'X2']
  /// Constraints: No constraints specified.
  public string DecExemptCodes(int j) { int o = __p.__offset(128); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DecExemptCodesLength { get { int o = __p.__offset(128); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Collection of remarks associated with this data link message.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Remarks(int j) { int o = __p.__offset(130); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RemarksLength { get { int o = __p.__offset(130); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(132); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(134); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(134, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(134); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(134); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(136); }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(138); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(140); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(142); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(142, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(142); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(142); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(144); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(146); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(148); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(148, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(148); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(148); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public DataLink_Full_dataMode_Enum DataMode { get { int o = __p.__offset(150); return o != 0 ? (DataLink_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : DataLink_Full_dataMode_Enum.REAL; } }

  public static Offset<DataLink_Full> CreateDataLink_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset opExNameOffset = default(StringOffset),
      StringOffset originatorOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset stopTimeOffset = default(StringOffset),
      StringOffset stopTimeModOffset = default(StringOffset),
      StringOffset planOrigNumOffset = default(StringOffset),
      StringOffset opExInfoOffset = default(StringOffset),
      StringOffset opExInfoAltOffset = default(StringOffset),
      StringOffset serialNumOffset = default(StringOffset),
      StringOffset monthOffset = default(StringOffset),
      StringOffset qualifierOffset = default(StringOffset),
      int qualSN = 0,
      VectorOffset referencesOffset = default(VectorOffset),
      StringOffset canxIdOffset = default(StringOffset),
      StringOffset canxOriginatorOffset = default(StringOffset),
      StringOffset canxTsOffset = default(StringOffset),
      StringOffset canxSerialNumOffset = default(StringOffset),
      StringOffset canxSpecialNotationOffset = default(StringOffset),
      VectorOffset canxSICsOffset = default(VectorOffset),
      StringOffset pocNameOffset = default(StringOffset),
      StringOffset pocRankOffset = default(StringOffset),
      StringOffset pocCallSignOffset = default(StringOffset),
      StringOffset pocLocNameOffset = default(StringOffset),
      double pocLat = 0.0,
      double pocLon = 0.0,
      VectorOffset pocNumsOffset = default(VectorOffset),
      StringOffset geoDatumOffset = default(StringOffset),
      VectorOffset refPointsOffset = default(VectorOffset),
      VectorOffset voiceCoordOffset = default(VectorOffset),
      StringOffset sysDefaultCodeOffset = default(StringOffset),
      double winSizeMult = 0.0,
      double winSizeMin = 0.0,
      int minTrackQual = 0,
      int maxTrackQual = 0,
      int resTrackQual = 0,
      int courseDiff = 0,
      int speedDiff = 0,
      int altDiff = 0,
      int minGeoPosQual = 0,
      int maxGeoPosQual = 0,
      double decorrWinMult = 0.0,
      int consecDecorr = 0,
      VectorOffset multiDutyOffset = default(VectorOffset),
      VectorOffset opsOffset = default(VectorOffset),
      StringOffset jreUnitDesOffset = default(StringOffset),
      StringOffset jreCallSignOffset = default(StringOffset),
      int jrePriAdd = 0,
      int jreSecAdd = 0,
      StringOffset jreDetailsOffset = default(StringOffset),
      VectorOffset specTracksOffset = default(VectorOffset),
      VectorOffset nonLinkUnitDesOffset = default(VectorOffset),
      VectorOffset trackNumBlockLLsOffset = default(VectorOffset),
      VectorOffset trackNumBlocksOffset = default(VectorOffset),
      StringOffset mgmtCodeOffset = default(StringOffset),
      StringOffset mgmtCodeMeaningOffset = default(StringOffset),
      bool ackReq = false,
      VectorOffset ackInstUnitsOffset = default(VectorOffset),
      StringOffset classSourceOffset = default(StringOffset),
      VectorOffset classReasonsOffset = default(VectorOffset),
      VectorOffset decInstDatesOffset = default(VectorOffset),
      VectorOffset decExemptCodesOffset = default(VectorOffset),
      VectorOffset remarksOffset = default(VectorOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      DataLink_Full_dataMode_Enum dataMode = DataLink_Full_dataMode_Enum.REAL) {
    builder.StartTable(74);
    DataLink_Full.AddDecorrWinMult(builder, decorrWinMult);
    DataLink_Full.AddWinSizeMin(builder, winSizeMin);
    DataLink_Full.AddWinSizeMult(builder, winSizeMult);
    DataLink_Full.AddPocLon(builder, pocLon);
    DataLink_Full.AddPocLat(builder, pocLat);
    DataLink_Full.AddOrigNetwork(builder, origNetworkOffset);
    DataLink_Full.AddOrigin(builder, originOffset);
    DataLink_Full.AddSource(builder, sourceOffset);
    DataLink_Full.AddSourceDL(builder, sourceDLOffset);
    DataLink_Full.AddUpdatedBy(builder, updatedByOffset);
    DataLink_Full.AddUpdatedAt(builder, updatedAtOffset);
    DataLink_Full.AddCreatedBy(builder, createdByOffset);
    DataLink_Full.AddCreatedAt(builder, createdAtOffset);
    DataLink_Full.AddRawFileURI(builder, rawFileURIOffset);
    DataLink_Full.AddRemarks(builder, remarksOffset);
    DataLink_Full.AddDecExemptCodes(builder, decExemptCodesOffset);
    DataLink_Full.AddDecInstDates(builder, decInstDatesOffset);
    DataLink_Full.AddClassReasons(builder, classReasonsOffset);
    DataLink_Full.AddClassSource(builder, classSourceOffset);
    DataLink_Full.AddAckInstUnits(builder, ackInstUnitsOffset);
    DataLink_Full.AddMgmtCodeMeaning(builder, mgmtCodeMeaningOffset);
    DataLink_Full.AddMgmtCode(builder, mgmtCodeOffset);
    DataLink_Full.AddTrackNumBlocks(builder, trackNumBlocksOffset);
    DataLink_Full.AddTrackNumBlockLLs(builder, trackNumBlockLLsOffset);
    DataLink_Full.AddNonLinkUnitDes(builder, nonLinkUnitDesOffset);
    DataLink_Full.AddSpecTracks(builder, specTracksOffset);
    DataLink_Full.AddJreDetails(builder, jreDetailsOffset);
    DataLink_Full.AddJreSecAdd(builder, jreSecAdd);
    DataLink_Full.AddJrePriAdd(builder, jrePriAdd);
    DataLink_Full.AddJreCallSign(builder, jreCallSignOffset);
    DataLink_Full.AddJreUnitDes(builder, jreUnitDesOffset);
    DataLink_Full.AddOps(builder, opsOffset);
    DataLink_Full.AddMultiDuty(builder, multiDutyOffset);
    DataLink_Full.AddConsecDecorr(builder, consecDecorr);
    DataLink_Full.AddMaxGeoPosQual(builder, maxGeoPosQual);
    DataLink_Full.AddMinGeoPosQual(builder, minGeoPosQual);
    DataLink_Full.AddAltDiff(builder, altDiff);
    DataLink_Full.AddSpeedDiff(builder, speedDiff);
    DataLink_Full.AddCourseDiff(builder, courseDiff);
    DataLink_Full.AddResTrackQual(builder, resTrackQual);
    DataLink_Full.AddMaxTrackQual(builder, maxTrackQual);
    DataLink_Full.AddMinTrackQual(builder, minTrackQual);
    DataLink_Full.AddSysDefaultCode(builder, sysDefaultCodeOffset);
    DataLink_Full.AddVoiceCoord(builder, voiceCoordOffset);
    DataLink_Full.AddRefPoints(builder, refPointsOffset);
    DataLink_Full.AddGeoDatum(builder, geoDatumOffset);
    DataLink_Full.AddPocNums(builder, pocNumsOffset);
    DataLink_Full.AddPocLocName(builder, pocLocNameOffset);
    DataLink_Full.AddPocCallSign(builder, pocCallSignOffset);
    DataLink_Full.AddPocRank(builder, pocRankOffset);
    DataLink_Full.AddPocName(builder, pocNameOffset);
    DataLink_Full.AddCanxSICs(builder, canxSICsOffset);
    DataLink_Full.AddCanxSpecialNotation(builder, canxSpecialNotationOffset);
    DataLink_Full.AddCanxSerialNum(builder, canxSerialNumOffset);
    DataLink_Full.AddCanxTs(builder, canxTsOffset);
    DataLink_Full.AddCanxOriginator(builder, canxOriginatorOffset);
    DataLink_Full.AddCanxId(builder, canxIdOffset);
    DataLink_Full.AddReferences(builder, referencesOffset);
    DataLink_Full.AddQualSN(builder, qualSN);
    DataLink_Full.AddQualifier(builder, qualifierOffset);
    DataLink_Full.AddMonth(builder, monthOffset);
    DataLink_Full.AddSerialNum(builder, serialNumOffset);
    DataLink_Full.AddOpExInfoAlt(builder, opExInfoAltOffset);
    DataLink_Full.AddOpExInfo(builder, opExInfoOffset);
    DataLink_Full.AddPlanOrigNum(builder, planOrigNumOffset);
    DataLink_Full.AddStopTimeMod(builder, stopTimeModOffset);
    DataLink_Full.AddStopTime(builder, stopTimeOffset);
    DataLink_Full.AddStartTime(builder, startTimeOffset);
    DataLink_Full.AddOriginator(builder, originatorOffset);
    DataLink_Full.AddOpExName(builder, opExNameOffset);
    DataLink_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    DataLink_Full.AddId(builder, idOffset);
    DataLink_Full.AddDataMode(builder, dataMode);
    DataLink_Full.AddAckReq(builder, ackReq);
    return DataLink_Full.EndDataLink_Full(builder);
  }

  public static void StartDataLink_Full(FlatBufferBuilder builder) { builder.StartTable(74); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOpExName(FlatBufferBuilder builder, StringOffset opExNameOffset) { builder.AddOffset(2, opExNameOffset.Value, 0); }
  public static void AddOriginator(FlatBufferBuilder builder, StringOffset originatorOffset) { builder.AddOffset(3, originatorOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(4, startTimeOffset.Value, 0); }
  public static void AddStopTime(FlatBufferBuilder builder, StringOffset stopTimeOffset) { builder.AddOffset(5, stopTimeOffset.Value, 0); }
  public static void AddStopTimeMod(FlatBufferBuilder builder, StringOffset stopTimeModOffset) { builder.AddOffset(6, stopTimeModOffset.Value, 0); }
  public static void AddPlanOrigNum(FlatBufferBuilder builder, StringOffset planOrigNumOffset) { builder.AddOffset(7, planOrigNumOffset.Value, 0); }
  public static void AddOpExInfo(FlatBufferBuilder builder, StringOffset opExInfoOffset) { builder.AddOffset(8, opExInfoOffset.Value, 0); }
  public static void AddOpExInfoAlt(FlatBufferBuilder builder, StringOffset opExInfoAltOffset) { builder.AddOffset(9, opExInfoAltOffset.Value, 0); }
  public static void AddSerialNum(FlatBufferBuilder builder, StringOffset serialNumOffset) { builder.AddOffset(10, serialNumOffset.Value, 0); }
  public static void AddMonth(FlatBufferBuilder builder, StringOffset monthOffset) { builder.AddOffset(11, monthOffset.Value, 0); }
  public static void AddQualifier(FlatBufferBuilder builder, StringOffset qualifierOffset) { builder.AddOffset(12, qualifierOffset.Value, 0); }
  public static void AddQualSN(FlatBufferBuilder builder, int qualSN) { builder.AddInt(13, qualSN, 0); }
  public static void AddReferences(FlatBufferBuilder builder, VectorOffset referencesOffset) { builder.AddOffset(14, referencesOffset.Value, 0); }
  public static VectorOffset CreateReferencesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReferencesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReferencesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateReferencesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartReferencesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCanxId(FlatBufferBuilder builder, StringOffset canxIdOffset) { builder.AddOffset(15, canxIdOffset.Value, 0); }
  public static void AddCanxOriginator(FlatBufferBuilder builder, StringOffset canxOriginatorOffset) { builder.AddOffset(16, canxOriginatorOffset.Value, 0); }
  public static void AddCanxTs(FlatBufferBuilder builder, StringOffset canxTsOffset) { builder.AddOffset(17, canxTsOffset.Value, 0); }
  public static void AddCanxSerialNum(FlatBufferBuilder builder, StringOffset canxSerialNumOffset) { builder.AddOffset(18, canxSerialNumOffset.Value, 0); }
  public static void AddCanxSpecialNotation(FlatBufferBuilder builder, StringOffset canxSpecialNotationOffset) { builder.AddOffset(19, canxSpecialNotationOffset.Value, 0); }
  public static void AddCanxSICs(FlatBufferBuilder builder, VectorOffset canxSICsOffset) { builder.AddOffset(20, canxSICsOffset.Value, 0); }
  public static VectorOffset CreateCanxSICsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCanxSICsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCanxSICsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCanxSICsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCanxSICsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPocName(FlatBufferBuilder builder, StringOffset pocNameOffset) { builder.AddOffset(21, pocNameOffset.Value, 0); }
  public static void AddPocRank(FlatBufferBuilder builder, StringOffset pocRankOffset) { builder.AddOffset(22, pocRankOffset.Value, 0); }
  public static void AddPocCallSign(FlatBufferBuilder builder, StringOffset pocCallSignOffset) { builder.AddOffset(23, pocCallSignOffset.Value, 0); }
  public static void AddPocLocName(FlatBufferBuilder builder, StringOffset pocLocNameOffset) { builder.AddOffset(24, pocLocNameOffset.Value, 0); }
  public static void AddPocLat(FlatBufferBuilder builder, double pocLat) { builder.AddDouble(25, pocLat, 0.0); }
  public static void AddPocLon(FlatBufferBuilder builder, double pocLon) { builder.AddDouble(26, pocLon, 0.0); }
  public static void AddPocNums(FlatBufferBuilder builder, VectorOffset pocNumsOffset) { builder.AddOffset(27, pocNumsOffset.Value, 0); }
  public static VectorOffset CreatePocNumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePocNumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePocNumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePocNumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPocNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeoDatum(FlatBufferBuilder builder, StringOffset geoDatumOffset) { builder.AddOffset(28, geoDatumOffset.Value, 0); }
  public static void AddRefPoints(FlatBufferBuilder builder, VectorOffset refPointsOffset) { builder.AddOffset(29, refPointsOffset.Value, 0); }
  public static VectorOffset CreateRefPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRefPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRefPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRefPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRefPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddVoiceCoord(FlatBufferBuilder builder, VectorOffset voiceCoordOffset) { builder.AddOffset(30, voiceCoordOffset.Value, 0); }
  public static VectorOffset CreateVoiceCoordVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateVoiceCoordVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceCoordVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateVoiceCoordVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartVoiceCoordVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSysDefaultCode(FlatBufferBuilder builder, StringOffset sysDefaultCodeOffset) { builder.AddOffset(31, sysDefaultCodeOffset.Value, 0); }
  public static void AddWinSizeMult(FlatBufferBuilder builder, double winSizeMult) { builder.AddDouble(32, winSizeMult, 0.0); }
  public static void AddWinSizeMin(FlatBufferBuilder builder, double winSizeMin) { builder.AddDouble(33, winSizeMin, 0.0); }
  public static void AddMinTrackQual(FlatBufferBuilder builder, int minTrackQual) { builder.AddInt(34, minTrackQual, 0); }
  public static void AddMaxTrackQual(FlatBufferBuilder builder, int maxTrackQual) { builder.AddInt(35, maxTrackQual, 0); }
  public static void AddResTrackQual(FlatBufferBuilder builder, int resTrackQual) { builder.AddInt(36, resTrackQual, 0); }
  public static void AddCourseDiff(FlatBufferBuilder builder, int courseDiff) { builder.AddInt(37, courseDiff, 0); }
  public static void AddSpeedDiff(FlatBufferBuilder builder, int speedDiff) { builder.AddInt(38, speedDiff, 0); }
  public static void AddAltDiff(FlatBufferBuilder builder, int altDiff) { builder.AddInt(39, altDiff, 0); }
  public static void AddMinGeoPosQual(FlatBufferBuilder builder, int minGeoPosQual) { builder.AddInt(40, minGeoPosQual, 0); }
  public static void AddMaxGeoPosQual(FlatBufferBuilder builder, int maxGeoPosQual) { builder.AddInt(41, maxGeoPosQual, 0); }
  public static void AddDecorrWinMult(FlatBufferBuilder builder, double decorrWinMult) { builder.AddDouble(42, decorrWinMult, 0.0); }
  public static void AddConsecDecorr(FlatBufferBuilder builder, int consecDecorr) { builder.AddInt(43, consecDecorr, 0); }
  public static void AddMultiDuty(FlatBufferBuilder builder, VectorOffset multiDutyOffset) { builder.AddOffset(44, multiDutyOffset.Value, 0); }
  public static VectorOffset CreateMultiDutyVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiDutyVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiDutyVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOps(FlatBufferBuilder builder, VectorOffset opsOffset) { builder.AddOffset(45, opsOffset.Value, 0); }
  public static VectorOffset CreateOpsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOpsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateOpsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartOpsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddJreUnitDes(FlatBufferBuilder builder, StringOffset jreUnitDesOffset) { builder.AddOffset(46, jreUnitDesOffset.Value, 0); }
  public static void AddJreCallSign(FlatBufferBuilder builder, StringOffset jreCallSignOffset) { builder.AddOffset(47, jreCallSignOffset.Value, 0); }
  public static void AddJrePriAdd(FlatBufferBuilder builder, int jrePriAdd) { builder.AddInt(48, jrePriAdd, 0); }
  public static void AddJreSecAdd(FlatBufferBuilder builder, int jreSecAdd) { builder.AddInt(49, jreSecAdd, 0); }
  public static void AddJreDetails(FlatBufferBuilder builder, StringOffset jreDetailsOffset) { builder.AddOffset(50, jreDetailsOffset.Value, 0); }
  public static void AddSpecTracks(FlatBufferBuilder builder, VectorOffset specTracksOffset) { builder.AddOffset(51, specTracksOffset.Value, 0); }
  public static VectorOffset CreateSpecTracksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpecTracksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecTracksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecTracksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecTracksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNonLinkUnitDes(FlatBufferBuilder builder, VectorOffset nonLinkUnitDesOffset) { builder.AddOffset(52, nonLinkUnitDesOffset.Value, 0); }
  public static VectorOffset CreateNonLinkUnitDesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNonLinkUnitDesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNonLinkUnitDesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNonLinkUnitDesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNonLinkUnitDesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrackNumBlockLLs(FlatBufferBuilder builder, VectorOffset trackNumBlockLLsOffset) { builder.AddOffset(53, trackNumBlockLLsOffset.Value, 0); }
  public static VectorOffset CreateTrackNumBlockLLsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlockLLsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlockLLsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlockLLsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrackNumBlockLLsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTrackNumBlocks(FlatBufferBuilder builder, VectorOffset trackNumBlocksOffset) { builder.AddOffset(54, trackNumBlocksOffset.Value, 0); }
  public static VectorOffset CreateTrackNumBlocksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlocksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlocksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackNumBlocksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrackNumBlocksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMgmtCode(FlatBufferBuilder builder, StringOffset mgmtCodeOffset) { builder.AddOffset(55, mgmtCodeOffset.Value, 0); }
  public static void AddMgmtCodeMeaning(FlatBufferBuilder builder, StringOffset mgmtCodeMeaningOffset) { builder.AddOffset(56, mgmtCodeMeaningOffset.Value, 0); }
  public static void AddAckReq(FlatBufferBuilder builder, bool ackReq) { builder.AddBool(57, ackReq, false); }
  public static void AddAckInstUnits(FlatBufferBuilder builder, VectorOffset ackInstUnitsOffset) { builder.AddOffset(58, ackInstUnitsOffset.Value, 0); }
  public static VectorOffset CreateAckInstUnitsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAckInstUnitsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAckInstUnitsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAckInstUnitsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAckInstUnitsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddClassSource(FlatBufferBuilder builder, StringOffset classSourceOffset) { builder.AddOffset(59, classSourceOffset.Value, 0); }
  public static void AddClassReasons(FlatBufferBuilder builder, VectorOffset classReasonsOffset) { builder.AddOffset(60, classReasonsOffset.Value, 0); }
  public static VectorOffset CreateClassReasonsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateClassReasonsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartClassReasonsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecInstDates(FlatBufferBuilder builder, VectorOffset decInstDatesOffset) { builder.AddOffset(61, decInstDatesOffset.Value, 0); }
  public static VectorOffset CreateDecInstDatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecInstDatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecInstDatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecInstDatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecInstDatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDecExemptCodes(FlatBufferBuilder builder, VectorOffset decExemptCodesOffset) { builder.AddOffset(62, decExemptCodesOffset.Value, 0); }
  public static VectorOffset CreateDecExemptCodesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDecExemptCodesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecExemptCodesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDecExemptCodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDecExemptCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRemarks(FlatBufferBuilder builder, VectorOffset remarksOffset) { builder.AddOffset(63, remarksOffset.Value, 0); }
  public static VectorOffset CreateRemarksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRemarksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRemarksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(64, rawFileURIOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(65, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(66, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(67, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(68, updatedByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(69, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(70, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(71, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(72, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, DataLink_Full_dataMode_Enum dataMode) { builder.AddSbyte(73, (sbyte)dataMode, 0); }
  public static Offset<DataLink_Full> EndDataLink_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLink_Full>(o);
  }
  public static void FinishDataLink_FullBuffer(FlatBufferBuilder builder, Offset<DataLink_Full> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLink_FullBuffer(FlatBufferBuilder builder, Offset<DataLink_Full> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLink_FullT UnPack() {
    var _o = new DataLink_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLink_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OpExName = this.OpExName;
    _o.Originator = this.Originator;
    _o.StartTime = this.StartTime;
    _o.StopTime = this.StopTime;
    _o.StopTimeMod = this.StopTimeMod;
    _o.PlanOrigNum = this.PlanOrigNum;
    _o.OpExInfo = this.OpExInfo;
    _o.OpExInfoAlt = this.OpExInfoAlt;
    _o.SerialNum = this.SerialNum;
    _o.Month = this.Month;
    _o.Qualifier = this.Qualifier;
    _o.QualSN = this.QualSN;
    _o.References = new List<string>();
    for (var _j = 0; _j < this.ReferencesLength; ++_j) {_o.References.Add(this.References(_j));}
    _o.CanxId = this.CanxId;
    _o.CanxOriginator = this.CanxOriginator;
    _o.CanxTs = this.CanxTs;
    _o.CanxSerialNum = this.CanxSerialNum;
    _o.CanxSpecialNotation = this.CanxSpecialNotation;
    _o.CanxSICs = new List<string>();
    for (var _j = 0; _j < this.CanxSICsLength; ++_j) {_o.CanxSICs.Add(this.CanxSICs(_j));}
    _o.PocName = this.PocName;
    _o.PocRank = this.PocRank;
    _o.PocCallSign = this.PocCallSign;
    _o.PocLocName = this.PocLocName;
    _o.PocLat = this.PocLat;
    _o.PocLon = this.PocLon;
    _o.PocNums = new List<string>();
    for (var _j = 0; _j < this.PocNumsLength; ++_j) {_o.PocNums.Add(this.PocNums(_j));}
    _o.GeoDatum = this.GeoDatum;
    _o.RefPoints = new List<string>();
    for (var _j = 0; _j < this.RefPointsLength; ++_j) {_o.RefPoints.Add(this.RefPoints(_j));}
    _o.VoiceCoord = new List<string>();
    for (var _j = 0; _j < this.VoiceCoordLength; ++_j) {_o.VoiceCoord.Add(this.VoiceCoord(_j));}
    _o.SysDefaultCode = this.SysDefaultCode;
    _o.WinSizeMult = this.WinSizeMult;
    _o.WinSizeMin = this.WinSizeMin;
    _o.MinTrackQual = this.MinTrackQual;
    _o.MaxTrackQual = this.MaxTrackQual;
    _o.ResTrackQual = this.ResTrackQual;
    _o.CourseDiff = this.CourseDiff;
    _o.SpeedDiff = this.SpeedDiff;
    _o.AltDiff = this.AltDiff;
    _o.MinGeoPosQual = this.MinGeoPosQual;
    _o.MaxGeoPosQual = this.MaxGeoPosQual;
    _o.DecorrWinMult = this.DecorrWinMult;
    _o.ConsecDecorr = this.ConsecDecorr;
    _o.MultiDuty = new List<string>();
    for (var _j = 0; _j < this.MultiDutyLength; ++_j) {_o.MultiDuty.Add(this.MultiDuty(_j));}
    _o.Ops = new List<string>();
    for (var _j = 0; _j < this.OpsLength; ++_j) {_o.Ops.Add(this.Ops(_j));}
    _o.JreUnitDes = this.JreUnitDes;
    _o.JreCallSign = this.JreCallSign;
    _o.JrePriAdd = this.JrePriAdd;
    _o.JreSecAdd = this.JreSecAdd;
    _o.JreDetails = this.JreDetails;
    _o.SpecTracks = new List<string>();
    for (var _j = 0; _j < this.SpecTracksLength; ++_j) {_o.SpecTracks.Add(this.SpecTracks(_j));}
    _o.NonLinkUnitDes = new List<string>();
    for (var _j = 0; _j < this.NonLinkUnitDesLength; ++_j) {_o.NonLinkUnitDes.Add(this.NonLinkUnitDes(_j));}
    _o.TrackNumBlockLLs = new List<string>();
    for (var _j = 0; _j < this.TrackNumBlockLLsLength; ++_j) {_o.TrackNumBlockLLs.Add(this.TrackNumBlockLLs(_j));}
    _o.TrackNumBlocks = new List<string>();
    for (var _j = 0; _j < this.TrackNumBlocksLength; ++_j) {_o.TrackNumBlocks.Add(this.TrackNumBlocks(_j));}
    _o.MgmtCode = this.MgmtCode;
    _o.MgmtCodeMeaning = this.MgmtCodeMeaning;
    _o.AckReq = this.AckReq;
    _o.AckInstUnits = new List<string>();
    for (var _j = 0; _j < this.AckInstUnitsLength; ++_j) {_o.AckInstUnits.Add(this.AckInstUnits(_j));}
    _o.ClassSource = this.ClassSource;
    _o.ClassReasons = new List<string>();
    for (var _j = 0; _j < this.ClassReasonsLength; ++_j) {_o.ClassReasons.Add(this.ClassReasons(_j));}
    _o.DecInstDates = new List<string>();
    for (var _j = 0; _j < this.DecInstDatesLength; ++_j) {_o.DecInstDates.Add(this.DecInstDates(_j));}
    _o.DecExemptCodes = new List<string>();
    for (var _j = 0; _j < this.DecExemptCodesLength; ++_j) {_o.DecExemptCodes.Add(this.DecExemptCodes(_j));}
    _o.Remarks = new List<string>();
    for (var _j = 0; _j < this.RemarksLength; ++_j) {_o.Remarks.Add(this.Remarks(_j));}
    _o.RawFileURI = this.RawFileURI;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<DataLink_Full> Pack(FlatBufferBuilder builder, DataLink_FullT _o) {
    if (_o == null) return default(Offset<DataLink_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _opExName = _o.OpExName == null ? default(StringOffset) : builder.CreateString(_o.OpExName);
    var _originator = _o.Originator == null ? default(StringOffset) : builder.CreateString(_o.Originator);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _stopTime = _o.StopTime == null ? default(StringOffset) : builder.CreateString(_o.StopTime);
    var _stopTimeMod = _o.StopTimeMod == null ? default(StringOffset) : builder.CreateString(_o.StopTimeMod);
    var _planOrigNum = _o.PlanOrigNum == null ? default(StringOffset) : builder.CreateString(_o.PlanOrigNum);
    var _opExInfo = _o.OpExInfo == null ? default(StringOffset) : builder.CreateString(_o.OpExInfo);
    var _opExInfoAlt = _o.OpExInfoAlt == null ? default(StringOffset) : builder.CreateString(_o.OpExInfoAlt);
    var _serialNum = _o.SerialNum == null ? default(StringOffset) : builder.CreateString(_o.SerialNum);
    var _month = _o.Month == null ? default(StringOffset) : builder.CreateString(_o.Month);
    var _qualifier = _o.Qualifier == null ? default(StringOffset) : builder.CreateString(_o.Qualifier);
    var _references = default(VectorOffset);
    if (_o.References != null) {
      var __references = new StringOffset[_o.References.Count];
      for (var _j = 0; _j < __references.Length; ++_j) { __references[_j] = builder.CreateString(_o.References[_j]); }
      _references = CreateReferencesVector(builder, __references);
    }
    var _canxId = _o.CanxId == null ? default(StringOffset) : builder.CreateString(_o.CanxId);
    var _canxOriginator = _o.CanxOriginator == null ? default(StringOffset) : builder.CreateString(_o.CanxOriginator);
    var _canxTs = _o.CanxTs == null ? default(StringOffset) : builder.CreateString(_o.CanxTs);
    var _canxSerialNum = _o.CanxSerialNum == null ? default(StringOffset) : builder.CreateString(_o.CanxSerialNum);
    var _canxSpecialNotation = _o.CanxSpecialNotation == null ? default(StringOffset) : builder.CreateString(_o.CanxSpecialNotation);
    var _canxSICs = default(VectorOffset);
    if (_o.CanxSICs != null) {
      var __canxSICs = new StringOffset[_o.CanxSICs.Count];
      for (var _j = 0; _j < __canxSICs.Length; ++_j) { __canxSICs[_j] = builder.CreateString(_o.CanxSICs[_j]); }
      _canxSICs = CreateCanxSICsVector(builder, __canxSICs);
    }
    var _pocName = _o.PocName == null ? default(StringOffset) : builder.CreateString(_o.PocName);
    var _pocRank = _o.PocRank == null ? default(StringOffset) : builder.CreateString(_o.PocRank);
    var _pocCallSign = _o.PocCallSign == null ? default(StringOffset) : builder.CreateString(_o.PocCallSign);
    var _pocLocName = _o.PocLocName == null ? default(StringOffset) : builder.CreateString(_o.PocLocName);
    var _pocNums = default(VectorOffset);
    if (_o.PocNums != null) {
      var __pocNums = new StringOffset[_o.PocNums.Count];
      for (var _j = 0; _j < __pocNums.Length; ++_j) { __pocNums[_j] = builder.CreateString(_o.PocNums[_j]); }
      _pocNums = CreatePocNumsVector(builder, __pocNums);
    }
    var _geoDatum = _o.GeoDatum == null ? default(StringOffset) : builder.CreateString(_o.GeoDatum);
    var _refPoints = default(VectorOffset);
    if (_o.RefPoints != null) {
      var __refPoints = new StringOffset[_o.RefPoints.Count];
      for (var _j = 0; _j < __refPoints.Length; ++_j) { __refPoints[_j] = builder.CreateString(_o.RefPoints[_j]); }
      _refPoints = CreateRefPointsVector(builder, __refPoints);
    }
    var _voiceCoord = default(VectorOffset);
    if (_o.VoiceCoord != null) {
      var __voiceCoord = new StringOffset[_o.VoiceCoord.Count];
      for (var _j = 0; _j < __voiceCoord.Length; ++_j) { __voiceCoord[_j] = builder.CreateString(_o.VoiceCoord[_j]); }
      _voiceCoord = CreateVoiceCoordVector(builder, __voiceCoord);
    }
    var _sysDefaultCode = _o.SysDefaultCode == null ? default(StringOffset) : builder.CreateString(_o.SysDefaultCode);
    var _multiDuty = default(VectorOffset);
    if (_o.MultiDuty != null) {
      var __multiDuty = new StringOffset[_o.MultiDuty.Count];
      for (var _j = 0; _j < __multiDuty.Length; ++_j) { __multiDuty[_j] = builder.CreateString(_o.MultiDuty[_j]); }
      _multiDuty = CreateMultiDutyVector(builder, __multiDuty);
    }
    var _ops = default(VectorOffset);
    if (_o.Ops != null) {
      var __ops = new StringOffset[_o.Ops.Count];
      for (var _j = 0; _j < __ops.Length; ++_j) { __ops[_j] = builder.CreateString(_o.Ops[_j]); }
      _ops = CreateOpsVector(builder, __ops);
    }
    var _jreUnitDes = _o.JreUnitDes == null ? default(StringOffset) : builder.CreateString(_o.JreUnitDes);
    var _jreCallSign = _o.JreCallSign == null ? default(StringOffset) : builder.CreateString(_o.JreCallSign);
    var _jreDetails = _o.JreDetails == null ? default(StringOffset) : builder.CreateString(_o.JreDetails);
    var _specTracks = default(VectorOffset);
    if (_o.SpecTracks != null) {
      var __specTracks = new StringOffset[_o.SpecTracks.Count];
      for (var _j = 0; _j < __specTracks.Length; ++_j) { __specTracks[_j] = builder.CreateString(_o.SpecTracks[_j]); }
      _specTracks = CreateSpecTracksVector(builder, __specTracks);
    }
    var _nonLinkUnitDes = default(VectorOffset);
    if (_o.NonLinkUnitDes != null) {
      var __nonLinkUnitDes = new StringOffset[_o.NonLinkUnitDes.Count];
      for (var _j = 0; _j < __nonLinkUnitDes.Length; ++_j) { __nonLinkUnitDes[_j] = builder.CreateString(_o.NonLinkUnitDes[_j]); }
      _nonLinkUnitDes = CreateNonLinkUnitDesVector(builder, __nonLinkUnitDes);
    }
    var _trackNumBlockLLs = default(VectorOffset);
    if (_o.TrackNumBlockLLs != null) {
      var __trackNumBlockLLs = new StringOffset[_o.TrackNumBlockLLs.Count];
      for (var _j = 0; _j < __trackNumBlockLLs.Length; ++_j) { __trackNumBlockLLs[_j] = builder.CreateString(_o.TrackNumBlockLLs[_j]); }
      _trackNumBlockLLs = CreateTrackNumBlockLLsVector(builder, __trackNumBlockLLs);
    }
    var _trackNumBlocks = default(VectorOffset);
    if (_o.TrackNumBlocks != null) {
      var __trackNumBlocks = new StringOffset[_o.TrackNumBlocks.Count];
      for (var _j = 0; _j < __trackNumBlocks.Length; ++_j) { __trackNumBlocks[_j] = builder.CreateString(_o.TrackNumBlocks[_j]); }
      _trackNumBlocks = CreateTrackNumBlocksVector(builder, __trackNumBlocks);
    }
    var _mgmtCode = _o.MgmtCode == null ? default(StringOffset) : builder.CreateString(_o.MgmtCode);
    var _mgmtCodeMeaning = _o.MgmtCodeMeaning == null ? default(StringOffset) : builder.CreateString(_o.MgmtCodeMeaning);
    var _ackInstUnits = default(VectorOffset);
    if (_o.AckInstUnits != null) {
      var __ackInstUnits = new StringOffset[_o.AckInstUnits.Count];
      for (var _j = 0; _j < __ackInstUnits.Length; ++_j) { __ackInstUnits[_j] = builder.CreateString(_o.AckInstUnits[_j]); }
      _ackInstUnits = CreateAckInstUnitsVector(builder, __ackInstUnits);
    }
    var _classSource = _o.ClassSource == null ? default(StringOffset) : builder.CreateString(_o.ClassSource);
    var _classReasons = default(VectorOffset);
    if (_o.ClassReasons != null) {
      var __classReasons = new StringOffset[_o.ClassReasons.Count];
      for (var _j = 0; _j < __classReasons.Length; ++_j) { __classReasons[_j] = builder.CreateString(_o.ClassReasons[_j]); }
      _classReasons = CreateClassReasonsVector(builder, __classReasons);
    }
    var _decInstDates = default(VectorOffset);
    if (_o.DecInstDates != null) {
      var __decInstDates = new StringOffset[_o.DecInstDates.Count];
      for (var _j = 0; _j < __decInstDates.Length; ++_j) { __decInstDates[_j] = builder.CreateString(_o.DecInstDates[_j]); }
      _decInstDates = CreateDecInstDatesVector(builder, __decInstDates);
    }
    var _decExemptCodes = default(VectorOffset);
    if (_o.DecExemptCodes != null) {
      var __decExemptCodes = new StringOffset[_o.DecExemptCodes.Count];
      for (var _j = 0; _j < __decExemptCodes.Length; ++_j) { __decExemptCodes[_j] = builder.CreateString(_o.DecExemptCodes[_j]); }
      _decExemptCodes = CreateDecExemptCodesVector(builder, __decExemptCodes);
    }
    var _remarks = default(VectorOffset);
    if (_o.Remarks != null) {
      var __remarks = new StringOffset[_o.Remarks.Count];
      for (var _j = 0; _j < __remarks.Length; ++_j) { __remarks[_j] = builder.CreateString(_o.Remarks[_j]); }
      _remarks = CreateRemarksVector(builder, __remarks);
    }
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateDataLink_Full(
      builder,
      _id,
      _classificationMarking,
      _opExName,
      _originator,
      _startTime,
      _stopTime,
      _stopTimeMod,
      _planOrigNum,
      _opExInfo,
      _opExInfoAlt,
      _serialNum,
      _month,
      _qualifier,
      _o.QualSN,
      _references,
      _canxId,
      _canxOriginator,
      _canxTs,
      _canxSerialNum,
      _canxSpecialNotation,
      _canxSICs,
      _pocName,
      _pocRank,
      _pocCallSign,
      _pocLocName,
      _o.PocLat,
      _o.PocLon,
      _pocNums,
      _geoDatum,
      _refPoints,
      _voiceCoord,
      _sysDefaultCode,
      _o.WinSizeMult,
      _o.WinSizeMin,
      _o.MinTrackQual,
      _o.MaxTrackQual,
      _o.ResTrackQual,
      _o.CourseDiff,
      _o.SpeedDiff,
      _o.AltDiff,
      _o.MinGeoPosQual,
      _o.MaxGeoPosQual,
      _o.DecorrWinMult,
      _o.ConsecDecorr,
      _multiDuty,
      _ops,
      _jreUnitDes,
      _jreCallSign,
      _o.JrePriAdd,
      _o.JreSecAdd,
      _jreDetails,
      _specTracks,
      _nonLinkUnitDes,
      _trackNumBlockLLs,
      _trackNumBlocks,
      _mgmtCode,
      _mgmtCodeMeaning,
      _o.AckReq,
      _ackInstUnits,
      _classSource,
      _classReasons,
      _decInstDates,
      _decExemptCodes,
      _remarks,
      _rawFileURI,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class DataLink_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string OpExName { get; set; }
  public string Originator { get; set; }
  public string StartTime { get; set; }
  public string StopTime { get; set; }
  public string StopTimeMod { get; set; }
  public string PlanOrigNum { get; set; }
  public string OpExInfo { get; set; }
  public string OpExInfoAlt { get; set; }
  public string SerialNum { get; set; }
  public string Month { get; set; }
  public string Qualifier { get; set; }
  public int QualSN { get; set; }
  public List<string> References { get; set; }
  public string CanxId { get; set; }
  public string CanxOriginator { get; set; }
  public string CanxTs { get; set; }
  public string CanxSerialNum { get; set; }
  public string CanxSpecialNotation { get; set; }
  public List<string> CanxSICs { get; set; }
  public string PocName { get; set; }
  public string PocRank { get; set; }
  public string PocCallSign { get; set; }
  public string PocLocName { get; set; }
  public double PocLat { get; set; }
  public double PocLon { get; set; }
  public List<string> PocNums { get; set; }
  public string GeoDatum { get; set; }
  public List<string> RefPoints { get; set; }
  public List<string> VoiceCoord { get; set; }
  public string SysDefaultCode { get; set; }
  public double WinSizeMult { get; set; }
  public double WinSizeMin { get; set; }
  public int MinTrackQual { get; set; }
  public int MaxTrackQual { get; set; }
  public int ResTrackQual { get; set; }
  public int CourseDiff { get; set; }
  public int SpeedDiff { get; set; }
  public int AltDiff { get; set; }
  public int MinGeoPosQual { get; set; }
  public int MaxGeoPosQual { get; set; }
  public double DecorrWinMult { get; set; }
  public int ConsecDecorr { get; set; }
  public List<string> MultiDuty { get; set; }
  public List<string> Ops { get; set; }
  public string JreUnitDes { get; set; }
  public string JreCallSign { get; set; }
  public int JrePriAdd { get; set; }
  public int JreSecAdd { get; set; }
  public string JreDetails { get; set; }
  public List<string> SpecTracks { get; set; }
  public List<string> NonLinkUnitDes { get; set; }
  public List<string> TrackNumBlockLLs { get; set; }
  public List<string> TrackNumBlocks { get; set; }
  public string MgmtCode { get; set; }
  public string MgmtCodeMeaning { get; set; }
  public bool AckReq { get; set; }
  public List<string> AckInstUnits { get; set; }
  public string ClassSource { get; set; }
  public List<string> ClassReasons { get; set; }
  public List<string> DecInstDates { get; set; }
  public List<string> DecExemptCodes { get; set; }
  public List<string> Remarks { get; set; }
  public string RawFileURI { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public DataLink_Full_dataMode_Enum DataMode { get; set; }

  public DataLink_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.OpExName = null;
    this.Originator = null;
    this.StartTime = null;
    this.StopTime = null;
    this.StopTimeMod = null;
    this.PlanOrigNum = null;
    this.OpExInfo = null;
    this.OpExInfoAlt = null;
    this.SerialNum = null;
    this.Month = null;
    this.Qualifier = null;
    this.QualSN = 0;
    this.References = null;
    this.CanxId = null;
    this.CanxOriginator = null;
    this.CanxTs = null;
    this.CanxSerialNum = null;
    this.CanxSpecialNotation = null;
    this.CanxSICs = null;
    this.PocName = null;
    this.PocRank = null;
    this.PocCallSign = null;
    this.PocLocName = null;
    this.PocLat = 0.0;
    this.PocLon = 0.0;
    this.PocNums = null;
    this.GeoDatum = null;
    this.RefPoints = null;
    this.VoiceCoord = null;
    this.SysDefaultCode = null;
    this.WinSizeMult = 0.0;
    this.WinSizeMin = 0.0;
    this.MinTrackQual = 0;
    this.MaxTrackQual = 0;
    this.ResTrackQual = 0;
    this.CourseDiff = 0;
    this.SpeedDiff = 0;
    this.AltDiff = 0;
    this.MinGeoPosQual = 0;
    this.MaxGeoPosQual = 0;
    this.DecorrWinMult = 0.0;
    this.ConsecDecorr = 0;
    this.MultiDuty = null;
    this.Ops = null;
    this.JreUnitDes = null;
    this.JreCallSign = null;
    this.JrePriAdd = 0;
    this.JreSecAdd = 0;
    this.JreDetails = null;
    this.SpecTracks = null;
    this.NonLinkUnitDes = null;
    this.TrackNumBlockLLs = null;
    this.TrackNumBlocks = null;
    this.MgmtCode = null;
    this.MgmtCodeMeaning = null;
    this.AckReq = false;
    this.AckInstUnits = null;
    this.ClassSource = null;
    this.ClassReasons = null;
    this.DecInstDates = null;
    this.DecExemptCodes = null;
    this.Remarks = null;
    this.RawFileURI = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = DataLink_Full_dataMode_Enum.REAL;
  }
  public static DataLink_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLink_Full.GetRootAsDataLink_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLink_Full.FinishDataLink_FullBuffer(fbb, DataLink_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLink_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OpExName*/, false)
      && verifier.VerifyString(tablePos, 10 /*Originator*/, false)
      && verifier.VerifyString(tablePos, 12 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*StopTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*StopTimeMod*/, false)
      && verifier.VerifyString(tablePos, 18 /*PlanOrigNum*/, false)
      && verifier.VerifyString(tablePos, 20 /*OpExInfo*/, false)
      && verifier.VerifyString(tablePos, 22 /*OpExInfoAlt*/, false)
      && verifier.VerifyString(tablePos, 24 /*SerialNum*/, false)
      && verifier.VerifyString(tablePos, 26 /*Month*/, false)
      && verifier.VerifyString(tablePos, 28 /*Qualifier*/, false)
      && verifier.VerifyField(tablePos, 30 /*QualSN*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*References*/, false)
      && verifier.VerifyString(tablePos, 34 /*CanxId*/, false)
      && verifier.VerifyString(tablePos, 36 /*CanxOriginator*/, false)
      && verifier.VerifyString(tablePos, 38 /*CanxTs*/, false)
      && verifier.VerifyString(tablePos, 40 /*CanxSerialNum*/, false)
      && verifier.VerifyString(tablePos, 42 /*CanxSpecialNotation*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*CanxSICs*/, false)
      && verifier.VerifyString(tablePos, 46 /*PocName*/, false)
      && verifier.VerifyString(tablePos, 48 /*PocRank*/, false)
      && verifier.VerifyString(tablePos, 50 /*PocCallSign*/, false)
      && verifier.VerifyString(tablePos, 52 /*PocLocName*/, false)
      && verifier.VerifyField(tablePos, 54 /*PocLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*PocLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*PocNums*/, false)
      && verifier.VerifyString(tablePos, 60 /*GeoDatum*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*RefPoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*VoiceCoord*/, false)
      && verifier.VerifyString(tablePos, 66 /*SysDefaultCode*/, false)
      && verifier.VerifyField(tablePos, 68 /*WinSizeMult*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*WinSizeMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*MinTrackQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*MaxTrackQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*ResTrackQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 78 /*CourseDiff*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 80 /*SpeedDiff*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*AltDiff*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*MinGeoPosQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*MaxGeoPosQual*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*DecorrWinMult*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*ConsecDecorr*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 92 /*MultiDuty*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*Ops*/, false)
      && verifier.VerifyString(tablePos, 96 /*JreUnitDes*/, false)
      && verifier.VerifyString(tablePos, 98 /*JreCallSign*/, false)
      && verifier.VerifyField(tablePos, 100 /*JrePriAdd*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 102 /*JreSecAdd*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 104 /*JreDetails*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 106 /*SpecTracks*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 108 /*NonLinkUnitDes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 110 /*TrackNumBlockLLs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 112 /*TrackNumBlocks*/, false)
      && verifier.VerifyString(tablePos, 114 /*MgmtCode*/, false)
      && verifier.VerifyString(tablePos, 116 /*MgmtCodeMeaning*/, false)
      && verifier.VerifyField(tablePos, 118 /*AckReq*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 120 /*AckInstUnits*/, false)
      && verifier.VerifyString(tablePos, 122 /*ClassSource*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 124 /*ClassReasons*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 126 /*DecInstDates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 128 /*DecExemptCodes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 130 /*Remarks*/, false)
      && verifier.VerifyString(tablePos, 132 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 134 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 136 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 138 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 140 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 142 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 144 /*Source*/, false)
      && verifier.VerifyString(tablePos, 146 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 148 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 150 /*DataMode*/, 1 /*DataLink_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
