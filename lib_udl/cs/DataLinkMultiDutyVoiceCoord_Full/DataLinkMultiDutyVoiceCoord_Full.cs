// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
public struct DataLinkMultiDutyVoiceCoord_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLinkMultiDutyVoiceCoord_Full GetRootAsDataLinkMultiDutyVoiceCoord_Full(ByteBuffer _bb) { return GetRootAsDataLinkMultiDutyVoiceCoord_Full(_bb, new DataLinkMultiDutyVoiceCoord_Full()); }
  public static DataLinkMultiDutyVoiceCoord_Full GetRootAsDataLinkMultiDutyVoiceCoord_Full(ByteBuffer _bb, DataLinkMultiDutyVoiceCoord_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLinkMultiDutyVoiceCoord_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLinkMultiDutyVoiceCoord_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLinkMultiDutyVoiceCoord_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLinkMultiDutyVoiceCoord_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  public string MultiVoiceNetDes { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMultiVoiceNetDesBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetMultiVoiceNetDesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMultiVoiceNetDesArray() { return __p.__vector_as_array<byte>(4); }
  /// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string MultiFreqDes { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMultiFreqDesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMultiFreqDesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMultiFreqDesArray() { return __p.__vector_as_array<byte>(6); }
  /// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string MultiCommPri { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMultiCommPriBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMultiCommPriBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMultiCommPriArray() { return __p.__vector_as_array<byte>(8); }
  /// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  public string MultiTeleFreqNums(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MultiTeleFreqNumsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<DataLinkMultiDutyVoiceCoord_Full> CreateDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder builder,
      StringOffset multiVoiceNetDesOffset = default(StringOffset),
      StringOffset multiFreqDesOffset = default(StringOffset),
      StringOffset multiCommPriOffset = default(StringOffset),
      VectorOffset multiTeleFreqNumsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    DataLinkMultiDutyVoiceCoord_Full.AddMultiTeleFreqNums(builder, multiTeleFreqNumsOffset);
    DataLinkMultiDutyVoiceCoord_Full.AddMultiCommPri(builder, multiCommPriOffset);
    DataLinkMultiDutyVoiceCoord_Full.AddMultiFreqDes(builder, multiFreqDesOffset);
    DataLinkMultiDutyVoiceCoord_Full.AddMultiVoiceNetDes(builder, multiVoiceNetDesOffset);
    return DataLinkMultiDutyVoiceCoord_Full.EndDataLinkMultiDutyVoiceCoord_Full(builder);
  }

  public static void StartDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMultiVoiceNetDes(FlatBufferBuilder builder, StringOffset multiVoiceNetDesOffset) { builder.AddOffset(0, multiVoiceNetDesOffset.Value, 0); }
  public static void AddMultiFreqDes(FlatBufferBuilder builder, StringOffset multiFreqDesOffset) { builder.AddOffset(1, multiFreqDesOffset.Value, 0); }
  public static void AddMultiCommPri(FlatBufferBuilder builder, StringOffset multiCommPriOffset) { builder.AddOffset(2, multiCommPriOffset.Value, 0); }
  public static void AddMultiTeleFreqNums(FlatBufferBuilder builder, VectorOffset multiTeleFreqNumsOffset) { builder.AddOffset(3, multiTeleFreqNumsOffset.Value, 0); }
  public static VectorOffset CreateMultiTeleFreqNumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMultiTeleFreqNumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiTeleFreqNumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMultiTeleFreqNumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMultiTeleFreqNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<DataLinkMultiDutyVoiceCoord_Full> EndDataLinkMultiDutyVoiceCoord_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLinkMultiDutyVoiceCoord_Full>(o);
  }
  public static void FinishDataLinkMultiDutyVoiceCoord_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkMultiDutyVoiceCoord_Full> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLinkMultiDutyVoiceCoord_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkMultiDutyVoiceCoord_Full> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLinkMultiDutyVoiceCoord_FullT UnPack() {
    var _o = new DataLinkMultiDutyVoiceCoord_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLinkMultiDutyVoiceCoord_FullT _o) {
    _o.MultiVoiceNetDes = this.MultiVoiceNetDes;
    _o.MultiFreqDes = this.MultiFreqDes;
    _o.MultiCommPri = this.MultiCommPri;
    _o.MultiTeleFreqNums = new List<string>();
    for (var _j = 0; _j < this.MultiTeleFreqNumsLength; ++_j) {_o.MultiTeleFreqNums.Add(this.MultiTeleFreqNums(_j));}
  }
  public static Offset<DataLinkMultiDutyVoiceCoord_Full> Pack(FlatBufferBuilder builder, DataLinkMultiDutyVoiceCoord_FullT _o) {
    if (_o == null) return default(Offset<DataLinkMultiDutyVoiceCoord_Full>);
    var _multiVoiceNetDes = _o.MultiVoiceNetDes == null ? default(StringOffset) : builder.CreateString(_o.MultiVoiceNetDes);
    var _multiFreqDes = _o.MultiFreqDes == null ? default(StringOffset) : builder.CreateString(_o.MultiFreqDes);
    var _multiCommPri = _o.MultiCommPri == null ? default(StringOffset) : builder.CreateString(_o.MultiCommPri);
    var _multiTeleFreqNums = default(VectorOffset);
    if (_o.MultiTeleFreqNums != null) {
      var __multiTeleFreqNums = new StringOffset[_o.MultiTeleFreqNums.Count];
      for (var _j = 0; _j < __multiTeleFreqNums.Length; ++_j) { __multiTeleFreqNums[_j] = builder.CreateString(_o.MultiTeleFreqNums[_j]); }
      _multiTeleFreqNums = CreateMultiTeleFreqNumsVector(builder, __multiTeleFreqNums);
    }
    return CreateDataLinkMultiDutyVoiceCoord_Full(
      builder,
      _multiVoiceNetDes,
      _multiFreqDes,
      _multiCommPri,
      _multiTeleFreqNums);
  }
}

public class DataLinkMultiDutyVoiceCoord_FullT
{
  public string MultiVoiceNetDes { get; set; }
  public string MultiFreqDes { get; set; }
  public string MultiCommPri { get; set; }
  public List<string> MultiTeleFreqNums { get; set; }

  public DataLinkMultiDutyVoiceCoord_FullT() {
    this.MultiVoiceNetDes = null;
    this.MultiFreqDes = null;
    this.MultiCommPri = null;
    this.MultiTeleFreqNums = null;
  }
  public static DataLinkMultiDutyVoiceCoord_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLinkMultiDutyVoiceCoord_Full.GetRootAsDataLinkMultiDutyVoiceCoord_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLinkMultiDutyVoiceCoord_Full.FinishDataLinkMultiDutyVoiceCoord_FullBuffer(fbb, DataLinkMultiDutyVoiceCoord_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLinkMultiDutyVoiceCoord_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*MultiVoiceNetDes*/, false)
      && verifier.VerifyString(tablePos, 6 /*MultiFreqDes*/, false)
      && verifier.VerifyString(tablePos, 8 /*MultiCommPri*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*MultiTeleFreqNums*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
