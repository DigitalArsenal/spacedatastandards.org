// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
public struct SensorPlan_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SensorPlan_Ingest GetRootAsSensorPlan_Ingest(ByteBuffer _bb) { return GetRootAsSensorPlan_Ingest(_bb, new SensorPlan_Ingest()); }
  public static SensorPlan_Ingest GetRootAsSensorPlan_Ingest(ByteBuffer _bb, SensorPlan_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SensorPlan_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensorPlan_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, SensorPlan_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SensorPlan_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORPLAN-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
  /// Example: /// Example: PLAN
  /// Constraints: Minimum length = 1, Maximum length = 12
  public string Type { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The type of records that comprise this parent set (COLLECT, CONTACT).
  /// Example: /// Example: COLLECT
  /// Constraints: Minimum length = 1, Maximum length = 12
  public string RecType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetRecTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetRecTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// The start time of the plan or schedule, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// The end time of the plan or schedule, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// Name associated with this plan or schedule.
  /// Example: /// Example: EXAMPLE NAME
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Name { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the requested/schedule/planned sensor associated with this request.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The purpose/description of this plan or schedule.
  /// Example: /// Example: Example purpose
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Purpose { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPurposeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPurposeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPurposeArray() { return __p.__vector_as_array<byte>(22); }
  /// The sensor or ground network associated with this plan or schedule.
  /// Example: /// Example: NETWORK
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string SenNetwork { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenNetworkBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSenNetworkBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSenNetworkArray() { return __p.__vector_as_array<byte>(24); }
  /// The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int ReqTotal { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The customer for this plan or schedule.
  /// Example: /// Example: CUSTOMER
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Customer { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomerBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCustomerBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCustomerArray() { return __p.__vector_as_array<byte>(28); }
  /// The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
  /// Example: /// Example: ACCEPTED
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Status { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(30); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(32); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(34); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(36); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(38); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SensorPlan_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(40); return o != 0 ? (SensorPlan_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SensorPlan_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(42); }
  /// The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CollectRequests(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CollectRequestsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SensorPlan_Ingest> CreateSensorPlan_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset recTypeOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset purposeOffset = default(StringOffset),
      StringOffset senNetworkOffset = default(StringOffset),
      int reqTotal = 0,
      StringOffset customerOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      SensorPlan_Ingest_dataMode_Enum dataMode = SensorPlan_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset),
      VectorOffset collectRequestsOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(22);
    SensorPlan_Ingest.AddTags(builder, tagsOffset);
    SensorPlan_Ingest.AddCollectRequests(builder, collectRequestsOffset);
    SensorPlan_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SensorPlan_Ingest.AddOrigin(builder, originOffset);
    SensorPlan_Ingest.AddSource(builder, sourceOffset);
    SensorPlan_Ingest.AddCreatedBy(builder, createdByOffset);
    SensorPlan_Ingest.AddCreatedAt(builder, createdAtOffset);
    SensorPlan_Ingest.AddStatus(builder, statusOffset);
    SensorPlan_Ingest.AddCustomer(builder, customerOffset);
    SensorPlan_Ingest.AddReqTotal(builder, reqTotal);
    SensorPlan_Ingest.AddSenNetwork(builder, senNetworkOffset);
    SensorPlan_Ingest.AddPurpose(builder, purposeOffset);
    SensorPlan_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    SensorPlan_Ingest.AddIdSensor(builder, idSensorOffset);
    SensorPlan_Ingest.AddName(builder, nameOffset);
    SensorPlan_Ingest.AddEndTime(builder, endTimeOffset);
    SensorPlan_Ingest.AddStartTime(builder, startTimeOffset);
    SensorPlan_Ingest.AddRecType(builder, recTypeOffset);
    SensorPlan_Ingest.AddType(builder, typeOffset);
    SensorPlan_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SensorPlan_Ingest.AddId(builder, idOffset);
    SensorPlan_Ingest.AddDataMode(builder, dataMode);
    return SensorPlan_Ingest.EndSensorPlan_Ingest(builder);
  }

  public static void StartSensorPlan_Ingest(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(2, typeOffset.Value, 0); }
  public static void AddRecType(FlatBufferBuilder builder, StringOffset recTypeOffset) { builder.AddOffset(3, recTypeOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(4, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(5, endTimeOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(6, nameOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(7, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(8, origSensorIdOffset.Value, 0); }
  public static void AddPurpose(FlatBufferBuilder builder, StringOffset purposeOffset) { builder.AddOffset(9, purposeOffset.Value, 0); }
  public static void AddSenNetwork(FlatBufferBuilder builder, StringOffset senNetworkOffset) { builder.AddOffset(10, senNetworkOffset.Value, 0); }
  public static void AddReqTotal(FlatBufferBuilder builder, int reqTotal) { builder.AddInt(11, reqTotal, 0); }
  public static void AddCustomer(FlatBufferBuilder builder, StringOffset customerOffset) { builder.AddOffset(12, customerOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(13, statusOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(14, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(15, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(16, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(17, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SensorPlan_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(18, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(19, origNetworkOffset.Value, 0); }
  public static void AddCollectRequests(FlatBufferBuilder builder, VectorOffset collectRequestsOffset) { builder.AddOffset(20, collectRequestsOffset.Value, 0); }
  public static VectorOffset CreateCollectRequestsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCollectRequestsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectRequestsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCollectRequestsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCollectRequestsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(21, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SensorPlan_Ingest> EndSensorPlan_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SensorPlan_Ingest>(o);
  }
  public static void FinishSensorPlan_IngestBuffer(FlatBufferBuilder builder, Offset<SensorPlan_Ingest> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensorPlan_IngestBuffer(FlatBufferBuilder builder, Offset<SensorPlan_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public SensorPlan_IngestT UnPack() {
    var _o = new SensorPlan_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SensorPlan_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.RecType = this.RecType;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.Name = this.Name;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Purpose = this.Purpose;
    _o.SenNetwork = this.SenNetwork;
    _o.ReqTotal = this.ReqTotal;
    _o.Customer = this.Customer;
    _o.Status = this.Status;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
    _o.CollectRequests = new List<string>();
    for (var _j = 0; _j < this.CollectRequestsLength; ++_j) {_o.CollectRequests.Add(this.CollectRequests(_j));}
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
  }
  public static Offset<SensorPlan_Ingest> Pack(FlatBufferBuilder builder, SensorPlan_IngestT _o) {
    if (_o == null) return default(Offset<SensorPlan_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _recType = _o.RecType == null ? default(StringOffset) : builder.CreateString(_o.RecType);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _purpose = _o.Purpose == null ? default(StringOffset) : builder.CreateString(_o.Purpose);
    var _senNetwork = _o.SenNetwork == null ? default(StringOffset) : builder.CreateString(_o.SenNetwork);
    var _customer = _o.Customer == null ? default(StringOffset) : builder.CreateString(_o.Customer);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _collectRequests = default(VectorOffset);
    if (_o.CollectRequests != null) {
      var __collectRequests = new StringOffset[_o.CollectRequests.Count];
      for (var _j = 0; _j < __collectRequests.Length; ++_j) { __collectRequests[_j] = builder.CreateString(_o.CollectRequests[_j]); }
      _collectRequests = CreateCollectRequestsVector(builder, __collectRequests);
    }
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateSensorPlan_Ingest(
      builder,
      _id,
      _classificationMarking,
      _type,
      _recType,
      _startTime,
      _endTime,
      _name,
      _idSensor,
      _origSensorId,
      _purpose,
      _senNetwork,
      _o.ReqTotal,
      _customer,
      _status,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork,
      _collectRequests,
      _tags);
  }
}

public class SensorPlan_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string RecType { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string Name { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string Purpose { get; set; }
  public string SenNetwork { get; set; }
  public int ReqTotal { get; set; }
  public string Customer { get; set; }
  public string Status { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public SensorPlan_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }
  public List<string> CollectRequests { get; set; }
  public List<string> Tags { get; set; }

  public SensorPlan_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.RecType = null;
    this.StartTime = null;
    this.EndTime = null;
    this.Name = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.Purpose = null;
    this.SenNetwork = null;
    this.ReqTotal = 0;
    this.Customer = null;
    this.Status = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = SensorPlan_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
    this.CollectRequests = null;
    this.Tags = null;
  }
  public static SensorPlan_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SensorPlan_Ingest.GetRootAsSensorPlan_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SensorPlan_Ingest.FinishSensorPlan_IngestBuffer(fbb, SensorPlan_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SensorPlan_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Type*/, false)
      && verifier.VerifyString(tablePos, 10 /*RecType*/, false)
      && verifier.VerifyString(tablePos, 12 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*Name*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 20 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 22 /*Purpose*/, false)
      && verifier.VerifyString(tablePos, 24 /*SenNetwork*/, false)
      && verifier.VerifyField(tablePos, 26 /*ReqTotal*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*Customer*/, false)
      && verifier.VerifyString(tablePos, 30 /*Status*/, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 36 /*Source*/, false)
      && verifier.VerifyString(tablePos, 38 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 40 /*DataMode*/, 1 /*SensorPlan_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*OrigNetwork*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*CollectRequests*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*Tags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
