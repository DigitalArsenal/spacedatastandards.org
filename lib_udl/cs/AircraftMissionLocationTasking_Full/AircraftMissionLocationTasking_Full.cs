// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of aircraft mission location information for this aircraft mission tasking.
public struct AircraftMissionLocationTasking_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionLocationTasking_Full GetRootAsAircraftMissionLocationTasking_Full(ByteBuffer _bb) { return GetRootAsAircraftMissionLocationTasking_Full(_bb, new AircraftMissionLocationTasking_Full()); }
  public static AircraftMissionLocationTasking_Full GetRootAsAircraftMissionLocationTasking_Full(ByteBuffer _bb, AircraftMissionLocationTasking_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftMissionLocationTasking_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftMissionLocationTasking_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftMissionLocationTasking_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftMissionLocationTasking_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The start time of this mission in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(4); }
  /// The end time of this mission in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(6); }
  /// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
  /// Example: /// Example: KLSV
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string MsnLocName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnLocNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMsnLocNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMsnLocNameArray() { return __p.__vector_as_array<byte>(8); }
  /// The altitude for this mission represented as hundreds of feet above MSL.
  /// Example: /// Example: 210
  /// Constraints: No constraints specified.
  public int Alt { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The code for the priority assigned to this mission.
  /// Example: /// Example: 1A
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string AirMsnPri { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAirMsnPriBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetAirMsnPriBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetAirMsnPriArray() { return __p.__vector_as_array<byte>(12); }
  /// The radius of the circle around the location being reported in feet.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  public int AreaGeoRad { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The location name for this mission.
  /// Example: /// Example: PT ALFA
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MsnLocPtName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnLocPtNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMsnLocPtNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMsnLocPtNameArray() { return __p.__vector_as_array<byte>(16); }
  /// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: 35.123
  /// Constraints: No constraints specified.
  public double MsnLocPtLat { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: 79.01
  /// Constraints: No constraints specified.
  public double MsnLocPtLon { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
  /// Example: /// Example: 330T-PT ALFA-50NM
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MsnLocPtBarT { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnLocPtBarTBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMsnLocPtBarTBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMsnLocPtBarTArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<AircraftMissionLocationTasking_Full> CreateAircraftMissionLocationTasking_Full(FlatBufferBuilder builder,
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset msnLocNameOffset = default(StringOffset),
      int alt = 0,
      StringOffset airMsnPriOffset = default(StringOffset),
      int areaGeoRad = 0,
      StringOffset msnLocPtNameOffset = default(StringOffset),
      double msnLocPtLat = 0.0,
      double msnLocPtLon = 0.0,
      StringOffset msnLocPtBarTOffset = default(StringOffset)) {
    builder.StartTable(10);
    AircraftMissionLocationTasking_Full.AddMsnLocPtLon(builder, msnLocPtLon);
    AircraftMissionLocationTasking_Full.AddMsnLocPtLat(builder, msnLocPtLat);
    AircraftMissionLocationTasking_Full.AddMsnLocPtBarT(builder, msnLocPtBarTOffset);
    AircraftMissionLocationTasking_Full.AddMsnLocPtName(builder, msnLocPtNameOffset);
    AircraftMissionLocationTasking_Full.AddAreaGeoRad(builder, areaGeoRad);
    AircraftMissionLocationTasking_Full.AddAirMsnPri(builder, airMsnPriOffset);
    AircraftMissionLocationTasking_Full.AddAlt(builder, alt);
    AircraftMissionLocationTasking_Full.AddMsnLocName(builder, msnLocNameOffset);
    AircraftMissionLocationTasking_Full.AddEndTime(builder, endTimeOffset);
    AircraftMissionLocationTasking_Full.AddStartTime(builder, startTimeOffset);
    return AircraftMissionLocationTasking_Full.EndAircraftMissionLocationTasking_Full(builder);
  }

  public static void StartAircraftMissionLocationTasking_Full(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(0, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(1, endTimeOffset.Value, 0); }
  public static void AddMsnLocName(FlatBufferBuilder builder, StringOffset msnLocNameOffset) { builder.AddOffset(2, msnLocNameOffset.Value, 0); }
  public static void AddAlt(FlatBufferBuilder builder, int alt) { builder.AddInt(3, alt, 0); }
  public static void AddAirMsnPri(FlatBufferBuilder builder, StringOffset airMsnPriOffset) { builder.AddOffset(4, airMsnPriOffset.Value, 0); }
  public static void AddAreaGeoRad(FlatBufferBuilder builder, int areaGeoRad) { builder.AddInt(5, areaGeoRad, 0); }
  public static void AddMsnLocPtName(FlatBufferBuilder builder, StringOffset msnLocPtNameOffset) { builder.AddOffset(6, msnLocPtNameOffset.Value, 0); }
  public static void AddMsnLocPtLat(FlatBufferBuilder builder, double msnLocPtLat) { builder.AddDouble(7, msnLocPtLat, 0.0); }
  public static void AddMsnLocPtLon(FlatBufferBuilder builder, double msnLocPtLon) { builder.AddDouble(8, msnLocPtLon, 0.0); }
  public static void AddMsnLocPtBarT(FlatBufferBuilder builder, StringOffset msnLocPtBarTOffset) { builder.AddOffset(9, msnLocPtBarTOffset.Value, 0); }
  public static Offset<AircraftMissionLocationTasking_Full> EndAircraftMissionLocationTasking_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftMissionLocationTasking_Full>(o);
  }
  public static void FinishAircraftMissionLocationTasking_FullBuffer(FlatBufferBuilder builder, Offset<AircraftMissionLocationTasking_Full> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftMissionLocationTasking_FullBuffer(FlatBufferBuilder builder, Offset<AircraftMissionLocationTasking_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftMissionLocationTasking_FullT UnPack() {
    var _o = new AircraftMissionLocationTasking_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftMissionLocationTasking_FullT _o) {
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.MsnLocName = this.MsnLocName;
    _o.Alt = this.Alt;
    _o.AirMsnPri = this.AirMsnPri;
    _o.AreaGeoRad = this.AreaGeoRad;
    _o.MsnLocPtName = this.MsnLocPtName;
    _o.MsnLocPtLat = this.MsnLocPtLat;
    _o.MsnLocPtLon = this.MsnLocPtLon;
    _o.MsnLocPtBarT = this.MsnLocPtBarT;
  }
  public static Offset<AircraftMissionLocationTasking_Full> Pack(FlatBufferBuilder builder, AircraftMissionLocationTasking_FullT _o) {
    if (_o == null) return default(Offset<AircraftMissionLocationTasking_Full>);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _msnLocName = _o.MsnLocName == null ? default(StringOffset) : builder.CreateString(_o.MsnLocName);
    var _airMsnPri = _o.AirMsnPri == null ? default(StringOffset) : builder.CreateString(_o.AirMsnPri);
    var _msnLocPtName = _o.MsnLocPtName == null ? default(StringOffset) : builder.CreateString(_o.MsnLocPtName);
    var _msnLocPtBarT = _o.MsnLocPtBarT == null ? default(StringOffset) : builder.CreateString(_o.MsnLocPtBarT);
    return CreateAircraftMissionLocationTasking_Full(
      builder,
      _startTime,
      _endTime,
      _msnLocName,
      _o.Alt,
      _airMsnPri,
      _o.AreaGeoRad,
      _msnLocPtName,
      _o.MsnLocPtLat,
      _o.MsnLocPtLon,
      _msnLocPtBarT);
  }
}

public class AircraftMissionLocationTasking_FullT
{
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string MsnLocName { get; set; }
  public int Alt { get; set; }
  public string AirMsnPri { get; set; }
  public int AreaGeoRad { get; set; }
  public string MsnLocPtName { get; set; }
  public double MsnLocPtLat { get; set; }
  public double MsnLocPtLon { get; set; }
  public string MsnLocPtBarT { get; set; }

  public AircraftMissionLocationTasking_FullT() {
    this.StartTime = null;
    this.EndTime = null;
    this.MsnLocName = null;
    this.Alt = 0;
    this.AirMsnPri = null;
    this.AreaGeoRad = 0;
    this.MsnLocPtName = null;
    this.MsnLocPtLat = 0.0;
    this.MsnLocPtLon = 0.0;
    this.MsnLocPtBarT = null;
  }
  public static AircraftMissionLocationTasking_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftMissionLocationTasking_Full.GetRootAsAircraftMissionLocationTasking_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftMissionLocationTasking_Full.FinishAircraftMissionLocationTasking_FullBuffer(fbb, AircraftMissionLocationTasking_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftMissionLocationTasking_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 6 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 8 /*MsnLocName*/, false)
      && verifier.VerifyField(tablePos, 10 /*Alt*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*AirMsnPri*/, false)
      && verifier.VerifyField(tablePos, 14 /*AreaGeoRad*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*MsnLocPtName*/, false)
      && verifier.VerifyField(tablePos, 18 /*MsnLocPtLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*MsnLocPtLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*MsnLocPtBarT*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
