// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Data defining any enemy intelligence reported by the requestor.
public struct EvacEnemyData_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacEnemyData_Full GetRootAsEvacEnemyData_Full(ByteBuffer _bb) { return GetRootAsEvacEnemyData_Full(_bb, new EvacEnemyData_Full()); }
  public static EvacEnemyData_Full GetRootAsEvacEnemyData_Full(ByteBuffer _bb, EvacEnemyData_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacEnemyData_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacEnemyData_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacEnemyData_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacEnemyData_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
  /// Example: /// Example: NORTH
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string DirToEnemy { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDirToEnemyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetDirToEnemyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDirToEnemyArray() { return __p.__vector_as_array<byte>(4); }
  /// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
  /// Example: /// Example: SMALL ARMS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string HostileFireType { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHostileFireTypeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHostileFireTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHostileFireTypeArray() { return __p.__vector_as_array<byte>(6); }
  /// Comments provided by friendlies about the evac zone.
  /// Example: /// Example: Comments from friendlies.
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string FriendliesRemarks { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFriendliesRemarksBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFriendliesRemarksBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFriendliesRemarksArray() { return __p.__vector_as_array<byte>(8); }
  /// Hot Landing Zone remarks.
  /// Example: /// Example: Remarks about hot landing zone.
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string HlzRemarks { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHlzRemarksBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetHlzRemarksBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetHlzRemarksArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<EvacEnemyData_Full> CreateEvacEnemyData_Full(FlatBufferBuilder builder,
      StringOffset dirToEnemyOffset = default(StringOffset),
      StringOffset hostileFireTypeOffset = default(StringOffset),
      StringOffset friendliesRemarksOffset = default(StringOffset),
      StringOffset hlzRemarksOffset = default(StringOffset)) {
    builder.StartTable(4);
    EvacEnemyData_Full.AddHlzRemarks(builder, hlzRemarksOffset);
    EvacEnemyData_Full.AddFriendliesRemarks(builder, friendliesRemarksOffset);
    EvacEnemyData_Full.AddHostileFireType(builder, hostileFireTypeOffset);
    EvacEnemyData_Full.AddDirToEnemy(builder, dirToEnemyOffset);
    return EvacEnemyData_Full.EndEvacEnemyData_Full(builder);
  }

  public static void StartEvacEnemyData_Full(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddDirToEnemy(FlatBufferBuilder builder, StringOffset dirToEnemyOffset) { builder.AddOffset(0, dirToEnemyOffset.Value, 0); }
  public static void AddHostileFireType(FlatBufferBuilder builder, StringOffset hostileFireTypeOffset) { builder.AddOffset(1, hostileFireTypeOffset.Value, 0); }
  public static void AddFriendliesRemarks(FlatBufferBuilder builder, StringOffset friendliesRemarksOffset) { builder.AddOffset(2, friendliesRemarksOffset.Value, 0); }
  public static void AddHlzRemarks(FlatBufferBuilder builder, StringOffset hlzRemarksOffset) { builder.AddOffset(3, hlzRemarksOffset.Value, 0); }
  public static Offset<EvacEnemyData_Full> EndEvacEnemyData_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacEnemyData_Full>(o);
  }
  public static void FinishEvacEnemyData_FullBuffer(FlatBufferBuilder builder, Offset<EvacEnemyData_Full> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacEnemyData_FullBuffer(FlatBufferBuilder builder, Offset<EvacEnemyData_Full> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacEnemyData_FullT UnPack() {
    var _o = new EvacEnemyData_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacEnemyData_FullT _o) {
    _o.DirToEnemy = this.DirToEnemy;
    _o.HostileFireType = this.HostileFireType;
    _o.FriendliesRemarks = this.FriendliesRemarks;
    _o.HlzRemarks = this.HlzRemarks;
  }
  public static Offset<EvacEnemyData_Full> Pack(FlatBufferBuilder builder, EvacEnemyData_FullT _o) {
    if (_o == null) return default(Offset<EvacEnemyData_Full>);
    var _dirToEnemy = _o.DirToEnemy == null ? default(StringOffset) : builder.CreateString(_o.DirToEnemy);
    var _hostileFireType = _o.HostileFireType == null ? default(StringOffset) : builder.CreateString(_o.HostileFireType);
    var _friendliesRemarks = _o.FriendliesRemarks == null ? default(StringOffset) : builder.CreateString(_o.FriendliesRemarks);
    var _hlzRemarks = _o.HlzRemarks == null ? default(StringOffset) : builder.CreateString(_o.HlzRemarks);
    return CreateEvacEnemyData_Full(
      builder,
      _dirToEnemy,
      _hostileFireType,
      _friendliesRemarks,
      _hlzRemarks);
  }
}

public class EvacEnemyData_FullT
{
  public string DirToEnemy { get; set; }
  public string HostileFireType { get; set; }
  public string FriendliesRemarks { get; set; }
  public string HlzRemarks { get; set; }

  public EvacEnemyData_FullT() {
    this.DirToEnemy = null;
    this.HostileFireType = null;
    this.FriendliesRemarks = null;
    this.HlzRemarks = null;
  }
  public static EvacEnemyData_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacEnemyData_Full.GetRootAsEvacEnemyData_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacEnemyData_Full.FinishEvacEnemyData_FullBuffer(fbb, EvacEnemyData_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacEnemyData_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*DirToEnemy*/, false)
      && verifier.VerifyString(tablePos, 6 /*HostileFireType*/, false)
      && verifier.VerifyString(tablePos, 8 /*FriendliesRemarks*/, false)
      && verifier.VerifyString(tablePos, 10 /*HlzRemarks*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
