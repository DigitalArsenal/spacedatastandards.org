// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
public struct SolarArrayDetails_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SolarArrayDetails_Ingest GetRootAsSolarArrayDetails_Ingest(ByteBuffer _bb) { return GetRootAsSolarArrayDetails_Ingest(_bb, new SolarArrayDetails_Ingest()); }
  public static SolarArrayDetails_Ingest GetRootAsSolarArrayDetails_Ingest(ByteBuffer _bb, SolarArrayDetails_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SolarArrayDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SOLA"); }
  public static bool VerifySolarArrayDetails_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SOLA", false, SolarArrayDetails_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SolarArrayDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SOLARARRAYDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique identifier of the parent SolarArray.
  /// Example: /// Example: SOLARARRAY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSolarArray { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSolarArrayBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdSolarArrayBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdSolarArrayArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Type of solar array (e.g. U Shaped).
  /// Example: /// Example: U Shaped
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Type { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// Solar array technology (e.g. Ga-As).
  /// Example: /// Example: Ga-As
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Technology { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTechnologyBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTechnologyBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTechnologyArray() { return __p.__vector_as_array<byte>(12); }
  /// Solar array junction technology (e.g. Triple).
  /// Example: /// Example: Triple
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string JunctionTechnology { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetJunctionTechnologyBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetJunctionTechnologyBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetJunctionTechnologyArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the organization that manufactures the solar array.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Solar Array span in meters.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Span { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Solar Array area in square meters.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double Area { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Solar array description/notes.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string Description { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(22); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(24); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(26); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(28); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(30); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(32); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SolarArrayDetails_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(34); return o != 0 ? (SolarArrayDetails_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SolarArrayDetails_Ingest_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SolarArrayDetails_Ingest> CreateSolarArrayDetails_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idSolarArrayOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset technologyOffset = default(StringOffset),
      StringOffset junctionTechnologyOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      double span = 0.0,
      double area = 0.0,
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      SolarArrayDetails_Ingest_dataMode_Enum dataMode = SolarArrayDetails_Ingest_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(17);
    SolarArrayDetails_Ingest.AddArea(builder, area);
    SolarArrayDetails_Ingest.AddSpan(builder, span);
    SolarArrayDetails_Ingest.AddTags(builder, tagsOffset);
    SolarArrayDetails_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    SolarArrayDetails_Ingest.AddOrigin(builder, originOffset);
    SolarArrayDetails_Ingest.AddSource(builder, sourceOffset);
    SolarArrayDetails_Ingest.AddCreatedBy(builder, createdByOffset);
    SolarArrayDetails_Ingest.AddCreatedAt(builder, createdAtOffset);
    SolarArrayDetails_Ingest.AddDescription(builder, descriptionOffset);
    SolarArrayDetails_Ingest.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SolarArrayDetails_Ingest.AddJunctionTechnology(builder, junctionTechnologyOffset);
    SolarArrayDetails_Ingest.AddTechnology(builder, technologyOffset);
    SolarArrayDetails_Ingest.AddType(builder, typeOffset);
    SolarArrayDetails_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    SolarArrayDetails_Ingest.AddIdSolarArray(builder, idSolarArrayOffset);
    SolarArrayDetails_Ingest.AddId(builder, idOffset);
    SolarArrayDetails_Ingest.AddDataMode(builder, dataMode);
    return SolarArrayDetails_Ingest.EndSolarArrayDetails_Ingest(builder);
  }

  public static void StartSolarArrayDetails_Ingest(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdSolarArray(FlatBufferBuilder builder, StringOffset idSolarArrayOffset) { builder.AddOffset(1, idSolarArrayOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(3, typeOffset.Value, 0); }
  public static void AddTechnology(FlatBufferBuilder builder, StringOffset technologyOffset) { builder.AddOffset(4, technologyOffset.Value, 0); }
  public static void AddJunctionTechnology(FlatBufferBuilder builder, StringOffset junctionTechnologyOffset) { builder.AddOffset(5, junctionTechnologyOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(6, manufacturerOrgIdOffset.Value, 0); }
  public static void AddSpan(FlatBufferBuilder builder, double span) { builder.AddDouble(7, span, 0.0); }
  public static void AddArea(FlatBufferBuilder builder, double area) { builder.AddDouble(8, area, 0.0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(9, descriptionOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(10, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(11, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(12, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(13, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(14, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SolarArrayDetails_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(15, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(16, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SolarArrayDetails_Ingest> EndSolarArrayDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SolarArrayDetails_Ingest>(o);
  }
  public static void FinishSolarArrayDetails_IngestBuffer(FlatBufferBuilder builder, Offset<SolarArrayDetails_Ingest> offset) { builder.Finish(offset.Value, "SOLA"); }
  public static void FinishSizePrefixedSolarArrayDetails_IngestBuffer(FlatBufferBuilder builder, Offset<SolarArrayDetails_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "SOLA"); }
  public SolarArrayDetails_IngestT UnPack() {
    var _o = new SolarArrayDetails_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SolarArrayDetails_IngestT _o) {
    _o.Id = this.Id;
    _o.IdSolarArray = this.IdSolarArray;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.Technology = this.Technology;
    _o.JunctionTechnology = this.JunctionTechnology;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.Span = this.Span;
    _o.Area = this.Area;
    _o.Description = this.Description;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
  }
  public static Offset<SolarArrayDetails_Ingest> Pack(FlatBufferBuilder builder, SolarArrayDetails_IngestT _o) {
    if (_o == null) return default(Offset<SolarArrayDetails_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idSolarArray = _o.IdSolarArray == null ? default(StringOffset) : builder.CreateString(_o.IdSolarArray);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _technology = _o.Technology == null ? default(StringOffset) : builder.CreateString(_o.Technology);
    var _junctionTechnology = _o.JunctionTechnology == null ? default(StringOffset) : builder.CreateString(_o.JunctionTechnology);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateSolarArrayDetails_Ingest(
      builder,
      _id,
      _idSolarArray,
      _classificationMarking,
      _type,
      _technology,
      _junctionTechnology,
      _manufacturerOrgId,
      _o.Span,
      _o.Area,
      _description,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _tags);
  }
}

public class SolarArrayDetails_IngestT
{
  public string Id { get; set; }
  public string IdSolarArray { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string Technology { get; set; }
  public string JunctionTechnology { get; set; }
  public string ManufacturerOrgId { get; set; }
  public double Span { get; set; }
  public double Area { get; set; }
  public string Description { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public SolarArrayDetails_Ingest_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }

  public SolarArrayDetails_IngestT() {
    this.Id = null;
    this.IdSolarArray = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.Technology = null;
    this.JunctionTechnology = null;
    this.ManufacturerOrgId = null;
    this.Span = 0.0;
    this.Area = 0.0;
    this.Description = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = SolarArrayDetails_Ingest_dataMode_Enum.REAL;
    this.Tags = null;
  }
  public static SolarArrayDetails_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return SolarArrayDetails_Ingest.GetRootAsSolarArrayDetails_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SolarArrayDetails_Ingest.FinishSolarArrayDetails_IngestBuffer(fbb, SolarArrayDetails_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SolarArrayDetails_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdSolarArray*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Type*/, false)
      && verifier.VerifyString(tablePos, 12 /*Technology*/, false)
      && verifier.VerifyString(tablePos, 14 /*JunctionTechnology*/, false)
      && verifier.VerifyString(tablePos, 16 /*ManufacturerOrgId*/, false)
      && verifier.VerifyField(tablePos, 18 /*Span*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Area*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 22 /*Description*/, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 26 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 28 /*Source*/, false)
      && verifier.VerifyString(tablePos, 30 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 32 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 34 /*DataMode*/, 1 /*SolarArrayDetails_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*Tags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
