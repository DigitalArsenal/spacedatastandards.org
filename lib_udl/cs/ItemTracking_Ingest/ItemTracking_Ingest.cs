// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// No description available.
public struct ItemTracking_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ItemTracking_Ingest GetRootAsItemTracking_Ingest(ByteBuffer _bb) { return GetRootAsItemTracking_Ingest(_bb, new ItemTracking_Ingest()); }
  public static ItemTracking_Ingest GetRootAsItemTracking_Ingest(ByteBuffer _bb, ItemTracking_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ItemTracking_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ITEM"); }
  public static bool VerifyItemTracking_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ITEM", false, ItemTracking_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemTracking_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
  /// Example: /// Example: ABC1234
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string ScanCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScanCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetScanCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetScanCodeArray() { return __p.__vector_as_array<byte>(8); }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ScGenTool { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScGenToolBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetScGenToolBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetScGenToolArray() { return __p.__vector_as_array<byte>(10); }
  /// The ID of the scanner or input device.
  /// Example: /// Example: 2051M
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string ScannerId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScannerIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetScannerIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetScannerIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-21T14:22:00.123Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(14); }
  /// The UDL ID of the item this record is associated with.
  /// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdItem { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdItemBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdItemBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdItemArray() { return __p.__vector_as_array<byte>(16); }
  /// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Type { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(18); }
  /// WGS84 latitude where the item was scanned, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS84 longitude where the item was scanned, in degrees.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
  /// Example: /// Example: TRANSIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ScanType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScanTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetScanTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetScanTypeArray() { return __p.__vector_as_array<byte>(24); }
  /// The United States distinguished visitor code of the person scanned, only applicable to people.
  /// Example: /// Example: DV-4
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string DvCode { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDvCodeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetDvCodeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetDvCodeArray() { return __p.__vector_as_array<byte>(26); }
  /// Optional notes or comments about the tracking data.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(28); }
  /// Array of keys that may be associated with this tracked item.
  /// Example: /// Example: ['tapeColor', 'hazmat']
  /// Constraints: No constraints specified.
  public string Keys(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int KeysLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['yellow', 'false']
  /// Constraints: No constraints specified.
  public string Values(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ValuesLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(34); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(36); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(38); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(40); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(42); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(44); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public ItemTracking_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(46); return o != 0 ? (ItemTracking_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : ItemTracking_Ingest_dataMode_Enum.REAL; } }

  public static Offset<ItemTracking_Ingest> CreateItemTracking_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset scanCodeOffset = default(StringOffset),
      StringOffset scGenToolOffset = default(StringOffset),
      StringOffset scannerIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      StringOffset idItemOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      StringOffset scanTypeOffset = default(StringOffset),
      StringOffset dvCodeOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      VectorOffset keysOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      ItemTracking_Ingest_dataMode_Enum dataMode = ItemTracking_Ingest_dataMode_Enum.REAL) {
    builder.StartTable(22);
    ItemTracking_Ingest.AddLon(builder, lon);
    ItemTracking_Ingest.AddLat(builder, lat);
    ItemTracking_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    ItemTracking_Ingest.AddOrigin(builder, originOffset);
    ItemTracking_Ingest.AddSource(builder, sourceOffset);
    ItemTracking_Ingest.AddSourceDL(builder, sourceDLOffset);
    ItemTracking_Ingest.AddCreatedBy(builder, createdByOffset);
    ItemTracking_Ingest.AddCreatedAt(builder, createdAtOffset);
    ItemTracking_Ingest.AddValues(builder, valuesOffset);
    ItemTracking_Ingest.AddKeys(builder, keysOffset);
    ItemTracking_Ingest.AddNotes(builder, notesOffset);
    ItemTracking_Ingest.AddDvCode(builder, dvCodeOffset);
    ItemTracking_Ingest.AddScanType(builder, scanTypeOffset);
    ItemTracking_Ingest.AddType(builder, typeOffset);
    ItemTracking_Ingest.AddIdItem(builder, idItemOffset);
    ItemTracking_Ingest.AddTs(builder, tsOffset);
    ItemTracking_Ingest.AddScannerId(builder, scannerIdOffset);
    ItemTracking_Ingest.AddScGenTool(builder, scGenToolOffset);
    ItemTracking_Ingest.AddScanCode(builder, scanCodeOffset);
    ItemTracking_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    ItemTracking_Ingest.AddId(builder, idOffset);
    ItemTracking_Ingest.AddDataMode(builder, dataMode);
    return ItemTracking_Ingest.EndItemTracking_Ingest(builder);
  }

  public static void StartItemTracking_Ingest(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddScanCode(FlatBufferBuilder builder, StringOffset scanCodeOffset) { builder.AddOffset(2, scanCodeOffset.Value, 0); }
  public static void AddScGenTool(FlatBufferBuilder builder, StringOffset scGenToolOffset) { builder.AddOffset(3, scGenToolOffset.Value, 0); }
  public static void AddScannerId(FlatBufferBuilder builder, StringOffset scannerIdOffset) { builder.AddOffset(4, scannerIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(5, tsOffset.Value, 0); }
  public static void AddIdItem(FlatBufferBuilder builder, StringOffset idItemOffset) { builder.AddOffset(6, idItemOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(7, typeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(8, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(9, lon, 0.0); }
  public static void AddScanType(FlatBufferBuilder builder, StringOffset scanTypeOffset) { builder.AddOffset(10, scanTypeOffset.Value, 0); }
  public static void AddDvCode(FlatBufferBuilder builder, StringOffset dvCodeOffset) { builder.AddOffset(11, dvCodeOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(12, notesOffset.Value, 0); }
  public static void AddKeys(FlatBufferBuilder builder, VectorOffset keysOffset) { builder.AddOffset(13, keysOffset.Value, 0); }
  public static VectorOffset CreateKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(14, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(15, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(16, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(17, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(18, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(19, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(20, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, ItemTracking_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(21, (sbyte)dataMode, 0); }
  public static Offset<ItemTracking_Ingest> EndItemTracking_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ItemTracking_Ingest>(o);
  }
  public static void FinishItemTracking_IngestBuffer(FlatBufferBuilder builder, Offset<ItemTracking_Ingest> offset) { builder.Finish(offset.Value, "ITEM"); }
  public static void FinishSizePrefixedItemTracking_IngestBuffer(FlatBufferBuilder builder, Offset<ItemTracking_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "ITEM"); }
  public ItemTracking_IngestT UnPack() {
    var _o = new ItemTracking_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemTracking_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ScanCode = this.ScanCode;
    _o.ScGenTool = this.ScGenTool;
    _o.ScannerId = this.ScannerId;
    _o.Ts = this.Ts;
    _o.IdItem = this.IdItem;
    _o.Type = this.Type;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.ScanType = this.ScanType;
    _o.DvCode = this.DvCode;
    _o.Notes = this.Notes;
    _o.Keys = new List<string>();
    for (var _j = 0; _j < this.KeysLength; ++_j) {_o.Keys.Add(this.Keys(_j));}
    _o.Values = new List<string>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<ItemTracking_Ingest> Pack(FlatBufferBuilder builder, ItemTracking_IngestT _o) {
    if (_o == null) return default(Offset<ItemTracking_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _scanCode = _o.ScanCode == null ? default(StringOffset) : builder.CreateString(_o.ScanCode);
    var _scGenTool = _o.ScGenTool == null ? default(StringOffset) : builder.CreateString(_o.ScGenTool);
    var _scannerId = _o.ScannerId == null ? default(StringOffset) : builder.CreateString(_o.ScannerId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _idItem = _o.IdItem == null ? default(StringOffset) : builder.CreateString(_o.IdItem);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _scanType = _o.ScanType == null ? default(StringOffset) : builder.CreateString(_o.ScanType);
    var _dvCode = _o.DvCode == null ? default(StringOffset) : builder.CreateString(_o.DvCode);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _keys = default(VectorOffset);
    if (_o.Keys != null) {
      var __keys = new StringOffset[_o.Keys.Count];
      for (var _j = 0; _j < __keys.Length; ++_j) { __keys[_j] = builder.CreateString(_o.Keys[_j]); }
      _keys = CreateKeysVector(builder, __keys);
    }
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = new StringOffset[_o.Values.Count];
      for (var _j = 0; _j < __values.Length; ++_j) { __values[_j] = builder.CreateString(_o.Values[_j]); }
      _values = CreateValuesVector(builder, __values);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateItemTracking_Ingest(
      builder,
      _id,
      _classificationMarking,
      _scanCode,
      _scGenTool,
      _scannerId,
      _ts,
      _idItem,
      _type,
      _o.Lat,
      _o.Lon,
      _scanType,
      _dvCode,
      _notes,
      _keys,
      _values,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class ItemTracking_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ScanCode { get; set; }
  public string ScGenTool { get; set; }
  public string ScannerId { get; set; }
  public string Ts { get; set; }
  public string IdItem { get; set; }
  public string Type { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string ScanType { get; set; }
  public string DvCode { get; set; }
  public string Notes { get; set; }
  public List<string> Keys { get; set; }
  public List<string> Values { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public ItemTracking_Ingest_dataMode_Enum DataMode { get; set; }

  public ItemTracking_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ScanCode = null;
    this.ScGenTool = null;
    this.ScannerId = null;
    this.Ts = null;
    this.IdItem = null;
    this.Type = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.ScanType = null;
    this.DvCode = null;
    this.Notes = null;
    this.Keys = null;
    this.Values = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = ItemTracking_Ingest_dataMode_Enum.REAL;
  }
  public static ItemTracking_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return ItemTracking_Ingest.GetRootAsItemTracking_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    ItemTracking_Ingest.FinishItemTracking_IngestBuffer(fbb, ItemTracking_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class ItemTracking_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ScanCode*/, false)
      && verifier.VerifyString(tablePos, 10 /*ScGenTool*/, false)
      && verifier.VerifyString(tablePos, 12 /*ScannerId*/, false)
      && verifier.VerifyString(tablePos, 14 /*Ts*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdItem*/, false)
      && verifier.VerifyString(tablePos, 18 /*Type*/, false)
      && verifier.VerifyField(tablePos, 20 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 24 /*ScanType*/, false)
      && verifier.VerifyString(tablePos, 26 /*DvCode*/, false)
      && verifier.VerifyString(tablePos, 28 /*Notes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Keys*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*Values*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 36 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 38 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 40 /*Source*/, false)
      && verifier.VerifyString(tablePos, 42 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 44 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 46 /*DataMode*/, 1 /*ItemTracking_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
