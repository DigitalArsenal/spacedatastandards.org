// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Crew Services.
public struct Crew_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Crew_Full GetRootAsCrew_Full(ByteBuffer _bb) { return GetRootAsCrew_Full(_bb, new Crew_Full()); }
  public static Crew_Full GetRootAsCrew_Full(ByteBuffer _bb, Crew_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Crew_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "CREW"); }
  public static bool VerifyCrew_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("CREW", false, Crew_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Crew_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: JHJDHjhuu929o92
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string OrigCrewId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigCrewIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOrigCrewIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOrigCrewIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Name of the formed crew.
  /// Example: /// Example: falcon
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string CrewName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCrewNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCrewNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCrewNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Crew Status (e.g. APPROVED, PENDING).
  /// Example: /// Example: APPROVED
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Status { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the Aircraft Sortie associated with this crew record.
  /// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSortie { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSortieBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSortieBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSortieArray() { return __p.__vector_as_array<byte>(14); }
  /// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LegalAlertTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLegalAlertTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLegalAlertTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLegalAlertTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string LegalBravoTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLegalBravoTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLegalBravoTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLegalBravoTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string AlertedTime { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlertedTimeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetAlertedTimeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetAlertedTimeArray() { return __p.__vector_as_array<byte>(20); }
  /// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ReturnTime { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReturnTimeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetReturnTimeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetReturnTimeArray() { return __p.__vector_as_array<byte>(22); }
  /// Crew Flight Duty Period (FDP) eligibility type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string FdpEligType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFdpEligTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFdpEligTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFdpEligTypeArray() { return __p.__vector_as_array<byte>(24); }
  /// Flight Duty Period (FDP) type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string FdpType { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFdpTypeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetFdpTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetFdpTypeArray() { return __p.__vector_as_array<byte>(26); }
  /// Crew type.
  /// Example: /// Example: AIRLAND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CrewType { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCrewTypeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCrewTypeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCrewTypeArray() { return __p.__vector_as_array<byte>(28); }
  /// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
  /// Example: /// Example: 00016ALSQ
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ArmsCrewUnit { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArmsCrewUnitBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetArmsCrewUnitBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetArmsCrewUnitArray() { return __p.__vector_as_array<byte>(30); }
  /// CrewMembers Collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CrewMembers(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CrewMembersLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(34); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(36); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(38); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(40); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(42); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(44); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(46); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Crew_Full_dataMode_Enum DataMode { get { int o = __p.__offset(48); return o != 0 ? (Crew_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Crew_Full_dataMode_Enum.REAL; } }

  public static Offset<Crew_Full> CreateCrew_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset origCrewIdOffset = default(StringOffset),
      StringOffset crewNameOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset idSortieOffset = default(StringOffset),
      StringOffset legalAlertTimeOffset = default(StringOffset),
      StringOffset legalBravoTimeOffset = default(StringOffset),
      StringOffset alertedTimeOffset = default(StringOffset),
      StringOffset returnTimeOffset = default(StringOffset),
      StringOffset fdpEligTypeOffset = default(StringOffset),
      StringOffset fdpTypeOffset = default(StringOffset),
      StringOffset crewTypeOffset = default(StringOffset),
      StringOffset armsCrewUnitOffset = default(StringOffset),
      VectorOffset crewMembersOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Crew_Full_dataMode_Enum dataMode = Crew_Full_dataMode_Enum.REAL) {
    builder.StartTable(23);
    Crew_Full.AddOrigNetwork(builder, origNetworkOffset);
    Crew_Full.AddOrigin(builder, originOffset);
    Crew_Full.AddSource(builder, sourceOffset);
    Crew_Full.AddUpdatedBy(builder, updatedByOffset);
    Crew_Full.AddUpdatedAt(builder, updatedAtOffset);
    Crew_Full.AddCreatedBy(builder, createdByOffset);
    Crew_Full.AddCreatedAt(builder, createdAtOffset);
    Crew_Full.AddCrewMembers(builder, crewMembersOffset);
    Crew_Full.AddArmsCrewUnit(builder, armsCrewUnitOffset);
    Crew_Full.AddCrewType(builder, crewTypeOffset);
    Crew_Full.AddFdpType(builder, fdpTypeOffset);
    Crew_Full.AddFdpEligType(builder, fdpEligTypeOffset);
    Crew_Full.AddReturnTime(builder, returnTimeOffset);
    Crew_Full.AddAlertedTime(builder, alertedTimeOffset);
    Crew_Full.AddLegalBravoTime(builder, legalBravoTimeOffset);
    Crew_Full.AddLegalAlertTime(builder, legalAlertTimeOffset);
    Crew_Full.AddIdSortie(builder, idSortieOffset);
    Crew_Full.AddStatus(builder, statusOffset);
    Crew_Full.AddCrewName(builder, crewNameOffset);
    Crew_Full.AddOrigCrewId(builder, origCrewIdOffset);
    Crew_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Crew_Full.AddId(builder, idOffset);
    Crew_Full.AddDataMode(builder, dataMode);
    return Crew_Full.EndCrew_Full(builder);
  }

  public static void StartCrew_Full(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOrigCrewId(FlatBufferBuilder builder, StringOffset origCrewIdOffset) { builder.AddOffset(2, origCrewIdOffset.Value, 0); }
  public static void AddCrewName(FlatBufferBuilder builder, StringOffset crewNameOffset) { builder.AddOffset(3, crewNameOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(4, statusOffset.Value, 0); }
  public static void AddIdSortie(FlatBufferBuilder builder, StringOffset idSortieOffset) { builder.AddOffset(5, idSortieOffset.Value, 0); }
  public static void AddLegalAlertTime(FlatBufferBuilder builder, StringOffset legalAlertTimeOffset) { builder.AddOffset(6, legalAlertTimeOffset.Value, 0); }
  public static void AddLegalBravoTime(FlatBufferBuilder builder, StringOffset legalBravoTimeOffset) { builder.AddOffset(7, legalBravoTimeOffset.Value, 0); }
  public static void AddAlertedTime(FlatBufferBuilder builder, StringOffset alertedTimeOffset) { builder.AddOffset(8, alertedTimeOffset.Value, 0); }
  public static void AddReturnTime(FlatBufferBuilder builder, StringOffset returnTimeOffset) { builder.AddOffset(9, returnTimeOffset.Value, 0); }
  public static void AddFdpEligType(FlatBufferBuilder builder, StringOffset fdpEligTypeOffset) { builder.AddOffset(10, fdpEligTypeOffset.Value, 0); }
  public static void AddFdpType(FlatBufferBuilder builder, StringOffset fdpTypeOffset) { builder.AddOffset(11, fdpTypeOffset.Value, 0); }
  public static void AddCrewType(FlatBufferBuilder builder, StringOffset crewTypeOffset) { builder.AddOffset(12, crewTypeOffset.Value, 0); }
  public static void AddArmsCrewUnit(FlatBufferBuilder builder, StringOffset armsCrewUnitOffset) { builder.AddOffset(13, armsCrewUnitOffset.Value, 0); }
  public static void AddCrewMembers(FlatBufferBuilder builder, VectorOffset crewMembersOffset) { builder.AddOffset(14, crewMembersOffset.Value, 0); }
  public static VectorOffset CreateCrewMembersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCrewMembersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCrewMembersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCrewMembersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCrewMembersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(15, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(16, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(17, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(18, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(19, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(20, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(21, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Crew_Full_dataMode_Enum dataMode) { builder.AddSbyte(22, (sbyte)dataMode, 0); }
  public static Offset<Crew_Full> EndCrew_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Crew_Full>(o);
  }
  public static void FinishCrew_FullBuffer(FlatBufferBuilder builder, Offset<Crew_Full> offset) { builder.Finish(offset.Value, "CREW"); }
  public static void FinishSizePrefixedCrew_FullBuffer(FlatBufferBuilder builder, Offset<Crew_Full> offset) { builder.FinishSizePrefixed(offset.Value, "CREW"); }
  public Crew_FullT UnPack() {
    var _o = new Crew_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Crew_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrigCrewId = this.OrigCrewId;
    _o.CrewName = this.CrewName;
    _o.Status = this.Status;
    _o.IdSortie = this.IdSortie;
    _o.LegalAlertTime = this.LegalAlertTime;
    _o.LegalBravoTime = this.LegalBravoTime;
    _o.AlertedTime = this.AlertedTime;
    _o.ReturnTime = this.ReturnTime;
    _o.FdpEligType = this.FdpEligType;
    _o.FdpType = this.FdpType;
    _o.CrewType = this.CrewType;
    _o.ArmsCrewUnit = this.ArmsCrewUnit;
    _o.CrewMembers = new List<string>();
    for (var _j = 0; _j < this.CrewMembersLength; ++_j) {_o.CrewMembers.Add(this.CrewMembers(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Crew_Full> Pack(FlatBufferBuilder builder, Crew_FullT _o) {
    if (_o == null) return default(Offset<Crew_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _origCrewId = _o.OrigCrewId == null ? default(StringOffset) : builder.CreateString(_o.OrigCrewId);
    var _crewName = _o.CrewName == null ? default(StringOffset) : builder.CreateString(_o.CrewName);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _idSortie = _o.IdSortie == null ? default(StringOffset) : builder.CreateString(_o.IdSortie);
    var _legalAlertTime = _o.LegalAlertTime == null ? default(StringOffset) : builder.CreateString(_o.LegalAlertTime);
    var _legalBravoTime = _o.LegalBravoTime == null ? default(StringOffset) : builder.CreateString(_o.LegalBravoTime);
    var _alertedTime = _o.AlertedTime == null ? default(StringOffset) : builder.CreateString(_o.AlertedTime);
    var _returnTime = _o.ReturnTime == null ? default(StringOffset) : builder.CreateString(_o.ReturnTime);
    var _fdpEligType = _o.FdpEligType == null ? default(StringOffset) : builder.CreateString(_o.FdpEligType);
    var _fdpType = _o.FdpType == null ? default(StringOffset) : builder.CreateString(_o.FdpType);
    var _crewType = _o.CrewType == null ? default(StringOffset) : builder.CreateString(_o.CrewType);
    var _armsCrewUnit = _o.ArmsCrewUnit == null ? default(StringOffset) : builder.CreateString(_o.ArmsCrewUnit);
    var _crewMembers = default(VectorOffset);
    if (_o.CrewMembers != null) {
      var __crewMembers = new StringOffset[_o.CrewMembers.Count];
      for (var _j = 0; _j < __crewMembers.Length; ++_j) { __crewMembers[_j] = builder.CreateString(_o.CrewMembers[_j]); }
      _crewMembers = CreateCrewMembersVector(builder, __crewMembers);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateCrew_Full(
      builder,
      _id,
      _classificationMarking,
      _origCrewId,
      _crewName,
      _status,
      _idSortie,
      _legalAlertTime,
      _legalBravoTime,
      _alertedTime,
      _returnTime,
      _fdpEligType,
      _fdpType,
      _crewType,
      _armsCrewUnit,
      _crewMembers,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Crew_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrigCrewId { get; set; }
  public string CrewName { get; set; }
  public string Status { get; set; }
  public string IdSortie { get; set; }
  public string LegalAlertTime { get; set; }
  public string LegalBravoTime { get; set; }
  public string AlertedTime { get; set; }
  public string ReturnTime { get; set; }
  public string FdpEligType { get; set; }
  public string FdpType { get; set; }
  public string CrewType { get; set; }
  public string ArmsCrewUnit { get; set; }
  public List<string> CrewMembers { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Crew_Full_dataMode_Enum DataMode { get; set; }

  public Crew_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.OrigCrewId = null;
    this.CrewName = null;
    this.Status = null;
    this.IdSortie = null;
    this.LegalAlertTime = null;
    this.LegalBravoTime = null;
    this.AlertedTime = null;
    this.ReturnTime = null;
    this.FdpEligType = null;
    this.FdpType = null;
    this.CrewType = null;
    this.ArmsCrewUnit = null;
    this.CrewMembers = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Crew_Full_dataMode_Enum.REAL;
  }
  public static Crew_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Crew_Full.GetRootAsCrew_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Crew_Full.FinishCrew_FullBuffer(fbb, Crew_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Crew_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OrigCrewId*/, false)
      && verifier.VerifyString(tablePos, 10 /*CrewName*/, false)
      && verifier.VerifyString(tablePos, 12 /*Status*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSortie*/, false)
      && verifier.VerifyString(tablePos, 16 /*LegalAlertTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*LegalBravoTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*AlertedTime*/, false)
      && verifier.VerifyString(tablePos, 22 /*ReturnTime*/, false)
      && verifier.VerifyString(tablePos, 24 /*FdpEligType*/, false)
      && verifier.VerifyString(tablePos, 26 /*FdpType*/, false)
      && verifier.VerifyString(tablePos, 28 /*CrewType*/, false)
      && verifier.VerifyString(tablePos, 30 /*ArmsCrewUnit*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*CrewMembers*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 36 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 38 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 40 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 42 /*Source*/, false)
      && verifier.VerifyString(tablePos, 44 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 46 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 48 /*DataMode*/, 1 /*Crew_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
