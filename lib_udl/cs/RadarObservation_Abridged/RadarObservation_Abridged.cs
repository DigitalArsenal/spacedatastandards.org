// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
public struct RadarObservation_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RadarObservation_Abridged GetRootAsRadarObservation_Abridged(ByteBuffer _bb) { return GetRootAsRadarObservation_Abridged(_bb, new RadarObservation_Abridged()); }
  public static RadarObservation_Abridged GetRootAsRadarObservation_Abridged(ByteBuffer _bb, RadarObservation_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RadarObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RADA"); }
  public static bool VerifyRadarObservation_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RADA", false, RadarObservation_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RadarObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RADAROBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(12); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ObPosition { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObPositionBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetObPositionBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetObPositionArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Azimuth { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double AzimuthUnc { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double AzimuthBias { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double AzimuthRate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Elevation { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double ElevationUnc { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double ElevationBias { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double ElevationRate { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target range in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Range { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Range accelaration in km/s2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double RangeAccel { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RangeAccelUnc { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the range measurement, in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RangeUnc { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor range bias in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RangeBias { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight range in km/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RangeRate { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the range rate measurement, in kilometers/second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double RangeRateUnc { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Corrected doppler measurement in meters per second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Doppler { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double DopplerUnc { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Declination { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// X position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double X { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Y position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Y { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Z position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  public double Z { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// X velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Xvel { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Y velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double Yvel { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Z velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double Zvel { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Senx { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 40.23
  /// Constraints: No constraints specified.
  public double Seny { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 35.23
  /// Constraints: No constraints specified.
  public double Senz { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  public double Rcs { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double RcsUnc { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double OrthogonalRcs { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double OrthogonalRcsUnc { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double Snr { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ID of the beam that produced this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Beam { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double TimingBias { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: rawFileURI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(100); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(102); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RadarObservation_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(106); return o != 0 ? (RadarObservation_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RadarObservation_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(108); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(110); }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public RadarObservation_Abridged_senReferenceFrame_Enum SenReferenceFrame { get { int o = __p.__offset(112); return o != 0 ? (RadarObservation_Abridged_senReferenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RadarObservation_Abridged_senReferenceFrame_Enum.J2000; } }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(114); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(116); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(118); }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  public string Type { get { int o = __p.__offset(120); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(120, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(120); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(120); }

  public static Offset<RadarObservation_Abridged> CreateRadarObservation_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      int satNo = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset obPositionOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      bool uct = false,
      double azimuth = 0.0,
      double azimuthUnc = 0.0,
      double azimuthBias = 0.0,
      double azimuthRate = 0.0,
      double elevation = 0.0,
      double elevationUnc = 0.0,
      double elevationBias = 0.0,
      double elevationRate = 0.0,
      double range = 0.0,
      double rangeAccel = 0.0,
      double rangeAccelUnc = 0.0,
      double rangeUnc = 0.0,
      double rangeBias = 0.0,
      double rangeRate = 0.0,
      double rangeRateUnc = 0.0,
      double doppler = 0.0,
      double dopplerUnc = 0.0,
      double ra = 0.0,
      double declination = 0.0,
      double x = 0.0,
      double y = 0.0,
      double z = 0.0,
      double xvel = 0.0,
      double yvel = 0.0,
      double zvel = 0.0,
      double senx = 0.0,
      double seny = 0.0,
      double senz = 0.0,
      double rcs = 0.0,
      double rcsUnc = 0.0,
      double orthogonalRcs = 0.0,
      double orthogonalRcsUnc = 0.0,
      double snr = 0.0,
      double beam = 0.0,
      double timingBias = 0.0,
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      RadarObservation_Abridged_dataMode_Enum dataMode = RadarObservation_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      RadarObservation_Abridged_senReferenceFrame_Enum senReferenceFrame = RadarObservation_Abridged_senReferenceFrame_Enum.J2000,
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset)) {
    builder.StartTable(59);
    RadarObservation_Abridged.AddTimingBias(builder, timingBias);
    RadarObservation_Abridged.AddBeam(builder, beam);
    RadarObservation_Abridged.AddSnr(builder, snr);
    RadarObservation_Abridged.AddOrthogonalRcsUnc(builder, orthogonalRcsUnc);
    RadarObservation_Abridged.AddOrthogonalRcs(builder, orthogonalRcs);
    RadarObservation_Abridged.AddRcsUnc(builder, rcsUnc);
    RadarObservation_Abridged.AddRcs(builder, rcs);
    RadarObservation_Abridged.AddSenz(builder, senz);
    RadarObservation_Abridged.AddSeny(builder, seny);
    RadarObservation_Abridged.AddSenx(builder, senx);
    RadarObservation_Abridged.AddZvel(builder, zvel);
    RadarObservation_Abridged.AddYvel(builder, yvel);
    RadarObservation_Abridged.AddXvel(builder, xvel);
    RadarObservation_Abridged.AddZ(builder, z);
    RadarObservation_Abridged.AddY(builder, y);
    RadarObservation_Abridged.AddX(builder, x);
    RadarObservation_Abridged.AddDeclination(builder, declination);
    RadarObservation_Abridged.AddRa(builder, ra);
    RadarObservation_Abridged.AddDopplerUnc(builder, dopplerUnc);
    RadarObservation_Abridged.AddDoppler(builder, doppler);
    RadarObservation_Abridged.AddRangeRateUnc(builder, rangeRateUnc);
    RadarObservation_Abridged.AddRangeRate(builder, rangeRate);
    RadarObservation_Abridged.AddRangeBias(builder, rangeBias);
    RadarObservation_Abridged.AddRangeUnc(builder, rangeUnc);
    RadarObservation_Abridged.AddRangeAccelUnc(builder, rangeAccelUnc);
    RadarObservation_Abridged.AddRangeAccel(builder, rangeAccel);
    RadarObservation_Abridged.AddRange(builder, range);
    RadarObservation_Abridged.AddElevationRate(builder, elevationRate);
    RadarObservation_Abridged.AddElevationBias(builder, elevationBias);
    RadarObservation_Abridged.AddElevationUnc(builder, elevationUnc);
    RadarObservation_Abridged.AddElevation(builder, elevation);
    RadarObservation_Abridged.AddAzimuthRate(builder, azimuthRate);
    RadarObservation_Abridged.AddAzimuthBias(builder, azimuthBias);
    RadarObservation_Abridged.AddAzimuthUnc(builder, azimuthUnc);
    RadarObservation_Abridged.AddAzimuth(builder, azimuth);
    RadarObservation_Abridged.AddType(builder, typeOffset);
    RadarObservation_Abridged.AddSourceDL(builder, sourceDLOffset);
    RadarObservation_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    RadarObservation_Abridged.AddDescriptor(builder, descriptorOffset);
    RadarObservation_Abridged.AddCreatedBy(builder, createdByOffset);
    RadarObservation_Abridged.AddCreatedAt(builder, createdAtOffset);
    RadarObservation_Abridged.AddOrigin(builder, originOffset);
    RadarObservation_Abridged.AddSource(builder, sourceOffset);
    RadarObservation_Abridged.AddRawFileURI(builder, rawFileURIOffset);
    RadarObservation_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    RadarObservation_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    RadarObservation_Abridged.AddObPosition(builder, obPositionOffset);
    RadarObservation_Abridged.AddTrackId(builder, trackIdOffset);
    RadarObservation_Abridged.AddTransactionId(builder, transactionIdOffset);
    RadarObservation_Abridged.AddTaskId(builder, taskIdOffset);
    RadarObservation_Abridged.AddSatNo(builder, satNo);
    RadarObservation_Abridged.AddIdSensor(builder, idSensorOffset);
    RadarObservation_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    RadarObservation_Abridged.AddObTime(builder, obTimeOffset);
    RadarObservation_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    RadarObservation_Abridged.AddId(builder, idOffset);
    RadarObservation_Abridged.AddSenReferenceFrame(builder, senReferenceFrame);
    RadarObservation_Abridged.AddDataMode(builder, dataMode);
    RadarObservation_Abridged.AddUct(builder, uct);
    return RadarObservation_Abridged.EndRadarObservation_Abridged(builder);
  }

  public static void StartRadarObservation_Abridged(FlatBufferBuilder builder) { builder.StartTable(59); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(4, idSensorOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(5, satNo, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(6, taskIdOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(7, transactionIdOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(8, trackIdOffset.Value, 0); }
  public static void AddObPosition(FlatBufferBuilder builder, StringOffset obPositionOffset) { builder.AddOffset(9, obPositionOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(10, origObjectIdOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(11, origSensorIdOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(12, uct, false); }
  public static void AddAzimuth(FlatBufferBuilder builder, double azimuth) { builder.AddDouble(13, azimuth, 0.0); }
  public static void AddAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.AddDouble(14, azimuthUnc, 0.0); }
  public static void AddAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.AddDouble(15, azimuthBias, 0.0); }
  public static void AddAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.AddDouble(16, azimuthRate, 0.0); }
  public static void AddElevation(FlatBufferBuilder builder, double elevation) { builder.AddDouble(17, elevation, 0.0); }
  public static void AddElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.AddDouble(18, elevationUnc, 0.0); }
  public static void AddElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.AddDouble(19, elevationBias, 0.0); }
  public static void AddElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.AddDouble(20, elevationRate, 0.0); }
  public static void AddRange(FlatBufferBuilder builder, double range) { builder.AddDouble(21, range, 0.0); }
  public static void AddRangeAccel(FlatBufferBuilder builder, double rangeAccel) { builder.AddDouble(22, rangeAccel, 0.0); }
  public static void AddRangeAccelUnc(FlatBufferBuilder builder, double rangeAccelUnc) { builder.AddDouble(23, rangeAccelUnc, 0.0); }
  public static void AddRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.AddDouble(24, rangeUnc, 0.0); }
  public static void AddRangeBias(FlatBufferBuilder builder, double rangeBias) { builder.AddDouble(25, rangeBias, 0.0); }
  public static void AddRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.AddDouble(26, rangeRate, 0.0); }
  public static void AddRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.AddDouble(27, rangeRateUnc, 0.0); }
  public static void AddDoppler(FlatBufferBuilder builder, double doppler) { builder.AddDouble(28, doppler, 0.0); }
  public static void AddDopplerUnc(FlatBufferBuilder builder, double dopplerUnc) { builder.AddDouble(29, dopplerUnc, 0.0); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(30, ra, 0.0); }
  public static void AddDeclination(FlatBufferBuilder builder, double declination) { builder.AddDouble(31, declination, 0.0); }
  public static void AddX(FlatBufferBuilder builder, double x) { builder.AddDouble(32, x, 0.0); }
  public static void AddY(FlatBufferBuilder builder, double y) { builder.AddDouble(33, y, 0.0); }
  public static void AddZ(FlatBufferBuilder builder, double z) { builder.AddDouble(34, z, 0.0); }
  public static void AddXvel(FlatBufferBuilder builder, double xvel) { builder.AddDouble(35, xvel, 0.0); }
  public static void AddYvel(FlatBufferBuilder builder, double yvel) { builder.AddDouble(36, yvel, 0.0); }
  public static void AddZvel(FlatBufferBuilder builder, double zvel) { builder.AddDouble(37, zvel, 0.0); }
  public static void AddSenx(FlatBufferBuilder builder, double senx) { builder.AddDouble(38, senx, 0.0); }
  public static void AddSeny(FlatBufferBuilder builder, double seny) { builder.AddDouble(39, seny, 0.0); }
  public static void AddSenz(FlatBufferBuilder builder, double senz) { builder.AddDouble(40, senz, 0.0); }
  public static void AddRcs(FlatBufferBuilder builder, double rcs) { builder.AddDouble(41, rcs, 0.0); }
  public static void AddRcsUnc(FlatBufferBuilder builder, double rcsUnc) { builder.AddDouble(42, rcsUnc, 0.0); }
  public static void AddOrthogonalRcs(FlatBufferBuilder builder, double orthogonalRcs) { builder.AddDouble(43, orthogonalRcs, 0.0); }
  public static void AddOrthogonalRcsUnc(FlatBufferBuilder builder, double orthogonalRcsUnc) { builder.AddDouble(44, orthogonalRcsUnc, 0.0); }
  public static void AddSnr(FlatBufferBuilder builder, double snr) { builder.AddDouble(45, snr, 0.0); }
  public static void AddBeam(FlatBufferBuilder builder, double beam) { builder.AddDouble(46, beam, 0.0); }
  public static void AddTimingBias(FlatBufferBuilder builder, double timingBias) { builder.AddDouble(47, timingBias, 0.0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(48, rawFileURIOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(49, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(50, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RadarObservation_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(51, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(52, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(53, createdByOffset.Value, 0); }
  public static void AddSenReferenceFrame(FlatBufferBuilder builder, RadarObservation_Abridged_senReferenceFrame_Enum senReferenceFrame) { builder.AddSbyte(54, (sbyte)senReferenceFrame, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(55, descriptorOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(56, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(57, sourceDLOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(58, typeOffset.Value, 0); }
  public static Offset<RadarObservation_Abridged> EndRadarObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RadarObservation_Abridged>(o);
  }
  public static void FinishRadarObservation_AbridgedBuffer(FlatBufferBuilder builder, Offset<RadarObservation_Abridged> offset) { builder.Finish(offset.Value, "RADA"); }
  public static void FinishSizePrefixedRadarObservation_AbridgedBuffer(FlatBufferBuilder builder, Offset<RadarObservation_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "RADA"); }
  public RadarObservation_AbridgedT UnPack() {
    var _o = new RadarObservation_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RadarObservation_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSensor = this.IdSensor;
    _o.SatNo = this.SatNo;
    _o.TaskId = this.TaskId;
    _o.TransactionId = this.TransactionId;
    _o.TrackId = this.TrackId;
    _o.ObPosition = this.ObPosition;
    _o.OrigObjectId = this.OrigObjectId;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Uct = this.Uct;
    _o.Azimuth = this.Azimuth;
    _o.AzimuthUnc = this.AzimuthUnc;
    _o.AzimuthBias = this.AzimuthBias;
    _o.AzimuthRate = this.AzimuthRate;
    _o.Elevation = this.Elevation;
    _o.ElevationUnc = this.ElevationUnc;
    _o.ElevationBias = this.ElevationBias;
    _o.ElevationRate = this.ElevationRate;
    _o.Range = this.Range;
    _o.RangeAccel = this.RangeAccel;
    _o.RangeAccelUnc = this.RangeAccelUnc;
    _o.RangeUnc = this.RangeUnc;
    _o.RangeBias = this.RangeBias;
    _o.RangeRate = this.RangeRate;
    _o.RangeRateUnc = this.RangeRateUnc;
    _o.Doppler = this.Doppler;
    _o.DopplerUnc = this.DopplerUnc;
    _o.Ra = this.Ra;
    _o.Declination = this.Declination;
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.Xvel = this.Xvel;
    _o.Yvel = this.Yvel;
    _o.Zvel = this.Zvel;
    _o.Senx = this.Senx;
    _o.Seny = this.Seny;
    _o.Senz = this.Senz;
    _o.Rcs = this.Rcs;
    _o.RcsUnc = this.RcsUnc;
    _o.OrthogonalRcs = this.OrthogonalRcs;
    _o.OrthogonalRcsUnc = this.OrthogonalRcsUnc;
    _o.Snr = this.Snr;
    _o.Beam = this.Beam;
    _o.TimingBias = this.TimingBias;
    _o.RawFileURI = this.RawFileURI;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SenReferenceFrame = this.SenReferenceFrame;
    _o.Descriptor = this.Descriptor;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.Type = this.Type;
  }
  public static Offset<RadarObservation_Abridged> Pack(FlatBufferBuilder builder, RadarObservation_AbridgedT _o) {
    if (_o == null) return default(Offset<RadarObservation_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _obPosition = _o.ObPosition == null ? default(StringOffset) : builder.CreateString(_o.ObPosition);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    return CreateRadarObservation_Abridged(
      builder,
      _id,
      _classificationMarking,
      _obTime,
      _idOnOrbit,
      _idSensor,
      _o.SatNo,
      _taskId,
      _transactionId,
      _trackId,
      _obPosition,
      _origObjectId,
      _origSensorId,
      _o.Uct,
      _o.Azimuth,
      _o.AzimuthUnc,
      _o.AzimuthBias,
      _o.AzimuthRate,
      _o.Elevation,
      _o.ElevationUnc,
      _o.ElevationBias,
      _o.ElevationRate,
      _o.Range,
      _o.RangeAccel,
      _o.RangeAccelUnc,
      _o.RangeUnc,
      _o.RangeBias,
      _o.RangeRate,
      _o.RangeRateUnc,
      _o.Doppler,
      _o.DopplerUnc,
      _o.Ra,
      _o.Declination,
      _o.X,
      _o.Y,
      _o.Z,
      _o.Xvel,
      _o.Yvel,
      _o.Zvel,
      _o.Senx,
      _o.Seny,
      _o.Senz,
      _o.Rcs,
      _o.RcsUnc,
      _o.OrthogonalRcs,
      _o.OrthogonalRcsUnc,
      _o.Snr,
      _o.Beam,
      _o.TimingBias,
      _rawFileURI,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _o.SenReferenceFrame,
      _descriptor,
      _origNetwork,
      _sourceDL,
      _type);
  }
}

public class RadarObservation_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSensor { get; set; }
  public int SatNo { get; set; }
  public string TaskId { get; set; }
  public string TransactionId { get; set; }
  public string TrackId { get; set; }
  public string ObPosition { get; set; }
  public string OrigObjectId { get; set; }
  public string OrigSensorId { get; set; }
  public bool Uct { get; set; }
  public double Azimuth { get; set; }
  public double AzimuthUnc { get; set; }
  public double AzimuthBias { get; set; }
  public double AzimuthRate { get; set; }
  public double Elevation { get; set; }
  public double ElevationUnc { get; set; }
  public double ElevationBias { get; set; }
  public double ElevationRate { get; set; }
  public double Range { get; set; }
  public double RangeAccel { get; set; }
  public double RangeAccelUnc { get; set; }
  public double RangeUnc { get; set; }
  public double RangeBias { get; set; }
  public double RangeRate { get; set; }
  public double RangeRateUnc { get; set; }
  public double Doppler { get; set; }
  public double DopplerUnc { get; set; }
  public double Ra { get; set; }
  public double Declination { get; set; }
  public double X { get; set; }
  public double Y { get; set; }
  public double Z { get; set; }
  public double Xvel { get; set; }
  public double Yvel { get; set; }
  public double Zvel { get; set; }
  public double Senx { get; set; }
  public double Seny { get; set; }
  public double Senz { get; set; }
  public double Rcs { get; set; }
  public double RcsUnc { get; set; }
  public double OrthogonalRcs { get; set; }
  public double OrthogonalRcsUnc { get; set; }
  public double Snr { get; set; }
  public double Beam { get; set; }
  public double TimingBias { get; set; }
  public string RawFileURI { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public RadarObservation_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public RadarObservation_Abridged_senReferenceFrame_Enum SenReferenceFrame { get; set; }
  public string Descriptor { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public string Type { get; set; }

  public RadarObservation_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.IdOnOrbit = null;
    this.IdSensor = null;
    this.SatNo = 0;
    this.TaskId = null;
    this.TransactionId = null;
    this.TrackId = null;
    this.ObPosition = null;
    this.OrigObjectId = null;
    this.OrigSensorId = null;
    this.Uct = false;
    this.Azimuth = 0.0;
    this.AzimuthUnc = 0.0;
    this.AzimuthBias = 0.0;
    this.AzimuthRate = 0.0;
    this.Elevation = 0.0;
    this.ElevationUnc = 0.0;
    this.ElevationBias = 0.0;
    this.ElevationRate = 0.0;
    this.Range = 0.0;
    this.RangeAccel = 0.0;
    this.RangeAccelUnc = 0.0;
    this.RangeUnc = 0.0;
    this.RangeBias = 0.0;
    this.RangeRate = 0.0;
    this.RangeRateUnc = 0.0;
    this.Doppler = 0.0;
    this.DopplerUnc = 0.0;
    this.Ra = 0.0;
    this.Declination = 0.0;
    this.X = 0.0;
    this.Y = 0.0;
    this.Z = 0.0;
    this.Xvel = 0.0;
    this.Yvel = 0.0;
    this.Zvel = 0.0;
    this.Senx = 0.0;
    this.Seny = 0.0;
    this.Senz = 0.0;
    this.Rcs = 0.0;
    this.RcsUnc = 0.0;
    this.OrthogonalRcs = 0.0;
    this.OrthogonalRcsUnc = 0.0;
    this.Snr = 0.0;
    this.Beam = 0.0;
    this.TimingBias = 0.0;
    this.RawFileURI = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = RadarObservation_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SenReferenceFrame = RadarObservation_Abridged_senReferenceFrame_Enum.J2000;
    this.Descriptor = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.Type = null;
  }
  public static RadarObservation_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return RadarObservation_Abridged.GetRootAsRadarObservation_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RadarObservation_Abridged.FinishRadarObservation_AbridgedBuffer(fbb, RadarObservation_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RadarObservation_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdSensor*/, false)
      && verifier.VerifyField(tablePos, 14 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 18 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 20 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 22 /*ObPosition*/, false)
      && verifier.VerifyString(tablePos, 24 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 26 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 28 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 30 /*Azimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*AzimuthUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*AzimuthBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*AzimuthRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Elevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*ElevationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*ElevationBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*ElevationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Range*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*RangeAccel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*RangeAccelUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*RangeUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*RangeBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*RangeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*RangeRateUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*Doppler*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*DopplerUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*Declination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*X*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*Y*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*Z*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*Xvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*Yvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Zvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Senx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Seny*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*Senz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*Rcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*RcsUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*OrthogonalRcs*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*OrthogonalRcsUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*Snr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*Beam*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*TimingBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 100 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 102 /*Source*/, false)
      && verifier.VerifyString(tablePos, 104 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 106 /*DataMode*/, 1 /*RadarObservation_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 108 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 110 /*CreatedBy*/, false)
      && verifier.VerifyField(tablePos, 112 /*SenReferenceFrame*/, 1 /*RadarObservation_Abridged_senReferenceFrame_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 114 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 116 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 118 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 120 /*Type*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
