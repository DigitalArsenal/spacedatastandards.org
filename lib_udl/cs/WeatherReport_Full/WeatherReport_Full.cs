// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
public struct WeatherReport_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static WeatherReport_Full GetRootAsWeatherReport_Full(ByteBuffer _bb) { return GetRootAsWeatherReport_Full(_bb, new WeatherReport_Full()); }
  public static WeatherReport_Full GetRootAsWeatherReport_Full(ByteBuffer _bb, WeatherReport_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool WeatherReport_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "WEAT"); }
  public static bool VerifyWeatherReport_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("WEAT", false, WeatherReport_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeatherReport_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: WEATHER-REPORT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the sensor making the weather measurement.
  /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
  /// Example: /// Example: WEATHER-ID
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string WeatherId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWeatherIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWeatherIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Identifier of the ground imagery associated for this weather over target report.
  /// Example: /// Example: GROUND-IMAGERY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdGroundImagery { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdGroundImageryBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdGroundImageryBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdGroundImageryArray() { return __p.__vector_as_array<byte>(14); }
  /// Identifier of the Site that is associated with this weather report.
  /// Example: /// Example: AIRFIELD-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSite { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSiteBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdSiteBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdSiteArray() { return __p.__vector_as_array<byte>(16); }
  /// Identifier of the Airfield associated with this weather report.
  /// Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdAirfield { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdAirfieldBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdAirfieldBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdAirfieldArray() { return __p.__vector_as_array<byte>(18); }
  /// The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
  /// Example: /// Example: KAFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string Icao { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIcaoBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIcaoBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIcaoArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: GDSSMB022408301601304517
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: TMDS060AD4OG03CC
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalLocationId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalLocationIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetExternalLocationIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetExternalLocationIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
  /// Example: /// Example: FORECAST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string ReportType { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportTypeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetReportTypeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetReportTypeArray() { return __p.__vector_as_array<byte>(26); }
  /// Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ForecastStartTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetForecastStartTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetForecastStartTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetForecastStartTimeArray() { return __p.__vector_as_array<byte>(30); }
  /// Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
  /// Example: /// Example: 2024-01-01T18:00:00.123Z
  /// Constraints: No constraints specified.
  public string ForecastEndTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetForecastEndTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetForecastEndTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetForecastEndTimeArray() { return __p.__vector_as_array<byte>(32); }
  /// The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 56.12
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -156.6
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 123.12
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
  /// Example: /// Example: 1000.0
  /// Constraints: No constraints specified.
  public double GeoPotentialAlt { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
  /// Example: /// Example: MANDATORY
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string DataLevel { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataLevelBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetDataLevelBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetDataLevelArray() { return __p.__vector_as_array<byte>(42); }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Area { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetAreaBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetAreaArray() { return __p.__vector_as_array<byte>(44); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Atext { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(46); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string Agjson { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(48); }
  /// Type of region as projected on the ground.
  /// Example: /// Example: ST_Polygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(50); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Expresses the speed of the wind in meters/second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double WindSpd { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average wind speed over a 1 minute period, in meters/second.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  public double WindSpdAvg { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Expresses the max gust speed of the wind, in meters/second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double WindGust { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
  /// Example: /// Example: 13.2
  /// Constraints: No constraints specified.
  public double WindGust10 { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
  /// Example: /// Example: 3.8
  /// Constraints: No constraints specified.
  public double Vshear { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
  /// Example: /// Example: 3.8
  /// Constraints: No constraints specified.
  public double Hshear { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
  /// Example: /// Example: -0.04
  /// Constraints: No constraints specified.
  public double RadVel { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  /// Example: /// Example: 4.4
  /// Constraints: No constraints specified.
  public double RadVelBeam1 { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  /// Example: /// Example: -0.2
  /// Constraints: No constraints specified.
  public double RadVelBeam2 { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  /// Example: /// Example: -0.2
  /// Constraints: No constraints specified.
  public double RadVelBeam3 { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  /// Example: /// Example: 11.4
  /// Constraints: No constraints specified.
  public double RadVelBeam4 { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
  /// Example: /// Example: 4.1
  /// Constraints: No constraints specified.
  public double RadVelBeam5 { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Direction the wind is blowing, in degrees clockwise from true north.
  /// Example: /// Example: 75.1234
  /// Constraints: No constraints specified.
  public double WindDir { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average wind direction over a 1 minute period, in degrees clockwise from true north.
  /// Example: /// Example: 57.1
  /// Constraints: No constraints specified.
  public double WindDirAvg { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
  /// Example: /// Example: 78.4
  /// Constraints: No constraints specified.
  public double WindDirPeak { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
  /// Example: /// Example: 44.5
  /// Constraints: No constraints specified.
  public double WindDirPeak10 { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The perceived temperature in degrees C.
  /// Example: /// Example: 15.6
  /// Constraints: No constraints specified.
  public double WindChill { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The difference in wind direction recorded over a period of time, in degrees.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  public double DirDev { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Boolean describing whether or not the wind direction and/or speed is variable.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool WindVar { get { int o = __p.__offset(92); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string WindCov(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int WindCovLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
  /// Example: /// Example: ['OVERCAST', 'BROKEN']
  /// Constraints: No constraints specified.
  public string CloudCover(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CloudCoverLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
  /// Example: /// Example: [1.2, 2.2]
  /// Constraints: No constraints specified.
  public string CloudHght(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CloudHghtLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ActWeather { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActWeatherBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetActWeatherBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetActWeatherArray() { return __p.__vector_as_array<byte>(100); }
  /// Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string WeatherDesc { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherDescBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetWeatherDescBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetWeatherDescArray() { return __p.__vector_as_array<byte>(102); }
  /// Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string WeatherInt { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherIntBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetWeatherIntBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetWeatherIntArray() { return __p.__vector_as_array<byte>(104); }
  /// The Raw Meteorological Aerodrome Report (METAR) string.
  /// Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
  /// Constraints: Minimum length = 0, Maximum length = 512
  public string RawMETAR { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawMETARBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetRawMETARBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetRawMETARArray() { return __p.__vector_as_array<byte>(106); }
  /// Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
  /// Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string RawTAF { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawTAFBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetRawTAFBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetRawTAFArray() { return __p.__vector_as_array<byte>(108); }
  /// Altimeter set to read zero at mean sea level in kilopascals.
  /// Example: /// Example: 1234.456
  /// Constraints: No constraints specified.
  public double Qnh { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Visual distance in meters.
  /// Example: /// Example: 1234.456
  /// Constraints: No constraints specified.
  public double Visibility { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The measurement of air temperature in degrees C.
  /// Example: /// Example: 23.45
  /// Constraints: No constraints specified.
  public double Temperature { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The measurement of soil temperature in degrees C.
  /// Example: /// Example: 22.4
  /// Constraints: No constraints specified.
  public double SoilTemp { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The measurement of air pressure in the atmosphere in kilopascals.
  /// Example: /// Example: 101.2
  /// Constraints: No constraints specified.
  public double BarPress { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The speed at which water is being applied to a specific area in millimeters per hour.
  /// Example: /// Example: 3.4
  /// Constraints: No constraints specified.
  public double PrecipRate { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of rain that has fallen in the past hour, in centimeters.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double RainHour { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
  /// Example: /// Example: 1234.456
  /// Constraints: No constraints specified.
  public double SolarRad { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
  /// Example: /// Example: 234.5
  /// Constraints: No constraints specified.
  public double DifRad { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
  /// Example: /// Example: 56.7
  /// Constraints: No constraints specified.
  public double RefRad { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
  /// Example: /// Example: 12.456
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
  /// Example: /// Example: 123.456
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The temperature at which air is saturated with water vapor, in degrees C.
  /// Example: /// Example: 15.6
  /// Constraints: No constraints specified.
  public double DewPoint { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The percentage of water vapor in the atmosphere.
  /// Example: /// Example: 34.456
  /// Constraints: No constraints specified.
  public double RelHumidity { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// An indication of how much the atmosphere refracts light.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double IndexRefraction { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The volumetric percentage of soil water contained in a given volume of soil.
  /// Example: /// Example: 3.5
  /// Constraints: No constraints specified.
  public double SoilMoisture { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string SurroundingWeather { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSurroundingWeatherBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetSurroundingWeatherBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetSurroundingWeatherArray() { return __p.__vector_as_array<byte>(144); }
  /// Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string WeatherAmp { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWeatherAmpBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetWeatherAmpBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetWeatherAmpArray() { return __p.__vector_as_array<byte>(146); }
  /// Reports the lowest altitude at which contrails are occurring, in meters.
  /// Example: /// Example: 123.123
  /// Constraints: No constraints specified.
  public double ContrailHghtLower { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Reports the highest altitude at which contrails are occurring, in meters.
  /// Example: /// Example: 123.123
  /// Constraints: No constraints specified.
  public double ContrailHghtUpper { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Reports the highest altitude at which icing or freezing rain is occurring, in meters.
  /// Example: /// Example: 123.123
  /// Constraints: No constraints specified.
  public double IcingUpperLimit { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
  /// Example: /// Example: 123.123
  /// Constraints: No constraints specified.
  public double IcingLowerLimit { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
  /// MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
  /// MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
  /// THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
  /// Example: /// Example: THUNDERSTORMS
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string EnRouteWeather { get { int o = __p.__offset(156); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnRouteWeatherBytes() { return __p.__vector_as_span<byte>(156, 1); }
#else
  public ArraySegment<byte>? GetEnRouteWeatherBytes() { return __p.__vector_as_arraysegment(156); }
#endif
  public byte[] GetEnRouteWeatherArray() { return __p.__vector_as_array<byte>(156); }
  /// Flag indicating detection of a cloud-to-cloud lightning event.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool CcEvent { get { int o = __p.__offset(158); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SENSOR', 'WEATHERDATA']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(160); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(160); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(162); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(162); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(164); }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(166); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(168); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(170); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(170, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(170); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(170); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(172); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(172, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(172); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(172); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public WeatherReport_Full_dataMode_Enum DataMode { get { int o = __p.__offset(174); return o != 0 ? (WeatherReport_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : WeatherReport_Full_dataMode_Enum.REAL; } }

  public static Offset<WeatherReport_Full> CreateWeatherReport_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset weatherIdOffset = default(StringOffset),
      StringOffset idGroundImageryOffset = default(StringOffset),
      StringOffset idSiteOffset = default(StringOffset),
      StringOffset idAirfieldOffset = default(StringOffset),
      StringOffset icaoOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset externalLocationIdOffset = default(StringOffset),
      StringOffset reportTypeOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      StringOffset forecastStartTimeOffset = default(StringOffset),
      StringOffset forecastEndTimeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double geoPotentialAlt = 0.0,
      StringOffset dataLevelOffset = default(StringOffset),
      StringOffset areaOffset = default(StringOffset),
      StringOffset atextOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atypeOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      double windSpd = 0.0,
      double windSpdAvg = 0.0,
      double windGust = 0.0,
      double windGust10 = 0.0,
      double vshear = 0.0,
      double hshear = 0.0,
      double radVel = 0.0,
      double radVelBeam1 = 0.0,
      double radVelBeam2 = 0.0,
      double radVelBeam3 = 0.0,
      double radVelBeam4 = 0.0,
      double radVelBeam5 = 0.0,
      double windDir = 0.0,
      double windDirAvg = 0.0,
      double windDirPeak = 0.0,
      double windDirPeak10 = 0.0,
      double windChill = 0.0,
      double dirDev = 0.0,
      bool windVar = false,
      VectorOffset windCovOffset = default(VectorOffset),
      VectorOffset cloudCoverOffset = default(VectorOffset),
      VectorOffset cloudHghtOffset = default(VectorOffset),
      StringOffset actWeatherOffset = default(StringOffset),
      StringOffset weatherDescOffset = default(StringOffset),
      StringOffset weatherIntOffset = default(StringOffset),
      StringOffset rawMETAROffset = default(StringOffset),
      StringOffset rawTAFOffset = default(StringOffset),
      double qnh = 0.0,
      double visibility = 0.0,
      double temperature = 0.0,
      double soilTemp = 0.0,
      double barPress = 0.0,
      double precipRate = 0.0,
      double rainHour = 0.0,
      double solarRad = 0.0,
      double difRad = 0.0,
      double refRad = 0.0,
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      double dewPoint = 0.0,
      double relHumidity = 0.0,
      double indexRefraction = 0.0,
      double soilMoisture = 0.0,
      StringOffset surroundingWeatherOffset = default(StringOffset),
      StringOffset weatherAmpOffset = default(StringOffset),
      double contrailHghtLower = 0.0,
      double contrailHghtUpper = 0.0,
      double icingUpperLimit = 0.0,
      double icingLowerLimit = 0.0,
      StringOffset enRouteWeatherOffset = default(StringOffset),
      bool ccEvent = false,
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      WeatherReport_Full_dataMode_Enum dataMode = WeatherReport_Full_dataMode_Enum.REAL) {
    builder.StartTable(86);
    WeatherReport_Full.AddIcingLowerLimit(builder, icingLowerLimit);
    WeatherReport_Full.AddIcingUpperLimit(builder, icingUpperLimit);
    WeatherReport_Full.AddContrailHghtUpper(builder, contrailHghtUpper);
    WeatherReport_Full.AddContrailHghtLower(builder, contrailHghtLower);
    WeatherReport_Full.AddSoilMoisture(builder, soilMoisture);
    WeatherReport_Full.AddIndexRefraction(builder, indexRefraction);
    WeatherReport_Full.AddRelHumidity(builder, relHumidity);
    WeatherReport_Full.AddDewPoint(builder, dewPoint);
    WeatherReport_Full.AddSenalt(builder, senalt);
    WeatherReport_Full.AddSenlon(builder, senlon);
    WeatherReport_Full.AddSenlat(builder, senlat);
    WeatherReport_Full.AddRefRad(builder, refRad);
    WeatherReport_Full.AddDifRad(builder, difRad);
    WeatherReport_Full.AddSolarRad(builder, solarRad);
    WeatherReport_Full.AddRainHour(builder, rainHour);
    WeatherReport_Full.AddPrecipRate(builder, precipRate);
    WeatherReport_Full.AddBarPress(builder, barPress);
    WeatherReport_Full.AddSoilTemp(builder, soilTemp);
    WeatherReport_Full.AddTemperature(builder, temperature);
    WeatherReport_Full.AddVisibility(builder, visibility);
    WeatherReport_Full.AddQnh(builder, qnh);
    WeatherReport_Full.AddDirDev(builder, dirDev);
    WeatherReport_Full.AddWindChill(builder, windChill);
    WeatherReport_Full.AddWindDirPeak10(builder, windDirPeak10);
    WeatherReport_Full.AddWindDirPeak(builder, windDirPeak);
    WeatherReport_Full.AddWindDirAvg(builder, windDirAvg);
    WeatherReport_Full.AddWindDir(builder, windDir);
    WeatherReport_Full.AddRadVelBeam5(builder, radVelBeam5);
    WeatherReport_Full.AddRadVelBeam4(builder, radVelBeam4);
    WeatherReport_Full.AddRadVelBeam3(builder, radVelBeam3);
    WeatherReport_Full.AddRadVelBeam2(builder, radVelBeam2);
    WeatherReport_Full.AddRadVelBeam1(builder, radVelBeam1);
    WeatherReport_Full.AddRadVel(builder, radVel);
    WeatherReport_Full.AddHshear(builder, hshear);
    WeatherReport_Full.AddVshear(builder, vshear);
    WeatherReport_Full.AddWindGust10(builder, windGust10);
    WeatherReport_Full.AddWindGust(builder, windGust);
    WeatherReport_Full.AddWindSpdAvg(builder, windSpdAvg);
    WeatherReport_Full.AddWindSpd(builder, windSpd);
    WeatherReport_Full.AddGeoPotentialAlt(builder, geoPotentialAlt);
    WeatherReport_Full.AddAlt(builder, alt);
    WeatherReport_Full.AddLon(builder, lon);
    WeatherReport_Full.AddLat(builder, lat);
    WeatherReport_Full.AddOrigin(builder, originOffset);
    WeatherReport_Full.AddSource(builder, sourceOffset);
    WeatherReport_Full.AddCreatedBy(builder, createdByOffset);
    WeatherReport_Full.AddCreatedAt(builder, createdAtOffset);
    WeatherReport_Full.AddOrigNetwork(builder, origNetworkOffset);
    WeatherReport_Full.AddSrcIds(builder, srcIdsOffset);
    WeatherReport_Full.AddSrcTyps(builder, srcTypsOffset);
    WeatherReport_Full.AddEnRouteWeather(builder, enRouteWeatherOffset);
    WeatherReport_Full.AddWeatherAmp(builder, weatherAmpOffset);
    WeatherReport_Full.AddSurroundingWeather(builder, surroundingWeatherOffset);
    WeatherReport_Full.AddRawTAF(builder, rawTAFOffset);
    WeatherReport_Full.AddRawMETAR(builder, rawMETAROffset);
    WeatherReport_Full.AddWeatherInt(builder, weatherIntOffset);
    WeatherReport_Full.AddWeatherDesc(builder, weatherDescOffset);
    WeatherReport_Full.AddActWeather(builder, actWeatherOffset);
    WeatherReport_Full.AddCloudHght(builder, cloudHghtOffset);
    WeatherReport_Full.AddCloudCover(builder, cloudCoverOffset);
    WeatherReport_Full.AddWindCov(builder, windCovOffset);
    WeatherReport_Full.AddAsrid(builder, asrid);
    WeatherReport_Full.AddAndims(builder, andims);
    WeatherReport_Full.AddAtype(builder, atypeOffset);
    WeatherReport_Full.AddAgjson(builder, agjsonOffset);
    WeatherReport_Full.AddAtext(builder, atextOffset);
    WeatherReport_Full.AddArea(builder, areaOffset);
    WeatherReport_Full.AddDataLevel(builder, dataLevelOffset);
    WeatherReport_Full.AddForecastEndTime(builder, forecastEndTimeOffset);
    WeatherReport_Full.AddForecastStartTime(builder, forecastStartTimeOffset);
    WeatherReport_Full.AddObTime(builder, obTimeOffset);
    WeatherReport_Full.AddReportType(builder, reportTypeOffset);
    WeatherReport_Full.AddExternalLocationId(builder, externalLocationIdOffset);
    WeatherReport_Full.AddExternalId(builder, externalIdOffset);
    WeatherReport_Full.AddIcao(builder, icaoOffset);
    WeatherReport_Full.AddIdAirfield(builder, idAirfieldOffset);
    WeatherReport_Full.AddIdSite(builder, idSiteOffset);
    WeatherReport_Full.AddIdGroundImagery(builder, idGroundImageryOffset);
    WeatherReport_Full.AddWeatherId(builder, weatherIdOffset);
    WeatherReport_Full.AddOrigSensorId(builder, origSensorIdOffset);
    WeatherReport_Full.AddIdSensor(builder, idSensorOffset);
    WeatherReport_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    WeatherReport_Full.AddId(builder, idOffset);
    WeatherReport_Full.AddDataMode(builder, dataMode);
    WeatherReport_Full.AddCcEvent(builder, ccEvent);
    WeatherReport_Full.AddWindVar(builder, windVar);
    return WeatherReport_Full.EndWeatherReport_Full(builder);
  }

  public static void StartWeatherReport_Full(FlatBufferBuilder builder) { builder.StartTable(86); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(2, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(3, origSensorIdOffset.Value, 0); }
  public static void AddWeatherId(FlatBufferBuilder builder, StringOffset weatherIdOffset) { builder.AddOffset(4, weatherIdOffset.Value, 0); }
  public static void AddIdGroundImagery(FlatBufferBuilder builder, StringOffset idGroundImageryOffset) { builder.AddOffset(5, idGroundImageryOffset.Value, 0); }
  public static void AddIdSite(FlatBufferBuilder builder, StringOffset idSiteOffset) { builder.AddOffset(6, idSiteOffset.Value, 0); }
  public static void AddIdAirfield(FlatBufferBuilder builder, StringOffset idAirfieldOffset) { builder.AddOffset(7, idAirfieldOffset.Value, 0); }
  public static void AddIcao(FlatBufferBuilder builder, StringOffset icaoOffset) { builder.AddOffset(8, icaoOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(9, externalIdOffset.Value, 0); }
  public static void AddExternalLocationId(FlatBufferBuilder builder, StringOffset externalLocationIdOffset) { builder.AddOffset(10, externalLocationIdOffset.Value, 0); }
  public static void AddReportType(FlatBufferBuilder builder, StringOffset reportTypeOffset) { builder.AddOffset(11, reportTypeOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(12, obTimeOffset.Value, 0); }
  public static void AddForecastStartTime(FlatBufferBuilder builder, StringOffset forecastStartTimeOffset) { builder.AddOffset(13, forecastStartTimeOffset.Value, 0); }
  public static void AddForecastEndTime(FlatBufferBuilder builder, StringOffset forecastEndTimeOffset) { builder.AddOffset(14, forecastEndTimeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(15, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(16, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(17, alt, 0.0); }
  public static void AddGeoPotentialAlt(FlatBufferBuilder builder, double geoPotentialAlt) { builder.AddDouble(18, geoPotentialAlt, 0.0); }
  public static void AddDataLevel(FlatBufferBuilder builder, StringOffset dataLevelOffset) { builder.AddOffset(19, dataLevelOffset.Value, 0); }
  public static void AddArea(FlatBufferBuilder builder, StringOffset areaOffset) { builder.AddOffset(20, areaOffset.Value, 0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(21, atextOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(22, agjsonOffset.Value, 0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(23, atypeOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(24, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(25, asrid, 0); }
  public static void AddWindSpd(FlatBufferBuilder builder, double windSpd) { builder.AddDouble(26, windSpd, 0.0); }
  public static void AddWindSpdAvg(FlatBufferBuilder builder, double windSpdAvg) { builder.AddDouble(27, windSpdAvg, 0.0); }
  public static void AddWindGust(FlatBufferBuilder builder, double windGust) { builder.AddDouble(28, windGust, 0.0); }
  public static void AddWindGust10(FlatBufferBuilder builder, double windGust10) { builder.AddDouble(29, windGust10, 0.0); }
  public static void AddVshear(FlatBufferBuilder builder, double vshear) { builder.AddDouble(30, vshear, 0.0); }
  public static void AddHshear(FlatBufferBuilder builder, double hshear) { builder.AddDouble(31, hshear, 0.0); }
  public static void AddRadVel(FlatBufferBuilder builder, double radVel) { builder.AddDouble(32, radVel, 0.0); }
  public static void AddRadVelBeam1(FlatBufferBuilder builder, double radVelBeam1) { builder.AddDouble(33, radVelBeam1, 0.0); }
  public static void AddRadVelBeam2(FlatBufferBuilder builder, double radVelBeam2) { builder.AddDouble(34, radVelBeam2, 0.0); }
  public static void AddRadVelBeam3(FlatBufferBuilder builder, double radVelBeam3) { builder.AddDouble(35, radVelBeam3, 0.0); }
  public static void AddRadVelBeam4(FlatBufferBuilder builder, double radVelBeam4) { builder.AddDouble(36, radVelBeam4, 0.0); }
  public static void AddRadVelBeam5(FlatBufferBuilder builder, double radVelBeam5) { builder.AddDouble(37, radVelBeam5, 0.0); }
  public static void AddWindDir(FlatBufferBuilder builder, double windDir) { builder.AddDouble(38, windDir, 0.0); }
  public static void AddWindDirAvg(FlatBufferBuilder builder, double windDirAvg) { builder.AddDouble(39, windDirAvg, 0.0); }
  public static void AddWindDirPeak(FlatBufferBuilder builder, double windDirPeak) { builder.AddDouble(40, windDirPeak, 0.0); }
  public static void AddWindDirPeak10(FlatBufferBuilder builder, double windDirPeak10) { builder.AddDouble(41, windDirPeak10, 0.0); }
  public static void AddWindChill(FlatBufferBuilder builder, double windChill) { builder.AddDouble(42, windChill, 0.0); }
  public static void AddDirDev(FlatBufferBuilder builder, double dirDev) { builder.AddDouble(43, dirDev, 0.0); }
  public static void AddWindVar(FlatBufferBuilder builder, bool windVar) { builder.AddBool(44, windVar, false); }
  public static void AddWindCov(FlatBufferBuilder builder, VectorOffset windCovOffset) { builder.AddOffset(45, windCovOffset.Value, 0); }
  public static VectorOffset CreateWindCovVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWindCovVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWindCovVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWindCovVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWindCovVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCloudCover(FlatBufferBuilder builder, VectorOffset cloudCoverOffset) { builder.AddOffset(46, cloudCoverOffset.Value, 0); }
  public static VectorOffset CreateCloudCoverVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCloudCoverVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCloudCoverVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCloudCoverVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCloudCoverVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCloudHght(FlatBufferBuilder builder, VectorOffset cloudHghtOffset) { builder.AddOffset(47, cloudHghtOffset.Value, 0); }
  public static VectorOffset CreateCloudHghtVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCloudHghtVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCloudHghtVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCloudHghtVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCloudHghtVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActWeather(FlatBufferBuilder builder, StringOffset actWeatherOffset) { builder.AddOffset(48, actWeatherOffset.Value, 0); }
  public static void AddWeatherDesc(FlatBufferBuilder builder, StringOffset weatherDescOffset) { builder.AddOffset(49, weatherDescOffset.Value, 0); }
  public static void AddWeatherInt(FlatBufferBuilder builder, StringOffset weatherIntOffset) { builder.AddOffset(50, weatherIntOffset.Value, 0); }
  public static void AddRawMETAR(FlatBufferBuilder builder, StringOffset rawMETAROffset) { builder.AddOffset(51, rawMETAROffset.Value, 0); }
  public static void AddRawTAF(FlatBufferBuilder builder, StringOffset rawTAFOffset) { builder.AddOffset(52, rawTAFOffset.Value, 0); }
  public static void AddQnh(FlatBufferBuilder builder, double qnh) { builder.AddDouble(53, qnh, 0.0); }
  public static void AddVisibility(FlatBufferBuilder builder, double visibility) { builder.AddDouble(54, visibility, 0.0); }
  public static void AddTemperature(FlatBufferBuilder builder, double temperature) { builder.AddDouble(55, temperature, 0.0); }
  public static void AddSoilTemp(FlatBufferBuilder builder, double soilTemp) { builder.AddDouble(56, soilTemp, 0.0); }
  public static void AddBarPress(FlatBufferBuilder builder, double barPress) { builder.AddDouble(57, barPress, 0.0); }
  public static void AddPrecipRate(FlatBufferBuilder builder, double precipRate) { builder.AddDouble(58, precipRate, 0.0); }
  public static void AddRainHour(FlatBufferBuilder builder, double rainHour) { builder.AddDouble(59, rainHour, 0.0); }
  public static void AddSolarRad(FlatBufferBuilder builder, double solarRad) { builder.AddDouble(60, solarRad, 0.0); }
  public static void AddDifRad(FlatBufferBuilder builder, double difRad) { builder.AddDouble(61, difRad, 0.0); }
  public static void AddRefRad(FlatBufferBuilder builder, double refRad) { builder.AddDouble(62, refRad, 0.0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(63, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(64, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(65, senalt, 0.0); }
  public static void AddDewPoint(FlatBufferBuilder builder, double dewPoint) { builder.AddDouble(66, dewPoint, 0.0); }
  public static void AddRelHumidity(FlatBufferBuilder builder, double relHumidity) { builder.AddDouble(67, relHumidity, 0.0); }
  public static void AddIndexRefraction(FlatBufferBuilder builder, double indexRefraction) { builder.AddDouble(68, indexRefraction, 0.0); }
  public static void AddSoilMoisture(FlatBufferBuilder builder, double soilMoisture) { builder.AddDouble(69, soilMoisture, 0.0); }
  public static void AddSurroundingWeather(FlatBufferBuilder builder, StringOffset surroundingWeatherOffset) { builder.AddOffset(70, surroundingWeatherOffset.Value, 0); }
  public static void AddWeatherAmp(FlatBufferBuilder builder, StringOffset weatherAmpOffset) { builder.AddOffset(71, weatherAmpOffset.Value, 0); }
  public static void AddContrailHghtLower(FlatBufferBuilder builder, double contrailHghtLower) { builder.AddDouble(72, contrailHghtLower, 0.0); }
  public static void AddContrailHghtUpper(FlatBufferBuilder builder, double contrailHghtUpper) { builder.AddDouble(73, contrailHghtUpper, 0.0); }
  public static void AddIcingUpperLimit(FlatBufferBuilder builder, double icingUpperLimit) { builder.AddDouble(74, icingUpperLimit, 0.0); }
  public static void AddIcingLowerLimit(FlatBufferBuilder builder, double icingLowerLimit) { builder.AddDouble(75, icingLowerLimit, 0.0); }
  public static void AddEnRouteWeather(FlatBufferBuilder builder, StringOffset enRouteWeatherOffset) { builder.AddOffset(76, enRouteWeatherOffset.Value, 0); }
  public static void AddCcEvent(FlatBufferBuilder builder, bool ccEvent) { builder.AddBool(77, ccEvent, false); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(78, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(79, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(80, origNetworkOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(81, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(82, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(83, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(84, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, WeatherReport_Full_dataMode_Enum dataMode) { builder.AddSbyte(85, (sbyte)dataMode, 0); }
  public static Offset<WeatherReport_Full> EndWeatherReport_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WeatherReport_Full>(o);
  }
  public static void FinishWeatherReport_FullBuffer(FlatBufferBuilder builder, Offset<WeatherReport_Full> offset) { builder.Finish(offset.Value, "WEAT"); }
  public static void FinishSizePrefixedWeatherReport_FullBuffer(FlatBufferBuilder builder, Offset<WeatherReport_Full> offset) { builder.FinishSizePrefixed(offset.Value, "WEAT"); }
  public WeatherReport_FullT UnPack() {
    var _o = new WeatherReport_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeatherReport_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.WeatherId = this.WeatherId;
    _o.IdGroundImagery = this.IdGroundImagery;
    _o.IdSite = this.IdSite;
    _o.IdAirfield = this.IdAirfield;
    _o.Icao = this.Icao;
    _o.ExternalId = this.ExternalId;
    _o.ExternalLocationId = this.ExternalLocationId;
    _o.ReportType = this.ReportType;
    _o.ObTime = this.ObTime;
    _o.ForecastStartTime = this.ForecastStartTime;
    _o.ForecastEndTime = this.ForecastEndTime;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.GeoPotentialAlt = this.GeoPotentialAlt;
    _o.DataLevel = this.DataLevel;
    _o.Area = this.Area;
    _o.Atext = this.Atext;
    _o.Agjson = this.Agjson;
    _o.Atype = this.Atype;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.WindSpd = this.WindSpd;
    _o.WindSpdAvg = this.WindSpdAvg;
    _o.WindGust = this.WindGust;
    _o.WindGust10 = this.WindGust10;
    _o.Vshear = this.Vshear;
    _o.Hshear = this.Hshear;
    _o.RadVel = this.RadVel;
    _o.RadVelBeam1 = this.RadVelBeam1;
    _o.RadVelBeam2 = this.RadVelBeam2;
    _o.RadVelBeam3 = this.RadVelBeam3;
    _o.RadVelBeam4 = this.RadVelBeam4;
    _o.RadVelBeam5 = this.RadVelBeam5;
    _o.WindDir = this.WindDir;
    _o.WindDirAvg = this.WindDirAvg;
    _o.WindDirPeak = this.WindDirPeak;
    _o.WindDirPeak10 = this.WindDirPeak10;
    _o.WindChill = this.WindChill;
    _o.DirDev = this.DirDev;
    _o.WindVar = this.WindVar;
    _o.WindCov = new List<string>();
    for (var _j = 0; _j < this.WindCovLength; ++_j) {_o.WindCov.Add(this.WindCov(_j));}
    _o.CloudCover = new List<string>();
    for (var _j = 0; _j < this.CloudCoverLength; ++_j) {_o.CloudCover.Add(this.CloudCover(_j));}
    _o.CloudHght = new List<string>();
    for (var _j = 0; _j < this.CloudHghtLength; ++_j) {_o.CloudHght.Add(this.CloudHght(_j));}
    _o.ActWeather = this.ActWeather;
    _o.WeatherDesc = this.WeatherDesc;
    _o.WeatherInt = this.WeatherInt;
    _o.RawMETAR = this.RawMETAR;
    _o.RawTAF = this.RawTAF;
    _o.Qnh = this.Qnh;
    _o.Visibility = this.Visibility;
    _o.Temperature = this.Temperature;
    _o.SoilTemp = this.SoilTemp;
    _o.BarPress = this.BarPress;
    _o.PrecipRate = this.PrecipRate;
    _o.RainHour = this.RainHour;
    _o.SolarRad = this.SolarRad;
    _o.DifRad = this.DifRad;
    _o.RefRad = this.RefRad;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.DewPoint = this.DewPoint;
    _o.RelHumidity = this.RelHumidity;
    _o.IndexRefraction = this.IndexRefraction;
    _o.SoilMoisture = this.SoilMoisture;
    _o.SurroundingWeather = this.SurroundingWeather;
    _o.WeatherAmp = this.WeatherAmp;
    _o.ContrailHghtLower = this.ContrailHghtLower;
    _o.ContrailHghtUpper = this.ContrailHghtUpper;
    _o.IcingUpperLimit = this.IcingUpperLimit;
    _o.IcingLowerLimit = this.IcingLowerLimit;
    _o.EnRouteWeather = this.EnRouteWeather;
    _o.CcEvent = this.CcEvent;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.OrigNetwork = this.OrigNetwork;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
  }
  public static Offset<WeatherReport_Full> Pack(FlatBufferBuilder builder, WeatherReport_FullT _o) {
    if (_o == null) return default(Offset<WeatherReport_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _weatherId = _o.WeatherId == null ? default(StringOffset) : builder.CreateString(_o.WeatherId);
    var _idGroundImagery = _o.IdGroundImagery == null ? default(StringOffset) : builder.CreateString(_o.IdGroundImagery);
    var _idSite = _o.IdSite == null ? default(StringOffset) : builder.CreateString(_o.IdSite);
    var _idAirfield = _o.IdAirfield == null ? default(StringOffset) : builder.CreateString(_o.IdAirfield);
    var _icao = _o.Icao == null ? default(StringOffset) : builder.CreateString(_o.Icao);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _externalLocationId = _o.ExternalLocationId == null ? default(StringOffset) : builder.CreateString(_o.ExternalLocationId);
    var _reportType = _o.ReportType == null ? default(StringOffset) : builder.CreateString(_o.ReportType);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _forecastStartTime = _o.ForecastStartTime == null ? default(StringOffset) : builder.CreateString(_o.ForecastStartTime);
    var _forecastEndTime = _o.ForecastEndTime == null ? default(StringOffset) : builder.CreateString(_o.ForecastEndTime);
    var _dataLevel = _o.DataLevel == null ? default(StringOffset) : builder.CreateString(_o.DataLevel);
    var _area = _o.Area == null ? default(StringOffset) : builder.CreateString(_o.Area);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _windCov = default(VectorOffset);
    if (_o.WindCov != null) {
      var __windCov = new StringOffset[_o.WindCov.Count];
      for (var _j = 0; _j < __windCov.Length; ++_j) { __windCov[_j] = builder.CreateString(_o.WindCov[_j]); }
      _windCov = CreateWindCovVector(builder, __windCov);
    }
    var _cloudCover = default(VectorOffset);
    if (_o.CloudCover != null) {
      var __cloudCover = new StringOffset[_o.CloudCover.Count];
      for (var _j = 0; _j < __cloudCover.Length; ++_j) { __cloudCover[_j] = builder.CreateString(_o.CloudCover[_j]); }
      _cloudCover = CreateCloudCoverVector(builder, __cloudCover);
    }
    var _cloudHght = default(VectorOffset);
    if (_o.CloudHght != null) {
      var __cloudHght = new StringOffset[_o.CloudHght.Count];
      for (var _j = 0; _j < __cloudHght.Length; ++_j) { __cloudHght[_j] = builder.CreateString(_o.CloudHght[_j]); }
      _cloudHght = CreateCloudHghtVector(builder, __cloudHght);
    }
    var _actWeather = _o.ActWeather == null ? default(StringOffset) : builder.CreateString(_o.ActWeather);
    var _weatherDesc = _o.WeatherDesc == null ? default(StringOffset) : builder.CreateString(_o.WeatherDesc);
    var _weatherInt = _o.WeatherInt == null ? default(StringOffset) : builder.CreateString(_o.WeatherInt);
    var _rawMETAR = _o.RawMETAR == null ? default(StringOffset) : builder.CreateString(_o.RawMETAR);
    var _rawTAF = _o.RawTAF == null ? default(StringOffset) : builder.CreateString(_o.RawTAF);
    var _surroundingWeather = _o.SurroundingWeather == null ? default(StringOffset) : builder.CreateString(_o.SurroundingWeather);
    var _weatherAmp = _o.WeatherAmp == null ? default(StringOffset) : builder.CreateString(_o.WeatherAmp);
    var _enRouteWeather = _o.EnRouteWeather == null ? default(StringOffset) : builder.CreateString(_o.EnRouteWeather);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateWeatherReport_Full(
      builder,
      _id,
      _classificationMarking,
      _idSensor,
      _origSensorId,
      _weatherId,
      _idGroundImagery,
      _idSite,
      _idAirfield,
      _icao,
      _externalId,
      _externalLocationId,
      _reportType,
      _obTime,
      _forecastStartTime,
      _forecastEndTime,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.GeoPotentialAlt,
      _dataLevel,
      _area,
      _atext,
      _agjson,
      _atype,
      _o.Andims,
      _o.Asrid,
      _o.WindSpd,
      _o.WindSpdAvg,
      _o.WindGust,
      _o.WindGust10,
      _o.Vshear,
      _o.Hshear,
      _o.RadVel,
      _o.RadVelBeam1,
      _o.RadVelBeam2,
      _o.RadVelBeam3,
      _o.RadVelBeam4,
      _o.RadVelBeam5,
      _o.WindDir,
      _o.WindDirAvg,
      _o.WindDirPeak,
      _o.WindDirPeak10,
      _o.WindChill,
      _o.DirDev,
      _o.WindVar,
      _windCov,
      _cloudCover,
      _cloudHght,
      _actWeather,
      _weatherDesc,
      _weatherInt,
      _rawMETAR,
      _rawTAF,
      _o.Qnh,
      _o.Visibility,
      _o.Temperature,
      _o.SoilTemp,
      _o.BarPress,
      _o.PrecipRate,
      _o.RainHour,
      _o.SolarRad,
      _o.DifRad,
      _o.RefRad,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.DewPoint,
      _o.RelHumidity,
      _o.IndexRefraction,
      _o.SoilMoisture,
      _surroundingWeather,
      _weatherAmp,
      _o.ContrailHghtLower,
      _o.ContrailHghtUpper,
      _o.IcingUpperLimit,
      _o.IcingLowerLimit,
      _enRouteWeather,
      _o.CcEvent,
      _srcTyps,
      _srcIds,
      _origNetwork,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode);
  }
}

public class WeatherReport_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string WeatherId { get; set; }
  public string IdGroundImagery { get; set; }
  public string IdSite { get; set; }
  public string IdAirfield { get; set; }
  public string Icao { get; set; }
  public string ExternalId { get; set; }
  public string ExternalLocationId { get; set; }
  public string ReportType { get; set; }
  public string ObTime { get; set; }
  public string ForecastStartTime { get; set; }
  public string ForecastEndTime { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double GeoPotentialAlt { get; set; }
  public string DataLevel { get; set; }
  public string Area { get; set; }
  public string Atext { get; set; }
  public string Agjson { get; set; }
  public string Atype { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public double WindSpd { get; set; }
  public double WindSpdAvg { get; set; }
  public double WindGust { get; set; }
  public double WindGust10 { get; set; }
  public double Vshear { get; set; }
  public double Hshear { get; set; }
  public double RadVel { get; set; }
  public double RadVelBeam1 { get; set; }
  public double RadVelBeam2 { get; set; }
  public double RadVelBeam3 { get; set; }
  public double RadVelBeam4 { get; set; }
  public double RadVelBeam5 { get; set; }
  public double WindDir { get; set; }
  public double WindDirAvg { get; set; }
  public double WindDirPeak { get; set; }
  public double WindDirPeak10 { get; set; }
  public double WindChill { get; set; }
  public double DirDev { get; set; }
  public bool WindVar { get; set; }
  public List<string> WindCov { get; set; }
  public List<string> CloudCover { get; set; }
  public List<string> CloudHght { get; set; }
  public string ActWeather { get; set; }
  public string WeatherDesc { get; set; }
  public string WeatherInt { get; set; }
  public string RawMETAR { get; set; }
  public string RawTAF { get; set; }
  public double Qnh { get; set; }
  public double Visibility { get; set; }
  public double Temperature { get; set; }
  public double SoilTemp { get; set; }
  public double BarPress { get; set; }
  public double PrecipRate { get; set; }
  public double RainHour { get; set; }
  public double SolarRad { get; set; }
  public double DifRad { get; set; }
  public double RefRad { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public double DewPoint { get; set; }
  public double RelHumidity { get; set; }
  public double IndexRefraction { get; set; }
  public double SoilMoisture { get; set; }
  public string SurroundingWeather { get; set; }
  public string WeatherAmp { get; set; }
  public double ContrailHghtLower { get; set; }
  public double ContrailHghtUpper { get; set; }
  public double IcingUpperLimit { get; set; }
  public double IcingLowerLimit { get; set; }
  public string EnRouteWeather { get; set; }
  public bool CcEvent { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string OrigNetwork { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public WeatherReport_Full_dataMode_Enum DataMode { get; set; }

  public WeatherReport_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.WeatherId = null;
    this.IdGroundImagery = null;
    this.IdSite = null;
    this.IdAirfield = null;
    this.Icao = null;
    this.ExternalId = null;
    this.ExternalLocationId = null;
    this.ReportType = null;
    this.ObTime = null;
    this.ForecastStartTime = null;
    this.ForecastEndTime = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.GeoPotentialAlt = 0.0;
    this.DataLevel = null;
    this.Area = null;
    this.Atext = null;
    this.Agjson = null;
    this.Atype = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.WindSpd = 0.0;
    this.WindSpdAvg = 0.0;
    this.WindGust = 0.0;
    this.WindGust10 = 0.0;
    this.Vshear = 0.0;
    this.Hshear = 0.0;
    this.RadVel = 0.0;
    this.RadVelBeam1 = 0.0;
    this.RadVelBeam2 = 0.0;
    this.RadVelBeam3 = 0.0;
    this.RadVelBeam4 = 0.0;
    this.RadVelBeam5 = 0.0;
    this.WindDir = 0.0;
    this.WindDirAvg = 0.0;
    this.WindDirPeak = 0.0;
    this.WindDirPeak10 = 0.0;
    this.WindChill = 0.0;
    this.DirDev = 0.0;
    this.WindVar = false;
    this.WindCov = null;
    this.CloudCover = null;
    this.CloudHght = null;
    this.ActWeather = null;
    this.WeatherDesc = null;
    this.WeatherInt = null;
    this.RawMETAR = null;
    this.RawTAF = null;
    this.Qnh = 0.0;
    this.Visibility = 0.0;
    this.Temperature = 0.0;
    this.SoilTemp = 0.0;
    this.BarPress = 0.0;
    this.PrecipRate = 0.0;
    this.RainHour = 0.0;
    this.SolarRad = 0.0;
    this.DifRad = 0.0;
    this.RefRad = 0.0;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.DewPoint = 0.0;
    this.RelHumidity = 0.0;
    this.IndexRefraction = 0.0;
    this.SoilMoisture = 0.0;
    this.SurroundingWeather = null;
    this.WeatherAmp = null;
    this.ContrailHghtLower = 0.0;
    this.ContrailHghtUpper = 0.0;
    this.IcingUpperLimit = 0.0;
    this.IcingLowerLimit = 0.0;
    this.EnRouteWeather = null;
    this.CcEvent = false;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.OrigNetwork = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = WeatherReport_Full_dataMode_Enum.REAL;
  }
  public static WeatherReport_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return WeatherReport_Full.GetRootAsWeatherReport_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    WeatherReport_Full.FinishWeatherReport_FullBuffer(fbb, WeatherReport_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class WeatherReport_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 12 /*WeatherId*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdGroundImagery*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdSite*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdAirfield*/, false)
      && verifier.VerifyString(tablePos, 20 /*Icao*/, false)
      && verifier.VerifyString(tablePos, 22 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 24 /*ExternalLocationId*/, false)
      && verifier.VerifyString(tablePos, 26 /*ReportType*/, false)
      && verifier.VerifyString(tablePos, 28 /*ObTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*ForecastStartTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*ForecastEndTime*/, false)
      && verifier.VerifyField(tablePos, 34 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*GeoPotentialAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 42 /*DataLevel*/, false)
      && verifier.VerifyString(tablePos, 44 /*Area*/, false)
      && verifier.VerifyString(tablePos, 46 /*Atext*/, false)
      && verifier.VerifyString(tablePos, 48 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 50 /*Atype*/, false)
      && verifier.VerifyField(tablePos, 52 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*WindSpd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*WindSpdAvg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*WindGust*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*WindGust10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*Vshear*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*Hshear*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*RadVel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*RadVelBeam1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*RadVelBeam2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*RadVelBeam3*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*RadVelBeam4*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*RadVelBeam5*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*WindDir*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*WindDirAvg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*WindDirPeak*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*WindDirPeak10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*WindChill*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*DirDev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*WindVar*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*WindCov*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 96 /*CloudCover*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 98 /*CloudHght*/, false)
      && verifier.VerifyString(tablePos, 100 /*ActWeather*/, false)
      && verifier.VerifyString(tablePos, 102 /*WeatherDesc*/, false)
      && verifier.VerifyString(tablePos, 104 /*WeatherInt*/, false)
      && verifier.VerifyString(tablePos, 106 /*RawMETAR*/, false)
      && verifier.VerifyString(tablePos, 108 /*RawTAF*/, false)
      && verifier.VerifyField(tablePos, 110 /*Qnh*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*Visibility*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*Temperature*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*SoilTemp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*BarPress*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*PrecipRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*RainHour*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*SolarRad*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*DifRad*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*RefRad*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*DewPoint*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*RelHumidity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*IndexRefraction*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*SoilMoisture*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 144 /*SurroundingWeather*/, false)
      && verifier.VerifyString(tablePos, 146 /*WeatherAmp*/, false)
      && verifier.VerifyField(tablePos, 148 /*ContrailHghtLower*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*ContrailHghtUpper*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*IcingUpperLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*IcingLowerLimit*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 156 /*EnRouteWeather*/, false)
      && verifier.VerifyField(tablePos, 158 /*CcEvent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 160 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 162 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 164 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 166 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 168 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 170 /*Source*/, false)
      && verifier.VerifyString(tablePos, 172 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 174 /*DataMode*/, 1 /*WeatherReport_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
