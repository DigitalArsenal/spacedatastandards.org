// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection that specifies the naval flight operations for this ATO.
public struct NavalFlightOperations_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static NavalFlightOperations_Abridged GetRootAsNavalFlightOperations_Abridged(ByteBuffer _bb) { return GetRootAsNavalFlightOperations_Abridged(_bb, new NavalFlightOperations_Abridged()); }
  public static NavalFlightOperations_Abridged GetRootAsNavalFlightOperations_Abridged(ByteBuffer _bb, NavalFlightOperations_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool NavalFlightOperations_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "NAVA"); }
  public static bool VerifyNavalFlightOperations_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("NAVA", false, NavalFlightOperations_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NavalFlightOperations_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
  /// Example: /// Example: USS WASP
  /// Constraints: Minimum length = 1, Maximum length = 48
  public string ShipName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShipNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetShipNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetShipNameArray() { return __p.__vector_as_array<byte>(4); }
  /// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string FltOpStart { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFltOpStartBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFltOpStartBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFltOpStartArray() { return __p.__vector_as_array<byte>(6); }
  /// The time when flight operations end in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string FltOpStop { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFltOpStopBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFltOpStopBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFltOpStopArray() { return __p.__vector_as_array<byte>(8); }
  /// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-02-25T12:00:00.123Z']
  /// Constraints: No constraints specified.
  public string SchdLaunchRcvyTime(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SchdLaunchRcvyTimeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<NavalFlightOperations_Abridged> CreateNavalFlightOperations_Abridged(FlatBufferBuilder builder,
      StringOffset shipNameOffset = default(StringOffset),
      StringOffset fltOpStartOffset = default(StringOffset),
      StringOffset fltOpStopOffset = default(StringOffset),
      VectorOffset schdLaunchRcvyTimeOffset = default(VectorOffset)) {
    builder.StartTable(4);
    NavalFlightOperations_Abridged.AddSchdLaunchRcvyTime(builder, schdLaunchRcvyTimeOffset);
    NavalFlightOperations_Abridged.AddFltOpStop(builder, fltOpStopOffset);
    NavalFlightOperations_Abridged.AddFltOpStart(builder, fltOpStartOffset);
    NavalFlightOperations_Abridged.AddShipName(builder, shipNameOffset);
    return NavalFlightOperations_Abridged.EndNavalFlightOperations_Abridged(builder);
  }

  public static void StartNavalFlightOperations_Abridged(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddShipName(FlatBufferBuilder builder, StringOffset shipNameOffset) { builder.AddOffset(0, shipNameOffset.Value, 0); }
  public static void AddFltOpStart(FlatBufferBuilder builder, StringOffset fltOpStartOffset) { builder.AddOffset(1, fltOpStartOffset.Value, 0); }
  public static void AddFltOpStop(FlatBufferBuilder builder, StringOffset fltOpStopOffset) { builder.AddOffset(2, fltOpStopOffset.Value, 0); }
  public static void AddSchdLaunchRcvyTime(FlatBufferBuilder builder, VectorOffset schdLaunchRcvyTimeOffset) { builder.AddOffset(3, schdLaunchRcvyTimeOffset.Value, 0); }
  public static VectorOffset CreateSchdLaunchRcvyTimeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSchdLaunchRcvyTimeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchdLaunchRcvyTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSchdLaunchRcvyTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSchdLaunchRcvyTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NavalFlightOperations_Abridged> EndNavalFlightOperations_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<NavalFlightOperations_Abridged>(o);
  }
  public static void FinishNavalFlightOperations_AbridgedBuffer(FlatBufferBuilder builder, Offset<NavalFlightOperations_Abridged> offset) { builder.Finish(offset.Value, "NAVA"); }
  public static void FinishSizePrefixedNavalFlightOperations_AbridgedBuffer(FlatBufferBuilder builder, Offset<NavalFlightOperations_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "NAVA"); }
  public NavalFlightOperations_AbridgedT UnPack() {
    var _o = new NavalFlightOperations_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NavalFlightOperations_AbridgedT _o) {
    _o.ShipName = this.ShipName;
    _o.FltOpStart = this.FltOpStart;
    _o.FltOpStop = this.FltOpStop;
    _o.SchdLaunchRcvyTime = new List<string>();
    for (var _j = 0; _j < this.SchdLaunchRcvyTimeLength; ++_j) {_o.SchdLaunchRcvyTime.Add(this.SchdLaunchRcvyTime(_j));}
  }
  public static Offset<NavalFlightOperations_Abridged> Pack(FlatBufferBuilder builder, NavalFlightOperations_AbridgedT _o) {
    if (_o == null) return default(Offset<NavalFlightOperations_Abridged>);
    var _shipName = _o.ShipName == null ? default(StringOffset) : builder.CreateString(_o.ShipName);
    var _fltOpStart = _o.FltOpStart == null ? default(StringOffset) : builder.CreateString(_o.FltOpStart);
    var _fltOpStop = _o.FltOpStop == null ? default(StringOffset) : builder.CreateString(_o.FltOpStop);
    var _schdLaunchRcvyTime = default(VectorOffset);
    if (_o.SchdLaunchRcvyTime != null) {
      var __schdLaunchRcvyTime = new StringOffset[_o.SchdLaunchRcvyTime.Count];
      for (var _j = 0; _j < __schdLaunchRcvyTime.Length; ++_j) { __schdLaunchRcvyTime[_j] = builder.CreateString(_o.SchdLaunchRcvyTime[_j]); }
      _schdLaunchRcvyTime = CreateSchdLaunchRcvyTimeVector(builder, __schdLaunchRcvyTime);
    }
    return CreateNavalFlightOperations_Abridged(
      builder,
      _shipName,
      _fltOpStart,
      _fltOpStop,
      _schdLaunchRcvyTime);
  }
}

public class NavalFlightOperations_AbridgedT
{
  public string ShipName { get; set; }
  public string FltOpStart { get; set; }
  public string FltOpStop { get; set; }
  public List<string> SchdLaunchRcvyTime { get; set; }

  public NavalFlightOperations_AbridgedT() {
    this.ShipName = null;
    this.FltOpStart = null;
    this.FltOpStop = null;
    this.SchdLaunchRcvyTime = null;
  }
  public static NavalFlightOperations_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return NavalFlightOperations_Abridged.GetRootAsNavalFlightOperations_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    NavalFlightOperations_Abridged.FinishNavalFlightOperations_AbridgedBuffer(fbb, NavalFlightOperations_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class NavalFlightOperations_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ShipName*/, false)
      && verifier.VerifyString(tablePos, 6 /*FltOpStart*/, false)
      && verifier.VerifyString(tablePos, 8 /*FltOpStop*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*SchdLaunchRcvyTime*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
