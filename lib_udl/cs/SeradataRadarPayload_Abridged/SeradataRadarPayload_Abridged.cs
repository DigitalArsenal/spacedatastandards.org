// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Details for an radar payload from  Seradata.
public struct SeradataRadarPayload_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SeradataRadarPayload_Abridged GetRootAsSeradataRadarPayload_Abridged(ByteBuffer _bb) { return GetRootAsSeradataRadarPayload_Abridged(_bb, new SeradataRadarPayload_Abridged()); }
  public static SeradataRadarPayload_Abridged GetRootAsSeradataRadarPayload_Abridged(ByteBuffer _bb, SeradataRadarPayload_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SeradataRadarPayload_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SERA"); }
  public static bool VerifySeradataRadarPayload_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SERA", false, SeradataRadarPayload_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SeradataRadarPayload_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATARADARPAYLOAD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: 12345
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string SpacecraftId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpacecraftIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSpacecraftIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSpacecraftIdArray() { return __p.__vector_as_array<byte>(8); }
  /// UUID of the Sensor record.
  /// Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(10); }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string HostedForCompanyOrgId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHostedForCompanyOrgIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetHostedForCompanyOrgIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetHostedForCompanyOrgIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Radar category, e.g. SAR, Surface Search, etc.
  /// Example: /// Example: SAR
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string Category { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCategoryBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCategoryBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCategoryArray() { return __p.__vector_as_array<byte>(16); }
  /// Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
  /// Example: /// Example: ALT
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string Name { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(18); }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: X
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string FrequencyBand { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFrequencyBandBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetFrequencyBandBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetFrequencyBandArray() { return __p.__vector_as_array<byte>(20); }
  /// Frequency in giga hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Frequency { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Wave length in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double WaveLength { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Best resolution in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double BestResolution { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Swath width in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double SwathWidth { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Recorder size, e.g. 256.
  /// Example: /// Example: 256
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string RecorderSize { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecorderSizeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetRecorderSizeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetRecorderSizeArray() { return __p.__vector_as_array<byte>(30); }
  /// Field of view of this radar in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double FieldOfView { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Field of regard of this radar in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double FieldOfRegard { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Point method for this radar, e.g. Spacecraft.
  /// Example: /// Example: Spacecraft
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string PointingMethod { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPointingMethodBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPointingMethodBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPointingMethodArray() { return __p.__vector_as_array<byte>(36); }
  /// Ground Station info for this payload.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GroundStations { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundStationsBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetGroundStationsBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetGroundStationsArray() { return __p.__vector_as_array<byte>(38); }
  /// Ground Station Locations for this payload.
  /// Example: /// Example: 51,42N-44,35E
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string GroundStationLocations { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGroundStationLocationsBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetGroundStationLocationsBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetGroundStationLocationsArray() { return __p.__vector_as_array<byte>(40); }
  /// Transmit polarization, e.g. Lin Dual, Lin vert, etc.
  /// Example: /// Example: Lin Dual
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string TransmitPolarization { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransmitPolarizationBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTransmitPolarizationBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTransmitPolarizationArray() { return __p.__vector_as_array<byte>(42); }
  /// Receive polarization, e.g. Lin Dual, Lin vert, etc.
  /// Example: /// Example: Lin Dual
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string ReceivePolarization { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceivePolarizationBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetReceivePolarizationBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetReceivePolarizationArray() { return __p.__vector_as_array<byte>(44); }
  /// Duty cycle.
  /// Example: /// Example: dutyCycle
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string DutyCycle { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDutyCycleBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetDutyCycleBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetDutyCycleArray() { return __p.__vector_as_array<byte>(46); }
  /// Partner seradata-spacecraft.
  /// Example: /// Example: partnerSpacecraft
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PartnerSpacecraft { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPartnerSpacecraftBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPartnerSpacecraftBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPartnerSpacecraftArray() { return __p.__vector_as_array<byte>(48); }
  /// Constellation interferometric capability.
  /// Example: /// Example: constellationInterferometricCapability
  /// Constraints: Minimum length = 0, Maximum length = 50
  public string ConstellationInterferometricCapability { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConstellationInterferometricCapabilityBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetConstellationInterferometricCapabilityBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetConstellationInterferometricCapabilityArray() { return __p.__vector_as_array<byte>(50); }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  public string Notes { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(52); }
  /// Radar bandwidth in mega hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double Bandwidth { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(56); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(58); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(60); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(62); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(64); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SeradataRadarPayload_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(66); return o != 0 ? (SeradataRadarPayload_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SeradataRadarPayload_Abridged_dataMode_Enum.REAL; } }

  public static Offset<SeradataRadarPayload_Abridged> CreateSeradataRadarPayload_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset spacecraftIdOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset hostedForCompanyOrgIdOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      StringOffset categoryOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset frequencyBandOffset = default(StringOffset),
      double frequency = 0.0,
      double waveLength = 0.0,
      double bestResolution = 0.0,
      double swathWidth = 0.0,
      StringOffset recorderSizeOffset = default(StringOffset),
      double fieldOfView = 0.0,
      double fieldOfRegard = 0.0,
      StringOffset pointingMethodOffset = default(StringOffset),
      StringOffset groundStationsOffset = default(StringOffset),
      StringOffset groundStationLocationsOffset = default(StringOffset),
      StringOffset transmitPolarizationOffset = default(StringOffset),
      StringOffset receivePolarizationOffset = default(StringOffset),
      StringOffset dutyCycleOffset = default(StringOffset),
      StringOffset partnerSpacecraftOffset = default(StringOffset),
      StringOffset constellationInterferometricCapabilityOffset = default(StringOffset),
      StringOffset notesOffset = default(StringOffset),
      double bandwidth = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      SeradataRadarPayload_Abridged_dataMode_Enum dataMode = SeradataRadarPayload_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(32);
    SeradataRadarPayload_Abridged.AddBandwidth(builder, bandwidth);
    SeradataRadarPayload_Abridged.AddFieldOfRegard(builder, fieldOfRegard);
    SeradataRadarPayload_Abridged.AddFieldOfView(builder, fieldOfView);
    SeradataRadarPayload_Abridged.AddSwathWidth(builder, swathWidth);
    SeradataRadarPayload_Abridged.AddBestResolution(builder, bestResolution);
    SeradataRadarPayload_Abridged.AddWaveLength(builder, waveLength);
    SeradataRadarPayload_Abridged.AddFrequency(builder, frequency);
    SeradataRadarPayload_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    SeradataRadarPayload_Abridged.AddOrigin(builder, originOffset);
    SeradataRadarPayload_Abridged.AddSource(builder, sourceOffset);
    SeradataRadarPayload_Abridged.AddCreatedBy(builder, createdByOffset);
    SeradataRadarPayload_Abridged.AddCreatedAt(builder, createdAtOffset);
    SeradataRadarPayload_Abridged.AddNotes(builder, notesOffset);
    SeradataRadarPayload_Abridged.AddConstellationInterferometricCapability(builder, constellationInterferometricCapabilityOffset);
    SeradataRadarPayload_Abridged.AddPartnerSpacecraft(builder, partnerSpacecraftOffset);
    SeradataRadarPayload_Abridged.AddDutyCycle(builder, dutyCycleOffset);
    SeradataRadarPayload_Abridged.AddReceivePolarization(builder, receivePolarizationOffset);
    SeradataRadarPayload_Abridged.AddTransmitPolarization(builder, transmitPolarizationOffset);
    SeradataRadarPayload_Abridged.AddGroundStationLocations(builder, groundStationLocationsOffset);
    SeradataRadarPayload_Abridged.AddGroundStations(builder, groundStationsOffset);
    SeradataRadarPayload_Abridged.AddPointingMethod(builder, pointingMethodOffset);
    SeradataRadarPayload_Abridged.AddRecorderSize(builder, recorderSizeOffset);
    SeradataRadarPayload_Abridged.AddFrequencyBand(builder, frequencyBandOffset);
    SeradataRadarPayload_Abridged.AddName(builder, nameOffset);
    SeradataRadarPayload_Abridged.AddCategory(builder, categoryOffset);
    SeradataRadarPayload_Abridged.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SeradataRadarPayload_Abridged.AddHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
    SeradataRadarPayload_Abridged.AddIdSensor(builder, idSensorOffset);
    SeradataRadarPayload_Abridged.AddSpacecraftId(builder, spacecraftIdOffset);
    SeradataRadarPayload_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    SeradataRadarPayload_Abridged.AddId(builder, idOffset);
    SeradataRadarPayload_Abridged.AddDataMode(builder, dataMode);
    return SeradataRadarPayload_Abridged.EndSeradataRadarPayload_Abridged(builder);
  }

  public static void StartSeradataRadarPayload_Abridged(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSpacecraftId(FlatBufferBuilder builder, StringOffset spacecraftIdOffset) { builder.AddOffset(2, spacecraftIdOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(3, idSensorOffset.Value, 0); }
  public static void AddHostedForCompanyOrgId(FlatBufferBuilder builder, StringOffset hostedForCompanyOrgIdOffset) { builder.AddOffset(4, hostedForCompanyOrgIdOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(5, manufacturerOrgIdOffset.Value, 0); }
  public static void AddCategory(FlatBufferBuilder builder, StringOffset categoryOffset) { builder.AddOffset(6, categoryOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(7, nameOffset.Value, 0); }
  public static void AddFrequencyBand(FlatBufferBuilder builder, StringOffset frequencyBandOffset) { builder.AddOffset(8, frequencyBandOffset.Value, 0); }
  public static void AddFrequency(FlatBufferBuilder builder, double frequency) { builder.AddDouble(9, frequency, 0.0); }
  public static void AddWaveLength(FlatBufferBuilder builder, double waveLength) { builder.AddDouble(10, waveLength, 0.0); }
  public static void AddBestResolution(FlatBufferBuilder builder, double bestResolution) { builder.AddDouble(11, bestResolution, 0.0); }
  public static void AddSwathWidth(FlatBufferBuilder builder, double swathWidth) { builder.AddDouble(12, swathWidth, 0.0); }
  public static void AddRecorderSize(FlatBufferBuilder builder, StringOffset recorderSizeOffset) { builder.AddOffset(13, recorderSizeOffset.Value, 0); }
  public static void AddFieldOfView(FlatBufferBuilder builder, double fieldOfView) { builder.AddDouble(14, fieldOfView, 0.0); }
  public static void AddFieldOfRegard(FlatBufferBuilder builder, double fieldOfRegard) { builder.AddDouble(15, fieldOfRegard, 0.0); }
  public static void AddPointingMethod(FlatBufferBuilder builder, StringOffset pointingMethodOffset) { builder.AddOffset(16, pointingMethodOffset.Value, 0); }
  public static void AddGroundStations(FlatBufferBuilder builder, StringOffset groundStationsOffset) { builder.AddOffset(17, groundStationsOffset.Value, 0); }
  public static void AddGroundStationLocations(FlatBufferBuilder builder, StringOffset groundStationLocationsOffset) { builder.AddOffset(18, groundStationLocationsOffset.Value, 0); }
  public static void AddTransmitPolarization(FlatBufferBuilder builder, StringOffset transmitPolarizationOffset) { builder.AddOffset(19, transmitPolarizationOffset.Value, 0); }
  public static void AddReceivePolarization(FlatBufferBuilder builder, StringOffset receivePolarizationOffset) { builder.AddOffset(20, receivePolarizationOffset.Value, 0); }
  public static void AddDutyCycle(FlatBufferBuilder builder, StringOffset dutyCycleOffset) { builder.AddOffset(21, dutyCycleOffset.Value, 0); }
  public static void AddPartnerSpacecraft(FlatBufferBuilder builder, StringOffset partnerSpacecraftOffset) { builder.AddOffset(22, partnerSpacecraftOffset.Value, 0); }
  public static void AddConstellationInterferometricCapability(FlatBufferBuilder builder, StringOffset constellationInterferometricCapabilityOffset) { builder.AddOffset(23, constellationInterferometricCapabilityOffset.Value, 0); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(24, notesOffset.Value, 0); }
  public static void AddBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.AddDouble(25, bandwidth, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(26, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(27, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(28, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(29, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(30, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SeradataRadarPayload_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(31, (sbyte)dataMode, 0); }
  public static Offset<SeradataRadarPayload_Abridged> EndSeradataRadarPayload_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SeradataRadarPayload_Abridged>(o);
  }
  public static void FinishSeradataRadarPayload_AbridgedBuffer(FlatBufferBuilder builder, Offset<SeradataRadarPayload_Abridged> offset) { builder.Finish(offset.Value, "SERA"); }
  public static void FinishSizePrefixedSeradataRadarPayload_AbridgedBuffer(FlatBufferBuilder builder, Offset<SeradataRadarPayload_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SERA"); }
  public SeradataRadarPayload_AbridgedT UnPack() {
    var _o = new SeradataRadarPayload_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SeradataRadarPayload_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SpacecraftId = this.SpacecraftId;
    _o.IdSensor = this.IdSensor;
    _o.HostedForCompanyOrgId = this.HostedForCompanyOrgId;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.Category = this.Category;
    _o.Name = this.Name;
    _o.FrequencyBand = this.FrequencyBand;
    _o.Frequency = this.Frequency;
    _o.WaveLength = this.WaveLength;
    _o.BestResolution = this.BestResolution;
    _o.SwathWidth = this.SwathWidth;
    _o.RecorderSize = this.RecorderSize;
    _o.FieldOfView = this.FieldOfView;
    _o.FieldOfRegard = this.FieldOfRegard;
    _o.PointingMethod = this.PointingMethod;
    _o.GroundStations = this.GroundStations;
    _o.GroundStationLocations = this.GroundStationLocations;
    _o.TransmitPolarization = this.TransmitPolarization;
    _o.ReceivePolarization = this.ReceivePolarization;
    _o.DutyCycle = this.DutyCycle;
    _o.PartnerSpacecraft = this.PartnerSpacecraft;
    _o.ConstellationInterferometricCapability = this.ConstellationInterferometricCapability;
    _o.Notes = this.Notes;
    _o.Bandwidth = this.Bandwidth;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<SeradataRadarPayload_Abridged> Pack(FlatBufferBuilder builder, SeradataRadarPayload_AbridgedT _o) {
    if (_o == null) return default(Offset<SeradataRadarPayload_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _spacecraftId = _o.SpacecraftId == null ? default(StringOffset) : builder.CreateString(_o.SpacecraftId);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _hostedForCompanyOrgId = _o.HostedForCompanyOrgId == null ? default(StringOffset) : builder.CreateString(_o.HostedForCompanyOrgId);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _category = _o.Category == null ? default(StringOffset) : builder.CreateString(_o.Category);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _frequencyBand = _o.FrequencyBand == null ? default(StringOffset) : builder.CreateString(_o.FrequencyBand);
    var _recorderSize = _o.RecorderSize == null ? default(StringOffset) : builder.CreateString(_o.RecorderSize);
    var _pointingMethod = _o.PointingMethod == null ? default(StringOffset) : builder.CreateString(_o.PointingMethod);
    var _groundStations = _o.GroundStations == null ? default(StringOffset) : builder.CreateString(_o.GroundStations);
    var _groundStationLocations = _o.GroundStationLocations == null ? default(StringOffset) : builder.CreateString(_o.GroundStationLocations);
    var _transmitPolarization = _o.TransmitPolarization == null ? default(StringOffset) : builder.CreateString(_o.TransmitPolarization);
    var _receivePolarization = _o.ReceivePolarization == null ? default(StringOffset) : builder.CreateString(_o.ReceivePolarization);
    var _dutyCycle = _o.DutyCycle == null ? default(StringOffset) : builder.CreateString(_o.DutyCycle);
    var _partnerSpacecraft = _o.PartnerSpacecraft == null ? default(StringOffset) : builder.CreateString(_o.PartnerSpacecraft);
    var _constellationInterferometricCapability = _o.ConstellationInterferometricCapability == null ? default(StringOffset) : builder.CreateString(_o.ConstellationInterferometricCapability);
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSeradataRadarPayload_Abridged(
      builder,
      _id,
      _classificationMarking,
      _spacecraftId,
      _idSensor,
      _hostedForCompanyOrgId,
      _manufacturerOrgId,
      _category,
      _name,
      _frequencyBand,
      _o.Frequency,
      _o.WaveLength,
      _o.BestResolution,
      _o.SwathWidth,
      _recorderSize,
      _o.FieldOfView,
      _o.FieldOfRegard,
      _pointingMethod,
      _groundStations,
      _groundStationLocations,
      _transmitPolarization,
      _receivePolarization,
      _dutyCycle,
      _partnerSpacecraft,
      _constellationInterferometricCapability,
      _notes,
      _o.Bandwidth,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class SeradataRadarPayload_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string SpacecraftId { get; set; }
  public string IdSensor { get; set; }
  public string HostedForCompanyOrgId { get; set; }
  public string ManufacturerOrgId { get; set; }
  public string Category { get; set; }
  public string Name { get; set; }
  public string FrequencyBand { get; set; }
  public double Frequency { get; set; }
  public double WaveLength { get; set; }
  public double BestResolution { get; set; }
  public double SwathWidth { get; set; }
  public string RecorderSize { get; set; }
  public double FieldOfView { get; set; }
  public double FieldOfRegard { get; set; }
  public string PointingMethod { get; set; }
  public string GroundStations { get; set; }
  public string GroundStationLocations { get; set; }
  public string TransmitPolarization { get; set; }
  public string ReceivePolarization { get; set; }
  public string DutyCycle { get; set; }
  public string PartnerSpacecraft { get; set; }
  public string ConstellationInterferometricCapability { get; set; }
  public string Notes { get; set; }
  public double Bandwidth { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public SeradataRadarPayload_Abridged_dataMode_Enum DataMode { get; set; }

  public SeradataRadarPayload_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.SpacecraftId = null;
    this.IdSensor = null;
    this.HostedForCompanyOrgId = null;
    this.ManufacturerOrgId = null;
    this.Category = null;
    this.Name = null;
    this.FrequencyBand = null;
    this.Frequency = 0.0;
    this.WaveLength = 0.0;
    this.BestResolution = 0.0;
    this.SwathWidth = 0.0;
    this.RecorderSize = null;
    this.FieldOfView = 0.0;
    this.FieldOfRegard = 0.0;
    this.PointingMethod = null;
    this.GroundStations = null;
    this.GroundStationLocations = null;
    this.TransmitPolarization = null;
    this.ReceivePolarization = null;
    this.DutyCycle = null;
    this.PartnerSpacecraft = null;
    this.ConstellationInterferometricCapability = null;
    this.Notes = null;
    this.Bandwidth = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = SeradataRadarPayload_Abridged_dataMode_Enum.REAL;
  }
  public static SeradataRadarPayload_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return SeradataRadarPayload_Abridged.GetRootAsSeradataRadarPayload_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SeradataRadarPayload_Abridged.FinishSeradataRadarPayload_AbridgedBuffer(fbb, SeradataRadarPayload_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SeradataRadarPayload_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*SpacecraftId*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 12 /*HostedForCompanyOrgId*/, false)
      && verifier.VerifyString(tablePos, 14 /*ManufacturerOrgId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Category*/, false)
      && verifier.VerifyString(tablePos, 18 /*Name*/, false)
      && verifier.VerifyString(tablePos, 20 /*FrequencyBand*/, false)
      && verifier.VerifyField(tablePos, 22 /*Frequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*WaveLength*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*BestResolution*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*SwathWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 30 /*RecorderSize*/, false)
      && verifier.VerifyField(tablePos, 32 /*FieldOfView*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*FieldOfRegard*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 36 /*PointingMethod*/, false)
      && verifier.VerifyString(tablePos, 38 /*GroundStations*/, false)
      && verifier.VerifyString(tablePos, 40 /*GroundStationLocations*/, false)
      && verifier.VerifyString(tablePos, 42 /*TransmitPolarization*/, false)
      && verifier.VerifyString(tablePos, 44 /*ReceivePolarization*/, false)
      && verifier.VerifyString(tablePos, 46 /*DutyCycle*/, false)
      && verifier.VerifyString(tablePos, 48 /*PartnerSpacecraft*/, false)
      && verifier.VerifyString(tablePos, 50 /*ConstellationInterferometricCapability*/, false)
      && verifier.VerifyString(tablePos, 52 /*Notes*/, false)
      && verifier.VerifyField(tablePos, 54 /*Bandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 58 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 60 /*Source*/, false)
      && verifier.VerifyString(tablePos, 62 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 64 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 66 /*DataMode*/, 1 /*SeradataRadarPayload_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
