// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
public struct MtiDwell_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MtiDwell_Ingest GetRootAsMtiDwell_Ingest(ByteBuffer _bb) { return GetRootAsMtiDwell_Ingest(_bb, new MtiDwell_Ingest()); }
  public static MtiDwell_Ingest GetRootAsMtiDwell_Ingest(ByteBuffer _bb, MtiDwell_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MtiDwell_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MTID"); }
  public static bool VerifyMtiDwell_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MTID", false, MtiDwell_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MtiDwell_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D2 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D3 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag indicating the last dwell of the revisit.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool D4 { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D5 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  public long D6 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// North-South position of the sensor at the temporal center of the dwell, in degrees.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double D7 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public double D8 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D9 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double D10 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double D11 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D12 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D13 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D14 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double D15 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Ground speed of the sensor at the time of the dwell, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D16 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Velocity of the sensor in the vertical direction, in decimeters per second.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int D17 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of the estimate of the sensor track, in degrees.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int D18 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of estimate of the sensor speed, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D19 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int D20 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  public double D21 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pitch angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D22 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Roll angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D23 { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D24 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D25 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D26 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D27 { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D28 { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D29 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  public double D30 { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int D31 { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string D32(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int D32Length { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Dwell timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Dwellts { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDwelltsBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetDwelltsBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetDwelltsArray() { return __p.__vector_as_array<byte>(66); }

  public static Offset<MtiDwell_Ingest> CreateMtiDwell_Ingest(FlatBufferBuilder builder,
      int d2 = 0,
      int d3 = 0,
      bool d4 = false,
      int d5 = 0,
      long d6 = 0,
      double d7 = 0.0,
      double d8 = 0.0,
      int d9 = 0,
      double d10 = 0.0,
      double d11 = 0.0,
      int d12 = 0,
      int d13 = 0,
      int d14 = 0,
      double d15 = 0.0,
      int d16 = 0,
      int d17 = 0,
      int d18 = 0,
      int d19 = 0,
      int d20 = 0,
      double d21 = 0.0,
      double d22 = 0.0,
      double d23 = 0.0,
      double d24 = 0.0,
      double d25 = 0.0,
      double d26 = 0.0,
      double d27 = 0.0,
      double d28 = 0.0,
      double d29 = 0.0,
      double d30 = 0.0,
      int d31 = 0,
      VectorOffset d32Offset = default(VectorOffset),
      StringOffset dwelltsOffset = default(StringOffset)) {
    builder.StartTable(32);
    MtiDwell_Ingest.AddD30(builder, d30);
    MtiDwell_Ingest.AddD29(builder, d29);
    MtiDwell_Ingest.AddD28(builder, d28);
    MtiDwell_Ingest.AddD27(builder, d27);
    MtiDwell_Ingest.AddD26(builder, d26);
    MtiDwell_Ingest.AddD25(builder, d25);
    MtiDwell_Ingest.AddD24(builder, d24);
    MtiDwell_Ingest.AddD23(builder, d23);
    MtiDwell_Ingest.AddD22(builder, d22);
    MtiDwell_Ingest.AddD21(builder, d21);
    MtiDwell_Ingest.AddD15(builder, d15);
    MtiDwell_Ingest.AddD11(builder, d11);
    MtiDwell_Ingest.AddD10(builder, d10);
    MtiDwell_Ingest.AddD8(builder, d8);
    MtiDwell_Ingest.AddD7(builder, d7);
    MtiDwell_Ingest.AddD6(builder, d6);
    MtiDwell_Ingest.AddDwellts(builder, dwelltsOffset);
    MtiDwell_Ingest.AddD32(builder, d32Offset);
    MtiDwell_Ingest.AddD31(builder, d31);
    MtiDwell_Ingest.AddD20(builder, d20);
    MtiDwell_Ingest.AddD19(builder, d19);
    MtiDwell_Ingest.AddD18(builder, d18);
    MtiDwell_Ingest.AddD17(builder, d17);
    MtiDwell_Ingest.AddD16(builder, d16);
    MtiDwell_Ingest.AddD14(builder, d14);
    MtiDwell_Ingest.AddD13(builder, d13);
    MtiDwell_Ingest.AddD12(builder, d12);
    MtiDwell_Ingest.AddD9(builder, d9);
    MtiDwell_Ingest.AddD5(builder, d5);
    MtiDwell_Ingest.AddD3(builder, d3);
    MtiDwell_Ingest.AddD2(builder, d2);
    MtiDwell_Ingest.AddD4(builder, d4);
    return MtiDwell_Ingest.EndMtiDwell_Ingest(builder);
  }

  public static void StartMtiDwell_Ingest(FlatBufferBuilder builder) { builder.StartTable(32); }
  public static void AddD2(FlatBufferBuilder builder, int d2) { builder.AddInt(0, d2, 0); }
  public static void AddD3(FlatBufferBuilder builder, int d3) { builder.AddInt(1, d3, 0); }
  public static void AddD4(FlatBufferBuilder builder, bool d4) { builder.AddBool(2, d4, false); }
  public static void AddD5(FlatBufferBuilder builder, int d5) { builder.AddInt(3, d5, 0); }
  public static void AddD6(FlatBufferBuilder builder, long d6) { builder.AddLong(4, d6, 0); }
  public static void AddD7(FlatBufferBuilder builder, double d7) { builder.AddDouble(5, d7, 0.0); }
  public static void AddD8(FlatBufferBuilder builder, double d8) { builder.AddDouble(6, d8, 0.0); }
  public static void AddD9(FlatBufferBuilder builder, int d9) { builder.AddInt(7, d9, 0); }
  public static void AddD10(FlatBufferBuilder builder, double d10) { builder.AddDouble(8, d10, 0.0); }
  public static void AddD11(FlatBufferBuilder builder, double d11) { builder.AddDouble(9, d11, 0.0); }
  public static void AddD12(FlatBufferBuilder builder, int d12) { builder.AddInt(10, d12, 0); }
  public static void AddD13(FlatBufferBuilder builder, int d13) { builder.AddInt(11, d13, 0); }
  public static void AddD14(FlatBufferBuilder builder, int d14) { builder.AddInt(12, d14, 0); }
  public static void AddD15(FlatBufferBuilder builder, double d15) { builder.AddDouble(13, d15, 0.0); }
  public static void AddD16(FlatBufferBuilder builder, int d16) { builder.AddInt(14, d16, 0); }
  public static void AddD17(FlatBufferBuilder builder, int d17) { builder.AddInt(15, d17, 0); }
  public static void AddD18(FlatBufferBuilder builder, int d18) { builder.AddInt(16, d18, 0); }
  public static void AddD19(FlatBufferBuilder builder, int d19) { builder.AddInt(17, d19, 0); }
  public static void AddD20(FlatBufferBuilder builder, int d20) { builder.AddInt(18, d20, 0); }
  public static void AddD21(FlatBufferBuilder builder, double d21) { builder.AddDouble(19, d21, 0.0); }
  public static void AddD22(FlatBufferBuilder builder, double d22) { builder.AddDouble(20, d22, 0.0); }
  public static void AddD23(FlatBufferBuilder builder, double d23) { builder.AddDouble(21, d23, 0.0); }
  public static void AddD24(FlatBufferBuilder builder, double d24) { builder.AddDouble(22, d24, 0.0); }
  public static void AddD25(FlatBufferBuilder builder, double d25) { builder.AddDouble(23, d25, 0.0); }
  public static void AddD26(FlatBufferBuilder builder, double d26) { builder.AddDouble(24, d26, 0.0); }
  public static void AddD27(FlatBufferBuilder builder, double d27) { builder.AddDouble(25, d27, 0.0); }
  public static void AddD28(FlatBufferBuilder builder, double d28) { builder.AddDouble(26, d28, 0.0); }
  public static void AddD29(FlatBufferBuilder builder, double d29) { builder.AddDouble(27, d29, 0.0); }
  public static void AddD30(FlatBufferBuilder builder, double d30) { builder.AddDouble(28, d30, 0.0); }
  public static void AddD31(FlatBufferBuilder builder, int d31) { builder.AddInt(29, d31, 0); }
  public static void AddD32(FlatBufferBuilder builder, VectorOffset d32Offset) { builder.AddOffset(30, d32Offset.Value, 0); }
  public static VectorOffset CreateD32Vector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateD32VectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateD32VectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateD32VectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartD32Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDwellts(FlatBufferBuilder builder, StringOffset dwelltsOffset) { builder.AddOffset(31, dwelltsOffset.Value, 0); }
  public static Offset<MtiDwell_Ingest> EndMtiDwell_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MtiDwell_Ingest>(o);
  }
  public static void FinishMtiDwell_IngestBuffer(FlatBufferBuilder builder, Offset<MtiDwell_Ingest> offset) { builder.Finish(offset.Value, "MTID"); }
  public static void FinishSizePrefixedMtiDwell_IngestBuffer(FlatBufferBuilder builder, Offset<MtiDwell_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "MTID"); }
  public MtiDwell_IngestT UnPack() {
    var _o = new MtiDwell_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MtiDwell_IngestT _o) {
    _o.D2 = this.D2;
    _o.D3 = this.D3;
    _o.D4 = this.D4;
    _o.D5 = this.D5;
    _o.D6 = this.D6;
    _o.D7 = this.D7;
    _o.D8 = this.D8;
    _o.D9 = this.D9;
    _o.D10 = this.D10;
    _o.D11 = this.D11;
    _o.D12 = this.D12;
    _o.D13 = this.D13;
    _o.D14 = this.D14;
    _o.D15 = this.D15;
    _o.D16 = this.D16;
    _o.D17 = this.D17;
    _o.D18 = this.D18;
    _o.D19 = this.D19;
    _o.D20 = this.D20;
    _o.D21 = this.D21;
    _o.D22 = this.D22;
    _o.D23 = this.D23;
    _o.D24 = this.D24;
    _o.D25 = this.D25;
    _o.D26 = this.D26;
    _o.D27 = this.D27;
    _o.D28 = this.D28;
    _o.D29 = this.D29;
    _o.D30 = this.D30;
    _o.D31 = this.D31;
    _o.D32 = new List<string>();
    for (var _j = 0; _j < this.D32Length; ++_j) {_o.D32.Add(this.D32(_j));}
    _o.Dwellts = this.Dwellts;
  }
  public static Offset<MtiDwell_Ingest> Pack(FlatBufferBuilder builder, MtiDwell_IngestT _o) {
    if (_o == null) return default(Offset<MtiDwell_Ingest>);
    var _d32 = default(VectorOffset);
    if (_o.D32 != null) {
      var __d32 = new StringOffset[_o.D32.Count];
      for (var _j = 0; _j < __d32.Length; ++_j) { __d32[_j] = builder.CreateString(_o.D32[_j]); }
      _d32 = CreateD32Vector(builder, __d32);
    }
    var _dwellts = _o.Dwellts == null ? default(StringOffset) : builder.CreateString(_o.Dwellts);
    return CreateMtiDwell_Ingest(
      builder,
      _o.D2,
      _o.D3,
      _o.D4,
      _o.D5,
      _o.D6,
      _o.D7,
      _o.D8,
      _o.D9,
      _o.D10,
      _o.D11,
      _o.D12,
      _o.D13,
      _o.D14,
      _o.D15,
      _o.D16,
      _o.D17,
      _o.D18,
      _o.D19,
      _o.D20,
      _o.D21,
      _o.D22,
      _o.D23,
      _o.D24,
      _o.D25,
      _o.D26,
      _o.D27,
      _o.D28,
      _o.D29,
      _o.D30,
      _o.D31,
      _d32,
      _dwellts);
  }
}

public class MtiDwell_IngestT
{
  public int D2 { get; set; }
  public int D3 { get; set; }
  public bool D4 { get; set; }
  public int D5 { get; set; }
  public long D6 { get; set; }
  public double D7 { get; set; }
  public double D8 { get; set; }
  public int D9 { get; set; }
  public double D10 { get; set; }
  public double D11 { get; set; }
  public int D12 { get; set; }
  public int D13 { get; set; }
  public int D14 { get; set; }
  public double D15 { get; set; }
  public int D16 { get; set; }
  public int D17 { get; set; }
  public int D18 { get; set; }
  public int D19 { get; set; }
  public int D20 { get; set; }
  public double D21 { get; set; }
  public double D22 { get; set; }
  public double D23 { get; set; }
  public double D24 { get; set; }
  public double D25 { get; set; }
  public double D26 { get; set; }
  public double D27 { get; set; }
  public double D28 { get; set; }
  public double D29 { get; set; }
  public double D30 { get; set; }
  public int D31 { get; set; }
  public List<string> D32 { get; set; }
  public string Dwellts { get; set; }

  public MtiDwell_IngestT() {
    this.D2 = 0;
    this.D3 = 0;
    this.D4 = false;
    this.D5 = 0;
    this.D6 = 0;
    this.D7 = 0.0;
    this.D8 = 0.0;
    this.D9 = 0;
    this.D10 = 0.0;
    this.D11 = 0.0;
    this.D12 = 0;
    this.D13 = 0;
    this.D14 = 0;
    this.D15 = 0.0;
    this.D16 = 0;
    this.D17 = 0;
    this.D18 = 0;
    this.D19 = 0;
    this.D20 = 0;
    this.D21 = 0.0;
    this.D22 = 0.0;
    this.D23 = 0.0;
    this.D24 = 0.0;
    this.D25 = 0.0;
    this.D26 = 0.0;
    this.D27 = 0.0;
    this.D28 = 0.0;
    this.D29 = 0.0;
    this.D30 = 0.0;
    this.D31 = 0;
    this.D32 = null;
    this.Dwellts = null;
  }
  public static MtiDwell_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return MtiDwell_Ingest.GetRootAsMtiDwell_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MtiDwell_Ingest.FinishMtiDwell_IngestBuffer(fbb, MtiDwell_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MtiDwell_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*D2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*D3*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*D4*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*D5*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*D6*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*D7*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*D8*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*D9*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*D10*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*D11*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*D12*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*D13*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*D14*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*D15*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*D16*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*D17*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 36 /*D18*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 38 /*D19*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*D20*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*D21*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*D22*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*D23*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*D24*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*D25*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*D26*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*D27*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*D28*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*D29*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*D30*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*D31*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*D32*/, false)
      && verifier.VerifyString(tablePos, 66 /*Dwellts*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
