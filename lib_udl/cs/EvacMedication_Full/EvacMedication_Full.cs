// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Medication specifics.
public struct EvacMedication_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EvacMedication_Full GetRootAsEvacMedication_Full(ByteBuffer _bb) { return GetRootAsEvacMedication_Full(_bb, new EvacMedication_Full()); }
  public static EvacMedication_Full GetRootAsEvacMedication_Full(ByteBuffer _bb, EvacMedication_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EvacMedication_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvacMedication_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, EvacMedication_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvacMedication_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
  /// Example: /// Example: TYLENOL
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  /// Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: ARM LEFT BACK
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string BodyPart { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBodyPartBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBodyPartBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBodyPartArray() { return __p.__vector_as_array<byte>(6); }
  /// Quantity of medicine or drug administered or recommended to be taken at a particular time.
  /// Example: /// Example: 800mg
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Dose { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDoseBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDoseBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDoseArray() { return __p.__vector_as_array<byte>(8); }
  /// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
  /// Example: /// Example: ORAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AdminRoute { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAdminRouteBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAdminRouteBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAdminRouteArray() { return __p.__vector_as_array<byte>(10); }
  /// The time that the medication was administered in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string Time { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Additional comments on the patient's medication information.
  /// Example: /// Example: Comments on the patient's medication information.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Comments { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<EvacMedication_Full> CreateEvacMedication_Full(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      StringOffset bodyPartOffset = default(StringOffset),
      StringOffset doseOffset = default(StringOffset),
      StringOffset adminRouteOffset = default(StringOffset),
      StringOffset timeOffset = default(StringOffset),
      StringOffset commentsOffset = default(StringOffset)) {
    builder.StartTable(6);
    EvacMedication_Full.AddComments(builder, commentsOffset);
    EvacMedication_Full.AddTime(builder, timeOffset);
    EvacMedication_Full.AddAdminRoute(builder, adminRouteOffset);
    EvacMedication_Full.AddDose(builder, doseOffset);
    EvacMedication_Full.AddBodyPart(builder, bodyPartOffset);
    EvacMedication_Full.AddType(builder, typeOffset);
    return EvacMedication_Full.EndEvacMedication_Full(builder);
  }

  public static void StartEvacMedication_Full(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddBodyPart(FlatBufferBuilder builder, StringOffset bodyPartOffset) { builder.AddOffset(1, bodyPartOffset.Value, 0); }
  public static void AddDose(FlatBufferBuilder builder, StringOffset doseOffset) { builder.AddOffset(2, doseOffset.Value, 0); }
  public static void AddAdminRoute(FlatBufferBuilder builder, StringOffset adminRouteOffset) { builder.AddOffset(3, adminRouteOffset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, StringOffset timeOffset) { builder.AddOffset(4, timeOffset.Value, 0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(5, commentsOffset.Value, 0); }
  public static Offset<EvacMedication_Full> EndEvacMedication_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EvacMedication_Full>(o);
  }
  public static void FinishEvacMedication_FullBuffer(FlatBufferBuilder builder, Offset<EvacMedication_Full> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvacMedication_FullBuffer(FlatBufferBuilder builder, Offset<EvacMedication_Full> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public EvacMedication_FullT UnPack() {
    var _o = new EvacMedication_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EvacMedication_FullT _o) {
    _o.Type = this.Type;
    _o.BodyPart = this.BodyPart;
    _o.Dose = this.Dose;
    _o.AdminRoute = this.AdminRoute;
    _o.Time = this.Time;
    _o.Comments = this.Comments;
  }
  public static Offset<EvacMedication_Full> Pack(FlatBufferBuilder builder, EvacMedication_FullT _o) {
    if (_o == null) return default(Offset<EvacMedication_Full>);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _bodyPart = _o.BodyPart == null ? default(StringOffset) : builder.CreateString(_o.BodyPart);
    var _dose = _o.Dose == null ? default(StringOffset) : builder.CreateString(_o.Dose);
    var _adminRoute = _o.AdminRoute == null ? default(StringOffset) : builder.CreateString(_o.AdminRoute);
    var _time = _o.Time == null ? default(StringOffset) : builder.CreateString(_o.Time);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    return CreateEvacMedication_Full(
      builder,
      _type,
      _bodyPart,
      _dose,
      _adminRoute,
      _time,
      _comments);
  }
}

public class EvacMedication_FullT
{
  public string Type { get; set; }
  public string BodyPart { get; set; }
  public string Dose { get; set; }
  public string AdminRoute { get; set; }
  public string Time { get; set; }
  public string Comments { get; set; }

  public EvacMedication_FullT() {
    this.Type = null;
    this.BodyPart = null;
    this.Dose = null;
    this.AdminRoute = null;
    this.Time = null;
    this.Comments = null;
  }
  public static EvacMedication_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return EvacMedication_Full.GetRootAsEvacMedication_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EvacMedication_Full.FinishEvacMedication_FullBuffer(fbb, EvacMedication_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EvacMedication_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyString(tablePos, 6 /*BodyPart*/, false)
      && verifier.VerifyString(tablePos, 8 /*Dose*/, false)
      && verifier.VerifyString(tablePos, 10 /*AdminRoute*/, false)
      && verifier.VerifyString(tablePos, 12 /*Time*/, false)
      && verifier.VerifyString(tablePos, 14 /*Comments*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
