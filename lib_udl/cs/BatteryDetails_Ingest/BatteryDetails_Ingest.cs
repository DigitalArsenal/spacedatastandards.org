// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
public struct BatteryDetails_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BatteryDetails_Ingest GetRootAsBatteryDetails_Ingest(ByteBuffer _bb) { return GetRootAsBatteryDetails_Ingest(_bb, new BatteryDetails_Ingest()); }
  public static BatteryDetails_Ingest GetRootAsBatteryDetails_Ingest(ByteBuffer _bb, BatteryDetails_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool BatteryDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "BATT"); }
  public static bool VerifyBatteryDetails_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("BATT", false, BatteryDetails_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BatteryDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BATTERYDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Identifier of the parent battery type record.
  /// Example: /// Example: BATTERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdBattery { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBatteryBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdBatteryBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdBatteryArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
  /// Example: /// Example: Ni-Cd
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Technology { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTechnologyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTechnologyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTechnologyArray() { return __p.__vector_as_array<byte>(10); }
  /// Battery capacity in Ah.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Capacity { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Depth of discharge as a percentage/fraction.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  public double DischargeDepth { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Battery model number or name.
  /// Example: /// Example: 11212
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Model { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetModelArray() { return __p.__vector_as_array<byte>(16); }
  /// Battery description/notes.
  /// Example: /// Example: example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Description { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(18); }
  /// ID of the organization that manufactures the battery.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ManufacturerOrgId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetManufacturerOrgIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetManufacturerOrgIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetManufacturerOrgIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(22); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(24); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(26); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(28); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(30); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public BatteryDetails_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(32); return o != 0 ? (BatteryDetails_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : BatteryDetails_Ingest_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BatteryDetails_Ingest> CreateBatteryDetails_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idBatteryOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset technologyOffset = default(StringOffset),
      double capacity = 0.0,
      double dischargeDepth = 0.0,
      StringOffset modelOffset = default(StringOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset manufacturerOrgIdOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      BatteryDetails_Ingest_dataMode_Enum dataMode = BatteryDetails_Ingest_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(16);
    BatteryDetails_Ingest.AddDischargeDepth(builder, dischargeDepth);
    BatteryDetails_Ingest.AddCapacity(builder, capacity);
    BatteryDetails_Ingest.AddTags(builder, tagsOffset);
    BatteryDetails_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    BatteryDetails_Ingest.AddOrigin(builder, originOffset);
    BatteryDetails_Ingest.AddSource(builder, sourceOffset);
    BatteryDetails_Ingest.AddCreatedBy(builder, createdByOffset);
    BatteryDetails_Ingest.AddCreatedAt(builder, createdAtOffset);
    BatteryDetails_Ingest.AddManufacturerOrgId(builder, manufacturerOrgIdOffset);
    BatteryDetails_Ingest.AddDescription(builder, descriptionOffset);
    BatteryDetails_Ingest.AddModel(builder, modelOffset);
    BatteryDetails_Ingest.AddTechnology(builder, technologyOffset);
    BatteryDetails_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    BatteryDetails_Ingest.AddIdBattery(builder, idBatteryOffset);
    BatteryDetails_Ingest.AddId(builder, idOffset);
    BatteryDetails_Ingest.AddDataMode(builder, dataMode);
    return BatteryDetails_Ingest.EndBatteryDetails_Ingest(builder);
  }

  public static void StartBatteryDetails_Ingest(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdBattery(FlatBufferBuilder builder, StringOffset idBatteryOffset) { builder.AddOffset(1, idBatteryOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddTechnology(FlatBufferBuilder builder, StringOffset technologyOffset) { builder.AddOffset(3, technologyOffset.Value, 0); }
  public static void AddCapacity(FlatBufferBuilder builder, double capacity) { builder.AddDouble(4, capacity, 0.0); }
  public static void AddDischargeDepth(FlatBufferBuilder builder, double dischargeDepth) { builder.AddDouble(5, dischargeDepth, 0.0); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(6, modelOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(7, descriptionOffset.Value, 0); }
  public static void AddManufacturerOrgId(FlatBufferBuilder builder, StringOffset manufacturerOrgIdOffset) { builder.AddOffset(8, manufacturerOrgIdOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(9, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(10, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(11, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(12, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(13, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, BatteryDetails_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(14, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(15, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BatteryDetails_Ingest> EndBatteryDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BatteryDetails_Ingest>(o);
  }
  public static void FinishBatteryDetails_IngestBuffer(FlatBufferBuilder builder, Offset<BatteryDetails_Ingest> offset) { builder.Finish(offset.Value, "BATT"); }
  public static void FinishSizePrefixedBatteryDetails_IngestBuffer(FlatBufferBuilder builder, Offset<BatteryDetails_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "BATT"); }
  public BatteryDetails_IngestT UnPack() {
    var _o = new BatteryDetails_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BatteryDetails_IngestT _o) {
    _o.Id = this.Id;
    _o.IdBattery = this.IdBattery;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Technology = this.Technology;
    _o.Capacity = this.Capacity;
    _o.DischargeDepth = this.DischargeDepth;
    _o.Model = this.Model;
    _o.Description = this.Description;
    _o.ManufacturerOrgId = this.ManufacturerOrgId;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
  }
  public static Offset<BatteryDetails_Ingest> Pack(FlatBufferBuilder builder, BatteryDetails_IngestT _o) {
    if (_o == null) return default(Offset<BatteryDetails_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idBattery = _o.IdBattery == null ? default(StringOffset) : builder.CreateString(_o.IdBattery);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _technology = _o.Technology == null ? default(StringOffset) : builder.CreateString(_o.Technology);
    var _model = _o.Model == null ? default(StringOffset) : builder.CreateString(_o.Model);
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _manufacturerOrgId = _o.ManufacturerOrgId == null ? default(StringOffset) : builder.CreateString(_o.ManufacturerOrgId);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    return CreateBatteryDetails_Ingest(
      builder,
      _id,
      _idBattery,
      _classificationMarking,
      _technology,
      _o.Capacity,
      _o.DischargeDepth,
      _model,
      _description,
      _manufacturerOrgId,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _tags);
  }
}

public class BatteryDetails_IngestT
{
  public string Id { get; set; }
  public string IdBattery { get; set; }
  public string ClassificationMarking { get; set; }
  public string Technology { get; set; }
  public double Capacity { get; set; }
  public double DischargeDepth { get; set; }
  public string Model { get; set; }
  public string Description { get; set; }
  public string ManufacturerOrgId { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public BatteryDetails_Ingest_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }

  public BatteryDetails_IngestT() {
    this.Id = null;
    this.IdBattery = null;
    this.ClassificationMarking = null;
    this.Technology = null;
    this.Capacity = 0.0;
    this.DischargeDepth = 0.0;
    this.Model = null;
    this.Description = null;
    this.ManufacturerOrgId = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = BatteryDetails_Ingest_dataMode_Enum.REAL;
    this.Tags = null;
  }
  public static BatteryDetails_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return BatteryDetails_Ingest.GetRootAsBatteryDetails_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BatteryDetails_Ingest.FinishBatteryDetails_IngestBuffer(fbb, BatteryDetails_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class BatteryDetails_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdBattery*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*Technology*/, false)
      && verifier.VerifyField(tablePos, 12 /*Capacity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*DischargeDepth*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*Model*/, false)
      && verifier.VerifyString(tablePos, 18 /*Description*/, false)
      && verifier.VerifyString(tablePos, 20 /*ManufacturerOrgId*/, false)
      && verifier.VerifyString(tablePos, 22 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 24 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 26 /*Source*/, false)
      && verifier.VerifyString(tablePos, 28 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 30 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 32 /*DataMode*/, 1 /*BatteryDetails_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*Tags*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
