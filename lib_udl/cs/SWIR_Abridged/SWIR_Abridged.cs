// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Data representing observed short wave infrared (SWIR) measurements.
public struct SWIR_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SWIR_Abridged GetRootAsSWIR_Abridged(ByteBuffer _bb) { return GetRootAsSWIR_Abridged(_bb, new SWIR_Abridged()); }
  public static SWIR_Abridged GetRootAsSWIR_Abridged(ByteBuffer _bb, SWIR_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SWIR_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SWIR"); }
  public static bool VerifySWIR_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SWIR", false, SWIR_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SWIR_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SWIR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the target on-orbit object.
  /// Example: /// Example: 45234
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Data timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(10); }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  public double SolarPhaseAngle { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 70.55208
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 81.18191
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Location/name of the observing sensor.
  /// Example: /// Example: AeroTel
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string LocationName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetLocationNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetLocationNameArray() { return __p.__vector_as_array<byte>(18); }
  /// User comments concerning sensor or data limitations.
  /// Example: /// Example: Example Comments
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string BadWave { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBadWaveBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetBadWaveBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetBadWaveArray() { return __p.__vector_as_array<byte>(20); }
  /// Original object ID or Catalog Number provided by source.
  /// Example: /// Example: WildBlue-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(24); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(26); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SWIR_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(30); return o != 0 ? (SWIR_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SWIR_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(32); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(34); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(36); }

  public static Offset<SWIR_Abridged> CreateSWIR_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      double solarPhaseAngle = 0.0,
      double lat = 0.0,
      double lon = 0.0,
      StringOffset locationNameOffset = default(StringOffset),
      StringOffset badWaveOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      int satNo = 0,
      SWIR_Abridged_dataMode_Enum dataMode = SWIR_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(17);
    SWIR_Abridged.AddLon(builder, lon);
    SWIR_Abridged.AddLat(builder, lat);
    SWIR_Abridged.AddSolarPhaseAngle(builder, solarPhaseAngle);
    SWIR_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    SWIR_Abridged.AddCreatedBy(builder, createdByOffset);
    SWIR_Abridged.AddCreatedAt(builder, createdAtOffset);
    SWIR_Abridged.AddSatNo(builder, satNo);
    SWIR_Abridged.AddOrigin(builder, originOffset);
    SWIR_Abridged.AddSource(builder, sourceOffset);
    SWIR_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    SWIR_Abridged.AddBadWave(builder, badWaveOffset);
    SWIR_Abridged.AddLocationName(builder, locationNameOffset);
    SWIR_Abridged.AddTs(builder, tsOffset);
    SWIR_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    SWIR_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    SWIR_Abridged.AddId(builder, idOffset);
    SWIR_Abridged.AddDataMode(builder, dataMode);
    return SWIR_Abridged.EndSWIR_Abridged(builder);
  }

  public static void StartSWIR_Abridged(FlatBufferBuilder builder) { builder.StartTable(17); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(3, tsOffset.Value, 0); }
  public static void AddSolarPhaseAngle(FlatBufferBuilder builder, double solarPhaseAngle) { builder.AddDouble(4, solarPhaseAngle, 0.0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(5, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(6, lon, 0.0); }
  public static void AddLocationName(FlatBufferBuilder builder, StringOffset locationNameOffset) { builder.AddOffset(7, locationNameOffset.Value, 0); }
  public static void AddBadWave(FlatBufferBuilder builder, StringOffset badWaveOffset) { builder.AddOffset(8, badWaveOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(9, origObjectIdOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(10, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(11, originOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(12, satNo, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SWIR_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(13, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(14, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(15, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(16, origNetworkOffset.Value, 0); }
  public static Offset<SWIR_Abridged> EndSWIR_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SWIR_Abridged>(o);
  }
  public static void FinishSWIR_AbridgedBuffer(FlatBufferBuilder builder, Offset<SWIR_Abridged> offset) { builder.Finish(offset.Value, "SWIR"); }
  public static void FinishSizePrefixedSWIR_AbridgedBuffer(FlatBufferBuilder builder, Offset<SWIR_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SWIR"); }
  public SWIR_AbridgedT UnPack() {
    var _o = new SWIR_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SWIR_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.Ts = this.Ts;
    _o.SolarPhaseAngle = this.SolarPhaseAngle;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.LocationName = this.LocationName;
    _o.BadWave = this.BadWave;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.SatNo = this.SatNo;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<SWIR_Abridged> Pack(FlatBufferBuilder builder, SWIR_AbridgedT _o) {
    if (_o == null) return default(Offset<SWIR_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _locationName = _o.LocationName == null ? default(StringOffset) : builder.CreateString(_o.LocationName);
    var _badWave = _o.BadWave == null ? default(StringOffset) : builder.CreateString(_o.BadWave);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSWIR_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _ts,
      _o.SolarPhaseAngle,
      _o.Lat,
      _o.Lon,
      _locationName,
      _badWave,
      _origObjectId,
      _source,
      _origin,
      _o.SatNo,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class SWIR_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public string Ts { get; set; }
  public double SolarPhaseAngle { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string LocationName { get; set; }
  public string BadWave { get; set; }
  public string OrigObjectId { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public int SatNo { get; set; }
  public SWIR_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public SWIR_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.Ts = null;
    this.SolarPhaseAngle = 0.0;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.LocationName = null;
    this.BadWave = null;
    this.OrigObjectId = null;
    this.Source = null;
    this.Origin = null;
    this.SatNo = 0;
    this.DataMode = SWIR_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static SWIR_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return SWIR_Abridged.GetRootAsSWIR_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SWIR_Abridged.FinishSWIR_AbridgedBuffer(fbb, SWIR_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SWIR_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 10 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 12 /*SolarPhaseAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*LocationName*/, false)
      && verifier.VerifyString(tablePos, 20 /*BadWave*/, false)
      && verifier.VerifyString(tablePos, 22 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 24 /*Source*/, false)
      && verifier.VerifyString(tablePos, 26 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 28 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*DataMode*/, 1 /*SWIR_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 32 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 36 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
