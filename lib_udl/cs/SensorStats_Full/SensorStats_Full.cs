// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// SensorStats contain statistics on sensors related to observation production such as last reported observation time.
public struct SensorStats_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SensorStats_Full GetRootAsSensorStats_Full(ByteBuffer _bb) { return GetRootAsSensorStats_Full(_bb, new SensorStats_Full()); }
  public static SensorStats_Full GetRootAsSensorStats_Full(ByteBuffer _bb, SensorStats_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SensorStats_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SENS"); }
  public static bool VerifySensorStats_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SENS", false, SensorStats_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SensorStats_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORSTATS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Unique ID of the parent sensor.
  /// Example: /// Example: idSensor
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Time of last reported observation in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LastObTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLastObTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLastObTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(12); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(14); }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(16); }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(18); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(20); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SensorStats_Full_dataMode_Enum DataMode { get { int o = __p.__offset(22); return o != 0 ? (SensorStats_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SensorStats_Full_dataMode_Enum.REAL; } }

  public static Offset<SensorStats_Full> CreateSensorStats_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset lastObTimeOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      SensorStats_Full_dataMode_Enum dataMode = SensorStats_Full_dataMode_Enum.REAL) {
    builder.StartTable(10);
    SensorStats_Full.AddSource(builder, sourceOffset);
    SensorStats_Full.AddUpdatedBy(builder, updatedByOffset);
    SensorStats_Full.AddUpdatedAt(builder, updatedAtOffset);
    SensorStats_Full.AddCreatedBy(builder, createdByOffset);
    SensorStats_Full.AddCreatedAt(builder, createdAtOffset);
    SensorStats_Full.AddLastObTime(builder, lastObTimeOffset);
    SensorStats_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    SensorStats_Full.AddIdSensor(builder, idSensorOffset);
    SensorStats_Full.AddId(builder, idOffset);
    SensorStats_Full.AddDataMode(builder, dataMode);
    return SensorStats_Full.EndSensorStats_Full(builder);
  }

  public static void StartSensorStats_Full(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(1, idSensorOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddLastObTime(FlatBufferBuilder builder, StringOffset lastObTimeOffset) { builder.AddOffset(3, lastObTimeOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(4, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(5, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(6, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(7, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(8, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SensorStats_Full_dataMode_Enum dataMode) { builder.AddSbyte(9, (sbyte)dataMode, 0); }
  public static Offset<SensorStats_Full> EndSensorStats_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SensorStats_Full>(o);
  }
  public static void FinishSensorStats_FullBuffer(FlatBufferBuilder builder, Offset<SensorStats_Full> offset) { builder.Finish(offset.Value, "SENS"); }
  public static void FinishSizePrefixedSensorStats_FullBuffer(FlatBufferBuilder builder, Offset<SensorStats_Full> offset) { builder.FinishSizePrefixed(offset.Value, "SENS"); }
  public SensorStats_FullT UnPack() {
    var _o = new SensorStats_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SensorStats_FullT _o) {
    _o.Id = this.Id;
    _o.IdSensor = this.IdSensor;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.LastObTime = this.LastObTime;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
  }
  public static Offset<SensorStats_Full> Pack(FlatBufferBuilder builder, SensorStats_FullT _o) {
    if (_o == null) return default(Offset<SensorStats_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _lastObTime = _o.LastObTime == null ? default(StringOffset) : builder.CreateString(_o.LastObTime);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    return CreateSensorStats_Full(
      builder,
      _id,
      _idSensor,
      _classificationMarking,
      _lastObTime,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _o.DataMode);
  }
}

public class SensorStats_FullT
{
  public string Id { get; set; }
  public string IdSensor { get; set; }
  public string ClassificationMarking { get; set; }
  public string LastObTime { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public SensorStats_Full_dataMode_Enum DataMode { get; set; }

  public SensorStats_FullT() {
    this.Id = null;
    this.IdSensor = null;
    this.ClassificationMarking = null;
    this.LastObTime = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.DataMode = SensorStats_Full_dataMode_Enum.REAL;
  }
  public static SensorStats_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return SensorStats_Full.GetRootAsSensorStats_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SensorStats_Full.FinishSensorStats_FullBuffer(fbb, SensorStats_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SensorStats_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*LastObTime*/, false)
      && verifier.VerifyString(tablePos, 12 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 14 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 16 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 18 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 20 /*Source*/, false)
      && verifier.VerifyField(tablePos, 22 /*DataMode*/, 1 /*SensorStats_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
