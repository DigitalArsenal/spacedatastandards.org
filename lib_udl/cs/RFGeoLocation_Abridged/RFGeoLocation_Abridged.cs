// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
public struct RFGeoLocation_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFGeoLocation_Abridged GetRootAsRFGeoLocation_Abridged(ByteBuffer _bb) { return GetRootAsRFGeoLocation_Abridged(_bb, new RFGeoLocation_Abridged()); }
  public static RFGeoLocation_Abridged GetRootAsRFGeoLocation_Abridged(ByteBuffer _bb, RFGeoLocation_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFGeoLocation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RFGE"); }
  public static bool VerifyRFGeoLocation_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RFGE", false, RFGeoLocation_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFGeoLocation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The order identifier for this RF Geo Location data set.
  /// Example: /// Example: 155240
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string OrderId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrderIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOrderIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOrderIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T23:06:18.123456Z
  /// Constraints: No constraints specified.
  public string CreatedTs { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedTsBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCreatedTsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCreatedTsArray() { return __p.__vector_as_array<byte>(10); }
  /// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:58.123456Z
  /// Constraints: No constraints specified.
  public string ReceivedTs { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReceivedTsBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetReceivedTsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetReceivedTsArray() { return __p.__vector_as_array<byte>(12); }
  /// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:12:12.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:15.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
  /// Example: /// Example: HawkEye360-7
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(18); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(22); }
  /// The name of the satellite constellation.
  /// Example: /// Example: HawkEye360
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Constellation { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConstellationBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetConstellationBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetConstellationArray() { return __p.__vector_as_array<byte>(24); }
  /// The name of the signal of interest.
  /// Example: /// Example: GPS
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SignalOfInterest { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignalOfInterestBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetSignalOfInterestBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetSignalOfInterestArray() { return __p.__vector_as_array<byte>(26); }
  /// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdRFEmitter { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdRFEmitterBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetIdRFEmitterBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetIdRFEmitterArray() { return __p.__vector_as_array<byte>(28); }
  /// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
  /// Example: /// Example: ORIGRFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigRFEmitterId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigRFEmitterIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOrigRFEmitterIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOrigRFEmitterIdArray() { return __p.__vector_as_array<byte>(30); }
  /// The count of single-burst observations used for this geolocation observation.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  public int NumBursts { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The minimum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  public double MinFreq { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  public double MaxFreq { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The detected signal frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  public double CenterFreq { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 41.172
  /// Constraints: No constraints specified.
  public double DetectLat { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 37.019
  /// Constraints: No constraints specified.
  public double DetectLon { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The altitude relative to WGS-84 ellipsoid, in meters.
  /// Example: /// Example: 123.456
  /// Constraints: No constraints specified.
  public double DetectAlt { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 9435.896
  /// Constraints: No constraints specified.
  public double ConfSemiMajor { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 2751.929
  /// Constraints: No constraints specified.
  public double ConfSemiMinor { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
  /// Example: /// Example: 89.852
  /// Constraints: No constraints specified.
  public double ConfOrientation { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
  /// Example: /// Example: 81577480.056
  /// Constraints: No constraints specified.
  public double ConfArea { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Type of region as projected on the ground.
  /// Example: /// Example: MultiPolygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(54); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string Agjson { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(56); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Atext { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(58); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional external identifier referencing the entity used in the calculation of the geolocation.
  /// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PassGroupId { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPassGroupIdBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetPassGroupIdBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetPassGroupIdArray() { return __p.__vector_as_array<byte>(64); }
  /// The RFGeo algorithm type and version used in geolocation calculations.
  /// Example: /// Example: v1.0-3-gps_nb_3ball
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AlgVersion { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlgVersionBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetAlgVersionBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetAlgVersionArray() { return __p.__vector_as_array<byte>(66); }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 780180925
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(68); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(76); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(78); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(80); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(82); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RFGeoLocation_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(84); return o != 0 ? (RFGeoLocation_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFGeoLocation_Abridged_dataMode_Enum.REAL; } }

  public static Offset<RFGeoLocation_Abridged> CreateRFGeoLocation_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset orderIdOffset = default(StringOffset),
      StringOffset createdTsOffset = default(StringOffset),
      StringOffset receivedTsOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset constellationOffset = default(StringOffset),
      StringOffset signalOfInterestOffset = default(StringOffset),
      StringOffset idRFEmitterOffset = default(StringOffset),
      StringOffset origRFEmitterIdOffset = default(StringOffset),
      int numBursts = 0,
      double minFreq = 0.0,
      double maxFreq = 0.0,
      double centerFreq = 0.0,
      double detectLat = 0.0,
      double detectLon = 0.0,
      double detectAlt = 0.0,
      double confSemiMajor = 0.0,
      double confSemiMinor = 0.0,
      double confOrientation = 0.0,
      double confArea = 0.0,
      StringOffset atypeOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atextOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      StringOffset passGroupIdOffset = default(StringOffset),
      StringOffset algVersionOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      RFGeoLocation_Abridged_dataMode_Enum dataMode = RFGeoLocation_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(41);
    RFGeoLocation_Abridged.AddConfArea(builder, confArea);
    RFGeoLocation_Abridged.AddConfOrientation(builder, confOrientation);
    RFGeoLocation_Abridged.AddConfSemiMinor(builder, confSemiMinor);
    RFGeoLocation_Abridged.AddConfSemiMajor(builder, confSemiMajor);
    RFGeoLocation_Abridged.AddDetectAlt(builder, detectAlt);
    RFGeoLocation_Abridged.AddDetectLon(builder, detectLon);
    RFGeoLocation_Abridged.AddDetectLat(builder, detectLat);
    RFGeoLocation_Abridged.AddCenterFreq(builder, centerFreq);
    RFGeoLocation_Abridged.AddMaxFreq(builder, maxFreq);
    RFGeoLocation_Abridged.AddMinFreq(builder, minFreq);
    RFGeoLocation_Abridged.AddSourceDL(builder, sourceDLOffset);
    RFGeoLocation_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    RFGeoLocation_Abridged.AddOrigin(builder, originOffset);
    RFGeoLocation_Abridged.AddSource(builder, sourceOffset);
    RFGeoLocation_Abridged.AddCreatedBy(builder, createdByOffset);
    RFGeoLocation_Abridged.AddCreatedAt(builder, createdAtOffset);
    RFGeoLocation_Abridged.AddTags(builder, tagsOffset);
    RFGeoLocation_Abridged.AddExternalId(builder, externalIdOffset);
    RFGeoLocation_Abridged.AddAlgVersion(builder, algVersionOffset);
    RFGeoLocation_Abridged.AddPassGroupId(builder, passGroupIdOffset);
    RFGeoLocation_Abridged.AddAsrid(builder, asrid);
    RFGeoLocation_Abridged.AddAndims(builder, andims);
    RFGeoLocation_Abridged.AddAtext(builder, atextOffset);
    RFGeoLocation_Abridged.AddAgjson(builder, agjsonOffset);
    RFGeoLocation_Abridged.AddAtype(builder, atypeOffset);
    RFGeoLocation_Abridged.AddNumBursts(builder, numBursts);
    RFGeoLocation_Abridged.AddOrigRFEmitterId(builder, origRFEmitterIdOffset);
    RFGeoLocation_Abridged.AddIdRFEmitter(builder, idRFEmitterOffset);
    RFGeoLocation_Abridged.AddSignalOfInterest(builder, signalOfInterestOffset);
    RFGeoLocation_Abridged.AddConstellation(builder, constellationOffset);
    RFGeoLocation_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    RFGeoLocation_Abridged.AddSatNo(builder, satNo);
    RFGeoLocation_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    RFGeoLocation_Abridged.AddEndTime(builder, endTimeOffset);
    RFGeoLocation_Abridged.AddStartTime(builder, startTimeOffset);
    RFGeoLocation_Abridged.AddReceivedTs(builder, receivedTsOffset);
    RFGeoLocation_Abridged.AddCreatedTs(builder, createdTsOffset);
    RFGeoLocation_Abridged.AddOrderId(builder, orderIdOffset);
    RFGeoLocation_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    RFGeoLocation_Abridged.AddId(builder, idOffset);
    RFGeoLocation_Abridged.AddDataMode(builder, dataMode);
    return RFGeoLocation_Abridged.EndRFGeoLocation_Abridged(builder);
  }

  public static void StartRFGeoLocation_Abridged(FlatBufferBuilder builder) { builder.StartTable(41); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddOrderId(FlatBufferBuilder builder, StringOffset orderIdOffset) { builder.AddOffset(2, orderIdOffset.Value, 0); }
  public static void AddCreatedTs(FlatBufferBuilder builder, StringOffset createdTsOffset) { builder.AddOffset(3, createdTsOffset.Value, 0); }
  public static void AddReceivedTs(FlatBufferBuilder builder, StringOffset receivedTsOffset) { builder.AddOffset(4, receivedTsOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(5, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(6, endTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(7, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(8, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(9, origObjectIdOffset.Value, 0); }
  public static void AddConstellation(FlatBufferBuilder builder, StringOffset constellationOffset) { builder.AddOffset(10, constellationOffset.Value, 0); }
  public static void AddSignalOfInterest(FlatBufferBuilder builder, StringOffset signalOfInterestOffset) { builder.AddOffset(11, signalOfInterestOffset.Value, 0); }
  public static void AddIdRFEmitter(FlatBufferBuilder builder, StringOffset idRFEmitterOffset) { builder.AddOffset(12, idRFEmitterOffset.Value, 0); }
  public static void AddOrigRFEmitterId(FlatBufferBuilder builder, StringOffset origRFEmitterIdOffset) { builder.AddOffset(13, origRFEmitterIdOffset.Value, 0); }
  public static void AddNumBursts(FlatBufferBuilder builder, int numBursts) { builder.AddInt(14, numBursts, 0); }
  public static void AddMinFreq(FlatBufferBuilder builder, double minFreq) { builder.AddDouble(15, minFreq, 0.0); }
  public static void AddMaxFreq(FlatBufferBuilder builder, double maxFreq) { builder.AddDouble(16, maxFreq, 0.0); }
  public static void AddCenterFreq(FlatBufferBuilder builder, double centerFreq) { builder.AddDouble(17, centerFreq, 0.0); }
  public static void AddDetectLat(FlatBufferBuilder builder, double detectLat) { builder.AddDouble(18, detectLat, 0.0); }
  public static void AddDetectLon(FlatBufferBuilder builder, double detectLon) { builder.AddDouble(19, detectLon, 0.0); }
  public static void AddDetectAlt(FlatBufferBuilder builder, double detectAlt) { builder.AddDouble(20, detectAlt, 0.0); }
  public static void AddConfSemiMajor(FlatBufferBuilder builder, double confSemiMajor) { builder.AddDouble(21, confSemiMajor, 0.0); }
  public static void AddConfSemiMinor(FlatBufferBuilder builder, double confSemiMinor) { builder.AddDouble(22, confSemiMinor, 0.0); }
  public static void AddConfOrientation(FlatBufferBuilder builder, double confOrientation) { builder.AddDouble(23, confOrientation, 0.0); }
  public static void AddConfArea(FlatBufferBuilder builder, double confArea) { builder.AddDouble(24, confArea, 0.0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(25, atypeOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(26, agjsonOffset.Value, 0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(27, atextOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(28, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(29, asrid, 0); }
  public static void AddPassGroupId(FlatBufferBuilder builder, StringOffset passGroupIdOffset) { builder.AddOffset(30, passGroupIdOffset.Value, 0); }
  public static void AddAlgVersion(FlatBufferBuilder builder, StringOffset algVersionOffset) { builder.AddOffset(31, algVersionOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(32, externalIdOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(33, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(36, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(37, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(38, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(39, sourceDLOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RFGeoLocation_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(40, (sbyte)dataMode, 0); }
  public static Offset<RFGeoLocation_Abridged> EndRFGeoLocation_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFGeoLocation_Abridged>(o);
  }
  public static void FinishRFGeoLocation_AbridgedBuffer(FlatBufferBuilder builder, Offset<RFGeoLocation_Abridged> offset) { builder.Finish(offset.Value, "RFGE"); }
  public static void FinishSizePrefixedRFGeoLocation_AbridgedBuffer(FlatBufferBuilder builder, Offset<RFGeoLocation_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "RFGE"); }
  public RFGeoLocation_AbridgedT UnPack() {
    var _o = new RFGeoLocation_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFGeoLocation_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.OrderId = this.OrderId;
    _o.CreatedTs = this.CreatedTs;
    _o.ReceivedTs = this.ReceivedTs;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Constellation = this.Constellation;
    _o.SignalOfInterest = this.SignalOfInterest;
    _o.IdRFEmitter = this.IdRFEmitter;
    _o.OrigRFEmitterId = this.OrigRFEmitterId;
    _o.NumBursts = this.NumBursts;
    _o.MinFreq = this.MinFreq;
    _o.MaxFreq = this.MaxFreq;
    _o.CenterFreq = this.CenterFreq;
    _o.DetectLat = this.DetectLat;
    _o.DetectLon = this.DetectLon;
    _o.DetectAlt = this.DetectAlt;
    _o.ConfSemiMajor = this.ConfSemiMajor;
    _o.ConfSemiMinor = this.ConfSemiMinor;
    _o.ConfOrientation = this.ConfOrientation;
    _o.ConfArea = this.ConfArea;
    _o.Atype = this.Atype;
    _o.Agjson = this.Agjson;
    _o.Atext = this.Atext;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.PassGroupId = this.PassGroupId;
    _o.AlgVersion = this.AlgVersion;
    _o.ExternalId = this.ExternalId;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.DataMode = this.DataMode;
  }
  public static Offset<RFGeoLocation_Abridged> Pack(FlatBufferBuilder builder, RFGeoLocation_AbridgedT _o) {
    if (_o == null) return default(Offset<RFGeoLocation_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _orderId = _o.OrderId == null ? default(StringOffset) : builder.CreateString(_o.OrderId);
    var _createdTs = _o.CreatedTs == null ? default(StringOffset) : builder.CreateString(_o.CreatedTs);
    var _receivedTs = _o.ReceivedTs == null ? default(StringOffset) : builder.CreateString(_o.ReceivedTs);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _constellation = _o.Constellation == null ? default(StringOffset) : builder.CreateString(_o.Constellation);
    var _signalOfInterest = _o.SignalOfInterest == null ? default(StringOffset) : builder.CreateString(_o.SignalOfInterest);
    var _idRFEmitter = _o.IdRFEmitter == null ? default(StringOffset) : builder.CreateString(_o.IdRFEmitter);
    var _origRFEmitterId = _o.OrigRFEmitterId == null ? default(StringOffset) : builder.CreateString(_o.OrigRFEmitterId);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _passGroupId = _o.PassGroupId == null ? default(StringOffset) : builder.CreateString(_o.PassGroupId);
    var _algVersion = _o.AlgVersion == null ? default(StringOffset) : builder.CreateString(_o.AlgVersion);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    return CreateRFGeoLocation_Abridged(
      builder,
      _id,
      _classificationMarking,
      _orderId,
      _createdTs,
      _receivedTs,
      _startTime,
      _endTime,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _constellation,
      _signalOfInterest,
      _idRFEmitter,
      _origRFEmitterId,
      _o.NumBursts,
      _o.MinFreq,
      _o.MaxFreq,
      _o.CenterFreq,
      _o.DetectLat,
      _o.DetectLon,
      _o.DetectAlt,
      _o.ConfSemiMajor,
      _o.ConfSemiMinor,
      _o.ConfOrientation,
      _o.ConfArea,
      _atype,
      _agjson,
      _atext,
      _o.Andims,
      _o.Asrid,
      _passGroupId,
      _algVersion,
      _externalId,
      _tags,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _o.DataMode);
  }
}

public class RFGeoLocation_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string OrderId { get; set; }
  public string CreatedTs { get; set; }
  public string ReceivedTs { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string Constellation { get; set; }
  public string SignalOfInterest { get; set; }
  public string IdRFEmitter { get; set; }
  public string OrigRFEmitterId { get; set; }
  public int NumBursts { get; set; }
  public double MinFreq { get; set; }
  public double MaxFreq { get; set; }
  public double CenterFreq { get; set; }
  public double DetectLat { get; set; }
  public double DetectLon { get; set; }
  public double DetectAlt { get; set; }
  public double ConfSemiMajor { get; set; }
  public double ConfSemiMinor { get; set; }
  public double ConfOrientation { get; set; }
  public double ConfArea { get; set; }
  public string Atype { get; set; }
  public string Agjson { get; set; }
  public string Atext { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public string PassGroupId { get; set; }
  public string AlgVersion { get; set; }
  public string ExternalId { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public RFGeoLocation_Abridged_dataMode_Enum DataMode { get; set; }

  public RFGeoLocation_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.OrderId = null;
    this.CreatedTs = null;
    this.ReceivedTs = null;
    this.StartTime = null;
    this.EndTime = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.Constellation = null;
    this.SignalOfInterest = null;
    this.IdRFEmitter = null;
    this.OrigRFEmitterId = null;
    this.NumBursts = 0;
    this.MinFreq = 0.0;
    this.MaxFreq = 0.0;
    this.CenterFreq = 0.0;
    this.DetectLat = 0.0;
    this.DetectLon = 0.0;
    this.DetectAlt = 0.0;
    this.ConfSemiMajor = 0.0;
    this.ConfSemiMinor = 0.0;
    this.ConfOrientation = 0.0;
    this.ConfArea = 0.0;
    this.Atype = null;
    this.Agjson = null;
    this.Atext = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.PassGroupId = null;
    this.AlgVersion = null;
    this.ExternalId = null;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.DataMode = RFGeoLocation_Abridged_dataMode_Enum.REAL;
  }
  public static RFGeoLocation_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return RFGeoLocation_Abridged.GetRootAsRFGeoLocation_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFGeoLocation_Abridged.FinishRFGeoLocation_AbridgedBuffer(fbb, RFGeoLocation_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFGeoLocation_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*OrderId*/, false)
      && verifier.VerifyString(tablePos, 10 /*CreatedTs*/, false)
      && verifier.VerifyString(tablePos, 12 /*ReceivedTs*/, false)
      && verifier.VerifyString(tablePos, 14 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 16 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 20 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 24 /*Constellation*/, false)
      && verifier.VerifyString(tablePos, 26 /*SignalOfInterest*/, false)
      && verifier.VerifyString(tablePos, 28 /*IdRFEmitter*/, false)
      && verifier.VerifyString(tablePos, 30 /*OrigRFEmitterId*/, false)
      && verifier.VerifyField(tablePos, 32 /*NumBursts*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*MinFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*MaxFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*CenterFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*DetectLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DetectLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DetectAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*ConfSemiMajor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*ConfSemiMinor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*ConfOrientation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*ConfArea*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*Atype*/, false)
      && verifier.VerifyString(tablePos, 56 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 58 /*Atext*/, false)
      && verifier.VerifyField(tablePos, 60 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 64 /*PassGroupId*/, false)
      && verifier.VerifyString(tablePos, 66 /*AlgVersion*/, false)
      && verifier.VerifyString(tablePos, 68 /*ExternalId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*Source*/, false)
      && verifier.VerifyString(tablePos, 78 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 80 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 82 /*SourceDL*/, false)
      && verifier.VerifyField(tablePos, 84 /*DataMode*/, 1 /*RFGeoLocation_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
