// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Point of contacts for scheduling or modifying the route.
public struct PointOfContact_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static PointOfContact_Full GetRootAsPointOfContact_Full(ByteBuffer _bb) { return GetRootAsPointOfContact_Full(_bb, new PointOfContact_Full()); }
  public static PointOfContact_Full GetRootAsPointOfContact_Full(ByteBuffer _bb, PointOfContact_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool PointOfContact_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "POIN"); }
  public static bool VerifyPointOfContact_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("POIN", false, PointOfContact_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PointOfContact_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Sequencing field for point of contact.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int PocSequenceId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
  /// Example: /// Example: Originator
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PocTypeName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocTypeNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPocTypeNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPocTypeNameArray() { return __p.__vector_as_array<byte>(6); }
  /// The name of the contact.
  /// Example: /// Example: Fred Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PocName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPocNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPocNameArray() { return __p.__vector_as_array<byte>(8); }
  /// Office name for which the contact belongs.
  /// Example: /// Example: A34
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Office { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOfficeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOfficeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOfficeArray() { return __p.__vector_as_array<byte>(10); }
  /// The username of the contact.
  /// Example: /// Example: fgsmith
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Username { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUsernameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetUsernameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetUsernameArray() { return __p.__vector_as_array<byte>(12); }
  /// The rank of contact.
  /// Example: /// Example: Capt
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Rank { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRankBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRankBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRankArray() { return __p.__vector_as_array<byte>(14); }
  /// Organization name for which the contact belongs.
  /// Example: /// Example: HQAF
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PocOrg { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPocOrgBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPocOrgBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPocOrgArray() { return __p.__vector_as_array<byte>(16); }
  /// Phone number of the contact.
  /// Example: /// Example: 8675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Phone { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPhoneBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPhoneBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPhoneArray() { return __p.__vector_as_array<byte>(18); }
  /// Text of the remark.
  /// Example: /// Example: POC remark.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Remark { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemarkBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetRemarkBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetRemarkArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<PointOfContact_Full> CreatePointOfContact_Full(FlatBufferBuilder builder,
      int pocSequenceId = 0,
      StringOffset pocTypeNameOffset = default(StringOffset),
      StringOffset pocNameOffset = default(StringOffset),
      StringOffset officeOffset = default(StringOffset),
      StringOffset usernameOffset = default(StringOffset),
      StringOffset rankOffset = default(StringOffset),
      StringOffset pocOrgOffset = default(StringOffset),
      StringOffset phoneOffset = default(StringOffset),
      StringOffset remarkOffset = default(StringOffset)) {
    builder.StartTable(9);
    PointOfContact_Full.AddRemark(builder, remarkOffset);
    PointOfContact_Full.AddPhone(builder, phoneOffset);
    PointOfContact_Full.AddPocOrg(builder, pocOrgOffset);
    PointOfContact_Full.AddRank(builder, rankOffset);
    PointOfContact_Full.AddUsername(builder, usernameOffset);
    PointOfContact_Full.AddOffice(builder, officeOffset);
    PointOfContact_Full.AddPocName(builder, pocNameOffset);
    PointOfContact_Full.AddPocTypeName(builder, pocTypeNameOffset);
    PointOfContact_Full.AddPocSequenceId(builder, pocSequenceId);
    return PointOfContact_Full.EndPointOfContact_Full(builder);
  }

  public static void StartPointOfContact_Full(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddPocSequenceId(FlatBufferBuilder builder, int pocSequenceId) { builder.AddInt(0, pocSequenceId, 0); }
  public static void AddPocTypeName(FlatBufferBuilder builder, StringOffset pocTypeNameOffset) { builder.AddOffset(1, pocTypeNameOffset.Value, 0); }
  public static void AddPocName(FlatBufferBuilder builder, StringOffset pocNameOffset) { builder.AddOffset(2, pocNameOffset.Value, 0); }
  public static void AddOffice(FlatBufferBuilder builder, StringOffset officeOffset) { builder.AddOffset(3, officeOffset.Value, 0); }
  public static void AddUsername(FlatBufferBuilder builder, StringOffset usernameOffset) { builder.AddOffset(4, usernameOffset.Value, 0); }
  public static void AddRank(FlatBufferBuilder builder, StringOffset rankOffset) { builder.AddOffset(5, rankOffset.Value, 0); }
  public static void AddPocOrg(FlatBufferBuilder builder, StringOffset pocOrgOffset) { builder.AddOffset(6, pocOrgOffset.Value, 0); }
  public static void AddPhone(FlatBufferBuilder builder, StringOffset phoneOffset) { builder.AddOffset(7, phoneOffset.Value, 0); }
  public static void AddRemark(FlatBufferBuilder builder, StringOffset remarkOffset) { builder.AddOffset(8, remarkOffset.Value, 0); }
  public static Offset<PointOfContact_Full> EndPointOfContact_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PointOfContact_Full>(o);
  }
  public static void FinishPointOfContact_FullBuffer(FlatBufferBuilder builder, Offset<PointOfContact_Full> offset) { builder.Finish(offset.Value, "POIN"); }
  public static void FinishSizePrefixedPointOfContact_FullBuffer(FlatBufferBuilder builder, Offset<PointOfContact_Full> offset) { builder.FinishSizePrefixed(offset.Value, "POIN"); }
  public PointOfContact_FullT UnPack() {
    var _o = new PointOfContact_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PointOfContact_FullT _o) {
    _o.PocSequenceId = this.PocSequenceId;
    _o.PocTypeName = this.PocTypeName;
    _o.PocName = this.PocName;
    _o.Office = this.Office;
    _o.Username = this.Username;
    _o.Rank = this.Rank;
    _o.PocOrg = this.PocOrg;
    _o.Phone = this.Phone;
    _o.Remark = this.Remark;
  }
  public static Offset<PointOfContact_Full> Pack(FlatBufferBuilder builder, PointOfContact_FullT _o) {
    if (_o == null) return default(Offset<PointOfContact_Full>);
    var _pocTypeName = _o.PocTypeName == null ? default(StringOffset) : builder.CreateString(_o.PocTypeName);
    var _pocName = _o.PocName == null ? default(StringOffset) : builder.CreateString(_o.PocName);
    var _office = _o.Office == null ? default(StringOffset) : builder.CreateString(_o.Office);
    var _username = _o.Username == null ? default(StringOffset) : builder.CreateString(_o.Username);
    var _rank = _o.Rank == null ? default(StringOffset) : builder.CreateString(_o.Rank);
    var _pocOrg = _o.PocOrg == null ? default(StringOffset) : builder.CreateString(_o.PocOrg);
    var _phone = _o.Phone == null ? default(StringOffset) : builder.CreateString(_o.Phone);
    var _remark = _o.Remark == null ? default(StringOffset) : builder.CreateString(_o.Remark);
    return CreatePointOfContact_Full(
      builder,
      _o.PocSequenceId,
      _pocTypeName,
      _pocName,
      _office,
      _username,
      _rank,
      _pocOrg,
      _phone,
      _remark);
  }
}

public class PointOfContact_FullT
{
  public int PocSequenceId { get; set; }
  public string PocTypeName { get; set; }
  public string PocName { get; set; }
  public string Office { get; set; }
  public string Username { get; set; }
  public string Rank { get; set; }
  public string PocOrg { get; set; }
  public string Phone { get; set; }
  public string Remark { get; set; }

  public PointOfContact_FullT() {
    this.PocSequenceId = 0;
    this.PocTypeName = null;
    this.PocName = null;
    this.Office = null;
    this.Username = null;
    this.Rank = null;
    this.PocOrg = null;
    this.Phone = null;
    this.Remark = null;
  }
  public static PointOfContact_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return PointOfContact_Full.GetRootAsPointOfContact_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PointOfContact_Full.FinishPointOfContact_FullBuffer(fbb, PointOfContact_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PointOfContact_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*PocSequenceId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*PocTypeName*/, false)
      && verifier.VerifyString(tablePos, 8 /*PocName*/, false)
      && verifier.VerifyString(tablePos, 10 /*Office*/, false)
      && verifier.VerifyString(tablePos, 12 /*Username*/, false)
      && verifier.VerifyString(tablePos, 14 /*Rank*/, false)
      && verifier.VerifyString(tablePos, 16 /*PocOrg*/, false)
      && verifier.VerifyString(tablePos, 18 /*Phone*/, false)
      && verifier.VerifyString(tablePos, 20 /*Remark*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
