// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
public struct POI_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static POI_Ingest GetRootAsPOI_Ingest(ByteBuffer _bb) { return GetRootAsPOI_Ingest(_bb, new POI_Ingest()); }
  public static POI_Ingest GetRootAsPOI_Ingest(ByteBuffer _bb, POI_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool POI_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "POII"); }
  public static bool VerifyPOI_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("POII", false, POI_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public POI_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
  /// Example: /// Example: BDA
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Pps { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPpsBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPpsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPpsArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional mission ID related to the POI.
  /// Example: /// Example: MSN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Msnid { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnidBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMsnidBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMsnidArray() { return __p.__vector_as_array<byte>(10); }
  /// Priority of the  POI target object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int Pri { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
  /// Example: /// Example: TRK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Trkid { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkidBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTrkidBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTrkidArray() { return __p.__vector_as_array<byte>(14); }
  /// Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
  /// Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
  /// Constraints: No constraints specified.
  public string IdWeatherReport(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IdWeatherReportLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Poiid { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPoiidBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPoiidBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPoiidArray() { return __p.__vector_as_array<byte>(18); }
  /// Name of the POI target object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Name { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(20); }
  /// Description of the POI target object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Desc { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(22); }
  /// Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Spec { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSpecBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSpecArray() { return __p.__vector_as_array<byte>(24); }
  /// Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Ident { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetIdentBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetIdentArray() { return __p.__vector_as_array<byte>(26); }
  /// POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
  /// Example: /// Example: SURFACE
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Env { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnvBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEnvBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEnvArray() { return __p.__vector_as_array<byte>(28); }
  /// POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Plat { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetPlatBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetPlatArray() { return __p.__vector_as_array<byte>(30); }
  /// The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
  /// Example: /// Example: TRAINING
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Activity { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivityBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetActivityBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetActivityArray() { return __p.__vector_as_array<byte>(32); }
  /// Activity/POI timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(34); }
  /// Start time of event validity (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Start { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetStartBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetStartArray() { return __p.__vector_as_array<byte>(36); }
  /// Stale timestamp (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Stale { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStaleBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetStaleBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetStaleArray() { return __p.__vector_as_array<byte>(38); }
  /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: h-g-i-g-o
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string How { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHowBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetHowBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetHowArray() { return __p.__vector_as_array<byte>(40); }
  /// Event type, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: a-h-G
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Type { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(42); }
  /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Az { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double El { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Le { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Ce { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
  /// Example: /// Example: [125.5, 85.1, 125.75]
  /// Constraints: No constraints specified.
  public string Elle(int j) { int o = __p.__offset(58); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ElleLength { get { int o = __p.__offset(58); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Cntct { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCntctBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetCntctBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetCntctArray() { return __p.__vector_as_array<byte>(60); }
  /// POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double Conf { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// List of URLs to before/after images of this Point of Interest entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  public string Urls(int j) { int o = __p.__offset(64); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UrlsLength { get { int o = __p.__offset(64); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Area { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAreaBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetAreaBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetAreaArray() { return __p.__vector_as_array<byte>(66); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string Atext { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtextBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetAtextBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetAtextArray() { return __p.__vector_as_array<byte>(68); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string Agjson { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAgjsonBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetAgjsonBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetAgjsonArray() { return __p.__vector_as_array<byte>(70); }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Atype { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAtypeBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetAtypeBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetAtypeArray() { return __p.__vector_as_array<byte>(72); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Andims { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int Asrid { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(78); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(80); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(82); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(84); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public POI_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(86); return o != 0 ? (POI_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : POI_Ingest_dataMode_Enum.REAL; } }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(88); }
  /// Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
  /// Example: /// Example: ['GROUP1', 'GROUP2']
  /// Constraints: No constraints specified.
  public string Groups(int j) { int o = __p.__offset(90); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GroupsLength { get { int o = __p.__offset(90); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// ID/name of the platform or entity providing the POI data.
  /// Example: /// Example: PLATFORM_NAME
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Asset { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAssetBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetAssetBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetAssetArray() { return __p.__vector_as_array<byte>(92); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(94); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(94); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['TYPE1', 'TYPE2']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(96); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(96); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(98); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(98); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The Basic Encyclopedia Number associated with the POI, if applicable.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string BeNumber { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeNumberBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetBeNumberBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetBeNumberArray() { return __p.__vector_as_array<byte>(100); }
  /// The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Orientation { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(104); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(106); }

  public static Offset<POI_Ingest> CreatePOI_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset ppsOffset = default(StringOffset),
      StringOffset msnidOffset = default(StringOffset),
      int pri = 0,
      StringOffset trkidOffset = default(StringOffset),
      VectorOffset idWeatherReportOffset = default(VectorOffset),
      StringOffset poiidOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      StringOffset specOffset = default(StringOffset),
      StringOffset identOffset = default(StringOffset),
      StringOffset envOffset = default(StringOffset),
      StringOffset platOffset = default(StringOffset),
      StringOffset activityOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      StringOffset startOffset = default(StringOffset),
      StringOffset staleOffset = default(StringOffset),
      StringOffset howOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double az = 0.0,
      double el = 0.0,
      double le = 0.0,
      double ce = 0.0,
      VectorOffset elleOffset = default(VectorOffset),
      StringOffset cntctOffset = default(StringOffset),
      double conf = 0.0,
      VectorOffset urlsOffset = default(VectorOffset),
      StringOffset areaOffset = default(StringOffset),
      StringOffset atextOffset = default(StringOffset),
      StringOffset agjsonOffset = default(StringOffset),
      StringOffset atypeOffset = default(StringOffset),
      int andims = 0,
      int asrid = 0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      POI_Ingest_dataMode_Enum dataMode = POI_Ingest_dataMode_Enum.REAL,
      StringOffset originOffset = default(StringOffset),
      VectorOffset groupsOffset = default(VectorOffset),
      StringOffset assetOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset beNumberOffset = default(StringOffset),
      double orientation = 0.0,
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset)) {
    builder.StartTable(52);
    POI_Ingest.AddOrientation(builder, orientation);
    POI_Ingest.AddConf(builder, conf);
    POI_Ingest.AddCe(builder, ce);
    POI_Ingest.AddLe(builder, le);
    POI_Ingest.AddEl(builder, el);
    POI_Ingest.AddAz(builder, az);
    POI_Ingest.AddAlt(builder, alt);
    POI_Ingest.AddLon(builder, lon);
    POI_Ingest.AddLat(builder, lat);
    POI_Ingest.AddTransactionId(builder, transactionIdOffset);
    POI_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    POI_Ingest.AddBeNumber(builder, beNumberOffset);
    POI_Ingest.AddSrcIds(builder, srcIdsOffset);
    POI_Ingest.AddSrcTyps(builder, srcTypsOffset);
    POI_Ingest.AddTags(builder, tagsOffset);
    POI_Ingest.AddAsset(builder, assetOffset);
    POI_Ingest.AddGroups(builder, groupsOffset);
    POI_Ingest.AddOrigin(builder, originOffset);
    POI_Ingest.AddSource(builder, sourceOffset);
    POI_Ingest.AddSourceDL(builder, sourceDLOffset);
    POI_Ingest.AddCreatedBy(builder, createdByOffset);
    POI_Ingest.AddCreatedAt(builder, createdAtOffset);
    POI_Ingest.AddAsrid(builder, asrid);
    POI_Ingest.AddAndims(builder, andims);
    POI_Ingest.AddAtype(builder, atypeOffset);
    POI_Ingest.AddAgjson(builder, agjsonOffset);
    POI_Ingest.AddAtext(builder, atextOffset);
    POI_Ingest.AddArea(builder, areaOffset);
    POI_Ingest.AddUrls(builder, urlsOffset);
    POI_Ingest.AddCntct(builder, cntctOffset);
    POI_Ingest.AddElle(builder, elleOffset);
    POI_Ingest.AddType(builder, typeOffset);
    POI_Ingest.AddHow(builder, howOffset);
    POI_Ingest.AddStale(builder, staleOffset);
    POI_Ingest.AddStart(builder, startOffset);
    POI_Ingest.AddTs(builder, tsOffset);
    POI_Ingest.AddActivity(builder, activityOffset);
    POI_Ingest.AddPlat(builder, platOffset);
    POI_Ingest.AddEnv(builder, envOffset);
    POI_Ingest.AddIdent(builder, identOffset);
    POI_Ingest.AddSpec(builder, specOffset);
    POI_Ingest.AddDesc(builder, descOffset);
    POI_Ingest.AddName(builder, nameOffset);
    POI_Ingest.AddPoiid(builder, poiidOffset);
    POI_Ingest.AddIdWeatherReport(builder, idWeatherReportOffset);
    POI_Ingest.AddTrkid(builder, trkidOffset);
    POI_Ingest.AddPri(builder, pri);
    POI_Ingest.AddMsnid(builder, msnidOffset);
    POI_Ingest.AddPps(builder, ppsOffset);
    POI_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    POI_Ingest.AddId(builder, idOffset);
    POI_Ingest.AddDataMode(builder, dataMode);
    return POI_Ingest.EndPOI_Ingest(builder);
  }

  public static void StartPOI_Ingest(FlatBufferBuilder builder) { builder.StartTable(52); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddPps(FlatBufferBuilder builder, StringOffset ppsOffset) { builder.AddOffset(2, ppsOffset.Value, 0); }
  public static void AddMsnid(FlatBufferBuilder builder, StringOffset msnidOffset) { builder.AddOffset(3, msnidOffset.Value, 0); }
  public static void AddPri(FlatBufferBuilder builder, int pri) { builder.AddInt(4, pri, 0); }
  public static void AddTrkid(FlatBufferBuilder builder, StringOffset trkidOffset) { builder.AddOffset(5, trkidOffset.Value, 0); }
  public static void AddIdWeatherReport(FlatBufferBuilder builder, VectorOffset idWeatherReportOffset) { builder.AddOffset(6, idWeatherReportOffset.Value, 0); }
  public static VectorOffset CreateIdWeatherReportVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIdWeatherReportVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdWeatherReportVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdWeatherReportVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdWeatherReportVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPoiid(FlatBufferBuilder builder, StringOffset poiidOffset) { builder.AddOffset(7, poiidOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(8, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(9, descOffset.Value, 0); }
  public static void AddSpec(FlatBufferBuilder builder, StringOffset specOffset) { builder.AddOffset(10, specOffset.Value, 0); }
  public static void AddIdent(FlatBufferBuilder builder, StringOffset identOffset) { builder.AddOffset(11, identOffset.Value, 0); }
  public static void AddEnv(FlatBufferBuilder builder, StringOffset envOffset) { builder.AddOffset(12, envOffset.Value, 0); }
  public static void AddPlat(FlatBufferBuilder builder, StringOffset platOffset) { builder.AddOffset(13, platOffset.Value, 0); }
  public static void AddActivity(FlatBufferBuilder builder, StringOffset activityOffset) { builder.AddOffset(14, activityOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(15, tsOffset.Value, 0); }
  public static void AddStart(FlatBufferBuilder builder, StringOffset startOffset) { builder.AddOffset(16, startOffset.Value, 0); }
  public static void AddStale(FlatBufferBuilder builder, StringOffset staleOffset) { builder.AddOffset(17, staleOffset.Value, 0); }
  public static void AddHow(FlatBufferBuilder builder, StringOffset howOffset) { builder.AddOffset(18, howOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(19, typeOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(20, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(21, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(22, alt, 0.0); }
  public static void AddAz(FlatBufferBuilder builder, double az) { builder.AddDouble(23, az, 0.0); }
  public static void AddEl(FlatBufferBuilder builder, double el) { builder.AddDouble(24, el, 0.0); }
  public static void AddLe(FlatBufferBuilder builder, double le) { builder.AddDouble(25, le, 0.0); }
  public static void AddCe(FlatBufferBuilder builder, double ce) { builder.AddDouble(26, ce, 0.0); }
  public static void AddElle(FlatBufferBuilder builder, VectorOffset elleOffset) { builder.AddOffset(27, elleOffset.Value, 0); }
  public static VectorOffset CreateElleVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateElleVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElleVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateElleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartElleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCntct(FlatBufferBuilder builder, StringOffset cntctOffset) { builder.AddOffset(28, cntctOffset.Value, 0); }
  public static void AddConf(FlatBufferBuilder builder, double conf) { builder.AddDouble(29, conf, 0.0); }
  public static void AddUrls(FlatBufferBuilder builder, VectorOffset urlsOffset) { builder.AddOffset(30, urlsOffset.Value, 0); }
  public static VectorOffset CreateUrlsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUrlsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUrlsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArea(FlatBufferBuilder builder, StringOffset areaOffset) { builder.AddOffset(31, areaOffset.Value, 0); }
  public static void AddAtext(FlatBufferBuilder builder, StringOffset atextOffset) { builder.AddOffset(32, atextOffset.Value, 0); }
  public static void AddAgjson(FlatBufferBuilder builder, StringOffset agjsonOffset) { builder.AddOffset(33, agjsonOffset.Value, 0); }
  public static void AddAtype(FlatBufferBuilder builder, StringOffset atypeOffset) { builder.AddOffset(34, atypeOffset.Value, 0); }
  public static void AddAndims(FlatBufferBuilder builder, int andims) { builder.AddInt(35, andims, 0); }
  public static void AddAsrid(FlatBufferBuilder builder, int asrid) { builder.AddInt(36, asrid, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(37, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(38, createdByOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(39, sourceDLOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(40, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, POI_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(41, (sbyte)dataMode, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(42, originOffset.Value, 0); }
  public static void AddGroups(FlatBufferBuilder builder, VectorOffset groupsOffset) { builder.AddOffset(43, groupsOffset.Value, 0); }
  public static VectorOffset CreateGroupsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAsset(FlatBufferBuilder builder, StringOffset assetOffset) { builder.AddOffset(44, assetOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(45, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(46, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(47, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBeNumber(FlatBufferBuilder builder, StringOffset beNumberOffset) { builder.AddOffset(48, beNumberOffset.Value, 0); }
  public static void AddOrientation(FlatBufferBuilder builder, double orientation) { builder.AddDouble(49, orientation, 0.0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(50, origNetworkOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(51, transactionIdOffset.Value, 0); }
  public static Offset<POI_Ingest> EndPOI_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<POI_Ingest>(o);
  }
  public static void FinishPOI_IngestBuffer(FlatBufferBuilder builder, Offset<POI_Ingest> offset) { builder.Finish(offset.Value, "POII"); }
  public static void FinishSizePrefixedPOI_IngestBuffer(FlatBufferBuilder builder, Offset<POI_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "POII"); }
  public POI_IngestT UnPack() {
    var _o = new POI_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(POI_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Pps = this.Pps;
    _o.Msnid = this.Msnid;
    _o.Pri = this.Pri;
    _o.Trkid = this.Trkid;
    _o.IdWeatherReport = new List<string>();
    for (var _j = 0; _j < this.IdWeatherReportLength; ++_j) {_o.IdWeatherReport.Add(this.IdWeatherReport(_j));}
    _o.Poiid = this.Poiid;
    _o.Name = this.Name;
    _o.Desc = this.Desc;
    _o.Spec = this.Spec;
    _o.Ident = this.Ident;
    _o.Env = this.Env;
    _o.Plat = this.Plat;
    _o.Activity = this.Activity;
    _o.Ts = this.Ts;
    _o.Start = this.Start;
    _o.Stale = this.Stale;
    _o.How = this.How;
    _o.Type = this.Type;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.Az = this.Az;
    _o.El = this.El;
    _o.Le = this.Le;
    _o.Ce = this.Ce;
    _o.Elle = new List<string>();
    for (var _j = 0; _j < this.ElleLength; ++_j) {_o.Elle.Add(this.Elle(_j));}
    _o.Cntct = this.Cntct;
    _o.Conf = this.Conf;
    _o.Urls = new List<string>();
    for (var _j = 0; _j < this.UrlsLength; ++_j) {_o.Urls.Add(this.Urls(_j));}
    _o.Area = this.Area;
    _o.Atext = this.Atext;
    _o.Agjson = this.Agjson;
    _o.Atype = this.Atype;
    _o.Andims = this.Andims;
    _o.Asrid = this.Asrid;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.SourceDL = this.SourceDL;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.Origin = this.Origin;
    _o.Groups = new List<string>();
    for (var _j = 0; _j < this.GroupsLength; ++_j) {_o.Groups.Add(this.Groups(_j));}
    _o.Asset = this.Asset;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.BeNumber = this.BeNumber;
    _o.Orientation = this.Orientation;
    _o.OrigNetwork = this.OrigNetwork;
    _o.TransactionId = this.TransactionId;
  }
  public static Offset<POI_Ingest> Pack(FlatBufferBuilder builder, POI_IngestT _o) {
    if (_o == null) return default(Offset<POI_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _pps = _o.Pps == null ? default(StringOffset) : builder.CreateString(_o.Pps);
    var _msnid = _o.Msnid == null ? default(StringOffset) : builder.CreateString(_o.Msnid);
    var _trkid = _o.Trkid == null ? default(StringOffset) : builder.CreateString(_o.Trkid);
    var _idWeatherReport = default(VectorOffset);
    if (_o.IdWeatherReport != null) {
      var __idWeatherReport = new StringOffset[_o.IdWeatherReport.Count];
      for (var _j = 0; _j < __idWeatherReport.Length; ++_j) { __idWeatherReport[_j] = builder.CreateString(_o.IdWeatherReport[_j]); }
      _idWeatherReport = CreateIdWeatherReportVector(builder, __idWeatherReport);
    }
    var _poiid = _o.Poiid == null ? default(StringOffset) : builder.CreateString(_o.Poiid);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _desc = _o.Desc == null ? default(StringOffset) : builder.CreateString(_o.Desc);
    var _spec = _o.Spec == null ? default(StringOffset) : builder.CreateString(_o.Spec);
    var _ident = _o.Ident == null ? default(StringOffset) : builder.CreateString(_o.Ident);
    var _env = _o.Env == null ? default(StringOffset) : builder.CreateString(_o.Env);
    var _plat = _o.Plat == null ? default(StringOffset) : builder.CreateString(_o.Plat);
    var _activity = _o.Activity == null ? default(StringOffset) : builder.CreateString(_o.Activity);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _start = _o.Start == null ? default(StringOffset) : builder.CreateString(_o.Start);
    var _stale = _o.Stale == null ? default(StringOffset) : builder.CreateString(_o.Stale);
    var _how = _o.How == null ? default(StringOffset) : builder.CreateString(_o.How);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _elle = default(VectorOffset);
    if (_o.Elle != null) {
      var __elle = new StringOffset[_o.Elle.Count];
      for (var _j = 0; _j < __elle.Length; ++_j) { __elle[_j] = builder.CreateString(_o.Elle[_j]); }
      _elle = CreateElleVector(builder, __elle);
    }
    var _cntct = _o.Cntct == null ? default(StringOffset) : builder.CreateString(_o.Cntct);
    var _urls = default(VectorOffset);
    if (_o.Urls != null) {
      var __urls = new StringOffset[_o.Urls.Count];
      for (var _j = 0; _j < __urls.Length; ++_j) { __urls[_j] = builder.CreateString(_o.Urls[_j]); }
      _urls = CreateUrlsVector(builder, __urls);
    }
    var _area = _o.Area == null ? default(StringOffset) : builder.CreateString(_o.Area);
    var _atext = _o.Atext == null ? default(StringOffset) : builder.CreateString(_o.Atext);
    var _agjson = _o.Agjson == null ? default(StringOffset) : builder.CreateString(_o.Agjson);
    var _atype = _o.Atype == null ? default(StringOffset) : builder.CreateString(_o.Atype);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _groups = default(VectorOffset);
    if (_o.Groups != null) {
      var __groups = new StringOffset[_o.Groups.Count];
      for (var _j = 0; _j < __groups.Length; ++_j) { __groups[_j] = builder.CreateString(_o.Groups[_j]); }
      _groups = CreateGroupsVector(builder, __groups);
    }
    var _asset = _o.Asset == null ? default(StringOffset) : builder.CreateString(_o.Asset);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _beNumber = _o.BeNumber == null ? default(StringOffset) : builder.CreateString(_o.BeNumber);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    return CreatePOI_Ingest(
      builder,
      _id,
      _classificationMarking,
      _pps,
      _msnid,
      _o.Pri,
      _trkid,
      _idWeatherReport,
      _poiid,
      _name,
      _desc,
      _spec,
      _ident,
      _env,
      _plat,
      _activity,
      _ts,
      _start,
      _stale,
      _how,
      _type,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.Az,
      _o.El,
      _o.Le,
      _o.Ce,
      _elle,
      _cntct,
      _o.Conf,
      _urls,
      _area,
      _atext,
      _agjson,
      _atype,
      _o.Andims,
      _o.Asrid,
      _createdAt,
      _createdBy,
      _sourceDL,
      _source,
      _o.DataMode,
      _origin,
      _groups,
      _asset,
      _tags,
      _srcTyps,
      _srcIds,
      _beNumber,
      _o.Orientation,
      _origNetwork,
      _transactionId);
  }
}

public class POI_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Pps { get; set; }
  public string Msnid { get; set; }
  public int Pri { get; set; }
  public string Trkid { get; set; }
  public List<string> IdWeatherReport { get; set; }
  public string Poiid { get; set; }
  public string Name { get; set; }
  public string Desc { get; set; }
  public string Spec { get; set; }
  public string Ident { get; set; }
  public string Env { get; set; }
  public string Plat { get; set; }
  public string Activity { get; set; }
  public string Ts { get; set; }
  public string Start { get; set; }
  public string Stale { get; set; }
  public string How { get; set; }
  public string Type { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double Az { get; set; }
  public double El { get; set; }
  public double Le { get; set; }
  public double Ce { get; set; }
  public List<string> Elle { get; set; }
  public string Cntct { get; set; }
  public double Conf { get; set; }
  public List<string> Urls { get; set; }
  public string Area { get; set; }
  public string Atext { get; set; }
  public string Agjson { get; set; }
  public string Atype { get; set; }
  public int Andims { get; set; }
  public int Asrid { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string SourceDL { get; set; }
  public string Source { get; set; }
  public POI_Ingest_dataMode_Enum DataMode { get; set; }
  public string Origin { get; set; }
  public List<string> Groups { get; set; }
  public string Asset { get; set; }
  public List<string> Tags { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string BeNumber { get; set; }
  public double Orientation { get; set; }
  public string OrigNetwork { get; set; }
  public string TransactionId { get; set; }

  public POI_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Pps = null;
    this.Msnid = null;
    this.Pri = 0;
    this.Trkid = null;
    this.IdWeatherReport = null;
    this.Poiid = null;
    this.Name = null;
    this.Desc = null;
    this.Spec = null;
    this.Ident = null;
    this.Env = null;
    this.Plat = null;
    this.Activity = null;
    this.Ts = null;
    this.Start = null;
    this.Stale = null;
    this.How = null;
    this.Type = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.Az = 0.0;
    this.El = 0.0;
    this.Le = 0.0;
    this.Ce = 0.0;
    this.Elle = null;
    this.Cntct = null;
    this.Conf = 0.0;
    this.Urls = null;
    this.Area = null;
    this.Atext = null;
    this.Agjson = null;
    this.Atype = null;
    this.Andims = 0;
    this.Asrid = 0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.SourceDL = null;
    this.Source = null;
    this.DataMode = POI_Ingest_dataMode_Enum.REAL;
    this.Origin = null;
    this.Groups = null;
    this.Asset = null;
    this.Tags = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.BeNumber = null;
    this.Orientation = 0.0;
    this.OrigNetwork = null;
    this.TransactionId = null;
  }
  public static POI_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return POI_Ingest.GetRootAsPOI_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    POI_Ingest.FinishPOI_IngestBuffer(fbb, POI_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class POI_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Pps*/, false)
      && verifier.VerifyString(tablePos, 10 /*Msnid*/, false)
      && verifier.VerifyField(tablePos, 12 /*Pri*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*Trkid*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*IdWeatherReport*/, false)
      && verifier.VerifyString(tablePos, 18 /*Poiid*/, false)
      && verifier.VerifyString(tablePos, 20 /*Name*/, false)
      && verifier.VerifyString(tablePos, 22 /*Desc*/, false)
      && verifier.VerifyString(tablePos, 24 /*Spec*/, false)
      && verifier.VerifyString(tablePos, 26 /*Ident*/, false)
      && verifier.VerifyString(tablePos, 28 /*Env*/, false)
      && verifier.VerifyString(tablePos, 30 /*Plat*/, false)
      && verifier.VerifyString(tablePos, 32 /*Activity*/, false)
      && verifier.VerifyString(tablePos, 34 /*Ts*/, false)
      && verifier.VerifyString(tablePos, 36 /*Start*/, false)
      && verifier.VerifyString(tablePos, 38 /*Stale*/, false)
      && verifier.VerifyString(tablePos, 40 /*How*/, false)
      && verifier.VerifyString(tablePos, 42 /*Type*/, false)
      && verifier.VerifyField(tablePos, 44 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Az*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*El*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Le*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Ce*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 58 /*Elle*/, false)
      && verifier.VerifyString(tablePos, 60 /*Cntct*/, false)
      && verifier.VerifyField(tablePos, 62 /*Conf*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 64 /*Urls*/, false)
      && verifier.VerifyString(tablePos, 66 /*Area*/, false)
      && verifier.VerifyString(tablePos, 68 /*Atext*/, false)
      && verifier.VerifyString(tablePos, 70 /*Agjson*/, false)
      && verifier.VerifyString(tablePos, 72 /*Atype*/, false)
      && verifier.VerifyField(tablePos, 74 /*Andims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*Asrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 78 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 80 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 82 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 84 /*Source*/, false)
      && verifier.VerifyField(tablePos, 86 /*DataMode*/, 1 /*POI_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 88 /*Origin*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 90 /*Groups*/, false)
      && verifier.VerifyString(tablePos, 92 /*Asset*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 94 /*Tags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 96 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 98 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 100 /*BeNumber*/, false)
      && verifier.VerifyField(tablePos, 102 /*Orientation*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 104 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 106 /*TransactionId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
