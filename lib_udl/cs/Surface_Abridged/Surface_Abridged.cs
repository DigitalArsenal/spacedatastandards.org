// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
public struct Surface_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Surface_Abridged GetRootAsSurface_Abridged(ByteBuffer _bb) { return GetRootAsSurface_Abridged(_bb, new Surface_Abridged()); }
  public static Surface_Abridged GetRootAsSurface_Abridged(ByteBuffer _bb, Surface_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Surface_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SURF"); }
  public static bool VerifySurface_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SURF", false, Surface_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Surface_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The surface name or identifier.
  /// Example: /// Example: West lot
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  /// The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
  /// Example: /// Example: PARKING
  /// Constraints: Minimum length = 1, Maximum length = 7
  public string Type { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(10); }
  /// The ID of the site where this surface is located.
  /// Example: /// Example: SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSite { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSiteBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdSiteBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdSiteArray() { return __p.__vector_as_array<byte>(12); }
  /// Alternate site identifier provided by the source.
  /// Example: /// Example: ORIG-SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltSiteId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltSiteIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAltSiteIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAltSiteIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Flag indicating this is the primary runway.  Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Primary { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The length of the surface type, in feet.  Applicable for runway and parking surface types.
  /// Example: /// Example: 1500
  /// Constraints: No constraints specified.
  public int LengthFt { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The landing distance available for the runway, in feet.  Applicable for runway surface types only.
  /// Example: /// Example: 475
  /// Constraints: No constraints specified.
  public int LdaFt { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The width of the surface type, in feet.
  /// Example: /// Example: 220
  /// Constraints: No constraints specified.
  public int WidthFt { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The length of the surface type, in meters.  Applicable for runway and parking surface types.
  /// Example: /// Example: 457
  /// Constraints: No constraints specified.
  public int LengthM { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The landing distance available for the runway, in meters.  Applicable for runway surface types only.
  /// Example: /// Example: 145
  /// Constraints: No constraints specified.
  public int LdaM { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The width of the surface type, in meters.
  /// Example: /// Example: 67
  /// Constraints: No constraints specified.
  public int WidthM { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The surface material (e.g. Asphalt, Concrete, Dirt).
  /// Example: /// Example: Concrete
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Material { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetMaterialBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetMaterialArray() { return __p.__vector_as_array<byte>(30); }
  /// The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Condition { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConditionBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetConditionBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetConditionArray() { return __p.__vector_as_array<byte>(32); }
  /// Raw weight bearing capacity value or pavement strength.
  /// Example: /// Example: LCN 42
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string RawWBC { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawWBCBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetRawWBCBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetRawWBCArray() { return __p.__vector_as_array<byte>(34); }
  /// Pavement classification number (PCN) and tire pressure code.
  /// Example: /// Example: 73RBWT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string Pcn { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPcnBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetPcnBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetPcnArray() { return __p.__vector_as_array<byte>(36); }
  /// Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  public int Lcn { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 143
  /// Constraints: No constraints specified.
  public int SWtKip { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 188
  /// Constraints: No constraints specified.
  public int TWtKip { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 195
  /// Constraints: No constraints specified.
  public int StWtKip { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 414
  /// Constraints: No constraints specified.
  public int TtWtKip { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 416
  /// Constraints: No constraints specified.
  public int DdWtKip { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 603
  /// Constraints: No constraints specified.
  public int SbttWtKip { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 870
  /// Constraints: No constraints specified.
  public int TdtWtkip { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 622
  /// Constraints: No constraints specified.
  public int TrtWtKip { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 833
  /// Constraints: No constraints specified.
  public int DdtWtKip { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 636
  /// Constraints: No constraints specified.
  public int SWtKN { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 836
  /// Constraints: No constraints specified.
  public int TWtKN { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 867
  /// Constraints: No constraints specified.
  public int StWtKN { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 1842
  /// Constraints: No constraints specified.
  public int TtWtKN { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 1850
  /// Constraints: No constraints specified.
  public int DdWtKN { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 2682
  /// Constraints: No constraints specified.
  public int SbttWtKN { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 3870
  /// Constraints: No constraints specified.
  public int TdtWtKN { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 2767
  /// Constraints: No constraints specified.
  public int TrtWtKN { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 3705
  /// Constraints: No constraints specified.
  public int DdtWtKN { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag indicating the surface has lighting.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Lighting { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool LightsUNKN { get { int o = __p.__offset(78); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has approach lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsAPRCH { get { int o = __p.__offset(80); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsVASI { get { int o = __p.__offset(82); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsPAPI { get { int o = __p.__offset(84); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsOLS { get { int o = __p.__offset(86); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsREIL { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsTDZL { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the runway has centerline lights. Applicable for runway surface types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool LightsCL { get { int o = __p.__offset(92); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Obstacle { get { int o = __p.__offset(94); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(96); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(98); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(98, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(98); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(98); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(100); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(100, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(100); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(100); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(102); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(102, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(102); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(102); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(104); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(104, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(104); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(104); }
  /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Surface_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(106); return o != 0 ? (Surface_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Surface_Abridged_dataMode_Enum.REAL; } }

  public static Offset<Surface_Abridged> CreateSurface_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset idSiteOffset = default(StringOffset),
      StringOffset altSiteIdOffset = default(StringOffset),
      bool primary = false,
      int lengthFt = 0,
      int ldaFt = 0,
      int widthFt = 0,
      int lengthM = 0,
      int ldaM = 0,
      int widthM = 0,
      StringOffset materialOffset = default(StringOffset),
      StringOffset conditionOffset = default(StringOffset),
      StringOffset rawWBCOffset = default(StringOffset),
      StringOffset pcnOffset = default(StringOffset),
      int lcn = 0,
      int sWtKip = 0,
      int tWtKip = 0,
      int stWtKip = 0,
      int ttWtKip = 0,
      int ddWtKip = 0,
      int sbttWtKip = 0,
      int tdtWtkip = 0,
      int trtWtKip = 0,
      int ddtWtKip = 0,
      int sWtKN = 0,
      int tWtKN = 0,
      int stWtKN = 0,
      int ttWtKN = 0,
      int ddWtKN = 0,
      int sbttWtKN = 0,
      int tdtWtKN = 0,
      int trtWtKN = 0,
      int ddtWtKN = 0,
      bool lighting = false,
      bool lightsUNKN = false,
      bool lightsAPRCH = false,
      bool lightsVASI = false,
      bool lightsPAPI = false,
      bool lightsOLS = false,
      bool lightsREIL = false,
      bool lightsTDZL = false,
      bool lightsCL = false,
      bool obstacle = false,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Surface_Abridged_dataMode_Enum dataMode = Surface_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(52);
    Surface_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Surface_Abridged.AddOrigin(builder, originOffset);
    Surface_Abridged.AddSource(builder, sourceOffset);
    Surface_Abridged.AddCreatedBy(builder, createdByOffset);
    Surface_Abridged.AddCreatedAt(builder, createdAtOffset);
    Surface_Abridged.AddDdtWtKN(builder, ddtWtKN);
    Surface_Abridged.AddTrtWtKN(builder, trtWtKN);
    Surface_Abridged.AddTdtWtKN(builder, tdtWtKN);
    Surface_Abridged.AddSbttWtKN(builder, sbttWtKN);
    Surface_Abridged.AddDdWtKN(builder, ddWtKN);
    Surface_Abridged.AddTtWtKN(builder, ttWtKN);
    Surface_Abridged.AddStWtKN(builder, stWtKN);
    Surface_Abridged.AddTWtKN(builder, tWtKN);
    Surface_Abridged.AddSWtKN(builder, sWtKN);
    Surface_Abridged.AddDdtWtKip(builder, ddtWtKip);
    Surface_Abridged.AddTrtWtKip(builder, trtWtKip);
    Surface_Abridged.AddTdtWtkip(builder, tdtWtkip);
    Surface_Abridged.AddSbttWtKip(builder, sbttWtKip);
    Surface_Abridged.AddDdWtKip(builder, ddWtKip);
    Surface_Abridged.AddTtWtKip(builder, ttWtKip);
    Surface_Abridged.AddStWtKip(builder, stWtKip);
    Surface_Abridged.AddTWtKip(builder, tWtKip);
    Surface_Abridged.AddSWtKip(builder, sWtKip);
    Surface_Abridged.AddLcn(builder, lcn);
    Surface_Abridged.AddPcn(builder, pcnOffset);
    Surface_Abridged.AddRawWBC(builder, rawWBCOffset);
    Surface_Abridged.AddCondition(builder, conditionOffset);
    Surface_Abridged.AddMaterial(builder, materialOffset);
    Surface_Abridged.AddWidthM(builder, widthM);
    Surface_Abridged.AddLdaM(builder, ldaM);
    Surface_Abridged.AddLengthM(builder, lengthM);
    Surface_Abridged.AddWidthFt(builder, widthFt);
    Surface_Abridged.AddLdaFt(builder, ldaFt);
    Surface_Abridged.AddLengthFt(builder, lengthFt);
    Surface_Abridged.AddAltSiteId(builder, altSiteIdOffset);
    Surface_Abridged.AddIdSite(builder, idSiteOffset);
    Surface_Abridged.AddType(builder, typeOffset);
    Surface_Abridged.AddName(builder, nameOffset);
    Surface_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Surface_Abridged.AddId(builder, idOffset);
    Surface_Abridged.AddDataMode(builder, dataMode);
    Surface_Abridged.AddObstacle(builder, obstacle);
    Surface_Abridged.AddLightsCL(builder, lightsCL);
    Surface_Abridged.AddLightsTDZL(builder, lightsTDZL);
    Surface_Abridged.AddLightsREIL(builder, lightsREIL);
    Surface_Abridged.AddLightsOLS(builder, lightsOLS);
    Surface_Abridged.AddLightsPAPI(builder, lightsPAPI);
    Surface_Abridged.AddLightsVASI(builder, lightsVASI);
    Surface_Abridged.AddLightsAPRCH(builder, lightsAPRCH);
    Surface_Abridged.AddLightsUNKN(builder, lightsUNKN);
    Surface_Abridged.AddLighting(builder, lighting);
    Surface_Abridged.AddPrimary(builder, primary);
    return Surface_Abridged.EndSurface_Abridged(builder);
  }

  public static void StartSurface_Abridged(FlatBufferBuilder builder) { builder.StartTable(52); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(3, typeOffset.Value, 0); }
  public static void AddIdSite(FlatBufferBuilder builder, StringOffset idSiteOffset) { builder.AddOffset(4, idSiteOffset.Value, 0); }
  public static void AddAltSiteId(FlatBufferBuilder builder, StringOffset altSiteIdOffset) { builder.AddOffset(5, altSiteIdOffset.Value, 0); }
  public static void AddPrimary(FlatBufferBuilder builder, bool primary) { builder.AddBool(6, primary, false); }
  public static void AddLengthFt(FlatBufferBuilder builder, int lengthFt) { builder.AddInt(7, lengthFt, 0); }
  public static void AddLdaFt(FlatBufferBuilder builder, int ldaFt) { builder.AddInt(8, ldaFt, 0); }
  public static void AddWidthFt(FlatBufferBuilder builder, int widthFt) { builder.AddInt(9, widthFt, 0); }
  public static void AddLengthM(FlatBufferBuilder builder, int lengthM) { builder.AddInt(10, lengthM, 0); }
  public static void AddLdaM(FlatBufferBuilder builder, int ldaM) { builder.AddInt(11, ldaM, 0); }
  public static void AddWidthM(FlatBufferBuilder builder, int widthM) { builder.AddInt(12, widthM, 0); }
  public static void AddMaterial(FlatBufferBuilder builder, StringOffset materialOffset) { builder.AddOffset(13, materialOffset.Value, 0); }
  public static void AddCondition(FlatBufferBuilder builder, StringOffset conditionOffset) { builder.AddOffset(14, conditionOffset.Value, 0); }
  public static void AddRawWBC(FlatBufferBuilder builder, StringOffset rawWBCOffset) { builder.AddOffset(15, rawWBCOffset.Value, 0); }
  public static void AddPcn(FlatBufferBuilder builder, StringOffset pcnOffset) { builder.AddOffset(16, pcnOffset.Value, 0); }
  public static void AddLcn(FlatBufferBuilder builder, int lcn) { builder.AddInt(17, lcn, 0); }
  public static void AddSWtKip(FlatBufferBuilder builder, int sWtKip) { builder.AddInt(18, sWtKip, 0); }
  public static void AddTWtKip(FlatBufferBuilder builder, int tWtKip) { builder.AddInt(19, tWtKip, 0); }
  public static void AddStWtKip(FlatBufferBuilder builder, int stWtKip) { builder.AddInt(20, stWtKip, 0); }
  public static void AddTtWtKip(FlatBufferBuilder builder, int ttWtKip) { builder.AddInt(21, ttWtKip, 0); }
  public static void AddDdWtKip(FlatBufferBuilder builder, int ddWtKip) { builder.AddInt(22, ddWtKip, 0); }
  public static void AddSbttWtKip(FlatBufferBuilder builder, int sbttWtKip) { builder.AddInt(23, sbttWtKip, 0); }
  public static void AddTdtWtkip(FlatBufferBuilder builder, int tdtWtkip) { builder.AddInt(24, tdtWtkip, 0); }
  public static void AddTrtWtKip(FlatBufferBuilder builder, int trtWtKip) { builder.AddInt(25, trtWtKip, 0); }
  public static void AddDdtWtKip(FlatBufferBuilder builder, int ddtWtKip) { builder.AddInt(26, ddtWtKip, 0); }
  public static void AddSWtKN(FlatBufferBuilder builder, int sWtKN) { builder.AddInt(27, sWtKN, 0); }
  public static void AddTWtKN(FlatBufferBuilder builder, int tWtKN) { builder.AddInt(28, tWtKN, 0); }
  public static void AddStWtKN(FlatBufferBuilder builder, int stWtKN) { builder.AddInt(29, stWtKN, 0); }
  public static void AddTtWtKN(FlatBufferBuilder builder, int ttWtKN) { builder.AddInt(30, ttWtKN, 0); }
  public static void AddDdWtKN(FlatBufferBuilder builder, int ddWtKN) { builder.AddInt(31, ddWtKN, 0); }
  public static void AddSbttWtKN(FlatBufferBuilder builder, int sbttWtKN) { builder.AddInt(32, sbttWtKN, 0); }
  public static void AddTdtWtKN(FlatBufferBuilder builder, int tdtWtKN) { builder.AddInt(33, tdtWtKN, 0); }
  public static void AddTrtWtKN(FlatBufferBuilder builder, int trtWtKN) { builder.AddInt(34, trtWtKN, 0); }
  public static void AddDdtWtKN(FlatBufferBuilder builder, int ddtWtKN) { builder.AddInt(35, ddtWtKN, 0); }
  public static void AddLighting(FlatBufferBuilder builder, bool lighting) { builder.AddBool(36, lighting, false); }
  public static void AddLightsUNKN(FlatBufferBuilder builder, bool lightsUNKN) { builder.AddBool(37, lightsUNKN, false); }
  public static void AddLightsAPRCH(FlatBufferBuilder builder, bool lightsAPRCH) { builder.AddBool(38, lightsAPRCH, false); }
  public static void AddLightsVASI(FlatBufferBuilder builder, bool lightsVASI) { builder.AddBool(39, lightsVASI, false); }
  public static void AddLightsPAPI(FlatBufferBuilder builder, bool lightsPAPI) { builder.AddBool(40, lightsPAPI, false); }
  public static void AddLightsOLS(FlatBufferBuilder builder, bool lightsOLS) { builder.AddBool(41, lightsOLS, false); }
  public static void AddLightsREIL(FlatBufferBuilder builder, bool lightsREIL) { builder.AddBool(42, lightsREIL, false); }
  public static void AddLightsTDZL(FlatBufferBuilder builder, bool lightsTDZL) { builder.AddBool(43, lightsTDZL, false); }
  public static void AddLightsCL(FlatBufferBuilder builder, bool lightsCL) { builder.AddBool(44, lightsCL, false); }
  public static void AddObstacle(FlatBufferBuilder builder, bool obstacle) { builder.AddBool(45, obstacle, false); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(46, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(47, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(48, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(49, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(50, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Surface_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(51, (sbyte)dataMode, 0); }
  public static Offset<Surface_Abridged> EndSurface_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Surface_Abridged>(o);
  }
  public static void FinishSurface_AbridgedBuffer(FlatBufferBuilder builder, Offset<Surface_Abridged> offset) { builder.Finish(offset.Value, "SURF"); }
  public static void FinishSizePrefixedSurface_AbridgedBuffer(FlatBufferBuilder builder, Offset<Surface_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "SURF"); }
  public Surface_AbridgedT UnPack() {
    var _o = new Surface_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Surface_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Name = this.Name;
    _o.Type = this.Type;
    _o.IdSite = this.IdSite;
    _o.AltSiteId = this.AltSiteId;
    _o.Primary = this.Primary;
    _o.LengthFt = this.LengthFt;
    _o.LdaFt = this.LdaFt;
    _o.WidthFt = this.WidthFt;
    _o.LengthM = this.LengthM;
    _o.LdaM = this.LdaM;
    _o.WidthM = this.WidthM;
    _o.Material = this.Material;
    _o.Condition = this.Condition;
    _o.RawWBC = this.RawWBC;
    _o.Pcn = this.Pcn;
    _o.Lcn = this.Lcn;
    _o.SWtKip = this.SWtKip;
    _o.TWtKip = this.TWtKip;
    _o.StWtKip = this.StWtKip;
    _o.TtWtKip = this.TtWtKip;
    _o.DdWtKip = this.DdWtKip;
    _o.SbttWtKip = this.SbttWtKip;
    _o.TdtWtkip = this.TdtWtkip;
    _o.TrtWtKip = this.TrtWtKip;
    _o.DdtWtKip = this.DdtWtKip;
    _o.SWtKN = this.SWtKN;
    _o.TWtKN = this.TWtKN;
    _o.StWtKN = this.StWtKN;
    _o.TtWtKN = this.TtWtKN;
    _o.DdWtKN = this.DdWtKN;
    _o.SbttWtKN = this.SbttWtKN;
    _o.TdtWtKN = this.TdtWtKN;
    _o.TrtWtKN = this.TrtWtKN;
    _o.DdtWtKN = this.DdtWtKN;
    _o.Lighting = this.Lighting;
    _o.LightsUNKN = this.LightsUNKN;
    _o.LightsAPRCH = this.LightsAPRCH;
    _o.LightsVASI = this.LightsVASI;
    _o.LightsPAPI = this.LightsPAPI;
    _o.LightsOLS = this.LightsOLS;
    _o.LightsREIL = this.LightsREIL;
    _o.LightsTDZL = this.LightsTDZL;
    _o.LightsCL = this.LightsCL;
    _o.Obstacle = this.Obstacle;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Surface_Abridged> Pack(FlatBufferBuilder builder, Surface_AbridgedT _o) {
    if (_o == null) return default(Offset<Surface_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _idSite = _o.IdSite == null ? default(StringOffset) : builder.CreateString(_o.IdSite);
    var _altSiteId = _o.AltSiteId == null ? default(StringOffset) : builder.CreateString(_o.AltSiteId);
    var _material = _o.Material == null ? default(StringOffset) : builder.CreateString(_o.Material);
    var _condition = _o.Condition == null ? default(StringOffset) : builder.CreateString(_o.Condition);
    var _rawWBC = _o.RawWBC == null ? default(StringOffset) : builder.CreateString(_o.RawWBC);
    var _pcn = _o.Pcn == null ? default(StringOffset) : builder.CreateString(_o.Pcn);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateSurface_Abridged(
      builder,
      _id,
      _classificationMarking,
      _name,
      _type,
      _idSite,
      _altSiteId,
      _o.Primary,
      _o.LengthFt,
      _o.LdaFt,
      _o.WidthFt,
      _o.LengthM,
      _o.LdaM,
      _o.WidthM,
      _material,
      _condition,
      _rawWBC,
      _pcn,
      _o.Lcn,
      _o.SWtKip,
      _o.TWtKip,
      _o.StWtKip,
      _o.TtWtKip,
      _o.DdWtKip,
      _o.SbttWtKip,
      _o.TdtWtkip,
      _o.TrtWtKip,
      _o.DdtWtKip,
      _o.SWtKN,
      _o.TWtKN,
      _o.StWtKN,
      _o.TtWtKN,
      _o.DdWtKN,
      _o.SbttWtKN,
      _o.TdtWtKN,
      _o.TrtWtKN,
      _o.DdtWtKN,
      _o.Lighting,
      _o.LightsUNKN,
      _o.LightsAPRCH,
      _o.LightsVASI,
      _o.LightsPAPI,
      _o.LightsOLS,
      _o.LightsREIL,
      _o.LightsTDZL,
      _o.LightsCL,
      _o.Obstacle,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class Surface_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string Name { get; set; }
  public string Type { get; set; }
  public string IdSite { get; set; }
  public string AltSiteId { get; set; }
  public bool Primary { get; set; }
  public int LengthFt { get; set; }
  public int LdaFt { get; set; }
  public int WidthFt { get; set; }
  public int LengthM { get; set; }
  public int LdaM { get; set; }
  public int WidthM { get; set; }
  public string Material { get; set; }
  public string Condition { get; set; }
  public string RawWBC { get; set; }
  public string Pcn { get; set; }
  public int Lcn { get; set; }
  public int SWtKip { get; set; }
  public int TWtKip { get; set; }
  public int StWtKip { get; set; }
  public int TtWtKip { get; set; }
  public int DdWtKip { get; set; }
  public int SbttWtKip { get; set; }
  public int TdtWtkip { get; set; }
  public int TrtWtKip { get; set; }
  public int DdtWtKip { get; set; }
  public int SWtKN { get; set; }
  public int TWtKN { get; set; }
  public int StWtKN { get; set; }
  public int TtWtKN { get; set; }
  public int DdWtKN { get; set; }
  public int SbttWtKN { get; set; }
  public int TdtWtKN { get; set; }
  public int TrtWtKN { get; set; }
  public int DdtWtKN { get; set; }
  public bool Lighting { get; set; }
  public bool LightsUNKN { get; set; }
  public bool LightsAPRCH { get; set; }
  public bool LightsVASI { get; set; }
  public bool LightsPAPI { get; set; }
  public bool LightsOLS { get; set; }
  public bool LightsREIL { get; set; }
  public bool LightsTDZL { get; set; }
  public bool LightsCL { get; set; }
  public bool Obstacle { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Surface_Abridged_dataMode_Enum DataMode { get; set; }

  public Surface_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.Name = null;
    this.Type = null;
    this.IdSite = null;
    this.AltSiteId = null;
    this.Primary = false;
    this.LengthFt = 0;
    this.LdaFt = 0;
    this.WidthFt = 0;
    this.LengthM = 0;
    this.LdaM = 0;
    this.WidthM = 0;
    this.Material = null;
    this.Condition = null;
    this.RawWBC = null;
    this.Pcn = null;
    this.Lcn = 0;
    this.SWtKip = 0;
    this.TWtKip = 0;
    this.StWtKip = 0;
    this.TtWtKip = 0;
    this.DdWtKip = 0;
    this.SbttWtKip = 0;
    this.TdtWtkip = 0;
    this.TrtWtKip = 0;
    this.DdtWtKip = 0;
    this.SWtKN = 0;
    this.TWtKN = 0;
    this.StWtKN = 0;
    this.TtWtKN = 0;
    this.DdWtKN = 0;
    this.SbttWtKN = 0;
    this.TdtWtKN = 0;
    this.TrtWtKN = 0;
    this.DdtWtKN = 0;
    this.Lighting = false;
    this.LightsUNKN = false;
    this.LightsAPRCH = false;
    this.LightsVASI = false;
    this.LightsPAPI = false;
    this.LightsOLS = false;
    this.LightsREIL = false;
    this.LightsTDZL = false;
    this.LightsCL = false;
    this.Obstacle = false;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Surface_Abridged_dataMode_Enum.REAL;
  }
  public static Surface_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Surface_Abridged.GetRootAsSurface_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Surface_Abridged.FinishSurface_AbridgedBuffer(fbb, Surface_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Surface_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*Type*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdSite*/, false)
      && verifier.VerifyString(tablePos, 14 /*AltSiteId*/, false)
      && verifier.VerifyField(tablePos, 16 /*Primary*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*LengthFt*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*LdaFt*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*WidthFt*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*LengthM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*LdaM*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*WidthM*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*Material*/, false)
      && verifier.VerifyString(tablePos, 32 /*Condition*/, false)
      && verifier.VerifyString(tablePos, 34 /*RawWBC*/, false)
      && verifier.VerifyString(tablePos, 36 /*Pcn*/, false)
      && verifier.VerifyField(tablePos, 38 /*Lcn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 40 /*SWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 42 /*TWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 44 /*StWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*TtWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*DdWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 50 /*SbttWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 52 /*TdtWtkip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*TrtWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*DdtWtKip*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*SWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*TWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 62 /*StWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 64 /*TtWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 66 /*DdWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 68 /*SbttWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 70 /*TdtWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 72 /*TrtWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 74 /*DdtWtKN*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 76 /*Lighting*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 78 /*LightsUNKN*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 80 /*LightsAPRCH*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 82 /*LightsVASI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 84 /*LightsPAPI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 86 /*LightsOLS*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 88 /*LightsREIL*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 90 /*LightsTDZL*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 92 /*LightsCL*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 94 /*Obstacle*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 96 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 98 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 100 /*Source*/, false)
      && verifier.VerifyString(tablePos, 102 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 104 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 106 /*DataMode*/, 1 /*Surface_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
