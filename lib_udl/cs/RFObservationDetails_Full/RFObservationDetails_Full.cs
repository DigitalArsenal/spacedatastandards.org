// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
public struct RFObservationDetails_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RFObservationDetails_Full GetRootAsRFObservationDetails_Full(ByteBuffer _bb) { return GetRootAsRFObservationDetails_Full(_bb, new RFObservationDetails_Full()); }
  public static RFObservationDetails_Full GetRootAsRFObservationDetails_Full(ByteBuffer _bb, RFObservationDetails_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool RFObservationDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "RFOB"); }
  public static bool VerifyRFObservationDetails_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("RFOB", false, RFObservationDetails_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RFObservationDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(12); }
  /// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
  /// Example: /// Example: RF
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string Type { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(14); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 32258
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIG-OBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIG-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Optional identifier provided by observation source to indicate the transponder used for this measurement.
  /// Example: /// Example: TRANSPONDER-A
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Transponder { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransponderBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetTransponderBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetTransponderArray() { return __p.__vector_as_array<byte>(30); }
  /// azimuth angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Azimuth { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the azimuth angle measurement, in degrees.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  public double AzimuthUnc { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the azimuth in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double AzimuthRate { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// elevation in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Elevation { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the elevation angle measurement, in degrees.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double ElevationUnc { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the elevation in degrees per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double ElevationRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target range in km.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Range { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the range measurement, in kilometers.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double RangeUnc { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the range in km/sec.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double RangeRate { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the range rate measurement, in kilometers/second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double RangeRateUnc { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Target track or apparent range in km.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double TrackRange { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.2
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.3
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// ELINT notation.
  /// Example: /// Example: Ex. ELINT
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string Elnot { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetElnotBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetElnotBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetElnotArray() { return __p.__vector_as_array<byte>(60); }
  /// Center carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Frequency { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Nominal or expected center carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NominalFrequency { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Start carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double StartFrequency { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// End carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double EndFrequency { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Measured power of the center carrier frequency in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double RelativeCarrierPower { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Measured spectrum analyzer power of the center carrier frequency in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double SpectrumAnalyzerPower { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double RelativeNoiseFloor { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Reference signal level, in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double ReferenceLevel { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Pgri { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Confidence in the signal and its measurements and characterization.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Confidence { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// True if the signal is incoming, false if outgoing.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Incoming { get { int o = __p.__offset(82); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Switch Point of the RFObservation record.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int SwitchPoint { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double BaudRate { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Snr { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Nominal or expected signal to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NominalSnr { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The antenna pointing dependent polarizer angle, in degrees.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Polarity { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 16
  public RFObservationDetails_Full_polarityType_Enum PolarityType { get { int o = __p.__offset(94); return o != 0 ? (RFObservationDetails_Full_polarityType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFObservationDetails_Full_polarityType_Enum.H; } }
  /// Channel of the RFObservation record.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int Channel { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Measured carrier power over noise (dBW/Hz).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double PowerOverNoise { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Expected carrier power over noise (dBW/Hz).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NominalPowerOverNoise { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Measured bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Bandwidth { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Expected bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NominalBandwidth { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Resolution bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double ResolutionBandwidth { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Video bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double VideoBandwidth { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Measured Equivalent Isotopically Radiated Power in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double Eirp { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Expected Equivalent Isotopically Radiated Power in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NominalEirp { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum measured PSD value of the trace in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double MinPSD { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum measured PSD value of the trace in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double MaxPSD { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Frequency Shift of the RFObservation record.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double FrequencyShift { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peak of the RFObservation record.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Peak { get { int o = __p.__offset(120); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Antenna name of the RFObservation record.
  /// Example: /// Example: Antenna1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string AntennaName { get { int o = __p.__offset(122); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAntennaNameBytes() { return __p.__vector_as_span<byte>(122, 1); }
#else
  public ArraySegment<byte>? GetAntennaNameBytes() { return __p.__vector_as_arraysegment(122); }
#endif
  public byte[] GetAntennaNameArray() { return __p.__vector_as_array<byte>(122); }
  /// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
  /// Example: /// Example: DETECTED
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string DetectionStatus { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDetectionStatusBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetDetectionStatusBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetDetectionStatusArray() { return __p.__vector_as_array<byte>(124); }
  /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  /// Example: /// Example: SURVEY
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CollectionMode { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionModeBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetCollectionModeBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetCollectionModeArray() { return __p.__vector_as_array<byte>(126); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(128); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(130); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(132); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(132, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(132); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(132); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public RFObservationDetails_Full_dataMode_Enum DataMode { get { int o = __p.__offset(134); return o != 0 ? (RFObservationDetails_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : RFObservationDetails_Full_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(136); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(136); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(138); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(140); }
  /// Noise power density, in dBW-Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double NoisePwrDensity { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
  /// Example: /// Example: DVB-S2
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string CarrierStandard { get { int o = __p.__offset(144); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCarrierStandardBytes() { return __p.__vector_as_span<byte>(144, 1); }
#else
  public ArraySegment<byte>? GetCarrierStandardBytes() { return __p.__vector_as_arraysegment(144); }
#endif
  public byte[] GetCarrierStandardArray() { return __p.__vector_as_array<byte>(144); }
  /// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
  /// Example: /// Example: Auto
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string Modulation { get { int o = __p.__offset(146); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModulationBytes() { return __p.__vector_as_span<byte>(146, 1); }
#else
  public ArraySegment<byte>? GetModulationBytes() { return __p.__vector_as_arraysegment(146); }
#endif
  public byte[] GetModulationArray() { return __p.__vector_as_array<byte>(146); }
  /// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  public int InnerCodingRate { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int OuterCodingRate { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Transmit pulse shaping filter typ (e.g. RRC).
  /// Example: /// Example: RRC
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string TransmitFilterType { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransmitFilterTypeBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetTransmitFilterTypeBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetTransmitFilterTypeArray() { return __p.__vector_as_array<byte>(152); }
  /// Transmit pulse shaping filter roll-off value.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double TransmitFilterRollOff { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Symbol to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double SymbolToNoiseRatio { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The ratio of bit errors per number of received bits.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double BitErrorRate { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(160); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(162); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(164); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(166); }
  /// Optional URL containing additional information on this observation.
  /// Example: /// Example: https://some-url
  /// Constraints: Minimum length = 0, Maximum length = 2048
  public string Url { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(168); }
  /// Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string Frequencies(int j) { int o = __p.__offset(170); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FrequenciesLength { get { int o = __p.__offset(170); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string Powers(int j) { int o = __p.__offset(172); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PowersLength { get { int o = __p.__offset(172); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of signal to noise ratios of the signals, in dB.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string Snrs(int j) { int o = __p.__offset(174); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SnrsLength { get { int o = __p.__offset(174); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of measurement confidences.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string Confidences(int j) { int o = __p.__offset(176); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ConfidencesLength { get { int o = __p.__offset(176); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
  /// Example: /// Example: ['DETECTED']
  /// Constraints: No constraints specified.
  public string DetectionStatuses(int j) { int o = __p.__offset(178); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DetectionStatusesLength { get { int o = __p.__offset(178); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of chipRates.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string ChipRates(int j) { int o = __p.__offset(180); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ChipRatesLength { get { int o = __p.__offset(180); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of code taps.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string CodeTaps(int j) { int o = __p.__offset(182); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CodeTapsLength { get { int o = __p.__offset(182); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of code fills.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  public string CodeFills(int j) { int o = __p.__offset(184); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CodeFillsLength { get { int o = __p.__offset(184); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of code lengths.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string CodeLengths(int j) { int o = __p.__offset(186); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CodeLengthsLength { get { int o = __p.__offset(186); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of pnOrder.
  /// Example: /// Example: [1, 2]
  /// Constraints: No constraints specified.
  public string PnOrders(int j) { int o = __p.__offset(188); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PnOrdersLength { get { int o = __p.__offset(188); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of optional source provided identifiers of the measurements/signals.
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  public string SignalIds(int j) { int o = __p.__offset(190); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SignalIdsLength { get { int o = __p.__offset(190); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of measured signal baud rates.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string BaudRates(int j) { int o = __p.__offset(192); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int BaudRatesLength { get { int o = __p.__offset(192); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of optional source provided telemetry identifiers of the measurements/signals.
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  public string TelemetryIds(int j) { int o = __p.__offset(194); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TelemetryIdsLength { get { int o = __p.__offset(194); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string ConstellationXPoints(int j) { int o = __p.__offset(196); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ConstellationXPointsLength { get { int o = __p.__offset(196); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  public string ConstellationYPoints(int j) { int o = __p.__offset(198); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ConstellationYPointsLength { get { int o = __p.__offset(198); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<RFObservationDetails_Full> CreateRFObservationDetails_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      int satNo = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      bool uct = false,
      StringOffset transponderOffset = default(StringOffset),
      double azimuth = 0.0,
      double azimuthUnc = 0.0,
      double azimuthRate = 0.0,
      double elevation = 0.0,
      double elevationUnc = 0.0,
      double elevationRate = 0.0,
      double range = 0.0,
      double rangeUnc = 0.0,
      double rangeRate = 0.0,
      double rangeRateUnc = 0.0,
      double trackRange = 0.0,
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      StringOffset elnotOffset = default(StringOffset),
      double frequency = 0.0,
      double nominalFrequency = 0.0,
      double startFrequency = 0.0,
      double endFrequency = 0.0,
      double relativeCarrierPower = 0.0,
      double spectrumAnalyzerPower = 0.0,
      double relativeNoiseFloor = 0.0,
      double referenceLevel = 0.0,
      double pgri = 0.0,
      double confidence = 0.0,
      bool incoming = false,
      int switchPoint = 0,
      double baudRate = 0.0,
      double snr = 0.0,
      double nominalSnr = 0.0,
      double polarity = 0.0,
      RFObservationDetails_Full_polarityType_Enum polarityType = RFObservationDetails_Full_polarityType_Enum.H,
      int channel = 0,
      double powerOverNoise = 0.0,
      double nominalPowerOverNoise = 0.0,
      double bandwidth = 0.0,
      double nominalBandwidth = 0.0,
      double resolutionBandwidth = 0.0,
      double videoBandwidth = 0.0,
      double eirp = 0.0,
      double nominalEirp = 0.0,
      double minPSD = 0.0,
      double maxPSD = 0.0,
      double frequencyShift = 0.0,
      bool peak = false,
      StringOffset antennaNameOffset = default(StringOffset),
      StringOffset detectionStatusOffset = default(StringOffset),
      StringOffset collectionModeOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      RFObservationDetails_Full_dataMode_Enum dataMode = RFObservationDetails_Full_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      double noisePwrDensity = 0.0,
      StringOffset carrierStandardOffset = default(StringOffset),
      StringOffset modulationOffset = default(StringOffset),
      int innerCodingRate = 0,
      int outerCodingRate = 0,
      StringOffset transmitFilterTypeOffset = default(StringOffset),
      double transmitFilterRollOff = 0.0,
      double symbolToNoiseRatio = 0.0,
      double bitErrorRate = 0.0,
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset urlOffset = default(StringOffset),
      VectorOffset frequenciesOffset = default(VectorOffset),
      VectorOffset powersOffset = default(VectorOffset),
      VectorOffset snrsOffset = default(VectorOffset),
      VectorOffset confidencesOffset = default(VectorOffset),
      VectorOffset detectionStatusesOffset = default(VectorOffset),
      VectorOffset chipRatesOffset = default(VectorOffset),
      VectorOffset codeTapsOffset = default(VectorOffset),
      VectorOffset codeFillsOffset = default(VectorOffset),
      VectorOffset codeLengthsOffset = default(VectorOffset),
      VectorOffset pnOrdersOffset = default(VectorOffset),
      VectorOffset signalIdsOffset = default(VectorOffset),
      VectorOffset baudRatesOffset = default(VectorOffset),
      VectorOffset telemetryIdsOffset = default(VectorOffset),
      VectorOffset constellationXPointsOffset = default(VectorOffset),
      VectorOffset constellationYPointsOffset = default(VectorOffset)) {
    builder.StartTable(98);
    RFObservationDetails_Full.AddBitErrorRate(builder, bitErrorRate);
    RFObservationDetails_Full.AddSymbolToNoiseRatio(builder, symbolToNoiseRatio);
    RFObservationDetails_Full.AddTransmitFilterRollOff(builder, transmitFilterRollOff);
    RFObservationDetails_Full.AddNoisePwrDensity(builder, noisePwrDensity);
    RFObservationDetails_Full.AddFrequencyShift(builder, frequencyShift);
    RFObservationDetails_Full.AddMaxPSD(builder, maxPSD);
    RFObservationDetails_Full.AddMinPSD(builder, minPSD);
    RFObservationDetails_Full.AddNominalEirp(builder, nominalEirp);
    RFObservationDetails_Full.AddEirp(builder, eirp);
    RFObservationDetails_Full.AddVideoBandwidth(builder, videoBandwidth);
    RFObservationDetails_Full.AddResolutionBandwidth(builder, resolutionBandwidth);
    RFObservationDetails_Full.AddNominalBandwidth(builder, nominalBandwidth);
    RFObservationDetails_Full.AddBandwidth(builder, bandwidth);
    RFObservationDetails_Full.AddNominalPowerOverNoise(builder, nominalPowerOverNoise);
    RFObservationDetails_Full.AddPowerOverNoise(builder, powerOverNoise);
    RFObservationDetails_Full.AddPolarity(builder, polarity);
    RFObservationDetails_Full.AddNominalSnr(builder, nominalSnr);
    RFObservationDetails_Full.AddSnr(builder, snr);
    RFObservationDetails_Full.AddBaudRate(builder, baudRate);
    RFObservationDetails_Full.AddConfidence(builder, confidence);
    RFObservationDetails_Full.AddPgri(builder, pgri);
    RFObservationDetails_Full.AddReferenceLevel(builder, referenceLevel);
    RFObservationDetails_Full.AddRelativeNoiseFloor(builder, relativeNoiseFloor);
    RFObservationDetails_Full.AddSpectrumAnalyzerPower(builder, spectrumAnalyzerPower);
    RFObservationDetails_Full.AddRelativeCarrierPower(builder, relativeCarrierPower);
    RFObservationDetails_Full.AddEndFrequency(builder, endFrequency);
    RFObservationDetails_Full.AddStartFrequency(builder, startFrequency);
    RFObservationDetails_Full.AddNominalFrequency(builder, nominalFrequency);
    RFObservationDetails_Full.AddFrequency(builder, frequency);
    RFObservationDetails_Full.AddSenalt(builder, senalt);
    RFObservationDetails_Full.AddSenlon(builder, senlon);
    RFObservationDetails_Full.AddSenlat(builder, senlat);
    RFObservationDetails_Full.AddTrackRange(builder, trackRange);
    RFObservationDetails_Full.AddRangeRateUnc(builder, rangeRateUnc);
    RFObservationDetails_Full.AddRangeRate(builder, rangeRate);
    RFObservationDetails_Full.AddRangeUnc(builder, rangeUnc);
    RFObservationDetails_Full.AddRange(builder, range);
    RFObservationDetails_Full.AddElevationRate(builder, elevationRate);
    RFObservationDetails_Full.AddElevationUnc(builder, elevationUnc);
    RFObservationDetails_Full.AddElevation(builder, elevation);
    RFObservationDetails_Full.AddAzimuthRate(builder, azimuthRate);
    RFObservationDetails_Full.AddAzimuthUnc(builder, azimuthUnc);
    RFObservationDetails_Full.AddAzimuth(builder, azimuth);
    RFObservationDetails_Full.AddConstellationYPoints(builder, constellationYPointsOffset);
    RFObservationDetails_Full.AddConstellationXPoints(builder, constellationXPointsOffset);
    RFObservationDetails_Full.AddTelemetryIds(builder, telemetryIdsOffset);
    RFObservationDetails_Full.AddBaudRates(builder, baudRatesOffset);
    RFObservationDetails_Full.AddSignalIds(builder, signalIdsOffset);
    RFObservationDetails_Full.AddPnOrders(builder, pnOrdersOffset);
    RFObservationDetails_Full.AddCodeLengths(builder, codeLengthsOffset);
    RFObservationDetails_Full.AddCodeFills(builder, codeFillsOffset);
    RFObservationDetails_Full.AddCodeTaps(builder, codeTapsOffset);
    RFObservationDetails_Full.AddChipRates(builder, chipRatesOffset);
    RFObservationDetails_Full.AddDetectionStatuses(builder, detectionStatusesOffset);
    RFObservationDetails_Full.AddConfidences(builder, confidencesOffset);
    RFObservationDetails_Full.AddSnrs(builder, snrsOffset);
    RFObservationDetails_Full.AddPowers(builder, powersOffset);
    RFObservationDetails_Full.AddFrequencies(builder, frequenciesOffset);
    RFObservationDetails_Full.AddUrl(builder, urlOffset);
    RFObservationDetails_Full.AddDescriptor(builder, descriptorOffset);
    RFObservationDetails_Full.AddOnOrbit(builder, onOrbitOffset);
    RFObservationDetails_Full.AddSourceDL(builder, sourceDLOffset);
    RFObservationDetails_Full.AddOrigNetwork(builder, origNetworkOffset);
    RFObservationDetails_Full.AddTransmitFilterType(builder, transmitFilterTypeOffset);
    RFObservationDetails_Full.AddOuterCodingRate(builder, outerCodingRate);
    RFObservationDetails_Full.AddInnerCodingRate(builder, innerCodingRate);
    RFObservationDetails_Full.AddModulation(builder, modulationOffset);
    RFObservationDetails_Full.AddCarrierStandard(builder, carrierStandardOffset);
    RFObservationDetails_Full.AddCreatedBy(builder, createdByOffset);
    RFObservationDetails_Full.AddCreatedAt(builder, createdAtOffset);
    RFObservationDetails_Full.AddTags(builder, tagsOffset);
    RFObservationDetails_Full.AddOrigin(builder, originOffset);
    RFObservationDetails_Full.AddSource(builder, sourceOffset);
    RFObservationDetails_Full.AddRawFileURI(builder, rawFileURIOffset);
    RFObservationDetails_Full.AddCollectionMode(builder, collectionModeOffset);
    RFObservationDetails_Full.AddDetectionStatus(builder, detectionStatusOffset);
    RFObservationDetails_Full.AddAntennaName(builder, antennaNameOffset);
    RFObservationDetails_Full.AddChannel(builder, channel);
    RFObservationDetails_Full.AddSwitchPoint(builder, switchPoint);
    RFObservationDetails_Full.AddElnot(builder, elnotOffset);
    RFObservationDetails_Full.AddTransponder(builder, transponderOffset);
    RFObservationDetails_Full.AddOrigSensorId(builder, origSensorIdOffset);
    RFObservationDetails_Full.AddOrigObjectId(builder, origObjectIdOffset);
    RFObservationDetails_Full.AddTrackId(builder, trackIdOffset);
    RFObservationDetails_Full.AddTransactionId(builder, transactionIdOffset);
    RFObservationDetails_Full.AddTaskId(builder, taskIdOffset);
    RFObservationDetails_Full.AddSatNo(builder, satNo);
    RFObservationDetails_Full.AddType(builder, typeOffset);
    RFObservationDetails_Full.AddIdSensor(builder, idSensorOffset);
    RFObservationDetails_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    RFObservationDetails_Full.AddObTime(builder, obTimeOffset);
    RFObservationDetails_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    RFObservationDetails_Full.AddId(builder, idOffset);
    RFObservationDetails_Full.AddDataMode(builder, dataMode);
    RFObservationDetails_Full.AddPeak(builder, peak);
    RFObservationDetails_Full.AddPolarityType(builder, polarityType);
    RFObservationDetails_Full.AddIncoming(builder, incoming);
    RFObservationDetails_Full.AddUct(builder, uct);
    return RFObservationDetails_Full.EndRFObservationDetails_Full(builder);
  }

  public static void StartRFObservationDetails_Full(FlatBufferBuilder builder) { builder.StartTable(98); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(4, idSensorOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(5, typeOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(6, satNo, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(7, taskIdOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(8, transactionIdOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(9, trackIdOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(10, origObjectIdOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(11, origSensorIdOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(12, uct, false); }
  public static void AddTransponder(FlatBufferBuilder builder, StringOffset transponderOffset) { builder.AddOffset(13, transponderOffset.Value, 0); }
  public static void AddAzimuth(FlatBufferBuilder builder, double azimuth) { builder.AddDouble(14, azimuth, 0.0); }
  public static void AddAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.AddDouble(15, azimuthUnc, 0.0); }
  public static void AddAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.AddDouble(16, azimuthRate, 0.0); }
  public static void AddElevation(FlatBufferBuilder builder, double elevation) { builder.AddDouble(17, elevation, 0.0); }
  public static void AddElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.AddDouble(18, elevationUnc, 0.0); }
  public static void AddElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.AddDouble(19, elevationRate, 0.0); }
  public static void AddRange(FlatBufferBuilder builder, double range) { builder.AddDouble(20, range, 0.0); }
  public static void AddRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.AddDouble(21, rangeUnc, 0.0); }
  public static void AddRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.AddDouble(22, rangeRate, 0.0); }
  public static void AddRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.AddDouble(23, rangeRateUnc, 0.0); }
  public static void AddTrackRange(FlatBufferBuilder builder, double trackRange) { builder.AddDouble(24, trackRange, 0.0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(25, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(26, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(27, senalt, 0.0); }
  public static void AddElnot(FlatBufferBuilder builder, StringOffset elnotOffset) { builder.AddOffset(28, elnotOffset.Value, 0); }
  public static void AddFrequency(FlatBufferBuilder builder, double frequency) { builder.AddDouble(29, frequency, 0.0); }
  public static void AddNominalFrequency(FlatBufferBuilder builder, double nominalFrequency) { builder.AddDouble(30, nominalFrequency, 0.0); }
  public static void AddStartFrequency(FlatBufferBuilder builder, double startFrequency) { builder.AddDouble(31, startFrequency, 0.0); }
  public static void AddEndFrequency(FlatBufferBuilder builder, double endFrequency) { builder.AddDouble(32, endFrequency, 0.0); }
  public static void AddRelativeCarrierPower(FlatBufferBuilder builder, double relativeCarrierPower) { builder.AddDouble(33, relativeCarrierPower, 0.0); }
  public static void AddSpectrumAnalyzerPower(FlatBufferBuilder builder, double spectrumAnalyzerPower) { builder.AddDouble(34, spectrumAnalyzerPower, 0.0); }
  public static void AddRelativeNoiseFloor(FlatBufferBuilder builder, double relativeNoiseFloor) { builder.AddDouble(35, relativeNoiseFloor, 0.0); }
  public static void AddReferenceLevel(FlatBufferBuilder builder, double referenceLevel) { builder.AddDouble(36, referenceLevel, 0.0); }
  public static void AddPgri(FlatBufferBuilder builder, double pgri) { builder.AddDouble(37, pgri, 0.0); }
  public static void AddConfidence(FlatBufferBuilder builder, double confidence) { builder.AddDouble(38, confidence, 0.0); }
  public static void AddIncoming(FlatBufferBuilder builder, bool incoming) { builder.AddBool(39, incoming, false); }
  public static void AddSwitchPoint(FlatBufferBuilder builder, int switchPoint) { builder.AddInt(40, switchPoint, 0); }
  public static void AddBaudRate(FlatBufferBuilder builder, double baudRate) { builder.AddDouble(41, baudRate, 0.0); }
  public static void AddSnr(FlatBufferBuilder builder, double snr) { builder.AddDouble(42, snr, 0.0); }
  public static void AddNominalSnr(FlatBufferBuilder builder, double nominalSnr) { builder.AddDouble(43, nominalSnr, 0.0); }
  public static void AddPolarity(FlatBufferBuilder builder, double polarity) { builder.AddDouble(44, polarity, 0.0); }
  public static void AddPolarityType(FlatBufferBuilder builder, RFObservationDetails_Full_polarityType_Enum polarityType) { builder.AddSbyte(45, (sbyte)polarityType, 0); }
  public static void AddChannel(FlatBufferBuilder builder, int channel) { builder.AddInt(46, channel, 0); }
  public static void AddPowerOverNoise(FlatBufferBuilder builder, double powerOverNoise) { builder.AddDouble(47, powerOverNoise, 0.0); }
  public static void AddNominalPowerOverNoise(FlatBufferBuilder builder, double nominalPowerOverNoise) { builder.AddDouble(48, nominalPowerOverNoise, 0.0); }
  public static void AddBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.AddDouble(49, bandwidth, 0.0); }
  public static void AddNominalBandwidth(FlatBufferBuilder builder, double nominalBandwidth) { builder.AddDouble(50, nominalBandwidth, 0.0); }
  public static void AddResolutionBandwidth(FlatBufferBuilder builder, double resolutionBandwidth) { builder.AddDouble(51, resolutionBandwidth, 0.0); }
  public static void AddVideoBandwidth(FlatBufferBuilder builder, double videoBandwidth) { builder.AddDouble(52, videoBandwidth, 0.0); }
  public static void AddEirp(FlatBufferBuilder builder, double eirp) { builder.AddDouble(53, eirp, 0.0); }
  public static void AddNominalEirp(FlatBufferBuilder builder, double nominalEirp) { builder.AddDouble(54, nominalEirp, 0.0); }
  public static void AddMinPSD(FlatBufferBuilder builder, double minPSD) { builder.AddDouble(55, minPSD, 0.0); }
  public static void AddMaxPSD(FlatBufferBuilder builder, double maxPSD) { builder.AddDouble(56, maxPSD, 0.0); }
  public static void AddFrequencyShift(FlatBufferBuilder builder, double frequencyShift) { builder.AddDouble(57, frequencyShift, 0.0); }
  public static void AddPeak(FlatBufferBuilder builder, bool peak) { builder.AddBool(58, peak, false); }
  public static void AddAntennaName(FlatBufferBuilder builder, StringOffset antennaNameOffset) { builder.AddOffset(59, antennaNameOffset.Value, 0); }
  public static void AddDetectionStatus(FlatBufferBuilder builder, StringOffset detectionStatusOffset) { builder.AddOffset(60, detectionStatusOffset.Value, 0); }
  public static void AddCollectionMode(FlatBufferBuilder builder, StringOffset collectionModeOffset) { builder.AddOffset(61, collectionModeOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(62, rawFileURIOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(63, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(64, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, RFObservationDetails_Full_dataMode_Enum dataMode) { builder.AddSbyte(65, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(66, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(67, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(68, createdByOffset.Value, 0); }
  public static void AddNoisePwrDensity(FlatBufferBuilder builder, double noisePwrDensity) { builder.AddDouble(69, noisePwrDensity, 0.0); }
  public static void AddCarrierStandard(FlatBufferBuilder builder, StringOffset carrierStandardOffset) { builder.AddOffset(70, carrierStandardOffset.Value, 0); }
  public static void AddModulation(FlatBufferBuilder builder, StringOffset modulationOffset) { builder.AddOffset(71, modulationOffset.Value, 0); }
  public static void AddInnerCodingRate(FlatBufferBuilder builder, int innerCodingRate) { builder.AddInt(72, innerCodingRate, 0); }
  public static void AddOuterCodingRate(FlatBufferBuilder builder, int outerCodingRate) { builder.AddInt(73, outerCodingRate, 0); }
  public static void AddTransmitFilterType(FlatBufferBuilder builder, StringOffset transmitFilterTypeOffset) { builder.AddOffset(74, transmitFilterTypeOffset.Value, 0); }
  public static void AddTransmitFilterRollOff(FlatBufferBuilder builder, double transmitFilterRollOff) { builder.AddDouble(75, transmitFilterRollOff, 0.0); }
  public static void AddSymbolToNoiseRatio(FlatBufferBuilder builder, double symbolToNoiseRatio) { builder.AddDouble(76, symbolToNoiseRatio, 0.0); }
  public static void AddBitErrorRate(FlatBufferBuilder builder, double bitErrorRate) { builder.AddDouble(77, bitErrorRate, 0.0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(78, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(79, sourceDLOffset.Value, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(80, onOrbitOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(81, descriptorOffset.Value, 0); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(82, urlOffset.Value, 0); }
  public static void AddFrequencies(FlatBufferBuilder builder, VectorOffset frequenciesOffset) { builder.AddOffset(83, frequenciesOffset.Value, 0); }
  public static VectorOffset CreateFrequenciesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFrequenciesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFrequenciesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPowers(FlatBufferBuilder builder, VectorOffset powersOffset) { builder.AddOffset(84, powersOffset.Value, 0); }
  public static VectorOffset CreatePowersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePowersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPowersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSnrs(FlatBufferBuilder builder, VectorOffset snrsOffset) { builder.AddOffset(85, snrsOffset.Value, 0); }
  public static VectorOffset CreateSnrsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSnrsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConfidences(FlatBufferBuilder builder, VectorOffset confidencesOffset) { builder.AddOffset(86, confidencesOffset.Value, 0); }
  public static VectorOffset CreateConfidencesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConfidencesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConfidencesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConfidencesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConfidencesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDetectionStatuses(FlatBufferBuilder builder, VectorOffset detectionStatusesOffset) { builder.AddOffset(87, detectionStatusesOffset.Value, 0); }
  public static VectorOffset CreateDetectionStatusesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDetectionStatusesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDetectionStatusesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDetectionStatusesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDetectionStatusesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChipRates(FlatBufferBuilder builder, VectorOffset chipRatesOffset) { builder.AddOffset(88, chipRatesOffset.Value, 0); }
  public static VectorOffset CreateChipRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChipRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChipRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChipRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChipRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCodeTaps(FlatBufferBuilder builder, VectorOffset codeTapsOffset) { builder.AddOffset(89, codeTapsOffset.Value, 0); }
  public static VectorOffset CreateCodeTapsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCodeTapsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeTapsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeTapsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCodeTapsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCodeFills(FlatBufferBuilder builder, VectorOffset codeFillsOffset) { builder.AddOffset(90, codeFillsOffset.Value, 0); }
  public static VectorOffset CreateCodeFillsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCodeFillsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeFillsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeFillsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCodeFillsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCodeLengths(FlatBufferBuilder builder, VectorOffset codeLengthsOffset) { builder.AddOffset(91, codeLengthsOffset.Value, 0); }
  public static VectorOffset CreateCodeLengthsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCodeLengthsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeLengthsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCodeLengthsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCodeLengthsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPnOrders(FlatBufferBuilder builder, VectorOffset pnOrdersOffset) { builder.AddOffset(92, pnOrdersOffset.Value, 0); }
  public static VectorOffset CreatePnOrdersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePnOrdersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePnOrdersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePnOrdersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPnOrdersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSignalIds(FlatBufferBuilder builder, VectorOffset signalIdsOffset) { builder.AddOffset(93, signalIdsOffset.Value, 0); }
  public static VectorOffset CreateSignalIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSignalIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSignalIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSignalIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSignalIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBaudRates(FlatBufferBuilder builder, VectorOffset baudRatesOffset) { builder.AddOffset(94, baudRatesOffset.Value, 0); }
  public static VectorOffset CreateBaudRatesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBaudRatesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaudRatesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBaudRatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBaudRatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTelemetryIds(FlatBufferBuilder builder, VectorOffset telemetryIdsOffset) { builder.AddOffset(95, telemetryIdsOffset.Value, 0); }
  public static VectorOffset CreateTelemetryIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTelemetryIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTelemetryIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTelemetryIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTelemetryIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConstellationXPoints(FlatBufferBuilder builder, VectorOffset constellationXPointsOffset) { builder.AddOffset(96, constellationXPointsOffset.Value, 0); }
  public static VectorOffset CreateConstellationXPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConstellationXPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConstellationXPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConstellationXPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConstellationXPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConstellationYPoints(FlatBufferBuilder builder, VectorOffset constellationYPointsOffset) { builder.AddOffset(97, constellationYPointsOffset.Value, 0); }
  public static VectorOffset CreateConstellationYPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConstellationYPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConstellationYPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConstellationYPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConstellationYPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<RFObservationDetails_Full> EndRFObservationDetails_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<RFObservationDetails_Full>(o);
  }
  public static void FinishRFObservationDetails_FullBuffer(FlatBufferBuilder builder, Offset<RFObservationDetails_Full> offset) { builder.Finish(offset.Value, "RFOB"); }
  public static void FinishSizePrefixedRFObservationDetails_FullBuffer(FlatBufferBuilder builder, Offset<RFObservationDetails_Full> offset) { builder.FinishSizePrefixed(offset.Value, "RFOB"); }
  public RFObservationDetails_FullT UnPack() {
    var _o = new RFObservationDetails_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RFObservationDetails_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSensor = this.IdSensor;
    _o.Type = this.Type;
    _o.SatNo = this.SatNo;
    _o.TaskId = this.TaskId;
    _o.TransactionId = this.TransactionId;
    _o.TrackId = this.TrackId;
    _o.OrigObjectId = this.OrigObjectId;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Uct = this.Uct;
    _o.Transponder = this.Transponder;
    _o.Azimuth = this.Azimuth;
    _o.AzimuthUnc = this.AzimuthUnc;
    _o.AzimuthRate = this.AzimuthRate;
    _o.Elevation = this.Elevation;
    _o.ElevationUnc = this.ElevationUnc;
    _o.ElevationRate = this.ElevationRate;
    _o.Range = this.Range;
    _o.RangeUnc = this.RangeUnc;
    _o.RangeRate = this.RangeRate;
    _o.RangeRateUnc = this.RangeRateUnc;
    _o.TrackRange = this.TrackRange;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Elnot = this.Elnot;
    _o.Frequency = this.Frequency;
    _o.NominalFrequency = this.NominalFrequency;
    _o.StartFrequency = this.StartFrequency;
    _o.EndFrequency = this.EndFrequency;
    _o.RelativeCarrierPower = this.RelativeCarrierPower;
    _o.SpectrumAnalyzerPower = this.SpectrumAnalyzerPower;
    _o.RelativeNoiseFloor = this.RelativeNoiseFloor;
    _o.ReferenceLevel = this.ReferenceLevel;
    _o.Pgri = this.Pgri;
    _o.Confidence = this.Confidence;
    _o.Incoming = this.Incoming;
    _o.SwitchPoint = this.SwitchPoint;
    _o.BaudRate = this.BaudRate;
    _o.Snr = this.Snr;
    _o.NominalSnr = this.NominalSnr;
    _o.Polarity = this.Polarity;
    _o.PolarityType = this.PolarityType;
    _o.Channel = this.Channel;
    _o.PowerOverNoise = this.PowerOverNoise;
    _o.NominalPowerOverNoise = this.NominalPowerOverNoise;
    _o.Bandwidth = this.Bandwidth;
    _o.NominalBandwidth = this.NominalBandwidth;
    _o.ResolutionBandwidth = this.ResolutionBandwidth;
    _o.VideoBandwidth = this.VideoBandwidth;
    _o.Eirp = this.Eirp;
    _o.NominalEirp = this.NominalEirp;
    _o.MinPSD = this.MinPSD;
    _o.MaxPSD = this.MaxPSD;
    _o.FrequencyShift = this.FrequencyShift;
    _o.Peak = this.Peak;
    _o.AntennaName = this.AntennaName;
    _o.DetectionStatus = this.DetectionStatus;
    _o.CollectionMode = this.CollectionMode;
    _o.RawFileURI = this.RawFileURI;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.NoisePwrDensity = this.NoisePwrDensity;
    _o.CarrierStandard = this.CarrierStandard;
    _o.Modulation = this.Modulation;
    _o.InnerCodingRate = this.InnerCodingRate;
    _o.OuterCodingRate = this.OuterCodingRate;
    _o.TransmitFilterType = this.TransmitFilterType;
    _o.TransmitFilterRollOff = this.TransmitFilterRollOff;
    _o.SymbolToNoiseRatio = this.SymbolToNoiseRatio;
    _o.BitErrorRate = this.BitErrorRate;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.OnOrbit = this.OnOrbit;
    _o.Descriptor = this.Descriptor;
    _o.Url = this.Url;
    _o.Frequencies = new List<string>();
    for (var _j = 0; _j < this.FrequenciesLength; ++_j) {_o.Frequencies.Add(this.Frequencies(_j));}
    _o.Powers = new List<string>();
    for (var _j = 0; _j < this.PowersLength; ++_j) {_o.Powers.Add(this.Powers(_j));}
    _o.Snrs = new List<string>();
    for (var _j = 0; _j < this.SnrsLength; ++_j) {_o.Snrs.Add(this.Snrs(_j));}
    _o.Confidences = new List<string>();
    for (var _j = 0; _j < this.ConfidencesLength; ++_j) {_o.Confidences.Add(this.Confidences(_j));}
    _o.DetectionStatuses = new List<string>();
    for (var _j = 0; _j < this.DetectionStatusesLength; ++_j) {_o.DetectionStatuses.Add(this.DetectionStatuses(_j));}
    _o.ChipRates = new List<string>();
    for (var _j = 0; _j < this.ChipRatesLength; ++_j) {_o.ChipRates.Add(this.ChipRates(_j));}
    _o.CodeTaps = new List<string>();
    for (var _j = 0; _j < this.CodeTapsLength; ++_j) {_o.CodeTaps.Add(this.CodeTaps(_j));}
    _o.CodeFills = new List<string>();
    for (var _j = 0; _j < this.CodeFillsLength; ++_j) {_o.CodeFills.Add(this.CodeFills(_j));}
    _o.CodeLengths = new List<string>();
    for (var _j = 0; _j < this.CodeLengthsLength; ++_j) {_o.CodeLengths.Add(this.CodeLengths(_j));}
    _o.PnOrders = new List<string>();
    for (var _j = 0; _j < this.PnOrdersLength; ++_j) {_o.PnOrders.Add(this.PnOrders(_j));}
    _o.SignalIds = new List<string>();
    for (var _j = 0; _j < this.SignalIdsLength; ++_j) {_o.SignalIds.Add(this.SignalIds(_j));}
    _o.BaudRates = new List<string>();
    for (var _j = 0; _j < this.BaudRatesLength; ++_j) {_o.BaudRates.Add(this.BaudRates(_j));}
    _o.TelemetryIds = new List<string>();
    for (var _j = 0; _j < this.TelemetryIdsLength; ++_j) {_o.TelemetryIds.Add(this.TelemetryIds(_j));}
    _o.ConstellationXPoints = new List<string>();
    for (var _j = 0; _j < this.ConstellationXPointsLength; ++_j) {_o.ConstellationXPoints.Add(this.ConstellationXPoints(_j));}
    _o.ConstellationYPoints = new List<string>();
    for (var _j = 0; _j < this.ConstellationYPointsLength; ++_j) {_o.ConstellationYPoints.Add(this.ConstellationYPoints(_j));}
  }
  public static Offset<RFObservationDetails_Full> Pack(FlatBufferBuilder builder, RFObservationDetails_FullT _o) {
    if (_o == null) return default(Offset<RFObservationDetails_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _transponder = _o.Transponder == null ? default(StringOffset) : builder.CreateString(_o.Transponder);
    var _elnot = _o.Elnot == null ? default(StringOffset) : builder.CreateString(_o.Elnot);
    var _antennaName = _o.AntennaName == null ? default(StringOffset) : builder.CreateString(_o.AntennaName);
    var _detectionStatus = _o.DetectionStatus == null ? default(StringOffset) : builder.CreateString(_o.DetectionStatus);
    var _collectionMode = _o.CollectionMode == null ? default(StringOffset) : builder.CreateString(_o.CollectionMode);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _carrierStandard = _o.CarrierStandard == null ? default(StringOffset) : builder.CreateString(_o.CarrierStandard);
    var _modulation = _o.Modulation == null ? default(StringOffset) : builder.CreateString(_o.Modulation);
    var _transmitFilterType = _o.TransmitFilterType == null ? default(StringOffset) : builder.CreateString(_o.TransmitFilterType);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _url = _o.Url == null ? default(StringOffset) : builder.CreateString(_o.Url);
    var _frequencies = default(VectorOffset);
    if (_o.Frequencies != null) {
      var __frequencies = new StringOffset[_o.Frequencies.Count];
      for (var _j = 0; _j < __frequencies.Length; ++_j) { __frequencies[_j] = builder.CreateString(_o.Frequencies[_j]); }
      _frequencies = CreateFrequenciesVector(builder, __frequencies);
    }
    var _powers = default(VectorOffset);
    if (_o.Powers != null) {
      var __powers = new StringOffset[_o.Powers.Count];
      for (var _j = 0; _j < __powers.Length; ++_j) { __powers[_j] = builder.CreateString(_o.Powers[_j]); }
      _powers = CreatePowersVector(builder, __powers);
    }
    var _snrs = default(VectorOffset);
    if (_o.Snrs != null) {
      var __snrs = new StringOffset[_o.Snrs.Count];
      for (var _j = 0; _j < __snrs.Length; ++_j) { __snrs[_j] = builder.CreateString(_o.Snrs[_j]); }
      _snrs = CreateSnrsVector(builder, __snrs);
    }
    var _confidences = default(VectorOffset);
    if (_o.Confidences != null) {
      var __confidences = new StringOffset[_o.Confidences.Count];
      for (var _j = 0; _j < __confidences.Length; ++_j) { __confidences[_j] = builder.CreateString(_o.Confidences[_j]); }
      _confidences = CreateConfidencesVector(builder, __confidences);
    }
    var _detectionStatuses = default(VectorOffset);
    if (_o.DetectionStatuses != null) {
      var __detectionStatuses = new StringOffset[_o.DetectionStatuses.Count];
      for (var _j = 0; _j < __detectionStatuses.Length; ++_j) { __detectionStatuses[_j] = builder.CreateString(_o.DetectionStatuses[_j]); }
      _detectionStatuses = CreateDetectionStatusesVector(builder, __detectionStatuses);
    }
    var _chipRates = default(VectorOffset);
    if (_o.ChipRates != null) {
      var __chipRates = new StringOffset[_o.ChipRates.Count];
      for (var _j = 0; _j < __chipRates.Length; ++_j) { __chipRates[_j] = builder.CreateString(_o.ChipRates[_j]); }
      _chipRates = CreateChipRatesVector(builder, __chipRates);
    }
    var _codeTaps = default(VectorOffset);
    if (_o.CodeTaps != null) {
      var __codeTaps = new StringOffset[_o.CodeTaps.Count];
      for (var _j = 0; _j < __codeTaps.Length; ++_j) { __codeTaps[_j] = builder.CreateString(_o.CodeTaps[_j]); }
      _codeTaps = CreateCodeTapsVector(builder, __codeTaps);
    }
    var _codeFills = default(VectorOffset);
    if (_o.CodeFills != null) {
      var __codeFills = new StringOffset[_o.CodeFills.Count];
      for (var _j = 0; _j < __codeFills.Length; ++_j) { __codeFills[_j] = builder.CreateString(_o.CodeFills[_j]); }
      _codeFills = CreateCodeFillsVector(builder, __codeFills);
    }
    var _codeLengths = default(VectorOffset);
    if (_o.CodeLengths != null) {
      var __codeLengths = new StringOffset[_o.CodeLengths.Count];
      for (var _j = 0; _j < __codeLengths.Length; ++_j) { __codeLengths[_j] = builder.CreateString(_o.CodeLengths[_j]); }
      _codeLengths = CreateCodeLengthsVector(builder, __codeLengths);
    }
    var _pnOrders = default(VectorOffset);
    if (_o.PnOrders != null) {
      var __pnOrders = new StringOffset[_o.PnOrders.Count];
      for (var _j = 0; _j < __pnOrders.Length; ++_j) { __pnOrders[_j] = builder.CreateString(_o.PnOrders[_j]); }
      _pnOrders = CreatePnOrdersVector(builder, __pnOrders);
    }
    var _signalIds = default(VectorOffset);
    if (_o.SignalIds != null) {
      var __signalIds = new StringOffset[_o.SignalIds.Count];
      for (var _j = 0; _j < __signalIds.Length; ++_j) { __signalIds[_j] = builder.CreateString(_o.SignalIds[_j]); }
      _signalIds = CreateSignalIdsVector(builder, __signalIds);
    }
    var _baudRates = default(VectorOffset);
    if (_o.BaudRates != null) {
      var __baudRates = new StringOffset[_o.BaudRates.Count];
      for (var _j = 0; _j < __baudRates.Length; ++_j) { __baudRates[_j] = builder.CreateString(_o.BaudRates[_j]); }
      _baudRates = CreateBaudRatesVector(builder, __baudRates);
    }
    var _telemetryIds = default(VectorOffset);
    if (_o.TelemetryIds != null) {
      var __telemetryIds = new StringOffset[_o.TelemetryIds.Count];
      for (var _j = 0; _j < __telemetryIds.Length; ++_j) { __telemetryIds[_j] = builder.CreateString(_o.TelemetryIds[_j]); }
      _telemetryIds = CreateTelemetryIdsVector(builder, __telemetryIds);
    }
    var _constellationXPoints = default(VectorOffset);
    if (_o.ConstellationXPoints != null) {
      var __constellationXPoints = new StringOffset[_o.ConstellationXPoints.Count];
      for (var _j = 0; _j < __constellationXPoints.Length; ++_j) { __constellationXPoints[_j] = builder.CreateString(_o.ConstellationXPoints[_j]); }
      _constellationXPoints = CreateConstellationXPointsVector(builder, __constellationXPoints);
    }
    var _constellationYPoints = default(VectorOffset);
    if (_o.ConstellationYPoints != null) {
      var __constellationYPoints = new StringOffset[_o.ConstellationYPoints.Count];
      for (var _j = 0; _j < __constellationYPoints.Length; ++_j) { __constellationYPoints[_j] = builder.CreateString(_o.ConstellationYPoints[_j]); }
      _constellationYPoints = CreateConstellationYPointsVector(builder, __constellationYPoints);
    }
    return CreateRFObservationDetails_Full(
      builder,
      _id,
      _classificationMarking,
      _obTime,
      _idOnOrbit,
      _idSensor,
      _type,
      _o.SatNo,
      _taskId,
      _transactionId,
      _trackId,
      _origObjectId,
      _origSensorId,
      _o.Uct,
      _transponder,
      _o.Azimuth,
      _o.AzimuthUnc,
      _o.AzimuthRate,
      _o.Elevation,
      _o.ElevationUnc,
      _o.ElevationRate,
      _o.Range,
      _o.RangeUnc,
      _o.RangeRate,
      _o.RangeRateUnc,
      _o.TrackRange,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _elnot,
      _o.Frequency,
      _o.NominalFrequency,
      _o.StartFrequency,
      _o.EndFrequency,
      _o.RelativeCarrierPower,
      _o.SpectrumAnalyzerPower,
      _o.RelativeNoiseFloor,
      _o.ReferenceLevel,
      _o.Pgri,
      _o.Confidence,
      _o.Incoming,
      _o.SwitchPoint,
      _o.BaudRate,
      _o.Snr,
      _o.NominalSnr,
      _o.Polarity,
      _o.PolarityType,
      _o.Channel,
      _o.PowerOverNoise,
      _o.NominalPowerOverNoise,
      _o.Bandwidth,
      _o.NominalBandwidth,
      _o.ResolutionBandwidth,
      _o.VideoBandwidth,
      _o.Eirp,
      _o.NominalEirp,
      _o.MinPSD,
      _o.MaxPSD,
      _o.FrequencyShift,
      _o.Peak,
      _antennaName,
      _detectionStatus,
      _collectionMode,
      _rawFileURI,
      _source,
      _origin,
      _o.DataMode,
      _tags,
      _createdAt,
      _createdBy,
      _o.NoisePwrDensity,
      _carrierStandard,
      _modulation,
      _o.InnerCodingRate,
      _o.OuterCodingRate,
      _transmitFilterType,
      _o.TransmitFilterRollOff,
      _o.SymbolToNoiseRatio,
      _o.BitErrorRate,
      _origNetwork,
      _sourceDL,
      _onOrbit,
      _descriptor,
      _url,
      _frequencies,
      _powers,
      _snrs,
      _confidences,
      _detectionStatuses,
      _chipRates,
      _codeTaps,
      _codeFills,
      _codeLengths,
      _pnOrders,
      _signalIds,
      _baudRates,
      _telemetryIds,
      _constellationXPoints,
      _constellationYPoints);
  }
}

public class RFObservationDetails_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSensor { get; set; }
  public string Type { get; set; }
  public int SatNo { get; set; }
  public string TaskId { get; set; }
  public string TransactionId { get; set; }
  public string TrackId { get; set; }
  public string OrigObjectId { get; set; }
  public string OrigSensorId { get; set; }
  public bool Uct { get; set; }
  public string Transponder { get; set; }
  public double Azimuth { get; set; }
  public double AzimuthUnc { get; set; }
  public double AzimuthRate { get; set; }
  public double Elevation { get; set; }
  public double ElevationUnc { get; set; }
  public double ElevationRate { get; set; }
  public double Range { get; set; }
  public double RangeUnc { get; set; }
  public double RangeRate { get; set; }
  public double RangeRateUnc { get; set; }
  public double TrackRange { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public string Elnot { get; set; }
  public double Frequency { get; set; }
  public double NominalFrequency { get; set; }
  public double StartFrequency { get; set; }
  public double EndFrequency { get; set; }
  public double RelativeCarrierPower { get; set; }
  public double SpectrumAnalyzerPower { get; set; }
  public double RelativeNoiseFloor { get; set; }
  public double ReferenceLevel { get; set; }
  public double Pgri { get; set; }
  public double Confidence { get; set; }
  public bool Incoming { get; set; }
  public int SwitchPoint { get; set; }
  public double BaudRate { get; set; }
  public double Snr { get; set; }
  public double NominalSnr { get; set; }
  public double Polarity { get; set; }
  public RFObservationDetails_Full_polarityType_Enum PolarityType { get; set; }
  public int Channel { get; set; }
  public double PowerOverNoise { get; set; }
  public double NominalPowerOverNoise { get; set; }
  public double Bandwidth { get; set; }
  public double NominalBandwidth { get; set; }
  public double ResolutionBandwidth { get; set; }
  public double VideoBandwidth { get; set; }
  public double Eirp { get; set; }
  public double NominalEirp { get; set; }
  public double MinPSD { get; set; }
  public double MaxPSD { get; set; }
  public double FrequencyShift { get; set; }
  public bool Peak { get; set; }
  public string AntennaName { get; set; }
  public string DetectionStatus { get; set; }
  public string CollectionMode { get; set; }
  public string RawFileURI { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public RFObservationDetails_Full_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public double NoisePwrDensity { get; set; }
  public string CarrierStandard { get; set; }
  public string Modulation { get; set; }
  public int InnerCodingRate { get; set; }
  public int OuterCodingRate { get; set; }
  public string TransmitFilterType { get; set; }
  public double TransmitFilterRollOff { get; set; }
  public double SymbolToNoiseRatio { get; set; }
  public double BitErrorRate { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public string OnOrbit { get; set; }
  public string Descriptor { get; set; }
  public string Url { get; set; }
  public List<string> Frequencies { get; set; }
  public List<string> Powers { get; set; }
  public List<string> Snrs { get; set; }
  public List<string> Confidences { get; set; }
  public List<string> DetectionStatuses { get; set; }
  public List<string> ChipRates { get; set; }
  public List<string> CodeTaps { get; set; }
  public List<string> CodeFills { get; set; }
  public List<string> CodeLengths { get; set; }
  public List<string> PnOrders { get; set; }
  public List<string> SignalIds { get; set; }
  public List<string> BaudRates { get; set; }
  public List<string> TelemetryIds { get; set; }
  public List<string> ConstellationXPoints { get; set; }
  public List<string> ConstellationYPoints { get; set; }

  public RFObservationDetails_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.IdOnOrbit = null;
    this.IdSensor = null;
    this.Type = null;
    this.SatNo = 0;
    this.TaskId = null;
    this.TransactionId = null;
    this.TrackId = null;
    this.OrigObjectId = null;
    this.OrigSensorId = null;
    this.Uct = false;
    this.Transponder = null;
    this.Azimuth = 0.0;
    this.AzimuthUnc = 0.0;
    this.AzimuthRate = 0.0;
    this.Elevation = 0.0;
    this.ElevationUnc = 0.0;
    this.ElevationRate = 0.0;
    this.Range = 0.0;
    this.RangeUnc = 0.0;
    this.RangeRate = 0.0;
    this.RangeRateUnc = 0.0;
    this.TrackRange = 0.0;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Elnot = null;
    this.Frequency = 0.0;
    this.NominalFrequency = 0.0;
    this.StartFrequency = 0.0;
    this.EndFrequency = 0.0;
    this.RelativeCarrierPower = 0.0;
    this.SpectrumAnalyzerPower = 0.0;
    this.RelativeNoiseFloor = 0.0;
    this.ReferenceLevel = 0.0;
    this.Pgri = 0.0;
    this.Confidence = 0.0;
    this.Incoming = false;
    this.SwitchPoint = 0;
    this.BaudRate = 0.0;
    this.Snr = 0.0;
    this.NominalSnr = 0.0;
    this.Polarity = 0.0;
    this.PolarityType = RFObservationDetails_Full_polarityType_Enum.H;
    this.Channel = 0;
    this.PowerOverNoise = 0.0;
    this.NominalPowerOverNoise = 0.0;
    this.Bandwidth = 0.0;
    this.NominalBandwidth = 0.0;
    this.ResolutionBandwidth = 0.0;
    this.VideoBandwidth = 0.0;
    this.Eirp = 0.0;
    this.NominalEirp = 0.0;
    this.MinPSD = 0.0;
    this.MaxPSD = 0.0;
    this.FrequencyShift = 0.0;
    this.Peak = false;
    this.AntennaName = null;
    this.DetectionStatus = null;
    this.CollectionMode = null;
    this.RawFileURI = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = RFObservationDetails_Full_dataMode_Enum.REAL;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.NoisePwrDensity = 0.0;
    this.CarrierStandard = null;
    this.Modulation = null;
    this.InnerCodingRate = 0;
    this.OuterCodingRate = 0;
    this.TransmitFilterType = null;
    this.TransmitFilterRollOff = 0.0;
    this.SymbolToNoiseRatio = 0.0;
    this.BitErrorRate = 0.0;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.OnOrbit = null;
    this.Descriptor = null;
    this.Url = null;
    this.Frequencies = null;
    this.Powers = null;
    this.Snrs = null;
    this.Confidences = null;
    this.DetectionStatuses = null;
    this.ChipRates = null;
    this.CodeTaps = null;
    this.CodeFills = null;
    this.CodeLengths = null;
    this.PnOrders = null;
    this.SignalIds = null;
    this.BaudRates = null;
    this.TelemetryIds = null;
    this.ConstellationXPoints = null;
    this.ConstellationYPoints = null;
  }
  public static RFObservationDetails_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return RFObservationDetails_Full.GetRootAsRFObservationDetails_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    RFObservationDetails_Full.FinishRFObservationDetails_FullBuffer(fbb, RFObservationDetails_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class RFObservationDetails_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 14 /*Type*/, false)
      && verifier.VerifyField(tablePos, 16 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 20 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 22 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 24 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 26 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 28 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 30 /*Transponder*/, false)
      && verifier.VerifyField(tablePos, 32 /*Azimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*AzimuthUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*AzimuthRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Elevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*ElevationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*ElevationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Range*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*RangeUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*RangeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*RangeRateUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*TrackRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 60 /*Elnot*/, false)
      && verifier.VerifyField(tablePos, 62 /*Frequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*NominalFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*StartFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*EndFrequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*RelativeCarrierPower*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*SpectrumAnalyzerPower*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*RelativeNoiseFloor*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*ReferenceLevel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Pgri*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Confidence*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Incoming*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 84 /*SwitchPoint*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*BaudRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*Snr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*NominalSnr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*Polarity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*PolarityType*/, 1 /*RFObservationDetails_Full_polarityType_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 96 /*Channel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 98 /*PowerOverNoise*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*NominalPowerOverNoise*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*Bandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*NominalBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*ResolutionBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*VideoBandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*Eirp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*NominalEirp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*MinPSD*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*MaxPSD*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*FrequencyShift*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*Peak*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 122 /*AntennaName*/, false)
      && verifier.VerifyString(tablePos, 124 /*DetectionStatus*/, false)
      && verifier.VerifyString(tablePos, 126 /*CollectionMode*/, false)
      && verifier.VerifyString(tablePos, 128 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 130 /*Source*/, false)
      && verifier.VerifyString(tablePos, 132 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 134 /*DataMode*/, 1 /*RFObservationDetails_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 136 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 138 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 140 /*CreatedBy*/, false)
      && verifier.VerifyField(tablePos, 142 /*NoisePwrDensity*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 144 /*CarrierStandard*/, false)
      && verifier.VerifyString(tablePos, 146 /*Modulation*/, false)
      && verifier.VerifyField(tablePos, 148 /*InnerCodingRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 150 /*OuterCodingRate*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 152 /*TransmitFilterType*/, false)
      && verifier.VerifyField(tablePos, 154 /*TransmitFilterRollOff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*SymbolToNoiseRatio*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*BitErrorRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 160 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 162 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 164 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 166 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 168 /*Url*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 170 /*Frequencies*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 172 /*Powers*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 174 /*Snrs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 176 /*Confidences*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 178 /*DetectionStatuses*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 180 /*ChipRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 182 /*CodeTaps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 184 /*CodeFills*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 186 /*CodeLengths*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 188 /*PnOrders*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 190 /*SignalIds*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 192 /*BaudRates*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 194 /*TelemetryIds*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 196 /*ConstellationXPoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 198 /*ConstellationYPoints*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
