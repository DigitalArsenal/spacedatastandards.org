// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
public struct AircraftMissionTasking_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionTasking_Full GetRootAsAircraftMissionTasking_Full(ByteBuffer _bb) { return GetRootAsAircraftMissionTasking_Full(_bb, new AircraftMissionTasking_Full()); }
  public static AircraftMissionTasking_Full GetRootAsAircraftMissionTasking_Full(ByteBuffer _bb, AircraftMissionTasking_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AircraftMissionTasking_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "AIRC"); }
  public static bool VerifyAircraftMissionTasking_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("AIRC", false, AircraftMissionTasking_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AircraftMissionTasking_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  public string CountryCode { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(4); }
  /// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 1, Maximum length = 1
  public string TaskedService { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskedServiceBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTaskedServiceBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTaskedServiceArray() { return __p.__vector_as_array<byte>(6); }
  /// The designator of the unit that is tasked to perform this aircraft mission tasking.
  /// Example: /// Example: AMPHIB5DIV
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string UnitDesignator { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitDesignatorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetUnitDesignatorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetUnitDesignatorArray() { return __p.__vector_as_array<byte>(8); }
  /// The tasked units location expressed as an ICAO or a place name.
  /// Example: /// Example: ICAO:KXXQ
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string UnitLocName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUnitLocNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetUnitLocNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetUnitLocNameArray() { return __p.__vector_as_array<byte>(10); }
  /// An indicator of whether a mission is or will be a residual mission.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 0, Maximum length = 1
  public string ResMsnInd { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResMsnIndBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResMsnIndBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResMsnIndArray() { return __p.__vector_as_array<byte>(12); }
  /// The AMC number assigned to identify one aircraft from another.
  /// Example: /// Example: AMC:JJXD123HA045
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AmcMsnNum { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmcMsnNumBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetAmcMsnNumBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetAmcMsnNumArray() { return __p.__vector_as_array<byte>(14); }
  /// The identifier for the composite set of missions for this operation/exercise.
  /// Example: /// Example: ZZ
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string PkgId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPkgIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPkgIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPkgIdArray() { return __p.__vector_as_array<byte>(16); }
  /// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
  /// Example: /// Example: MC
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string MsnCommander { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnCommanderBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMsnCommanderBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMsnCommanderArray() { return __p.__vector_as_array<byte>(18); }
  /// The mission number assigned to this mission.
  /// Example: /// Example: D123HA
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string MsnNum { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnNumBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMsnNumBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMsnNumArray() { return __p.__vector_as_array<byte>(20); }
  /// The code for the preferred type or designator for a tasked air mission.
  /// Example: /// Example: CAS
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string PriMsnType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriMsnTypeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPriMsnTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPriMsnTypeArray() { return __p.__vector_as_array<byte>(22); }
  /// The code for the alternative type of a tasked air mission.
  /// Example: /// Example: SEAD
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string SecMsnType { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSecMsnTypeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSecMsnTypeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSecMsnTypeArray() { return __p.__vector_as_array<byte>(24); }
  /// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
  /// Example: /// Example: 30
  /// Constraints: No constraints specified.
  public int AlertStatus { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The location or name specified for the departure of the tasked air mission.
  /// Example: /// Example: ICAO:KBIF
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DepLocName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepLocNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetDepLocNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetDepLocNameArray() { return __p.__vector_as_array<byte>(28); }
  /// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: 32WDL123123
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string DepLocUTM { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepLocUTMBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetDepLocUTMBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetDepLocUTMArray() { return __p.__vector_as_array<byte>(30); }
  /// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: 35.123
  /// Constraints: No constraints specified.
  public double DepLocLat { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: 79.2354
  /// Constraints: No constraints specified.
  public double DepLocLon { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string DepTime { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepTimeBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetDepTimeBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetDepTimeArray() { return __p.__vector_as_array<byte>(36); }
  /// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
  /// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
  /// Constraints: No constraints specified.
  public string RcvyLocName(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RcvyLocNameLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
  /// Constraints: No constraints specified.
  public string RcvyLocUTM(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RcvyLocUTMLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: [48.8584, 40.7554]
  /// Constraints: No constraints specified.
  public string RcvyLocLat(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RcvyLocLatLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: [2.2945, -73.9866]
  /// Constraints: No constraints specified.
  public string RcvyLocLon(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RcvyLocLonLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
  /// Constraints: No constraints specified.
  public string RcvyTime(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int RcvyTimeLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A collection of the individual aircraft assigned to this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string IndACTasking(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int IndACTaskingLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// A collection of aircraft mission location information for this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string AcMsnLocSeg(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AcMsnLocSegLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<AircraftMissionTasking_Full> CreateAircraftMissionTasking_Full(FlatBufferBuilder builder,
      StringOffset countryCodeOffset = default(StringOffset),
      StringOffset taskedServiceOffset = default(StringOffset),
      StringOffset unitDesignatorOffset = default(StringOffset),
      StringOffset unitLocNameOffset = default(StringOffset),
      StringOffset resMsnIndOffset = default(StringOffset),
      StringOffset amcMsnNumOffset = default(StringOffset),
      StringOffset pkgIdOffset = default(StringOffset),
      StringOffset msnCommanderOffset = default(StringOffset),
      StringOffset msnNumOffset = default(StringOffset),
      StringOffset priMsnTypeOffset = default(StringOffset),
      StringOffset secMsnTypeOffset = default(StringOffset),
      int alertStatus = 0,
      StringOffset depLocNameOffset = default(StringOffset),
      StringOffset depLocUTMOffset = default(StringOffset),
      double depLocLat = 0.0,
      double depLocLon = 0.0,
      StringOffset depTimeOffset = default(StringOffset),
      VectorOffset rcvyLocNameOffset = default(VectorOffset),
      VectorOffset rcvyLocUTMOffset = default(VectorOffset),
      VectorOffset rcvyLocLatOffset = default(VectorOffset),
      VectorOffset rcvyLocLonOffset = default(VectorOffset),
      VectorOffset rcvyTimeOffset = default(VectorOffset),
      VectorOffset indACTaskingOffset = default(VectorOffset),
      VectorOffset acMsnLocSegOffset = default(VectorOffset)) {
    builder.StartTable(24);
    AircraftMissionTasking_Full.AddDepLocLon(builder, depLocLon);
    AircraftMissionTasking_Full.AddDepLocLat(builder, depLocLat);
    AircraftMissionTasking_Full.AddAcMsnLocSeg(builder, acMsnLocSegOffset);
    AircraftMissionTasking_Full.AddIndACTasking(builder, indACTaskingOffset);
    AircraftMissionTasking_Full.AddRcvyTime(builder, rcvyTimeOffset);
    AircraftMissionTasking_Full.AddRcvyLocLon(builder, rcvyLocLonOffset);
    AircraftMissionTasking_Full.AddRcvyLocLat(builder, rcvyLocLatOffset);
    AircraftMissionTasking_Full.AddRcvyLocUTM(builder, rcvyLocUTMOffset);
    AircraftMissionTasking_Full.AddRcvyLocName(builder, rcvyLocNameOffset);
    AircraftMissionTasking_Full.AddDepTime(builder, depTimeOffset);
    AircraftMissionTasking_Full.AddDepLocUTM(builder, depLocUTMOffset);
    AircraftMissionTasking_Full.AddDepLocName(builder, depLocNameOffset);
    AircraftMissionTasking_Full.AddAlertStatus(builder, alertStatus);
    AircraftMissionTasking_Full.AddSecMsnType(builder, secMsnTypeOffset);
    AircraftMissionTasking_Full.AddPriMsnType(builder, priMsnTypeOffset);
    AircraftMissionTasking_Full.AddMsnNum(builder, msnNumOffset);
    AircraftMissionTasking_Full.AddMsnCommander(builder, msnCommanderOffset);
    AircraftMissionTasking_Full.AddPkgId(builder, pkgIdOffset);
    AircraftMissionTasking_Full.AddAmcMsnNum(builder, amcMsnNumOffset);
    AircraftMissionTasking_Full.AddResMsnInd(builder, resMsnIndOffset);
    AircraftMissionTasking_Full.AddUnitLocName(builder, unitLocNameOffset);
    AircraftMissionTasking_Full.AddUnitDesignator(builder, unitDesignatorOffset);
    AircraftMissionTasking_Full.AddTaskedService(builder, taskedServiceOffset);
    AircraftMissionTasking_Full.AddCountryCode(builder, countryCodeOffset);
    return AircraftMissionTasking_Full.EndAircraftMissionTasking_Full(builder);
  }

  public static void StartAircraftMissionTasking_Full(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(0, countryCodeOffset.Value, 0); }
  public static void AddTaskedService(FlatBufferBuilder builder, StringOffset taskedServiceOffset) { builder.AddOffset(1, taskedServiceOffset.Value, 0); }
  public static void AddUnitDesignator(FlatBufferBuilder builder, StringOffset unitDesignatorOffset) { builder.AddOffset(2, unitDesignatorOffset.Value, 0); }
  public static void AddUnitLocName(FlatBufferBuilder builder, StringOffset unitLocNameOffset) { builder.AddOffset(3, unitLocNameOffset.Value, 0); }
  public static void AddResMsnInd(FlatBufferBuilder builder, StringOffset resMsnIndOffset) { builder.AddOffset(4, resMsnIndOffset.Value, 0); }
  public static void AddAmcMsnNum(FlatBufferBuilder builder, StringOffset amcMsnNumOffset) { builder.AddOffset(5, amcMsnNumOffset.Value, 0); }
  public static void AddPkgId(FlatBufferBuilder builder, StringOffset pkgIdOffset) { builder.AddOffset(6, pkgIdOffset.Value, 0); }
  public static void AddMsnCommander(FlatBufferBuilder builder, StringOffset msnCommanderOffset) { builder.AddOffset(7, msnCommanderOffset.Value, 0); }
  public static void AddMsnNum(FlatBufferBuilder builder, StringOffset msnNumOffset) { builder.AddOffset(8, msnNumOffset.Value, 0); }
  public static void AddPriMsnType(FlatBufferBuilder builder, StringOffset priMsnTypeOffset) { builder.AddOffset(9, priMsnTypeOffset.Value, 0); }
  public static void AddSecMsnType(FlatBufferBuilder builder, StringOffset secMsnTypeOffset) { builder.AddOffset(10, secMsnTypeOffset.Value, 0); }
  public static void AddAlertStatus(FlatBufferBuilder builder, int alertStatus) { builder.AddInt(11, alertStatus, 0); }
  public static void AddDepLocName(FlatBufferBuilder builder, StringOffset depLocNameOffset) { builder.AddOffset(12, depLocNameOffset.Value, 0); }
  public static void AddDepLocUTM(FlatBufferBuilder builder, StringOffset depLocUTMOffset) { builder.AddOffset(13, depLocUTMOffset.Value, 0); }
  public static void AddDepLocLat(FlatBufferBuilder builder, double depLocLat) { builder.AddDouble(14, depLocLat, 0.0); }
  public static void AddDepLocLon(FlatBufferBuilder builder, double depLocLon) { builder.AddDouble(15, depLocLon, 0.0); }
  public static void AddDepTime(FlatBufferBuilder builder, StringOffset depTimeOffset) { builder.AddOffset(16, depTimeOffset.Value, 0); }
  public static void AddRcvyLocName(FlatBufferBuilder builder, VectorOffset rcvyLocNameOffset) { builder.AddOffset(17, rcvyLocNameOffset.Value, 0); }
  public static VectorOffset CreateRcvyLocNameVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocNameVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocNameVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocNameVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRcvyLocNameVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRcvyLocUTM(FlatBufferBuilder builder, VectorOffset rcvyLocUTMOffset) { builder.AddOffset(18, rcvyLocUTMOffset.Value, 0); }
  public static VectorOffset CreateRcvyLocUTMVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocUTMVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocUTMVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocUTMVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRcvyLocUTMVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRcvyLocLat(FlatBufferBuilder builder, VectorOffset rcvyLocLatOffset) { builder.AddOffset(19, rcvyLocLatOffset.Value, 0); }
  public static VectorOffset CreateRcvyLocLatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRcvyLocLatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRcvyLocLon(FlatBufferBuilder builder, VectorOffset rcvyLocLonOffset) { builder.AddOffset(20, rcvyLocLonOffset.Value, 0); }
  public static VectorOffset CreateRcvyLocLonVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLonVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLonVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyLocLonVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRcvyLocLonVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRcvyTime(FlatBufferBuilder builder, VectorOffset rcvyTimeOffset) { builder.AddOffset(21, rcvyTimeOffset.Value, 0); }
  public static VectorOffset CreateRcvyTimeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRcvyTimeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyTimeVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateRcvyTimeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartRcvyTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIndACTasking(FlatBufferBuilder builder, VectorOffset indACTaskingOffset) { builder.AddOffset(22, indACTaskingOffset.Value, 0); }
  public static VectorOffset CreateIndACTaskingVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIndACTaskingVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndACTaskingVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIndACTaskingVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIndACTaskingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAcMsnLocSeg(FlatBufferBuilder builder, VectorOffset acMsnLocSegOffset) { builder.AddOffset(23, acMsnLocSegOffset.Value, 0); }
  public static VectorOffset CreateAcMsnLocSegVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnLocSegVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnLocSegVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAcMsnLocSegVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAcMsnLocSegVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AircraftMissionTasking_Full> EndAircraftMissionTasking_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AircraftMissionTasking_Full>(o);
  }
  public static void FinishAircraftMissionTasking_FullBuffer(FlatBufferBuilder builder, Offset<AircraftMissionTasking_Full> offset) { builder.Finish(offset.Value, "AIRC"); }
  public static void FinishSizePrefixedAircraftMissionTasking_FullBuffer(FlatBufferBuilder builder, Offset<AircraftMissionTasking_Full> offset) { builder.FinishSizePrefixed(offset.Value, "AIRC"); }
  public AircraftMissionTasking_FullT UnPack() {
    var _o = new AircraftMissionTasking_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AircraftMissionTasking_FullT _o) {
    _o.CountryCode = this.CountryCode;
    _o.TaskedService = this.TaskedService;
    _o.UnitDesignator = this.UnitDesignator;
    _o.UnitLocName = this.UnitLocName;
    _o.ResMsnInd = this.ResMsnInd;
    _o.AmcMsnNum = this.AmcMsnNum;
    _o.PkgId = this.PkgId;
    _o.MsnCommander = this.MsnCommander;
    _o.MsnNum = this.MsnNum;
    _o.PriMsnType = this.PriMsnType;
    _o.SecMsnType = this.SecMsnType;
    _o.AlertStatus = this.AlertStatus;
    _o.DepLocName = this.DepLocName;
    _o.DepLocUTM = this.DepLocUTM;
    _o.DepLocLat = this.DepLocLat;
    _o.DepLocLon = this.DepLocLon;
    _o.DepTime = this.DepTime;
    _o.RcvyLocName = new List<string>();
    for (var _j = 0; _j < this.RcvyLocNameLength; ++_j) {_o.RcvyLocName.Add(this.RcvyLocName(_j));}
    _o.RcvyLocUTM = new List<string>();
    for (var _j = 0; _j < this.RcvyLocUTMLength; ++_j) {_o.RcvyLocUTM.Add(this.RcvyLocUTM(_j));}
    _o.RcvyLocLat = new List<string>();
    for (var _j = 0; _j < this.RcvyLocLatLength; ++_j) {_o.RcvyLocLat.Add(this.RcvyLocLat(_j));}
    _o.RcvyLocLon = new List<string>();
    for (var _j = 0; _j < this.RcvyLocLonLength; ++_j) {_o.RcvyLocLon.Add(this.RcvyLocLon(_j));}
    _o.RcvyTime = new List<string>();
    for (var _j = 0; _j < this.RcvyTimeLength; ++_j) {_o.RcvyTime.Add(this.RcvyTime(_j));}
    _o.IndACTasking = new List<string>();
    for (var _j = 0; _j < this.IndACTaskingLength; ++_j) {_o.IndACTasking.Add(this.IndACTasking(_j));}
    _o.AcMsnLocSeg = new List<string>();
    for (var _j = 0; _j < this.AcMsnLocSegLength; ++_j) {_o.AcMsnLocSeg.Add(this.AcMsnLocSeg(_j));}
  }
  public static Offset<AircraftMissionTasking_Full> Pack(FlatBufferBuilder builder, AircraftMissionTasking_FullT _o) {
    if (_o == null) return default(Offset<AircraftMissionTasking_Full>);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _taskedService = _o.TaskedService == null ? default(StringOffset) : builder.CreateString(_o.TaskedService);
    var _unitDesignator = _o.UnitDesignator == null ? default(StringOffset) : builder.CreateString(_o.UnitDesignator);
    var _unitLocName = _o.UnitLocName == null ? default(StringOffset) : builder.CreateString(_o.UnitLocName);
    var _resMsnInd = _o.ResMsnInd == null ? default(StringOffset) : builder.CreateString(_o.ResMsnInd);
    var _amcMsnNum = _o.AmcMsnNum == null ? default(StringOffset) : builder.CreateString(_o.AmcMsnNum);
    var _pkgId = _o.PkgId == null ? default(StringOffset) : builder.CreateString(_o.PkgId);
    var _msnCommander = _o.MsnCommander == null ? default(StringOffset) : builder.CreateString(_o.MsnCommander);
    var _msnNum = _o.MsnNum == null ? default(StringOffset) : builder.CreateString(_o.MsnNum);
    var _priMsnType = _o.PriMsnType == null ? default(StringOffset) : builder.CreateString(_o.PriMsnType);
    var _secMsnType = _o.SecMsnType == null ? default(StringOffset) : builder.CreateString(_o.SecMsnType);
    var _depLocName = _o.DepLocName == null ? default(StringOffset) : builder.CreateString(_o.DepLocName);
    var _depLocUTM = _o.DepLocUTM == null ? default(StringOffset) : builder.CreateString(_o.DepLocUTM);
    var _depTime = _o.DepTime == null ? default(StringOffset) : builder.CreateString(_o.DepTime);
    var _rcvyLocName = default(VectorOffset);
    if (_o.RcvyLocName != null) {
      var __rcvyLocName = new StringOffset[_o.RcvyLocName.Count];
      for (var _j = 0; _j < __rcvyLocName.Length; ++_j) { __rcvyLocName[_j] = builder.CreateString(_o.RcvyLocName[_j]); }
      _rcvyLocName = CreateRcvyLocNameVector(builder, __rcvyLocName);
    }
    var _rcvyLocUTM = default(VectorOffset);
    if (_o.RcvyLocUTM != null) {
      var __rcvyLocUTM = new StringOffset[_o.RcvyLocUTM.Count];
      for (var _j = 0; _j < __rcvyLocUTM.Length; ++_j) { __rcvyLocUTM[_j] = builder.CreateString(_o.RcvyLocUTM[_j]); }
      _rcvyLocUTM = CreateRcvyLocUTMVector(builder, __rcvyLocUTM);
    }
    var _rcvyLocLat = default(VectorOffset);
    if (_o.RcvyLocLat != null) {
      var __rcvyLocLat = new StringOffset[_o.RcvyLocLat.Count];
      for (var _j = 0; _j < __rcvyLocLat.Length; ++_j) { __rcvyLocLat[_j] = builder.CreateString(_o.RcvyLocLat[_j]); }
      _rcvyLocLat = CreateRcvyLocLatVector(builder, __rcvyLocLat);
    }
    var _rcvyLocLon = default(VectorOffset);
    if (_o.RcvyLocLon != null) {
      var __rcvyLocLon = new StringOffset[_o.RcvyLocLon.Count];
      for (var _j = 0; _j < __rcvyLocLon.Length; ++_j) { __rcvyLocLon[_j] = builder.CreateString(_o.RcvyLocLon[_j]); }
      _rcvyLocLon = CreateRcvyLocLonVector(builder, __rcvyLocLon);
    }
    var _rcvyTime = default(VectorOffset);
    if (_o.RcvyTime != null) {
      var __rcvyTime = new StringOffset[_o.RcvyTime.Count];
      for (var _j = 0; _j < __rcvyTime.Length; ++_j) { __rcvyTime[_j] = builder.CreateString(_o.RcvyTime[_j]); }
      _rcvyTime = CreateRcvyTimeVector(builder, __rcvyTime);
    }
    var _indACTasking = default(VectorOffset);
    if (_o.IndACTasking != null) {
      var __indACTasking = new StringOffset[_o.IndACTasking.Count];
      for (var _j = 0; _j < __indACTasking.Length; ++_j) { __indACTasking[_j] = builder.CreateString(_o.IndACTasking[_j]); }
      _indACTasking = CreateIndACTaskingVector(builder, __indACTasking);
    }
    var _acMsnLocSeg = default(VectorOffset);
    if (_o.AcMsnLocSeg != null) {
      var __acMsnLocSeg = new StringOffset[_o.AcMsnLocSeg.Count];
      for (var _j = 0; _j < __acMsnLocSeg.Length; ++_j) { __acMsnLocSeg[_j] = builder.CreateString(_o.AcMsnLocSeg[_j]); }
      _acMsnLocSeg = CreateAcMsnLocSegVector(builder, __acMsnLocSeg);
    }
    return CreateAircraftMissionTasking_Full(
      builder,
      _countryCode,
      _taskedService,
      _unitDesignator,
      _unitLocName,
      _resMsnInd,
      _amcMsnNum,
      _pkgId,
      _msnCommander,
      _msnNum,
      _priMsnType,
      _secMsnType,
      _o.AlertStatus,
      _depLocName,
      _depLocUTM,
      _o.DepLocLat,
      _o.DepLocLon,
      _depTime,
      _rcvyLocName,
      _rcvyLocUTM,
      _rcvyLocLat,
      _rcvyLocLon,
      _rcvyTime,
      _indACTasking,
      _acMsnLocSeg);
  }
}

public class AircraftMissionTasking_FullT
{
  public string CountryCode { get; set; }
  public string TaskedService { get; set; }
  public string UnitDesignator { get; set; }
  public string UnitLocName { get; set; }
  public string ResMsnInd { get; set; }
  public string AmcMsnNum { get; set; }
  public string PkgId { get; set; }
  public string MsnCommander { get; set; }
  public string MsnNum { get; set; }
  public string PriMsnType { get; set; }
  public string SecMsnType { get; set; }
  public int AlertStatus { get; set; }
  public string DepLocName { get; set; }
  public string DepLocUTM { get; set; }
  public double DepLocLat { get; set; }
  public double DepLocLon { get; set; }
  public string DepTime { get; set; }
  public List<string> RcvyLocName { get; set; }
  public List<string> RcvyLocUTM { get; set; }
  public List<string> RcvyLocLat { get; set; }
  public List<string> RcvyLocLon { get; set; }
  public List<string> RcvyTime { get; set; }
  public List<string> IndACTasking { get; set; }
  public List<string> AcMsnLocSeg { get; set; }

  public AircraftMissionTasking_FullT() {
    this.CountryCode = null;
    this.TaskedService = null;
    this.UnitDesignator = null;
    this.UnitLocName = null;
    this.ResMsnInd = null;
    this.AmcMsnNum = null;
    this.PkgId = null;
    this.MsnCommander = null;
    this.MsnNum = null;
    this.PriMsnType = null;
    this.SecMsnType = null;
    this.AlertStatus = 0;
    this.DepLocName = null;
    this.DepLocUTM = null;
    this.DepLocLat = 0.0;
    this.DepLocLon = 0.0;
    this.DepTime = null;
    this.RcvyLocName = null;
    this.RcvyLocUTM = null;
    this.RcvyLocLat = null;
    this.RcvyLocLon = null;
    this.RcvyTime = null;
    this.IndACTasking = null;
    this.AcMsnLocSeg = null;
  }
  public static AircraftMissionTasking_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AircraftMissionTasking_Full.GetRootAsAircraftMissionTasking_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AircraftMissionTasking_Full.FinishAircraftMissionTasking_FullBuffer(fbb, AircraftMissionTasking_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AircraftMissionTasking_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*CountryCode*/, false)
      && verifier.VerifyString(tablePos, 6 /*TaskedService*/, false)
      && verifier.VerifyString(tablePos, 8 /*UnitDesignator*/, false)
      && verifier.VerifyString(tablePos, 10 /*UnitLocName*/, false)
      && verifier.VerifyString(tablePos, 12 /*ResMsnInd*/, false)
      && verifier.VerifyString(tablePos, 14 /*AmcMsnNum*/, false)
      && verifier.VerifyString(tablePos, 16 /*PkgId*/, false)
      && verifier.VerifyString(tablePos, 18 /*MsnCommander*/, false)
      && verifier.VerifyString(tablePos, 20 /*MsnNum*/, false)
      && verifier.VerifyString(tablePos, 22 /*PriMsnType*/, false)
      && verifier.VerifyString(tablePos, 24 /*SecMsnType*/, false)
      && verifier.VerifyField(tablePos, 26 /*AlertStatus*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*DepLocName*/, false)
      && verifier.VerifyString(tablePos, 30 /*DepLocUTM*/, false)
      && verifier.VerifyField(tablePos, 32 /*DepLocLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*DepLocLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 36 /*DepTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*RcvyLocName*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*RcvyLocUTM*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*RcvyLocLat*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*RcvyLocLon*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*RcvyTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*IndACTasking*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*AcMsnLocSeg*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
