// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
public struct EOObservationDetails_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EOObservationDetails_Ingest GetRootAsEOObservationDetails_Ingest(ByteBuffer _bb) { return GetRootAsEOObservationDetails_Ingest(_bb, new EOObservationDetails_Ingest()); }
  public static EOObservationDetails_Ingest GetRootAsEOObservationDetails_Ingest(ByteBuffer _bb, EOObservationDetails_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EOObservationDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EOOB"); }
  public static bool VerifyEOObservationDetails_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EOOB", false, EOObservationDetails_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EOObservationDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the parent EOObservation.
  /// Example: /// Example: EOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdEOObservation { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEOObservationBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdEOObservationBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdEOObservationArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double PredictedRa { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double PredictedDeclination { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double PredictedAzimuth { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double PredictedElevation { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double SunAzimuth { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double SunElevation { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The value is the number of spectral filters used.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumSpectralFilters { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: ['Keyword1', 'Keyword2']
  /// Constraints: No constraints specified.
  public string SpectralFilters(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpectralFiltersLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string SpectralZMFL(int j) { int o = __p.__offset(26); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpectralZMFLLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string SpectralFilterSolarMag(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpectralFilterSolarMagLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ZeroPoints(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZeroPointsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ZeroPointsUnc(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZeroPointsUncLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ExtinctionCoeffs(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtinctionCoeffsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ExtinctionCoeffsUnc(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ExtinctionCoeffsUncLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string ColorCoeffs(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ColorCoeffsLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The value is the number of neutral density filters used.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int NumNeutralDensityFilters { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
  /// Constraints: No constraints specified.
  public string NeutralDensityFilterNames(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NeutralDensityFilterNamesLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string NeutralDensityFilterTransmissions(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NeutralDensityFilterTransmissionsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  public string NeutralDensityFilterTransmissionsUnc(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NeutralDensityFilterTransmissionsUncLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
  /// Example: /// Example: 234.2
  /// Constraints: No constraints specified.
  public double Gain { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  public double Ifov { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pixel array size (width) in pixels.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int PixelArrayWidth { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Pixel array size (height) in pixels.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  public int PixelArrayHeight { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Minimum valid pixel value, this is typically 0.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int PixelMin { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
  /// Example: /// Example: 256
  /// Constraints: No constraints specified.
  public int PixelMax { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double CentroidRow { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double CentroidColumn { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spatial variance of image distribution in vertical direction measured in pixels squared.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double RowVariance { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spatial variance of image distribution in horizontal direction measured in pixels squared.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double ColumnVariance { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
  /// Example: /// Example: 0.01
  /// Constraints: No constraints specified.
  public double RowColCov { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [-127.153, -126.153, -125.153]
  /// Constraints: No constraints specified.
  public string DistFromStreakCenter(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DistFromStreakCenterLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [21.01, 21.382, 21.725]
  /// Constraints: No constraints specified.
  public string SurfBrightness(int j) { int o = __p.__offset(72); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SurfBrightnessLength { get { int o = __p.__offset(72); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [0.165, 0.165, 0.165]
  /// Constraints: No constraints specified.
  public string SurfBrightnessUnc(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SurfBrightnessUncLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Uncertainty in the times reported in UTC in seconds.
  /// Example: /// Example: 13.1
  /// Constraints: No constraints specified.
  public double TimesUnc { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  public double CcdTemp { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  public int CurrentSpectralFilterNum { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int CurrentNeutralDensityFilterNum { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of pixels binned horizontally.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int BinningHoriz { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of pixels binned vertically.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  public int BinningVert { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of stars used in photometric fit count.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  public int PcalNumStars { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The x centroid position on the CCD of the target object in pixels.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double CcdObjPosX { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The y centroid position on the CCD of the target object in pixels.
  /// Example: /// Example: 321.4
  /// Constraints: No constraints specified.
  public double CcdObjPosY { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
  /// Example: /// Example: 133.2
  /// Constraints: No constraints specified.
  public double CcdObjWidth { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
  /// Example: /// Example: 4134.1
  /// Constraints: No constraints specified.
  public double BackgroundSignal { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double BackgroundSignalUnc { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double PeakApertureCount { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Peak Background Raw Counts is the largest pixel value used in background signal.
  /// Example: /// Example: 321
  /// Constraints: No constraints specified.
  public int PeakBackgroundCount { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
  /// Example: /// Example: 13.4
  /// Constraints: No constraints specified.
  public double SnrEst { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double MagInstrumental { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty in the instrumental magnitude.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double MagInstrumentalUnc { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optical Cross Section computed in units m(2)/ster.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double OpticalCrossSection { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty in Optical Cross Section computed in units m(2)/ster.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double OpticalCrossSectionUnc { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStatePosX { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStatePosY { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStatePosZ { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStateVelX { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStateVelY { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  public double SunStateVelZ { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int NumCatalogStars { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int NumDetectedStars { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int NumCorrelatedStars { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double PredictedRaUnc { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double PredictedDeclinationUnc { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Covariance (x^2) in measured Right Ascension (X) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double RaCov { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Covariance (Y^2) in measured declination (Y) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double DeclinationCov { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Covariance (XY) in measured ra/declination (XY) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double RaDeclinationCov { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// World Coordinate System (WCS) X pixel origin in astrometric fit.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double AcalCrPixX { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// World Coordinate System (WCS) Y pixel origin in astrometric fit.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double AcalCrPixY { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double AcalCrValX { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double AcalCrValY { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of stars used in astrometric fit.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  public int AcalNumStars { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Distance from the target object to the sun during the observation in meters.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double ObjSunRange { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double PhaseAngBisect { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double SolarDiskFrac { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time off element set.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double Toes { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Degrees Off Element Set.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  public double Does { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source of the data, will be set to EOObservation source if blank.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(162); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// , will be set to EOObservation dataMode if blank.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EOObservationDetails_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(164); return o != 0 ? (EOObservationDetails_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EOObservationDetails_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(166); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(168); }

  public static Offset<EOObservationDetails_Ingest> CreateEOObservationDetails_Ingest(FlatBufferBuilder builder,
      StringOffset idEOObservationOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      double predictedRa = 0.0,
      double predictedDeclination = 0.0,
      double predictedAzimuth = 0.0,
      double predictedElevation = 0.0,
      double sunAzimuth = 0.0,
      double sunElevation = 0.0,
      int numSpectralFilters = 0,
      VectorOffset spectralFiltersOffset = default(VectorOffset),
      VectorOffset spectralZMFLOffset = default(VectorOffset),
      VectorOffset spectralFilterSolarMagOffset = default(VectorOffset),
      VectorOffset zeroPointsOffset = default(VectorOffset),
      VectorOffset zeroPointsUncOffset = default(VectorOffset),
      VectorOffset extinctionCoeffsOffset = default(VectorOffset),
      VectorOffset extinctionCoeffsUncOffset = default(VectorOffset),
      VectorOffset colorCoeffsOffset = default(VectorOffset),
      int numNeutralDensityFilters = 0,
      VectorOffset neutralDensityFilterNamesOffset = default(VectorOffset),
      VectorOffset neutralDensityFilterTransmissionsOffset = default(VectorOffset),
      VectorOffset neutralDensityFilterTransmissionsUncOffset = default(VectorOffset),
      double gain = 0.0,
      double ifov = 0.0,
      int pixelArrayWidth = 0,
      int pixelArrayHeight = 0,
      int pixelMin = 0,
      int pixelMax = 0,
      double centroidRow = 0.0,
      double centroidColumn = 0.0,
      double rowVariance = 0.0,
      double columnVariance = 0.0,
      double rowColCov = 0.0,
      VectorOffset distFromStreakCenterOffset = default(VectorOffset),
      VectorOffset surfBrightnessOffset = default(VectorOffset),
      VectorOffset surfBrightnessUncOffset = default(VectorOffset),
      double timesUnc = 0.0,
      double ccdTemp = 0.0,
      int currentSpectralFilterNum = 0,
      int currentNeutralDensityFilterNum = 0,
      int binningHoriz = 0,
      int binningVert = 0,
      int pcalNumStars = 0,
      double ccdObjPosX = 0.0,
      double ccdObjPosY = 0.0,
      double ccdObjWidth = 0.0,
      double backgroundSignal = 0.0,
      double backgroundSignalUnc = 0.0,
      double peakApertureCount = 0.0,
      int peakBackgroundCount = 0,
      double snrEst = 0.0,
      double magInstrumental = 0.0,
      double magInstrumentalUnc = 0.0,
      double opticalCrossSection = 0.0,
      double opticalCrossSectionUnc = 0.0,
      double sunStatePosX = 0.0,
      double sunStatePosY = 0.0,
      double sunStatePosZ = 0.0,
      double sunStateVelX = 0.0,
      double sunStateVelY = 0.0,
      double sunStateVelZ = 0.0,
      int numCatalogStars = 0,
      int numDetectedStars = 0,
      int numCorrelatedStars = 0,
      double predictedRaUnc = 0.0,
      double predictedDeclinationUnc = 0.0,
      double raCov = 0.0,
      double declinationCov = 0.0,
      double raDeclinationCov = 0.0,
      double acalCrPixX = 0.0,
      double acalCrPixY = 0.0,
      double acalCrValX = 0.0,
      double acalCrValY = 0.0,
      int acalNumStars = 0,
      double objSunRange = 0.0,
      double phaseAngBisect = 0.0,
      double solarDiskFrac = 0.0,
      double toes = 0.0,
      double does = 0.0,
      StringOffset sourceOffset = default(StringOffset),
      EOObservationDetails_Ingest_dataMode_Enum dataMode = EOObservationDetails_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(83);
    EOObservationDetails_Ingest.AddDoes(builder, does);
    EOObservationDetails_Ingest.AddToes(builder, toes);
    EOObservationDetails_Ingest.AddSolarDiskFrac(builder, solarDiskFrac);
    EOObservationDetails_Ingest.AddPhaseAngBisect(builder, phaseAngBisect);
    EOObservationDetails_Ingest.AddObjSunRange(builder, objSunRange);
    EOObservationDetails_Ingest.AddAcalCrValY(builder, acalCrValY);
    EOObservationDetails_Ingest.AddAcalCrValX(builder, acalCrValX);
    EOObservationDetails_Ingest.AddAcalCrPixY(builder, acalCrPixY);
    EOObservationDetails_Ingest.AddAcalCrPixX(builder, acalCrPixX);
    EOObservationDetails_Ingest.AddRaDeclinationCov(builder, raDeclinationCov);
    EOObservationDetails_Ingest.AddDeclinationCov(builder, declinationCov);
    EOObservationDetails_Ingest.AddRaCov(builder, raCov);
    EOObservationDetails_Ingest.AddPredictedDeclinationUnc(builder, predictedDeclinationUnc);
    EOObservationDetails_Ingest.AddPredictedRaUnc(builder, predictedRaUnc);
    EOObservationDetails_Ingest.AddSunStateVelZ(builder, sunStateVelZ);
    EOObservationDetails_Ingest.AddSunStateVelY(builder, sunStateVelY);
    EOObservationDetails_Ingest.AddSunStateVelX(builder, sunStateVelX);
    EOObservationDetails_Ingest.AddSunStatePosZ(builder, sunStatePosZ);
    EOObservationDetails_Ingest.AddSunStatePosY(builder, sunStatePosY);
    EOObservationDetails_Ingest.AddSunStatePosX(builder, sunStatePosX);
    EOObservationDetails_Ingest.AddOpticalCrossSectionUnc(builder, opticalCrossSectionUnc);
    EOObservationDetails_Ingest.AddOpticalCrossSection(builder, opticalCrossSection);
    EOObservationDetails_Ingest.AddMagInstrumentalUnc(builder, magInstrumentalUnc);
    EOObservationDetails_Ingest.AddMagInstrumental(builder, magInstrumental);
    EOObservationDetails_Ingest.AddSnrEst(builder, snrEst);
    EOObservationDetails_Ingest.AddPeakApertureCount(builder, peakApertureCount);
    EOObservationDetails_Ingest.AddBackgroundSignalUnc(builder, backgroundSignalUnc);
    EOObservationDetails_Ingest.AddBackgroundSignal(builder, backgroundSignal);
    EOObservationDetails_Ingest.AddCcdObjWidth(builder, ccdObjWidth);
    EOObservationDetails_Ingest.AddCcdObjPosY(builder, ccdObjPosY);
    EOObservationDetails_Ingest.AddCcdObjPosX(builder, ccdObjPosX);
    EOObservationDetails_Ingest.AddCcdTemp(builder, ccdTemp);
    EOObservationDetails_Ingest.AddTimesUnc(builder, timesUnc);
    EOObservationDetails_Ingest.AddRowColCov(builder, rowColCov);
    EOObservationDetails_Ingest.AddColumnVariance(builder, columnVariance);
    EOObservationDetails_Ingest.AddRowVariance(builder, rowVariance);
    EOObservationDetails_Ingest.AddCentroidColumn(builder, centroidColumn);
    EOObservationDetails_Ingest.AddCentroidRow(builder, centroidRow);
    EOObservationDetails_Ingest.AddIfov(builder, ifov);
    EOObservationDetails_Ingest.AddGain(builder, gain);
    EOObservationDetails_Ingest.AddSunElevation(builder, sunElevation);
    EOObservationDetails_Ingest.AddSunAzimuth(builder, sunAzimuth);
    EOObservationDetails_Ingest.AddPredictedElevation(builder, predictedElevation);
    EOObservationDetails_Ingest.AddPredictedAzimuth(builder, predictedAzimuth);
    EOObservationDetails_Ingest.AddPredictedDeclination(builder, predictedDeclination);
    EOObservationDetails_Ingest.AddPredictedRa(builder, predictedRa);
    EOObservationDetails_Ingest.AddCreatedBy(builder, createdByOffset);
    EOObservationDetails_Ingest.AddCreatedAt(builder, createdAtOffset);
    EOObservationDetails_Ingest.AddSource(builder, sourceOffset);
    EOObservationDetails_Ingest.AddAcalNumStars(builder, acalNumStars);
    EOObservationDetails_Ingest.AddNumCorrelatedStars(builder, numCorrelatedStars);
    EOObservationDetails_Ingest.AddNumDetectedStars(builder, numDetectedStars);
    EOObservationDetails_Ingest.AddNumCatalogStars(builder, numCatalogStars);
    EOObservationDetails_Ingest.AddPeakBackgroundCount(builder, peakBackgroundCount);
    EOObservationDetails_Ingest.AddPcalNumStars(builder, pcalNumStars);
    EOObservationDetails_Ingest.AddBinningVert(builder, binningVert);
    EOObservationDetails_Ingest.AddBinningHoriz(builder, binningHoriz);
    EOObservationDetails_Ingest.AddCurrentNeutralDensityFilterNum(builder, currentNeutralDensityFilterNum);
    EOObservationDetails_Ingest.AddCurrentSpectralFilterNum(builder, currentSpectralFilterNum);
    EOObservationDetails_Ingest.AddSurfBrightnessUnc(builder, surfBrightnessUncOffset);
    EOObservationDetails_Ingest.AddSurfBrightness(builder, surfBrightnessOffset);
    EOObservationDetails_Ingest.AddDistFromStreakCenter(builder, distFromStreakCenterOffset);
    EOObservationDetails_Ingest.AddPixelMax(builder, pixelMax);
    EOObservationDetails_Ingest.AddPixelMin(builder, pixelMin);
    EOObservationDetails_Ingest.AddPixelArrayHeight(builder, pixelArrayHeight);
    EOObservationDetails_Ingest.AddPixelArrayWidth(builder, pixelArrayWidth);
    EOObservationDetails_Ingest.AddNeutralDensityFilterTransmissionsUnc(builder, neutralDensityFilterTransmissionsUncOffset);
    EOObservationDetails_Ingest.AddNeutralDensityFilterTransmissions(builder, neutralDensityFilterTransmissionsOffset);
    EOObservationDetails_Ingest.AddNeutralDensityFilterNames(builder, neutralDensityFilterNamesOffset);
    EOObservationDetails_Ingest.AddNumNeutralDensityFilters(builder, numNeutralDensityFilters);
    EOObservationDetails_Ingest.AddColorCoeffs(builder, colorCoeffsOffset);
    EOObservationDetails_Ingest.AddExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset);
    EOObservationDetails_Ingest.AddExtinctionCoeffs(builder, extinctionCoeffsOffset);
    EOObservationDetails_Ingest.AddZeroPointsUnc(builder, zeroPointsUncOffset);
    EOObservationDetails_Ingest.AddZeroPoints(builder, zeroPointsOffset);
    EOObservationDetails_Ingest.AddSpectralFilterSolarMag(builder, spectralFilterSolarMagOffset);
    EOObservationDetails_Ingest.AddSpectralZMFL(builder, spectralZMFLOffset);
    EOObservationDetails_Ingest.AddSpectralFilters(builder, spectralFiltersOffset);
    EOObservationDetails_Ingest.AddNumSpectralFilters(builder, numSpectralFilters);
    EOObservationDetails_Ingest.AddObTime(builder, obTimeOffset);
    EOObservationDetails_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    EOObservationDetails_Ingest.AddIdEOObservation(builder, idEOObservationOffset);
    EOObservationDetails_Ingest.AddDataMode(builder, dataMode);
    return EOObservationDetails_Ingest.EndEOObservationDetails_Ingest(builder);
  }

  public static void StartEOObservationDetails_Ingest(FlatBufferBuilder builder) { builder.StartTable(83); }
  public static void AddIdEOObservation(FlatBufferBuilder builder, StringOffset idEOObservationOffset) { builder.AddOffset(0, idEOObservationOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddPredictedRa(FlatBufferBuilder builder, double predictedRa) { builder.AddDouble(3, predictedRa, 0.0); }
  public static void AddPredictedDeclination(FlatBufferBuilder builder, double predictedDeclination) { builder.AddDouble(4, predictedDeclination, 0.0); }
  public static void AddPredictedAzimuth(FlatBufferBuilder builder, double predictedAzimuth) { builder.AddDouble(5, predictedAzimuth, 0.0); }
  public static void AddPredictedElevation(FlatBufferBuilder builder, double predictedElevation) { builder.AddDouble(6, predictedElevation, 0.0); }
  public static void AddSunAzimuth(FlatBufferBuilder builder, double sunAzimuth) { builder.AddDouble(7, sunAzimuth, 0.0); }
  public static void AddSunElevation(FlatBufferBuilder builder, double sunElevation) { builder.AddDouble(8, sunElevation, 0.0); }
  public static void AddNumSpectralFilters(FlatBufferBuilder builder, int numSpectralFilters) { builder.AddInt(9, numSpectralFilters, 0); }
  public static void AddSpectralFilters(FlatBufferBuilder builder, VectorOffset spectralFiltersOffset) { builder.AddOffset(10, spectralFiltersOffset.Value, 0); }
  public static VectorOffset CreateSpectralFiltersVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFiltersVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpectralFiltersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpectralZMFL(FlatBufferBuilder builder, VectorOffset spectralZMFLOffset) { builder.AddOffset(11, spectralZMFLOffset.Value, 0); }
  public static VectorOffset CreateSpectralZMFLVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpectralZMFLVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralZMFLVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralZMFLVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpectralZMFLVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpectralFilterSolarMag(FlatBufferBuilder builder, VectorOffset spectralFilterSolarMagOffset) { builder.AddOffset(12, spectralFilterSolarMagOffset.Value, 0); }
  public static VectorOffset CreateSpectralFilterSolarMagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFilterSolarMagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFilterSolarMagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpectralFilterSolarMagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpectralFilterSolarMagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZeroPoints(FlatBufferBuilder builder, VectorOffset zeroPointsOffset) { builder.AddOffset(13, zeroPointsOffset.Value, 0); }
  public static VectorOffset CreateZeroPointsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZeroPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZeroPointsUnc(FlatBufferBuilder builder, VectorOffset zeroPointsUncOffset) { builder.AddOffset(14, zeroPointsUncOffset.Value, 0); }
  public static VectorOffset CreateZeroPointsUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointsUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZeroPointsUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtinctionCoeffs(FlatBufferBuilder builder, VectorOffset extinctionCoeffsOffset) { builder.AddOffset(15, extinctionCoeffsOffset.Value, 0); }
  public static VectorOffset CreateExtinctionCoeffsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtinctionCoeffsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExtinctionCoeffsUnc(FlatBufferBuilder builder, VectorOffset extinctionCoeffsUncOffset) { builder.AddOffset(16, extinctionCoeffsUncOffset.Value, 0); }
  public static VectorOffset CreateExtinctionCoeffsUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtinctionCoeffsUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtinctionCoeffsUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddColorCoeffs(FlatBufferBuilder builder, VectorOffset colorCoeffsOffset) { builder.AddOffset(17, colorCoeffsOffset.Value, 0); }
  public static VectorOffset CreateColorCoeffsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateColorCoeffsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorCoeffsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorCoeffsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColorCoeffsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNumNeutralDensityFilters(FlatBufferBuilder builder, int numNeutralDensityFilters) { builder.AddInt(18, numNeutralDensityFilters, 0); }
  public static void AddNeutralDensityFilterNames(FlatBufferBuilder builder, VectorOffset neutralDensityFilterNamesOffset) { builder.AddOffset(19, neutralDensityFilterNamesOffset.Value, 0); }
  public static VectorOffset CreateNeutralDensityFilterNamesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterNamesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterNamesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterNamesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNeutralDensityFilterNamesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeutralDensityFilterTransmissions(FlatBufferBuilder builder, VectorOffset neutralDensityFilterTransmissionsOffset) { builder.AddOffset(20, neutralDensityFilterTransmissionsOffset.Value, 0); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNeutralDensityFilterTransmissionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNeutralDensityFilterTransmissionsUnc(FlatBufferBuilder builder, VectorOffset neutralDensityFilterTransmissionsUncOffset) { builder.AddOffset(21, neutralDensityFilterTransmissionsUncOffset.Value, 0); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNeutralDensityFilterTransmissionsUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNeutralDensityFilterTransmissionsUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGain(FlatBufferBuilder builder, double gain) { builder.AddDouble(22, gain, 0.0); }
  public static void AddIfov(FlatBufferBuilder builder, double ifov) { builder.AddDouble(23, ifov, 0.0); }
  public static void AddPixelArrayWidth(FlatBufferBuilder builder, int pixelArrayWidth) { builder.AddInt(24, pixelArrayWidth, 0); }
  public static void AddPixelArrayHeight(FlatBufferBuilder builder, int pixelArrayHeight) { builder.AddInt(25, pixelArrayHeight, 0); }
  public static void AddPixelMin(FlatBufferBuilder builder, int pixelMin) { builder.AddInt(26, pixelMin, 0); }
  public static void AddPixelMax(FlatBufferBuilder builder, int pixelMax) { builder.AddInt(27, pixelMax, 0); }
  public static void AddCentroidRow(FlatBufferBuilder builder, double centroidRow) { builder.AddDouble(28, centroidRow, 0.0); }
  public static void AddCentroidColumn(FlatBufferBuilder builder, double centroidColumn) { builder.AddDouble(29, centroidColumn, 0.0); }
  public static void AddRowVariance(FlatBufferBuilder builder, double rowVariance) { builder.AddDouble(30, rowVariance, 0.0); }
  public static void AddColumnVariance(FlatBufferBuilder builder, double columnVariance) { builder.AddDouble(31, columnVariance, 0.0); }
  public static void AddRowColCov(FlatBufferBuilder builder, double rowColCov) { builder.AddDouble(32, rowColCov, 0.0); }
  public static void AddDistFromStreakCenter(FlatBufferBuilder builder, VectorOffset distFromStreakCenterOffset) { builder.AddOffset(33, distFromStreakCenterOffset.Value, 0); }
  public static VectorOffset CreateDistFromStreakCenterVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDistFromStreakCenterVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDistFromStreakCenterVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDistFromStreakCenterVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDistFromStreakCenterVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSurfBrightness(FlatBufferBuilder builder, VectorOffset surfBrightnessOffset) { builder.AddOffset(34, surfBrightnessOffset.Value, 0); }
  public static VectorOffset CreateSurfBrightnessVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSurfBrightnessVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSurfBrightnessUnc(FlatBufferBuilder builder, VectorOffset surfBrightnessUncOffset) { builder.AddOffset(35, surfBrightnessUncOffset.Value, 0); }
  public static VectorOffset CreateSurfBrightnessUncVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessUncVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessUncVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSurfBrightnessUncVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSurfBrightnessUncVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTimesUnc(FlatBufferBuilder builder, double timesUnc) { builder.AddDouble(36, timesUnc, 0.0); }
  public static void AddCcdTemp(FlatBufferBuilder builder, double ccdTemp) { builder.AddDouble(37, ccdTemp, 0.0); }
  public static void AddCurrentSpectralFilterNum(FlatBufferBuilder builder, int currentSpectralFilterNum) { builder.AddInt(38, currentSpectralFilterNum, 0); }
  public static void AddCurrentNeutralDensityFilterNum(FlatBufferBuilder builder, int currentNeutralDensityFilterNum) { builder.AddInt(39, currentNeutralDensityFilterNum, 0); }
  public static void AddBinningHoriz(FlatBufferBuilder builder, int binningHoriz) { builder.AddInt(40, binningHoriz, 0); }
  public static void AddBinningVert(FlatBufferBuilder builder, int binningVert) { builder.AddInt(41, binningVert, 0); }
  public static void AddPcalNumStars(FlatBufferBuilder builder, int pcalNumStars) { builder.AddInt(42, pcalNumStars, 0); }
  public static void AddCcdObjPosX(FlatBufferBuilder builder, double ccdObjPosX) { builder.AddDouble(43, ccdObjPosX, 0.0); }
  public static void AddCcdObjPosY(FlatBufferBuilder builder, double ccdObjPosY) { builder.AddDouble(44, ccdObjPosY, 0.0); }
  public static void AddCcdObjWidth(FlatBufferBuilder builder, double ccdObjWidth) { builder.AddDouble(45, ccdObjWidth, 0.0); }
  public static void AddBackgroundSignal(FlatBufferBuilder builder, double backgroundSignal) { builder.AddDouble(46, backgroundSignal, 0.0); }
  public static void AddBackgroundSignalUnc(FlatBufferBuilder builder, double backgroundSignalUnc) { builder.AddDouble(47, backgroundSignalUnc, 0.0); }
  public static void AddPeakApertureCount(FlatBufferBuilder builder, double peakApertureCount) { builder.AddDouble(48, peakApertureCount, 0.0); }
  public static void AddPeakBackgroundCount(FlatBufferBuilder builder, int peakBackgroundCount) { builder.AddInt(49, peakBackgroundCount, 0); }
  public static void AddSnrEst(FlatBufferBuilder builder, double snrEst) { builder.AddDouble(50, snrEst, 0.0); }
  public static void AddMagInstrumental(FlatBufferBuilder builder, double magInstrumental) { builder.AddDouble(51, magInstrumental, 0.0); }
  public static void AddMagInstrumentalUnc(FlatBufferBuilder builder, double magInstrumentalUnc) { builder.AddDouble(52, magInstrumentalUnc, 0.0); }
  public static void AddOpticalCrossSection(FlatBufferBuilder builder, double opticalCrossSection) { builder.AddDouble(53, opticalCrossSection, 0.0); }
  public static void AddOpticalCrossSectionUnc(FlatBufferBuilder builder, double opticalCrossSectionUnc) { builder.AddDouble(54, opticalCrossSectionUnc, 0.0); }
  public static void AddSunStatePosX(FlatBufferBuilder builder, double sunStatePosX) { builder.AddDouble(55, sunStatePosX, 0.0); }
  public static void AddSunStatePosY(FlatBufferBuilder builder, double sunStatePosY) { builder.AddDouble(56, sunStatePosY, 0.0); }
  public static void AddSunStatePosZ(FlatBufferBuilder builder, double sunStatePosZ) { builder.AddDouble(57, sunStatePosZ, 0.0); }
  public static void AddSunStateVelX(FlatBufferBuilder builder, double sunStateVelX) { builder.AddDouble(58, sunStateVelX, 0.0); }
  public static void AddSunStateVelY(FlatBufferBuilder builder, double sunStateVelY) { builder.AddDouble(59, sunStateVelY, 0.0); }
  public static void AddSunStateVelZ(FlatBufferBuilder builder, double sunStateVelZ) { builder.AddDouble(60, sunStateVelZ, 0.0); }
  public static void AddNumCatalogStars(FlatBufferBuilder builder, int numCatalogStars) { builder.AddInt(61, numCatalogStars, 0); }
  public static void AddNumDetectedStars(FlatBufferBuilder builder, int numDetectedStars) { builder.AddInt(62, numDetectedStars, 0); }
  public static void AddNumCorrelatedStars(FlatBufferBuilder builder, int numCorrelatedStars) { builder.AddInt(63, numCorrelatedStars, 0); }
  public static void AddPredictedRaUnc(FlatBufferBuilder builder, double predictedRaUnc) { builder.AddDouble(64, predictedRaUnc, 0.0); }
  public static void AddPredictedDeclinationUnc(FlatBufferBuilder builder, double predictedDeclinationUnc) { builder.AddDouble(65, predictedDeclinationUnc, 0.0); }
  public static void AddRaCov(FlatBufferBuilder builder, double raCov) { builder.AddDouble(66, raCov, 0.0); }
  public static void AddDeclinationCov(FlatBufferBuilder builder, double declinationCov) { builder.AddDouble(67, declinationCov, 0.0); }
  public static void AddRaDeclinationCov(FlatBufferBuilder builder, double raDeclinationCov) { builder.AddDouble(68, raDeclinationCov, 0.0); }
  public static void AddAcalCrPixX(FlatBufferBuilder builder, double acalCrPixX) { builder.AddDouble(69, acalCrPixX, 0.0); }
  public static void AddAcalCrPixY(FlatBufferBuilder builder, double acalCrPixY) { builder.AddDouble(70, acalCrPixY, 0.0); }
  public static void AddAcalCrValX(FlatBufferBuilder builder, double acalCrValX) { builder.AddDouble(71, acalCrValX, 0.0); }
  public static void AddAcalCrValY(FlatBufferBuilder builder, double acalCrValY) { builder.AddDouble(72, acalCrValY, 0.0); }
  public static void AddAcalNumStars(FlatBufferBuilder builder, int acalNumStars) { builder.AddInt(73, acalNumStars, 0); }
  public static void AddObjSunRange(FlatBufferBuilder builder, double objSunRange) { builder.AddDouble(74, objSunRange, 0.0); }
  public static void AddPhaseAngBisect(FlatBufferBuilder builder, double phaseAngBisect) { builder.AddDouble(75, phaseAngBisect, 0.0); }
  public static void AddSolarDiskFrac(FlatBufferBuilder builder, double solarDiskFrac) { builder.AddDouble(76, solarDiskFrac, 0.0); }
  public static void AddToes(FlatBufferBuilder builder, double toes) { builder.AddDouble(77, toes, 0.0); }
  public static void AddDoes(FlatBufferBuilder builder, double does) { builder.AddDouble(78, does, 0.0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(79, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EOObservationDetails_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(80, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(81, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(82, createdByOffset.Value, 0); }
  public static Offset<EOObservationDetails_Ingest> EndEOObservationDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EOObservationDetails_Ingest>(o);
  }
  public static void FinishEOObservationDetails_IngestBuffer(FlatBufferBuilder builder, Offset<EOObservationDetails_Ingest> offset) { builder.Finish(offset.Value, "EOOB"); }
  public static void FinishSizePrefixedEOObservationDetails_IngestBuffer(FlatBufferBuilder builder, Offset<EOObservationDetails_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EOOB"); }
  public EOObservationDetails_IngestT UnPack() {
    var _o = new EOObservationDetails_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EOObservationDetails_IngestT _o) {
    _o.IdEOObservation = this.IdEOObservation;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.PredictedRa = this.PredictedRa;
    _o.PredictedDeclination = this.PredictedDeclination;
    _o.PredictedAzimuth = this.PredictedAzimuth;
    _o.PredictedElevation = this.PredictedElevation;
    _o.SunAzimuth = this.SunAzimuth;
    _o.SunElevation = this.SunElevation;
    _o.NumSpectralFilters = this.NumSpectralFilters;
    _o.SpectralFilters = new List<string>();
    for (var _j = 0; _j < this.SpectralFiltersLength; ++_j) {_o.SpectralFilters.Add(this.SpectralFilters(_j));}
    _o.SpectralZMFL = new List<string>();
    for (var _j = 0; _j < this.SpectralZMFLLength; ++_j) {_o.SpectralZMFL.Add(this.SpectralZMFL(_j));}
    _o.SpectralFilterSolarMag = new List<string>();
    for (var _j = 0; _j < this.SpectralFilterSolarMagLength; ++_j) {_o.SpectralFilterSolarMag.Add(this.SpectralFilterSolarMag(_j));}
    _o.ZeroPoints = new List<string>();
    for (var _j = 0; _j < this.ZeroPointsLength; ++_j) {_o.ZeroPoints.Add(this.ZeroPoints(_j));}
    _o.ZeroPointsUnc = new List<string>();
    for (var _j = 0; _j < this.ZeroPointsUncLength; ++_j) {_o.ZeroPointsUnc.Add(this.ZeroPointsUnc(_j));}
    _o.ExtinctionCoeffs = new List<string>();
    for (var _j = 0; _j < this.ExtinctionCoeffsLength; ++_j) {_o.ExtinctionCoeffs.Add(this.ExtinctionCoeffs(_j));}
    _o.ExtinctionCoeffsUnc = new List<string>();
    for (var _j = 0; _j < this.ExtinctionCoeffsUncLength; ++_j) {_o.ExtinctionCoeffsUnc.Add(this.ExtinctionCoeffsUnc(_j));}
    _o.ColorCoeffs = new List<string>();
    for (var _j = 0; _j < this.ColorCoeffsLength; ++_j) {_o.ColorCoeffs.Add(this.ColorCoeffs(_j));}
    _o.NumNeutralDensityFilters = this.NumNeutralDensityFilters;
    _o.NeutralDensityFilterNames = new List<string>();
    for (var _j = 0; _j < this.NeutralDensityFilterNamesLength; ++_j) {_o.NeutralDensityFilterNames.Add(this.NeutralDensityFilterNames(_j));}
    _o.NeutralDensityFilterTransmissions = new List<string>();
    for (var _j = 0; _j < this.NeutralDensityFilterTransmissionsLength; ++_j) {_o.NeutralDensityFilterTransmissions.Add(this.NeutralDensityFilterTransmissions(_j));}
    _o.NeutralDensityFilterTransmissionsUnc = new List<string>();
    for (var _j = 0; _j < this.NeutralDensityFilterTransmissionsUncLength; ++_j) {_o.NeutralDensityFilterTransmissionsUnc.Add(this.NeutralDensityFilterTransmissionsUnc(_j));}
    _o.Gain = this.Gain;
    _o.Ifov = this.Ifov;
    _o.PixelArrayWidth = this.PixelArrayWidth;
    _o.PixelArrayHeight = this.PixelArrayHeight;
    _o.PixelMin = this.PixelMin;
    _o.PixelMax = this.PixelMax;
    _o.CentroidRow = this.CentroidRow;
    _o.CentroidColumn = this.CentroidColumn;
    _o.RowVariance = this.RowVariance;
    _o.ColumnVariance = this.ColumnVariance;
    _o.RowColCov = this.RowColCov;
    _o.DistFromStreakCenter = new List<string>();
    for (var _j = 0; _j < this.DistFromStreakCenterLength; ++_j) {_o.DistFromStreakCenter.Add(this.DistFromStreakCenter(_j));}
    _o.SurfBrightness = new List<string>();
    for (var _j = 0; _j < this.SurfBrightnessLength; ++_j) {_o.SurfBrightness.Add(this.SurfBrightness(_j));}
    _o.SurfBrightnessUnc = new List<string>();
    for (var _j = 0; _j < this.SurfBrightnessUncLength; ++_j) {_o.SurfBrightnessUnc.Add(this.SurfBrightnessUnc(_j));}
    _o.TimesUnc = this.TimesUnc;
    _o.CcdTemp = this.CcdTemp;
    _o.CurrentSpectralFilterNum = this.CurrentSpectralFilterNum;
    _o.CurrentNeutralDensityFilterNum = this.CurrentNeutralDensityFilterNum;
    _o.BinningHoriz = this.BinningHoriz;
    _o.BinningVert = this.BinningVert;
    _o.PcalNumStars = this.PcalNumStars;
    _o.CcdObjPosX = this.CcdObjPosX;
    _o.CcdObjPosY = this.CcdObjPosY;
    _o.CcdObjWidth = this.CcdObjWidth;
    _o.BackgroundSignal = this.BackgroundSignal;
    _o.BackgroundSignalUnc = this.BackgroundSignalUnc;
    _o.PeakApertureCount = this.PeakApertureCount;
    _o.PeakBackgroundCount = this.PeakBackgroundCount;
    _o.SnrEst = this.SnrEst;
    _o.MagInstrumental = this.MagInstrumental;
    _o.MagInstrumentalUnc = this.MagInstrumentalUnc;
    _o.OpticalCrossSection = this.OpticalCrossSection;
    _o.OpticalCrossSectionUnc = this.OpticalCrossSectionUnc;
    _o.SunStatePosX = this.SunStatePosX;
    _o.SunStatePosY = this.SunStatePosY;
    _o.SunStatePosZ = this.SunStatePosZ;
    _o.SunStateVelX = this.SunStateVelX;
    _o.SunStateVelY = this.SunStateVelY;
    _o.SunStateVelZ = this.SunStateVelZ;
    _o.NumCatalogStars = this.NumCatalogStars;
    _o.NumDetectedStars = this.NumDetectedStars;
    _o.NumCorrelatedStars = this.NumCorrelatedStars;
    _o.PredictedRaUnc = this.PredictedRaUnc;
    _o.PredictedDeclinationUnc = this.PredictedDeclinationUnc;
    _o.RaCov = this.RaCov;
    _o.DeclinationCov = this.DeclinationCov;
    _o.RaDeclinationCov = this.RaDeclinationCov;
    _o.AcalCrPixX = this.AcalCrPixX;
    _o.AcalCrPixY = this.AcalCrPixY;
    _o.AcalCrValX = this.AcalCrValX;
    _o.AcalCrValY = this.AcalCrValY;
    _o.AcalNumStars = this.AcalNumStars;
    _o.ObjSunRange = this.ObjSunRange;
    _o.PhaseAngBisect = this.PhaseAngBisect;
    _o.SolarDiskFrac = this.SolarDiskFrac;
    _o.Toes = this.Toes;
    _o.Does = this.Does;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<EOObservationDetails_Ingest> Pack(FlatBufferBuilder builder, EOObservationDetails_IngestT _o) {
    if (_o == null) return default(Offset<EOObservationDetails_Ingest>);
    var _idEOObservation = _o.IdEOObservation == null ? default(StringOffset) : builder.CreateString(_o.IdEOObservation);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _spectralFilters = default(VectorOffset);
    if (_o.SpectralFilters != null) {
      var __spectralFilters = new StringOffset[_o.SpectralFilters.Count];
      for (var _j = 0; _j < __spectralFilters.Length; ++_j) { __spectralFilters[_j] = builder.CreateString(_o.SpectralFilters[_j]); }
      _spectralFilters = CreateSpectralFiltersVector(builder, __spectralFilters);
    }
    var _spectralZMFL = default(VectorOffset);
    if (_o.SpectralZMFL != null) {
      var __spectralZMFL = new StringOffset[_o.SpectralZMFL.Count];
      for (var _j = 0; _j < __spectralZMFL.Length; ++_j) { __spectralZMFL[_j] = builder.CreateString(_o.SpectralZMFL[_j]); }
      _spectralZMFL = CreateSpectralZMFLVector(builder, __spectralZMFL);
    }
    var _spectralFilterSolarMag = default(VectorOffset);
    if (_o.SpectralFilterSolarMag != null) {
      var __spectralFilterSolarMag = new StringOffset[_o.SpectralFilterSolarMag.Count];
      for (var _j = 0; _j < __spectralFilterSolarMag.Length; ++_j) { __spectralFilterSolarMag[_j] = builder.CreateString(_o.SpectralFilterSolarMag[_j]); }
      _spectralFilterSolarMag = CreateSpectralFilterSolarMagVector(builder, __spectralFilterSolarMag);
    }
    var _zeroPoints = default(VectorOffset);
    if (_o.ZeroPoints != null) {
      var __zeroPoints = new StringOffset[_o.ZeroPoints.Count];
      for (var _j = 0; _j < __zeroPoints.Length; ++_j) { __zeroPoints[_j] = builder.CreateString(_o.ZeroPoints[_j]); }
      _zeroPoints = CreateZeroPointsVector(builder, __zeroPoints);
    }
    var _zeroPointsUnc = default(VectorOffset);
    if (_o.ZeroPointsUnc != null) {
      var __zeroPointsUnc = new StringOffset[_o.ZeroPointsUnc.Count];
      for (var _j = 0; _j < __zeroPointsUnc.Length; ++_j) { __zeroPointsUnc[_j] = builder.CreateString(_o.ZeroPointsUnc[_j]); }
      _zeroPointsUnc = CreateZeroPointsUncVector(builder, __zeroPointsUnc);
    }
    var _extinctionCoeffs = default(VectorOffset);
    if (_o.ExtinctionCoeffs != null) {
      var __extinctionCoeffs = new StringOffset[_o.ExtinctionCoeffs.Count];
      for (var _j = 0; _j < __extinctionCoeffs.Length; ++_j) { __extinctionCoeffs[_j] = builder.CreateString(_o.ExtinctionCoeffs[_j]); }
      _extinctionCoeffs = CreateExtinctionCoeffsVector(builder, __extinctionCoeffs);
    }
    var _extinctionCoeffsUnc = default(VectorOffset);
    if (_o.ExtinctionCoeffsUnc != null) {
      var __extinctionCoeffsUnc = new StringOffset[_o.ExtinctionCoeffsUnc.Count];
      for (var _j = 0; _j < __extinctionCoeffsUnc.Length; ++_j) { __extinctionCoeffsUnc[_j] = builder.CreateString(_o.ExtinctionCoeffsUnc[_j]); }
      _extinctionCoeffsUnc = CreateExtinctionCoeffsUncVector(builder, __extinctionCoeffsUnc);
    }
    var _colorCoeffs = default(VectorOffset);
    if (_o.ColorCoeffs != null) {
      var __colorCoeffs = new StringOffset[_o.ColorCoeffs.Count];
      for (var _j = 0; _j < __colorCoeffs.Length; ++_j) { __colorCoeffs[_j] = builder.CreateString(_o.ColorCoeffs[_j]); }
      _colorCoeffs = CreateColorCoeffsVector(builder, __colorCoeffs);
    }
    var _neutralDensityFilterNames = default(VectorOffset);
    if (_o.NeutralDensityFilterNames != null) {
      var __neutralDensityFilterNames = new StringOffset[_o.NeutralDensityFilterNames.Count];
      for (var _j = 0; _j < __neutralDensityFilterNames.Length; ++_j) { __neutralDensityFilterNames[_j] = builder.CreateString(_o.NeutralDensityFilterNames[_j]); }
      _neutralDensityFilterNames = CreateNeutralDensityFilterNamesVector(builder, __neutralDensityFilterNames);
    }
    var _neutralDensityFilterTransmissions = default(VectorOffset);
    if (_o.NeutralDensityFilterTransmissions != null) {
      var __neutralDensityFilterTransmissions = new StringOffset[_o.NeutralDensityFilterTransmissions.Count];
      for (var _j = 0; _j < __neutralDensityFilterTransmissions.Length; ++_j) { __neutralDensityFilterTransmissions[_j] = builder.CreateString(_o.NeutralDensityFilterTransmissions[_j]); }
      _neutralDensityFilterTransmissions = CreateNeutralDensityFilterTransmissionsVector(builder, __neutralDensityFilterTransmissions);
    }
    var _neutralDensityFilterTransmissionsUnc = default(VectorOffset);
    if (_o.NeutralDensityFilterTransmissionsUnc != null) {
      var __neutralDensityFilterTransmissionsUnc = new StringOffset[_o.NeutralDensityFilterTransmissionsUnc.Count];
      for (var _j = 0; _j < __neutralDensityFilterTransmissionsUnc.Length; ++_j) { __neutralDensityFilterTransmissionsUnc[_j] = builder.CreateString(_o.NeutralDensityFilterTransmissionsUnc[_j]); }
      _neutralDensityFilterTransmissionsUnc = CreateNeutralDensityFilterTransmissionsUncVector(builder, __neutralDensityFilterTransmissionsUnc);
    }
    var _distFromStreakCenter = default(VectorOffset);
    if (_o.DistFromStreakCenter != null) {
      var __distFromStreakCenter = new StringOffset[_o.DistFromStreakCenter.Count];
      for (var _j = 0; _j < __distFromStreakCenter.Length; ++_j) { __distFromStreakCenter[_j] = builder.CreateString(_o.DistFromStreakCenter[_j]); }
      _distFromStreakCenter = CreateDistFromStreakCenterVector(builder, __distFromStreakCenter);
    }
    var _surfBrightness = default(VectorOffset);
    if (_o.SurfBrightness != null) {
      var __surfBrightness = new StringOffset[_o.SurfBrightness.Count];
      for (var _j = 0; _j < __surfBrightness.Length; ++_j) { __surfBrightness[_j] = builder.CreateString(_o.SurfBrightness[_j]); }
      _surfBrightness = CreateSurfBrightnessVector(builder, __surfBrightness);
    }
    var _surfBrightnessUnc = default(VectorOffset);
    if (_o.SurfBrightnessUnc != null) {
      var __surfBrightnessUnc = new StringOffset[_o.SurfBrightnessUnc.Count];
      for (var _j = 0; _j < __surfBrightnessUnc.Length; ++_j) { __surfBrightnessUnc[_j] = builder.CreateString(_o.SurfBrightnessUnc[_j]); }
      _surfBrightnessUnc = CreateSurfBrightnessUncVector(builder, __surfBrightnessUnc);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateEOObservationDetails_Ingest(
      builder,
      _idEOObservation,
      _classificationMarking,
      _obTime,
      _o.PredictedRa,
      _o.PredictedDeclination,
      _o.PredictedAzimuth,
      _o.PredictedElevation,
      _o.SunAzimuth,
      _o.SunElevation,
      _o.NumSpectralFilters,
      _spectralFilters,
      _spectralZMFL,
      _spectralFilterSolarMag,
      _zeroPoints,
      _zeroPointsUnc,
      _extinctionCoeffs,
      _extinctionCoeffsUnc,
      _colorCoeffs,
      _o.NumNeutralDensityFilters,
      _neutralDensityFilterNames,
      _neutralDensityFilterTransmissions,
      _neutralDensityFilterTransmissionsUnc,
      _o.Gain,
      _o.Ifov,
      _o.PixelArrayWidth,
      _o.PixelArrayHeight,
      _o.PixelMin,
      _o.PixelMax,
      _o.CentroidRow,
      _o.CentroidColumn,
      _o.RowVariance,
      _o.ColumnVariance,
      _o.RowColCov,
      _distFromStreakCenter,
      _surfBrightness,
      _surfBrightnessUnc,
      _o.TimesUnc,
      _o.CcdTemp,
      _o.CurrentSpectralFilterNum,
      _o.CurrentNeutralDensityFilterNum,
      _o.BinningHoriz,
      _o.BinningVert,
      _o.PcalNumStars,
      _o.CcdObjPosX,
      _o.CcdObjPosY,
      _o.CcdObjWidth,
      _o.BackgroundSignal,
      _o.BackgroundSignalUnc,
      _o.PeakApertureCount,
      _o.PeakBackgroundCount,
      _o.SnrEst,
      _o.MagInstrumental,
      _o.MagInstrumentalUnc,
      _o.OpticalCrossSection,
      _o.OpticalCrossSectionUnc,
      _o.SunStatePosX,
      _o.SunStatePosY,
      _o.SunStatePosZ,
      _o.SunStateVelX,
      _o.SunStateVelY,
      _o.SunStateVelZ,
      _o.NumCatalogStars,
      _o.NumDetectedStars,
      _o.NumCorrelatedStars,
      _o.PredictedRaUnc,
      _o.PredictedDeclinationUnc,
      _o.RaCov,
      _o.DeclinationCov,
      _o.RaDeclinationCov,
      _o.AcalCrPixX,
      _o.AcalCrPixY,
      _o.AcalCrValX,
      _o.AcalCrValY,
      _o.AcalNumStars,
      _o.ObjSunRange,
      _o.PhaseAngBisect,
      _o.SolarDiskFrac,
      _o.Toes,
      _o.Does,
      _source,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class EOObservationDetails_IngestT
{
  public string IdEOObservation { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public double PredictedRa { get; set; }
  public double PredictedDeclination { get; set; }
  public double PredictedAzimuth { get; set; }
  public double PredictedElevation { get; set; }
  public double SunAzimuth { get; set; }
  public double SunElevation { get; set; }
  public int NumSpectralFilters { get; set; }
  public List<string> SpectralFilters { get; set; }
  public List<string> SpectralZMFL { get; set; }
  public List<string> SpectralFilterSolarMag { get; set; }
  public List<string> ZeroPoints { get; set; }
  public List<string> ZeroPointsUnc { get; set; }
  public List<string> ExtinctionCoeffs { get; set; }
  public List<string> ExtinctionCoeffsUnc { get; set; }
  public List<string> ColorCoeffs { get; set; }
  public int NumNeutralDensityFilters { get; set; }
  public List<string> NeutralDensityFilterNames { get; set; }
  public List<string> NeutralDensityFilterTransmissions { get; set; }
  public List<string> NeutralDensityFilterTransmissionsUnc { get; set; }
  public double Gain { get; set; }
  public double Ifov { get; set; }
  public int PixelArrayWidth { get; set; }
  public int PixelArrayHeight { get; set; }
  public int PixelMin { get; set; }
  public int PixelMax { get; set; }
  public double CentroidRow { get; set; }
  public double CentroidColumn { get; set; }
  public double RowVariance { get; set; }
  public double ColumnVariance { get; set; }
  public double RowColCov { get; set; }
  public List<string> DistFromStreakCenter { get; set; }
  public List<string> SurfBrightness { get; set; }
  public List<string> SurfBrightnessUnc { get; set; }
  public double TimesUnc { get; set; }
  public double CcdTemp { get; set; }
  public int CurrentSpectralFilterNum { get; set; }
  public int CurrentNeutralDensityFilterNum { get; set; }
  public int BinningHoriz { get; set; }
  public int BinningVert { get; set; }
  public int PcalNumStars { get; set; }
  public double CcdObjPosX { get; set; }
  public double CcdObjPosY { get; set; }
  public double CcdObjWidth { get; set; }
  public double BackgroundSignal { get; set; }
  public double BackgroundSignalUnc { get; set; }
  public double PeakApertureCount { get; set; }
  public int PeakBackgroundCount { get; set; }
  public double SnrEst { get; set; }
  public double MagInstrumental { get; set; }
  public double MagInstrumentalUnc { get; set; }
  public double OpticalCrossSection { get; set; }
  public double OpticalCrossSectionUnc { get; set; }
  public double SunStatePosX { get; set; }
  public double SunStatePosY { get; set; }
  public double SunStatePosZ { get; set; }
  public double SunStateVelX { get; set; }
  public double SunStateVelY { get; set; }
  public double SunStateVelZ { get; set; }
  public int NumCatalogStars { get; set; }
  public int NumDetectedStars { get; set; }
  public int NumCorrelatedStars { get; set; }
  public double PredictedRaUnc { get; set; }
  public double PredictedDeclinationUnc { get; set; }
  public double RaCov { get; set; }
  public double DeclinationCov { get; set; }
  public double RaDeclinationCov { get; set; }
  public double AcalCrPixX { get; set; }
  public double AcalCrPixY { get; set; }
  public double AcalCrValX { get; set; }
  public double AcalCrValY { get; set; }
  public int AcalNumStars { get; set; }
  public double ObjSunRange { get; set; }
  public double PhaseAngBisect { get; set; }
  public double SolarDiskFrac { get; set; }
  public double Toes { get; set; }
  public double Does { get; set; }
  public string Source { get; set; }
  public EOObservationDetails_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public EOObservationDetails_IngestT() {
    this.IdEOObservation = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.PredictedRa = 0.0;
    this.PredictedDeclination = 0.0;
    this.PredictedAzimuth = 0.0;
    this.PredictedElevation = 0.0;
    this.SunAzimuth = 0.0;
    this.SunElevation = 0.0;
    this.NumSpectralFilters = 0;
    this.SpectralFilters = null;
    this.SpectralZMFL = null;
    this.SpectralFilterSolarMag = null;
    this.ZeroPoints = null;
    this.ZeroPointsUnc = null;
    this.ExtinctionCoeffs = null;
    this.ExtinctionCoeffsUnc = null;
    this.ColorCoeffs = null;
    this.NumNeutralDensityFilters = 0;
    this.NeutralDensityFilterNames = null;
    this.NeutralDensityFilterTransmissions = null;
    this.NeutralDensityFilterTransmissionsUnc = null;
    this.Gain = 0.0;
    this.Ifov = 0.0;
    this.PixelArrayWidth = 0;
    this.PixelArrayHeight = 0;
    this.PixelMin = 0;
    this.PixelMax = 0;
    this.CentroidRow = 0.0;
    this.CentroidColumn = 0.0;
    this.RowVariance = 0.0;
    this.ColumnVariance = 0.0;
    this.RowColCov = 0.0;
    this.DistFromStreakCenter = null;
    this.SurfBrightness = null;
    this.SurfBrightnessUnc = null;
    this.TimesUnc = 0.0;
    this.CcdTemp = 0.0;
    this.CurrentSpectralFilterNum = 0;
    this.CurrentNeutralDensityFilterNum = 0;
    this.BinningHoriz = 0;
    this.BinningVert = 0;
    this.PcalNumStars = 0;
    this.CcdObjPosX = 0.0;
    this.CcdObjPosY = 0.0;
    this.CcdObjWidth = 0.0;
    this.BackgroundSignal = 0.0;
    this.BackgroundSignalUnc = 0.0;
    this.PeakApertureCount = 0.0;
    this.PeakBackgroundCount = 0;
    this.SnrEst = 0.0;
    this.MagInstrumental = 0.0;
    this.MagInstrumentalUnc = 0.0;
    this.OpticalCrossSection = 0.0;
    this.OpticalCrossSectionUnc = 0.0;
    this.SunStatePosX = 0.0;
    this.SunStatePosY = 0.0;
    this.SunStatePosZ = 0.0;
    this.SunStateVelX = 0.0;
    this.SunStateVelY = 0.0;
    this.SunStateVelZ = 0.0;
    this.NumCatalogStars = 0;
    this.NumDetectedStars = 0;
    this.NumCorrelatedStars = 0;
    this.PredictedRaUnc = 0.0;
    this.PredictedDeclinationUnc = 0.0;
    this.RaCov = 0.0;
    this.DeclinationCov = 0.0;
    this.RaDeclinationCov = 0.0;
    this.AcalCrPixX = 0.0;
    this.AcalCrPixY = 0.0;
    this.AcalCrValX = 0.0;
    this.AcalCrValY = 0.0;
    this.AcalNumStars = 0;
    this.ObjSunRange = 0.0;
    this.PhaseAngBisect = 0.0;
    this.SolarDiskFrac = 0.0;
    this.Toes = 0.0;
    this.Does = 0.0;
    this.Source = null;
    this.DataMode = EOObservationDetails_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static EOObservationDetails_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EOObservationDetails_Ingest.GetRootAsEOObservationDetails_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EOObservationDetails_Ingest.FinishEOObservationDetails_IngestBuffer(fbb, EOObservationDetails_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EOObservationDetails_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*IdEOObservation*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyField(tablePos, 10 /*PredictedRa*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*PredictedDeclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*PredictedAzimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*PredictedElevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*SunAzimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*SunElevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*NumSpectralFilters*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*SpectralFilters*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 26 /*SpectralZMFL*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*SpectralFilterSolarMag*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*ZeroPoints*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*ZeroPointsUnc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*ExtinctionCoeffs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*ExtinctionCoeffsUnc*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*ColorCoeffs*/, false)
      && verifier.VerifyField(tablePos, 40 /*NumNeutralDensityFilters*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*NeutralDensityFilterNames*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*NeutralDensityFilterTransmissions*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*NeutralDensityFilterTransmissionsUnc*/, false)
      && verifier.VerifyField(tablePos, 48 /*Gain*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Ifov*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*PixelArrayWidth*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*PixelArrayHeight*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 56 /*PixelMin*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 58 /*PixelMax*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 60 /*CentroidRow*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*CentroidColumn*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*RowVariance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*ColumnVariance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*RowColCov*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*DistFromStreakCenter*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 72 /*SurfBrightness*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 74 /*SurfBrightnessUnc*/, false)
      && verifier.VerifyField(tablePos, 76 /*TimesUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*CcdTemp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*CurrentSpectralFilterNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 82 /*CurrentNeutralDensityFilterNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 84 /*BinningHoriz*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 86 /*BinningVert*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*PcalNumStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*CcdObjPosX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*CcdObjPosY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*CcdObjWidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*BackgroundSignal*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*BackgroundSignalUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*PeakApertureCount*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*PeakBackgroundCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 104 /*SnrEst*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*MagInstrumental*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*MagInstrumentalUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 110 /*OpticalCrossSection*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 112 /*OpticalCrossSectionUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 114 /*SunStatePosX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*SunStatePosY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*SunStatePosZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*SunStateVelX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*SunStateVelY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*SunStateVelZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*NumCatalogStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 128 /*NumDetectedStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 130 /*NumCorrelatedStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 132 /*PredictedRaUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*PredictedDeclinationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*RaCov*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*DeclinationCov*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*RaDeclinationCov*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*AcalCrPixX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*AcalCrPixY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*AcalCrValX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*AcalCrValY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*AcalNumStars*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 152 /*ObjSunRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*PhaseAngBisect*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*SolarDiskFrac*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*Toes*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 160 /*Does*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 162 /*Source*/, false)
      && verifier.VerifyField(tablePos, 164 /*DataMode*/, 1 /*EOObservationDetails_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 166 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 168 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
