// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Channel information on a particular transponder.
public struct Channel_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Channel_Ingest GetRootAsChannel_Ingest(ByteBuffer _bb) { return GetRootAsChannel_Ingest(_bb, new Channel_Ingest()); }
  public static Channel_Ingest GetRootAsChannel_Ingest(ByteBuffer _bb, Channel_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Channel_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "CHAN"); }
  public static bool VerifyChannel_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("CHAN", false, Channel_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Channel_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: CHANNEL-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// ID of the parent transponder object for this Channel.
  /// Example: /// Example: REF-TRANSPONDER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdTransponder { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdTransponderBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdTransponderBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdTransponderArray() { return __p.__vector_as_array<byte>(6); }
  /// Channel name.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(8); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(10); }
  /// Channel type.
  /// Example: /// Example: Example type
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Type { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// Identifier of the particular beam for this channel.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdBeam { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBeamBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdBeamBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdBeamArray() { return __p.__vector_as_array<byte>(14); }
  /// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
  /// Example: /// Example: B8VD
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string BeamName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeamNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBeamNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBeamNameArray() { return __p.__vector_as_array<byte>(16); }
  /// ID of the RF Band object for this channel.
  /// Example: /// Example: REF-RFBAND-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdRFBand { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdRFBandBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdRFBandBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdRFBandArray() { return __p.__vector_as_array<byte>(18); }
  /// Channel encryption.
  /// Example: /// Example: Example encryption
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Encryption { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEncryptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEncryptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEncryptionArray() { return __p.__vector_as_array<byte>(20); }
  /// Pkg.
  /// Example: /// Example: Example pkg
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Pkg { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPkgBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetPkgBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetPkgArray() { return __p.__vector_as_array<byte>(22); }
  /// Res.
  /// Example: /// Example: Example res
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Res { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetResBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetResArray() { return __p.__vector_as_array<byte>(24); }
  /// Channel compression.
  /// Example: /// Example: Example compression
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Compression { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCompressionBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCompressionBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCompressionArray() { return __p.__vector_as_array<byte>(26); }
  /// Channel vPid.
  /// Example: /// Example: VP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Vpid { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVpidBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetVpidBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetVpidArray() { return __p.__vector_as_array<byte>(28); }
  /// Channel aPid.
  /// Example: /// Example: AP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Apid { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetApidBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetApidBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetApidArray() { return __p.__vector_as_array<byte>(30); }
  /// SID.
  /// Example: /// Example: S-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  public string Sid { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSidBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSidBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSidArray() { return __p.__vector_as_array<byte>(32); }
  /// Owner.
  /// Example: /// Example: example_owner
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Owner { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOwnerBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOwnerBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOwnerArray() { return __p.__vector_as_array<byte>(34); }
  /// Source of the data.
  /// Example: /// Example: system.source
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(36); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: example_origin
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(38); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(40); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Channel_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(42); return o != 0 ? (Channel_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Channel_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(44); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(46); }

  public static Offset<Channel_Ingest> CreateChannel_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idTransponderOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset idBeamOffset = default(StringOffset),
      StringOffset beamNameOffset = default(StringOffset),
      StringOffset idRFBandOffset = default(StringOffset),
      StringOffset encryptionOffset = default(StringOffset),
      StringOffset pkgOffset = default(StringOffset),
      StringOffset resOffset = default(StringOffset),
      StringOffset compressionOffset = default(StringOffset),
      StringOffset vpidOffset = default(StringOffset),
      StringOffset apidOffset = default(StringOffset),
      StringOffset sidOffset = default(StringOffset),
      StringOffset ownerOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      Channel_Ingest_dataMode_Enum dataMode = Channel_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset)) {
    builder.StartTable(22);
    Channel_Ingest.AddCreatedBy(builder, createdByOffset);
    Channel_Ingest.AddCreatedAt(builder, createdAtOffset);
    Channel_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Channel_Ingest.AddOrigin(builder, originOffset);
    Channel_Ingest.AddSource(builder, sourceOffset);
    Channel_Ingest.AddOwner(builder, ownerOffset);
    Channel_Ingest.AddSid(builder, sidOffset);
    Channel_Ingest.AddApid(builder, apidOffset);
    Channel_Ingest.AddVpid(builder, vpidOffset);
    Channel_Ingest.AddCompression(builder, compressionOffset);
    Channel_Ingest.AddRes(builder, resOffset);
    Channel_Ingest.AddPkg(builder, pkgOffset);
    Channel_Ingest.AddEncryption(builder, encryptionOffset);
    Channel_Ingest.AddIdRFBand(builder, idRFBandOffset);
    Channel_Ingest.AddBeamName(builder, beamNameOffset);
    Channel_Ingest.AddIdBeam(builder, idBeamOffset);
    Channel_Ingest.AddType(builder, typeOffset);
    Channel_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Channel_Ingest.AddName(builder, nameOffset);
    Channel_Ingest.AddIdTransponder(builder, idTransponderOffset);
    Channel_Ingest.AddId(builder, idOffset);
    Channel_Ingest.AddDataMode(builder, dataMode);
    return Channel_Ingest.EndChannel_Ingest(builder);
  }

  public static void StartChannel_Ingest(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdTransponder(FlatBufferBuilder builder, StringOffset idTransponderOffset) { builder.AddOffset(1, idTransponderOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(3, classificationMarkingOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(4, typeOffset.Value, 0); }
  public static void AddIdBeam(FlatBufferBuilder builder, StringOffset idBeamOffset) { builder.AddOffset(5, idBeamOffset.Value, 0); }
  public static void AddBeamName(FlatBufferBuilder builder, StringOffset beamNameOffset) { builder.AddOffset(6, beamNameOffset.Value, 0); }
  public static void AddIdRFBand(FlatBufferBuilder builder, StringOffset idRFBandOffset) { builder.AddOffset(7, idRFBandOffset.Value, 0); }
  public static void AddEncryption(FlatBufferBuilder builder, StringOffset encryptionOffset) { builder.AddOffset(8, encryptionOffset.Value, 0); }
  public static void AddPkg(FlatBufferBuilder builder, StringOffset pkgOffset) { builder.AddOffset(9, pkgOffset.Value, 0); }
  public static void AddRes(FlatBufferBuilder builder, StringOffset resOffset) { builder.AddOffset(10, resOffset.Value, 0); }
  public static void AddCompression(FlatBufferBuilder builder, StringOffset compressionOffset) { builder.AddOffset(11, compressionOffset.Value, 0); }
  public static void AddVpid(FlatBufferBuilder builder, StringOffset vpidOffset) { builder.AddOffset(12, vpidOffset.Value, 0); }
  public static void AddApid(FlatBufferBuilder builder, StringOffset apidOffset) { builder.AddOffset(13, apidOffset.Value, 0); }
  public static void AddSid(FlatBufferBuilder builder, StringOffset sidOffset) { builder.AddOffset(14, sidOffset.Value, 0); }
  public static void AddOwner(FlatBufferBuilder builder, StringOffset ownerOffset) { builder.AddOffset(15, ownerOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(16, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(17, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(18, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Channel_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(19, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(20, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(21, createdByOffset.Value, 0); }
  public static Offset<Channel_Ingest> EndChannel_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Channel_Ingest>(o);
  }
  public static void FinishChannel_IngestBuffer(FlatBufferBuilder builder, Offset<Channel_Ingest> offset) { builder.Finish(offset.Value, "CHAN"); }
  public static void FinishSizePrefixedChannel_IngestBuffer(FlatBufferBuilder builder, Offset<Channel_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "CHAN"); }
  public Channel_IngestT UnPack() {
    var _o = new Channel_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Channel_IngestT _o) {
    _o.Id = this.Id;
    _o.IdTransponder = this.IdTransponder;
    _o.Name = this.Name;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Type = this.Type;
    _o.IdBeam = this.IdBeam;
    _o.BeamName = this.BeamName;
    _o.IdRFBand = this.IdRFBand;
    _o.Encryption = this.Encryption;
    _o.Pkg = this.Pkg;
    _o.Res = this.Res;
    _o.Compression = this.Compression;
    _o.Vpid = this.Vpid;
    _o.Apid = this.Apid;
    _o.Sid = this.Sid;
    _o.Owner = this.Owner;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
  }
  public static Offset<Channel_Ingest> Pack(FlatBufferBuilder builder, Channel_IngestT _o) {
    if (_o == null) return default(Offset<Channel_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idTransponder = _o.IdTransponder == null ? default(StringOffset) : builder.CreateString(_o.IdTransponder);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _idBeam = _o.IdBeam == null ? default(StringOffset) : builder.CreateString(_o.IdBeam);
    var _beamName = _o.BeamName == null ? default(StringOffset) : builder.CreateString(_o.BeamName);
    var _idRFBand = _o.IdRFBand == null ? default(StringOffset) : builder.CreateString(_o.IdRFBand);
    var _encryption = _o.Encryption == null ? default(StringOffset) : builder.CreateString(_o.Encryption);
    var _pkg = _o.Pkg == null ? default(StringOffset) : builder.CreateString(_o.Pkg);
    var _res = _o.Res == null ? default(StringOffset) : builder.CreateString(_o.Res);
    var _compression = _o.Compression == null ? default(StringOffset) : builder.CreateString(_o.Compression);
    var _vpid = _o.Vpid == null ? default(StringOffset) : builder.CreateString(_o.Vpid);
    var _apid = _o.Apid == null ? default(StringOffset) : builder.CreateString(_o.Apid);
    var _sid = _o.Sid == null ? default(StringOffset) : builder.CreateString(_o.Sid);
    var _owner = _o.Owner == null ? default(StringOffset) : builder.CreateString(_o.Owner);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    return CreateChannel_Ingest(
      builder,
      _id,
      _idTransponder,
      _name,
      _classificationMarking,
      _type,
      _idBeam,
      _beamName,
      _idRFBand,
      _encryption,
      _pkg,
      _res,
      _compression,
      _vpid,
      _apid,
      _sid,
      _owner,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _createdAt,
      _createdBy);
  }
}

public class Channel_IngestT
{
  public string Id { get; set; }
  public string IdTransponder { get; set; }
  public string Name { get; set; }
  public string ClassificationMarking { get; set; }
  public string Type { get; set; }
  public string IdBeam { get; set; }
  public string BeamName { get; set; }
  public string IdRFBand { get; set; }
  public string Encryption { get; set; }
  public string Pkg { get; set; }
  public string Res { get; set; }
  public string Compression { get; set; }
  public string Vpid { get; set; }
  public string Apid { get; set; }
  public string Sid { get; set; }
  public string Owner { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public Channel_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }

  public Channel_IngestT() {
    this.Id = null;
    this.IdTransponder = null;
    this.Name = null;
    this.ClassificationMarking = null;
    this.Type = null;
    this.IdBeam = null;
    this.BeamName = null;
    this.IdRFBand = null;
    this.Encryption = null;
    this.Pkg = null;
    this.Res = null;
    this.Compression = null;
    this.Vpid = null;
    this.Apid = null;
    this.Sid = null;
    this.Owner = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = Channel_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
  }
  public static Channel_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Channel_Ingest.GetRootAsChannel_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Channel_Ingest.FinishChannel_IngestBuffer(fbb, Channel_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Channel_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdTransponder*/, false)
      && verifier.VerifyString(tablePos, 8 /*Name*/, false)
      && verifier.VerifyString(tablePos, 10 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 12 /*Type*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdBeam*/, false)
      && verifier.VerifyString(tablePos, 16 /*BeamName*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdRFBand*/, false)
      && verifier.VerifyString(tablePos, 20 /*Encryption*/, false)
      && verifier.VerifyString(tablePos, 22 /*Pkg*/, false)
      && verifier.VerifyString(tablePos, 24 /*Res*/, false)
      && verifier.VerifyString(tablePos, 26 /*Compression*/, false)
      && verifier.VerifyString(tablePos, 28 /*Vpid*/, false)
      && verifier.VerifyString(tablePos, 30 /*Apid*/, false)
      && verifier.VerifyString(tablePos, 32 /*Sid*/, false)
      && verifier.VerifyString(tablePos, 34 /*Owner*/, false)
      && verifier.VerifyString(tablePos, 36 /*Source*/, false)
      && verifier.VerifyString(tablePos, 38 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 40 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 42 /*DataMode*/, 1 /*Channel_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 44 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 46 /*CreatedBy*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
