// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
public struct CollectResponse_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CollectResponse_Abridged GetRootAsCollectResponse_Abridged(ByteBuffer _bb) { return GetRootAsCollectResponse_Abridged(_bb, new CollectResponse_Abridged()); }
  public static CollectResponse_Abridged GetRootAsCollectResponse_Abridged(ByteBuffer _bb, CollectResponse_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool CollectResponse_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "COLL"); }
  public static bool VerifyCollectResponse_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("COLL", false, CollectResponse_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CollectResponse_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: COLLECTRESPONSE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the request associated with this response.
  /// Example: /// Example: REF-REQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdRequest { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdRequestBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdRequestBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdRequestArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the target on-orbit object associated with this response.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(12); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional task ID associated with the request/response.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(16); }
  /// Unique identifier of the parent plan or schedule associated with the request/response.
  /// Example: /// Example: REF-PLAN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdPlan { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdPlanBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIdPlanBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIdPlanArray() { return __p.__vector_as_array<byte>(18); }
  /// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
  /// Example: /// Example: EXTERNAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetExternalIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetExternalIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
  /// ACCEPTED: The collect or contact request has been received and accepted.
  /// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
  /// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
  /// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
  /// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
  /// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
  /// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
  /// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
  /// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
  /// SCHEDULED: The request was received and has been scheduled for execution.
  /// Example: /// Example: ACCEPTED
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Status { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(22); }
  /// The actual start time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ActualStartTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualStartTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetActualStartTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetActualStartTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// The actual end time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ActualEndTime { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActualEndTimeBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetActualEndTimeBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetActualEndTimeArray() { return __p.__vector_as_array<byte>(26); }
  /// Proposed alternative start time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string AltStartTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltStartTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetAltStartTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetAltStartTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// Proposed alternative end time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  public string AltEndTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltEndTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetAltEndTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetAltEndTimeArray() { return __p.__vector_as_array<byte>(30); }
  /// Error code associated with this request/response.
  /// Example: /// Example: ERROR CODE
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ErrCode { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetErrCodeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetErrCodeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetErrCodeArray() { return __p.__vector_as_array<byte>(32); }
  /// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA', 'DWELL']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Notes or comments associated with this response.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(38); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(40); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(42); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(44); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(46); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(48); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(50); }
  /// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(52); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public CollectResponse_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(54); return o != 0 ? (CollectResponse_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : CollectResponse_Abridged_dataMode_Enum.REAL; } }

  public static Offset<CollectResponse_Abridged> CreateCollectResponse_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idRequestOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      int satNo = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset idPlanOffset = default(StringOffset),
      StringOffset externalIdOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset actualStartTimeOffset = default(StringOffset),
      StringOffset actualEndTimeOffset = default(StringOffset),
      StringOffset altStartTimeOffset = default(StringOffset),
      StringOffset altEndTimeOffset = default(StringOffset),
      StringOffset errCodeOffset = default(StringOffset),
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      CollectResponse_Abridged_dataMode_Enum dataMode = CollectResponse_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(26);
    CollectResponse_Abridged.AddOrigSensorId(builder, origSensorIdOffset);
    CollectResponse_Abridged.AddIdSensor(builder, idSensorOffset);
    CollectResponse_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    CollectResponse_Abridged.AddOrigin(builder, originOffset);
    CollectResponse_Abridged.AddSource(builder, sourceOffset);
    CollectResponse_Abridged.AddCreatedBy(builder, createdByOffset);
    CollectResponse_Abridged.AddCreatedAt(builder, createdAtOffset);
    CollectResponse_Abridged.AddNotes(builder, notesOffset);
    CollectResponse_Abridged.AddSrcIds(builder, srcIdsOffset);
    CollectResponse_Abridged.AddSrcTyps(builder, srcTypsOffset);
    CollectResponse_Abridged.AddErrCode(builder, errCodeOffset);
    CollectResponse_Abridged.AddAltEndTime(builder, altEndTimeOffset);
    CollectResponse_Abridged.AddAltStartTime(builder, altStartTimeOffset);
    CollectResponse_Abridged.AddActualEndTime(builder, actualEndTimeOffset);
    CollectResponse_Abridged.AddActualStartTime(builder, actualStartTimeOffset);
    CollectResponse_Abridged.AddStatus(builder, statusOffset);
    CollectResponse_Abridged.AddExternalId(builder, externalIdOffset);
    CollectResponse_Abridged.AddIdPlan(builder, idPlanOffset);
    CollectResponse_Abridged.AddTaskId(builder, taskIdOffset);
    CollectResponse_Abridged.AddSatNo(builder, satNo);
    CollectResponse_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    CollectResponse_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    CollectResponse_Abridged.AddIdRequest(builder, idRequestOffset);
    CollectResponse_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    CollectResponse_Abridged.AddId(builder, idOffset);
    CollectResponse_Abridged.AddDataMode(builder, dataMode);
    return CollectResponse_Abridged.EndCollectResponse_Abridged(builder);
  }

  public static void StartCollectResponse_Abridged(FlatBufferBuilder builder) { builder.StartTable(26); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdRequest(FlatBufferBuilder builder, StringOffset idRequestOffset) { builder.AddOffset(2, idRequestOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(4, origObjectIdOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(5, satNo, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(6, taskIdOffset.Value, 0); }
  public static void AddIdPlan(FlatBufferBuilder builder, StringOffset idPlanOffset) { builder.AddOffset(7, idPlanOffset.Value, 0); }
  public static void AddExternalId(FlatBufferBuilder builder, StringOffset externalIdOffset) { builder.AddOffset(8, externalIdOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(9, statusOffset.Value, 0); }
  public static void AddActualStartTime(FlatBufferBuilder builder, StringOffset actualStartTimeOffset) { builder.AddOffset(10, actualStartTimeOffset.Value, 0); }
  public static void AddActualEndTime(FlatBufferBuilder builder, StringOffset actualEndTimeOffset) { builder.AddOffset(11, actualEndTimeOffset.Value, 0); }
  public static void AddAltStartTime(FlatBufferBuilder builder, StringOffset altStartTimeOffset) { builder.AddOffset(12, altStartTimeOffset.Value, 0); }
  public static void AddAltEndTime(FlatBufferBuilder builder, StringOffset altEndTimeOffset) { builder.AddOffset(13, altEndTimeOffset.Value, 0); }
  public static void AddErrCode(FlatBufferBuilder builder, StringOffset errCodeOffset) { builder.AddOffset(14, errCodeOffset.Value, 0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(15, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(16, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(17, notesOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(18, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(19, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(20, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(21, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(22, origNetworkOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(23, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(24, origSensorIdOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, CollectResponse_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(25, (sbyte)dataMode, 0); }
  public static Offset<CollectResponse_Abridged> EndCollectResponse_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CollectResponse_Abridged>(o);
  }
  public static void FinishCollectResponse_AbridgedBuffer(FlatBufferBuilder builder, Offset<CollectResponse_Abridged> offset) { builder.Finish(offset.Value, "COLL"); }
  public static void FinishSizePrefixedCollectResponse_AbridgedBuffer(FlatBufferBuilder builder, Offset<CollectResponse_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "COLL"); }
  public CollectResponse_AbridgedT UnPack() {
    var _o = new CollectResponse_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CollectResponse_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdRequest = this.IdRequest;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.SatNo = this.SatNo;
    _o.TaskId = this.TaskId;
    _o.IdPlan = this.IdPlan;
    _o.ExternalId = this.ExternalId;
    _o.Status = this.Status;
    _o.ActualStartTime = this.ActualStartTime;
    _o.ActualEndTime = this.ActualEndTime;
    _o.AltStartTime = this.AltStartTime;
    _o.AltEndTime = this.AltEndTime;
    _o.ErrCode = this.ErrCode;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.Notes = this.Notes;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.DataMode = this.DataMode;
  }
  public static Offset<CollectResponse_Abridged> Pack(FlatBufferBuilder builder, CollectResponse_AbridgedT _o) {
    if (_o == null) return default(Offset<CollectResponse_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idRequest = _o.IdRequest == null ? default(StringOffset) : builder.CreateString(_o.IdRequest);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _idPlan = _o.IdPlan == null ? default(StringOffset) : builder.CreateString(_o.IdPlan);
    var _externalId = _o.ExternalId == null ? default(StringOffset) : builder.CreateString(_o.ExternalId);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _actualStartTime = _o.ActualStartTime == null ? default(StringOffset) : builder.CreateString(_o.ActualStartTime);
    var _actualEndTime = _o.ActualEndTime == null ? default(StringOffset) : builder.CreateString(_o.ActualEndTime);
    var _altStartTime = _o.AltStartTime == null ? default(StringOffset) : builder.CreateString(_o.AltStartTime);
    var _altEndTime = _o.AltEndTime == null ? default(StringOffset) : builder.CreateString(_o.AltEndTime);
    var _errCode = _o.ErrCode == null ? default(StringOffset) : builder.CreateString(_o.ErrCode);
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    return CreateCollectResponse_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idRequest,
      _idOnOrbit,
      _origObjectId,
      _o.SatNo,
      _taskId,
      _idPlan,
      _externalId,
      _status,
      _actualStartTime,
      _actualEndTime,
      _altStartTime,
      _altEndTime,
      _errCode,
      _srcTyps,
      _srcIds,
      _notes,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _idSensor,
      _origSensorId,
      _o.DataMode);
  }
}

public class CollectResponse_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdRequest { get; set; }
  public string IdOnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public int SatNo { get; set; }
  public string TaskId { get; set; }
  public string IdPlan { get; set; }
  public string ExternalId { get; set; }
  public string Status { get; set; }
  public string ActualStartTime { get; set; }
  public string ActualEndTime { get; set; }
  public string AltStartTime { get; set; }
  public string AltEndTime { get; set; }
  public string ErrCode { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string Notes { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public CollectResponse_Abridged_dataMode_Enum DataMode { get; set; }

  public CollectResponse_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdRequest = null;
    this.IdOnOrbit = null;
    this.OrigObjectId = null;
    this.SatNo = 0;
    this.TaskId = null;
    this.IdPlan = null;
    this.ExternalId = null;
    this.Status = null;
    this.ActualStartTime = null;
    this.ActualEndTime = null;
    this.AltStartTime = null;
    this.AltEndTime = null;
    this.ErrCode = null;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.Notes = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.DataMode = CollectResponse_Abridged_dataMode_Enum.REAL;
  }
  public static CollectResponse_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return CollectResponse_Abridged.GetRootAsCollectResponse_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CollectResponse_Abridged.FinishCollectResponse_AbridgedBuffer(fbb, CollectResponse_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class CollectResponse_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdRequest*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 12 /*OrigObjectId*/, false)
      && verifier.VerifyField(tablePos, 14 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 16 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 18 /*IdPlan*/, false)
      && verifier.VerifyString(tablePos, 20 /*ExternalId*/, false)
      && verifier.VerifyString(tablePos, 22 /*Status*/, false)
      && verifier.VerifyString(tablePos, 24 /*ActualStartTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*ActualEndTime*/, false)
      && verifier.VerifyString(tablePos, 28 /*AltStartTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*AltEndTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*ErrCode*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 38 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 42 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 44 /*Source*/, false)
      && verifier.VerifyString(tablePos, 46 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 48 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 50 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 52 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 54 /*DataMode*/, 1 /*CollectResponse_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
