// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Stores the results of a particular Conjunction Assessment (CA) run.
public struct Conjunction_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Conjunction_Ingest GetRootAsConjunction_Ingest(ByteBuffer _bb) { return GetRootAsConjunction_Ingest(_bb, new Conjunction_Ingest()); }
  public static Conjunction_Ingest GetRootAsConjunction_Ingest(ByteBuffer _bb, Conjunction_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Conjunction_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "CONJ"); }
  public static bool VerifyConjunction_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("CONJ", false, Conjunction_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Conjunction_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: CONJUNCTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the primary satellite on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbit1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbit1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbit1Array() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the secondary satellite on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit2 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbit2Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbit2Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbit2Array() { return __p.__vector_as_array<byte>(10); }
  /// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
  /// Example: /// Example: CONJUNCTION
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Type { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// Time of closest approach (TCA) in UTC.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string Tca { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTcaBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetTcaBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetTcaArray() { return __p.__vector_as_array<byte>(14); }
  /// Distance between objects at Time of Closest Approach (TCA) in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MissDistance { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double CollisionProb { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The method that was used to calculate the collision probability, ex. FOSTER-1992.
  /// Example: /// Example: FOSTER-1992
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CollisionProbMethod { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollisionProbMethodBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetCollisionProbMethodBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetCollisionProbMethodArray() { return __p.__vector_as_array<byte>(20); }
  /// The filename of the primary (object1) ephemeris used in the screening, if applicable.
  /// Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EphemName1 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEphemName1Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetEphemName1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetEphemName1Array() { return __p.__vector_as_array<byte>(22); }
  /// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
  /// Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId1 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsId1Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetEsId1Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetEsId1Array() { return __p.__vector_as_array<byte>(24); }
  /// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
  /// Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EphemName2 { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEphemName2Bytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetEphemName2Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetEphemName2Array() { return __p.__vector_as_array<byte>(26); }
  /// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
  /// Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId2 { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsId2Bytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetEsId2Bytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetEsId2Array() { return __p.__vector_as_array<byte>(28); }
  /// Distance between objects along Radial Vector at Time of Closest Approach in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelPosR { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance between objects along Tangential Vector in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelPosT { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Distance between objects along Normal vector in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelPosN { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelVelMag { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelVelR { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Closing velocity between objects along Tangential Vector in meters/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelVelT { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Closing velocity between objects along Normal Vector in meters/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelVelN { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The start time in UTC of the screening period for the conjunction assessment.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ScreenEntryTime { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScreenEntryTimeBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetScreenEntryTimeBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetScreenEntryTimeArray() { return __p.__vector_as_array<byte>(44); }
  /// The stop time in UTC of the screening period for the conjunction assessment.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ScreenExitTime { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScreenExitTimeBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetScreenExitTimeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetScreenExitTimeArray() { return __p.__vector_as_array<byte>(46); }
  /// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ScreenVolumeX { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ScreenVolumeY { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ScreenVolumeZ { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The shape (BOX, ELLIPSOID) of the screening volume.
  /// Example: /// Example: ELLIPSOID
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string VolShape { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVolShapeBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetVolShapeBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetVolShapeArray() { return __p.__vector_as_array<byte>(54); }
  /// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:02:01.123456Z
  /// Constraints: No constraints specified.
  public string VolEntryTime { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVolEntryTimeBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetVolEntryTimeBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetVolEntryTimeArray() { return __p.__vector_as_array<byte>(56); }
  /// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:02:28.123456Z
  /// Constraints: No constraints specified.
  public string VolExitTime { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVolExitTimeBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetVolExitTimeBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetVolExitTimeArray() { return __p.__vector_as_array<byte>(58); }
  /// Penetration Level Sigma.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PenetrationLevelSigma { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
  /// Example: /// Example: REF-STATEVECTOR1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector1 { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVector1Bytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetIdStateVector1Bytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetIdStateVector1Array() { return __p.__vector_as_array<byte>(62); }
  /// Time of last positive metric observation of the primary satellite.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LastObTime1 { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObTime1Bytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetLastObTime1Bytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetLastObTime1Array() { return __p.__vector_as_array<byte>(64); }
  /// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  /// Example: /// Example: 0.016386
  /// Constraints: No constraints specified.
  public double CdAoM1 { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  /// Example: /// Example: 0.013814
  /// Constraints: No constraints specified.
  public double CrAoM1 { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  /// Example: /// Example: 0.033814
  /// Constraints: No constraints specified.
  public double ThrustAccel1 { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
  /// Example: /// Example: REF-STATEVECTOR2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector2 { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVector2Bytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetIdStateVector2Bytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetIdStateVector2Array() { return __p.__vector_as_array<byte>(72); }
  /// Time of last positive metric observation of the secondary satellite.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string LastObTime2 { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLastObTime2Bytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetLastObTime2Bytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetLastObTime2Array() { return __p.__vector_as_array<byte>(74); }
  /// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
  /// Example: /// Example: 0.016386
  /// Constraints: No constraints specified.
  public double CdAoM2 { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
  /// Example: /// Example: 0.013814
  /// Constraints: No constraints specified.
  public double CrAoM2 { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
  /// Example: /// Example: 0.033814
  /// Constraints: No constraints specified.
  public double ThrustAccel2 { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Additional notes from data providers.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Comments { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(82); }
  /// Commander's critical information requirements notes.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Ccir { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCcirBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetCcirBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetCcirArray() { return __p.__vector_as_array<byte>(84); }
  /// Emergency comments.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ConcernNotes { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConcernNotesBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetConcernNotesBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetConcernNotesArray() { return __p.__vector_as_array<byte>(86); }
  /// Flag indicating if State department was notified.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool StateDeptNotified { get { int o = __p.__offset(88); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating if owner was contacted.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool OwnerContacted { get { int o = __p.__offset(90); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Link to filename associated with JMS record.
  /// Example: /// Example: Example link
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string RawFileURI { get { int o = __p.__offset(92); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(92, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(92); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(92); }
  /// Spacecraft name(s) for which the Collision message is provided.
  /// Example: /// Example: Message for space craft A
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MessageFor { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageForBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetMessageForBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetMessageForArray() { return __p.__vector_as_array<byte>(94); }
  /// JMS provided message ID link.
  /// Example: /// Example: MESSAGE-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string MessageId { get { int o = __p.__offset(96); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMessageIdBytes() { return __p.__vector_as_span<byte>(96, 1); }
#else
  public ArraySegment<byte>? GetMessageIdBytes() { return __p.__vector_as_arraysegment(96); }
#endif
  public byte[] GetMessageIdArray() { return __p.__vector_as_array<byte>(96); }
  /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool UvwWarn { get { int o = __p.__offset(98); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool SmallRelVelWarning { get { int o = __p.__offset(100); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool LargeRelPosWarning { get { int o = __p.__offset(102); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool SmallCovWarning { get { int o = __p.__offset(104); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool LargeCovWarning { get { int o = __p.__offset(106); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(108); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(110); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(112); }
  /// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Originator { get { int o = __p.__offset(114); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginatorBytes() { return __p.__vector_as_span<byte>(114, 1); }
#else
  public ArraySegment<byte>? GetOriginatorBytes() { return __p.__vector_as_arraysegment(114); }
#endif
  public byte[] GetOriginatorArray() { return __p.__vector_as_array<byte>(114); }
  /// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EventId { get { int o = __p.__offset(116); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span<byte>(116, 1); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(116); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(116); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: sample_descriptor here
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(118); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(118, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(118); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(118); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(120); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(120); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Conjunction_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(122); return o != 0 ? (Conjunction_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Conjunction_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(124); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(124, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(124); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(124); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(126); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(126, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(126); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(126); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string StateVector1 { get { int o = __p.__offset(128); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateVector1Bytes() { return __p.__vector_as_span<byte>(128, 1); }
#else
  public ArraySegment<byte>? GetStateVector1Bytes() { return __p.__vector_as_arraysegment(128); }
#endif
  public byte[] GetStateVector1Array() { return __p.__vector_as_array<byte>(128); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string StateVector2 { get { int o = __p.__offset(130); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateVector2Bytes() { return __p.__vector_as_span<byte>(130, 1); }
#else
  public ArraySegment<byte>? GetStateVector2Bytes() { return __p.__vector_as_arraysegment(130); }
#endif
  public byte[] GetStateVector2Array() { return __p.__vector_as_array<byte>(130); }
  /// Satellite/catalog number of the target on-orbit primary object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int SatNo1 { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Satellite/catalog number of the target on-orbit secondary object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int SatNo2 { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional place holder for an OnOrbit ID that does not exist in UDL.
  /// Example: /// Example: ORIGONORBIT1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigIdOnOrbit1 { get { int o = __p.__offset(136); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigIdOnOrbit1Bytes() { return __p.__vector_as_span<byte>(136, 1); }
#else
  public ArraySegment<byte>? GetOrigIdOnOrbit1Bytes() { return __p.__vector_as_arraysegment(136); }
#endif
  public byte[] GetOrigIdOnOrbit1Array() { return __p.__vector_as_array<byte>(136); }
  /// Optional place holder for an OnOrbit ID that does not exist in UDL.
  /// Example: /// Example: ORIGONORBIT2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigIdOnOrbit2 { get { int o = __p.__offset(138); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigIdOnOrbit2Bytes() { return __p.__vector_as_span<byte>(138, 1); }
#else
  public ArraySegment<byte>? GetOrigIdOnOrbit2Bytes() { return __p.__vector_as_arraysegment(138); }
#endif
  public byte[] GetOrigIdOnOrbit2Array() { return __p.__vector_as_array<byte>(138); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(140); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(140, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(140); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(140); }

  public static Offset<Conjunction_Ingest> CreateConjunction_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbit1Offset = default(StringOffset),
      StringOffset idOnOrbit2Offset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset),
      StringOffset tcaOffset = default(StringOffset),
      double missDistance = 0.0,
      double collisionProb = 0.0,
      StringOffset collisionProbMethodOffset = default(StringOffset),
      StringOffset ephemName1Offset = default(StringOffset),
      StringOffset esId1Offset = default(StringOffset),
      StringOffset ephemName2Offset = default(StringOffset),
      StringOffset esId2Offset = default(StringOffset),
      double relPosR = 0.0,
      double relPosT = 0.0,
      double relPosN = 0.0,
      double relVelMag = 0.0,
      double relVelR = 0.0,
      double relVelT = 0.0,
      double relVelN = 0.0,
      StringOffset screenEntryTimeOffset = default(StringOffset),
      StringOffset screenExitTimeOffset = default(StringOffset),
      double screenVolumeX = 0.0,
      double screenVolumeY = 0.0,
      double screenVolumeZ = 0.0,
      StringOffset volShapeOffset = default(StringOffset),
      StringOffset volEntryTimeOffset = default(StringOffset),
      StringOffset volExitTimeOffset = default(StringOffset),
      double penetrationLevelSigma = 0.0,
      StringOffset idStateVector1Offset = default(StringOffset),
      StringOffset lastObTime1Offset = default(StringOffset),
      double cdAoM1 = 0.0,
      double crAoM1 = 0.0,
      double thrustAccel1 = 0.0,
      StringOffset idStateVector2Offset = default(StringOffset),
      StringOffset lastObTime2Offset = default(StringOffset),
      double cdAoM2 = 0.0,
      double crAoM2 = 0.0,
      double thrustAccel2 = 0.0,
      StringOffset commentsOffset = default(StringOffset),
      StringOffset ccirOffset = default(StringOffset),
      StringOffset concernNotesOffset = default(StringOffset),
      bool stateDeptNotified = false,
      bool ownerContacted = false,
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset messageForOffset = default(StringOffset),
      StringOffset messageIdOffset = default(StringOffset),
      bool uvwWarn = false,
      bool smallRelVelWarning = false,
      bool largeRelPosWarning = false,
      bool smallCovWarning = false,
      bool largeCovWarning = false,
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset originatorOffset = default(StringOffset),
      StringOffset eventIdOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      Conjunction_Ingest_dataMode_Enum dataMode = Conjunction_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset stateVector1Offset = default(StringOffset),
      StringOffset stateVector2Offset = default(StringOffset),
      int satNo1 = 0,
      int satNo2 = 0,
      StringOffset origIdOnOrbit1Offset = default(StringOffset),
      StringOffset origIdOnOrbit2Offset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(69);
    Conjunction_Ingest.AddThrustAccel2(builder, thrustAccel2);
    Conjunction_Ingest.AddCrAoM2(builder, crAoM2);
    Conjunction_Ingest.AddCdAoM2(builder, cdAoM2);
    Conjunction_Ingest.AddThrustAccel1(builder, thrustAccel1);
    Conjunction_Ingest.AddCrAoM1(builder, crAoM1);
    Conjunction_Ingest.AddCdAoM1(builder, cdAoM1);
    Conjunction_Ingest.AddPenetrationLevelSigma(builder, penetrationLevelSigma);
    Conjunction_Ingest.AddScreenVolumeZ(builder, screenVolumeZ);
    Conjunction_Ingest.AddScreenVolumeY(builder, screenVolumeY);
    Conjunction_Ingest.AddScreenVolumeX(builder, screenVolumeX);
    Conjunction_Ingest.AddRelVelN(builder, relVelN);
    Conjunction_Ingest.AddRelVelT(builder, relVelT);
    Conjunction_Ingest.AddRelVelR(builder, relVelR);
    Conjunction_Ingest.AddRelVelMag(builder, relVelMag);
    Conjunction_Ingest.AddRelPosN(builder, relPosN);
    Conjunction_Ingest.AddRelPosT(builder, relPosT);
    Conjunction_Ingest.AddRelPosR(builder, relPosR);
    Conjunction_Ingest.AddCollisionProb(builder, collisionProb);
    Conjunction_Ingest.AddMissDistance(builder, missDistance);
    Conjunction_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    Conjunction_Ingest.AddOrigIdOnOrbit2(builder, origIdOnOrbit2Offset);
    Conjunction_Ingest.AddOrigIdOnOrbit1(builder, origIdOnOrbit1Offset);
    Conjunction_Ingest.AddSatNo2(builder, satNo2);
    Conjunction_Ingest.AddSatNo1(builder, satNo1);
    Conjunction_Ingest.AddStateVector2(builder, stateVector2Offset);
    Conjunction_Ingest.AddStateVector1(builder, stateVector1Offset);
    Conjunction_Ingest.AddCreatedBy(builder, createdByOffset);
    Conjunction_Ingest.AddCreatedAt(builder, createdAtOffset);
    Conjunction_Ingest.AddTags(builder, tagsOffset);
    Conjunction_Ingest.AddDescriptor(builder, descriptorOffset);
    Conjunction_Ingest.AddEventId(builder, eventIdOffset);
    Conjunction_Ingest.AddOriginator(builder, originatorOffset);
    Conjunction_Ingest.AddOrigin(builder, originOffset);
    Conjunction_Ingest.AddSource(builder, sourceOffset);
    Conjunction_Ingest.AddTransactionId(builder, transactionIdOffset);
    Conjunction_Ingest.AddMessageId(builder, messageIdOffset);
    Conjunction_Ingest.AddMessageFor(builder, messageForOffset);
    Conjunction_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    Conjunction_Ingest.AddConcernNotes(builder, concernNotesOffset);
    Conjunction_Ingest.AddCcir(builder, ccirOffset);
    Conjunction_Ingest.AddComments(builder, commentsOffset);
    Conjunction_Ingest.AddLastObTime2(builder, lastObTime2Offset);
    Conjunction_Ingest.AddIdStateVector2(builder, idStateVector2Offset);
    Conjunction_Ingest.AddLastObTime1(builder, lastObTime1Offset);
    Conjunction_Ingest.AddIdStateVector1(builder, idStateVector1Offset);
    Conjunction_Ingest.AddVolExitTime(builder, volExitTimeOffset);
    Conjunction_Ingest.AddVolEntryTime(builder, volEntryTimeOffset);
    Conjunction_Ingest.AddVolShape(builder, volShapeOffset);
    Conjunction_Ingest.AddScreenExitTime(builder, screenExitTimeOffset);
    Conjunction_Ingest.AddScreenEntryTime(builder, screenEntryTimeOffset);
    Conjunction_Ingest.AddEsId2(builder, esId2Offset);
    Conjunction_Ingest.AddEphemName2(builder, ephemName2Offset);
    Conjunction_Ingest.AddEsId1(builder, esId1Offset);
    Conjunction_Ingest.AddEphemName1(builder, ephemName1Offset);
    Conjunction_Ingest.AddCollisionProbMethod(builder, collisionProbMethodOffset);
    Conjunction_Ingest.AddTca(builder, tcaOffset);
    Conjunction_Ingest.AddType(builder, typeOffset);
    Conjunction_Ingest.AddIdOnOrbit2(builder, idOnOrbit2Offset);
    Conjunction_Ingest.AddIdOnOrbit1(builder, idOnOrbit1Offset);
    Conjunction_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    Conjunction_Ingest.AddId(builder, idOffset);
    Conjunction_Ingest.AddDataMode(builder, dataMode);
    Conjunction_Ingest.AddLargeCovWarning(builder, largeCovWarning);
    Conjunction_Ingest.AddSmallCovWarning(builder, smallCovWarning);
    Conjunction_Ingest.AddLargeRelPosWarning(builder, largeRelPosWarning);
    Conjunction_Ingest.AddSmallRelVelWarning(builder, smallRelVelWarning);
    Conjunction_Ingest.AddUvwWarn(builder, uvwWarn);
    Conjunction_Ingest.AddOwnerContacted(builder, ownerContacted);
    Conjunction_Ingest.AddStateDeptNotified(builder, stateDeptNotified);
    return Conjunction_Ingest.EndConjunction_Ingest(builder);
  }

  public static void StartConjunction_Ingest(FlatBufferBuilder builder) { builder.StartTable(69); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit1(FlatBufferBuilder builder, StringOffset idOnOrbit1Offset) { builder.AddOffset(2, idOnOrbit1Offset.Value, 0); }
  public static void AddIdOnOrbit2(FlatBufferBuilder builder, StringOffset idOnOrbit2Offset) { builder.AddOffset(3, idOnOrbit2Offset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(4, typeOffset.Value, 0); }
  public static void AddTca(FlatBufferBuilder builder, StringOffset tcaOffset) { builder.AddOffset(5, tcaOffset.Value, 0); }
  public static void AddMissDistance(FlatBufferBuilder builder, double missDistance) { builder.AddDouble(6, missDistance, 0.0); }
  public static void AddCollisionProb(FlatBufferBuilder builder, double collisionProb) { builder.AddDouble(7, collisionProb, 0.0); }
  public static void AddCollisionProbMethod(FlatBufferBuilder builder, StringOffset collisionProbMethodOffset) { builder.AddOffset(8, collisionProbMethodOffset.Value, 0); }
  public static void AddEphemName1(FlatBufferBuilder builder, StringOffset ephemName1Offset) { builder.AddOffset(9, ephemName1Offset.Value, 0); }
  public static void AddEsId1(FlatBufferBuilder builder, StringOffset esId1Offset) { builder.AddOffset(10, esId1Offset.Value, 0); }
  public static void AddEphemName2(FlatBufferBuilder builder, StringOffset ephemName2Offset) { builder.AddOffset(11, ephemName2Offset.Value, 0); }
  public static void AddEsId2(FlatBufferBuilder builder, StringOffset esId2Offset) { builder.AddOffset(12, esId2Offset.Value, 0); }
  public static void AddRelPosR(FlatBufferBuilder builder, double relPosR) { builder.AddDouble(13, relPosR, 0.0); }
  public static void AddRelPosT(FlatBufferBuilder builder, double relPosT) { builder.AddDouble(14, relPosT, 0.0); }
  public static void AddRelPosN(FlatBufferBuilder builder, double relPosN) { builder.AddDouble(15, relPosN, 0.0); }
  public static void AddRelVelMag(FlatBufferBuilder builder, double relVelMag) { builder.AddDouble(16, relVelMag, 0.0); }
  public static void AddRelVelR(FlatBufferBuilder builder, double relVelR) { builder.AddDouble(17, relVelR, 0.0); }
  public static void AddRelVelT(FlatBufferBuilder builder, double relVelT) { builder.AddDouble(18, relVelT, 0.0); }
  public static void AddRelVelN(FlatBufferBuilder builder, double relVelN) { builder.AddDouble(19, relVelN, 0.0); }
  public static void AddScreenEntryTime(FlatBufferBuilder builder, StringOffset screenEntryTimeOffset) { builder.AddOffset(20, screenEntryTimeOffset.Value, 0); }
  public static void AddScreenExitTime(FlatBufferBuilder builder, StringOffset screenExitTimeOffset) { builder.AddOffset(21, screenExitTimeOffset.Value, 0); }
  public static void AddScreenVolumeX(FlatBufferBuilder builder, double screenVolumeX) { builder.AddDouble(22, screenVolumeX, 0.0); }
  public static void AddScreenVolumeY(FlatBufferBuilder builder, double screenVolumeY) { builder.AddDouble(23, screenVolumeY, 0.0); }
  public static void AddScreenVolumeZ(FlatBufferBuilder builder, double screenVolumeZ) { builder.AddDouble(24, screenVolumeZ, 0.0); }
  public static void AddVolShape(FlatBufferBuilder builder, StringOffset volShapeOffset) { builder.AddOffset(25, volShapeOffset.Value, 0); }
  public static void AddVolEntryTime(FlatBufferBuilder builder, StringOffset volEntryTimeOffset) { builder.AddOffset(26, volEntryTimeOffset.Value, 0); }
  public static void AddVolExitTime(FlatBufferBuilder builder, StringOffset volExitTimeOffset) { builder.AddOffset(27, volExitTimeOffset.Value, 0); }
  public static void AddPenetrationLevelSigma(FlatBufferBuilder builder, double penetrationLevelSigma) { builder.AddDouble(28, penetrationLevelSigma, 0.0); }
  public static void AddIdStateVector1(FlatBufferBuilder builder, StringOffset idStateVector1Offset) { builder.AddOffset(29, idStateVector1Offset.Value, 0); }
  public static void AddLastObTime1(FlatBufferBuilder builder, StringOffset lastObTime1Offset) { builder.AddOffset(30, lastObTime1Offset.Value, 0); }
  public static void AddCdAoM1(FlatBufferBuilder builder, double cdAoM1) { builder.AddDouble(31, cdAoM1, 0.0); }
  public static void AddCrAoM1(FlatBufferBuilder builder, double crAoM1) { builder.AddDouble(32, crAoM1, 0.0); }
  public static void AddThrustAccel1(FlatBufferBuilder builder, double thrustAccel1) { builder.AddDouble(33, thrustAccel1, 0.0); }
  public static void AddIdStateVector2(FlatBufferBuilder builder, StringOffset idStateVector2Offset) { builder.AddOffset(34, idStateVector2Offset.Value, 0); }
  public static void AddLastObTime2(FlatBufferBuilder builder, StringOffset lastObTime2Offset) { builder.AddOffset(35, lastObTime2Offset.Value, 0); }
  public static void AddCdAoM2(FlatBufferBuilder builder, double cdAoM2) { builder.AddDouble(36, cdAoM2, 0.0); }
  public static void AddCrAoM2(FlatBufferBuilder builder, double crAoM2) { builder.AddDouble(37, crAoM2, 0.0); }
  public static void AddThrustAccel2(FlatBufferBuilder builder, double thrustAccel2) { builder.AddDouble(38, thrustAccel2, 0.0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(39, commentsOffset.Value, 0); }
  public static void AddCcir(FlatBufferBuilder builder, StringOffset ccirOffset) { builder.AddOffset(40, ccirOffset.Value, 0); }
  public static void AddConcernNotes(FlatBufferBuilder builder, StringOffset concernNotesOffset) { builder.AddOffset(41, concernNotesOffset.Value, 0); }
  public static void AddStateDeptNotified(FlatBufferBuilder builder, bool stateDeptNotified) { builder.AddBool(42, stateDeptNotified, false); }
  public static void AddOwnerContacted(FlatBufferBuilder builder, bool ownerContacted) { builder.AddBool(43, ownerContacted, false); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(44, rawFileURIOffset.Value, 0); }
  public static void AddMessageFor(FlatBufferBuilder builder, StringOffset messageForOffset) { builder.AddOffset(45, messageForOffset.Value, 0); }
  public static void AddMessageId(FlatBufferBuilder builder, StringOffset messageIdOffset) { builder.AddOffset(46, messageIdOffset.Value, 0); }
  public static void AddUvwWarn(FlatBufferBuilder builder, bool uvwWarn) { builder.AddBool(47, uvwWarn, false); }
  public static void AddSmallRelVelWarning(FlatBufferBuilder builder, bool smallRelVelWarning) { builder.AddBool(48, smallRelVelWarning, false); }
  public static void AddLargeRelPosWarning(FlatBufferBuilder builder, bool largeRelPosWarning) { builder.AddBool(49, largeRelPosWarning, false); }
  public static void AddSmallCovWarning(FlatBufferBuilder builder, bool smallCovWarning) { builder.AddBool(50, smallCovWarning, false); }
  public static void AddLargeCovWarning(FlatBufferBuilder builder, bool largeCovWarning) { builder.AddBool(51, largeCovWarning, false); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(52, transactionIdOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(53, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(54, originOffset.Value, 0); }
  public static void AddOriginator(FlatBufferBuilder builder, StringOffset originatorOffset) { builder.AddOffset(55, originatorOffset.Value, 0); }
  public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) { builder.AddOffset(56, eventIdOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(57, descriptorOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(58, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDataMode(FlatBufferBuilder builder, Conjunction_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(59, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(60, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(61, createdByOffset.Value, 0); }
  public static void AddStateVector1(FlatBufferBuilder builder, StringOffset stateVector1Offset) { builder.AddOffset(62, stateVector1Offset.Value, 0); }
  public static void AddStateVector2(FlatBufferBuilder builder, StringOffset stateVector2Offset) { builder.AddOffset(63, stateVector2Offset.Value, 0); }
  public static void AddSatNo1(FlatBufferBuilder builder, int satNo1) { builder.AddInt(64, satNo1, 0); }
  public static void AddSatNo2(FlatBufferBuilder builder, int satNo2) { builder.AddInt(65, satNo2, 0); }
  public static void AddOrigIdOnOrbit1(FlatBufferBuilder builder, StringOffset origIdOnOrbit1Offset) { builder.AddOffset(66, origIdOnOrbit1Offset.Value, 0); }
  public static void AddOrigIdOnOrbit2(FlatBufferBuilder builder, StringOffset origIdOnOrbit2Offset) { builder.AddOffset(67, origIdOnOrbit2Offset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(68, origNetworkOffset.Value, 0); }
  public static Offset<Conjunction_Ingest> EndConjunction_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Conjunction_Ingest>(o);
  }
  public static void FinishConjunction_IngestBuffer(FlatBufferBuilder builder, Offset<Conjunction_Ingest> offset) { builder.Finish(offset.Value, "CONJ"); }
  public static void FinishSizePrefixedConjunction_IngestBuffer(FlatBufferBuilder builder, Offset<Conjunction_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "CONJ"); }
  public Conjunction_IngestT UnPack() {
    var _o = new Conjunction_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Conjunction_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit1 = this.IdOnOrbit1;
    _o.IdOnOrbit2 = this.IdOnOrbit2;
    _o.Type = this.Type;
    _o.Tca = this.Tca;
    _o.MissDistance = this.MissDistance;
    _o.CollisionProb = this.CollisionProb;
    _o.CollisionProbMethod = this.CollisionProbMethod;
    _o.EphemName1 = this.EphemName1;
    _o.EsId1 = this.EsId1;
    _o.EphemName2 = this.EphemName2;
    _o.EsId2 = this.EsId2;
    _o.RelPosR = this.RelPosR;
    _o.RelPosT = this.RelPosT;
    _o.RelPosN = this.RelPosN;
    _o.RelVelMag = this.RelVelMag;
    _o.RelVelR = this.RelVelR;
    _o.RelVelT = this.RelVelT;
    _o.RelVelN = this.RelVelN;
    _o.ScreenEntryTime = this.ScreenEntryTime;
    _o.ScreenExitTime = this.ScreenExitTime;
    _o.ScreenVolumeX = this.ScreenVolumeX;
    _o.ScreenVolumeY = this.ScreenVolumeY;
    _o.ScreenVolumeZ = this.ScreenVolumeZ;
    _o.VolShape = this.VolShape;
    _o.VolEntryTime = this.VolEntryTime;
    _o.VolExitTime = this.VolExitTime;
    _o.PenetrationLevelSigma = this.PenetrationLevelSigma;
    _o.IdStateVector1 = this.IdStateVector1;
    _o.LastObTime1 = this.LastObTime1;
    _o.CdAoM1 = this.CdAoM1;
    _o.CrAoM1 = this.CrAoM1;
    _o.ThrustAccel1 = this.ThrustAccel1;
    _o.IdStateVector2 = this.IdStateVector2;
    _o.LastObTime2 = this.LastObTime2;
    _o.CdAoM2 = this.CdAoM2;
    _o.CrAoM2 = this.CrAoM2;
    _o.ThrustAccel2 = this.ThrustAccel2;
    _o.Comments = this.Comments;
    _o.Ccir = this.Ccir;
    _o.ConcernNotes = this.ConcernNotes;
    _o.StateDeptNotified = this.StateDeptNotified;
    _o.OwnerContacted = this.OwnerContacted;
    _o.RawFileURI = this.RawFileURI;
    _o.MessageFor = this.MessageFor;
    _o.MessageId = this.MessageId;
    _o.UvwWarn = this.UvwWarn;
    _o.SmallRelVelWarning = this.SmallRelVelWarning;
    _o.LargeRelPosWarning = this.LargeRelPosWarning;
    _o.SmallCovWarning = this.SmallCovWarning;
    _o.LargeCovWarning = this.LargeCovWarning;
    _o.TransactionId = this.TransactionId;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.Originator = this.Originator;
    _o.EventId = this.EventId;
    _o.Descriptor = this.Descriptor;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.StateVector1 = this.StateVector1;
    _o.StateVector2 = this.StateVector2;
    _o.SatNo1 = this.SatNo1;
    _o.SatNo2 = this.SatNo2;
    _o.OrigIdOnOrbit1 = this.OrigIdOnOrbit1;
    _o.OrigIdOnOrbit2 = this.OrigIdOnOrbit2;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Conjunction_Ingest> Pack(FlatBufferBuilder builder, Conjunction_IngestT _o) {
    if (_o == null) return default(Offset<Conjunction_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit1 = _o.IdOnOrbit1 == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit1);
    var _idOnOrbit2 = _o.IdOnOrbit2 == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit2);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _tca = _o.Tca == null ? default(StringOffset) : builder.CreateString(_o.Tca);
    var _collisionProbMethod = _o.CollisionProbMethod == null ? default(StringOffset) : builder.CreateString(_o.CollisionProbMethod);
    var _ephemName1 = _o.EphemName1 == null ? default(StringOffset) : builder.CreateString(_o.EphemName1);
    var _esId1 = _o.EsId1 == null ? default(StringOffset) : builder.CreateString(_o.EsId1);
    var _ephemName2 = _o.EphemName2 == null ? default(StringOffset) : builder.CreateString(_o.EphemName2);
    var _esId2 = _o.EsId2 == null ? default(StringOffset) : builder.CreateString(_o.EsId2);
    var _screenEntryTime = _o.ScreenEntryTime == null ? default(StringOffset) : builder.CreateString(_o.ScreenEntryTime);
    var _screenExitTime = _o.ScreenExitTime == null ? default(StringOffset) : builder.CreateString(_o.ScreenExitTime);
    var _volShape = _o.VolShape == null ? default(StringOffset) : builder.CreateString(_o.VolShape);
    var _volEntryTime = _o.VolEntryTime == null ? default(StringOffset) : builder.CreateString(_o.VolEntryTime);
    var _volExitTime = _o.VolExitTime == null ? default(StringOffset) : builder.CreateString(_o.VolExitTime);
    var _idStateVector1 = _o.IdStateVector1 == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector1);
    var _lastObTime1 = _o.LastObTime1 == null ? default(StringOffset) : builder.CreateString(_o.LastObTime1);
    var _idStateVector2 = _o.IdStateVector2 == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector2);
    var _lastObTime2 = _o.LastObTime2 == null ? default(StringOffset) : builder.CreateString(_o.LastObTime2);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    var _ccir = _o.Ccir == null ? default(StringOffset) : builder.CreateString(_o.Ccir);
    var _concernNotes = _o.ConcernNotes == null ? default(StringOffset) : builder.CreateString(_o.ConcernNotes);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _messageFor = _o.MessageFor == null ? default(StringOffset) : builder.CreateString(_o.MessageFor);
    var _messageId = _o.MessageId == null ? default(StringOffset) : builder.CreateString(_o.MessageId);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _originator = _o.Originator == null ? default(StringOffset) : builder.CreateString(_o.Originator);
    var _eventId = _o.EventId == null ? default(StringOffset) : builder.CreateString(_o.EventId);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _stateVector1 = _o.StateVector1 == null ? default(StringOffset) : builder.CreateString(_o.StateVector1);
    var _stateVector2 = _o.StateVector2 == null ? default(StringOffset) : builder.CreateString(_o.StateVector2);
    var _origIdOnOrbit1 = _o.OrigIdOnOrbit1 == null ? default(StringOffset) : builder.CreateString(_o.OrigIdOnOrbit1);
    var _origIdOnOrbit2 = _o.OrigIdOnOrbit2 == null ? default(StringOffset) : builder.CreateString(_o.OrigIdOnOrbit2);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateConjunction_Ingest(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit1,
      _idOnOrbit2,
      _type,
      _tca,
      _o.MissDistance,
      _o.CollisionProb,
      _collisionProbMethod,
      _ephemName1,
      _esId1,
      _ephemName2,
      _esId2,
      _o.RelPosR,
      _o.RelPosT,
      _o.RelPosN,
      _o.RelVelMag,
      _o.RelVelR,
      _o.RelVelT,
      _o.RelVelN,
      _screenEntryTime,
      _screenExitTime,
      _o.ScreenVolumeX,
      _o.ScreenVolumeY,
      _o.ScreenVolumeZ,
      _volShape,
      _volEntryTime,
      _volExitTime,
      _o.PenetrationLevelSigma,
      _idStateVector1,
      _lastObTime1,
      _o.CdAoM1,
      _o.CrAoM1,
      _o.ThrustAccel1,
      _idStateVector2,
      _lastObTime2,
      _o.CdAoM2,
      _o.CrAoM2,
      _o.ThrustAccel2,
      _comments,
      _ccir,
      _concernNotes,
      _o.StateDeptNotified,
      _o.OwnerContacted,
      _rawFileURI,
      _messageFor,
      _messageId,
      _o.UvwWarn,
      _o.SmallRelVelWarning,
      _o.LargeRelPosWarning,
      _o.SmallCovWarning,
      _o.LargeCovWarning,
      _transactionId,
      _source,
      _origin,
      _originator,
      _eventId,
      _descriptor,
      _tags,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _stateVector1,
      _stateVector2,
      _o.SatNo1,
      _o.SatNo2,
      _origIdOnOrbit1,
      _origIdOnOrbit2,
      _origNetwork);
  }
}

public class Conjunction_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit1 { get; set; }
  public string IdOnOrbit2 { get; set; }
  public string Type { get; set; }
  public string Tca { get; set; }
  public double MissDistance { get; set; }
  public double CollisionProb { get; set; }
  public string CollisionProbMethod { get; set; }
  public string EphemName1 { get; set; }
  public string EsId1 { get; set; }
  public string EphemName2 { get; set; }
  public string EsId2 { get; set; }
  public double RelPosR { get; set; }
  public double RelPosT { get; set; }
  public double RelPosN { get; set; }
  public double RelVelMag { get; set; }
  public double RelVelR { get; set; }
  public double RelVelT { get; set; }
  public double RelVelN { get; set; }
  public string ScreenEntryTime { get; set; }
  public string ScreenExitTime { get; set; }
  public double ScreenVolumeX { get; set; }
  public double ScreenVolumeY { get; set; }
  public double ScreenVolumeZ { get; set; }
  public string VolShape { get; set; }
  public string VolEntryTime { get; set; }
  public string VolExitTime { get; set; }
  public double PenetrationLevelSigma { get; set; }
  public string IdStateVector1 { get; set; }
  public string LastObTime1 { get; set; }
  public double CdAoM1 { get; set; }
  public double CrAoM1 { get; set; }
  public double ThrustAccel1 { get; set; }
  public string IdStateVector2 { get; set; }
  public string LastObTime2 { get; set; }
  public double CdAoM2 { get; set; }
  public double CrAoM2 { get; set; }
  public double ThrustAccel2 { get; set; }
  public string Comments { get; set; }
  public string Ccir { get; set; }
  public string ConcernNotes { get; set; }
  public bool StateDeptNotified { get; set; }
  public bool OwnerContacted { get; set; }
  public string RawFileURI { get; set; }
  public string MessageFor { get; set; }
  public string MessageId { get; set; }
  public bool UvwWarn { get; set; }
  public bool SmallRelVelWarning { get; set; }
  public bool LargeRelPosWarning { get; set; }
  public bool SmallCovWarning { get; set; }
  public bool LargeCovWarning { get; set; }
  public string TransactionId { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string Originator { get; set; }
  public string EventId { get; set; }
  public string Descriptor { get; set; }
  public List<string> Tags { get; set; }
  public Conjunction_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string StateVector1 { get; set; }
  public string StateVector2 { get; set; }
  public int SatNo1 { get; set; }
  public int SatNo2 { get; set; }
  public string OrigIdOnOrbit1 { get; set; }
  public string OrigIdOnOrbit2 { get; set; }
  public string OrigNetwork { get; set; }

  public Conjunction_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit1 = null;
    this.IdOnOrbit2 = null;
    this.Type = null;
    this.Tca = null;
    this.MissDistance = 0.0;
    this.CollisionProb = 0.0;
    this.CollisionProbMethod = null;
    this.EphemName1 = null;
    this.EsId1 = null;
    this.EphemName2 = null;
    this.EsId2 = null;
    this.RelPosR = 0.0;
    this.RelPosT = 0.0;
    this.RelPosN = 0.0;
    this.RelVelMag = 0.0;
    this.RelVelR = 0.0;
    this.RelVelT = 0.0;
    this.RelVelN = 0.0;
    this.ScreenEntryTime = null;
    this.ScreenExitTime = null;
    this.ScreenVolumeX = 0.0;
    this.ScreenVolumeY = 0.0;
    this.ScreenVolumeZ = 0.0;
    this.VolShape = null;
    this.VolEntryTime = null;
    this.VolExitTime = null;
    this.PenetrationLevelSigma = 0.0;
    this.IdStateVector1 = null;
    this.LastObTime1 = null;
    this.CdAoM1 = 0.0;
    this.CrAoM1 = 0.0;
    this.ThrustAccel1 = 0.0;
    this.IdStateVector2 = null;
    this.LastObTime2 = null;
    this.CdAoM2 = 0.0;
    this.CrAoM2 = 0.0;
    this.ThrustAccel2 = 0.0;
    this.Comments = null;
    this.Ccir = null;
    this.ConcernNotes = null;
    this.StateDeptNotified = false;
    this.OwnerContacted = false;
    this.RawFileURI = null;
    this.MessageFor = null;
    this.MessageId = null;
    this.UvwWarn = false;
    this.SmallRelVelWarning = false;
    this.LargeRelPosWarning = false;
    this.SmallCovWarning = false;
    this.LargeCovWarning = false;
    this.TransactionId = null;
    this.Source = null;
    this.Origin = null;
    this.Originator = null;
    this.EventId = null;
    this.Descriptor = null;
    this.Tags = null;
    this.DataMode = Conjunction_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.StateVector1 = null;
    this.StateVector2 = null;
    this.SatNo1 = 0;
    this.SatNo2 = 0;
    this.OrigIdOnOrbit1 = null;
    this.OrigIdOnOrbit2 = null;
    this.OrigNetwork = null;
  }
  public static Conjunction_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return Conjunction_Ingest.GetRootAsConjunction_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Conjunction_Ingest.FinishConjunction_IngestBuffer(fbb, Conjunction_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Conjunction_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit1*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit2*/, false)
      && verifier.VerifyString(tablePos, 12 /*Type*/, false)
      && verifier.VerifyString(tablePos, 14 /*Tca*/, false)
      && verifier.VerifyField(tablePos, 16 /*MissDistance*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*CollisionProb*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 20 /*CollisionProbMethod*/, false)
      && verifier.VerifyString(tablePos, 22 /*EphemName1*/, false)
      && verifier.VerifyString(tablePos, 24 /*EsId1*/, false)
      && verifier.VerifyString(tablePos, 26 /*EphemName2*/, false)
      && verifier.VerifyString(tablePos, 28 /*EsId2*/, false)
      && verifier.VerifyField(tablePos, 30 /*RelPosR*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*RelPosT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*RelPosN*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*RelVelMag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*RelVelR*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*RelVelT*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*RelVelN*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 44 /*ScreenEntryTime*/, false)
      && verifier.VerifyString(tablePos, 46 /*ScreenExitTime*/, false)
      && verifier.VerifyField(tablePos, 48 /*ScreenVolumeX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*ScreenVolumeY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*ScreenVolumeZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 54 /*VolShape*/, false)
      && verifier.VerifyString(tablePos, 56 /*VolEntryTime*/, false)
      && verifier.VerifyString(tablePos, 58 /*VolExitTime*/, false)
      && verifier.VerifyField(tablePos, 60 /*PenetrationLevelSigma*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*IdStateVector1*/, false)
      && verifier.VerifyString(tablePos, 64 /*LastObTime1*/, false)
      && verifier.VerifyField(tablePos, 66 /*CdAoM1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*CrAoM1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*ThrustAccel1*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 72 /*IdStateVector2*/, false)
      && verifier.VerifyString(tablePos, 74 /*LastObTime2*/, false)
      && verifier.VerifyField(tablePos, 76 /*CdAoM2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*CrAoM2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*ThrustAccel2*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 82 /*Comments*/, false)
      && verifier.VerifyString(tablePos, 84 /*Ccir*/, false)
      && verifier.VerifyString(tablePos, 86 /*ConcernNotes*/, false)
      && verifier.VerifyField(tablePos, 88 /*StateDeptNotified*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 90 /*OwnerContacted*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 92 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 94 /*MessageFor*/, false)
      && verifier.VerifyString(tablePos, 96 /*MessageId*/, false)
      && verifier.VerifyField(tablePos, 98 /*UvwWarn*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 100 /*SmallRelVelWarning*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 102 /*LargeRelPosWarning*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 104 /*SmallCovWarning*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 106 /*LargeCovWarning*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 108 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 110 /*Source*/, false)
      && verifier.VerifyString(tablePos, 112 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 114 /*Originator*/, false)
      && verifier.VerifyString(tablePos, 116 /*EventId*/, false)
      && verifier.VerifyString(tablePos, 118 /*Descriptor*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 120 /*Tags*/, false)
      && verifier.VerifyField(tablePos, 122 /*DataMode*/, 1 /*Conjunction_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 124 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 126 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 128 /*StateVector1*/, false)
      && verifier.VerifyString(tablePos, 130 /*StateVector2*/, false)
      && verifier.VerifyField(tablePos, 132 /*SatNo1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 134 /*SatNo2*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 136 /*OrigIdOnOrbit1*/, false)
      && verifier.VerifyString(tablePos, 138 /*OrigIdOnOrbit2*/, false)
      && verifier.VerifyString(tablePos, 140 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
