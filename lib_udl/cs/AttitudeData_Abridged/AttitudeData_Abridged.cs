// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
public struct AttitudeData_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AttitudeData_Abridged GetRootAsAttitudeData_Abridged(ByteBuffer _bb) { return GetRootAsAttitudeData_Abridged(_bb, new AttitudeData_Abridged()); }
  public static AttitudeData_Abridged GetRootAsAttitudeData_Abridged(ByteBuffer _bb, AttitudeData_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AttitudeData_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ATTI"); }
  public static bool VerifyAttitudeData_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ATTI", false, AttitudeData_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AttitudeData_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ATTITUDEDATA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the parent AttitudeSet associated with this record.
  /// Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string AsId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAsIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAsIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAsIdArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the on-orbit satellite to which this attitude record applies.
  /// Example: /// Example: 41947
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Satellite/catalog number of the on-orbit object to which this attitude record applies.
  /// Example: /// Example: 41947
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: D6593
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2022-03-07T14:51:39.653043Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(16); }
  /// Label specifying type of rotational motion of target.
  /// Example: /// Example: PROSOL_MOTION
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MotionType { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMotionTypeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMotionTypeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMotionTypeArray() { return __p.__vector_as_array<byte>(18); }
  /// Quaternion vector component 1.
  /// Example: /// Example: 0.0312
  /// Constraints: No constraints specified.
  public double Q1 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion vector component 2.
  /// Example: /// Example: 0.7854
  /// Constraints: No constraints specified.
  public double Q2 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion vector component 3.
  /// Example: /// Example: 0.3916
  /// Constraints: No constraints specified.
  public double Q3 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Quaternion scalar component.
  /// Example: /// Example: 0.4783
  /// Constraints: No constraints specified.
  public double Qc { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Derivative of quaternion vector component 1.
  /// Example: /// Example: 0.0043
  /// Constraints: No constraints specified.
  public double Q1Dot { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Derivative of quaternion vector component 2.
  /// Example: /// Example: 0.06
  /// Constraints: No constraints specified.
  public double Q2Dot { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Derivative of quaternion vector component 3.
  /// Example: /// Example: 0.499
  /// Constraints: No constraints specified.
  public double Q3Dot { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Derivative of quaternion scalar component.
  /// Example: /// Example: 0.011
  /// Constraints: No constraints specified.
  public double QcDot { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [139.753]
  /// Constraints: No constraints specified.
  public string XAngle(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int XAngleLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [25.066]
  /// Constraints: No constraints specified.
  public string YAngle(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int YAngleLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [-53.368]
  /// Constraints: No constraints specified.
  public string ZAngle(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZAngleLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.105]
  /// Constraints: No constraints specified.
  public string XRate(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int XRateLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.032]
  /// Constraints: No constraints specified.
  public string YRate(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int YRateLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.022]
  /// Constraints: No constraints specified.
  public string ZRate(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ZRateLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Precession axis right ascension (ECI J2000 frame) in degrees.
  /// Example: /// Example: -173.75
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Precession axis declination (ECI J2000 frame) in degrees.
  /// Example: /// Example: 0.799
  /// Constraints: No constraints specified.
  public double Declination { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Coning angle in degrees.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double ConingAngle { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Precession period in seconds.
  /// Example: /// Example: 36.1
  /// Constraints: No constraints specified.
  public double PrecPeriod { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Spin period in seconds.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double SpinPeriod { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-07-05T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(58); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(60); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(62); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(64); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public AttitudeData_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(66); return o != 0 ? (AttitudeData_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : AttitudeData_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(68); }

  public static Offset<AttitudeData_Abridged> CreateAttitudeData_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset asIdOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      StringOffset motionTypeOffset = default(StringOffset),
      double q1 = 0.0,
      double q2 = 0.0,
      double q3 = 0.0,
      double qc = 0.0,
      double q1Dot = 0.0,
      double q2Dot = 0.0,
      double q3Dot = 0.0,
      double qcDot = 0.0,
      VectorOffset xAngleOffset = default(VectorOffset),
      VectorOffset yAngleOffset = default(VectorOffset),
      VectorOffset zAngleOffset = default(VectorOffset),
      VectorOffset xRateOffset = default(VectorOffset),
      VectorOffset yRateOffset = default(VectorOffset),
      VectorOffset zRateOffset = default(VectorOffset),
      double ra = 0.0,
      double declination = 0.0,
      double coningAngle = 0.0,
      double precPeriod = 0.0,
      double spinPeriod = 0.0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      AttitudeData_Abridged_dataMode_Enum dataMode = AttitudeData_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(33);
    AttitudeData_Abridged.AddSpinPeriod(builder, spinPeriod);
    AttitudeData_Abridged.AddPrecPeriod(builder, precPeriod);
    AttitudeData_Abridged.AddConingAngle(builder, coningAngle);
    AttitudeData_Abridged.AddDeclination(builder, declination);
    AttitudeData_Abridged.AddRa(builder, ra);
    AttitudeData_Abridged.AddQcDot(builder, qcDot);
    AttitudeData_Abridged.AddQ3Dot(builder, q3Dot);
    AttitudeData_Abridged.AddQ2Dot(builder, q2Dot);
    AttitudeData_Abridged.AddQ1Dot(builder, q1Dot);
    AttitudeData_Abridged.AddQc(builder, qc);
    AttitudeData_Abridged.AddQ3(builder, q3);
    AttitudeData_Abridged.AddQ2(builder, q2);
    AttitudeData_Abridged.AddQ1(builder, q1);
    AttitudeData_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    AttitudeData_Abridged.AddOrigin(builder, originOffset);
    AttitudeData_Abridged.AddSource(builder, sourceOffset);
    AttitudeData_Abridged.AddCreatedBy(builder, createdByOffset);
    AttitudeData_Abridged.AddCreatedAt(builder, createdAtOffset);
    AttitudeData_Abridged.AddZRate(builder, zRateOffset);
    AttitudeData_Abridged.AddYRate(builder, yRateOffset);
    AttitudeData_Abridged.AddXRate(builder, xRateOffset);
    AttitudeData_Abridged.AddZAngle(builder, zAngleOffset);
    AttitudeData_Abridged.AddYAngle(builder, yAngleOffset);
    AttitudeData_Abridged.AddXAngle(builder, xAngleOffset);
    AttitudeData_Abridged.AddMotionType(builder, motionTypeOffset);
    AttitudeData_Abridged.AddTs(builder, tsOffset);
    AttitudeData_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    AttitudeData_Abridged.AddSatNo(builder, satNo);
    AttitudeData_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    AttitudeData_Abridged.AddAsId(builder, asIdOffset);
    AttitudeData_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    AttitudeData_Abridged.AddId(builder, idOffset);
    AttitudeData_Abridged.AddDataMode(builder, dataMode);
    return AttitudeData_Abridged.EndAttitudeData_Abridged(builder);
  }

  public static void StartAttitudeData_Abridged(FlatBufferBuilder builder) { builder.StartTable(33); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddAsId(FlatBufferBuilder builder, StringOffset asIdOffset) { builder.AddOffset(2, asIdOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(4, satNo, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(5, origObjectIdOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(6, tsOffset.Value, 0); }
  public static void AddMotionType(FlatBufferBuilder builder, StringOffset motionTypeOffset) { builder.AddOffset(7, motionTypeOffset.Value, 0); }
  public static void AddQ1(FlatBufferBuilder builder, double q1) { builder.AddDouble(8, q1, 0.0); }
  public static void AddQ2(FlatBufferBuilder builder, double q2) { builder.AddDouble(9, q2, 0.0); }
  public static void AddQ3(FlatBufferBuilder builder, double q3) { builder.AddDouble(10, q3, 0.0); }
  public static void AddQc(FlatBufferBuilder builder, double qc) { builder.AddDouble(11, qc, 0.0); }
  public static void AddQ1Dot(FlatBufferBuilder builder, double q1Dot) { builder.AddDouble(12, q1Dot, 0.0); }
  public static void AddQ2Dot(FlatBufferBuilder builder, double q2Dot) { builder.AddDouble(13, q2Dot, 0.0); }
  public static void AddQ3Dot(FlatBufferBuilder builder, double q3Dot) { builder.AddDouble(14, q3Dot, 0.0); }
  public static void AddQcDot(FlatBufferBuilder builder, double qcDot) { builder.AddDouble(15, qcDot, 0.0); }
  public static void AddXAngle(FlatBufferBuilder builder, VectorOffset xAngleOffset) { builder.AddOffset(16, xAngleOffset.Value, 0); }
  public static VectorOffset CreateXAngleVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXAngleVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXAngleVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXAngleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartXAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYAngle(FlatBufferBuilder builder, VectorOffset yAngleOffset) { builder.AddOffset(17, yAngleOffset.Value, 0); }
  public static VectorOffset CreateYAngleVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateYAngleVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYAngleVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYAngleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartYAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZAngle(FlatBufferBuilder builder, VectorOffset zAngleOffset) { builder.AddOffset(18, zAngleOffset.Value, 0); }
  public static VectorOffset CreateZAngleVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZAngleVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZAngleVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZAngleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddXRate(FlatBufferBuilder builder, VectorOffset xRateOffset) { builder.AddOffset(19, xRateOffset.Value, 0); }
  public static VectorOffset CreateXRateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateXRateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXRateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateXRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartXRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddYRate(FlatBufferBuilder builder, VectorOffset yRateOffset) { builder.AddOffset(20, yRateOffset.Value, 0); }
  public static VectorOffset CreateYRateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateYRateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYRateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateYRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartYRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZRate(FlatBufferBuilder builder, VectorOffset zRateOffset) { builder.AddOffset(21, zRateOffset.Value, 0); }
  public static VectorOffset CreateZRateVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateZRateVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZRateVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateZRateVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartZRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(22, ra, 0.0); }
  public static void AddDeclination(FlatBufferBuilder builder, double declination) { builder.AddDouble(23, declination, 0.0); }
  public static void AddConingAngle(FlatBufferBuilder builder, double coningAngle) { builder.AddDouble(24, coningAngle, 0.0); }
  public static void AddPrecPeriod(FlatBufferBuilder builder, double precPeriod) { builder.AddDouble(25, precPeriod, 0.0); }
  public static void AddSpinPeriod(FlatBufferBuilder builder, double spinPeriod) { builder.AddDouble(26, spinPeriod, 0.0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(27, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(28, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(29, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(30, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, AttitudeData_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(31, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(32, origNetworkOffset.Value, 0); }
  public static Offset<AttitudeData_Abridged> EndAttitudeData_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AttitudeData_Abridged>(o);
  }
  public static void FinishAttitudeData_AbridgedBuffer(FlatBufferBuilder builder, Offset<AttitudeData_Abridged> offset) { builder.Finish(offset.Value, "ATTI"); }
  public static void FinishSizePrefixedAttitudeData_AbridgedBuffer(FlatBufferBuilder builder, Offset<AttitudeData_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "ATTI"); }
  public AttitudeData_AbridgedT UnPack() {
    var _o = new AttitudeData_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AttitudeData_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.AsId = this.AsId;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Ts = this.Ts;
    _o.MotionType = this.MotionType;
    _o.Q1 = this.Q1;
    _o.Q2 = this.Q2;
    _o.Q3 = this.Q3;
    _o.Qc = this.Qc;
    _o.Q1Dot = this.Q1Dot;
    _o.Q2Dot = this.Q2Dot;
    _o.Q3Dot = this.Q3Dot;
    _o.QcDot = this.QcDot;
    _o.XAngle = new List<string>();
    for (var _j = 0; _j < this.XAngleLength; ++_j) {_o.XAngle.Add(this.XAngle(_j));}
    _o.YAngle = new List<string>();
    for (var _j = 0; _j < this.YAngleLength; ++_j) {_o.YAngle.Add(this.YAngle(_j));}
    _o.ZAngle = new List<string>();
    for (var _j = 0; _j < this.ZAngleLength; ++_j) {_o.ZAngle.Add(this.ZAngle(_j));}
    _o.XRate = new List<string>();
    for (var _j = 0; _j < this.XRateLength; ++_j) {_o.XRate.Add(this.XRate(_j));}
    _o.YRate = new List<string>();
    for (var _j = 0; _j < this.YRateLength; ++_j) {_o.YRate.Add(this.YRate(_j));}
    _o.ZRate = new List<string>();
    for (var _j = 0; _j < this.ZRateLength; ++_j) {_o.ZRate.Add(this.ZRate(_j));}
    _o.Ra = this.Ra;
    _o.Declination = this.Declination;
    _o.ConingAngle = this.ConingAngle;
    _o.PrecPeriod = this.PrecPeriod;
    _o.SpinPeriod = this.SpinPeriod;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<AttitudeData_Abridged> Pack(FlatBufferBuilder builder, AttitudeData_AbridgedT _o) {
    if (_o == null) return default(Offset<AttitudeData_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _asId = _o.AsId == null ? default(StringOffset) : builder.CreateString(_o.AsId);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _motionType = _o.MotionType == null ? default(StringOffset) : builder.CreateString(_o.MotionType);
    var _xAngle = default(VectorOffset);
    if (_o.XAngle != null) {
      var __xAngle = new StringOffset[_o.XAngle.Count];
      for (var _j = 0; _j < __xAngle.Length; ++_j) { __xAngle[_j] = builder.CreateString(_o.XAngle[_j]); }
      _xAngle = CreateXAngleVector(builder, __xAngle);
    }
    var _yAngle = default(VectorOffset);
    if (_o.YAngle != null) {
      var __yAngle = new StringOffset[_o.YAngle.Count];
      for (var _j = 0; _j < __yAngle.Length; ++_j) { __yAngle[_j] = builder.CreateString(_o.YAngle[_j]); }
      _yAngle = CreateYAngleVector(builder, __yAngle);
    }
    var _zAngle = default(VectorOffset);
    if (_o.ZAngle != null) {
      var __zAngle = new StringOffset[_o.ZAngle.Count];
      for (var _j = 0; _j < __zAngle.Length; ++_j) { __zAngle[_j] = builder.CreateString(_o.ZAngle[_j]); }
      _zAngle = CreateZAngleVector(builder, __zAngle);
    }
    var _xRate = default(VectorOffset);
    if (_o.XRate != null) {
      var __xRate = new StringOffset[_o.XRate.Count];
      for (var _j = 0; _j < __xRate.Length; ++_j) { __xRate[_j] = builder.CreateString(_o.XRate[_j]); }
      _xRate = CreateXRateVector(builder, __xRate);
    }
    var _yRate = default(VectorOffset);
    if (_o.YRate != null) {
      var __yRate = new StringOffset[_o.YRate.Count];
      for (var _j = 0; _j < __yRate.Length; ++_j) { __yRate[_j] = builder.CreateString(_o.YRate[_j]); }
      _yRate = CreateYRateVector(builder, __yRate);
    }
    var _zRate = default(VectorOffset);
    if (_o.ZRate != null) {
      var __zRate = new StringOffset[_o.ZRate.Count];
      for (var _j = 0; _j < __zRate.Length; ++_j) { __zRate[_j] = builder.CreateString(_o.ZRate[_j]); }
      _zRate = CreateZRateVector(builder, __zRate);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateAttitudeData_Abridged(
      builder,
      _id,
      _classificationMarking,
      _asId,
      _idOnOrbit,
      _o.SatNo,
      _origObjectId,
      _ts,
      _motionType,
      _o.Q1,
      _o.Q2,
      _o.Q3,
      _o.Qc,
      _o.Q1Dot,
      _o.Q2Dot,
      _o.Q3Dot,
      _o.QcDot,
      _xAngle,
      _yAngle,
      _zAngle,
      _xRate,
      _yRate,
      _zRate,
      _o.Ra,
      _o.Declination,
      _o.ConingAngle,
      _o.PrecPeriod,
      _o.SpinPeriod,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class AttitudeData_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string AsId { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OrigObjectId { get; set; }
  public string Ts { get; set; }
  public string MotionType { get; set; }
  public double Q1 { get; set; }
  public double Q2 { get; set; }
  public double Q3 { get; set; }
  public double Qc { get; set; }
  public double Q1Dot { get; set; }
  public double Q2Dot { get; set; }
  public double Q3Dot { get; set; }
  public double QcDot { get; set; }
  public List<string> XAngle { get; set; }
  public List<string> YAngle { get; set; }
  public List<string> ZAngle { get; set; }
  public List<string> XRate { get; set; }
  public List<string> YRate { get; set; }
  public List<string> ZRate { get; set; }
  public double Ra { get; set; }
  public double Declination { get; set; }
  public double ConingAngle { get; set; }
  public double PrecPeriod { get; set; }
  public double SpinPeriod { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public AttitudeData_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public AttitudeData_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.AsId = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OrigObjectId = null;
    this.Ts = null;
    this.MotionType = null;
    this.Q1 = 0.0;
    this.Q2 = 0.0;
    this.Q3 = 0.0;
    this.Qc = 0.0;
    this.Q1Dot = 0.0;
    this.Q2Dot = 0.0;
    this.Q3Dot = 0.0;
    this.QcDot = 0.0;
    this.XAngle = null;
    this.YAngle = null;
    this.ZAngle = null;
    this.XRate = null;
    this.YRate = null;
    this.ZRate = null;
    this.Ra = 0.0;
    this.Declination = 0.0;
    this.ConingAngle = 0.0;
    this.PrecPeriod = 0.0;
    this.SpinPeriod = 0.0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = AttitudeData_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static AttitudeData_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return AttitudeData_Abridged.GetRootAsAttitudeData_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AttitudeData_Abridged.FinishAttitudeData_AbridgedBuffer(fbb, AttitudeData_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AttitudeData_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*AsId*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 12 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 16 /*Ts*/, false)
      && verifier.VerifyString(tablePos, 18 /*MotionType*/, false)
      && verifier.VerifyField(tablePos, 20 /*Q1*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Q2*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Q3*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*Qc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*Q1Dot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Q2Dot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Q3Dot*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*QcDot*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*XAngle*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*YAngle*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*ZAngle*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*XRate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*YRate*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*ZRate*/, false)
      && verifier.VerifyField(tablePos, 48 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*Declination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*ConingAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*PrecPeriod*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*SpinPeriod*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 58 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 60 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 62 /*Source*/, false)
      && verifier.VerifyString(tablePos, 64 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 66 /*DataMode*/, 1 /*AttitudeData_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 68 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
