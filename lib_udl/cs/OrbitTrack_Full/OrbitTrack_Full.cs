// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
public struct OrbitTrack_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OrbitTrack_Full GetRootAsOrbitTrack_Full(ByteBuffer _bb) { return GetRootAsOrbitTrack_Full(_bb, new OrbitTrack_Full()); }
  public static OrbitTrack_Full GetRootAsOrbitTrack_Full(ByteBuffer _bb, OrbitTrack_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OrbitTrack_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ORBI"); }
  public static bool VerifyOrbitTrack_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ORBI", false, OrbitTrack_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OrbitTrack_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: ORBIT_TRACK_ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: 32375
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 37375
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: L2045
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the Elset associated with this object.
  /// Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdElset { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdElsetBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdElsetBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdElsetArray() { return __p.__vector_as_array<byte>(16); }
  /// Track timestamp in ISO8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Ts { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTsBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTsArray() { return __p.__vector_as_array<byte>(18); }
  /// WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 19.88550102
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 46.74596844
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Track point altitude relative to WGS-84 ellipsoid, in meters.
  /// Example: /// Example: 585.71
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radio frequency of the track, measured in megahertz (MHz).
  /// Example: /// Example: 1.5273
  /// Constraints: No constraints specified.
  public double RdfRF { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// International radio call sign assigned to the track. This is an 8-character alphanumeric code.
  /// Example: /// Example: Charlie
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string CallSign { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallSignBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCallSignBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCallSignArray() { return __p.__vector_as_array<byte>(28); }
  /// Report number received from the reporting source for this track.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string RptNum { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRptNumBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetRptNumBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetRptNumArray() { return __p.__vector_as_array<byte>(30); }
  /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  ///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  ///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  ///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  ///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  ///  PENDING: Track object which has not been evaluated.
  ///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  ///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  public OrbitTrack_Full_objIdent_Enum ObjIdent { get { int o = __p.__offset(32); return o != 0 ? (OrbitTrack_Full_objIdent_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OrbitTrack_Full_objIdent_Enum.ASSUMED_FRIEND; } }
  /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  ///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
  ///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
  ///  KILO: Friendly high-value object.
  ///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
  ///  ZOMBIE: Suspect track, object, or entity of special interest.
  /// Example: /// Example: JOKER
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string IdentAmp { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdentAmpBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetIdentAmpBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetIdentAmpArray() { return __p.__vector_as_array<byte>(34); }
  /// Status of the satellite.
  /// Example: /// Example: INACTIVE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SatStatus { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSatStatusBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetSatStatusBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetSatStatusArray() { return __p.__vector_as_array<byte>(36); }
  /// The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
  /// Example: /// Example: PAYLOAD
  /// Constraints: Minimum length = 0, Maximum length = 32
  public OrbitTrack_Full_objectType_Enum ObjectType { get { int o = __p.__offset(38); return o != 0 ? (OrbitTrack_Full_objectType_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OrbitTrack_Full_objectType_Enum.DEBRIS; } }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string CountryCode { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryCodeBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCountryCodeBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCountryCodeArray() { return __p.__vector_as_array<byte>(40); }
  /// Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
  /// Example: /// Example: 0.5868
  /// Constraints: No constraints specified.
  public double Decay { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One-line Charlie elements set.
  /// Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string CharlieLine { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharlieLineBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetCharlieLineBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetCharlieLineArray() { return __p.__vector_as_array<byte>(44); }
  /// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
  /// Example: /// Example: ELLIPSE
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string AouType { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAouTypeBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetAouTypeBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetAouTypeArray() { return __p.__vector_as_array<byte>(46); }
  /// Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
  /// ELLIPSE:
  ///    brg - orientation in degrees of the ellipse
  ///    a1 - semi-major axis in meters
  ///    a2 - semi-minor axis in meters
  /// BEARING (BEARING BOX or MTST BEARING BOX):
  ///    brg - orientation in degrees of the bearing box 
  ///    a1 - length of bearing box in meters 
  ///    a2 - half-width of bearing box in meters 
  /// OTHER (All other type values):
  ///    brg - line of bearing in degrees true 
  ///    a1 - bearing error in degrees 
  ///    a2 - estimated range in meters.
  /// Example: /// Example: [34.3, 26.5, 1.2]
  /// Constraints: No constraints specified.
  public string AouData(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AouDataLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Track object speed, in km/sec.
  /// Example: /// Example: 15.03443
  /// Constraints: No constraints specified.
  public double Spd { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
  /// Example: /// Example: 15.2
  /// Constraints: No constraints specified.
  public double AngElev { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
  /// Example: /// Example: 90
  /// Constraints: No constraints specified.
  public double Cntnmnt { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Source cross-reference code for the command that originated the track report.
  /// Example: /// Example: XE
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string Xref { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetXrefBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetXrefBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetXrefArray() { return __p.__vector_as_array<byte>(56); }
  /// The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
  /// Example: /// Example: FHKX
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ChXRef { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChXRefBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetChXRefBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetChXRefArray() { return __p.__vector_as_array<byte>(58); }
  /// Free-form remarks entered for the satellite.
  /// Example: /// Example: A note regarding this spacecraft
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Amplification { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAmplificationBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetAmplificationBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetAmplificationArray() { return __p.__vector_as_array<byte>(60); }
  /// A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
  /// Example: /// Example: ID Mode
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Iff { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIffBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetIffBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetIffArray() { return __p.__vector_as_array<byte>(62); }
  /// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Reinforced { get { int o = __p.__offset(64); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Reduced { get { int o = __p.__offset(66); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Hq { get { int o = __p.__offset(68); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Dummy { get { int o = __p.__offset(70); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool TaskForce { get { int o = __p.__offset(72); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Feint { get { int o = __p.__offset(74); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Installation { get { int o = __p.__offset(76); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
  /// Example: /// Example: SPACE
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string VehType { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVehTypeBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetVehTypeBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetVehTypeArray() { return __p.__vector_as_array<byte>(78); }
  /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  /// Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrkId { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrkIdBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetTrkIdBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetTrkIdArray() { return __p.__vector_as_array<byte>(80); }
  /// TrackSensor Collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string TrackSensors(int j) { int o = __p.__offset(82); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TrackSensorsLength { get { int o = __p.__offset(82); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(84); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(86); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(88); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(90); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(90, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(90); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(90); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public OrbitTrack_Full_dataMode_Enum DataMode { get { int o = __p.__offset(92); return o != 0 ? (OrbitTrack_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OrbitTrack_Full_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(94); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(94, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(94); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(94); }

  public static Offset<OrbitTrack_Full> CreateOrbitTrack_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset idElsetOffset = default(StringOffset),
      StringOffset tsOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      double alt = 0.0,
      double rdfRF = 0.0,
      StringOffset callSignOffset = default(StringOffset),
      StringOffset rptNumOffset = default(StringOffset),
      OrbitTrack_Full_objIdent_Enum objIdent = OrbitTrack_Full_objIdent_Enum.ASSUMED_FRIEND,
      StringOffset identAmpOffset = default(StringOffset),
      StringOffset satStatusOffset = default(StringOffset),
      OrbitTrack_Full_objectType_Enum objectType = OrbitTrack_Full_objectType_Enum.DEBRIS,
      StringOffset countryCodeOffset = default(StringOffset),
      double decay = 0.0,
      StringOffset charlieLineOffset = default(StringOffset),
      StringOffset aouTypeOffset = default(StringOffset),
      VectorOffset aouDataOffset = default(VectorOffset),
      double spd = 0.0,
      double angElev = 0.0,
      double cntnmnt = 0.0,
      StringOffset xrefOffset = default(StringOffset),
      StringOffset chXRefOffset = default(StringOffset),
      StringOffset amplificationOffset = default(StringOffset),
      StringOffset iffOffset = default(StringOffset),
      bool reinforced = false,
      bool reduced = false,
      bool hq = false,
      bool dummy = false,
      bool taskForce = false,
      bool feint = false,
      bool installation = false,
      StringOffset vehTypeOffset = default(StringOffset),
      StringOffset trkIdOffset = default(StringOffset),
      VectorOffset trackSensorsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      OrbitTrack_Full_dataMode_Enum dataMode = OrbitTrack_Full_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(46);
    OrbitTrack_Full.AddCntnmnt(builder, cntnmnt);
    OrbitTrack_Full.AddAngElev(builder, angElev);
    OrbitTrack_Full.AddSpd(builder, spd);
    OrbitTrack_Full.AddDecay(builder, decay);
    OrbitTrack_Full.AddRdfRF(builder, rdfRF);
    OrbitTrack_Full.AddAlt(builder, alt);
    OrbitTrack_Full.AddLon(builder, lon);
    OrbitTrack_Full.AddLat(builder, lat);
    OrbitTrack_Full.AddOrigNetwork(builder, origNetworkOffset);
    OrbitTrack_Full.AddOrigin(builder, originOffset);
    OrbitTrack_Full.AddSource(builder, sourceOffset);
    OrbitTrack_Full.AddCreatedBy(builder, createdByOffset);
    OrbitTrack_Full.AddCreatedAt(builder, createdAtOffset);
    OrbitTrack_Full.AddTrackSensors(builder, trackSensorsOffset);
    OrbitTrack_Full.AddTrkId(builder, trkIdOffset);
    OrbitTrack_Full.AddVehType(builder, vehTypeOffset);
    OrbitTrack_Full.AddIff(builder, iffOffset);
    OrbitTrack_Full.AddAmplification(builder, amplificationOffset);
    OrbitTrack_Full.AddChXRef(builder, chXRefOffset);
    OrbitTrack_Full.AddXref(builder, xrefOffset);
    OrbitTrack_Full.AddAouData(builder, aouDataOffset);
    OrbitTrack_Full.AddAouType(builder, aouTypeOffset);
    OrbitTrack_Full.AddCharlieLine(builder, charlieLineOffset);
    OrbitTrack_Full.AddCountryCode(builder, countryCodeOffset);
    OrbitTrack_Full.AddSatStatus(builder, satStatusOffset);
    OrbitTrack_Full.AddIdentAmp(builder, identAmpOffset);
    OrbitTrack_Full.AddRptNum(builder, rptNumOffset);
    OrbitTrack_Full.AddCallSign(builder, callSignOffset);
    OrbitTrack_Full.AddTs(builder, tsOffset);
    OrbitTrack_Full.AddIdElset(builder, idElsetOffset);
    OrbitTrack_Full.AddOrigObjectId(builder, origObjectIdOffset);
    OrbitTrack_Full.AddOnOrbit(builder, onOrbitOffset);
    OrbitTrack_Full.AddSatNo(builder, satNo);
    OrbitTrack_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    OrbitTrack_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    OrbitTrack_Full.AddId(builder, idOffset);
    OrbitTrack_Full.AddDataMode(builder, dataMode);
    OrbitTrack_Full.AddInstallation(builder, installation);
    OrbitTrack_Full.AddFeint(builder, feint);
    OrbitTrack_Full.AddTaskForce(builder, taskForce);
    OrbitTrack_Full.AddDummy(builder, dummy);
    OrbitTrack_Full.AddHq(builder, hq);
    OrbitTrack_Full.AddReduced(builder, reduced);
    OrbitTrack_Full.AddReinforced(builder, reinforced);
    OrbitTrack_Full.AddObjectType(builder, objectType);
    OrbitTrack_Full.AddObjIdent(builder, objIdent);
    return OrbitTrack_Full.EndOrbitTrack_Full(builder);
  }

  public static void StartOrbitTrack_Full(FlatBufferBuilder builder) { builder.StartTable(46); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(4, onOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(5, origObjectIdOffset.Value, 0); }
  public static void AddIdElset(FlatBufferBuilder builder, StringOffset idElsetOffset) { builder.AddOffset(6, idElsetOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, StringOffset tsOffset) { builder.AddOffset(7, tsOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(8, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(9, lon, 0.0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(10, alt, 0.0); }
  public static void AddRdfRF(FlatBufferBuilder builder, double rdfRF) { builder.AddDouble(11, rdfRF, 0.0); }
  public static void AddCallSign(FlatBufferBuilder builder, StringOffset callSignOffset) { builder.AddOffset(12, callSignOffset.Value, 0); }
  public static void AddRptNum(FlatBufferBuilder builder, StringOffset rptNumOffset) { builder.AddOffset(13, rptNumOffset.Value, 0); }
  public static void AddObjIdent(FlatBufferBuilder builder, OrbitTrack_Full_objIdent_Enum objIdent) { builder.AddSbyte(14, (sbyte)objIdent, 0); }
  public static void AddIdentAmp(FlatBufferBuilder builder, StringOffset identAmpOffset) { builder.AddOffset(15, identAmpOffset.Value, 0); }
  public static void AddSatStatus(FlatBufferBuilder builder, StringOffset satStatusOffset) { builder.AddOffset(16, satStatusOffset.Value, 0); }
  public static void AddObjectType(FlatBufferBuilder builder, OrbitTrack_Full_objectType_Enum objectType) { builder.AddSbyte(17, (sbyte)objectType, 0); }
  public static void AddCountryCode(FlatBufferBuilder builder, StringOffset countryCodeOffset) { builder.AddOffset(18, countryCodeOffset.Value, 0); }
  public static void AddDecay(FlatBufferBuilder builder, double decay) { builder.AddDouble(19, decay, 0.0); }
  public static void AddCharlieLine(FlatBufferBuilder builder, StringOffset charlieLineOffset) { builder.AddOffset(20, charlieLineOffset.Value, 0); }
  public static void AddAouType(FlatBufferBuilder builder, StringOffset aouTypeOffset) { builder.AddOffset(21, aouTypeOffset.Value, 0); }
  public static void AddAouData(FlatBufferBuilder builder, VectorOffset aouDataOffset) { builder.AddOffset(22, aouDataOffset.Value, 0); }
  public static VectorOffset CreateAouDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAouDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAouDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAouDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAouDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpd(FlatBufferBuilder builder, double spd) { builder.AddDouble(23, spd, 0.0); }
  public static void AddAngElev(FlatBufferBuilder builder, double angElev) { builder.AddDouble(24, angElev, 0.0); }
  public static void AddCntnmnt(FlatBufferBuilder builder, double cntnmnt) { builder.AddDouble(25, cntnmnt, 0.0); }
  public static void AddXref(FlatBufferBuilder builder, StringOffset xrefOffset) { builder.AddOffset(26, xrefOffset.Value, 0); }
  public static void AddChXRef(FlatBufferBuilder builder, StringOffset chXRefOffset) { builder.AddOffset(27, chXRefOffset.Value, 0); }
  public static void AddAmplification(FlatBufferBuilder builder, StringOffset amplificationOffset) { builder.AddOffset(28, amplificationOffset.Value, 0); }
  public static void AddIff(FlatBufferBuilder builder, StringOffset iffOffset) { builder.AddOffset(29, iffOffset.Value, 0); }
  public static void AddReinforced(FlatBufferBuilder builder, bool reinforced) { builder.AddBool(30, reinforced, false); }
  public static void AddReduced(FlatBufferBuilder builder, bool reduced) { builder.AddBool(31, reduced, false); }
  public static void AddHq(FlatBufferBuilder builder, bool hq) { builder.AddBool(32, hq, false); }
  public static void AddDummy(FlatBufferBuilder builder, bool dummy) { builder.AddBool(33, dummy, false); }
  public static void AddTaskForce(FlatBufferBuilder builder, bool taskForce) { builder.AddBool(34, taskForce, false); }
  public static void AddFeint(FlatBufferBuilder builder, bool feint) { builder.AddBool(35, feint, false); }
  public static void AddInstallation(FlatBufferBuilder builder, bool installation) { builder.AddBool(36, installation, false); }
  public static void AddVehType(FlatBufferBuilder builder, StringOffset vehTypeOffset) { builder.AddOffset(37, vehTypeOffset.Value, 0); }
  public static void AddTrkId(FlatBufferBuilder builder, StringOffset trkIdOffset) { builder.AddOffset(38, trkIdOffset.Value, 0); }
  public static void AddTrackSensors(FlatBufferBuilder builder, VectorOffset trackSensorsOffset) { builder.AddOffset(39, trackSensorsOffset.Value, 0); }
  public static VectorOffset CreateTrackSensorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTrackSensorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackSensorsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTrackSensorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTrackSensorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(40, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(41, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(42, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(43, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OrbitTrack_Full_dataMode_Enum dataMode) { builder.AddSbyte(44, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(45, origNetworkOffset.Value, 0); }
  public static Offset<OrbitTrack_Full> EndOrbitTrack_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OrbitTrack_Full>(o);
  }
  public static void FinishOrbitTrack_FullBuffer(FlatBufferBuilder builder, Offset<OrbitTrack_Full> offset) { builder.Finish(offset.Value, "ORBI"); }
  public static void FinishSizePrefixedOrbitTrack_FullBuffer(FlatBufferBuilder builder, Offset<OrbitTrack_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ORBI"); }
  public OrbitTrack_FullT UnPack() {
    var _o = new OrbitTrack_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OrbitTrack_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OnOrbit = this.OnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.IdElset = this.IdElset;
    _o.Ts = this.Ts;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Alt = this.Alt;
    _o.RdfRF = this.RdfRF;
    _o.CallSign = this.CallSign;
    _o.RptNum = this.RptNum;
    _o.ObjIdent = this.ObjIdent;
    _o.IdentAmp = this.IdentAmp;
    _o.SatStatus = this.SatStatus;
    _o.ObjectType = this.ObjectType;
    _o.CountryCode = this.CountryCode;
    _o.Decay = this.Decay;
    _o.CharlieLine = this.CharlieLine;
    _o.AouType = this.AouType;
    _o.AouData = new List<string>();
    for (var _j = 0; _j < this.AouDataLength; ++_j) {_o.AouData.Add(this.AouData(_j));}
    _o.Spd = this.Spd;
    _o.AngElev = this.AngElev;
    _o.Cntnmnt = this.Cntnmnt;
    _o.Xref = this.Xref;
    _o.ChXRef = this.ChXRef;
    _o.Amplification = this.Amplification;
    _o.Iff = this.Iff;
    _o.Reinforced = this.Reinforced;
    _o.Reduced = this.Reduced;
    _o.Hq = this.Hq;
    _o.Dummy = this.Dummy;
    _o.TaskForce = this.TaskForce;
    _o.Feint = this.Feint;
    _o.Installation = this.Installation;
    _o.VehType = this.VehType;
    _o.TrkId = this.TrkId;
    _o.TrackSensors = new List<string>();
    for (var _j = 0; _j < this.TrackSensorsLength; ++_j) {_o.TrackSensors.Add(this.TrackSensors(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<OrbitTrack_Full> Pack(FlatBufferBuilder builder, OrbitTrack_FullT _o) {
    if (_o == null) return default(Offset<OrbitTrack_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _idElset = _o.IdElset == null ? default(StringOffset) : builder.CreateString(_o.IdElset);
    var _ts = _o.Ts == null ? default(StringOffset) : builder.CreateString(_o.Ts);
    var _callSign = _o.CallSign == null ? default(StringOffset) : builder.CreateString(_o.CallSign);
    var _rptNum = _o.RptNum == null ? default(StringOffset) : builder.CreateString(_o.RptNum);
    var _identAmp = _o.IdentAmp == null ? default(StringOffset) : builder.CreateString(_o.IdentAmp);
    var _satStatus = _o.SatStatus == null ? default(StringOffset) : builder.CreateString(_o.SatStatus);
    var _countryCode = _o.CountryCode == null ? default(StringOffset) : builder.CreateString(_o.CountryCode);
    var _charlieLine = _o.CharlieLine == null ? default(StringOffset) : builder.CreateString(_o.CharlieLine);
    var _aouType = _o.AouType == null ? default(StringOffset) : builder.CreateString(_o.AouType);
    var _aouData = default(VectorOffset);
    if (_o.AouData != null) {
      var __aouData = new StringOffset[_o.AouData.Count];
      for (var _j = 0; _j < __aouData.Length; ++_j) { __aouData[_j] = builder.CreateString(_o.AouData[_j]); }
      _aouData = CreateAouDataVector(builder, __aouData);
    }
    var _xref = _o.Xref == null ? default(StringOffset) : builder.CreateString(_o.Xref);
    var _chXRef = _o.ChXRef == null ? default(StringOffset) : builder.CreateString(_o.ChXRef);
    var _amplification = _o.Amplification == null ? default(StringOffset) : builder.CreateString(_o.Amplification);
    var _iff = _o.Iff == null ? default(StringOffset) : builder.CreateString(_o.Iff);
    var _vehType = _o.VehType == null ? default(StringOffset) : builder.CreateString(_o.VehType);
    var _trkId = _o.TrkId == null ? default(StringOffset) : builder.CreateString(_o.TrkId);
    var _trackSensors = default(VectorOffset);
    if (_o.TrackSensors != null) {
      var __trackSensors = new StringOffset[_o.TrackSensors.Count];
      for (var _j = 0; _j < __trackSensors.Length; ++_j) { __trackSensors[_j] = builder.CreateString(_o.TrackSensors[_j]); }
      _trackSensors = CreateTrackSensorsVector(builder, __trackSensors);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOrbitTrack_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _onOrbit,
      _origObjectId,
      _idElset,
      _ts,
      _o.Lat,
      _o.Lon,
      _o.Alt,
      _o.RdfRF,
      _callSign,
      _rptNum,
      _o.ObjIdent,
      _identAmp,
      _satStatus,
      _o.ObjectType,
      _countryCode,
      _o.Decay,
      _charlieLine,
      _aouType,
      _aouData,
      _o.Spd,
      _o.AngElev,
      _o.Cntnmnt,
      _xref,
      _chXRef,
      _amplification,
      _iff,
      _o.Reinforced,
      _o.Reduced,
      _o.Hq,
      _o.Dummy,
      _o.TaskForce,
      _o.Feint,
      _o.Installation,
      _vehType,
      _trkId,
      _trackSensors,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class OrbitTrack_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public string IdElset { get; set; }
  public string Ts { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public double Alt { get; set; }
  public double RdfRF { get; set; }
  public string CallSign { get; set; }
  public string RptNum { get; set; }
  public OrbitTrack_Full_objIdent_Enum ObjIdent { get; set; }
  public string IdentAmp { get; set; }
  public string SatStatus { get; set; }
  public OrbitTrack_Full_objectType_Enum ObjectType { get; set; }
  public string CountryCode { get; set; }
  public double Decay { get; set; }
  public string CharlieLine { get; set; }
  public string AouType { get; set; }
  public List<string> AouData { get; set; }
  public double Spd { get; set; }
  public double AngElev { get; set; }
  public double Cntnmnt { get; set; }
  public string Xref { get; set; }
  public string ChXRef { get; set; }
  public string Amplification { get; set; }
  public string Iff { get; set; }
  public bool Reinforced { get; set; }
  public bool Reduced { get; set; }
  public bool Hq { get; set; }
  public bool Dummy { get; set; }
  public bool TaskForce { get; set; }
  public bool Feint { get; set; }
  public bool Installation { get; set; }
  public string VehType { get; set; }
  public string TrkId { get; set; }
  public List<string> TrackSensors { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public OrbitTrack_Full_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public OrbitTrack_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OnOrbit = null;
    this.OrigObjectId = null;
    this.IdElset = null;
    this.Ts = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Alt = 0.0;
    this.RdfRF = 0.0;
    this.CallSign = null;
    this.RptNum = null;
    this.ObjIdent = OrbitTrack_Full_objIdent_Enum.ASSUMED_FRIEND;
    this.IdentAmp = null;
    this.SatStatus = null;
    this.ObjectType = OrbitTrack_Full_objectType_Enum.DEBRIS;
    this.CountryCode = null;
    this.Decay = 0.0;
    this.CharlieLine = null;
    this.AouType = null;
    this.AouData = null;
    this.Spd = 0.0;
    this.AngElev = 0.0;
    this.Cntnmnt = 0.0;
    this.Xref = null;
    this.ChXRef = null;
    this.Amplification = null;
    this.Iff = null;
    this.Reinforced = false;
    this.Reduced = false;
    this.Hq = false;
    this.Dummy = false;
    this.TaskForce = false;
    this.Feint = false;
    this.Installation = false;
    this.VehType = null;
    this.TrkId = null;
    this.TrackSensors = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = OrbitTrack_Full_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static OrbitTrack_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return OrbitTrack_Full.GetRootAsOrbitTrack_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OrbitTrack_Full.FinishOrbitTrack_FullBuffer(fbb, OrbitTrack_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OrbitTrack_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 14 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdElset*/, false)
      && verifier.VerifyString(tablePos, 18 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 20 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*RdfRF*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 28 /*CallSign*/, false)
      && verifier.VerifyString(tablePos, 30 /*RptNum*/, false)
      && verifier.VerifyField(tablePos, 32 /*ObjIdent*/, 1 /*OrbitTrack_Full_objIdent_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 34 /*IdentAmp*/, false)
      && verifier.VerifyString(tablePos, 36 /*SatStatus*/, false)
      && verifier.VerifyField(tablePos, 38 /*ObjectType*/, 1 /*OrbitTrack_Full_objectType_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*CountryCode*/, false)
      && verifier.VerifyField(tablePos, 42 /*Decay*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 44 /*CharlieLine*/, false)
      && verifier.VerifyString(tablePos, 46 /*AouType*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*AouData*/, false)
      && verifier.VerifyField(tablePos, 50 /*Spd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*AngElev*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*Cntnmnt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 56 /*Xref*/, false)
      && verifier.VerifyString(tablePos, 58 /*ChXRef*/, false)
      && verifier.VerifyString(tablePos, 60 /*Amplification*/, false)
      && verifier.VerifyString(tablePos, 62 /*Iff*/, false)
      && verifier.VerifyField(tablePos, 64 /*Reinforced*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 66 /*Reduced*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 68 /*Hq*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 70 /*Dummy*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 72 /*TaskForce*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 74 /*Feint*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 76 /*Installation*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 78 /*VehType*/, false)
      && verifier.VerifyString(tablePos, 80 /*TrkId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 82 /*TrackSensors*/, false)
      && verifier.VerifyString(tablePos, 84 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 86 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 88 /*Source*/, false)
      && verifier.VerifyString(tablePos, 90 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 92 /*DataMode*/, 1 /*OrbitTrack_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 94 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
