// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
public struct GEOStatus_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GEOStatus_Abridged GetRootAsGEOStatus_Abridged(ByteBuffer _bb) { return GetRootAsGEOStatus_Abridged(_bb, new GEOStatus_Abridged()); }
  public static GEOStatus_Abridged GetRootAsGEOStatus_Abridged(ByteBuffer _bb, GEOStatus_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GEOStatus_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "GEOS"); }
  public static bool VerifyGEOStatus_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("GEOS", false, GEOStatus_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GEOStatus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GEOSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the object on-orbit object.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Sine of inclination times the sine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Ss { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sine of inclination times the cosine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sc { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Objects displacement from geostationary orbit in deg^2/day^2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RelativeEnergy { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Corrective or overriding long term trend for longitudinal change in degrees/day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double LongitudeRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  public double LongitudeMin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 1.01
  /// Constraints: No constraints specified.
  public double LongitudeMax { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Indicates the confidence level in the entry.  (Low, Medium, High).
  /// Example: /// Example: Low
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ConfidenceLevel { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConfidenceLevelBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetConfidenceLevelBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetConfidenceLevelArray() { return __p.__vector_as_array<byte>(24); }
  /// Geosynchronous plane changing status.  (Current, Never, Former, Future).
  /// Example: /// Example: Current
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string PlaneChangeStatus { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlaneChangeStatusBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPlaneChangeStatusBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPlaneChangeStatusArray() { return __p.__vector_as_array<byte>(26); }
  /// Indicates the trough (gravity well) or drift direction of a space object:
  /// 255 - Influenced by 255° longitude trough. 
  /// 75 - Influenced by 75° longitude trough. 
  /// Both - Oscillating between both 255 and 75 troughs. 
  /// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
  /// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
  /// Example: /// Example: West
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string TroughType { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTroughTypeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetTroughTypeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetTroughTypeArray() { return __p.__vector_as_array<byte>(28); }
  /// Lost space object indicator.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool LostFlag { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Semi-annual correction.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool SemiAnnualCorrFlag { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Space object status.  (Active, Dead, Unknown).
  /// Example: /// Example: Active
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ObjectStatus { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObjectStatusBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetObjectStatusBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetObjectStatusArray() { return __p.__vector_as_array<byte>(34); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(36); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(38); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(40); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(42); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(44); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public GEOStatus_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(46); return o != 0 ? (GEOStatus_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : GEOStatus_Abridged_dataMode_Enum.REAL; } }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 21
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(50); }

  public static Offset<GEOStatus_Abridged> CreateGEOStatus_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      double ss = 0.0,
      double sc = 0.0,
      double relativeEnergy = 0.0,
      double longitudeRate = 0.0,
      double longitudeMin = 0.0,
      double longitudeMax = 0.0,
      StringOffset confidenceLevelOffset = default(StringOffset),
      StringOffset planeChangeStatusOffset = default(StringOffset),
      StringOffset troughTypeOffset = default(StringOffset),
      bool lostFlag = false,
      bool semiAnnualCorrFlag = false,
      StringOffset objectStatusOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      GEOStatus_Abridged_dataMode_Enum dataMode = GEOStatus_Abridged_dataMode_Enum.REAL,
      int satNo = 0,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(24);
    GEOStatus_Abridged.AddLongitudeMax(builder, longitudeMax);
    GEOStatus_Abridged.AddLongitudeMin(builder, longitudeMin);
    GEOStatus_Abridged.AddLongitudeRate(builder, longitudeRate);
    GEOStatus_Abridged.AddRelativeEnergy(builder, relativeEnergy);
    GEOStatus_Abridged.AddSc(builder, sc);
    GEOStatus_Abridged.AddSs(builder, ss);
    GEOStatus_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    GEOStatus_Abridged.AddSatNo(builder, satNo);
    GEOStatus_Abridged.AddOrigin(builder, originOffset);
    GEOStatus_Abridged.AddSource(builder, sourceOffset);
    GEOStatus_Abridged.AddCreatedBy(builder, createdByOffset);
    GEOStatus_Abridged.AddCreatedAt(builder, createdAtOffset);
    GEOStatus_Abridged.AddRawFileURI(builder, rawFileURIOffset);
    GEOStatus_Abridged.AddObjectStatus(builder, objectStatusOffset);
    GEOStatus_Abridged.AddTroughType(builder, troughTypeOffset);
    GEOStatus_Abridged.AddPlaneChangeStatus(builder, planeChangeStatusOffset);
    GEOStatus_Abridged.AddConfidenceLevel(builder, confidenceLevelOffset);
    GEOStatus_Abridged.AddOrigObjectId(builder, origObjectIdOffset);
    GEOStatus_Abridged.AddIdOnOrbit(builder, idOnOrbitOffset);
    GEOStatus_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    GEOStatus_Abridged.AddId(builder, idOffset);
    GEOStatus_Abridged.AddDataMode(builder, dataMode);
    GEOStatus_Abridged.AddSemiAnnualCorrFlag(builder, semiAnnualCorrFlag);
    GEOStatus_Abridged.AddLostFlag(builder, lostFlag);
    return GEOStatus_Abridged.EndGEOStatus_Abridged(builder);
  }

  public static void StartGEOStatus_Abridged(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(3, origObjectIdOffset.Value, 0); }
  public static void AddSs(FlatBufferBuilder builder, double ss) { builder.AddDouble(4, ss, 0.0); }
  public static void AddSc(FlatBufferBuilder builder, double sc) { builder.AddDouble(5, sc, 0.0); }
  public static void AddRelativeEnergy(FlatBufferBuilder builder, double relativeEnergy) { builder.AddDouble(6, relativeEnergy, 0.0); }
  public static void AddLongitudeRate(FlatBufferBuilder builder, double longitudeRate) { builder.AddDouble(7, longitudeRate, 0.0); }
  public static void AddLongitudeMin(FlatBufferBuilder builder, double longitudeMin) { builder.AddDouble(8, longitudeMin, 0.0); }
  public static void AddLongitudeMax(FlatBufferBuilder builder, double longitudeMax) { builder.AddDouble(9, longitudeMax, 0.0); }
  public static void AddConfidenceLevel(FlatBufferBuilder builder, StringOffset confidenceLevelOffset) { builder.AddOffset(10, confidenceLevelOffset.Value, 0); }
  public static void AddPlaneChangeStatus(FlatBufferBuilder builder, StringOffset planeChangeStatusOffset) { builder.AddOffset(11, planeChangeStatusOffset.Value, 0); }
  public static void AddTroughType(FlatBufferBuilder builder, StringOffset troughTypeOffset) { builder.AddOffset(12, troughTypeOffset.Value, 0); }
  public static void AddLostFlag(FlatBufferBuilder builder, bool lostFlag) { builder.AddBool(13, lostFlag, false); }
  public static void AddSemiAnnualCorrFlag(FlatBufferBuilder builder, bool semiAnnualCorrFlag) { builder.AddBool(14, semiAnnualCorrFlag, false); }
  public static void AddObjectStatus(FlatBufferBuilder builder, StringOffset objectStatusOffset) { builder.AddOffset(15, objectStatusOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(16, rawFileURIOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(17, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(18, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(19, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(20, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, GEOStatus_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(21, (sbyte)dataMode, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(22, satNo, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(23, origNetworkOffset.Value, 0); }
  public static Offset<GEOStatus_Abridged> EndGEOStatus_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GEOStatus_Abridged>(o);
  }
  public static void FinishGEOStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<GEOStatus_Abridged> offset) { builder.Finish(offset.Value, "GEOS"); }
  public static void FinishSizePrefixedGEOStatus_AbridgedBuffer(FlatBufferBuilder builder, Offset<GEOStatus_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "GEOS"); }
  public GEOStatus_AbridgedT UnPack() {
    var _o = new GEOStatus_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GEOStatus_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.Ss = this.Ss;
    _o.Sc = this.Sc;
    _o.RelativeEnergy = this.RelativeEnergy;
    _o.LongitudeRate = this.LongitudeRate;
    _o.LongitudeMin = this.LongitudeMin;
    _o.LongitudeMax = this.LongitudeMax;
    _o.ConfidenceLevel = this.ConfidenceLevel;
    _o.PlaneChangeStatus = this.PlaneChangeStatus;
    _o.TroughType = this.TroughType;
    _o.LostFlag = this.LostFlag;
    _o.SemiAnnualCorrFlag = this.SemiAnnualCorrFlag;
    _o.ObjectStatus = this.ObjectStatus;
    _o.RawFileURI = this.RawFileURI;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.SatNo = this.SatNo;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<GEOStatus_Abridged> Pack(FlatBufferBuilder builder, GEOStatus_AbridgedT _o) {
    if (_o == null) return default(Offset<GEOStatus_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _confidenceLevel = _o.ConfidenceLevel == null ? default(StringOffset) : builder.CreateString(_o.ConfidenceLevel);
    var _planeChangeStatus = _o.PlaneChangeStatus == null ? default(StringOffset) : builder.CreateString(_o.PlaneChangeStatus);
    var _troughType = _o.TroughType == null ? default(StringOffset) : builder.CreateString(_o.TroughType);
    var _objectStatus = _o.ObjectStatus == null ? default(StringOffset) : builder.CreateString(_o.ObjectStatus);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateGEOStatus_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _origObjectId,
      _o.Ss,
      _o.Sc,
      _o.RelativeEnergy,
      _o.LongitudeRate,
      _o.LongitudeMin,
      _o.LongitudeMax,
      _confidenceLevel,
      _planeChangeStatus,
      _troughType,
      _o.LostFlag,
      _o.SemiAnnualCorrFlag,
      _objectStatus,
      _rawFileURI,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _o.SatNo,
      _origNetwork);
  }
}

public class GEOStatus_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public double Ss { get; set; }
  public double Sc { get; set; }
  public double RelativeEnergy { get; set; }
  public double LongitudeRate { get; set; }
  public double LongitudeMin { get; set; }
  public double LongitudeMax { get; set; }
  public string ConfidenceLevel { get; set; }
  public string PlaneChangeStatus { get; set; }
  public string TroughType { get; set; }
  public bool LostFlag { get; set; }
  public bool SemiAnnualCorrFlag { get; set; }
  public string ObjectStatus { get; set; }
  public string RawFileURI { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public GEOStatus_Abridged_dataMode_Enum DataMode { get; set; }
  public int SatNo { get; set; }
  public string OrigNetwork { get; set; }

  public GEOStatus_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.OrigObjectId = null;
    this.Ss = 0.0;
    this.Sc = 0.0;
    this.RelativeEnergy = 0.0;
    this.LongitudeRate = 0.0;
    this.LongitudeMin = 0.0;
    this.LongitudeMax = 0.0;
    this.ConfidenceLevel = null;
    this.PlaneChangeStatus = null;
    this.TroughType = null;
    this.LostFlag = false;
    this.SemiAnnualCorrFlag = false;
    this.ObjectStatus = null;
    this.RawFileURI = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = GEOStatus_Abridged_dataMode_Enum.REAL;
    this.SatNo = 0;
    this.OrigNetwork = null;
  }
  public static GEOStatus_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return GEOStatus_Abridged.GetRootAsGEOStatus_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GEOStatus_Abridged.FinishGEOStatus_AbridgedBuffer(fbb, GEOStatus_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GEOStatus_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigObjectId*/, false)
      && verifier.VerifyField(tablePos, 12 /*Ss*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*Sc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*RelativeEnergy*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*LongitudeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*LongitudeMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*LongitudeMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 24 /*ConfidenceLevel*/, false)
      && verifier.VerifyString(tablePos, 26 /*PlaneChangeStatus*/, false)
      && verifier.VerifyString(tablePos, 28 /*TroughType*/, false)
      && verifier.VerifyField(tablePos, 30 /*LostFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*SemiAnnualCorrFlag*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 34 /*ObjectStatus*/, false)
      && verifier.VerifyString(tablePos, 36 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 38 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 42 /*Source*/, false)
      && verifier.VerifyString(tablePos, 44 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 46 /*DataMode*/, 1 /*GEOStatus_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 48 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 50 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
