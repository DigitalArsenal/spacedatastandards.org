// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
public struct BeamContour_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BeamContour_Abridged GetRootAsBeamContour_Abridged(ByteBuffer _bb) { return GetRootAsBeamContour_Abridged(_bb, new BeamContour_Abridged()); }
  public static BeamContour_Abridged GetRootAsBeamContour_Abridged(ByteBuffer _bb, BeamContour_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool BeamContour_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "BEAM"); }
  public static bool VerifyBeamContour_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("BEAM", false, BeamContour_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BeamContour_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BEAMCONTOUR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// ID of the beam.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdBeam { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBeamBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdBeamBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdBeamArray() { return __p.__vector_as_array<byte>(8); }
  /// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
  /// Example: /// Example: BORESIGHT
  /// Constraints: Minimum length = 1, Maximum length = 16
  public BeamContour_Abridged_type_Enum Type { get { int o = __p.__offset(10); return o != 0 ? (BeamContour_Abridged_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : BeamContour_Abridged_type_Enum.BORESIGHT; } }
  /// The index number of this contour. The value is required if type = CONTOUR.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public int ContourIdx { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  public double Gain { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The region name within the service area.
  /// Example: /// Example: Example region name
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string RegionName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRegionNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRegionNameArray() { return __p.__vector_as_array<byte>(16); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  public string GeographyText { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeographyTextBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetGeographyTextBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetGeographyTextArray() { return __p.__vector_as_array<byte>(18); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  public string GeographyJson { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeographyJsonBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetGeographyJsonBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetGeographyJsonArray() { return __p.__vector_as_array<byte>(20); }
  /// Type of region as projected.
  /// Example: /// Example: ST_Polygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string GeographyType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGeographyTypeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetGeographyTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetGeographyTypeArray() { return __p.__vector_as_array<byte>(22); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public int GeographyNdims { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  public int GeographySrid { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(28); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(30); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(32); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(34); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(36); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public BeamContour_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(38); return o != 0 ? (BeamContour_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : BeamContour_Abridged_dataMode_Enum.REAL; } }

  public static Offset<BeamContour_Abridged> CreateBeamContour_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idBeamOffset = default(StringOffset),
      BeamContour_Abridged_type_Enum type = BeamContour_Abridged_type_Enum.BORESIGHT,
      int contourIdx = 0,
      double gain = 0.0,
      StringOffset regionNameOffset = default(StringOffset),
      StringOffset geographyTextOffset = default(StringOffset),
      StringOffset geographyJsonOffset = default(StringOffset),
      StringOffset geographyTypeOffset = default(StringOffset),
      int geographyNdims = 0,
      int geographySrid = 0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      BeamContour_Abridged_dataMode_Enum dataMode = BeamContour_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(18);
    BeamContour_Abridged.AddGain(builder, gain);
    BeamContour_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    BeamContour_Abridged.AddOrigin(builder, originOffset);
    BeamContour_Abridged.AddSource(builder, sourceOffset);
    BeamContour_Abridged.AddCreatedBy(builder, createdByOffset);
    BeamContour_Abridged.AddCreatedAt(builder, createdAtOffset);
    BeamContour_Abridged.AddGeographySrid(builder, geographySrid);
    BeamContour_Abridged.AddGeographyNdims(builder, geographyNdims);
    BeamContour_Abridged.AddGeographyType(builder, geographyTypeOffset);
    BeamContour_Abridged.AddGeographyJson(builder, geographyJsonOffset);
    BeamContour_Abridged.AddGeographyText(builder, geographyTextOffset);
    BeamContour_Abridged.AddRegionName(builder, regionNameOffset);
    BeamContour_Abridged.AddContourIdx(builder, contourIdx);
    BeamContour_Abridged.AddIdBeam(builder, idBeamOffset);
    BeamContour_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    BeamContour_Abridged.AddId(builder, idOffset);
    BeamContour_Abridged.AddDataMode(builder, dataMode);
    BeamContour_Abridged.AddType(builder, type);
    return BeamContour_Abridged.EndBeamContour_Abridged(builder);
  }

  public static void StartBeamContour_Abridged(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdBeam(FlatBufferBuilder builder, StringOffset idBeamOffset) { builder.AddOffset(2, idBeamOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, BeamContour_Abridged_type_Enum type) { builder.AddSbyte(3, (sbyte)type, 0); }
  public static void AddContourIdx(FlatBufferBuilder builder, int contourIdx) { builder.AddInt(4, contourIdx, 0); }
  public static void AddGain(FlatBufferBuilder builder, double gain) { builder.AddDouble(5, gain, 0.0); }
  public static void AddRegionName(FlatBufferBuilder builder, StringOffset regionNameOffset) { builder.AddOffset(6, regionNameOffset.Value, 0); }
  public static void AddGeographyText(FlatBufferBuilder builder, StringOffset geographyTextOffset) { builder.AddOffset(7, geographyTextOffset.Value, 0); }
  public static void AddGeographyJson(FlatBufferBuilder builder, StringOffset geographyJsonOffset) { builder.AddOffset(8, geographyJsonOffset.Value, 0); }
  public static void AddGeographyType(FlatBufferBuilder builder, StringOffset geographyTypeOffset) { builder.AddOffset(9, geographyTypeOffset.Value, 0); }
  public static void AddGeographyNdims(FlatBufferBuilder builder, int geographyNdims) { builder.AddInt(10, geographyNdims, 0); }
  public static void AddGeographySrid(FlatBufferBuilder builder, int geographySrid) { builder.AddInt(11, geographySrid, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(12, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(13, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(14, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(15, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(16, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, BeamContour_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(17, (sbyte)dataMode, 0); }
  public static Offset<BeamContour_Abridged> EndBeamContour_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BeamContour_Abridged>(o);
  }
  public static void FinishBeamContour_AbridgedBuffer(FlatBufferBuilder builder, Offset<BeamContour_Abridged> offset) { builder.Finish(offset.Value, "BEAM"); }
  public static void FinishSizePrefixedBeamContour_AbridgedBuffer(FlatBufferBuilder builder, Offset<BeamContour_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "BEAM"); }
  public BeamContour_AbridgedT UnPack() {
    var _o = new BeamContour_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BeamContour_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdBeam = this.IdBeam;
    _o.Type = this.Type;
    _o.ContourIdx = this.ContourIdx;
    _o.Gain = this.Gain;
    _o.RegionName = this.RegionName;
    _o.GeographyText = this.GeographyText;
    _o.GeographyJson = this.GeographyJson;
    _o.GeographyType = this.GeographyType;
    _o.GeographyNdims = this.GeographyNdims;
    _o.GeographySrid = this.GeographySrid;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<BeamContour_Abridged> Pack(FlatBufferBuilder builder, BeamContour_AbridgedT _o) {
    if (_o == null) return default(Offset<BeamContour_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idBeam = _o.IdBeam == null ? default(StringOffset) : builder.CreateString(_o.IdBeam);
    var _regionName = _o.RegionName == null ? default(StringOffset) : builder.CreateString(_o.RegionName);
    var _geographyText = _o.GeographyText == null ? default(StringOffset) : builder.CreateString(_o.GeographyText);
    var _geographyJson = _o.GeographyJson == null ? default(StringOffset) : builder.CreateString(_o.GeographyJson);
    var _geographyType = _o.GeographyType == null ? default(StringOffset) : builder.CreateString(_o.GeographyType);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateBeamContour_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idBeam,
      _o.Type,
      _o.ContourIdx,
      _o.Gain,
      _regionName,
      _geographyText,
      _geographyJson,
      _geographyType,
      _o.GeographyNdims,
      _o.GeographySrid,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class BeamContour_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdBeam { get; set; }
  public BeamContour_Abridged_type_Enum Type { get; set; }
  public int ContourIdx { get; set; }
  public double Gain { get; set; }
  public string RegionName { get; set; }
  public string GeographyText { get; set; }
  public string GeographyJson { get; set; }
  public string GeographyType { get; set; }
  public int GeographyNdims { get; set; }
  public int GeographySrid { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public BeamContour_Abridged_dataMode_Enum DataMode { get; set; }

  public BeamContour_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdBeam = null;
    this.Type = BeamContour_Abridged_type_Enum.BORESIGHT;
    this.ContourIdx = 0;
    this.Gain = 0.0;
    this.RegionName = null;
    this.GeographyText = null;
    this.GeographyJson = null;
    this.GeographyType = null;
    this.GeographyNdims = 0;
    this.GeographySrid = 0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = BeamContour_Abridged_dataMode_Enum.REAL;
  }
  public static BeamContour_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return BeamContour_Abridged.GetRootAsBeamContour_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    BeamContour_Abridged.FinishBeamContour_AbridgedBuffer(fbb, BeamContour_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class BeamContour_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdBeam*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 1 /*BeamContour_Abridged_type_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*ContourIdx*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Gain*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 16 /*RegionName*/, false)
      && verifier.VerifyString(tablePos, 18 /*GeographyText*/, false)
      && verifier.VerifyString(tablePos, 20 /*GeographyJson*/, false)
      && verifier.VerifyString(tablePos, 22 /*GeographyType*/, false)
      && verifier.VerifyField(tablePos, 24 /*GeographyNdims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*GeographySrid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 28 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 30 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 32 /*Source*/, false)
      && verifier.VerifyString(tablePos, 34 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 36 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 38 /*DataMode*/, 1 /*BeamContour_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
