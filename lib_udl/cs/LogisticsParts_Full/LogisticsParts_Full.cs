// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// The parts associated with this support item.
public struct LogisticsParts_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogisticsParts_Full GetRootAsLogisticsParts_Full(ByteBuffer _bb) { return GetRootAsLogisticsParts_Full(_bb, new LogisticsParts_Full()); }
  public static LogisticsParts_Full GetRootAsLogisticsParts_Full(ByteBuffer _bb, LogisticsParts_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LogisticsParts_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOGI"); }
  public static bool VerifyLogisticsParts_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOGI", false, LogisticsParts_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogisticsParts_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Requested or supplied part number.
  /// Example: /// Example: MS35338-42
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string PartNumber { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPartNumberBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPartNumberBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPartNumberArray() { return __p.__vector_as_array<byte>(4); }
  /// The National Stock Number of the part being requested or supplied.
  /// Example: /// Example: 5310-00-045-3299
  /// Constraints: Minimum length = 0, Maximum length = 20
  public string NationalStockNumber { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNationalStockNumberBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNationalStockNumberBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNationalStockNumberArray() { return __p.__vector_as_array<byte>(6); }
  /// Code for a unit of measurement.
  /// Example: /// Example: EA
  /// Constraints: Minimum length = 0, Maximum length = 2
  public string MeasurementUnitCode { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMeasurementUnitCodeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMeasurementUnitCodeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMeasurementUnitCodeArray() { return __p.__vector_as_array<byte>(8); }
  /// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
  /// Example: /// Example: 5611UU001
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string WorkUnitCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorkUnitCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetWorkUnitCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetWorkUnitCodeArray() { return __p.__vector_as_array<byte>(10); }
  /// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
  /// Example: /// Example: 1C-17A-4
  /// Constraints: Minimum length = 0, Maximum length = 15
  public string TechnicalOrderText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTechnicalOrderTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTechnicalOrderTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTechnicalOrderTextArray() { return __p.__vector_as_array<byte>(12); }
  /// Technical order manual figure number for the requested / supplied part.
  /// Example: /// Example: 3
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string FigureNumber { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFigureNumberBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetFigureNumberBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetFigureNumberArray() { return __p.__vector_as_array<byte>(14); }
  /// Technical order manual index number for the requested part.
  /// Example: /// Example: 4
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string IndexNumber { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIndexNumberBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIndexNumberBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIndexNumberArray() { return __p.__vector_as_array<byte>(16); }
  /// The person who validated the request for parts.
  /// Example: /// Example: JOHN SMITH
  /// Constraints: Minimum length = 0, Maximum length = 25
  public string RequestVerifier { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRequestVerifierBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRequestVerifierBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRequestVerifierArray() { return __p.__vector_as_array<byte>(18); }
  /// The person who validated that the sourced location has, and can supply, the requested parts.
  /// Example: /// Example: JANE DOE
  /// Constraints: Minimum length = 0, Maximum length = 25
  public string LocationVerifier { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocationVerifierBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLocationVerifierBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLocationVerifierArray() { return __p.__vector_as_array<byte>(20); }
  /// The supply document number.
  /// Example: /// Example: J223FU31908300
  /// Constraints: Minimum length = 0, Maximum length = 17
  public string SupplyDocumentNumber { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSupplyDocumentNumberBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSupplyDocumentNumberBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSupplyDocumentNumberArray() { return __p.__vector_as_array<byte>(22); }
  /// The supply stocks for this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string LogisticsStocks(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LogisticsStocksLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<LogisticsParts_Full> CreateLogisticsParts_Full(FlatBufferBuilder builder,
      StringOffset partNumberOffset = default(StringOffset),
      StringOffset nationalStockNumberOffset = default(StringOffset),
      StringOffset measurementUnitCodeOffset = default(StringOffset),
      StringOffset workUnitCodeOffset = default(StringOffset),
      StringOffset technicalOrderTextOffset = default(StringOffset),
      StringOffset figureNumberOffset = default(StringOffset),
      StringOffset indexNumberOffset = default(StringOffset),
      StringOffset requestVerifierOffset = default(StringOffset),
      StringOffset locationVerifierOffset = default(StringOffset),
      StringOffset supplyDocumentNumberOffset = default(StringOffset),
      VectorOffset logisticsStocksOffset = default(VectorOffset)) {
    builder.StartTable(11);
    LogisticsParts_Full.AddLogisticsStocks(builder, logisticsStocksOffset);
    LogisticsParts_Full.AddSupplyDocumentNumber(builder, supplyDocumentNumberOffset);
    LogisticsParts_Full.AddLocationVerifier(builder, locationVerifierOffset);
    LogisticsParts_Full.AddRequestVerifier(builder, requestVerifierOffset);
    LogisticsParts_Full.AddIndexNumber(builder, indexNumberOffset);
    LogisticsParts_Full.AddFigureNumber(builder, figureNumberOffset);
    LogisticsParts_Full.AddTechnicalOrderText(builder, technicalOrderTextOffset);
    LogisticsParts_Full.AddWorkUnitCode(builder, workUnitCodeOffset);
    LogisticsParts_Full.AddMeasurementUnitCode(builder, measurementUnitCodeOffset);
    LogisticsParts_Full.AddNationalStockNumber(builder, nationalStockNumberOffset);
    LogisticsParts_Full.AddPartNumber(builder, partNumberOffset);
    return LogisticsParts_Full.EndLogisticsParts_Full(builder);
  }

  public static void StartLogisticsParts_Full(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddPartNumber(FlatBufferBuilder builder, StringOffset partNumberOffset) { builder.AddOffset(0, partNumberOffset.Value, 0); }
  public static void AddNationalStockNumber(FlatBufferBuilder builder, StringOffset nationalStockNumberOffset) { builder.AddOffset(1, nationalStockNumberOffset.Value, 0); }
  public static void AddMeasurementUnitCode(FlatBufferBuilder builder, StringOffset measurementUnitCodeOffset) { builder.AddOffset(2, measurementUnitCodeOffset.Value, 0); }
  public static void AddWorkUnitCode(FlatBufferBuilder builder, StringOffset workUnitCodeOffset) { builder.AddOffset(3, workUnitCodeOffset.Value, 0); }
  public static void AddTechnicalOrderText(FlatBufferBuilder builder, StringOffset technicalOrderTextOffset) { builder.AddOffset(4, technicalOrderTextOffset.Value, 0); }
  public static void AddFigureNumber(FlatBufferBuilder builder, StringOffset figureNumberOffset) { builder.AddOffset(5, figureNumberOffset.Value, 0); }
  public static void AddIndexNumber(FlatBufferBuilder builder, StringOffset indexNumberOffset) { builder.AddOffset(6, indexNumberOffset.Value, 0); }
  public static void AddRequestVerifier(FlatBufferBuilder builder, StringOffset requestVerifierOffset) { builder.AddOffset(7, requestVerifierOffset.Value, 0); }
  public static void AddLocationVerifier(FlatBufferBuilder builder, StringOffset locationVerifierOffset) { builder.AddOffset(8, locationVerifierOffset.Value, 0); }
  public static void AddSupplyDocumentNumber(FlatBufferBuilder builder, StringOffset supplyDocumentNumberOffset) { builder.AddOffset(9, supplyDocumentNumberOffset.Value, 0); }
  public static void AddLogisticsStocks(FlatBufferBuilder builder, VectorOffset logisticsStocksOffset) { builder.AddOffset(10, logisticsStocksOffset.Value, 0); }
  public static VectorOffset CreateLogisticsStocksVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsStocksVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsStocksVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLogisticsStocksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLogisticsStocksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<LogisticsParts_Full> EndLogisticsParts_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LogisticsParts_Full>(o);
  }
  public static void FinishLogisticsParts_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsParts_Full> offset) { builder.Finish(offset.Value, "LOGI"); }
  public static void FinishSizePrefixedLogisticsParts_FullBuffer(FlatBufferBuilder builder, Offset<LogisticsParts_Full> offset) { builder.FinishSizePrefixed(offset.Value, "LOGI"); }
  public LogisticsParts_FullT UnPack() {
    var _o = new LogisticsParts_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogisticsParts_FullT _o) {
    _o.PartNumber = this.PartNumber;
    _o.NationalStockNumber = this.NationalStockNumber;
    _o.MeasurementUnitCode = this.MeasurementUnitCode;
    _o.WorkUnitCode = this.WorkUnitCode;
    _o.TechnicalOrderText = this.TechnicalOrderText;
    _o.FigureNumber = this.FigureNumber;
    _o.IndexNumber = this.IndexNumber;
    _o.RequestVerifier = this.RequestVerifier;
    _o.LocationVerifier = this.LocationVerifier;
    _o.SupplyDocumentNumber = this.SupplyDocumentNumber;
    _o.LogisticsStocks = new List<string>();
    for (var _j = 0; _j < this.LogisticsStocksLength; ++_j) {_o.LogisticsStocks.Add(this.LogisticsStocks(_j));}
  }
  public static Offset<LogisticsParts_Full> Pack(FlatBufferBuilder builder, LogisticsParts_FullT _o) {
    if (_o == null) return default(Offset<LogisticsParts_Full>);
    var _partNumber = _o.PartNumber == null ? default(StringOffset) : builder.CreateString(_o.PartNumber);
    var _nationalStockNumber = _o.NationalStockNumber == null ? default(StringOffset) : builder.CreateString(_o.NationalStockNumber);
    var _measurementUnitCode = _o.MeasurementUnitCode == null ? default(StringOffset) : builder.CreateString(_o.MeasurementUnitCode);
    var _workUnitCode = _o.WorkUnitCode == null ? default(StringOffset) : builder.CreateString(_o.WorkUnitCode);
    var _technicalOrderText = _o.TechnicalOrderText == null ? default(StringOffset) : builder.CreateString(_o.TechnicalOrderText);
    var _figureNumber = _o.FigureNumber == null ? default(StringOffset) : builder.CreateString(_o.FigureNumber);
    var _indexNumber = _o.IndexNumber == null ? default(StringOffset) : builder.CreateString(_o.IndexNumber);
    var _requestVerifier = _o.RequestVerifier == null ? default(StringOffset) : builder.CreateString(_o.RequestVerifier);
    var _locationVerifier = _o.LocationVerifier == null ? default(StringOffset) : builder.CreateString(_o.LocationVerifier);
    var _supplyDocumentNumber = _o.SupplyDocumentNumber == null ? default(StringOffset) : builder.CreateString(_o.SupplyDocumentNumber);
    var _logisticsStocks = default(VectorOffset);
    if (_o.LogisticsStocks != null) {
      var __logisticsStocks = new StringOffset[_o.LogisticsStocks.Count];
      for (var _j = 0; _j < __logisticsStocks.Length; ++_j) { __logisticsStocks[_j] = builder.CreateString(_o.LogisticsStocks[_j]); }
      _logisticsStocks = CreateLogisticsStocksVector(builder, __logisticsStocks);
    }
    return CreateLogisticsParts_Full(
      builder,
      _partNumber,
      _nationalStockNumber,
      _measurementUnitCode,
      _workUnitCode,
      _technicalOrderText,
      _figureNumber,
      _indexNumber,
      _requestVerifier,
      _locationVerifier,
      _supplyDocumentNumber,
      _logisticsStocks);
  }
}

public class LogisticsParts_FullT
{
  public string PartNumber { get; set; }
  public string NationalStockNumber { get; set; }
  public string MeasurementUnitCode { get; set; }
  public string WorkUnitCode { get; set; }
  public string TechnicalOrderText { get; set; }
  public string FigureNumber { get; set; }
  public string IndexNumber { get; set; }
  public string RequestVerifier { get; set; }
  public string LocationVerifier { get; set; }
  public string SupplyDocumentNumber { get; set; }
  public List<string> LogisticsStocks { get; set; }

  public LogisticsParts_FullT() {
    this.PartNumber = null;
    this.NationalStockNumber = null;
    this.MeasurementUnitCode = null;
    this.WorkUnitCode = null;
    this.TechnicalOrderText = null;
    this.FigureNumber = null;
    this.IndexNumber = null;
    this.RequestVerifier = null;
    this.LocationVerifier = null;
    this.SupplyDocumentNumber = null;
    this.LogisticsStocks = null;
  }
  public static LogisticsParts_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return LogisticsParts_Full.GetRootAsLogisticsParts_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LogisticsParts_Full.FinishLogisticsParts_FullBuffer(fbb, LogisticsParts_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LogisticsParts_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PartNumber*/, false)
      && verifier.VerifyString(tablePos, 6 /*NationalStockNumber*/, false)
      && verifier.VerifyString(tablePos, 8 /*MeasurementUnitCode*/, false)
      && verifier.VerifyString(tablePos, 10 /*WorkUnitCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*TechnicalOrderText*/, false)
      && verifier.VerifyString(tablePos, 14 /*FigureNumber*/, false)
      && verifier.VerifyString(tablePos, 16 /*IndexNumber*/, false)
      && verifier.VerifyString(tablePos, 18 /*RequestVerifier*/, false)
      && verifier.VerifyString(tablePos, 20 /*LocationVerifier*/, false)
      && verifier.VerifyString(tablePos, 22 /*SupplyDocumentNumber*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*LogisticsStocks*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
