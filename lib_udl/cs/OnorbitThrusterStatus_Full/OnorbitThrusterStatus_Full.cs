// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Status information for OnorbitThruster objects.
public struct OnorbitThrusterStatus_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OnorbitThrusterStatus_Full GetRootAsOnorbitThrusterStatus_Full(ByteBuffer _bb) { return GetRootAsOnorbitThrusterStatus_Full(_bb, new OnorbitThrusterStatus_Full()); }
  public static OnorbitThrusterStatus_Full GetRootAsOnorbitThrusterStatus_Full(ByteBuffer _bb, OnorbitThrusterStatus_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OnorbitThrusterStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ONOR"); }
  public static bool VerifyOnorbitThrusterStatus_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ONOR", false, OnorbitThrusterStatus_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OnorbitThrusterStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: af103c-1f917dc-002c1bd
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
  /// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnorbitThruster { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnorbitThrusterBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnorbitThrusterBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnorbitThrusterArray() { return __p.__vector_as_array<byte>(8); }
  /// Identifier of this thruster.
  /// Example: /// Example: REA1
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string StatusTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStatusTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStatusTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Minimum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double PropMassMin { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 907.6
  /// Constraints: No constraints specified.
  public double PropMassAvg { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Median available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  public double PropMassMedian { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 2333.3
  /// Constraints: No constraints specified.
  public double PropMassMax { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total fuel mass available for this thruster's type, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double FuelMass { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double FuelMassUnc { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Total delta-velocity available for this thruster's type, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double TotalDeltaV { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Minimum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double MinDeltaV { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  public double EstDeltaV { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  public double MaxDeltaV { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maximum available thrust for this thruster, in newtons.
  /// Example: /// Example: 22.1
  /// Constraints: No constraints specified.
  public double ThrustMax { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Specific impulse for this thruster, in seconds.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  public double Isp { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating if this thruster is operational.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool Operational { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(40); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(42); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(44); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(46); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(48); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public OnorbitThrusterStatus_Full_dataMode_Enum DataMode { get { int o = __p.__offset(50); return o != 0 ? (OnorbitThrusterStatus_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnorbitThrusterStatus_Full_dataMode_Enum.REAL; } }

  public static Offset<OnorbitThrusterStatus_Full> CreateOnorbitThrusterStatus_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnorbitThrusterOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset statusTimeOffset = default(StringOffset),
      double propMassMin = 0.0,
      double propMassAvg = 0.0,
      double propMassMedian = 0.0,
      double propMassMax = 0.0,
      double fuelMass = 0.0,
      double fuelMassUnc = 0.0,
      double totalDeltaV = 0.0,
      double minDeltaV = 0.0,
      double estDeltaV = 0.0,
      double maxDeltaV = 0.0,
      double thrustMax = 0.0,
      double isp = 0.0,
      bool operational = false,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      OnorbitThrusterStatus_Full_dataMode_Enum dataMode = OnorbitThrusterStatus_Full_dataMode_Enum.REAL) {
    builder.StartTable(24);
    OnorbitThrusterStatus_Full.AddIsp(builder, isp);
    OnorbitThrusterStatus_Full.AddThrustMax(builder, thrustMax);
    OnorbitThrusterStatus_Full.AddMaxDeltaV(builder, maxDeltaV);
    OnorbitThrusterStatus_Full.AddEstDeltaV(builder, estDeltaV);
    OnorbitThrusterStatus_Full.AddMinDeltaV(builder, minDeltaV);
    OnorbitThrusterStatus_Full.AddTotalDeltaV(builder, totalDeltaV);
    OnorbitThrusterStatus_Full.AddFuelMassUnc(builder, fuelMassUnc);
    OnorbitThrusterStatus_Full.AddFuelMass(builder, fuelMass);
    OnorbitThrusterStatus_Full.AddPropMassMax(builder, propMassMax);
    OnorbitThrusterStatus_Full.AddPropMassMedian(builder, propMassMedian);
    OnorbitThrusterStatus_Full.AddPropMassAvg(builder, propMassAvg);
    OnorbitThrusterStatus_Full.AddPropMassMin(builder, propMassMin);
    OnorbitThrusterStatus_Full.AddOrigNetwork(builder, origNetworkOffset);
    OnorbitThrusterStatus_Full.AddOrigin(builder, originOffset);
    OnorbitThrusterStatus_Full.AddSource(builder, sourceOffset);
    OnorbitThrusterStatus_Full.AddCreatedBy(builder, createdByOffset);
    OnorbitThrusterStatus_Full.AddCreatedAt(builder, createdAtOffset);
    OnorbitThrusterStatus_Full.AddStatusTime(builder, statusTimeOffset);
    OnorbitThrusterStatus_Full.AddName(builder, nameOffset);
    OnorbitThrusterStatus_Full.AddIdOnorbitThruster(builder, idOnorbitThrusterOffset);
    OnorbitThrusterStatus_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    OnorbitThrusterStatus_Full.AddId(builder, idOffset);
    OnorbitThrusterStatus_Full.AddDataMode(builder, dataMode);
    OnorbitThrusterStatus_Full.AddOperational(builder, operational);
    return OnorbitThrusterStatus_Full.EndOnorbitThrusterStatus_Full(builder);
  }

  public static void StartOnorbitThrusterStatus_Full(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnorbitThruster(FlatBufferBuilder builder, StringOffset idOnorbitThrusterOffset) { builder.AddOffset(2, idOnorbitThrusterOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddStatusTime(FlatBufferBuilder builder, StringOffset statusTimeOffset) { builder.AddOffset(4, statusTimeOffset.Value, 0); }
  public static void AddPropMassMin(FlatBufferBuilder builder, double propMassMin) { builder.AddDouble(5, propMassMin, 0.0); }
  public static void AddPropMassAvg(FlatBufferBuilder builder, double propMassAvg) { builder.AddDouble(6, propMassAvg, 0.0); }
  public static void AddPropMassMedian(FlatBufferBuilder builder, double propMassMedian) { builder.AddDouble(7, propMassMedian, 0.0); }
  public static void AddPropMassMax(FlatBufferBuilder builder, double propMassMax) { builder.AddDouble(8, propMassMax, 0.0); }
  public static void AddFuelMass(FlatBufferBuilder builder, double fuelMass) { builder.AddDouble(9, fuelMass, 0.0); }
  public static void AddFuelMassUnc(FlatBufferBuilder builder, double fuelMassUnc) { builder.AddDouble(10, fuelMassUnc, 0.0); }
  public static void AddTotalDeltaV(FlatBufferBuilder builder, double totalDeltaV) { builder.AddDouble(11, totalDeltaV, 0.0); }
  public static void AddMinDeltaV(FlatBufferBuilder builder, double minDeltaV) { builder.AddDouble(12, minDeltaV, 0.0); }
  public static void AddEstDeltaV(FlatBufferBuilder builder, double estDeltaV) { builder.AddDouble(13, estDeltaV, 0.0); }
  public static void AddMaxDeltaV(FlatBufferBuilder builder, double maxDeltaV) { builder.AddDouble(14, maxDeltaV, 0.0); }
  public static void AddThrustMax(FlatBufferBuilder builder, double thrustMax) { builder.AddDouble(15, thrustMax, 0.0); }
  public static void AddIsp(FlatBufferBuilder builder, double isp) { builder.AddDouble(16, isp, 0.0); }
  public static void AddOperational(FlatBufferBuilder builder, bool operational) { builder.AddBool(17, operational, false); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(18, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(19, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(20, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(21, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(22, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OnorbitThrusterStatus_Full_dataMode_Enum dataMode) { builder.AddSbyte(23, (sbyte)dataMode, 0); }
  public static Offset<OnorbitThrusterStatus_Full> EndOnorbitThrusterStatus_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OnorbitThrusterStatus_Full>(o);
  }
  public static void FinishOnorbitThrusterStatus_FullBuffer(FlatBufferBuilder builder, Offset<OnorbitThrusterStatus_Full> offset) { builder.Finish(offset.Value, "ONOR"); }
  public static void FinishSizePrefixedOnorbitThrusterStatus_FullBuffer(FlatBufferBuilder builder, Offset<OnorbitThrusterStatus_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ONOR"); }
  public OnorbitThrusterStatus_FullT UnPack() {
    var _o = new OnorbitThrusterStatus_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OnorbitThrusterStatus_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnorbitThruster = this.IdOnorbitThruster;
    _o.Name = this.Name;
    _o.StatusTime = this.StatusTime;
    _o.PropMassMin = this.PropMassMin;
    _o.PropMassAvg = this.PropMassAvg;
    _o.PropMassMedian = this.PropMassMedian;
    _o.PropMassMax = this.PropMassMax;
    _o.FuelMass = this.FuelMass;
    _o.FuelMassUnc = this.FuelMassUnc;
    _o.TotalDeltaV = this.TotalDeltaV;
    _o.MinDeltaV = this.MinDeltaV;
    _o.EstDeltaV = this.EstDeltaV;
    _o.MaxDeltaV = this.MaxDeltaV;
    _o.ThrustMax = this.ThrustMax;
    _o.Isp = this.Isp;
    _o.Operational = this.Operational;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<OnorbitThrusterStatus_Full> Pack(FlatBufferBuilder builder, OnorbitThrusterStatus_FullT _o) {
    if (_o == null) return default(Offset<OnorbitThrusterStatus_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnorbitThruster = _o.IdOnorbitThruster == null ? default(StringOffset) : builder.CreateString(_o.IdOnorbitThruster);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _statusTime = _o.StatusTime == null ? default(StringOffset) : builder.CreateString(_o.StatusTime);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnorbitThrusterStatus_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnorbitThruster,
      _name,
      _statusTime,
      _o.PropMassMin,
      _o.PropMassAvg,
      _o.PropMassMedian,
      _o.PropMassMax,
      _o.FuelMass,
      _o.FuelMassUnc,
      _o.TotalDeltaV,
      _o.MinDeltaV,
      _o.EstDeltaV,
      _o.MaxDeltaV,
      _o.ThrustMax,
      _o.Isp,
      _o.Operational,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class OnorbitThrusterStatus_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnorbitThruster { get; set; }
  public string Name { get; set; }
  public string StatusTime { get; set; }
  public double PropMassMin { get; set; }
  public double PropMassAvg { get; set; }
  public double PropMassMedian { get; set; }
  public double PropMassMax { get; set; }
  public double FuelMass { get; set; }
  public double FuelMassUnc { get; set; }
  public double TotalDeltaV { get; set; }
  public double MinDeltaV { get; set; }
  public double EstDeltaV { get; set; }
  public double MaxDeltaV { get; set; }
  public double ThrustMax { get; set; }
  public double Isp { get; set; }
  public bool Operational { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public OnorbitThrusterStatus_Full_dataMode_Enum DataMode { get; set; }

  public OnorbitThrusterStatus_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnorbitThruster = null;
    this.Name = null;
    this.StatusTime = null;
    this.PropMassMin = 0.0;
    this.PropMassAvg = 0.0;
    this.PropMassMedian = 0.0;
    this.PropMassMax = 0.0;
    this.FuelMass = 0.0;
    this.FuelMassUnc = 0.0;
    this.TotalDeltaV = 0.0;
    this.MinDeltaV = 0.0;
    this.EstDeltaV = 0.0;
    this.MaxDeltaV = 0.0;
    this.ThrustMax = 0.0;
    this.Isp = 0.0;
    this.Operational = false;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = OnorbitThrusterStatus_Full_dataMode_Enum.REAL;
  }
  public static OnorbitThrusterStatus_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return OnorbitThrusterStatus_Full.GetRootAsOnorbitThrusterStatus_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OnorbitThrusterStatus_Full.FinishOnorbitThrusterStatus_FullBuffer(fbb, OnorbitThrusterStatus_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OnorbitThrusterStatus_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnorbitThruster*/, false)
      && verifier.VerifyString(tablePos, 10 /*Name*/, false)
      && verifier.VerifyString(tablePos, 12 /*StatusTime*/, false)
      && verifier.VerifyField(tablePos, 14 /*PropMassMin*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*PropMassAvg*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*PropMassMedian*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*PropMassMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*FuelMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*FuelMassUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*TotalDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*MinDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*EstDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*MaxDeltaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*ThrustMax*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Isp*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Operational*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 42 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 44 /*Source*/, false)
      && verifier.VerifyString(tablePos, 46 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 48 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 50 /*DataMode*/, 1 /*OnorbitThrusterStatus_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
