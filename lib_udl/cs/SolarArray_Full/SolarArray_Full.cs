// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of information on on-orbit/spacecraft solar arrays. A spacecraft may have multiple solar arrays and each solar array can have multiple 'details' records compiled by different sources.
public struct SolarArray_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static SolarArray_Full GetRootAsSolarArray_Full(ByteBuffer _bb) { return GetRootAsSolarArray_Full(_bb, new SolarArray_Full()); }
  public static SolarArray_Full GetRootAsSolarArray_Full(ByteBuffer _bb, SolarArray_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SolarArray_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "SOLA"); }
  public static bool VerifySolarArray_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("SOLA", false, SolarArray_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SolarArray_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SOLARARRAY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Solar Array name.
  /// Example: /// Example: Solar1
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(8); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(10); }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string UpdatedAt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedAtBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetUpdatedAtBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetUpdatedAtArray() { return __p.__vector_as_array<byte>(12); }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string UpdatedBy { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUpdatedByBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetUpdatedByBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetUpdatedByArray() { return __p.__vector_as_array<byte>(14); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(16); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(18); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(20); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public SolarArray_Full_dataMode_Enum DataMode { get { int o = __p.__offset(22); return o != 0 ? (SolarArray_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : SolarArray_Full_dataMode_Enum.REAL; } }
  /// Read-only collection of additional SolarArrayDetails by various sources for this organization, ignored on create/update. These details must be created separately via the /udl/solararraydetails operations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SolarArrayDetails(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SolarArrayDetailsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SolarArray_Full> CreateSolarArray_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset updatedAtOffset = default(StringOffset),
      StringOffset updatedByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      SolarArray_Full_dataMode_Enum dataMode = SolarArray_Full_dataMode_Enum.REAL,
      VectorOffset solarArrayDetailsOffset = default(VectorOffset)) {
    builder.StartTable(11);
    SolarArray_Full.AddSolarArrayDetails(builder, solarArrayDetailsOffset);
    SolarArray_Full.AddOrigNetwork(builder, origNetworkOffset);
    SolarArray_Full.AddOrigin(builder, originOffset);
    SolarArray_Full.AddSource(builder, sourceOffset);
    SolarArray_Full.AddUpdatedBy(builder, updatedByOffset);
    SolarArray_Full.AddUpdatedAt(builder, updatedAtOffset);
    SolarArray_Full.AddCreatedBy(builder, createdByOffset);
    SolarArray_Full.AddCreatedAt(builder, createdAtOffset);
    SolarArray_Full.AddName(builder, nameOffset);
    SolarArray_Full.AddId(builder, idOffset);
    SolarArray_Full.AddDataMode(builder, dataMode);
    return SolarArray_Full.EndSolarArray_Full(builder);
  }

  public static void StartSolarArray_Full(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(2, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(3, createdByOffset.Value, 0); }
  public static void AddUpdatedAt(FlatBufferBuilder builder, StringOffset updatedAtOffset) { builder.AddOffset(4, updatedAtOffset.Value, 0); }
  public static void AddUpdatedBy(FlatBufferBuilder builder, StringOffset updatedByOffset) { builder.AddOffset(5, updatedByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(6, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(7, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(8, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, SolarArray_Full_dataMode_Enum dataMode) { builder.AddSbyte(9, (sbyte)dataMode, 0); }
  public static void AddSolarArrayDetails(FlatBufferBuilder builder, VectorOffset solarArrayDetailsOffset) { builder.AddOffset(10, solarArrayDetailsOffset.Value, 0); }
  public static VectorOffset CreateSolarArrayDetailsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSolarArrayDetailsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSolarArrayDetailsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSolarArrayDetailsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSolarArrayDetailsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SolarArray_Full> EndSolarArray_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SolarArray_Full>(o);
  }
  public static void FinishSolarArray_FullBuffer(FlatBufferBuilder builder, Offset<SolarArray_Full> offset) { builder.Finish(offset.Value, "SOLA"); }
  public static void FinishSizePrefixedSolarArray_FullBuffer(FlatBufferBuilder builder, Offset<SolarArray_Full> offset) { builder.FinishSizePrefixed(offset.Value, "SOLA"); }
  public SolarArray_FullT UnPack() {
    var _o = new SolarArray_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SolarArray_FullT _o) {
    _o.Id = this.Id;
    _o.Name = this.Name;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.UpdatedAt = this.UpdatedAt;
    _o.UpdatedBy = this.UpdatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
    _o.SolarArrayDetails = new List<string>();
    for (var _j = 0; _j < this.SolarArrayDetailsLength; ++_j) {_o.SolarArrayDetails.Add(this.SolarArrayDetails(_j));}
  }
  public static Offset<SolarArray_Full> Pack(FlatBufferBuilder builder, SolarArray_FullT _o) {
    if (_o == null) return default(Offset<SolarArray_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _updatedAt = _o.UpdatedAt == null ? default(StringOffset) : builder.CreateString(_o.UpdatedAt);
    var _updatedBy = _o.UpdatedBy == null ? default(StringOffset) : builder.CreateString(_o.UpdatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _solarArrayDetails = default(VectorOffset);
    if (_o.SolarArrayDetails != null) {
      var __solarArrayDetails = new StringOffset[_o.SolarArrayDetails.Count];
      for (var _j = 0; _j < __solarArrayDetails.Length; ++_j) { __solarArrayDetails[_j] = builder.CreateString(_o.SolarArrayDetails[_j]); }
      _solarArrayDetails = CreateSolarArrayDetailsVector(builder, __solarArrayDetails);
    }
    return CreateSolarArray_Full(
      builder,
      _id,
      _name,
      _createdAt,
      _createdBy,
      _updatedAt,
      _updatedBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode,
      _solarArrayDetails);
  }
}

public class SolarArray_FullT
{
  public string Id { get; set; }
  public string Name { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string UpdatedAt { get; set; }
  public string UpdatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public SolarArray_Full_dataMode_Enum DataMode { get; set; }
  public List<string> SolarArrayDetails { get; set; }

  public SolarArray_FullT() {
    this.Id = null;
    this.Name = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.UpdatedAt = null;
    this.UpdatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = SolarArray_Full_dataMode_Enum.REAL;
    this.SolarArrayDetails = null;
  }
  public static SolarArray_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return SolarArray_Full.GetRootAsSolarArray_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    SolarArray_Full.FinishSolarArray_FullBuffer(fbb, SolarArray_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SolarArray_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyString(tablePos, 8 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 10 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 12 /*UpdatedAt*/, false)
      && verifier.VerifyString(tablePos, 14 /*UpdatedBy*/, false)
      && verifier.VerifyString(tablePos, 16 /*Source*/, false)
      && verifier.VerifyString(tablePos, 18 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 20 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 22 /*DataMode*/, 1 /*SolarArray_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*SolarArrayDetails*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
