// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
public struct MtiMission_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MtiMission_Ingest GetRootAsMtiMission_Ingest(ByteBuffer _bb) { return GetRootAsMtiMission_Ingest(_bb, new MtiMission_Ingest()); }
  public static MtiMission_Ingest GetRootAsMtiMission_Ingest(ByteBuffer _bb, MtiMission_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MtiMission_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MTIM"); }
  public static bool VerifyMtiMission_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MTIM", false, MtiMission_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MtiMission_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The mission plan id.
  /// Example: /// Example: M1-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string M1 { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM1Bytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetM1Bytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetM1Array() { return __p.__vector_as_array<byte>(4); }
  /// Unique identification of the flight plan.
  /// Example: /// Example: M2-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string M2 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM2Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetM2Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetM2Array() { return __p.__vector_as_array<byte>(6); }
  /// Platform type that originated the data.
  /// Example: /// Example: PLATFORM
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string M3 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM3Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetM3Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetM3Array() { return __p.__vector_as_array<byte>(8); }
  /// Identification of the platform variant, modifications, etc.
  /// Example: /// Example: IDENT
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string M4 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetM4Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetM4Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetM4Array() { return __p.__vector_as_array<byte>(10); }
  /// Mission origination date.
  /// Example: /// Example: 2018-01-01
  /// Constraints: No constraints specified.
  public string MsnRefTs { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMsnRefTsBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMsnRefTsBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMsnRefTsArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<MtiMission_Ingest> CreateMtiMission_Ingest(FlatBufferBuilder builder,
      StringOffset m1Offset = default(StringOffset),
      StringOffset m2Offset = default(StringOffset),
      StringOffset m3Offset = default(StringOffset),
      StringOffset m4Offset = default(StringOffset),
      StringOffset msnRefTsOffset = default(StringOffset)) {
    builder.StartTable(5);
    MtiMission_Ingest.AddMsnRefTs(builder, msnRefTsOffset);
    MtiMission_Ingest.AddM4(builder, m4Offset);
    MtiMission_Ingest.AddM3(builder, m3Offset);
    MtiMission_Ingest.AddM2(builder, m2Offset);
    MtiMission_Ingest.AddM1(builder, m1Offset);
    return MtiMission_Ingest.EndMtiMission_Ingest(builder);
  }

  public static void StartMtiMission_Ingest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddM1(FlatBufferBuilder builder, StringOffset m1Offset) { builder.AddOffset(0, m1Offset.Value, 0); }
  public static void AddM2(FlatBufferBuilder builder, StringOffset m2Offset) { builder.AddOffset(1, m2Offset.Value, 0); }
  public static void AddM3(FlatBufferBuilder builder, StringOffset m3Offset) { builder.AddOffset(2, m3Offset.Value, 0); }
  public static void AddM4(FlatBufferBuilder builder, StringOffset m4Offset) { builder.AddOffset(3, m4Offset.Value, 0); }
  public static void AddMsnRefTs(FlatBufferBuilder builder, StringOffset msnRefTsOffset) { builder.AddOffset(4, msnRefTsOffset.Value, 0); }
  public static Offset<MtiMission_Ingest> EndMtiMission_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MtiMission_Ingest>(o);
  }
  public static void FinishMtiMission_IngestBuffer(FlatBufferBuilder builder, Offset<MtiMission_Ingest> offset) { builder.Finish(offset.Value, "MTIM"); }
  public static void FinishSizePrefixedMtiMission_IngestBuffer(FlatBufferBuilder builder, Offset<MtiMission_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "MTIM"); }
  public MtiMission_IngestT UnPack() {
    var _o = new MtiMission_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MtiMission_IngestT _o) {
    _o.M1 = this.M1;
    _o.M2 = this.M2;
    _o.M3 = this.M3;
    _o.M4 = this.M4;
    _o.MsnRefTs = this.MsnRefTs;
  }
  public static Offset<MtiMission_Ingest> Pack(FlatBufferBuilder builder, MtiMission_IngestT _o) {
    if (_o == null) return default(Offset<MtiMission_Ingest>);
    var _m1 = _o.M1 == null ? default(StringOffset) : builder.CreateString(_o.M1);
    var _m2 = _o.M2 == null ? default(StringOffset) : builder.CreateString(_o.M2);
    var _m3 = _o.M3 == null ? default(StringOffset) : builder.CreateString(_o.M3);
    var _m4 = _o.M4 == null ? default(StringOffset) : builder.CreateString(_o.M4);
    var _msnRefTs = _o.MsnRefTs == null ? default(StringOffset) : builder.CreateString(_o.MsnRefTs);
    return CreateMtiMission_Ingest(
      builder,
      _m1,
      _m2,
      _m3,
      _m4,
      _msnRefTs);
  }
}

public class MtiMission_IngestT
{
  public string M1 { get; set; }
  public string M2 { get; set; }
  public string M3 { get; set; }
  public string M4 { get; set; }
  public string MsnRefTs { get; set; }

  public MtiMission_IngestT() {
    this.M1 = null;
    this.M2 = null;
    this.M3 = null;
    this.M4 = null;
    this.MsnRefTs = null;
  }
  public static MtiMission_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return MtiMission_Ingest.GetRootAsMtiMission_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MtiMission_Ingest.FinishMtiMission_IngestBuffer(fbb, MtiMission_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MtiMission_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*M1*/, false)
      && verifier.VerifyString(tablePos, 6 /*M2*/, false)
      && verifier.VerifyString(tablePos, 8 /*M3*/, false)
      && verifier.VerifyString(tablePos, 10 /*M4*/, false)
      && verifier.VerifyString(tablePos, 12 /*MsnRefTs*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
