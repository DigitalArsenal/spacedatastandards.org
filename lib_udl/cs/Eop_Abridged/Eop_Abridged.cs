// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
/// Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
/// Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
/// IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
public struct Eop_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Eop_Abridged GetRootAsEop_Abridged(ByteBuffer _bb) { return GetRootAsEop_Abridged(_bb, new Eop_Abridged()); }
  public static Eop_Abridged GetRootAsEop_Abridged(ByteBuffer _bb, Eop_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Eop_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EOPA"); }
  public static bool VerifyEop_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EOPA", false, Eop_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Eop_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EOP-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string EopDate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEopDateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEopDateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEopDateArray() { return __p.__vector_as_array<byte>(8); }
  /// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  public Eop_Abridged_polarMotionState_Enum PolarMotionState { get { int o = __p.__offset(10); return o != 0 ? (Eop_Abridged_polarMotionState_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Eop_Abridged_polarMotionState_Enum.I; } }
  /// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.182987
  /// Constraints: No constraints specified.
  public double PolarMotionX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated uncertainty/error in polarMotionX value in arc seconds.
  /// Example: /// Example: 0.000672
  /// Constraints: No constraints specified.
  public double PolarMotionXUnc { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.168775
  /// Constraints: No constraints specified.
  public double PolarMotionY { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated uncertainty/error in polarMotionY value in arc seconds.
  /// Example: /// Example: 0.000345
  /// Constraints: No constraints specified.
  public double PolarMotionYUnc { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  public Eop_Abridged_ut1UTCState_Enum Ut1UTCState { get { int o = __p.__offset(20); return o != 0 ? (Eop_Abridged_ut1UTCState_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Eop_Abridged_ut1UTCState_Enum.I; } }
  /// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
  /// Example: /// Example: -0.1251659
  /// Constraints: No constraints specified.
  public double Ut1UTC { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the ut1UTC value in seconds.
  /// Example: /// Example: 2.07e-05
  /// Constraints: No constraints specified.
  public double Ut1UTCUnc { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
  /// Example: /// Example: 1.8335
  /// Constraints: No constraints specified.
  public double Lod { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the lod value in seconds.
  /// Example: /// Example: 0.0201
  /// Constraints: No constraints specified.
  public double LodUnc { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  public Eop_Abridged_nutationState_Enum NutationState { get { int o = __p.__offset(30); return o != 0 ? (Eop_Abridged_nutationState_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Eop_Abridged_nutationState_Enum.I; } }
  /// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -10.437
  /// Constraints: No constraints specified.
  public double DPSI { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
  /// Example: /// Example: 0.507
  /// Constraints: No constraints specified.
  public double DPSIUnc { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -0.917
  /// Constraints: No constraints specified.
  public double DEpsilon { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
  /// Example: /// Example: 0.165
  /// Constraints: No constraints specified.
  public double DEpsilonUnc { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
  /// Example: /// Example: -0.086
  /// Constraints: No constraints specified.
  public double DX { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
  /// Example: /// Example: 0.202
  /// Constraints: No constraints specified.
  public double DXUnc { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
  /// Example: /// Example: 0.13
  /// Constraints: No constraints specified.
  public double DY { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
  /// Example: /// Example: 0.165
  /// Constraints: No constraints specified.
  public double DYUnc { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.1824
  /// Constraints: No constraints specified.
  public double PolarMotionXB { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.1679
  /// Constraints: No constraints specified.
  public double PolarMotionYB { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
  /// Example: /// Example: -0.1253
  /// Constraints: No constraints specified.
  public double Ut1UTCB { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -9.9
  /// Constraints: No constraints specified.
  public double DPSIB { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -1.7
  /// Constraints: No constraints specified.
  public double DEpsilonB { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
  /// Example: /// Example: 0.129
  /// Constraints: No constraints specified.
  public double DXB { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
  /// Example: /// Example: -0.653
  /// Constraints: No constraints specified.
  public double DYB { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
  /// Example: /// Example: IAU1980
  /// Constraints: Minimum length = 0, Maximum length = 10
  public string PrecessionNutationStd { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrecessionNutationStdBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetPrecessionNutationStdBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetPrecessionNutationStdArray() { return __p.__vector_as_array<byte>(62); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(64); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(66); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(68); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Eop_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(70); return o != 0 ? (Eop_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Eop_Abridged_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(76); }

  public static Offset<Eop_Abridged> CreateEop_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset eopDateOffset = default(StringOffset),
      Eop_Abridged_polarMotionState_Enum polarMotionState = Eop_Abridged_polarMotionState_Enum.I,
      double polarMotionX = 0.0,
      double polarMotionXUnc = 0.0,
      double polarMotionY = 0.0,
      double polarMotionYUnc = 0.0,
      Eop_Abridged_ut1UTCState_Enum ut1UTCState = Eop_Abridged_ut1UTCState_Enum.I,
      double ut1UTC = 0.0,
      double ut1UTCUnc = 0.0,
      double lod = 0.0,
      double lodUnc = 0.0,
      Eop_Abridged_nutationState_Enum nutationState = Eop_Abridged_nutationState_Enum.I,
      double dPSI = 0.0,
      double dPSIUnc = 0.0,
      double dEpsilon = 0.0,
      double dEpsilonUnc = 0.0,
      double dX = 0.0,
      double dXUnc = 0.0,
      double dY = 0.0,
      double dYUnc = 0.0,
      double polarMotionXB = 0.0,
      double polarMotionYB = 0.0,
      double ut1UTCB = 0.0,
      double dPSIB = 0.0,
      double dEpsilonB = 0.0,
      double dXB = 0.0,
      double dYB = 0.0,
      StringOffset precessionNutationStdOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Eop_Abridged_dataMode_Enum dataMode = Eop_Abridged_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(37);
    Eop_Abridged.AddDYB(builder, dYB);
    Eop_Abridged.AddDXB(builder, dXB);
    Eop_Abridged.AddDEpsilonB(builder, dEpsilonB);
    Eop_Abridged.AddDPSIB(builder, dPSIB);
    Eop_Abridged.AddUt1UTCB(builder, ut1UTCB);
    Eop_Abridged.AddPolarMotionYB(builder, polarMotionYB);
    Eop_Abridged.AddPolarMotionXB(builder, polarMotionXB);
    Eop_Abridged.AddDYUnc(builder, dYUnc);
    Eop_Abridged.AddDY(builder, dY);
    Eop_Abridged.AddDXUnc(builder, dXUnc);
    Eop_Abridged.AddDX(builder, dX);
    Eop_Abridged.AddDEpsilonUnc(builder, dEpsilonUnc);
    Eop_Abridged.AddDEpsilon(builder, dEpsilon);
    Eop_Abridged.AddDPSIUnc(builder, dPSIUnc);
    Eop_Abridged.AddDPSI(builder, dPSI);
    Eop_Abridged.AddLodUnc(builder, lodUnc);
    Eop_Abridged.AddLod(builder, lod);
    Eop_Abridged.AddUt1UTCUnc(builder, ut1UTCUnc);
    Eop_Abridged.AddUt1UTC(builder, ut1UTC);
    Eop_Abridged.AddPolarMotionYUnc(builder, polarMotionYUnc);
    Eop_Abridged.AddPolarMotionY(builder, polarMotionY);
    Eop_Abridged.AddPolarMotionXUnc(builder, polarMotionXUnc);
    Eop_Abridged.AddPolarMotionX(builder, polarMotionX);
    Eop_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Eop_Abridged.AddCreatedBy(builder, createdByOffset);
    Eop_Abridged.AddCreatedAt(builder, createdAtOffset);
    Eop_Abridged.AddOrigin(builder, originOffset);
    Eop_Abridged.AddSource(builder, sourceOffset);
    Eop_Abridged.AddRawFileURI(builder, rawFileURIOffset);
    Eop_Abridged.AddPrecessionNutationStd(builder, precessionNutationStdOffset);
    Eop_Abridged.AddEopDate(builder, eopDateOffset);
    Eop_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Eop_Abridged.AddId(builder, idOffset);
    Eop_Abridged.AddDataMode(builder, dataMode);
    Eop_Abridged.AddNutationState(builder, nutationState);
    Eop_Abridged.AddUt1UTCState(builder, ut1UTCState);
    Eop_Abridged.AddPolarMotionState(builder, polarMotionState);
    return Eop_Abridged.EndEop_Abridged(builder);
  }

  public static void StartEop_Abridged(FlatBufferBuilder builder) { builder.StartTable(37); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddEopDate(FlatBufferBuilder builder, StringOffset eopDateOffset) { builder.AddOffset(2, eopDateOffset.Value, 0); }
  public static void AddPolarMotionState(FlatBufferBuilder builder, Eop_Abridged_polarMotionState_Enum polarMotionState) { builder.AddSbyte(3, (sbyte)polarMotionState, 0); }
  public static void AddPolarMotionX(FlatBufferBuilder builder, double polarMotionX) { builder.AddDouble(4, polarMotionX, 0.0); }
  public static void AddPolarMotionXUnc(FlatBufferBuilder builder, double polarMotionXUnc) { builder.AddDouble(5, polarMotionXUnc, 0.0); }
  public static void AddPolarMotionY(FlatBufferBuilder builder, double polarMotionY) { builder.AddDouble(6, polarMotionY, 0.0); }
  public static void AddPolarMotionYUnc(FlatBufferBuilder builder, double polarMotionYUnc) { builder.AddDouble(7, polarMotionYUnc, 0.0); }
  public static void AddUt1UTCState(FlatBufferBuilder builder, Eop_Abridged_ut1UTCState_Enum ut1UTCState) { builder.AddSbyte(8, (sbyte)ut1UTCState, 0); }
  public static void AddUt1UTC(FlatBufferBuilder builder, double ut1UTC) { builder.AddDouble(9, ut1UTC, 0.0); }
  public static void AddUt1UTCUnc(FlatBufferBuilder builder, double ut1UTCUnc) { builder.AddDouble(10, ut1UTCUnc, 0.0); }
  public static void AddLod(FlatBufferBuilder builder, double lod) { builder.AddDouble(11, lod, 0.0); }
  public static void AddLodUnc(FlatBufferBuilder builder, double lodUnc) { builder.AddDouble(12, lodUnc, 0.0); }
  public static void AddNutationState(FlatBufferBuilder builder, Eop_Abridged_nutationState_Enum nutationState) { builder.AddSbyte(13, (sbyte)nutationState, 0); }
  public static void AddDPSI(FlatBufferBuilder builder, double dPSI) { builder.AddDouble(14, dPSI, 0.0); }
  public static void AddDPSIUnc(FlatBufferBuilder builder, double dPSIUnc) { builder.AddDouble(15, dPSIUnc, 0.0); }
  public static void AddDEpsilon(FlatBufferBuilder builder, double dEpsilon) { builder.AddDouble(16, dEpsilon, 0.0); }
  public static void AddDEpsilonUnc(FlatBufferBuilder builder, double dEpsilonUnc) { builder.AddDouble(17, dEpsilonUnc, 0.0); }
  public static void AddDX(FlatBufferBuilder builder, double dX) { builder.AddDouble(18, dX, 0.0); }
  public static void AddDXUnc(FlatBufferBuilder builder, double dXUnc) { builder.AddDouble(19, dXUnc, 0.0); }
  public static void AddDY(FlatBufferBuilder builder, double dY) { builder.AddDouble(20, dY, 0.0); }
  public static void AddDYUnc(FlatBufferBuilder builder, double dYUnc) { builder.AddDouble(21, dYUnc, 0.0); }
  public static void AddPolarMotionXB(FlatBufferBuilder builder, double polarMotionXB) { builder.AddDouble(22, polarMotionXB, 0.0); }
  public static void AddPolarMotionYB(FlatBufferBuilder builder, double polarMotionYB) { builder.AddDouble(23, polarMotionYB, 0.0); }
  public static void AddUt1UTCB(FlatBufferBuilder builder, double ut1UTCB) { builder.AddDouble(24, ut1UTCB, 0.0); }
  public static void AddDPSIB(FlatBufferBuilder builder, double dPSIB) { builder.AddDouble(25, dPSIB, 0.0); }
  public static void AddDEpsilonB(FlatBufferBuilder builder, double dEpsilonB) { builder.AddDouble(26, dEpsilonB, 0.0); }
  public static void AddDXB(FlatBufferBuilder builder, double dXB) { builder.AddDouble(27, dXB, 0.0); }
  public static void AddDYB(FlatBufferBuilder builder, double dYB) { builder.AddDouble(28, dYB, 0.0); }
  public static void AddPrecessionNutationStd(FlatBufferBuilder builder, StringOffset precessionNutationStdOffset) { builder.AddOffset(29, precessionNutationStdOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(30, rawFileURIOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(31, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(32, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Eop_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(33, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(36, origNetworkOffset.Value, 0); }
  public static Offset<Eop_Abridged> EndEop_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Eop_Abridged>(o);
  }
  public static void FinishEop_AbridgedBuffer(FlatBufferBuilder builder, Offset<Eop_Abridged> offset) { builder.Finish(offset.Value, "EOPA"); }
  public static void FinishSizePrefixedEop_AbridgedBuffer(FlatBufferBuilder builder, Offset<Eop_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EOPA"); }
  public Eop_AbridgedT UnPack() {
    var _o = new Eop_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Eop_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.EopDate = this.EopDate;
    _o.PolarMotionState = this.PolarMotionState;
    _o.PolarMotionX = this.PolarMotionX;
    _o.PolarMotionXUnc = this.PolarMotionXUnc;
    _o.PolarMotionY = this.PolarMotionY;
    _o.PolarMotionYUnc = this.PolarMotionYUnc;
    _o.Ut1UTCState = this.Ut1UTCState;
    _o.Ut1UTC = this.Ut1UTC;
    _o.Ut1UTCUnc = this.Ut1UTCUnc;
    _o.Lod = this.Lod;
    _o.LodUnc = this.LodUnc;
    _o.NutationState = this.NutationState;
    _o.DPSI = this.DPSI;
    _o.DPSIUnc = this.DPSIUnc;
    _o.DEpsilon = this.DEpsilon;
    _o.DEpsilonUnc = this.DEpsilonUnc;
    _o.DX = this.DX;
    _o.DXUnc = this.DXUnc;
    _o.DY = this.DY;
    _o.DYUnc = this.DYUnc;
    _o.PolarMotionXB = this.PolarMotionXB;
    _o.PolarMotionYB = this.PolarMotionYB;
    _o.Ut1UTCB = this.Ut1UTCB;
    _o.DPSIB = this.DPSIB;
    _o.DEpsilonB = this.DEpsilonB;
    _o.DXB = this.DXB;
    _o.DYB = this.DYB;
    _o.PrecessionNutationStd = this.PrecessionNutationStd;
    _o.RawFileURI = this.RawFileURI;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Eop_Abridged> Pack(FlatBufferBuilder builder, Eop_AbridgedT _o) {
    if (_o == null) return default(Offset<Eop_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _eopDate = _o.EopDate == null ? default(StringOffset) : builder.CreateString(_o.EopDate);
    var _precessionNutationStd = _o.PrecessionNutationStd == null ? default(StringOffset) : builder.CreateString(_o.PrecessionNutationStd);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateEop_Abridged(
      builder,
      _id,
      _classificationMarking,
      _eopDate,
      _o.PolarMotionState,
      _o.PolarMotionX,
      _o.PolarMotionXUnc,
      _o.PolarMotionY,
      _o.PolarMotionYUnc,
      _o.Ut1UTCState,
      _o.Ut1UTC,
      _o.Ut1UTCUnc,
      _o.Lod,
      _o.LodUnc,
      _o.NutationState,
      _o.DPSI,
      _o.DPSIUnc,
      _o.DEpsilon,
      _o.DEpsilonUnc,
      _o.DX,
      _o.DXUnc,
      _o.DY,
      _o.DYUnc,
      _o.PolarMotionXB,
      _o.PolarMotionYB,
      _o.Ut1UTCB,
      _o.DPSIB,
      _o.DEpsilonB,
      _o.DXB,
      _o.DYB,
      _precessionNutationStd,
      _rawFileURI,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _origNetwork);
  }
}

public class Eop_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string EopDate { get; set; }
  public Eop_Abridged_polarMotionState_Enum PolarMotionState { get; set; }
  public double PolarMotionX { get; set; }
  public double PolarMotionXUnc { get; set; }
  public double PolarMotionY { get; set; }
  public double PolarMotionYUnc { get; set; }
  public Eop_Abridged_ut1UTCState_Enum Ut1UTCState { get; set; }
  public double Ut1UTC { get; set; }
  public double Ut1UTCUnc { get; set; }
  public double Lod { get; set; }
  public double LodUnc { get; set; }
  public Eop_Abridged_nutationState_Enum NutationState { get; set; }
  public double DPSI { get; set; }
  public double DPSIUnc { get; set; }
  public double DEpsilon { get; set; }
  public double DEpsilonUnc { get; set; }
  public double DX { get; set; }
  public double DXUnc { get; set; }
  public double DY { get; set; }
  public double DYUnc { get; set; }
  public double PolarMotionXB { get; set; }
  public double PolarMotionYB { get; set; }
  public double Ut1UTCB { get; set; }
  public double DPSIB { get; set; }
  public double DEpsilonB { get; set; }
  public double DXB { get; set; }
  public double DYB { get; set; }
  public string PrecessionNutationStd { get; set; }
  public string RawFileURI { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Eop_Abridged_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string OrigNetwork { get; set; }

  public Eop_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.EopDate = null;
    this.PolarMotionState = Eop_Abridged_polarMotionState_Enum.I;
    this.PolarMotionX = 0.0;
    this.PolarMotionXUnc = 0.0;
    this.PolarMotionY = 0.0;
    this.PolarMotionYUnc = 0.0;
    this.Ut1UTCState = Eop_Abridged_ut1UTCState_Enum.I;
    this.Ut1UTC = 0.0;
    this.Ut1UTCUnc = 0.0;
    this.Lod = 0.0;
    this.LodUnc = 0.0;
    this.NutationState = Eop_Abridged_nutationState_Enum.I;
    this.DPSI = 0.0;
    this.DPSIUnc = 0.0;
    this.DEpsilon = 0.0;
    this.DEpsilonUnc = 0.0;
    this.DX = 0.0;
    this.DXUnc = 0.0;
    this.DY = 0.0;
    this.DYUnc = 0.0;
    this.PolarMotionXB = 0.0;
    this.PolarMotionYB = 0.0;
    this.Ut1UTCB = 0.0;
    this.DPSIB = 0.0;
    this.DEpsilonB = 0.0;
    this.DXB = 0.0;
    this.DYB = 0.0;
    this.PrecessionNutationStd = null;
    this.RawFileURI = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Eop_Abridged_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.OrigNetwork = null;
  }
  public static Eop_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Eop_Abridged.GetRootAsEop_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Eop_Abridged.FinishEop_AbridgedBuffer(fbb, Eop_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Eop_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*EopDate*/, false)
      && verifier.VerifyField(tablePos, 10 /*PolarMotionState*/, 1 /*Eop_Abridged_polarMotionState_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*PolarMotionX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*PolarMotionXUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*PolarMotionY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*PolarMotionYUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 20 /*Ut1UTCState*/, 1 /*Eop_Abridged_ut1UTCState_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 22 /*Ut1UTC*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 24 /*Ut1UTCUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*Lod*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*LodUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*NutationState*/, 1 /*Eop_Abridged_nutationState_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 32 /*DPSI*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*DPSIUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*DEpsilon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*DEpsilonUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*DX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DXUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*DYUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*PolarMotionXB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*PolarMotionYB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*Ut1UTCB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*DPSIB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*DEpsilonB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*DXB*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*DYB*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*PrecessionNutationStd*/, false)
      && verifier.VerifyString(tablePos, 64 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 66 /*Source*/, false)
      && verifier.VerifyString(tablePos, 68 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 70 /*DataMode*/, 1 /*Eop_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
