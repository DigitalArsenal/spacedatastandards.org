// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
public struct GroundImagery_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static GroundImagery_Ingest GetRootAsGroundImagery_Ingest(ByteBuffer _bb) { return GetRootAsGroundImagery_Ingest(_bb, new GroundImagery_Ingest()); }
  public static GroundImagery_Ingest GetRootAsGroundImagery_Ingest(ByteBuffer _bb, GroundImagery_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool GroundImagery_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "GROU"); }
  public static bool VerifyGroundImagery_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("GROU", false, GroundImagery_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GroundImagery_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GROUNDIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Optional ID of the sensor that produced this ground image.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(6); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(8); }
  /// Timestamp the image was captured/produced.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  public string ImageTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetImageTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetImageTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// Name of the image file.
  /// Example: /// Example: Example file name
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string Filename { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilenameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetFilenameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetFilenameArray() { return __p.__vector_as_array<byte>(12); }
  /// Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
  /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  public string Region { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetRegionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetRegionArray() { return __p.__vector_as_array<byte>(14); }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  public string RegionText { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionTextBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetRegionTextBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetRegionTextArray() { return __p.__vector_as_array<byte>(16); }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: Minimum length = 0, Maximum length = 65535
  public string RegionGeoJSON { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionGeoJSONBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetRegionGeoJSONBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetRegionGeoJSONArray() { return __p.__vector_as_array<byte>(18); }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Polygon
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string RegionType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRegionTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetRegionTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetRegionTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  public int RegionNDims { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  public int RegionSRid { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigSensorId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(26); }
  /// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
  /// Example: /// Example: SUBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string SubjectId { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSubjectIdBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSubjectIdBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSubjectIdArray() { return __p.__vector_as_array<byte>(28); }
  /// Optional name/description associated with this image.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string Name { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(30); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(32); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(34); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(36); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(38); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public GroundImagery_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(40); return o != 0 ? (GroundImagery_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : GroundImagery_Ingest_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(42); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(44); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(46); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of keywords for this image.
  /// Example: /// Example: ['KEYWORD1', 'KEYWORD2']
  /// Constraints: No constraints specified.
  public string Keywords(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int KeywordsLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Description and notes of the image.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Notes { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotesBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetNotesBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetNotesArray() { return __p.__vector_as_array<byte>(52); }
  /// Optional, field indicating type of image, NITF, PNG, etc.
  /// Example: /// Example: PNG
  /// Constraints: Minimum length = 1, Maximum length = 16
  public string Format { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFormatBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetFormatBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetFormatArray() { return __p.__vector_as_array<byte>(54); }
  /// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public long Filesize { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  /// Constraints: Minimum length = 1, Maximum length = 256
  public string ChecksumValue { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChecksumValueBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetChecksumValueBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetChecksumValueArray() { return __p.__vector_as_array<byte>(58); }

  public static Offset<GroundImagery_Ingest> CreateGroundImagery_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset imageTimeOffset = default(StringOffset),
      StringOffset filenameOffset = default(StringOffset),
      StringOffset regionOffset = default(StringOffset),
      StringOffset regionTextOffset = default(StringOffset),
      StringOffset regionGeoJSONOffset = default(StringOffset),
      StringOffset regionTypeOffset = default(StringOffset),
      int regionNDims = 0,
      int regionSRid = 0,
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset subjectIdOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      GroundImagery_Ingest_dataMode_Enum dataMode = GroundImagery_Ingest_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      VectorOffset keywordsOffset = default(VectorOffset),
      StringOffset notesOffset = default(StringOffset),
      StringOffset formatOffset = default(StringOffset),
      long filesize = 0,
      StringOffset checksumValueOffset = default(StringOffset)) {
    builder.StartTable(28);
    GroundImagery_Ingest.AddFilesize(builder, filesize);
    GroundImagery_Ingest.AddChecksumValue(builder, checksumValueOffset);
    GroundImagery_Ingest.AddFormat(builder, formatOffset);
    GroundImagery_Ingest.AddNotes(builder, notesOffset);
    GroundImagery_Ingest.AddKeywords(builder, keywordsOffset);
    GroundImagery_Ingest.AddTags(builder, tagsOffset);
    GroundImagery_Ingest.AddTransactionId(builder, transactionIdOffset);
    GroundImagery_Ingest.AddCreatedBy(builder, createdByOffset);
    GroundImagery_Ingest.AddCreatedAt(builder, createdAtOffset);
    GroundImagery_Ingest.AddSourceDL(builder, sourceDLOffset);
    GroundImagery_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    GroundImagery_Ingest.AddOrigin(builder, originOffset);
    GroundImagery_Ingest.AddSource(builder, sourceOffset);
    GroundImagery_Ingest.AddName(builder, nameOffset);
    GroundImagery_Ingest.AddSubjectId(builder, subjectIdOffset);
    GroundImagery_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    GroundImagery_Ingest.AddRegionSRid(builder, regionSRid);
    GroundImagery_Ingest.AddRegionNDims(builder, regionNDims);
    GroundImagery_Ingest.AddRegionType(builder, regionTypeOffset);
    GroundImagery_Ingest.AddRegionGeoJSON(builder, regionGeoJSONOffset);
    GroundImagery_Ingest.AddRegionText(builder, regionTextOffset);
    GroundImagery_Ingest.AddRegion(builder, regionOffset);
    GroundImagery_Ingest.AddFilename(builder, filenameOffset);
    GroundImagery_Ingest.AddImageTime(builder, imageTimeOffset);
    GroundImagery_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    GroundImagery_Ingest.AddIdSensor(builder, idSensorOffset);
    GroundImagery_Ingest.AddId(builder, idOffset);
    GroundImagery_Ingest.AddDataMode(builder, dataMode);
    return GroundImagery_Ingest.EndGroundImagery_Ingest(builder);
  }

  public static void StartGroundImagery_Ingest(FlatBufferBuilder builder) { builder.StartTable(28); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(1, idSensorOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(2, classificationMarkingOffset.Value, 0); }
  public static void AddImageTime(FlatBufferBuilder builder, StringOffset imageTimeOffset) { builder.AddOffset(3, imageTimeOffset.Value, 0); }
  public static void AddFilename(FlatBufferBuilder builder, StringOffset filenameOffset) { builder.AddOffset(4, filenameOffset.Value, 0); }
  public static void AddRegion(FlatBufferBuilder builder, StringOffset regionOffset) { builder.AddOffset(5, regionOffset.Value, 0); }
  public static void AddRegionText(FlatBufferBuilder builder, StringOffset regionTextOffset) { builder.AddOffset(6, regionTextOffset.Value, 0); }
  public static void AddRegionGeoJSON(FlatBufferBuilder builder, StringOffset regionGeoJSONOffset) { builder.AddOffset(7, regionGeoJSONOffset.Value, 0); }
  public static void AddRegionType(FlatBufferBuilder builder, StringOffset regionTypeOffset) { builder.AddOffset(8, regionTypeOffset.Value, 0); }
  public static void AddRegionNDims(FlatBufferBuilder builder, int regionNDims) { builder.AddInt(9, regionNDims, 0); }
  public static void AddRegionSRid(FlatBufferBuilder builder, int regionSRid) { builder.AddInt(10, regionSRid, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(11, origSensorIdOffset.Value, 0); }
  public static void AddSubjectId(FlatBufferBuilder builder, StringOffset subjectIdOffset) { builder.AddOffset(12, subjectIdOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(13, nameOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(14, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(15, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(16, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(17, sourceDLOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, GroundImagery_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(18, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(19, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(20, createdByOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(21, transactionIdOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(22, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKeywords(FlatBufferBuilder builder, VectorOffset keywordsOffset) { builder.AddOffset(23, keywordsOffset.Value, 0); }
  public static VectorOffset CreateKeywordsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateKeywordsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeywordsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateKeywordsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartKeywordsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNotes(FlatBufferBuilder builder, StringOffset notesOffset) { builder.AddOffset(24, notesOffset.Value, 0); }
  public static void AddFormat(FlatBufferBuilder builder, StringOffset formatOffset) { builder.AddOffset(25, formatOffset.Value, 0); }
  public static void AddFilesize(FlatBufferBuilder builder, long filesize) { builder.AddLong(26, filesize, 0); }
  public static void AddChecksumValue(FlatBufferBuilder builder, StringOffset checksumValueOffset) { builder.AddOffset(27, checksumValueOffset.Value, 0); }
  public static Offset<GroundImagery_Ingest> EndGroundImagery_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GroundImagery_Ingest>(o);
  }
  public static void FinishGroundImagery_IngestBuffer(FlatBufferBuilder builder, Offset<GroundImagery_Ingest> offset) { builder.Finish(offset.Value, "GROU"); }
  public static void FinishSizePrefixedGroundImagery_IngestBuffer(FlatBufferBuilder builder, Offset<GroundImagery_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "GROU"); }
  public GroundImagery_IngestT UnPack() {
    var _o = new GroundImagery_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(GroundImagery_IngestT _o) {
    _o.Id = this.Id;
    _o.IdSensor = this.IdSensor;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ImageTime = this.ImageTime;
    _o.Filename = this.Filename;
    _o.Region = this.Region;
    _o.RegionText = this.RegionText;
    _o.RegionGeoJSON = this.RegionGeoJSON;
    _o.RegionType = this.RegionType;
    _o.RegionNDims = this.RegionNDims;
    _o.RegionSRid = this.RegionSRid;
    _o.OrigSensorId = this.OrigSensorId;
    _o.SubjectId = this.SubjectId;
    _o.Name = this.Name;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.TransactionId = this.TransactionId;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Keywords = new List<string>();
    for (var _j = 0; _j < this.KeywordsLength; ++_j) {_o.Keywords.Add(this.Keywords(_j));}
    _o.Notes = this.Notes;
    _o.Format = this.Format;
    _o.Filesize = this.Filesize;
    _o.ChecksumValue = this.ChecksumValue;
  }
  public static Offset<GroundImagery_Ingest> Pack(FlatBufferBuilder builder, GroundImagery_IngestT _o) {
    if (_o == null) return default(Offset<GroundImagery_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _imageTime = _o.ImageTime == null ? default(StringOffset) : builder.CreateString(_o.ImageTime);
    var _filename = _o.Filename == null ? default(StringOffset) : builder.CreateString(_o.Filename);
    var _region = _o.Region == null ? default(StringOffset) : builder.CreateString(_o.Region);
    var _regionText = _o.RegionText == null ? default(StringOffset) : builder.CreateString(_o.RegionText);
    var _regionGeoJSON = _o.RegionGeoJSON == null ? default(StringOffset) : builder.CreateString(_o.RegionGeoJSON);
    var _regionType = _o.RegionType == null ? default(StringOffset) : builder.CreateString(_o.RegionType);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _subjectId = _o.SubjectId == null ? default(StringOffset) : builder.CreateString(_o.SubjectId);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _keywords = default(VectorOffset);
    if (_o.Keywords != null) {
      var __keywords = new StringOffset[_o.Keywords.Count];
      for (var _j = 0; _j < __keywords.Length; ++_j) { __keywords[_j] = builder.CreateString(_o.Keywords[_j]); }
      _keywords = CreateKeywordsVector(builder, __keywords);
    }
    var _notes = _o.Notes == null ? default(StringOffset) : builder.CreateString(_o.Notes);
    var _format = _o.Format == null ? default(StringOffset) : builder.CreateString(_o.Format);
    var _checksumValue = _o.ChecksumValue == null ? default(StringOffset) : builder.CreateString(_o.ChecksumValue);
    return CreateGroundImagery_Ingest(
      builder,
      _id,
      _idSensor,
      _classificationMarking,
      _imageTime,
      _filename,
      _region,
      _regionText,
      _regionGeoJSON,
      _regionType,
      _o.RegionNDims,
      _o.RegionSRid,
      _origSensorId,
      _subjectId,
      _name,
      _source,
      _origin,
      _origNetwork,
      _sourceDL,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _transactionId,
      _tags,
      _keywords,
      _notes,
      _format,
      _o.Filesize,
      _checksumValue);
  }
}

public class GroundImagery_IngestT
{
  public string Id { get; set; }
  public string IdSensor { get; set; }
  public string ClassificationMarking { get; set; }
  public string ImageTime { get; set; }
  public string Filename { get; set; }
  public string Region { get; set; }
  public string RegionText { get; set; }
  public string RegionGeoJSON { get; set; }
  public string RegionType { get; set; }
  public int RegionNDims { get; set; }
  public int RegionSRid { get; set; }
  public string OrigSensorId { get; set; }
  public string SubjectId { get; set; }
  public string Name { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public GroundImagery_Ingest_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string TransactionId { get; set; }
  public List<string> Tags { get; set; }
  public List<string> Keywords { get; set; }
  public string Notes { get; set; }
  public string Format { get; set; }
  public long Filesize { get; set; }
  public string ChecksumValue { get; set; }

  public GroundImagery_IngestT() {
    this.Id = null;
    this.IdSensor = null;
    this.ClassificationMarking = null;
    this.ImageTime = null;
    this.Filename = null;
    this.Region = null;
    this.RegionText = null;
    this.RegionGeoJSON = null;
    this.RegionType = null;
    this.RegionNDims = 0;
    this.RegionSRid = 0;
    this.OrigSensorId = null;
    this.SubjectId = null;
    this.Name = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.DataMode = GroundImagery_Ingest_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.TransactionId = null;
    this.Tags = null;
    this.Keywords = null;
    this.Notes = null;
    this.Format = null;
    this.Filesize = 0;
    this.ChecksumValue = null;
  }
  public static GroundImagery_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return GroundImagery_Ingest.GetRootAsGroundImagery_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    GroundImagery_Ingest.FinishGroundImagery_IngestBuffer(fbb, GroundImagery_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class GroundImagery_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 8 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 10 /*ImageTime*/, false)
      && verifier.VerifyString(tablePos, 12 /*Filename*/, false)
      && verifier.VerifyString(tablePos, 14 /*Region*/, false)
      && verifier.VerifyString(tablePos, 16 /*RegionText*/, false)
      && verifier.VerifyString(tablePos, 18 /*RegionGeoJSON*/, false)
      && verifier.VerifyString(tablePos, 20 /*RegionType*/, false)
      && verifier.VerifyField(tablePos, 22 /*RegionNDims*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*RegionSRid*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 28 /*SubjectId*/, false)
      && verifier.VerifyString(tablePos, 30 /*Name*/, false)
      && verifier.VerifyString(tablePos, 32 /*Source*/, false)
      && verifier.VerifyString(tablePos, 34 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 36 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 38 /*SourceDL*/, false)
      && verifier.VerifyField(tablePos, 40 /*DataMode*/, 1 /*GroundImagery_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 42 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 44 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 46 /*TransactionId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*Tags*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*Keywords*/, false)
      && verifier.VerifyString(tablePos, 52 /*Notes*/, false)
      && verifier.VerifyString(tablePos, 54 /*Format*/, false)
      && verifier.VerifyField(tablePos, 56 /*Filesize*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 58 /*ChecksumValue*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
