// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Provides a means of sending Basic Character Set alphanumeric text messages.
public struct MtiFreeText_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MtiFreeText_Ingest GetRootAsMtiFreeText_Ingest(ByteBuffer _bb) { return GetRootAsMtiFreeText_Ingest(_bb, new MtiFreeText_Ingest()); }
  public static MtiFreeText_Ingest GetRootAsMtiFreeText_Ingest(ByteBuffer _bb, MtiFreeText_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool MtiFreeText_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MTIF"); }
  public static bool VerifyMtiFreeText_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MTIF", false, MtiFreeText_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MtiFreeText_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The originator of the Free Text message.
  /// Example: /// Example: ORIGINATOR
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string F1 { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetF1Bytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetF1Bytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetF1Array() { return __p.__vector_as_array<byte>(4); }
  /// The recipient for which the Free Text message is intended.
  /// Example: /// Example: RECIPIENT
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string F2 { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetF2Bytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetF2Bytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetF2Array() { return __p.__vector_as_array<byte>(6); }
  /// Free text data message.
  /// Example: /// Example: TEXT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string F3 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetF3Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetF3Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetF3Array() { return __p.__vector_as_array<byte>(8); }

  public static Offset<MtiFreeText_Ingest> CreateMtiFreeText_Ingest(FlatBufferBuilder builder,
      StringOffset f1Offset = default(StringOffset),
      StringOffset f2Offset = default(StringOffset),
      StringOffset f3Offset = default(StringOffset)) {
    builder.StartTable(3);
    MtiFreeText_Ingest.AddF3(builder, f3Offset);
    MtiFreeText_Ingest.AddF2(builder, f2Offset);
    MtiFreeText_Ingest.AddF1(builder, f1Offset);
    return MtiFreeText_Ingest.EndMtiFreeText_Ingest(builder);
  }

  public static void StartMtiFreeText_Ingest(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddF1(FlatBufferBuilder builder, StringOffset f1Offset) { builder.AddOffset(0, f1Offset.Value, 0); }
  public static void AddF2(FlatBufferBuilder builder, StringOffset f2Offset) { builder.AddOffset(1, f2Offset.Value, 0); }
  public static void AddF3(FlatBufferBuilder builder, StringOffset f3Offset) { builder.AddOffset(2, f3Offset.Value, 0); }
  public static Offset<MtiFreeText_Ingest> EndMtiFreeText_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MtiFreeText_Ingest>(o);
  }
  public static void FinishMtiFreeText_IngestBuffer(FlatBufferBuilder builder, Offset<MtiFreeText_Ingest> offset) { builder.Finish(offset.Value, "MTIF"); }
  public static void FinishSizePrefixedMtiFreeText_IngestBuffer(FlatBufferBuilder builder, Offset<MtiFreeText_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "MTIF"); }
  public MtiFreeText_IngestT UnPack() {
    var _o = new MtiFreeText_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MtiFreeText_IngestT _o) {
    _o.F1 = this.F1;
    _o.F2 = this.F2;
    _o.F3 = this.F3;
  }
  public static Offset<MtiFreeText_Ingest> Pack(FlatBufferBuilder builder, MtiFreeText_IngestT _o) {
    if (_o == null) return default(Offset<MtiFreeText_Ingest>);
    var _f1 = _o.F1 == null ? default(StringOffset) : builder.CreateString(_o.F1);
    var _f2 = _o.F2 == null ? default(StringOffset) : builder.CreateString(_o.F2);
    var _f3 = _o.F3 == null ? default(StringOffset) : builder.CreateString(_o.F3);
    return CreateMtiFreeText_Ingest(
      builder,
      _f1,
      _f2,
      _f3);
  }
}

public class MtiFreeText_IngestT
{
  public string F1 { get; set; }
  public string F2 { get; set; }
  public string F3 { get; set; }

  public MtiFreeText_IngestT() {
    this.F1 = null;
    this.F2 = null;
    this.F3 = null;
  }
  public static MtiFreeText_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return MtiFreeText_Ingest.GetRootAsMtiFreeText_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MtiFreeText_Ingest.FinishMtiFreeText_IngestBuffer(fbb, MtiFreeText_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MtiFreeText_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*F1*/, false)
      && verifier.VerifyString(tablePos, 6 /*F2*/, false)
      && verifier.VerifyString(tablePos, 8 /*F3*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
