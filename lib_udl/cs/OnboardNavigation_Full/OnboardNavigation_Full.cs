// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
public struct OnboardNavigation_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OnboardNavigation_Full GetRootAsOnboardNavigation_Full(ByteBuffer _bb) { return GetRootAsOnboardNavigation_Full(_bb, new OnboardNavigation_Full()); }
  public static OnboardNavigation_Full GetRootAsOnboardNavigation_Full(ByteBuffer _bb, OnboardNavigation_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool OnboardNavigation_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ONBO"); }
  public static bool VerifyOnboardNavigation_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ONBO", false, OnboardNavigation_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OnboardNavigation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONBOARD-NAVIGATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(8); }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(12); }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string OrigObjectId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(14); }
  /// Start time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// End time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
  /// Example: /// Example: EPHEMERISSET-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string EsId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEsIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetEsIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetEsIdArray() { return __p.__vector_as_array<byte>(20); }
  /// The name or identifier the star catalog in use.
  /// Example: /// Example: STAR-CAT-NAME
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string StarCatName { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStarCatNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetStarCatNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetStarCatNameArray() { return __p.__vector_as_array<byte>(22); }
  /// The last load time of the current star catalog onboard this spacecraft.
  /// Example: /// Example: 2021-07-21T01:02:03.123Z
  /// Constraints: No constraints specified.
  public string StarCatLoadTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStarCatLoadTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetStarCatLoadTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetStarCatLoadTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// Unique identifier of the last onboard state vector.
  /// Example: /// Example: STATE-VECTOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdStateVector { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdStateVectorBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetIdStateVectorBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetIdStateVectorArray() { return __p.__vector_as_array<byte>(26); }
  /// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
  /// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
  /// Constraints: No constraints specified.
  public string Ts(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public OnboardNavigation_Full_referenceFrame_Enum ReferenceFrame { get { int o = __p.__offset(30); return o != 0 ? (OnboardNavigation_Full_referenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnboardNavigation_Full_referenceFrame_Enum.J2000; } }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  public string SunSensor(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SunSensorLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  public string Mag(int j) { int o = __p.__offset(34); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MagLength { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  public string StarTracker(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StarTrackerLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  public string DeltaPos(int j) { int o = __p.__offset(38); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DeltaPosLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(40); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(42); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(44); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(46); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(48); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 36
  public OnboardNavigation_Full_dataMode_Enum DataMode { get { int o = __p.__offset(50); return o != 0 ? (OnboardNavigation_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnboardNavigation_Full_dataMode_Enum.REAL; } }

  public static Offset<OnboardNavigation_Full> CreateOnboardNavigation_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      int satNo = 0,
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset esIdOffset = default(StringOffset),
      StringOffset starCatNameOffset = default(StringOffset),
      StringOffset starCatLoadTimeOffset = default(StringOffset),
      StringOffset idStateVectorOffset = default(StringOffset),
      VectorOffset tsOffset = default(VectorOffset),
      OnboardNavigation_Full_referenceFrame_Enum referenceFrame = OnboardNavigation_Full_referenceFrame_Enum.J2000,
      VectorOffset sunSensorOffset = default(VectorOffset),
      VectorOffset magOffset = default(VectorOffset),
      VectorOffset starTrackerOffset = default(VectorOffset),
      VectorOffset deltaPosOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      OnboardNavigation_Full_dataMode_Enum dataMode = OnboardNavigation_Full_dataMode_Enum.REAL) {
    builder.StartTable(24);
    OnboardNavigation_Full.AddOrigNetwork(builder, origNetworkOffset);
    OnboardNavigation_Full.AddOrigin(builder, originOffset);
    OnboardNavigation_Full.AddSource(builder, sourceOffset);
    OnboardNavigation_Full.AddCreatedBy(builder, createdByOffset);
    OnboardNavigation_Full.AddCreatedAt(builder, createdAtOffset);
    OnboardNavigation_Full.AddDeltaPos(builder, deltaPosOffset);
    OnboardNavigation_Full.AddStarTracker(builder, starTrackerOffset);
    OnboardNavigation_Full.AddMag(builder, magOffset);
    OnboardNavigation_Full.AddSunSensor(builder, sunSensorOffset);
    OnboardNavigation_Full.AddTs(builder, tsOffset);
    OnboardNavigation_Full.AddIdStateVector(builder, idStateVectorOffset);
    OnboardNavigation_Full.AddStarCatLoadTime(builder, starCatLoadTimeOffset);
    OnboardNavigation_Full.AddStarCatName(builder, starCatNameOffset);
    OnboardNavigation_Full.AddEsId(builder, esIdOffset);
    OnboardNavigation_Full.AddEndTime(builder, endTimeOffset);
    OnboardNavigation_Full.AddStartTime(builder, startTimeOffset);
    OnboardNavigation_Full.AddOrigObjectId(builder, origObjectIdOffset);
    OnboardNavigation_Full.AddOnOrbit(builder, onOrbitOffset);
    OnboardNavigation_Full.AddSatNo(builder, satNo);
    OnboardNavigation_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    OnboardNavigation_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    OnboardNavigation_Full.AddId(builder, idOffset);
    OnboardNavigation_Full.AddDataMode(builder, dataMode);
    OnboardNavigation_Full.AddReferenceFrame(builder, referenceFrame);
    return OnboardNavigation_Full.EndOnboardNavigation_Full(builder);
  }

  public static void StartOnboardNavigation_Full(FlatBufferBuilder builder) { builder.StartTable(24); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(2, idOnOrbitOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(3, satNo, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(4, onOrbitOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(5, origObjectIdOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(6, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(7, endTimeOffset.Value, 0); }
  public static void AddEsId(FlatBufferBuilder builder, StringOffset esIdOffset) { builder.AddOffset(8, esIdOffset.Value, 0); }
  public static void AddStarCatName(FlatBufferBuilder builder, StringOffset starCatNameOffset) { builder.AddOffset(9, starCatNameOffset.Value, 0); }
  public static void AddStarCatLoadTime(FlatBufferBuilder builder, StringOffset starCatLoadTimeOffset) { builder.AddOffset(10, starCatLoadTimeOffset.Value, 0); }
  public static void AddIdStateVector(FlatBufferBuilder builder, StringOffset idStateVectorOffset) { builder.AddOffset(11, idStateVectorOffset.Value, 0); }
  public static void AddTs(FlatBufferBuilder builder, VectorOffset tsOffset) { builder.AddOffset(12, tsOffset.Value, 0); }
  public static VectorOffset CreateTsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReferenceFrame(FlatBufferBuilder builder, OnboardNavigation_Full_referenceFrame_Enum referenceFrame) { builder.AddSbyte(13, (sbyte)referenceFrame, 0); }
  public static void AddSunSensor(FlatBufferBuilder builder, VectorOffset sunSensorOffset) { builder.AddOffset(14, sunSensorOffset.Value, 0); }
  public static VectorOffset CreateSunSensorVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSunSensorVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSunSensorVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSunSensorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSunSensorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMag(FlatBufferBuilder builder, VectorOffset magOffset) { builder.AddOffset(15, magOffset.Value, 0); }
  public static VectorOffset CreateMagVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMagVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMagVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMagVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMagVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarTracker(FlatBufferBuilder builder, VectorOffset starTrackerOffset) { builder.AddOffset(16, starTrackerOffset.Value, 0); }
  public static VectorOffset CreateStarTrackerVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStarTrackerVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarTrackerVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateStarTrackerVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartStarTrackerVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDeltaPos(FlatBufferBuilder builder, VectorOffset deltaPosOffset) { builder.AddOffset(17, deltaPosOffset.Value, 0); }
  public static VectorOffset CreateDeltaPosVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeltaPosVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaPosVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDeltaPosVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDeltaPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(18, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(19, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(20, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(21, originOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(22, origNetworkOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OnboardNavigation_Full_dataMode_Enum dataMode) { builder.AddSbyte(23, (sbyte)dataMode, 0); }
  public static Offset<OnboardNavigation_Full> EndOnboardNavigation_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OnboardNavigation_Full>(o);
  }
  public static void FinishOnboardNavigation_FullBuffer(FlatBufferBuilder builder, Offset<OnboardNavigation_Full> offset) { builder.Finish(offset.Value, "ONBO"); }
  public static void FinishSizePrefixedOnboardNavigation_FullBuffer(FlatBufferBuilder builder, Offset<OnboardNavigation_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ONBO"); }
  public OnboardNavigation_FullT UnPack() {
    var _o = new OnboardNavigation_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OnboardNavigation_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.SatNo = this.SatNo;
    _o.OnOrbit = this.OnOrbit;
    _o.OrigObjectId = this.OrigObjectId;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.EsId = this.EsId;
    _o.StarCatName = this.StarCatName;
    _o.StarCatLoadTime = this.StarCatLoadTime;
    _o.IdStateVector = this.IdStateVector;
    _o.Ts = new List<string>();
    for (var _j = 0; _j < this.TsLength; ++_j) {_o.Ts.Add(this.Ts(_j));}
    _o.ReferenceFrame = this.ReferenceFrame;
    _o.SunSensor = new List<string>();
    for (var _j = 0; _j < this.SunSensorLength; ++_j) {_o.SunSensor.Add(this.SunSensor(_j));}
    _o.Mag = new List<string>();
    for (var _j = 0; _j < this.MagLength; ++_j) {_o.Mag.Add(this.Mag(_j));}
    _o.StarTracker = new List<string>();
    for (var _j = 0; _j < this.StarTrackerLength; ++_j) {_o.StarTracker.Add(this.StarTracker(_j));}
    _o.DeltaPos = new List<string>();
    for (var _j = 0; _j < this.DeltaPosLength; ++_j) {_o.DeltaPos.Add(this.DeltaPos(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.OrigNetwork = this.OrigNetwork;
    _o.DataMode = this.DataMode;
  }
  public static Offset<OnboardNavigation_Full> Pack(FlatBufferBuilder builder, OnboardNavigation_FullT _o) {
    if (_o == null) return default(Offset<OnboardNavigation_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _esId = _o.EsId == null ? default(StringOffset) : builder.CreateString(_o.EsId);
    var _starCatName = _o.StarCatName == null ? default(StringOffset) : builder.CreateString(_o.StarCatName);
    var _starCatLoadTime = _o.StarCatLoadTime == null ? default(StringOffset) : builder.CreateString(_o.StarCatLoadTime);
    var _idStateVector = _o.IdStateVector == null ? default(StringOffset) : builder.CreateString(_o.IdStateVector);
    var _ts = default(VectorOffset);
    if (_o.Ts != null) {
      var __ts = new StringOffset[_o.Ts.Count];
      for (var _j = 0; _j < __ts.Length; ++_j) { __ts[_j] = builder.CreateString(_o.Ts[_j]); }
      _ts = CreateTsVector(builder, __ts);
    }
    var _sunSensor = default(VectorOffset);
    if (_o.SunSensor != null) {
      var __sunSensor = new StringOffset[_o.SunSensor.Count];
      for (var _j = 0; _j < __sunSensor.Length; ++_j) { __sunSensor[_j] = builder.CreateString(_o.SunSensor[_j]); }
      _sunSensor = CreateSunSensorVector(builder, __sunSensor);
    }
    var _mag = default(VectorOffset);
    if (_o.Mag != null) {
      var __mag = new StringOffset[_o.Mag.Count];
      for (var _j = 0; _j < __mag.Length; ++_j) { __mag[_j] = builder.CreateString(_o.Mag[_j]); }
      _mag = CreateMagVector(builder, __mag);
    }
    var _starTracker = default(VectorOffset);
    if (_o.StarTracker != null) {
      var __starTracker = new StringOffset[_o.StarTracker.Count];
      for (var _j = 0; _j < __starTracker.Length; ++_j) { __starTracker[_j] = builder.CreateString(_o.StarTracker[_j]); }
      _starTracker = CreateStarTrackerVector(builder, __starTracker);
    }
    var _deltaPos = default(VectorOffset);
    if (_o.DeltaPos != null) {
      var __deltaPos = new StringOffset[_o.DeltaPos.Count];
      for (var _j = 0; _j < __deltaPos.Length; ++_j) { __deltaPos[_j] = builder.CreateString(_o.DeltaPos[_j]); }
      _deltaPos = CreateDeltaPosVector(builder, __deltaPos);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnboardNavigation_Full(
      builder,
      _id,
      _classificationMarking,
      _idOnOrbit,
      _o.SatNo,
      _onOrbit,
      _origObjectId,
      _startTime,
      _endTime,
      _esId,
      _starCatName,
      _starCatLoadTime,
      _idStateVector,
      _ts,
      _o.ReferenceFrame,
      _sunSensor,
      _mag,
      _starTracker,
      _deltaPos,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _origNetwork,
      _o.DataMode);
  }
}

public class OnboardNavigation_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdOnOrbit { get; set; }
  public int SatNo { get; set; }
  public string OnOrbit { get; set; }
  public string OrigObjectId { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string EsId { get; set; }
  public string StarCatName { get; set; }
  public string StarCatLoadTime { get; set; }
  public string IdStateVector { get; set; }
  public List<string> Ts { get; set; }
  public OnboardNavigation_Full_referenceFrame_Enum ReferenceFrame { get; set; }
  public List<string> SunSensor { get; set; }
  public List<string> Mag { get; set; }
  public List<string> StarTracker { get; set; }
  public List<string> DeltaPos { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public string OrigNetwork { get; set; }
  public OnboardNavigation_Full_dataMode_Enum DataMode { get; set; }

  public OnboardNavigation_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdOnOrbit = null;
    this.SatNo = 0;
    this.OnOrbit = null;
    this.OrigObjectId = null;
    this.StartTime = null;
    this.EndTime = null;
    this.EsId = null;
    this.StarCatName = null;
    this.StarCatLoadTime = null;
    this.IdStateVector = null;
    this.Ts = null;
    this.ReferenceFrame = OnboardNavigation_Full_referenceFrame_Enum.J2000;
    this.SunSensor = null;
    this.Mag = null;
    this.StarTracker = null;
    this.DeltaPos = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.OrigNetwork = null;
    this.DataMode = OnboardNavigation_Full_dataMode_Enum.REAL;
  }
  public static OnboardNavigation_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return OnboardNavigation_Full.GetRootAsOnboardNavigation_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    OnboardNavigation_Full.FinishOnboardNavigation_FullBuffer(fbb, OnboardNavigation_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class OnboardNavigation_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdOnOrbit*/, false)
      && verifier.VerifyField(tablePos, 10 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 12 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 14 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 16 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*EsId*/, false)
      && verifier.VerifyString(tablePos, 22 /*StarCatName*/, false)
      && verifier.VerifyString(tablePos, 24 /*StarCatLoadTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*IdStateVector*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*Ts*/, false)
      && verifier.VerifyField(tablePos, 30 /*ReferenceFrame*/, 1 /*OnboardNavigation_Full_referenceFrame_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*SunSensor*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 34 /*Mag*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*StarTracker*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 38 /*DeltaPos*/, false)
      && verifier.VerifyString(tablePos, 40 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 42 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 44 /*Source*/, false)
      && verifier.VerifyString(tablePos, 46 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 48 /*OrigNetwork*/, false)
      && verifier.VerifyField(tablePos, 50 /*DataMode*/, 1 /*OnboardNavigation_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
