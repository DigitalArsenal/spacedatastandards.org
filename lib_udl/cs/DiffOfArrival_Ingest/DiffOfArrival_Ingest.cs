// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
public struct DiffOfArrival_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DiffOfArrival_Ingest GetRootAsDiffOfArrival_Ingest(ByteBuffer _bb) { return GetRootAsDiffOfArrival_Ingest(_bb, new DiffOfArrival_Ingest()); }
  public static DiffOfArrival_Ingest GetRootAsDiffOfArrival_Ingest(ByteBuffer _bb, DiffOfArrival_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DiffOfArrival_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DIFF"); }
  public static bool VerifyDiffOfArrival_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DIFF", false, DiffOfArrival_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DiffOfArrival_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: DIFFOFARRIVAL-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(10); }
  /// Sensor ID of the primary/1st sensor used for this measurement.
  /// Example: /// Example: SENSOR1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor1 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensor1Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdSensor1Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdSensor1Array() { return __p.__vector_as_array<byte>(12); }
  /// Sensor ID of the secondary/2nd sensor used for this measurement.
  /// Example: /// Example: SENSOR2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor2 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensor2Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSensor2Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSensor2Array() { return __p.__vector_as_array<byte>(14); }
  /// Catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(18); }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR1-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId1 { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorId1Bytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorId1Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetOrigSensorId1Array() { return __p.__vector_as_array<byte>(22); }
  /// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR2-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId2 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorId2Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorId2Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetOrigSensorId2Array() { return __p.__vector_as_array<byte>(24); }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The signal arrival delay relative to sensor 1 in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sensor1Delay { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The signal arrival delay relative to sensor 2 in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sensor2Delay { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 120.1
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sen2lat { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sen2lon { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Sen2alt { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Center frequency of the collect in Hz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Frequency { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Bandwidth of the signal in Hz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Bandwidth { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeltaRange { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in delta range, in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeltaRangeUnc { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeltaRangeRate { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the delta range rate, in km/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeltaRangeRateUnc { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Snr { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Tdoa { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double TdoaUnc { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Fdoa { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double FdoaUnc { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  /// Example: /// Example: SURVEY
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string CollectionMode { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectionModeBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetCollectionModeBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetCollectionModeArray() { return __p.__vector_as_array<byte>(66); }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(68); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(68, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(68); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(68); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(70); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public DiffOfArrival_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(72); return o != 0 ? (DiffOfArrival_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : DiffOfArrival_Ingest_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(74); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(74); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(76); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(78); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(80); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(82); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(82, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(82); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(82); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(84); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(84, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(84); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(84); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(86); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(86, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(86); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(86); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(88); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(88, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(88); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(88); }

  public static Offset<DiffOfArrival_Ingest> CreateDiffOfArrival_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSensor1Offset = default(StringOffset),
      StringOffset idSensor2Offset = default(StringOffset),
      int satNo = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset origSensorId1Offset = default(StringOffset),
      StringOffset origSensorId2Offset = default(StringOffset),
      bool uct = false,
      double sensor1Delay = 0.0,
      double sensor2Delay = 0.0,
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      double sen2lat = 0.0,
      double sen2lon = 0.0,
      double sen2alt = 0.0,
      double frequency = 0.0,
      double bandwidth = 0.0,
      double deltaRange = 0.0,
      double deltaRangeUnc = 0.0,
      double deltaRangeRate = 0.0,
      double deltaRangeRateUnc = 0.0,
      double snr = 0.0,
      double tdoa = 0.0,
      double tdoaUnc = 0.0,
      double fdoa = 0.0,
      double fdoaUnc = 0.0,
      StringOffset collectionModeOffset = default(StringOffset),
      StringOffset rawFileURIOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      DiffOfArrival_Ingest_dataMode_Enum dataMode = DiffOfArrival_Ingest_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset originOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset)) {
    builder.StartTable(43);
    DiffOfArrival_Ingest.AddFdoaUnc(builder, fdoaUnc);
    DiffOfArrival_Ingest.AddFdoa(builder, fdoa);
    DiffOfArrival_Ingest.AddTdoaUnc(builder, tdoaUnc);
    DiffOfArrival_Ingest.AddTdoa(builder, tdoa);
    DiffOfArrival_Ingest.AddSnr(builder, snr);
    DiffOfArrival_Ingest.AddDeltaRangeRateUnc(builder, deltaRangeRateUnc);
    DiffOfArrival_Ingest.AddDeltaRangeRate(builder, deltaRangeRate);
    DiffOfArrival_Ingest.AddDeltaRangeUnc(builder, deltaRangeUnc);
    DiffOfArrival_Ingest.AddDeltaRange(builder, deltaRange);
    DiffOfArrival_Ingest.AddBandwidth(builder, bandwidth);
    DiffOfArrival_Ingest.AddFrequency(builder, frequency);
    DiffOfArrival_Ingest.AddSen2alt(builder, sen2alt);
    DiffOfArrival_Ingest.AddSen2lon(builder, sen2lon);
    DiffOfArrival_Ingest.AddSen2lat(builder, sen2lat);
    DiffOfArrival_Ingest.AddSenalt(builder, senalt);
    DiffOfArrival_Ingest.AddSenlon(builder, senlon);
    DiffOfArrival_Ingest.AddSenlat(builder, senlat);
    DiffOfArrival_Ingest.AddSensor2Delay(builder, sensor2Delay);
    DiffOfArrival_Ingest.AddSensor1Delay(builder, sensor1Delay);
    DiffOfArrival_Ingest.AddSourceDL(builder, sourceDLOffset);
    DiffOfArrival_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    DiffOfArrival_Ingest.AddTransactionId(builder, transactionIdOffset);
    DiffOfArrival_Ingest.AddDescriptor(builder, descriptorOffset);
    DiffOfArrival_Ingest.AddCreatedBy(builder, createdByOffset);
    DiffOfArrival_Ingest.AddCreatedAt(builder, createdAtOffset);
    DiffOfArrival_Ingest.AddOrigin(builder, originOffset);
    DiffOfArrival_Ingest.AddTags(builder, tagsOffset);
    DiffOfArrival_Ingest.AddSource(builder, sourceOffset);
    DiffOfArrival_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    DiffOfArrival_Ingest.AddCollectionMode(builder, collectionModeOffset);
    DiffOfArrival_Ingest.AddOrigSensorId2(builder, origSensorId2Offset);
    DiffOfArrival_Ingest.AddOrigSensorId1(builder, origSensorId1Offset);
    DiffOfArrival_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    DiffOfArrival_Ingest.AddTaskId(builder, taskIdOffset);
    DiffOfArrival_Ingest.AddSatNo(builder, satNo);
    DiffOfArrival_Ingest.AddIdSensor2(builder, idSensor2Offset);
    DiffOfArrival_Ingest.AddIdSensor1(builder, idSensor1Offset);
    DiffOfArrival_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    DiffOfArrival_Ingest.AddObTime(builder, obTimeOffset);
    DiffOfArrival_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    DiffOfArrival_Ingest.AddId(builder, idOffset);
    DiffOfArrival_Ingest.AddDataMode(builder, dataMode);
    DiffOfArrival_Ingest.AddUct(builder, uct);
    return DiffOfArrival_Ingest.EndDiffOfArrival_Ingest(builder);
  }

  public static void StartDiffOfArrival_Ingest(FlatBufferBuilder builder) { builder.StartTable(43); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(3, idOnOrbitOffset.Value, 0); }
  public static void AddIdSensor1(FlatBufferBuilder builder, StringOffset idSensor1Offset) { builder.AddOffset(4, idSensor1Offset.Value, 0); }
  public static void AddIdSensor2(FlatBufferBuilder builder, StringOffset idSensor2Offset) { builder.AddOffset(5, idSensor2Offset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(6, satNo, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(7, taskIdOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(8, origObjectIdOffset.Value, 0); }
  public static void AddOrigSensorId1(FlatBufferBuilder builder, StringOffset origSensorId1Offset) { builder.AddOffset(9, origSensorId1Offset.Value, 0); }
  public static void AddOrigSensorId2(FlatBufferBuilder builder, StringOffset origSensorId2Offset) { builder.AddOffset(10, origSensorId2Offset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(11, uct, false); }
  public static void AddSensor1Delay(FlatBufferBuilder builder, double sensor1Delay) { builder.AddDouble(12, sensor1Delay, 0.0); }
  public static void AddSensor2Delay(FlatBufferBuilder builder, double sensor2Delay) { builder.AddDouble(13, sensor2Delay, 0.0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(14, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(15, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(16, senalt, 0.0); }
  public static void AddSen2lat(FlatBufferBuilder builder, double sen2lat) { builder.AddDouble(17, sen2lat, 0.0); }
  public static void AddSen2lon(FlatBufferBuilder builder, double sen2lon) { builder.AddDouble(18, sen2lon, 0.0); }
  public static void AddSen2alt(FlatBufferBuilder builder, double sen2alt) { builder.AddDouble(19, sen2alt, 0.0); }
  public static void AddFrequency(FlatBufferBuilder builder, double frequency) { builder.AddDouble(20, frequency, 0.0); }
  public static void AddBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.AddDouble(21, bandwidth, 0.0); }
  public static void AddDeltaRange(FlatBufferBuilder builder, double deltaRange) { builder.AddDouble(22, deltaRange, 0.0); }
  public static void AddDeltaRangeUnc(FlatBufferBuilder builder, double deltaRangeUnc) { builder.AddDouble(23, deltaRangeUnc, 0.0); }
  public static void AddDeltaRangeRate(FlatBufferBuilder builder, double deltaRangeRate) { builder.AddDouble(24, deltaRangeRate, 0.0); }
  public static void AddDeltaRangeRateUnc(FlatBufferBuilder builder, double deltaRangeRateUnc) { builder.AddDouble(25, deltaRangeRateUnc, 0.0); }
  public static void AddSnr(FlatBufferBuilder builder, double snr) { builder.AddDouble(26, snr, 0.0); }
  public static void AddTdoa(FlatBufferBuilder builder, double tdoa) { builder.AddDouble(27, tdoa, 0.0); }
  public static void AddTdoaUnc(FlatBufferBuilder builder, double tdoaUnc) { builder.AddDouble(28, tdoaUnc, 0.0); }
  public static void AddFdoa(FlatBufferBuilder builder, double fdoa) { builder.AddDouble(29, fdoa, 0.0); }
  public static void AddFdoaUnc(FlatBufferBuilder builder, double fdoaUnc) { builder.AddDouble(30, fdoaUnc, 0.0); }
  public static void AddCollectionMode(FlatBufferBuilder builder, StringOffset collectionModeOffset) { builder.AddOffset(31, collectionModeOffset.Value, 0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(32, rawFileURIOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(33, sourceOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, DiffOfArrival_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(34, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(35, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(36, originOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(37, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(38, createdByOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(39, descriptorOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(40, transactionIdOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(41, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(42, sourceDLOffset.Value, 0); }
  public static Offset<DiffOfArrival_Ingest> EndDiffOfArrival_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DiffOfArrival_Ingest>(o);
  }
  public static void FinishDiffOfArrival_IngestBuffer(FlatBufferBuilder builder, Offset<DiffOfArrival_Ingest> offset) { builder.Finish(offset.Value, "DIFF"); }
  public static void FinishSizePrefixedDiffOfArrival_IngestBuffer(FlatBufferBuilder builder, Offset<DiffOfArrival_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "DIFF"); }
  public DiffOfArrival_IngestT UnPack() {
    var _o = new DiffOfArrival_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DiffOfArrival_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSensor1 = this.IdSensor1;
    _o.IdSensor2 = this.IdSensor2;
    _o.SatNo = this.SatNo;
    _o.TaskId = this.TaskId;
    _o.OrigObjectId = this.OrigObjectId;
    _o.OrigSensorId1 = this.OrigSensorId1;
    _o.OrigSensorId2 = this.OrigSensorId2;
    _o.Uct = this.Uct;
    _o.Sensor1Delay = this.Sensor1Delay;
    _o.Sensor2Delay = this.Sensor2Delay;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Sen2lat = this.Sen2lat;
    _o.Sen2lon = this.Sen2lon;
    _o.Sen2alt = this.Sen2alt;
    _o.Frequency = this.Frequency;
    _o.Bandwidth = this.Bandwidth;
    _o.DeltaRange = this.DeltaRange;
    _o.DeltaRangeUnc = this.DeltaRangeUnc;
    _o.DeltaRangeRate = this.DeltaRangeRate;
    _o.DeltaRangeRateUnc = this.DeltaRangeRateUnc;
    _o.Snr = this.Snr;
    _o.Tdoa = this.Tdoa;
    _o.TdoaUnc = this.TdoaUnc;
    _o.Fdoa = this.Fdoa;
    _o.FdoaUnc = this.FdoaUnc;
    _o.CollectionMode = this.CollectionMode;
    _o.RawFileURI = this.RawFileURI;
    _o.Source = this.Source;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Origin = this.Origin;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Descriptor = this.Descriptor;
    _o.TransactionId = this.TransactionId;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
  }
  public static Offset<DiffOfArrival_Ingest> Pack(FlatBufferBuilder builder, DiffOfArrival_IngestT _o) {
    if (_o == null) return default(Offset<DiffOfArrival_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSensor1 = _o.IdSensor1 == null ? default(StringOffset) : builder.CreateString(_o.IdSensor1);
    var _idSensor2 = _o.IdSensor2 == null ? default(StringOffset) : builder.CreateString(_o.IdSensor2);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origSensorId1 = _o.OrigSensorId1 == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId1);
    var _origSensorId2 = _o.OrigSensorId2 == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId2);
    var _collectionMode = _o.CollectionMode == null ? default(StringOffset) : builder.CreateString(_o.CollectionMode);
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    return CreateDiffOfArrival_Ingest(
      builder,
      _id,
      _classificationMarking,
      _obTime,
      _idOnOrbit,
      _idSensor1,
      _idSensor2,
      _o.SatNo,
      _taskId,
      _origObjectId,
      _origSensorId1,
      _origSensorId2,
      _o.Uct,
      _o.Sensor1Delay,
      _o.Sensor2Delay,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.Sen2lat,
      _o.Sen2lon,
      _o.Sen2alt,
      _o.Frequency,
      _o.Bandwidth,
      _o.DeltaRange,
      _o.DeltaRangeUnc,
      _o.DeltaRangeRate,
      _o.DeltaRangeRateUnc,
      _o.Snr,
      _o.Tdoa,
      _o.TdoaUnc,
      _o.Fdoa,
      _o.FdoaUnc,
      _collectionMode,
      _rawFileURI,
      _source,
      _o.DataMode,
      _tags,
      _origin,
      _createdAt,
      _createdBy,
      _descriptor,
      _transactionId,
      _origNetwork,
      _sourceDL);
  }
}

public class DiffOfArrival_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSensor1 { get; set; }
  public string IdSensor2 { get; set; }
  public int SatNo { get; set; }
  public string TaskId { get; set; }
  public string OrigObjectId { get; set; }
  public string OrigSensorId1 { get; set; }
  public string OrigSensorId2 { get; set; }
  public bool Uct { get; set; }
  public double Sensor1Delay { get; set; }
  public double Sensor2Delay { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public double Sen2lat { get; set; }
  public double Sen2lon { get; set; }
  public double Sen2alt { get; set; }
  public double Frequency { get; set; }
  public double Bandwidth { get; set; }
  public double DeltaRange { get; set; }
  public double DeltaRangeUnc { get; set; }
  public double DeltaRangeRate { get; set; }
  public double DeltaRangeRateUnc { get; set; }
  public double Snr { get; set; }
  public double Tdoa { get; set; }
  public double TdoaUnc { get; set; }
  public double Fdoa { get; set; }
  public double FdoaUnc { get; set; }
  public string CollectionMode { get; set; }
  public string RawFileURI { get; set; }
  public string Source { get; set; }
  public DiffOfArrival_Ingest_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }
  public string Origin { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Descriptor { get; set; }
  public string TransactionId { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }

  public DiffOfArrival_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.IdOnOrbit = null;
    this.IdSensor1 = null;
    this.IdSensor2 = null;
    this.SatNo = 0;
    this.TaskId = null;
    this.OrigObjectId = null;
    this.OrigSensorId1 = null;
    this.OrigSensorId2 = null;
    this.Uct = false;
    this.Sensor1Delay = 0.0;
    this.Sensor2Delay = 0.0;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Sen2lat = 0.0;
    this.Sen2lon = 0.0;
    this.Sen2alt = 0.0;
    this.Frequency = 0.0;
    this.Bandwidth = 0.0;
    this.DeltaRange = 0.0;
    this.DeltaRangeUnc = 0.0;
    this.DeltaRangeRate = 0.0;
    this.DeltaRangeRateUnc = 0.0;
    this.Snr = 0.0;
    this.Tdoa = 0.0;
    this.TdoaUnc = 0.0;
    this.Fdoa = 0.0;
    this.FdoaUnc = 0.0;
    this.CollectionMode = null;
    this.RawFileURI = null;
    this.Source = null;
    this.DataMode = DiffOfArrival_Ingest_dataMode_Enum.REAL;
    this.Tags = null;
    this.Origin = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Descriptor = null;
    this.TransactionId = null;
    this.OrigNetwork = null;
    this.SourceDL = null;
  }
  public static DiffOfArrival_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return DiffOfArrival_Ingest.GetRootAsDiffOfArrival_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DiffOfArrival_Ingest.FinishDiffOfArrival_IngestBuffer(fbb, DiffOfArrival_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DiffOfArrival_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdSensor1*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSensor2*/, false)
      && verifier.VerifyField(tablePos, 16 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 20 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 22 /*OrigSensorId1*/, false)
      && verifier.VerifyString(tablePos, 24 /*OrigSensorId2*/, false)
      && verifier.VerifyField(tablePos, 26 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*Sensor1Delay*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*Sensor2Delay*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*Sen2lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*Sen2lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Sen2alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Frequency*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*Bandwidth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*DeltaRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*DeltaRangeUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*DeltaRangeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*DeltaRangeRateUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*Snr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*Tdoa*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*TdoaUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Fdoa*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*FdoaUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 66 /*CollectionMode*/, false)
      && verifier.VerifyString(tablePos, 68 /*RawFileURI*/, false)
      && verifier.VerifyString(tablePos, 70 /*Source*/, false)
      && verifier.VerifyField(tablePos, 72 /*DataMode*/, 1 /*DiffOfArrival_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 74 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 76 /*Origin*/, false)
      && verifier.VerifyString(tablePos, 78 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 80 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 82 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 84 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 86 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 88 /*SourceDL*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
