// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OnorbitSolarArray_Ingest
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// No description available.
public struct OnorbitSolarArray_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static OnorbitSolarArray_Ingest GetRootAsOnorbitSolarArray_Ingest(ByteBuffer _bb) { return GetRootAsOnorbitSolarArray_Ingest(_bb, new OnorbitSolarArray_Ingest()); }
  public static OnorbitSolarArray_Ingest GetRootAsOnorbitSolarArray_Ingest(ByteBuffer _bb, OnorbitSolarArray_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OnorbitSolarArray_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: ONORBITSOLARARRAY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// ID of the on-orbit object.
  /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(6); }
  /// ID of the SolarArray.
  /// Example: SOLARARRAY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string IdSolarArray { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSolarArrayBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSolarArrayBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSolarArrayArray() { return __p.__vector_as_array<byte>(8); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(10); }
  /// The number of solar arrays on the spacecraft of the type identified by idSolarArray.
  /// Example: 10
  /// Constraints: No constraints specified.
  public int Quantity { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(14); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(16); }
  /// Source of the data.
  /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(18); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(20); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
  /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public OnorbitSolarArray_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(22); return o != 0 ? (OnorbitSolarArray_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : OnorbitSolarArray_Ingest_dataMode_Enum.REAL; } }
  /// No description provided.
  /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string SolarArray { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSolarArrayBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSolarArrayBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSolarArrayArray() { return __p.__vector_as_array<byte>(24); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(26); }

  public static Offset<OnorbitSolarArray_Ingest.OnorbitSolarArray_Ingest> CreateOnorbitSolarArray_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSolarArrayOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int quantity = 0,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      OnorbitSolarArray_Ingest_dataMode_Enum dataMode = OnorbitSolarArray_Ingest_dataMode_Enum.REAL,
      StringOffset solarArrayOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(12);
    OnorbitSolarArray_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    OnorbitSolarArray_Ingest.AddSolarArray(builder, solarArrayOffset);
    OnorbitSolarArray_Ingest.AddOrigin(builder, originOffset);
    OnorbitSolarArray_Ingest.AddSource(builder, sourceOffset);
    OnorbitSolarArray_Ingest.AddCreatedBy(builder, createdByOffset);
    OnorbitSolarArray_Ingest.AddCreatedAt(builder, createdAtOffset);
    OnorbitSolarArray_Ingest.AddQuantity(builder, quantity);
    OnorbitSolarArray_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    OnorbitSolarArray_Ingest.AddIdSolarArray(builder, idSolarArrayOffset);
    OnorbitSolarArray_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    OnorbitSolarArray_Ingest.AddId(builder, idOffset);
    OnorbitSolarArray_Ingest.AddDataMode(builder, dataMode);
    return OnorbitSolarArray_Ingest.EndOnorbitSolarArray_Ingest(builder);
  }

  public static void StartOnorbitSolarArray_Ingest(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(1, idOnOrbitOffset.Value, 0); }
  public static void AddIdSolarArray(FlatBufferBuilder builder, StringOffset idSolarArrayOffset) { builder.AddOffset(2, idSolarArrayOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(3, classificationMarkingOffset.Value, 0); }
  public static void AddQuantity(FlatBufferBuilder builder, int quantity) { builder.AddInt(4, quantity, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(5, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(6, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(7, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(8, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, OnorbitSolarArray_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(9, (sbyte)dataMode, 0); }
  public static void AddSolarArray(FlatBufferBuilder builder, StringOffset solarArrayOffset) { builder.AddOffset(10, solarArrayOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(11, origNetworkOffset.Value, 0); }
  public static Offset<OnorbitSolarArray_Ingest.OnorbitSolarArray_Ingest> EndOnorbitSolarArray_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OnorbitSolarArray_Ingest.OnorbitSolarArray_Ingest>(o);
  }
  public OnorbitSolarArray_IngestT UnPack() {
    var _o = new OnorbitSolarArray_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OnorbitSolarArray_IngestT _o) {
    _o.Id = this.Id;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSolarArray = this.IdSolarArray;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.Quantity = this.Quantity;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.SolarArray = this.SolarArray;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<OnorbitSolarArray_Ingest.OnorbitSolarArray_Ingest> Pack(FlatBufferBuilder builder, OnorbitSolarArray_IngestT _o) {
    if (_o == null) return default(Offset<OnorbitSolarArray_Ingest.OnorbitSolarArray_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSolarArray = _o.IdSolarArray == null ? default(StringOffset) : builder.CreateString(_o.IdSolarArray);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _solarArray = _o.SolarArray == null ? default(StringOffset) : builder.CreateString(_o.SolarArray);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateOnorbitSolarArray_Ingest(
      builder,
      _id,
      _idOnOrbit,
      _idSolarArray,
      _classificationMarking,
      _o.Quantity,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _solarArray,
      _origNetwork);
  }
}

public class OnorbitSolarArray_IngestT
{
  public string Id { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSolarArray { get; set; }
  public string ClassificationMarking { get; set; }
  public int Quantity { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public OnorbitSolarArray_Ingest_dataMode_Enum DataMode { get; set; }
  public string SolarArray { get; set; }
  public string OrigNetwork { get; set; }

  public OnorbitSolarArray_IngestT() {
    this.Id = null;
    this.IdOnOrbit = null;
    this.IdSolarArray = null;
    this.ClassificationMarking = null;
    this.Quantity = 0;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = OnorbitSolarArray_Ingest_dataMode_Enum.REAL;
    this.SolarArray = null;
    this.OrigNetwork = null;
  }
}


static public class OnorbitSolarArray_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSolarArray*/, false)
      && verifier.VerifyString(tablePos, 10 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 12 /*Quantity*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 16 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 18 /*Source*/, false)
      && verifier.VerifyString(tablePos, 20 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 22 /*DataMode*/, 1 /*OnorbitSolarArray_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 24 /*SolarArray*/, false)
      && verifier.VerifyString(tablePos, 26 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
