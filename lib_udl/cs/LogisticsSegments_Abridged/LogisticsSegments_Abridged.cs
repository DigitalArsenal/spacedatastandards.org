// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Remarks associated with this LogisticsSupport record.
public struct LogisticsSegments_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LogisticsSegments_Abridged GetRootAsLogisticsSegments_Abridged(ByteBuffer _bb) { return GetRootAsLogisticsSegments_Abridged(_bb, new LogisticsSegments_Abridged()); }
  public static LogisticsSegments_Abridged GetRootAsLogisticsSegments_Abridged(ByteBuffer _bb, LogisticsSegments_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool LogisticsSegments_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "LOGI"); }
  public static bool VerifyLogisticsSegments_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("LOGI", false, LogisticsSegments_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LogisticsSegments_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Used to sequence the segments in the transportation plan.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int SegmentNumber { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 1, Maximum length = 1
  public string ModeCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModeCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetModeCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetModeCodeArray() { return __p.__vector_as_array<byte>(6); }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string MissionType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMissionTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMissionTypeArray() { return __p.__vector_as_array<byte>(8); }
  /// The unique identifier of the mission to which this logistics record is assigned.
  /// Example: /// Example: EXAMPLE-UUID
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string IdMission { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdMissionBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIdMissionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIdMissionArray() { return __p.__vector_as_array<byte>(10); }
  /// The GDSS mission ID for this segment.
  /// Example: /// Example: 2001101RF01202307062205
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string ExtMissionId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtMissionIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetExtMissionIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetExtMissionIdArray() { return __p.__vector_as_array<byte>(12); }
  /// The user generated identifier for an air mission subgroup.
  /// Example: /// Example: TAM308901196
  /// Constraints: Minimum length = 0, Maximum length = 12
  public string MissionNumber { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionNumberBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetMissionNumberBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetMissionNumberArray() { return __p.__vector_as_array<byte>(14); }
  /// Start air mission itinerary point identifier.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  public int Itin { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The identifier that represents a specific aircraft within an aircraft type.
  /// Example: /// Example: N819AX
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string SegTailNumber { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegTailNumberBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSegTailNumberBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSegTailNumberArray() { return __p.__vector_as_array<byte>(18); }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: B7772E
  /// Constraints: Minimum length = 0, Maximum length = 30
  public string SegAircraftMDS { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegAircraftMDSBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSegAircraftMDSBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSegAircraftMDSArray() { return __p.__vector_as_array<byte>(20); }
  /// Airport ICAO departure code.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string DepartureICAO { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepartureICAOBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDepartureICAOBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDepartureICAOArray() { return __p.__vector_as_array<byte>(22); }
  /// Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:20:00.123Z
  /// Constraints: No constraints specified.
  public string SegActDepTime { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegActDepTimeBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSegActDepTimeBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSegActDepTimeArray() { return __p.__vector_as_array<byte>(24); }
  /// Airport ICAO arrival code.
  /// Example: /// Example: YBCS
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string ArrivalICAO { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArrivalICAOBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetArrivalICAOBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetArrivalICAOArray() { return __p.__vector_as_array<byte>(26); }
  /// Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:20:00.123Z
  /// Constraints: No constraints specified.
  public string SegActArrTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegActArrTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetSegActArrTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetSegActArrTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:20:00.123Z
  /// Constraints: No constraints specified.
  public string SegEstDepTime { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegEstDepTimeBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSegEstDepTimeBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSegEstDepTimeArray() { return __p.__vector_as_array<byte>(30); }
  /// GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:20:00.123Z
  /// Constraints: No constraints specified.
  public string SegEstArrTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSegEstArrTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSegEstArrTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSegEstArrTimeArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<LogisticsSegments_Abridged> CreateLogisticsSegments_Abridged(FlatBufferBuilder builder,
      int segmentNumber = 0,
      StringOffset modeCodeOffset = default(StringOffset),
      StringOffset missionTypeOffset = default(StringOffset),
      StringOffset idMissionOffset = default(StringOffset),
      StringOffset extMissionIdOffset = default(StringOffset),
      StringOffset missionNumberOffset = default(StringOffset),
      int itin = 0,
      StringOffset segTailNumberOffset = default(StringOffset),
      StringOffset segAircraftMDSOffset = default(StringOffset),
      StringOffset departureICAOOffset = default(StringOffset),
      StringOffset segActDepTimeOffset = default(StringOffset),
      StringOffset arrivalICAOOffset = default(StringOffset),
      StringOffset segActArrTimeOffset = default(StringOffset),
      StringOffset segEstDepTimeOffset = default(StringOffset),
      StringOffset segEstArrTimeOffset = default(StringOffset)) {
    builder.StartTable(15);
    LogisticsSegments_Abridged.AddSegEstArrTime(builder, segEstArrTimeOffset);
    LogisticsSegments_Abridged.AddSegEstDepTime(builder, segEstDepTimeOffset);
    LogisticsSegments_Abridged.AddSegActArrTime(builder, segActArrTimeOffset);
    LogisticsSegments_Abridged.AddArrivalICAO(builder, arrivalICAOOffset);
    LogisticsSegments_Abridged.AddSegActDepTime(builder, segActDepTimeOffset);
    LogisticsSegments_Abridged.AddDepartureICAO(builder, departureICAOOffset);
    LogisticsSegments_Abridged.AddSegAircraftMDS(builder, segAircraftMDSOffset);
    LogisticsSegments_Abridged.AddSegTailNumber(builder, segTailNumberOffset);
    LogisticsSegments_Abridged.AddItin(builder, itin);
    LogisticsSegments_Abridged.AddMissionNumber(builder, missionNumberOffset);
    LogisticsSegments_Abridged.AddExtMissionId(builder, extMissionIdOffset);
    LogisticsSegments_Abridged.AddIdMission(builder, idMissionOffset);
    LogisticsSegments_Abridged.AddMissionType(builder, missionTypeOffset);
    LogisticsSegments_Abridged.AddModeCode(builder, modeCodeOffset);
    LogisticsSegments_Abridged.AddSegmentNumber(builder, segmentNumber);
    return LogisticsSegments_Abridged.EndLogisticsSegments_Abridged(builder);
  }

  public static void StartLogisticsSegments_Abridged(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddSegmentNumber(FlatBufferBuilder builder, int segmentNumber) { builder.AddInt(0, segmentNumber, 0); }
  public static void AddModeCode(FlatBufferBuilder builder, StringOffset modeCodeOffset) { builder.AddOffset(1, modeCodeOffset.Value, 0); }
  public static void AddMissionType(FlatBufferBuilder builder, StringOffset missionTypeOffset) { builder.AddOffset(2, missionTypeOffset.Value, 0); }
  public static void AddIdMission(FlatBufferBuilder builder, StringOffset idMissionOffset) { builder.AddOffset(3, idMissionOffset.Value, 0); }
  public static void AddExtMissionId(FlatBufferBuilder builder, StringOffset extMissionIdOffset) { builder.AddOffset(4, extMissionIdOffset.Value, 0); }
  public static void AddMissionNumber(FlatBufferBuilder builder, StringOffset missionNumberOffset) { builder.AddOffset(5, missionNumberOffset.Value, 0); }
  public static void AddItin(FlatBufferBuilder builder, int itin) { builder.AddInt(6, itin, 0); }
  public static void AddSegTailNumber(FlatBufferBuilder builder, StringOffset segTailNumberOffset) { builder.AddOffset(7, segTailNumberOffset.Value, 0); }
  public static void AddSegAircraftMDS(FlatBufferBuilder builder, StringOffset segAircraftMDSOffset) { builder.AddOffset(8, segAircraftMDSOffset.Value, 0); }
  public static void AddDepartureICAO(FlatBufferBuilder builder, StringOffset departureICAOOffset) { builder.AddOffset(9, departureICAOOffset.Value, 0); }
  public static void AddSegActDepTime(FlatBufferBuilder builder, StringOffset segActDepTimeOffset) { builder.AddOffset(10, segActDepTimeOffset.Value, 0); }
  public static void AddArrivalICAO(FlatBufferBuilder builder, StringOffset arrivalICAOOffset) { builder.AddOffset(11, arrivalICAOOffset.Value, 0); }
  public static void AddSegActArrTime(FlatBufferBuilder builder, StringOffset segActArrTimeOffset) { builder.AddOffset(12, segActArrTimeOffset.Value, 0); }
  public static void AddSegEstDepTime(FlatBufferBuilder builder, StringOffset segEstDepTimeOffset) { builder.AddOffset(13, segEstDepTimeOffset.Value, 0); }
  public static void AddSegEstArrTime(FlatBufferBuilder builder, StringOffset segEstArrTimeOffset) { builder.AddOffset(14, segEstArrTimeOffset.Value, 0); }
  public static Offset<LogisticsSegments_Abridged> EndLogisticsSegments_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<LogisticsSegments_Abridged>(o);
  }
  public static void FinishLogisticsSegments_AbridgedBuffer(FlatBufferBuilder builder, Offset<LogisticsSegments_Abridged> offset) { builder.Finish(offset.Value, "LOGI"); }
  public static void FinishSizePrefixedLogisticsSegments_AbridgedBuffer(FlatBufferBuilder builder, Offset<LogisticsSegments_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "LOGI"); }
  public LogisticsSegments_AbridgedT UnPack() {
    var _o = new LogisticsSegments_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LogisticsSegments_AbridgedT _o) {
    _o.SegmentNumber = this.SegmentNumber;
    _o.ModeCode = this.ModeCode;
    _o.MissionType = this.MissionType;
    _o.IdMission = this.IdMission;
    _o.ExtMissionId = this.ExtMissionId;
    _o.MissionNumber = this.MissionNumber;
    _o.Itin = this.Itin;
    _o.SegTailNumber = this.SegTailNumber;
    _o.SegAircraftMDS = this.SegAircraftMDS;
    _o.DepartureICAO = this.DepartureICAO;
    _o.SegActDepTime = this.SegActDepTime;
    _o.ArrivalICAO = this.ArrivalICAO;
    _o.SegActArrTime = this.SegActArrTime;
    _o.SegEstDepTime = this.SegEstDepTime;
    _o.SegEstArrTime = this.SegEstArrTime;
  }
  public static Offset<LogisticsSegments_Abridged> Pack(FlatBufferBuilder builder, LogisticsSegments_AbridgedT _o) {
    if (_o == null) return default(Offset<LogisticsSegments_Abridged>);
    var _modeCode = _o.ModeCode == null ? default(StringOffset) : builder.CreateString(_o.ModeCode);
    var _missionType = _o.MissionType == null ? default(StringOffset) : builder.CreateString(_o.MissionType);
    var _idMission = _o.IdMission == null ? default(StringOffset) : builder.CreateString(_o.IdMission);
    var _extMissionId = _o.ExtMissionId == null ? default(StringOffset) : builder.CreateString(_o.ExtMissionId);
    var _missionNumber = _o.MissionNumber == null ? default(StringOffset) : builder.CreateString(_o.MissionNumber);
    var _segTailNumber = _o.SegTailNumber == null ? default(StringOffset) : builder.CreateString(_o.SegTailNumber);
    var _segAircraftMDS = _o.SegAircraftMDS == null ? default(StringOffset) : builder.CreateString(_o.SegAircraftMDS);
    var _departureICAO = _o.DepartureICAO == null ? default(StringOffset) : builder.CreateString(_o.DepartureICAO);
    var _segActDepTime = _o.SegActDepTime == null ? default(StringOffset) : builder.CreateString(_o.SegActDepTime);
    var _arrivalICAO = _o.ArrivalICAO == null ? default(StringOffset) : builder.CreateString(_o.ArrivalICAO);
    var _segActArrTime = _o.SegActArrTime == null ? default(StringOffset) : builder.CreateString(_o.SegActArrTime);
    var _segEstDepTime = _o.SegEstDepTime == null ? default(StringOffset) : builder.CreateString(_o.SegEstDepTime);
    var _segEstArrTime = _o.SegEstArrTime == null ? default(StringOffset) : builder.CreateString(_o.SegEstArrTime);
    return CreateLogisticsSegments_Abridged(
      builder,
      _o.SegmentNumber,
      _modeCode,
      _missionType,
      _idMission,
      _extMissionId,
      _missionNumber,
      _o.Itin,
      _segTailNumber,
      _segAircraftMDS,
      _departureICAO,
      _segActDepTime,
      _arrivalICAO,
      _segActArrTime,
      _segEstDepTime,
      _segEstArrTime);
  }
}

public class LogisticsSegments_AbridgedT
{
  public int SegmentNumber { get; set; }
  public string ModeCode { get; set; }
  public string MissionType { get; set; }
  public string IdMission { get; set; }
  public string ExtMissionId { get; set; }
  public string MissionNumber { get; set; }
  public int Itin { get; set; }
  public string SegTailNumber { get; set; }
  public string SegAircraftMDS { get; set; }
  public string DepartureICAO { get; set; }
  public string SegActDepTime { get; set; }
  public string ArrivalICAO { get; set; }
  public string SegActArrTime { get; set; }
  public string SegEstDepTime { get; set; }
  public string SegEstArrTime { get; set; }

  public LogisticsSegments_AbridgedT() {
    this.SegmentNumber = 0;
    this.ModeCode = null;
    this.MissionType = null;
    this.IdMission = null;
    this.ExtMissionId = null;
    this.MissionNumber = null;
    this.Itin = 0;
    this.SegTailNumber = null;
    this.SegAircraftMDS = null;
    this.DepartureICAO = null;
    this.SegActDepTime = null;
    this.ArrivalICAO = null;
    this.SegActArrTime = null;
    this.SegEstDepTime = null;
    this.SegEstArrTime = null;
  }
  public static LogisticsSegments_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return LogisticsSegments_Abridged.GetRootAsLogisticsSegments_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    LogisticsSegments_Abridged.FinishLogisticsSegments_AbridgedBuffer(fbb, LogisticsSegments_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class LogisticsSegments_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SegmentNumber*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*ModeCode*/, false)
      && verifier.VerifyString(tablePos, 8 /*MissionType*/, false)
      && verifier.VerifyString(tablePos, 10 /*IdMission*/, false)
      && verifier.VerifyString(tablePos, 12 /*ExtMissionId*/, false)
      && verifier.VerifyString(tablePos, 14 /*MissionNumber*/, false)
      && verifier.VerifyField(tablePos, 16 /*Itin*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 18 /*SegTailNumber*/, false)
      && verifier.VerifyString(tablePos, 20 /*SegAircraftMDS*/, false)
      && verifier.VerifyString(tablePos, 22 /*DepartureICAO*/, false)
      && verifier.VerifyString(tablePos, 24 /*SegActDepTime*/, false)
      && verifier.VerifyString(tablePos, 26 /*ArrivalICAO*/, false)
      && verifier.VerifyString(tablePos, 28 /*SegActArrTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*SegEstDepTime*/, false)
      && verifier.VerifyString(tablePos, 32 /*SegEstArrTime*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
