// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// A request for various effects on a target.
public struct EffectRequest_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EffectRequest_Ingest GetRootAsEffectRequest_Ingest(ByteBuffer _bb) { return GetRootAsEffectRequest_Ingest(_bb, new EffectRequest_Ingest()); }
  public static EffectRequest_Ingest GetRootAsEffectRequest_Ingest(ByteBuffer _bb, EffectRequest_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EffectRequest_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EFFE"); }
  public static bool VerifyEffectRequest_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EFFE", false, EffectRequest_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectRequest_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EFFECTREQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// The extenal system identifier of this request. A human readable unique id.
  /// Example: /// Example: EXTERNALREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ExternalRequestId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExternalRequestIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetExternalRequestIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetExternalRequestIdArray() { return __p.__vector_as_array<byte>(8); }
  /// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
  /// Example: /// Example: ['COVER', 'DECEIVE']
  /// Constraints: No constraints specified.
  public string EffectList(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EffectListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
  /// Example: /// Example: CREATED
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string State { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(12); }
  /// Specific descriptive instantiation of the effect, e.g., playbook to be used.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Context { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetContextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetContextArray() { return __p.__vector_as_array<byte>(14); }
  /// The time the effect should start, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string StartTime { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartTimeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetStartTimeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetStartTimeArray() { return __p.__vector_as_array<byte>(16); }
  /// The time the effect should end, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string EndTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
  /// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
  /// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
  /// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
  /// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
  /// Example: /// Example: NoLaterThan
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string DeadlineType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDeadlineTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetDeadlineTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetDeadlineTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string TargetSrcType { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetSrcTypeBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTargetSrcTypeBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTargetSrcTypeArray() { return __p.__vector_as_array<byte>(22); }
  /// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TargetSrcId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTargetSrcIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTargetSrcIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTargetSrcIdArray() { return __p.__vector_as_array<byte>(24); }
  /// The priority (LOW, MEDIUM, HIGH) of this request.
  /// Example: /// Example: LOW
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Priority { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPriorityBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetPriorityBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetPriorityArray() { return __p.__vector_as_array<byte>(26); }
  /// The type or class of the preference model used to evaluate this offer.
  /// Example: /// Example: Preference model
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string ModelClass { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelClassBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetModelClassBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetModelClassArray() { return __p.__vector_as_array<byte>(28); }
  /// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: ['COST', 'RISK']
  /// Constraints: No constraints specified.
  public string MetricTypes(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MetricTypesLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: [0.5, 0.6]
  /// Constraints: No constraints specified.
  public string MetricWeights(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MetricWeightsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(34); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(36); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(38); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(40); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EffectRequest_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(42); return o != 0 ? (EffectRequest_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EffectRequest_Ingest_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(44); }

  public static Offset<EffectRequest_Ingest> CreateEffectRequest_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset externalRequestIdOffset = default(StringOffset),
      VectorOffset effectListOffset = default(VectorOffset),
      StringOffset stateOffset = default(StringOffset),
      StringOffset contextOffset = default(StringOffset),
      StringOffset startTimeOffset = default(StringOffset),
      StringOffset endTimeOffset = default(StringOffset),
      StringOffset deadlineTypeOffset = default(StringOffset),
      StringOffset targetSrcTypeOffset = default(StringOffset),
      StringOffset targetSrcIdOffset = default(StringOffset),
      StringOffset priorityOffset = default(StringOffset),
      StringOffset modelClassOffset = default(StringOffset),
      VectorOffset metricTypesOffset = default(VectorOffset),
      VectorOffset metricWeightsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      EffectRequest_Ingest_dataMode_Enum dataMode = EffectRequest_Ingest_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(21);
    EffectRequest_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    EffectRequest_Ingest.AddOrigin(builder, originOffset);
    EffectRequest_Ingest.AddSource(builder, sourceOffset);
    EffectRequest_Ingest.AddCreatedBy(builder, createdByOffset);
    EffectRequest_Ingest.AddCreatedAt(builder, createdAtOffset);
    EffectRequest_Ingest.AddMetricWeights(builder, metricWeightsOffset);
    EffectRequest_Ingest.AddMetricTypes(builder, metricTypesOffset);
    EffectRequest_Ingest.AddModelClass(builder, modelClassOffset);
    EffectRequest_Ingest.AddPriority(builder, priorityOffset);
    EffectRequest_Ingest.AddTargetSrcId(builder, targetSrcIdOffset);
    EffectRequest_Ingest.AddTargetSrcType(builder, targetSrcTypeOffset);
    EffectRequest_Ingest.AddDeadlineType(builder, deadlineTypeOffset);
    EffectRequest_Ingest.AddEndTime(builder, endTimeOffset);
    EffectRequest_Ingest.AddStartTime(builder, startTimeOffset);
    EffectRequest_Ingest.AddContext(builder, contextOffset);
    EffectRequest_Ingest.AddState(builder, stateOffset);
    EffectRequest_Ingest.AddEffectList(builder, effectListOffset);
    EffectRequest_Ingest.AddExternalRequestId(builder, externalRequestIdOffset);
    EffectRequest_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    EffectRequest_Ingest.AddId(builder, idOffset);
    EffectRequest_Ingest.AddDataMode(builder, dataMode);
    return EffectRequest_Ingest.EndEffectRequest_Ingest(builder);
  }

  public static void StartEffectRequest_Ingest(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddExternalRequestId(FlatBufferBuilder builder, StringOffset externalRequestIdOffset) { builder.AddOffset(2, externalRequestIdOffset.Value, 0); }
  public static void AddEffectList(FlatBufferBuilder builder, VectorOffset effectListOffset) { builder.AddOffset(3, effectListOffset.Value, 0); }
  public static VectorOffset CreateEffectListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEffectListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectListVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEffectListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEffectListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(4, stateOffset.Value, 0); }
  public static void AddContext(FlatBufferBuilder builder, StringOffset contextOffset) { builder.AddOffset(5, contextOffset.Value, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, StringOffset startTimeOffset) { builder.AddOffset(6, startTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset endTimeOffset) { builder.AddOffset(7, endTimeOffset.Value, 0); }
  public static void AddDeadlineType(FlatBufferBuilder builder, StringOffset deadlineTypeOffset) { builder.AddOffset(8, deadlineTypeOffset.Value, 0); }
  public static void AddTargetSrcType(FlatBufferBuilder builder, StringOffset targetSrcTypeOffset) { builder.AddOffset(9, targetSrcTypeOffset.Value, 0); }
  public static void AddTargetSrcId(FlatBufferBuilder builder, StringOffset targetSrcIdOffset) { builder.AddOffset(10, targetSrcIdOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, StringOffset priorityOffset) { builder.AddOffset(11, priorityOffset.Value, 0); }
  public static void AddModelClass(FlatBufferBuilder builder, StringOffset modelClassOffset) { builder.AddOffset(12, modelClassOffset.Value, 0); }
  public static void AddMetricTypes(FlatBufferBuilder builder, VectorOffset metricTypesOffset) { builder.AddOffset(13, metricTypesOffset.Value, 0); }
  public static VectorOffset CreateMetricTypesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMetricTypesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetricTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetricTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMetricTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMetricWeights(FlatBufferBuilder builder, VectorOffset metricWeightsOffset) { builder.AddOffset(14, metricWeightsOffset.Value, 0); }
  public static VectorOffset CreateMetricWeightsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMetricWeightsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetricWeightsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetricWeightsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMetricWeightsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(15, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(16, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(17, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(18, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EffectRequest_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(19, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(20, origNetworkOffset.Value, 0); }
  public static Offset<EffectRequest_Ingest> EndEffectRequest_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EffectRequest_Ingest>(o);
  }
  public static void FinishEffectRequest_IngestBuffer(FlatBufferBuilder builder, Offset<EffectRequest_Ingest> offset) { builder.Finish(offset.Value, "EFFE"); }
  public static void FinishSizePrefixedEffectRequest_IngestBuffer(FlatBufferBuilder builder, Offset<EffectRequest_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EFFE"); }
  public EffectRequest_IngestT UnPack() {
    var _o = new EffectRequest_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectRequest_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ExternalRequestId = this.ExternalRequestId;
    _o.EffectList = new List<string>();
    for (var _j = 0; _j < this.EffectListLength; ++_j) {_o.EffectList.Add(this.EffectList(_j));}
    _o.State = this.State;
    _o.Context = this.Context;
    _o.StartTime = this.StartTime;
    _o.EndTime = this.EndTime;
    _o.DeadlineType = this.DeadlineType;
    _o.TargetSrcType = this.TargetSrcType;
    _o.TargetSrcId = this.TargetSrcId;
    _o.Priority = this.Priority;
    _o.ModelClass = this.ModelClass;
    _o.MetricTypes = new List<string>();
    for (var _j = 0; _j < this.MetricTypesLength; ++_j) {_o.MetricTypes.Add(this.MetricTypes(_j));}
    _o.MetricWeights = new List<string>();
    for (var _j = 0; _j < this.MetricWeightsLength; ++_j) {_o.MetricWeights.Add(this.MetricWeights(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<EffectRequest_Ingest> Pack(FlatBufferBuilder builder, EffectRequest_IngestT _o) {
    if (_o == null) return default(Offset<EffectRequest_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _externalRequestId = _o.ExternalRequestId == null ? default(StringOffset) : builder.CreateString(_o.ExternalRequestId);
    var _effectList = default(VectorOffset);
    if (_o.EffectList != null) {
      var __effectList = new StringOffset[_o.EffectList.Count];
      for (var _j = 0; _j < __effectList.Length; ++_j) { __effectList[_j] = builder.CreateString(_o.EffectList[_j]); }
      _effectList = CreateEffectListVector(builder, __effectList);
    }
    var _state = _o.State == null ? default(StringOffset) : builder.CreateString(_o.State);
    var _context = _o.Context == null ? default(StringOffset) : builder.CreateString(_o.Context);
    var _startTime = _o.StartTime == null ? default(StringOffset) : builder.CreateString(_o.StartTime);
    var _endTime = _o.EndTime == null ? default(StringOffset) : builder.CreateString(_o.EndTime);
    var _deadlineType = _o.DeadlineType == null ? default(StringOffset) : builder.CreateString(_o.DeadlineType);
    var _targetSrcType = _o.TargetSrcType == null ? default(StringOffset) : builder.CreateString(_o.TargetSrcType);
    var _targetSrcId = _o.TargetSrcId == null ? default(StringOffset) : builder.CreateString(_o.TargetSrcId);
    var _priority = _o.Priority == null ? default(StringOffset) : builder.CreateString(_o.Priority);
    var _modelClass = _o.ModelClass == null ? default(StringOffset) : builder.CreateString(_o.ModelClass);
    var _metricTypes = default(VectorOffset);
    if (_o.MetricTypes != null) {
      var __metricTypes = new StringOffset[_o.MetricTypes.Count];
      for (var _j = 0; _j < __metricTypes.Length; ++_j) { __metricTypes[_j] = builder.CreateString(_o.MetricTypes[_j]); }
      _metricTypes = CreateMetricTypesVector(builder, __metricTypes);
    }
    var _metricWeights = default(VectorOffset);
    if (_o.MetricWeights != null) {
      var __metricWeights = new StringOffset[_o.MetricWeights.Count];
      for (var _j = 0; _j < __metricWeights.Length; ++_j) { __metricWeights[_j] = builder.CreateString(_o.MetricWeights[_j]); }
      _metricWeights = CreateMetricWeightsVector(builder, __metricWeights);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateEffectRequest_Ingest(
      builder,
      _id,
      _classificationMarking,
      _externalRequestId,
      _effectList,
      _state,
      _context,
      _startTime,
      _endTime,
      _deadlineType,
      _targetSrcType,
      _targetSrcId,
      _priority,
      _modelClass,
      _metricTypes,
      _metricWeights,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class EffectRequest_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ExternalRequestId { get; set; }
  public List<string> EffectList { get; set; }
  public string State { get; set; }
  public string Context { get; set; }
  public string StartTime { get; set; }
  public string EndTime { get; set; }
  public string DeadlineType { get; set; }
  public string TargetSrcType { get; set; }
  public string TargetSrcId { get; set; }
  public string Priority { get; set; }
  public string ModelClass { get; set; }
  public List<string> MetricTypes { get; set; }
  public List<string> MetricWeights { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public EffectRequest_Ingest_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public EffectRequest_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ExternalRequestId = null;
    this.EffectList = null;
    this.State = null;
    this.Context = null;
    this.StartTime = null;
    this.EndTime = null;
    this.DeadlineType = null;
    this.TargetSrcType = null;
    this.TargetSrcId = null;
    this.Priority = null;
    this.ModelClass = null;
    this.MetricTypes = null;
    this.MetricWeights = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = EffectRequest_Ingest_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static EffectRequest_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EffectRequest_Ingest.GetRootAsEffectRequest_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EffectRequest_Ingest.FinishEffectRequest_IngestBuffer(fbb, EffectRequest_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EffectRequest_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ExternalRequestId*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 10 /*EffectList*/, false)
      && verifier.VerifyString(tablePos, 12 /*State*/, false)
      && verifier.VerifyString(tablePos, 14 /*Context*/, false)
      && verifier.VerifyString(tablePos, 16 /*StartTime*/, false)
      && verifier.VerifyString(tablePos, 18 /*EndTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*DeadlineType*/, false)
      && verifier.VerifyString(tablePos, 22 /*TargetSrcType*/, false)
      && verifier.VerifyString(tablePos, 24 /*TargetSrcId*/, false)
      && verifier.VerifyString(tablePos, 26 /*Priority*/, false)
      && verifier.VerifyString(tablePos, 28 /*ModelClass*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*MetricTypes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*MetricWeights*/, false)
      && verifier.VerifyString(tablePos, 34 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 36 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 38 /*Source*/, false)
      && verifier.VerifyString(tablePos, 40 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 42 /*DataMode*/, 1 /*EffectRequest_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 44 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
