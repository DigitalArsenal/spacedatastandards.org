// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
public struct Evac_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Evac_Abridged GetRootAsEvac_Abridged(ByteBuffer _bb) { return GetRootAsEvac_Abridged(_bb, new Evac_Abridged()); }
  public static Evac_Abridged GetRootAsEvac_Abridged(ByteBuffer _bb, Evac_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Evac_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EVAC"); }
  public static bool VerifyEvac_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EVAC", false, Evac_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Evac_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MEDEVACEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
  /// Example: /// Example: MedEvac-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string MedevacId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMedevacIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMedevacIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMedevacIdArray() { return __p.__vector_as_array<byte>(8); }
  /// The type of this medevac record (REQUEST, RESPONSE).
  /// Example: /// Example: REQUEST
  /// Constraints: Minimum length = 1, Maximum length = 8
  public Evac_Abridged_type_Enum Type { get { int o = __p.__offset(10); return o != 0 ? (Evac_Abridged_type_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Evac_Abridged_type_Enum.REQUEST; } }
  /// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
  /// Example: /// Example: GROUND
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string MissionType { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMissionTypeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMissionTypeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMissionTypeArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of a weather report associated with this evacuation.
  /// Example: /// Example: WeatherReport-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdWeatherReport { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdWeatherReportBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdWeatherReportBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdWeatherReportArray() { return __p.__vector_as_array<byte>(14); }
  /// Number of people Killed In Action.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int NumKIA { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of people Wounded In Action.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumWIA { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of littered personnel requiring evacuation.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  public int NumLitter { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of ambulatory personnel requiring evacuation.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int NumAmbulatory { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Flag indicating whether the mission requires medical personnel.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  public bool MedicReq { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Externally provided Medevac request number (e.g. MED.1.223908).
  /// Example: /// Example: MED.1.234567
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ReqNum { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReqNumBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetReqNumBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetReqNumArray() { return __p.__vector_as_array<byte>(26); }
  /// The request time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string ReqTime { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReqTimeBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetReqTimeBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetReqTimeArray() { return __p.__vector_as_array<byte>(28); }
  /// The call sign of this medevac requestor.
  /// Example: /// Example: Bravo
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string ReqCallSign { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReqCallSignBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetReqCallSignBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetReqCallSignArray() { return __p.__vector_as_array<byte>(30); }
  /// The expected pickup time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-20T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string PickupTime { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPickupTimeBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetPickupTimeBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetPickupTimeArray() { return __p.__vector_as_array<byte>(32); }
  /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 75.1234
  /// Constraints: No constraints specified.
  public double PickupLat { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 175.1234
  /// Constraints: No constraints specified.
  public double PickupLon { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
  /// Example: /// Example: 30.1234
  /// Constraints: No constraints specified.
  public double PickupAlt { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.1234
  /// Constraints: No constraints specified.
  public double Ce { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 5.1234
  /// Constraints: No constraints specified.
  public double Le { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
  /// Example: /// Example: ROCKY
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Terrain { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTerrainBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetTerrainBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetTerrainArray() { return __p.__vector_as_array<byte>(44); }
  /// Amplifying data for the terrain describing important obstacles in or around the zone.
  /// Example: /// Example: N/A
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ObstaclesRemarks { get { int o = __p.__offset(46); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObstaclesRemarksBytes() { return __p.__vector_as_span<byte>(46, 1); }
#else
  public ArraySegment<byte>? GetObstaclesRemarksBytes() { return __p.__vector_as_arraysegment(46); }
#endif
  public byte[] GetObstaclesRemarksArray() { return __p.__vector_as_array<byte>(46); }
  /// Amplifying data for the terrain describing any notable additional terrain features.
  /// Example: /// Example: N/A
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TerrainRemarks { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTerrainRemarksBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetTerrainRemarksBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetTerrainRemarksArray() { return __p.__vector_as_array<byte>(48); }
  /// The name of the zone.
  /// Example: /// Example: example-zone
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ZoneName { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZoneNameBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetZoneNameBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetZoneNameArray() { return __p.__vector_as_array<byte>(50); }
  /// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
  /// Example: /// Example: ILLUMINATION
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ZoneMarking { get { int o = __p.__offset(52); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZoneMarkingBytes() { return __p.__vector_as_span<byte>(52, 1); }
#else
  public ArraySegment<byte>? GetZoneMarkingBytes() { return __p.__vector_as_arraysegment(52); }
#endif
  public byte[] GetZoneMarkingArray() { return __p.__vector_as_array<byte>(52); }
  /// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
  /// Example: /// Example: NO ENEMY
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string ZoneSecurity { get { int o = __p.__offset(54); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZoneSecurityBytes() { return __p.__vector_as_span<byte>(54, 1); }
#else
  public ArraySegment<byte>? GetZoneSecurityBytes() { return __p.__vector_as_arraysegment(54); }
#endif
  public byte[] GetZoneSecurityArray() { return __p.__vector_as_array<byte>(54); }
  /// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
  /// Example: /// Example: RED
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string ZoneMarkingColor { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZoneMarkingColorBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetZoneMarkingColorBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetZoneMarkingColorArray() { return __p.__vector_as_array<byte>(56); }
  /// Flag indicating that the pickup site is hot and hostiles are in the area.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool ZoneHot { get { int o = __p.__offset(58); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The contact frequency, in Hz, of the agency or zone controller.
  /// Example: /// Example: 3.11
  /// Constraints: No constraints specified.
  public double CntctFreq { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The call sign of the zone controller.
  /// Example: /// Example: Tango
  /// Constraints: Minimum length = 0, Maximum length = 128
  public string ZoneContrCallSign { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZoneContrCallSignBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetZoneContrCallSignBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetZoneContrCallSignArray() { return __p.__vector_as_array<byte>(62); }
  /// The count of people requiring medevac.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int NumCasualties { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Additional comments for the medevac mission.
  /// Example: /// Example: Comments concerning mission
  /// Constraints: Minimum length = 0, Maximum length = 1024
  public string Comments { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentsBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetCommentsBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetCommentsArray() { return __p.__vector_as_array<byte>(66); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CasualtyInfo(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CasualtyInfoLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string EnemyData(int j) { int o = __p.__offset(70); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int EnemyDataLength { get { int o = __p.__offset(70); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(72); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(74); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(76); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(78); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(80); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(80, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(80); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(80); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Evac_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(82); return o != 0 ? (Evac_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Evac_Abridged_dataMode_Enum.REAL; } }

  public static Offset<Evac_Abridged> CreateEvac_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset medevacIdOffset = default(StringOffset),
      Evac_Abridged_type_Enum type = Evac_Abridged_type_Enum.REQUEST,
      StringOffset missionTypeOffset = default(StringOffset),
      StringOffset idWeatherReportOffset = default(StringOffset),
      int numKIA = 0,
      int numWIA = 0,
      int numLitter = 0,
      int numAmbulatory = 0,
      bool medicReq = false,
      StringOffset reqNumOffset = default(StringOffset),
      StringOffset reqTimeOffset = default(StringOffset),
      StringOffset reqCallSignOffset = default(StringOffset),
      StringOffset pickupTimeOffset = default(StringOffset),
      double pickupLat = 0.0,
      double pickupLon = 0.0,
      double pickupAlt = 0.0,
      double ce = 0.0,
      double le = 0.0,
      StringOffset terrainOffset = default(StringOffset),
      StringOffset obstaclesRemarksOffset = default(StringOffset),
      StringOffset terrainRemarksOffset = default(StringOffset),
      StringOffset zoneNameOffset = default(StringOffset),
      StringOffset zoneMarkingOffset = default(StringOffset),
      StringOffset zoneSecurityOffset = default(StringOffset),
      StringOffset zoneMarkingColorOffset = default(StringOffset),
      bool zoneHot = false,
      double cntctFreq = 0.0,
      StringOffset zoneContrCallSignOffset = default(StringOffset),
      int numCasualties = 0,
      StringOffset commentsOffset = default(StringOffset),
      VectorOffset casualtyInfoOffset = default(VectorOffset),
      VectorOffset enemyDataOffset = default(VectorOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Evac_Abridged_dataMode_Enum dataMode = Evac_Abridged_dataMode_Enum.REAL) {
    builder.StartTable(40);
    Evac_Abridged.AddCntctFreq(builder, cntctFreq);
    Evac_Abridged.AddLe(builder, le);
    Evac_Abridged.AddCe(builder, ce);
    Evac_Abridged.AddPickupAlt(builder, pickupAlt);
    Evac_Abridged.AddPickupLon(builder, pickupLon);
    Evac_Abridged.AddPickupLat(builder, pickupLat);
    Evac_Abridged.AddOrigin(builder, originOffset);
    Evac_Abridged.AddSource(builder, sourceOffset);
    Evac_Abridged.AddCreatedBy(builder, createdByOffset);
    Evac_Abridged.AddCreatedAt(builder, createdAtOffset);
    Evac_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Evac_Abridged.AddEnemyData(builder, enemyDataOffset);
    Evac_Abridged.AddCasualtyInfo(builder, casualtyInfoOffset);
    Evac_Abridged.AddComments(builder, commentsOffset);
    Evac_Abridged.AddNumCasualties(builder, numCasualties);
    Evac_Abridged.AddZoneContrCallSign(builder, zoneContrCallSignOffset);
    Evac_Abridged.AddZoneMarkingColor(builder, zoneMarkingColorOffset);
    Evac_Abridged.AddZoneSecurity(builder, zoneSecurityOffset);
    Evac_Abridged.AddZoneMarking(builder, zoneMarkingOffset);
    Evac_Abridged.AddZoneName(builder, zoneNameOffset);
    Evac_Abridged.AddTerrainRemarks(builder, terrainRemarksOffset);
    Evac_Abridged.AddObstaclesRemarks(builder, obstaclesRemarksOffset);
    Evac_Abridged.AddTerrain(builder, terrainOffset);
    Evac_Abridged.AddPickupTime(builder, pickupTimeOffset);
    Evac_Abridged.AddReqCallSign(builder, reqCallSignOffset);
    Evac_Abridged.AddReqTime(builder, reqTimeOffset);
    Evac_Abridged.AddReqNum(builder, reqNumOffset);
    Evac_Abridged.AddNumAmbulatory(builder, numAmbulatory);
    Evac_Abridged.AddNumLitter(builder, numLitter);
    Evac_Abridged.AddNumWIA(builder, numWIA);
    Evac_Abridged.AddNumKIA(builder, numKIA);
    Evac_Abridged.AddIdWeatherReport(builder, idWeatherReportOffset);
    Evac_Abridged.AddMissionType(builder, missionTypeOffset);
    Evac_Abridged.AddMedevacId(builder, medevacIdOffset);
    Evac_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Evac_Abridged.AddId(builder, idOffset);
    Evac_Abridged.AddDataMode(builder, dataMode);
    Evac_Abridged.AddZoneHot(builder, zoneHot);
    Evac_Abridged.AddMedicReq(builder, medicReq);
    Evac_Abridged.AddType(builder, type);
    return Evac_Abridged.EndEvac_Abridged(builder);
  }

  public static void StartEvac_Abridged(FlatBufferBuilder builder) { builder.StartTable(40); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddMedevacId(FlatBufferBuilder builder, StringOffset medevacIdOffset) { builder.AddOffset(2, medevacIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Evac_Abridged_type_Enum type) { builder.AddSbyte(3, (sbyte)type, 0); }
  public static void AddMissionType(FlatBufferBuilder builder, StringOffset missionTypeOffset) { builder.AddOffset(4, missionTypeOffset.Value, 0); }
  public static void AddIdWeatherReport(FlatBufferBuilder builder, StringOffset idWeatherReportOffset) { builder.AddOffset(5, idWeatherReportOffset.Value, 0); }
  public static void AddNumKIA(FlatBufferBuilder builder, int numKIA) { builder.AddInt(6, numKIA, 0); }
  public static void AddNumWIA(FlatBufferBuilder builder, int numWIA) { builder.AddInt(7, numWIA, 0); }
  public static void AddNumLitter(FlatBufferBuilder builder, int numLitter) { builder.AddInt(8, numLitter, 0); }
  public static void AddNumAmbulatory(FlatBufferBuilder builder, int numAmbulatory) { builder.AddInt(9, numAmbulatory, 0); }
  public static void AddMedicReq(FlatBufferBuilder builder, bool medicReq) { builder.AddBool(10, medicReq, false); }
  public static void AddReqNum(FlatBufferBuilder builder, StringOffset reqNumOffset) { builder.AddOffset(11, reqNumOffset.Value, 0); }
  public static void AddReqTime(FlatBufferBuilder builder, StringOffset reqTimeOffset) { builder.AddOffset(12, reqTimeOffset.Value, 0); }
  public static void AddReqCallSign(FlatBufferBuilder builder, StringOffset reqCallSignOffset) { builder.AddOffset(13, reqCallSignOffset.Value, 0); }
  public static void AddPickupTime(FlatBufferBuilder builder, StringOffset pickupTimeOffset) { builder.AddOffset(14, pickupTimeOffset.Value, 0); }
  public static void AddPickupLat(FlatBufferBuilder builder, double pickupLat) { builder.AddDouble(15, pickupLat, 0.0); }
  public static void AddPickupLon(FlatBufferBuilder builder, double pickupLon) { builder.AddDouble(16, pickupLon, 0.0); }
  public static void AddPickupAlt(FlatBufferBuilder builder, double pickupAlt) { builder.AddDouble(17, pickupAlt, 0.0); }
  public static void AddCe(FlatBufferBuilder builder, double ce) { builder.AddDouble(18, ce, 0.0); }
  public static void AddLe(FlatBufferBuilder builder, double le) { builder.AddDouble(19, le, 0.0); }
  public static void AddTerrain(FlatBufferBuilder builder, StringOffset terrainOffset) { builder.AddOffset(20, terrainOffset.Value, 0); }
  public static void AddObstaclesRemarks(FlatBufferBuilder builder, StringOffset obstaclesRemarksOffset) { builder.AddOffset(21, obstaclesRemarksOffset.Value, 0); }
  public static void AddTerrainRemarks(FlatBufferBuilder builder, StringOffset terrainRemarksOffset) { builder.AddOffset(22, terrainRemarksOffset.Value, 0); }
  public static void AddZoneName(FlatBufferBuilder builder, StringOffset zoneNameOffset) { builder.AddOffset(23, zoneNameOffset.Value, 0); }
  public static void AddZoneMarking(FlatBufferBuilder builder, StringOffset zoneMarkingOffset) { builder.AddOffset(24, zoneMarkingOffset.Value, 0); }
  public static void AddZoneSecurity(FlatBufferBuilder builder, StringOffset zoneSecurityOffset) { builder.AddOffset(25, zoneSecurityOffset.Value, 0); }
  public static void AddZoneMarkingColor(FlatBufferBuilder builder, StringOffset zoneMarkingColorOffset) { builder.AddOffset(26, zoneMarkingColorOffset.Value, 0); }
  public static void AddZoneHot(FlatBufferBuilder builder, bool zoneHot) { builder.AddBool(27, zoneHot, false); }
  public static void AddCntctFreq(FlatBufferBuilder builder, double cntctFreq) { builder.AddDouble(28, cntctFreq, 0.0); }
  public static void AddZoneContrCallSign(FlatBufferBuilder builder, StringOffset zoneContrCallSignOffset) { builder.AddOffset(29, zoneContrCallSignOffset.Value, 0); }
  public static void AddNumCasualties(FlatBufferBuilder builder, int numCasualties) { builder.AddInt(30, numCasualties, 0); }
  public static void AddComments(FlatBufferBuilder builder, StringOffset commentsOffset) { builder.AddOffset(31, commentsOffset.Value, 0); }
  public static void AddCasualtyInfo(FlatBufferBuilder builder, VectorOffset casualtyInfoOffset) { builder.AddOffset(32, casualtyInfoOffset.Value, 0); }
  public static VectorOffset CreateCasualtyInfoVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCasualtyInfoVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCasualtyInfoVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCasualtyInfoVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCasualtyInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnemyData(FlatBufferBuilder builder, VectorOffset enemyDataOffset) { builder.AddOffset(33, enemyDataOffset.Value, 0); }
  public static VectorOffset CreateEnemyDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnemyDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnemyDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(34, origNetworkOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(35, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(36, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(37, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(38, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Evac_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(39, (sbyte)dataMode, 0); }
  public static Offset<Evac_Abridged> EndEvac_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Evac_Abridged>(o);
  }
  public static void FinishEvac_AbridgedBuffer(FlatBufferBuilder builder, Offset<Evac_Abridged> offset) { builder.Finish(offset.Value, "EVAC"); }
  public static void FinishSizePrefixedEvac_AbridgedBuffer(FlatBufferBuilder builder, Offset<Evac_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "EVAC"); }
  public Evac_AbridgedT UnPack() {
    var _o = new Evac_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Evac_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.MedevacId = this.MedevacId;
    _o.Type = this.Type;
    _o.MissionType = this.MissionType;
    _o.IdWeatherReport = this.IdWeatherReport;
    _o.NumKIA = this.NumKIA;
    _o.NumWIA = this.NumWIA;
    _o.NumLitter = this.NumLitter;
    _o.NumAmbulatory = this.NumAmbulatory;
    _o.MedicReq = this.MedicReq;
    _o.ReqNum = this.ReqNum;
    _o.ReqTime = this.ReqTime;
    _o.ReqCallSign = this.ReqCallSign;
    _o.PickupTime = this.PickupTime;
    _o.PickupLat = this.PickupLat;
    _o.PickupLon = this.PickupLon;
    _o.PickupAlt = this.PickupAlt;
    _o.Ce = this.Ce;
    _o.Le = this.Le;
    _o.Terrain = this.Terrain;
    _o.ObstaclesRemarks = this.ObstaclesRemarks;
    _o.TerrainRemarks = this.TerrainRemarks;
    _o.ZoneName = this.ZoneName;
    _o.ZoneMarking = this.ZoneMarking;
    _o.ZoneSecurity = this.ZoneSecurity;
    _o.ZoneMarkingColor = this.ZoneMarkingColor;
    _o.ZoneHot = this.ZoneHot;
    _o.CntctFreq = this.CntctFreq;
    _o.ZoneContrCallSign = this.ZoneContrCallSign;
    _o.NumCasualties = this.NumCasualties;
    _o.Comments = this.Comments;
    _o.CasualtyInfo = new List<string>();
    for (var _j = 0; _j < this.CasualtyInfoLength; ++_j) {_o.CasualtyInfo.Add(this.CasualtyInfo(_j));}
    _o.EnemyData = new List<string>();
    for (var _j = 0; _j < this.EnemyDataLength; ++_j) {_o.EnemyData.Add(this.EnemyData(_j));}
    _o.OrigNetwork = this.OrigNetwork;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
  }
  public static Offset<Evac_Abridged> Pack(FlatBufferBuilder builder, Evac_AbridgedT _o) {
    if (_o == null) return default(Offset<Evac_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _medevacId = _o.MedevacId == null ? default(StringOffset) : builder.CreateString(_o.MedevacId);
    var _missionType = _o.MissionType == null ? default(StringOffset) : builder.CreateString(_o.MissionType);
    var _idWeatherReport = _o.IdWeatherReport == null ? default(StringOffset) : builder.CreateString(_o.IdWeatherReport);
    var _reqNum = _o.ReqNum == null ? default(StringOffset) : builder.CreateString(_o.ReqNum);
    var _reqTime = _o.ReqTime == null ? default(StringOffset) : builder.CreateString(_o.ReqTime);
    var _reqCallSign = _o.ReqCallSign == null ? default(StringOffset) : builder.CreateString(_o.ReqCallSign);
    var _pickupTime = _o.PickupTime == null ? default(StringOffset) : builder.CreateString(_o.PickupTime);
    var _terrain = _o.Terrain == null ? default(StringOffset) : builder.CreateString(_o.Terrain);
    var _obstaclesRemarks = _o.ObstaclesRemarks == null ? default(StringOffset) : builder.CreateString(_o.ObstaclesRemarks);
    var _terrainRemarks = _o.TerrainRemarks == null ? default(StringOffset) : builder.CreateString(_o.TerrainRemarks);
    var _zoneName = _o.ZoneName == null ? default(StringOffset) : builder.CreateString(_o.ZoneName);
    var _zoneMarking = _o.ZoneMarking == null ? default(StringOffset) : builder.CreateString(_o.ZoneMarking);
    var _zoneSecurity = _o.ZoneSecurity == null ? default(StringOffset) : builder.CreateString(_o.ZoneSecurity);
    var _zoneMarkingColor = _o.ZoneMarkingColor == null ? default(StringOffset) : builder.CreateString(_o.ZoneMarkingColor);
    var _zoneContrCallSign = _o.ZoneContrCallSign == null ? default(StringOffset) : builder.CreateString(_o.ZoneContrCallSign);
    var _comments = _o.Comments == null ? default(StringOffset) : builder.CreateString(_o.Comments);
    var _casualtyInfo = default(VectorOffset);
    if (_o.CasualtyInfo != null) {
      var __casualtyInfo = new StringOffset[_o.CasualtyInfo.Count];
      for (var _j = 0; _j < __casualtyInfo.Length; ++_j) { __casualtyInfo[_j] = builder.CreateString(_o.CasualtyInfo[_j]); }
      _casualtyInfo = CreateCasualtyInfoVector(builder, __casualtyInfo);
    }
    var _enemyData = default(VectorOffset);
    if (_o.EnemyData != null) {
      var __enemyData = new StringOffset[_o.EnemyData.Count];
      for (var _j = 0; _j < __enemyData.Length; ++_j) { __enemyData[_j] = builder.CreateString(_o.EnemyData[_j]); }
      _enemyData = CreateEnemyDataVector(builder, __enemyData);
    }
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateEvac_Abridged(
      builder,
      _id,
      _classificationMarking,
      _medevacId,
      _o.Type,
      _missionType,
      _idWeatherReport,
      _o.NumKIA,
      _o.NumWIA,
      _o.NumLitter,
      _o.NumAmbulatory,
      _o.MedicReq,
      _reqNum,
      _reqTime,
      _reqCallSign,
      _pickupTime,
      _o.PickupLat,
      _o.PickupLon,
      _o.PickupAlt,
      _o.Ce,
      _o.Le,
      _terrain,
      _obstaclesRemarks,
      _terrainRemarks,
      _zoneName,
      _zoneMarking,
      _zoneSecurity,
      _zoneMarkingColor,
      _o.ZoneHot,
      _o.CntctFreq,
      _zoneContrCallSign,
      _o.NumCasualties,
      _comments,
      _casualtyInfo,
      _enemyData,
      _origNetwork,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode);
  }
}

public class Evac_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string MedevacId { get; set; }
  public Evac_Abridged_type_Enum Type { get; set; }
  public string MissionType { get; set; }
  public string IdWeatherReport { get; set; }
  public int NumKIA { get; set; }
  public int NumWIA { get; set; }
  public int NumLitter { get; set; }
  public int NumAmbulatory { get; set; }
  public bool MedicReq { get; set; }
  public string ReqNum { get; set; }
  public string ReqTime { get; set; }
  public string ReqCallSign { get; set; }
  public string PickupTime { get; set; }
  public double PickupLat { get; set; }
  public double PickupLon { get; set; }
  public double PickupAlt { get; set; }
  public double Ce { get; set; }
  public double Le { get; set; }
  public string Terrain { get; set; }
  public string ObstaclesRemarks { get; set; }
  public string TerrainRemarks { get; set; }
  public string ZoneName { get; set; }
  public string ZoneMarking { get; set; }
  public string ZoneSecurity { get; set; }
  public string ZoneMarkingColor { get; set; }
  public bool ZoneHot { get; set; }
  public double CntctFreq { get; set; }
  public string ZoneContrCallSign { get; set; }
  public int NumCasualties { get; set; }
  public string Comments { get; set; }
  public List<string> CasualtyInfo { get; set; }
  public List<string> EnemyData { get; set; }
  public string OrigNetwork { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Evac_Abridged_dataMode_Enum DataMode { get; set; }

  public Evac_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.MedevacId = null;
    this.Type = Evac_Abridged_type_Enum.REQUEST;
    this.MissionType = null;
    this.IdWeatherReport = null;
    this.NumKIA = 0;
    this.NumWIA = 0;
    this.NumLitter = 0;
    this.NumAmbulatory = 0;
    this.MedicReq = false;
    this.ReqNum = null;
    this.ReqTime = null;
    this.ReqCallSign = null;
    this.PickupTime = null;
    this.PickupLat = 0.0;
    this.PickupLon = 0.0;
    this.PickupAlt = 0.0;
    this.Ce = 0.0;
    this.Le = 0.0;
    this.Terrain = null;
    this.ObstaclesRemarks = null;
    this.TerrainRemarks = null;
    this.ZoneName = null;
    this.ZoneMarking = null;
    this.ZoneSecurity = null;
    this.ZoneMarkingColor = null;
    this.ZoneHot = false;
    this.CntctFreq = 0.0;
    this.ZoneContrCallSign = null;
    this.NumCasualties = 0;
    this.Comments = null;
    this.CasualtyInfo = null;
    this.EnemyData = null;
    this.OrigNetwork = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Evac_Abridged_dataMode_Enum.REAL;
  }
  public static Evac_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Evac_Abridged.GetRootAsEvac_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Evac_Abridged.FinishEvac_AbridgedBuffer(fbb, Evac_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Evac_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*MedevacId*/, false)
      && verifier.VerifyField(tablePos, 10 /*Type*/, 1 /*Evac_Abridged_type_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 12 /*MissionType*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdWeatherReport*/, false)
      && verifier.VerifyField(tablePos, 16 /*NumKIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*NumWIA*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*NumLitter*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*NumAmbulatory*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*MedicReq*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 26 /*ReqNum*/, false)
      && verifier.VerifyString(tablePos, 28 /*ReqTime*/, false)
      && verifier.VerifyString(tablePos, 30 /*ReqCallSign*/, false)
      && verifier.VerifyString(tablePos, 32 /*PickupTime*/, false)
      && verifier.VerifyField(tablePos, 34 /*PickupLat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 36 /*PickupLon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*PickupAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*Ce*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Le*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 44 /*Terrain*/, false)
      && verifier.VerifyString(tablePos, 46 /*ObstaclesRemarks*/, false)
      && verifier.VerifyString(tablePos, 48 /*TerrainRemarks*/, false)
      && verifier.VerifyString(tablePos, 50 /*ZoneName*/, false)
      && verifier.VerifyString(tablePos, 52 /*ZoneMarking*/, false)
      && verifier.VerifyString(tablePos, 54 /*ZoneSecurity*/, false)
      && verifier.VerifyString(tablePos, 56 /*ZoneMarkingColor*/, false)
      && verifier.VerifyField(tablePos, 58 /*ZoneHot*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 60 /*CntctFreq*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 62 /*ZoneContrCallSign*/, false)
      && verifier.VerifyField(tablePos, 64 /*NumCasualties*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 66 /*Comments*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*CasualtyInfo*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 70 /*EnemyData*/, false)
      && verifier.VerifyString(tablePos, 72 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 76 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 78 /*Source*/, false)
      && verifier.VerifyString(tablePos, 80 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 82 /*DataMode*/, 1 /*Evac_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
