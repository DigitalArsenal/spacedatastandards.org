// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
public struct DataLinkSpecTracks_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static DataLinkSpecTracks_Full GetRootAsDataLinkSpecTracks_Full(ByteBuffer _bb) { return GetRootAsDataLinkSpecTracks_Full(_bb, new DataLinkSpecTracks_Full()); }
  public static DataLinkSpecTracks_Full GetRootAsDataLinkSpecTracks_Full(ByteBuffer _bb, DataLinkSpecTracks_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool DataLinkSpecTracks_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "DATA"); }
  public static bool VerifyDataLinkSpecTracks_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("DATA", false, DataLinkSpecTracks_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DataLinkSpecTracks_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
  /// Example: /// Example: 12345
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string SpecTrackNum { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecTrackNumBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSpecTrackNumBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSpecTrackNumArray() { return __p.__vector_as_array<byte>(4); }
  /// Description of the special track number.
  /// Example: /// Example: SAM SITE CHARLIE
  /// Constraints: Minimum length = 0, Maximum length = 40
  public string SpecTrackNumDesc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpecTrackNumDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSpecTrackNumDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSpecTrackNumDescArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<DataLinkSpecTracks_Full> CreateDataLinkSpecTracks_Full(FlatBufferBuilder builder,
      StringOffset specTrackNumOffset = default(StringOffset),
      StringOffset specTrackNumDescOffset = default(StringOffset)) {
    builder.StartTable(2);
    DataLinkSpecTracks_Full.AddSpecTrackNumDesc(builder, specTrackNumDescOffset);
    DataLinkSpecTracks_Full.AddSpecTrackNum(builder, specTrackNumOffset);
    return DataLinkSpecTracks_Full.EndDataLinkSpecTracks_Full(builder);
  }

  public static void StartDataLinkSpecTracks_Full(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSpecTrackNum(FlatBufferBuilder builder, StringOffset specTrackNumOffset) { builder.AddOffset(0, specTrackNumOffset.Value, 0); }
  public static void AddSpecTrackNumDesc(FlatBufferBuilder builder, StringOffset specTrackNumDescOffset) { builder.AddOffset(1, specTrackNumDescOffset.Value, 0); }
  public static Offset<DataLinkSpecTracks_Full> EndDataLinkSpecTracks_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DataLinkSpecTracks_Full>(o);
  }
  public static void FinishDataLinkSpecTracks_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkSpecTracks_Full> offset) { builder.Finish(offset.Value, "DATA"); }
  public static void FinishSizePrefixedDataLinkSpecTracks_FullBuffer(FlatBufferBuilder builder, Offset<DataLinkSpecTracks_Full> offset) { builder.FinishSizePrefixed(offset.Value, "DATA"); }
  public DataLinkSpecTracks_FullT UnPack() {
    var _o = new DataLinkSpecTracks_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DataLinkSpecTracks_FullT _o) {
    _o.SpecTrackNum = this.SpecTrackNum;
    _o.SpecTrackNumDesc = this.SpecTrackNumDesc;
  }
  public static Offset<DataLinkSpecTracks_Full> Pack(FlatBufferBuilder builder, DataLinkSpecTracks_FullT _o) {
    if (_o == null) return default(Offset<DataLinkSpecTracks_Full>);
    var _specTrackNum = _o.SpecTrackNum == null ? default(StringOffset) : builder.CreateString(_o.SpecTrackNum);
    var _specTrackNumDesc = _o.SpecTrackNumDesc == null ? default(StringOffset) : builder.CreateString(_o.SpecTrackNumDesc);
    return CreateDataLinkSpecTracks_Full(
      builder,
      _specTrackNum,
      _specTrackNumDesc);
  }
}

public class DataLinkSpecTracks_FullT
{
  public string SpecTrackNum { get; set; }
  public string SpecTrackNumDesc { get; set; }

  public DataLinkSpecTracks_FullT() {
    this.SpecTrackNum = null;
    this.SpecTrackNumDesc = null;
  }
  public static DataLinkSpecTracks_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return DataLinkSpecTracks_Full.GetRootAsDataLinkSpecTracks_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DataLinkSpecTracks_Full.FinishDataLinkSpecTracks_FullBuffer(fbb, DataLinkSpecTracks_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DataLinkSpecTracks_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*SpecTrackNum*/, false)
      && verifier.VerifyString(tablePos, 6 /*SpecTrackNumDesc*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
