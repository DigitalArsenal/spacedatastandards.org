// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
public struct EOObservation_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EOObservation_Ingest GetRootAsEOObservation_Ingest(ByteBuffer _bb) { return GetRootAsEOObservation_Ingest(_bb, new EOObservation_Ingest()); }
  public static EOObservation_Ingest GetRootAsEOObservation_Ingest(ByteBuffer _bb, EOObservation_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool EOObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "EOOB"); }
  public static bool VerifyEOObservation_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("EOOB", false, EOObservation_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EOObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(8); }
  /// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double CorrQuality { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(12); }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(14); }
  /// Unique identifier of the Sky Imagery.
  /// Example: /// Example: SKYIMAGERY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSkyImagery { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSkyImageryBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIdSkyImageryBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIdSkyImageryArray() { return __p.__vector_as_array<byte>(16); }
  /// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  /// Example: /// Example: AUTOTRACK
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string CollectMethod { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCollectMethodBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCollectMethodBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCollectMethodArray() { return __p.__vector_as_array<byte>(18); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TaskId { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskIdBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetTaskIdBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetTaskIdArray() { return __p.__vector_as_array<byte>(22); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(24); }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string TrackId { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTrackIdBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTrackIdBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTrackIdArray() { return __p.__vector_as_array<byte>(26); }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  public string ObPosition { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObPositionBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetObPositionBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetObPositionArray() { return __p.__vector_as_array<byte>(28); }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(30); }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(32); }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Azimuth { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double AzimuthUnc { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor line of sight azimuth angle bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double AzimuthBias { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double AzimuthRate { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Elevation { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight elevation angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ElevationUnc { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor line of sight elevation bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ElevationBias { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ElevationRate { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight range in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Range { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight range, in kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RangeUnc { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor line of sight range bias in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RangeBias { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Rate of change of the line of sight range in km/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RangeRate { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight range rate, in kilometers/second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RangeRateUnc { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Ra { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RaRate { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RaUnc { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor line of sight right ascension bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double RaBias { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Declination { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeclinationRate { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight declination angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeclinationUnc { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor line of sight declination angle bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double DeclinationBias { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Losx { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Losy { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Losz { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// One sigma uncertainty in the line of sight pointing in micro-radians.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double LosUnc { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Losxvel { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Losyvel { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Loszvel { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  public double Senlat { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  public double Senlon { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor altitude at obTime (if mobile/onorbit) in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senalt { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senx { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Seny { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senz { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelx { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvely { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Senvelz { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
  /// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
  /// Constraints: No constraints specified.
  public string SenQuat(int j) { int o = __p.__offset(110); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SenQuatLength { get { int o = __p.__offset(110); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The number of RSOs detected in the sensor field of view.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  public int FovCount { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Image exposure duration in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ExpDuration { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Zeroptd { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Net object signature = counts / expDuration.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double NetObjSig { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Net object signature uncertainty = counts uncertainty / expDuration.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double NetObjSigUnc { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Calibrated magnitude in units of magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Mag { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Uncertainty of calibrated magnitude in units of magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MagUnc { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double MagNormRange { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For GEO detections, the latitude in degrees north.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Geolat { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For GEO detections, the longitude in degrees east.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Geolon { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For GEO detections, the altitude in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Geoalt { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// For GEO detections, the range in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Georange { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SkyBkgrnd { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PrimaryExtinction { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double PrimaryExtinctionUnc { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SolarPhaseAngle { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SolarEqPhaseAngle { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Angle from the sun to the equatorial plane.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double SolarDecAngle { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Shutter delay in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ShutterDelay { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double TimingBias { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string RawFileURI { get { int o = __p.__offset(152); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRawFileURIBytes() { return __p.__vector_as_span<byte>(152, 1); }
#else
  public ArraySegment<byte>? GetRawFileURIBytes() { return __p.__vector_as_arraysegment(152); }
#endif
  public byte[] GetRawFileURIArray() { return __p.__vector_as_array<byte>(152); }
  /// Intensity of the target for IR observations, in kw/sr/um.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double Intensity { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Background intensity for IR observations, in kw/sr/um.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double BgIntensity { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: PROVIDED_DATA1
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(158); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(158, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(158); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(158); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(160); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(160, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(160); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(160); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(162); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public EOObservation_Ingest_dataMode_Enum DataMode { get { int o = __p.__offset(164); return o != 0 ? (EOObservation_Ingest_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EOObservation_Ingest_dataMode_Enum.REAL; } }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(166); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(166); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(168); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(168, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(168); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(168); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(170); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(170, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(170); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(170); }
  /// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  public double ZeroPtdUnc { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string EoobservationDetails { get { int o = __p.__offset(174); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEoobservationDetailsBytes() { return __p.__vector_as_span<byte>(174, 1); }
#else
  public ArraySegment<byte>? GetEoobservationDetailsBytes() { return __p.__vector_as_arraysegment(174); }
#endif
  public byte[] GetEoobservationDetailsArray() { return __p.__vector_as_array<byte>(174); }
  /// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public EOObservation_Ingest_referenceFrame_Enum ReferenceFrame { get { int o = __p.__offset(176); return o != 0 ? (EOObservation_Ingest_referenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EOObservation_Ingest_referenceFrame_Enum.J2000; } }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  public EOObservation_Ingest_senReferenceFrame_Enum SenReferenceFrame { get { int o = __p.__offset(178); return o != 0 ? (EOObservation_Ingest_senReferenceFrame_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : EOObservation_Ingest_senReferenceFrame_Enum.J2000; } }
  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Umbra { get { int o = __p.__offset(180); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Penumbra { get { int o = __p.__offset(182); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(184); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(184, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(184); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(184); }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string SourceDL { get { int o = __p.__offset(186); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceDLBytes() { return __p.__vector_as_span<byte>(186, 1); }
#else
  public ArraySegment<byte>? GetSourceDLBytes() { return __p.__vector_as_arraysegment(186); }
#endif
  public byte[] GetSourceDLArray() { return __p.__vector_as_array<byte>(186); }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: OPTICAL
  /// Constraints: No constraints specified.
  public string Type { get { int o = __p.__offset(188); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(188, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(188); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(188); }

  public static Offset<EOObservation_Ingest> CreateEOObservation_Ingest(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      double corrQuality = 0.0,
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset idSkyImageryOffset = default(StringOffset),
      StringOffset collectMethodOffset = default(StringOffset),
      int satNo = 0,
      StringOffset taskIdOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset trackIdOffset = default(StringOffset),
      StringOffset obPositionOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      bool uct = false,
      double azimuth = 0.0,
      double azimuthUnc = 0.0,
      double azimuthBias = 0.0,
      double azimuthRate = 0.0,
      double elevation = 0.0,
      double elevationUnc = 0.0,
      double elevationBias = 0.0,
      double elevationRate = 0.0,
      double range = 0.0,
      double rangeUnc = 0.0,
      double rangeBias = 0.0,
      double rangeRate = 0.0,
      double rangeRateUnc = 0.0,
      double ra = 0.0,
      double raRate = 0.0,
      double raUnc = 0.0,
      double raBias = 0.0,
      double declination = 0.0,
      double declinationRate = 0.0,
      double declinationUnc = 0.0,
      double declinationBias = 0.0,
      double losx = 0.0,
      double losy = 0.0,
      double losz = 0.0,
      double losUnc = 0.0,
      double losxvel = 0.0,
      double losyvel = 0.0,
      double loszvel = 0.0,
      double senlat = 0.0,
      double senlon = 0.0,
      double senalt = 0.0,
      double senx = 0.0,
      double seny = 0.0,
      double senz = 0.0,
      double senvelx = 0.0,
      double senvely = 0.0,
      double senvelz = 0.0,
      VectorOffset senQuatOffset = default(VectorOffset),
      int fovCount = 0,
      double expDuration = 0.0,
      double zeroptd = 0.0,
      double netObjSig = 0.0,
      double netObjSigUnc = 0.0,
      double mag = 0.0,
      double magUnc = 0.0,
      double magNormRange = 0.0,
      double geolat = 0.0,
      double geolon = 0.0,
      double geoalt = 0.0,
      double georange = 0.0,
      double skyBkgrnd = 0.0,
      double primaryExtinction = 0.0,
      double primaryExtinctionUnc = 0.0,
      double solarPhaseAngle = 0.0,
      double solarEqPhaseAngle = 0.0,
      double solarDecAngle = 0.0,
      double shutterDelay = 0.0,
      double timingBias = 0.0,
      StringOffset rawFileURIOffset = default(StringOffset),
      double intensity = 0.0,
      double bgIntensity = 0.0,
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      EOObservation_Ingest_dataMode_Enum dataMode = EOObservation_Ingest_dataMode_Enum.REAL,
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      double zeroPtdUnc = 0.0,
      StringOffset eoobservationDetailsOffset = default(StringOffset),
      EOObservation_Ingest_referenceFrame_Enum referenceFrame = EOObservation_Ingest_referenceFrame_Enum.J2000,
      EOObservation_Ingest_senReferenceFrame_Enum senReferenceFrame = EOObservation_Ingest_senReferenceFrame_Enum.J2000,
      bool umbra = false,
      bool penumbra = false,
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset sourceDLOffset = default(StringOffset),
      StringOffset typeOffset = default(StringOffset)) {
    builder.StartTable(93);
    EOObservation_Ingest.AddZeroPtdUnc(builder, zeroPtdUnc);
    EOObservation_Ingest.AddBgIntensity(builder, bgIntensity);
    EOObservation_Ingest.AddIntensity(builder, intensity);
    EOObservation_Ingest.AddTimingBias(builder, timingBias);
    EOObservation_Ingest.AddShutterDelay(builder, shutterDelay);
    EOObservation_Ingest.AddSolarDecAngle(builder, solarDecAngle);
    EOObservation_Ingest.AddSolarEqPhaseAngle(builder, solarEqPhaseAngle);
    EOObservation_Ingest.AddSolarPhaseAngle(builder, solarPhaseAngle);
    EOObservation_Ingest.AddPrimaryExtinctionUnc(builder, primaryExtinctionUnc);
    EOObservation_Ingest.AddPrimaryExtinction(builder, primaryExtinction);
    EOObservation_Ingest.AddSkyBkgrnd(builder, skyBkgrnd);
    EOObservation_Ingest.AddGeorange(builder, georange);
    EOObservation_Ingest.AddGeoalt(builder, geoalt);
    EOObservation_Ingest.AddGeolon(builder, geolon);
    EOObservation_Ingest.AddGeolat(builder, geolat);
    EOObservation_Ingest.AddMagNormRange(builder, magNormRange);
    EOObservation_Ingest.AddMagUnc(builder, magUnc);
    EOObservation_Ingest.AddMag(builder, mag);
    EOObservation_Ingest.AddNetObjSigUnc(builder, netObjSigUnc);
    EOObservation_Ingest.AddNetObjSig(builder, netObjSig);
    EOObservation_Ingest.AddZeroptd(builder, zeroptd);
    EOObservation_Ingest.AddExpDuration(builder, expDuration);
    EOObservation_Ingest.AddSenvelz(builder, senvelz);
    EOObservation_Ingest.AddSenvely(builder, senvely);
    EOObservation_Ingest.AddSenvelx(builder, senvelx);
    EOObservation_Ingest.AddSenz(builder, senz);
    EOObservation_Ingest.AddSeny(builder, seny);
    EOObservation_Ingest.AddSenx(builder, senx);
    EOObservation_Ingest.AddSenalt(builder, senalt);
    EOObservation_Ingest.AddSenlon(builder, senlon);
    EOObservation_Ingest.AddSenlat(builder, senlat);
    EOObservation_Ingest.AddLoszvel(builder, loszvel);
    EOObservation_Ingest.AddLosyvel(builder, losyvel);
    EOObservation_Ingest.AddLosxvel(builder, losxvel);
    EOObservation_Ingest.AddLosUnc(builder, losUnc);
    EOObservation_Ingest.AddLosz(builder, losz);
    EOObservation_Ingest.AddLosy(builder, losy);
    EOObservation_Ingest.AddLosx(builder, losx);
    EOObservation_Ingest.AddDeclinationBias(builder, declinationBias);
    EOObservation_Ingest.AddDeclinationUnc(builder, declinationUnc);
    EOObservation_Ingest.AddDeclinationRate(builder, declinationRate);
    EOObservation_Ingest.AddDeclination(builder, declination);
    EOObservation_Ingest.AddRaBias(builder, raBias);
    EOObservation_Ingest.AddRaUnc(builder, raUnc);
    EOObservation_Ingest.AddRaRate(builder, raRate);
    EOObservation_Ingest.AddRa(builder, ra);
    EOObservation_Ingest.AddRangeRateUnc(builder, rangeRateUnc);
    EOObservation_Ingest.AddRangeRate(builder, rangeRate);
    EOObservation_Ingest.AddRangeBias(builder, rangeBias);
    EOObservation_Ingest.AddRangeUnc(builder, rangeUnc);
    EOObservation_Ingest.AddRange(builder, range);
    EOObservation_Ingest.AddElevationRate(builder, elevationRate);
    EOObservation_Ingest.AddElevationBias(builder, elevationBias);
    EOObservation_Ingest.AddElevationUnc(builder, elevationUnc);
    EOObservation_Ingest.AddElevation(builder, elevation);
    EOObservation_Ingest.AddAzimuthRate(builder, azimuthRate);
    EOObservation_Ingest.AddAzimuthBias(builder, azimuthBias);
    EOObservation_Ingest.AddAzimuthUnc(builder, azimuthUnc);
    EOObservation_Ingest.AddAzimuth(builder, azimuth);
    EOObservation_Ingest.AddCorrQuality(builder, corrQuality);
    EOObservation_Ingest.AddType(builder, typeOffset);
    EOObservation_Ingest.AddSourceDL(builder, sourceDLOffset);
    EOObservation_Ingest.AddOrigNetwork(builder, origNetworkOffset);
    EOObservation_Ingest.AddEoobservationDetails(builder, eoobservationDetailsOffset);
    EOObservation_Ingest.AddCreatedBy(builder, createdByOffset);
    EOObservation_Ingest.AddCreatedAt(builder, createdAtOffset);
    EOObservation_Ingest.AddTags(builder, tagsOffset);
    EOObservation_Ingest.AddOrigin(builder, originOffset);
    EOObservation_Ingest.AddSource(builder, sourceOffset);
    EOObservation_Ingest.AddDescriptor(builder, descriptorOffset);
    EOObservation_Ingest.AddRawFileURI(builder, rawFileURIOffset);
    EOObservation_Ingest.AddFovCount(builder, fovCount);
    EOObservation_Ingest.AddSenQuat(builder, senQuatOffset);
    EOObservation_Ingest.AddOrigSensorId(builder, origSensorIdOffset);
    EOObservation_Ingest.AddOrigObjectId(builder, origObjectIdOffset);
    EOObservation_Ingest.AddObPosition(builder, obPositionOffset);
    EOObservation_Ingest.AddTrackId(builder, trackIdOffset);
    EOObservation_Ingest.AddTransactionId(builder, transactionIdOffset);
    EOObservation_Ingest.AddTaskId(builder, taskIdOffset);
    EOObservation_Ingest.AddSatNo(builder, satNo);
    EOObservation_Ingest.AddCollectMethod(builder, collectMethodOffset);
    EOObservation_Ingest.AddIdSkyImagery(builder, idSkyImageryOffset);
    EOObservation_Ingest.AddIdSensor(builder, idSensorOffset);
    EOObservation_Ingest.AddIdOnOrbit(builder, idOnOrbitOffset);
    EOObservation_Ingest.AddObTime(builder, obTimeOffset);
    EOObservation_Ingest.AddClassificationMarking(builder, classificationMarkingOffset);
    EOObservation_Ingest.AddId(builder, idOffset);
    EOObservation_Ingest.AddPenumbra(builder, penumbra);
    EOObservation_Ingest.AddUmbra(builder, umbra);
    EOObservation_Ingest.AddSenReferenceFrame(builder, senReferenceFrame);
    EOObservation_Ingest.AddReferenceFrame(builder, referenceFrame);
    EOObservation_Ingest.AddDataMode(builder, dataMode);
    EOObservation_Ingest.AddUct(builder, uct);
    return EOObservation_Ingest.EndEOObservation_Ingest(builder);
  }

  public static void StartEOObservation_Ingest(FlatBufferBuilder builder) { builder.StartTable(93); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(2, obTimeOffset.Value, 0); }
  public static void AddCorrQuality(FlatBufferBuilder builder, double corrQuality) { builder.AddDouble(3, corrQuality, 0.0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(4, idOnOrbitOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(5, idSensorOffset.Value, 0); }
  public static void AddIdSkyImagery(FlatBufferBuilder builder, StringOffset idSkyImageryOffset) { builder.AddOffset(6, idSkyImageryOffset.Value, 0); }
  public static void AddCollectMethod(FlatBufferBuilder builder, StringOffset collectMethodOffset) { builder.AddOffset(7, collectMethodOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(8, satNo, 0); }
  public static void AddTaskId(FlatBufferBuilder builder, StringOffset taskIdOffset) { builder.AddOffset(9, taskIdOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(10, transactionIdOffset.Value, 0); }
  public static void AddTrackId(FlatBufferBuilder builder, StringOffset trackIdOffset) { builder.AddOffset(11, trackIdOffset.Value, 0); }
  public static void AddObPosition(FlatBufferBuilder builder, StringOffset obPositionOffset) { builder.AddOffset(12, obPositionOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(13, origObjectIdOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(14, origSensorIdOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(15, uct, false); }
  public static void AddAzimuth(FlatBufferBuilder builder, double azimuth) { builder.AddDouble(16, azimuth, 0.0); }
  public static void AddAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.AddDouble(17, azimuthUnc, 0.0); }
  public static void AddAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.AddDouble(18, azimuthBias, 0.0); }
  public static void AddAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.AddDouble(19, azimuthRate, 0.0); }
  public static void AddElevation(FlatBufferBuilder builder, double elevation) { builder.AddDouble(20, elevation, 0.0); }
  public static void AddElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.AddDouble(21, elevationUnc, 0.0); }
  public static void AddElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.AddDouble(22, elevationBias, 0.0); }
  public static void AddElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.AddDouble(23, elevationRate, 0.0); }
  public static void AddRange(FlatBufferBuilder builder, double range) { builder.AddDouble(24, range, 0.0); }
  public static void AddRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.AddDouble(25, rangeUnc, 0.0); }
  public static void AddRangeBias(FlatBufferBuilder builder, double rangeBias) { builder.AddDouble(26, rangeBias, 0.0); }
  public static void AddRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.AddDouble(27, rangeRate, 0.0); }
  public static void AddRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.AddDouble(28, rangeRateUnc, 0.0); }
  public static void AddRa(FlatBufferBuilder builder, double ra) { builder.AddDouble(29, ra, 0.0); }
  public static void AddRaRate(FlatBufferBuilder builder, double raRate) { builder.AddDouble(30, raRate, 0.0); }
  public static void AddRaUnc(FlatBufferBuilder builder, double raUnc) { builder.AddDouble(31, raUnc, 0.0); }
  public static void AddRaBias(FlatBufferBuilder builder, double raBias) { builder.AddDouble(32, raBias, 0.0); }
  public static void AddDeclination(FlatBufferBuilder builder, double declination) { builder.AddDouble(33, declination, 0.0); }
  public static void AddDeclinationRate(FlatBufferBuilder builder, double declinationRate) { builder.AddDouble(34, declinationRate, 0.0); }
  public static void AddDeclinationUnc(FlatBufferBuilder builder, double declinationUnc) { builder.AddDouble(35, declinationUnc, 0.0); }
  public static void AddDeclinationBias(FlatBufferBuilder builder, double declinationBias) { builder.AddDouble(36, declinationBias, 0.0); }
  public static void AddLosx(FlatBufferBuilder builder, double losx) { builder.AddDouble(37, losx, 0.0); }
  public static void AddLosy(FlatBufferBuilder builder, double losy) { builder.AddDouble(38, losy, 0.0); }
  public static void AddLosz(FlatBufferBuilder builder, double losz) { builder.AddDouble(39, losz, 0.0); }
  public static void AddLosUnc(FlatBufferBuilder builder, double losUnc) { builder.AddDouble(40, losUnc, 0.0); }
  public static void AddLosxvel(FlatBufferBuilder builder, double losxvel) { builder.AddDouble(41, losxvel, 0.0); }
  public static void AddLosyvel(FlatBufferBuilder builder, double losyvel) { builder.AddDouble(42, losyvel, 0.0); }
  public static void AddLoszvel(FlatBufferBuilder builder, double loszvel) { builder.AddDouble(43, loszvel, 0.0); }
  public static void AddSenlat(FlatBufferBuilder builder, double senlat) { builder.AddDouble(44, senlat, 0.0); }
  public static void AddSenlon(FlatBufferBuilder builder, double senlon) { builder.AddDouble(45, senlon, 0.0); }
  public static void AddSenalt(FlatBufferBuilder builder, double senalt) { builder.AddDouble(46, senalt, 0.0); }
  public static void AddSenx(FlatBufferBuilder builder, double senx) { builder.AddDouble(47, senx, 0.0); }
  public static void AddSeny(FlatBufferBuilder builder, double seny) { builder.AddDouble(48, seny, 0.0); }
  public static void AddSenz(FlatBufferBuilder builder, double senz) { builder.AddDouble(49, senz, 0.0); }
  public static void AddSenvelx(FlatBufferBuilder builder, double senvelx) { builder.AddDouble(50, senvelx, 0.0); }
  public static void AddSenvely(FlatBufferBuilder builder, double senvely) { builder.AddDouble(51, senvely, 0.0); }
  public static void AddSenvelz(FlatBufferBuilder builder, double senvelz) { builder.AddDouble(52, senvelz, 0.0); }
  public static void AddSenQuat(FlatBufferBuilder builder, VectorOffset senQuatOffset) { builder.AddOffset(53, senQuatOffset.Value, 0); }
  public static VectorOffset CreateSenQuatVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSenQuatVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSenQuatVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFovCount(FlatBufferBuilder builder, int fovCount) { builder.AddInt(54, fovCount, 0); }
  public static void AddExpDuration(FlatBufferBuilder builder, double expDuration) { builder.AddDouble(55, expDuration, 0.0); }
  public static void AddZeroptd(FlatBufferBuilder builder, double zeroptd) { builder.AddDouble(56, zeroptd, 0.0); }
  public static void AddNetObjSig(FlatBufferBuilder builder, double netObjSig) { builder.AddDouble(57, netObjSig, 0.0); }
  public static void AddNetObjSigUnc(FlatBufferBuilder builder, double netObjSigUnc) { builder.AddDouble(58, netObjSigUnc, 0.0); }
  public static void AddMag(FlatBufferBuilder builder, double mag) { builder.AddDouble(59, mag, 0.0); }
  public static void AddMagUnc(FlatBufferBuilder builder, double magUnc) { builder.AddDouble(60, magUnc, 0.0); }
  public static void AddMagNormRange(FlatBufferBuilder builder, double magNormRange) { builder.AddDouble(61, magNormRange, 0.0); }
  public static void AddGeolat(FlatBufferBuilder builder, double geolat) { builder.AddDouble(62, geolat, 0.0); }
  public static void AddGeolon(FlatBufferBuilder builder, double geolon) { builder.AddDouble(63, geolon, 0.0); }
  public static void AddGeoalt(FlatBufferBuilder builder, double geoalt) { builder.AddDouble(64, geoalt, 0.0); }
  public static void AddGeorange(FlatBufferBuilder builder, double georange) { builder.AddDouble(65, georange, 0.0); }
  public static void AddSkyBkgrnd(FlatBufferBuilder builder, double skyBkgrnd) { builder.AddDouble(66, skyBkgrnd, 0.0); }
  public static void AddPrimaryExtinction(FlatBufferBuilder builder, double primaryExtinction) { builder.AddDouble(67, primaryExtinction, 0.0); }
  public static void AddPrimaryExtinctionUnc(FlatBufferBuilder builder, double primaryExtinctionUnc) { builder.AddDouble(68, primaryExtinctionUnc, 0.0); }
  public static void AddSolarPhaseAngle(FlatBufferBuilder builder, double solarPhaseAngle) { builder.AddDouble(69, solarPhaseAngle, 0.0); }
  public static void AddSolarEqPhaseAngle(FlatBufferBuilder builder, double solarEqPhaseAngle) { builder.AddDouble(70, solarEqPhaseAngle, 0.0); }
  public static void AddSolarDecAngle(FlatBufferBuilder builder, double solarDecAngle) { builder.AddDouble(71, solarDecAngle, 0.0); }
  public static void AddShutterDelay(FlatBufferBuilder builder, double shutterDelay) { builder.AddDouble(72, shutterDelay, 0.0); }
  public static void AddTimingBias(FlatBufferBuilder builder, double timingBias) { builder.AddDouble(73, timingBias, 0.0); }
  public static void AddRawFileURI(FlatBufferBuilder builder, StringOffset rawFileURIOffset) { builder.AddOffset(74, rawFileURIOffset.Value, 0); }
  public static void AddIntensity(FlatBufferBuilder builder, double intensity) { builder.AddDouble(75, intensity, 0.0); }
  public static void AddBgIntensity(FlatBufferBuilder builder, double bgIntensity) { builder.AddDouble(76, bgIntensity, 0.0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(77, descriptorOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(78, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(79, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, EOObservation_Ingest_dataMode_Enum dataMode) { builder.AddSbyte(80, (sbyte)dataMode, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(81, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(82, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(83, createdByOffset.Value, 0); }
  public static void AddZeroPtdUnc(FlatBufferBuilder builder, double zeroPtdUnc) { builder.AddDouble(84, zeroPtdUnc, 0.0); }
  public static void AddEoobservationDetails(FlatBufferBuilder builder, StringOffset eoobservationDetailsOffset) { builder.AddOffset(85, eoobservationDetailsOffset.Value, 0); }
  public static void AddReferenceFrame(FlatBufferBuilder builder, EOObservation_Ingest_referenceFrame_Enum referenceFrame) { builder.AddSbyte(86, (sbyte)referenceFrame, 0); }
  public static void AddSenReferenceFrame(FlatBufferBuilder builder, EOObservation_Ingest_senReferenceFrame_Enum senReferenceFrame) { builder.AddSbyte(87, (sbyte)senReferenceFrame, 0); }
  public static void AddUmbra(FlatBufferBuilder builder, bool umbra) { builder.AddBool(88, umbra, false); }
  public static void AddPenumbra(FlatBufferBuilder builder, bool penumbra) { builder.AddBool(89, penumbra, false); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(90, origNetworkOffset.Value, 0); }
  public static void AddSourceDL(FlatBufferBuilder builder, StringOffset sourceDLOffset) { builder.AddOffset(91, sourceDLOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(92, typeOffset.Value, 0); }
  public static Offset<EOObservation_Ingest> EndEOObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EOObservation_Ingest>(o);
  }
  public static void FinishEOObservation_IngestBuffer(FlatBufferBuilder builder, Offset<EOObservation_Ingest> offset) { builder.Finish(offset.Value, "EOOB"); }
  public static void FinishSizePrefixedEOObservation_IngestBuffer(FlatBufferBuilder builder, Offset<EOObservation_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "EOOB"); }
  public EOObservation_IngestT UnPack() {
    var _o = new EOObservation_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EOObservation_IngestT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.ObTime = this.ObTime;
    _o.CorrQuality = this.CorrQuality;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSensor = this.IdSensor;
    _o.IdSkyImagery = this.IdSkyImagery;
    _o.CollectMethod = this.CollectMethod;
    _o.SatNo = this.SatNo;
    _o.TaskId = this.TaskId;
    _o.TransactionId = this.TransactionId;
    _o.TrackId = this.TrackId;
    _o.ObPosition = this.ObPosition;
    _o.OrigObjectId = this.OrigObjectId;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Uct = this.Uct;
    _o.Azimuth = this.Azimuth;
    _o.AzimuthUnc = this.AzimuthUnc;
    _o.AzimuthBias = this.AzimuthBias;
    _o.AzimuthRate = this.AzimuthRate;
    _o.Elevation = this.Elevation;
    _o.ElevationUnc = this.ElevationUnc;
    _o.ElevationBias = this.ElevationBias;
    _o.ElevationRate = this.ElevationRate;
    _o.Range = this.Range;
    _o.RangeUnc = this.RangeUnc;
    _o.RangeBias = this.RangeBias;
    _o.RangeRate = this.RangeRate;
    _o.RangeRateUnc = this.RangeRateUnc;
    _o.Ra = this.Ra;
    _o.RaRate = this.RaRate;
    _o.RaUnc = this.RaUnc;
    _o.RaBias = this.RaBias;
    _o.Declination = this.Declination;
    _o.DeclinationRate = this.DeclinationRate;
    _o.DeclinationUnc = this.DeclinationUnc;
    _o.DeclinationBias = this.DeclinationBias;
    _o.Losx = this.Losx;
    _o.Losy = this.Losy;
    _o.Losz = this.Losz;
    _o.LosUnc = this.LosUnc;
    _o.Losxvel = this.Losxvel;
    _o.Losyvel = this.Losyvel;
    _o.Loszvel = this.Loszvel;
    _o.Senlat = this.Senlat;
    _o.Senlon = this.Senlon;
    _o.Senalt = this.Senalt;
    _o.Senx = this.Senx;
    _o.Seny = this.Seny;
    _o.Senz = this.Senz;
    _o.Senvelx = this.Senvelx;
    _o.Senvely = this.Senvely;
    _o.Senvelz = this.Senvelz;
    _o.SenQuat = new List<string>();
    for (var _j = 0; _j < this.SenQuatLength; ++_j) {_o.SenQuat.Add(this.SenQuat(_j));}
    _o.FovCount = this.FovCount;
    _o.ExpDuration = this.ExpDuration;
    _o.Zeroptd = this.Zeroptd;
    _o.NetObjSig = this.NetObjSig;
    _o.NetObjSigUnc = this.NetObjSigUnc;
    _o.Mag = this.Mag;
    _o.MagUnc = this.MagUnc;
    _o.MagNormRange = this.MagNormRange;
    _o.Geolat = this.Geolat;
    _o.Geolon = this.Geolon;
    _o.Geoalt = this.Geoalt;
    _o.Georange = this.Georange;
    _o.SkyBkgrnd = this.SkyBkgrnd;
    _o.PrimaryExtinction = this.PrimaryExtinction;
    _o.PrimaryExtinctionUnc = this.PrimaryExtinctionUnc;
    _o.SolarPhaseAngle = this.SolarPhaseAngle;
    _o.SolarEqPhaseAngle = this.SolarEqPhaseAngle;
    _o.SolarDecAngle = this.SolarDecAngle;
    _o.ShutterDelay = this.ShutterDelay;
    _o.TimingBias = this.TimingBias;
    _o.RawFileURI = this.RawFileURI;
    _o.Intensity = this.Intensity;
    _o.BgIntensity = this.BgIntensity;
    _o.Descriptor = this.Descriptor;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.ZeroPtdUnc = this.ZeroPtdUnc;
    _o.EoobservationDetails = this.EoobservationDetails;
    _o.ReferenceFrame = this.ReferenceFrame;
    _o.SenReferenceFrame = this.SenReferenceFrame;
    _o.Umbra = this.Umbra;
    _o.Penumbra = this.Penumbra;
    _o.OrigNetwork = this.OrigNetwork;
    _o.SourceDL = this.SourceDL;
    _o.Type = this.Type;
  }
  public static Offset<EOObservation_Ingest> Pack(FlatBufferBuilder builder, EOObservation_IngestT _o) {
    if (_o == null) return default(Offset<EOObservation_Ingest>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _idSkyImagery = _o.IdSkyImagery == null ? default(StringOffset) : builder.CreateString(_o.IdSkyImagery);
    var _collectMethod = _o.CollectMethod == null ? default(StringOffset) : builder.CreateString(_o.CollectMethod);
    var _taskId = _o.TaskId == null ? default(StringOffset) : builder.CreateString(_o.TaskId);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _trackId = _o.TrackId == null ? default(StringOffset) : builder.CreateString(_o.TrackId);
    var _obPosition = _o.ObPosition == null ? default(StringOffset) : builder.CreateString(_o.ObPosition);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _senQuat = default(VectorOffset);
    if (_o.SenQuat != null) {
      var __senQuat = new StringOffset[_o.SenQuat.Count];
      for (var _j = 0; _j < __senQuat.Length; ++_j) { __senQuat[_j] = builder.CreateString(_o.SenQuat[_j]); }
      _senQuat = CreateSenQuatVector(builder, __senQuat);
    }
    var _rawFileURI = _o.RawFileURI == null ? default(StringOffset) : builder.CreateString(_o.RawFileURI);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _eoobservationDetails = _o.EoobservationDetails == null ? default(StringOffset) : builder.CreateString(_o.EoobservationDetails);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _sourceDL = _o.SourceDL == null ? default(StringOffset) : builder.CreateString(_o.SourceDL);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    return CreateEOObservation_Ingest(
      builder,
      _id,
      _classificationMarking,
      _obTime,
      _o.CorrQuality,
      _idOnOrbit,
      _idSensor,
      _idSkyImagery,
      _collectMethod,
      _o.SatNo,
      _taskId,
      _transactionId,
      _trackId,
      _obPosition,
      _origObjectId,
      _origSensorId,
      _o.Uct,
      _o.Azimuth,
      _o.AzimuthUnc,
      _o.AzimuthBias,
      _o.AzimuthRate,
      _o.Elevation,
      _o.ElevationUnc,
      _o.ElevationBias,
      _o.ElevationRate,
      _o.Range,
      _o.RangeUnc,
      _o.RangeBias,
      _o.RangeRate,
      _o.RangeRateUnc,
      _o.Ra,
      _o.RaRate,
      _o.RaUnc,
      _o.RaBias,
      _o.Declination,
      _o.DeclinationRate,
      _o.DeclinationUnc,
      _o.DeclinationBias,
      _o.Losx,
      _o.Losy,
      _o.Losz,
      _o.LosUnc,
      _o.Losxvel,
      _o.Losyvel,
      _o.Loszvel,
      _o.Senlat,
      _o.Senlon,
      _o.Senalt,
      _o.Senx,
      _o.Seny,
      _o.Senz,
      _o.Senvelx,
      _o.Senvely,
      _o.Senvelz,
      _senQuat,
      _o.FovCount,
      _o.ExpDuration,
      _o.Zeroptd,
      _o.NetObjSig,
      _o.NetObjSigUnc,
      _o.Mag,
      _o.MagUnc,
      _o.MagNormRange,
      _o.Geolat,
      _o.Geolon,
      _o.Geoalt,
      _o.Georange,
      _o.SkyBkgrnd,
      _o.PrimaryExtinction,
      _o.PrimaryExtinctionUnc,
      _o.SolarPhaseAngle,
      _o.SolarEqPhaseAngle,
      _o.SolarDecAngle,
      _o.ShutterDelay,
      _o.TimingBias,
      _rawFileURI,
      _o.Intensity,
      _o.BgIntensity,
      _descriptor,
      _source,
      _origin,
      _o.DataMode,
      _tags,
      _createdAt,
      _createdBy,
      _o.ZeroPtdUnc,
      _eoobservationDetails,
      _o.ReferenceFrame,
      _o.SenReferenceFrame,
      _o.Umbra,
      _o.Penumbra,
      _origNetwork,
      _sourceDL,
      _type);
  }
}

public class EOObservation_IngestT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string ObTime { get; set; }
  public double CorrQuality { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSensor { get; set; }
  public string IdSkyImagery { get; set; }
  public string CollectMethod { get; set; }
  public int SatNo { get; set; }
  public string TaskId { get; set; }
  public string TransactionId { get; set; }
  public string TrackId { get; set; }
  public string ObPosition { get; set; }
  public string OrigObjectId { get; set; }
  public string OrigSensorId { get; set; }
  public bool Uct { get; set; }
  public double Azimuth { get; set; }
  public double AzimuthUnc { get; set; }
  public double AzimuthBias { get; set; }
  public double AzimuthRate { get; set; }
  public double Elevation { get; set; }
  public double ElevationUnc { get; set; }
  public double ElevationBias { get; set; }
  public double ElevationRate { get; set; }
  public double Range { get; set; }
  public double RangeUnc { get; set; }
  public double RangeBias { get; set; }
  public double RangeRate { get; set; }
  public double RangeRateUnc { get; set; }
  public double Ra { get; set; }
  public double RaRate { get; set; }
  public double RaUnc { get; set; }
  public double RaBias { get; set; }
  public double Declination { get; set; }
  public double DeclinationRate { get; set; }
  public double DeclinationUnc { get; set; }
  public double DeclinationBias { get; set; }
  public double Losx { get; set; }
  public double Losy { get; set; }
  public double Losz { get; set; }
  public double LosUnc { get; set; }
  public double Losxvel { get; set; }
  public double Losyvel { get; set; }
  public double Loszvel { get; set; }
  public double Senlat { get; set; }
  public double Senlon { get; set; }
  public double Senalt { get; set; }
  public double Senx { get; set; }
  public double Seny { get; set; }
  public double Senz { get; set; }
  public double Senvelx { get; set; }
  public double Senvely { get; set; }
  public double Senvelz { get; set; }
  public List<string> SenQuat { get; set; }
  public int FovCount { get; set; }
  public double ExpDuration { get; set; }
  public double Zeroptd { get; set; }
  public double NetObjSig { get; set; }
  public double NetObjSigUnc { get; set; }
  public double Mag { get; set; }
  public double MagUnc { get; set; }
  public double MagNormRange { get; set; }
  public double Geolat { get; set; }
  public double Geolon { get; set; }
  public double Geoalt { get; set; }
  public double Georange { get; set; }
  public double SkyBkgrnd { get; set; }
  public double PrimaryExtinction { get; set; }
  public double PrimaryExtinctionUnc { get; set; }
  public double SolarPhaseAngle { get; set; }
  public double SolarEqPhaseAngle { get; set; }
  public double SolarDecAngle { get; set; }
  public double ShutterDelay { get; set; }
  public double TimingBias { get; set; }
  public string RawFileURI { get; set; }
  public double Intensity { get; set; }
  public double BgIntensity { get; set; }
  public string Descriptor { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public EOObservation_Ingest_dataMode_Enum DataMode { get; set; }
  public List<string> Tags { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public double ZeroPtdUnc { get; set; }
  public string EoobservationDetails { get; set; }
  public EOObservation_Ingest_referenceFrame_Enum ReferenceFrame { get; set; }
  public EOObservation_Ingest_senReferenceFrame_Enum SenReferenceFrame { get; set; }
  public bool Umbra { get; set; }
  public bool Penumbra { get; set; }
  public string OrigNetwork { get; set; }
  public string SourceDL { get; set; }
  public string Type { get; set; }

  public EOObservation_IngestT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.ObTime = null;
    this.CorrQuality = 0.0;
    this.IdOnOrbit = null;
    this.IdSensor = null;
    this.IdSkyImagery = null;
    this.CollectMethod = null;
    this.SatNo = 0;
    this.TaskId = null;
    this.TransactionId = null;
    this.TrackId = null;
    this.ObPosition = null;
    this.OrigObjectId = null;
    this.OrigSensorId = null;
    this.Uct = false;
    this.Azimuth = 0.0;
    this.AzimuthUnc = 0.0;
    this.AzimuthBias = 0.0;
    this.AzimuthRate = 0.0;
    this.Elevation = 0.0;
    this.ElevationUnc = 0.0;
    this.ElevationBias = 0.0;
    this.ElevationRate = 0.0;
    this.Range = 0.0;
    this.RangeUnc = 0.0;
    this.RangeBias = 0.0;
    this.RangeRate = 0.0;
    this.RangeRateUnc = 0.0;
    this.Ra = 0.0;
    this.RaRate = 0.0;
    this.RaUnc = 0.0;
    this.RaBias = 0.0;
    this.Declination = 0.0;
    this.DeclinationRate = 0.0;
    this.DeclinationUnc = 0.0;
    this.DeclinationBias = 0.0;
    this.Losx = 0.0;
    this.Losy = 0.0;
    this.Losz = 0.0;
    this.LosUnc = 0.0;
    this.Losxvel = 0.0;
    this.Losyvel = 0.0;
    this.Loszvel = 0.0;
    this.Senlat = 0.0;
    this.Senlon = 0.0;
    this.Senalt = 0.0;
    this.Senx = 0.0;
    this.Seny = 0.0;
    this.Senz = 0.0;
    this.Senvelx = 0.0;
    this.Senvely = 0.0;
    this.Senvelz = 0.0;
    this.SenQuat = null;
    this.FovCount = 0;
    this.ExpDuration = 0.0;
    this.Zeroptd = 0.0;
    this.NetObjSig = 0.0;
    this.NetObjSigUnc = 0.0;
    this.Mag = 0.0;
    this.MagUnc = 0.0;
    this.MagNormRange = 0.0;
    this.Geolat = 0.0;
    this.Geolon = 0.0;
    this.Geoalt = 0.0;
    this.Georange = 0.0;
    this.SkyBkgrnd = 0.0;
    this.PrimaryExtinction = 0.0;
    this.PrimaryExtinctionUnc = 0.0;
    this.SolarPhaseAngle = 0.0;
    this.SolarEqPhaseAngle = 0.0;
    this.SolarDecAngle = 0.0;
    this.ShutterDelay = 0.0;
    this.TimingBias = 0.0;
    this.RawFileURI = null;
    this.Intensity = 0.0;
    this.BgIntensity = 0.0;
    this.Descriptor = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = EOObservation_Ingest_dataMode_Enum.REAL;
    this.Tags = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.ZeroPtdUnc = 0.0;
    this.EoobservationDetails = null;
    this.ReferenceFrame = EOObservation_Ingest_referenceFrame_Enum.J2000;
    this.SenReferenceFrame = EOObservation_Ingest_senReferenceFrame_Enum.J2000;
    this.Umbra = false;
    this.Penumbra = false;
    this.OrigNetwork = null;
    this.SourceDL = null;
    this.Type = null;
  }
  public static EOObservation_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return EOObservation_Ingest.GetRootAsEOObservation_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    EOObservation_Ingest.FinishEOObservation_IngestBuffer(fbb, EOObservation_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class EOObservation_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*ObTime*/, false)
      && verifier.VerifyField(tablePos, 10 /*CorrQuality*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 14 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 16 /*IdSkyImagery*/, false)
      && verifier.VerifyString(tablePos, 18 /*CollectMethod*/, false)
      && verifier.VerifyField(tablePos, 20 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 22 /*TaskId*/, false)
      && verifier.VerifyString(tablePos, 24 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 26 /*TrackId*/, false)
      && verifier.VerifyString(tablePos, 28 /*ObPosition*/, false)
      && verifier.VerifyString(tablePos, 30 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 32 /*OrigSensorId*/, false)
      && verifier.VerifyField(tablePos, 34 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 36 /*Azimuth*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 38 /*AzimuthUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 40 /*AzimuthBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*AzimuthRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*Elevation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*ElevationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*ElevationBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*ElevationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*Range*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*RangeUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*RangeBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*RangeRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*RangeRateUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 62 /*Ra*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*RaRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*RaUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*RaBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*Declination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*DeclinationRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*DeclinationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*DeclinationBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*Losx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*Losy*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*Losz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*LosUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*Losxvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*Losyvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*Loszvel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*Senlat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*Senlon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*Senalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*Senx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*Seny*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*Senz*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*Senvelx*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*Senvely*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 108 /*Senvelz*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 110 /*SenQuat*/, false)
      && verifier.VerifyField(tablePos, 112 /*FovCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*ExpDuration*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*Zeroptd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*NetObjSig*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*NetObjSigUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*Mag*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*MagUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*MagNormRange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*Geolat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*Geolon*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*Geoalt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*Georange*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*SkyBkgrnd*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*PrimaryExtinction*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*PrimaryExtinctionUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*SolarPhaseAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*SolarEqPhaseAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*SolarDecAngle*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*ShutterDelay*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*TimingBias*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 152 /*RawFileURI*/, false)
      && verifier.VerifyField(tablePos, 154 /*Intensity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*BgIntensity*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 158 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 160 /*Source*/, false)
      && verifier.VerifyString(tablePos, 162 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 164 /*DataMode*/, 1 /*EOObservation_Ingest_dataMode_Enum*/, 1, false)
      && verifier.VerifyVectorOfStrings(tablePos, 166 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 168 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 170 /*CreatedBy*/, false)
      && verifier.VerifyField(tablePos, 172 /*ZeroPtdUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 174 /*EoobservationDetails*/, false)
      && verifier.VerifyField(tablePos, 176 /*ReferenceFrame*/, 1 /*EOObservation_Ingest_referenceFrame_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 178 /*SenReferenceFrame*/, 1 /*EOObservation_Ingest_senReferenceFrame_Enum*/, 1, false)
      && verifier.VerifyField(tablePos, 180 /*Umbra*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 182 /*Penumbra*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 184 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 186 /*SourceDL*/, false)
      && verifier.VerifyString(tablePos, 188 /*Type*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
