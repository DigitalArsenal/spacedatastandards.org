// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Minimum and maximum altitude bounds for the track.
public struct AltitudeBlocks_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AltitudeBlocks_Full GetRootAsAltitudeBlocks_Full(ByteBuffer _bb) { return GetRootAsAltitudeBlocks_Full(_bb, new AltitudeBlocks_Full()); }
  public static AltitudeBlocks_Full GetRootAsAltitudeBlocks_Full(ByteBuffer _bb, AltitudeBlocks_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool AltitudeBlocks_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "ALTI"); }
  public static bool VerifyAltitudeBlocks_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("ALTI", false, AltitudeBlocks_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AltitudeBlocks_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Sequencing field for the altitude block.
  /// Example: /// Example: A1
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string AltitudeSequenceId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltitudeSequenceIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetAltitudeSequenceIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetAltitudeSequenceIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Lowest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  public double LowerAltitude { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Highest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27200.5
  /// Constraints: No constraints specified.
  public double UpperAltitude { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<AltitudeBlocks_Full> CreateAltitudeBlocks_Full(FlatBufferBuilder builder,
      StringOffset altitudeSequenceIdOffset = default(StringOffset),
      double lowerAltitude = 0.0,
      double upperAltitude = 0.0) {
    builder.StartTable(3);
    AltitudeBlocks_Full.AddUpperAltitude(builder, upperAltitude);
    AltitudeBlocks_Full.AddLowerAltitude(builder, lowerAltitude);
    AltitudeBlocks_Full.AddAltitudeSequenceId(builder, altitudeSequenceIdOffset);
    return AltitudeBlocks_Full.EndAltitudeBlocks_Full(builder);
  }

  public static void StartAltitudeBlocks_Full(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddAltitudeSequenceId(FlatBufferBuilder builder, StringOffset altitudeSequenceIdOffset) { builder.AddOffset(0, altitudeSequenceIdOffset.Value, 0); }
  public static void AddLowerAltitude(FlatBufferBuilder builder, double lowerAltitude) { builder.AddDouble(1, lowerAltitude, 0.0); }
  public static void AddUpperAltitude(FlatBufferBuilder builder, double upperAltitude) { builder.AddDouble(2, upperAltitude, 0.0); }
  public static Offset<AltitudeBlocks_Full> EndAltitudeBlocks_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<AltitudeBlocks_Full>(o);
  }
  public static void FinishAltitudeBlocks_FullBuffer(FlatBufferBuilder builder, Offset<AltitudeBlocks_Full> offset) { builder.Finish(offset.Value, "ALTI"); }
  public static void FinishSizePrefixedAltitudeBlocks_FullBuffer(FlatBufferBuilder builder, Offset<AltitudeBlocks_Full> offset) { builder.FinishSizePrefixed(offset.Value, "ALTI"); }
  public AltitudeBlocks_FullT UnPack() {
    var _o = new AltitudeBlocks_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AltitudeBlocks_FullT _o) {
    _o.AltitudeSequenceId = this.AltitudeSequenceId;
    _o.LowerAltitude = this.LowerAltitude;
    _o.UpperAltitude = this.UpperAltitude;
  }
  public static Offset<AltitudeBlocks_Full> Pack(FlatBufferBuilder builder, AltitudeBlocks_FullT _o) {
    if (_o == null) return default(Offset<AltitudeBlocks_Full>);
    var _altitudeSequenceId = _o.AltitudeSequenceId == null ? default(StringOffset) : builder.CreateString(_o.AltitudeSequenceId);
    return CreateAltitudeBlocks_Full(
      builder,
      _altitudeSequenceId,
      _o.LowerAltitude,
      _o.UpperAltitude);
  }
}

public class AltitudeBlocks_FullT
{
  public string AltitudeSequenceId { get; set; }
  public double LowerAltitude { get; set; }
  public double UpperAltitude { get; set; }

  public AltitudeBlocks_FullT() {
    this.AltitudeSequenceId = null;
    this.LowerAltitude = 0.0;
    this.UpperAltitude = 0.0;
  }
  public static AltitudeBlocks_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return AltitudeBlocks_Full.GetRootAsAltitudeBlocks_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    AltitudeBlocks_Full.FinishAltitudeBlocks_FullBuffer(fbb, AltitudeBlocks_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class AltitudeBlocks_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*AltitudeSequenceId*/, false)
      && verifier.VerifyField(tablePos, 6 /*LowerAltitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*UpperAltitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
