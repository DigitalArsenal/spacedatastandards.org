// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
public struct Vessel_Abridged : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Vessel_Abridged GetRootAsVessel_Abridged(ByteBuffer _bb) { return GetRootAsVessel_Abridged(_bb, new Vessel_Abridged()); }
  public static Vessel_Abridged GetRootAsVessel_Abridged(ByteBuffer _bb, Vessel_Abridged obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Vessel_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "VESS"); }
  public static bool VerifyVessel_Abridged(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("VESS", false, Vessel_AbridgedVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Vessel_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdEntity { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdEntityBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdEntityBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdEntityArray() { return __p.__vector_as_array<byte>(8); }
  /// The original source Id for this vessel.
  /// Example: /// Example: 590b5194fc32e75dd00682ba
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string AltVesselId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAltVesselIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAltVesselIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAltVesselIdArray() { return __p.__vector_as_array<byte>(10); }
  /// The UDL ID of the organization that owns the vessel.
  /// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOrganization { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOrganizationBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIdOrganizationBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIdOrganizationArray() { return __p.__vector_as_array<byte>(12); }
  /// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  /// Example: /// Example: DORNUM
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string VesselName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetVesselNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetVesselNameArray() { return __p.__vector_as_array<byte>(14); }
  /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
  /// Example: /// Example: Passenger
  /// Constraints: Minimum length = 0, Maximum length = 48
  public string VesselType { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselTypeBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetVesselTypeBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetVesselTypeArray() { return __p.__vector_as_array<byte>(16); }
  /// The common name for a group of ships with similar design, usually named for the first vessel of the class.
  /// Example: /// Example: Nimitz
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string VesselClass { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselClassBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetVesselClassBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetVesselClassArray() { return __p.__vector_as_array<byte>(18); }
  /// Further description or explanation of the vessel or type.
  /// Example: /// Example: Search and Rescue Vessel
  /// Constraints: Minimum length = 0, Maximum length = 100
  public string VesselDescription { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselDescriptionBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetVesselDescriptionBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetVesselDescriptionArray() { return __p.__vector_as_array<byte>(20); }
  /// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
  /// Example: /// Example: B45524
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string Sconum { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSconumBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetSconumBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetSconumArray() { return __p.__vector_as_array<byte>(22); }
  /// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
  /// Example: /// Example: 9566356
  /// Constraints: No constraints specified.
  public int Imon { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  /// Example: /// Example: 416450000
  /// Constraints: Minimum length = 0, Maximum length = 9
  public string Mmsi { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMmsiBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetMmsiBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetMmsiArray() { return __p.__vector_as_array<byte>(26); }
  /// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
  /// Example: /// Example: V2OZ
  /// Constraints: Minimum length = 0, Maximum length = 24
  public string Callsign { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallsignBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCallsignBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCallsignArray() { return __p.__vector_as_array<byte>(28); }
  /// The flag of the subject vessel.
  /// Example: /// Example: United States
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string VesselFlag { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselFlagBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetVesselFlagBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetVesselFlagArray() { return __p.__vector_as_array<byte>(30); }
  /// Year the vessel went into service.
  /// Example: /// Example: 2014
  /// Constraints: Minimum length = 0, Maximum length = 4
  public string YearBuilt { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetYearBuiltBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetYearBuiltBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetYearBuiltArray() { return __p.__vector_as_array<byte>(32); }
  /// The shipbuilder who built this vessel.
  /// Example: /// Example: Samsung Heavy Inds - Geoje
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string VesselBuilder { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVesselBuilderBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetVesselBuilderBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetVesselBuilderArray() { return __p.__vector_as_array<byte>(34); }
  /// The status of this vessel.
  /// Example: /// Example: In Service/Commission
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Status { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(36); }
  /// The date this vessel was first seen.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string FirstSeen { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFirstSeenBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetFirstSeenBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetFirstSeenArray() { return __p.__vector_as_array<byte>(38); }
  /// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
  /// Example: /// Example: 511.1
  /// Constraints: No constraints specified.
  public double Length { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
  /// Example: /// Example: 24.1
  /// Constraints: No constraints specified.
  public double Width { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
  /// Example: /// Example: 21.1
  /// Constraints: No constraints specified.
  public double MaxDraught { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The weight in tons, of this vessel.
  /// Example: /// Example: 3423.76
  /// Constraints: No constraints specified.
  public double VslWt { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The maximum possible speed of this vessel in meters per second.
  /// Example: /// Example: 32.5
  /// Constraints: No constraints specified.
  public double MaxSpeed { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The stern type code (Counter, Cruiser) associated with this vessel.
  /// Example: /// Example: Cruiser
  /// Constraints: Minimum length = 0, Maximum length = 16
  public string SternType { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSternTypeBytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetSternTypeBytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetSternTypeArray() { return __p.__vector_as_array<byte>(50); }
  /// The number of blades per shaft for this vessel.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int NumBlades { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The number of shafts on this vessel.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumShafts { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The type of propulsion employed by this vessel.
  /// Example: /// Example: Diesel
  /// Constraints: Minimum length = 0, Maximum length = 6
  public string PropType { get { int o = __p.__offset(56); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPropTypeBytes() { return __p.__vector_as_span<byte>(56, 1); }
#else
  public ArraySegment<byte>? GetPropTypeBytes() { return __p.__vector_as_arraysegment(56); }
#endif
  public byte[] GetPropTypeArray() { return __p.__vector_as_array<byte>(56); }
  /// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
  /// Example: /// Example: A30081
  /// Constraints: Minimum length = 0, Maximum length = 7
  public string HullNum { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHullNumBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetHullNumBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetHullNumArray() { return __p.__vector_as_array<byte>(58); }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(60); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(62); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(64); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(66); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(66, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(66); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(66); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  public Vessel_Abridged_dataMode_Enum DataMode { get { int o = __p.__offset(68); return o != 0 ? (Vessel_Abridged_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Vessel_Abridged_dataMode_Enum.REAL; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(70); }

  public static Offset<Vessel_Abridged> CreateVessel_Abridged(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idEntityOffset = default(StringOffset),
      StringOffset altVesselIdOffset = default(StringOffset),
      StringOffset idOrganizationOffset = default(StringOffset),
      StringOffset vesselNameOffset = default(StringOffset),
      StringOffset vesselTypeOffset = default(StringOffset),
      StringOffset vesselClassOffset = default(StringOffset),
      StringOffset vesselDescriptionOffset = default(StringOffset),
      StringOffset sconumOffset = default(StringOffset),
      int imon = 0,
      StringOffset mmsiOffset = default(StringOffset),
      StringOffset callsignOffset = default(StringOffset),
      StringOffset vesselFlagOffset = default(StringOffset),
      StringOffset yearBuiltOffset = default(StringOffset),
      StringOffset vesselBuilderOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      StringOffset firstSeenOffset = default(StringOffset),
      double length = 0.0,
      double width = 0.0,
      double maxDraught = 0.0,
      double vslWt = 0.0,
      double maxSpeed = 0.0,
      StringOffset sternTypeOffset = default(StringOffset),
      int numBlades = 0,
      int numShafts = 0,
      StringOffset propTypeOffset = default(StringOffset),
      StringOffset hullNumOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Vessel_Abridged_dataMode_Enum dataMode = Vessel_Abridged_dataMode_Enum.REAL,
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(34);
    Vessel_Abridged.AddMaxSpeed(builder, maxSpeed);
    Vessel_Abridged.AddVslWt(builder, vslWt);
    Vessel_Abridged.AddMaxDraught(builder, maxDraught);
    Vessel_Abridged.AddWidth(builder, width);
    Vessel_Abridged.AddLength(builder, length);
    Vessel_Abridged.AddOrigNetwork(builder, origNetworkOffset);
    Vessel_Abridged.AddOrigin(builder, originOffset);
    Vessel_Abridged.AddSource(builder, sourceOffset);
    Vessel_Abridged.AddCreatedBy(builder, createdByOffset);
    Vessel_Abridged.AddCreatedAt(builder, createdAtOffset);
    Vessel_Abridged.AddHullNum(builder, hullNumOffset);
    Vessel_Abridged.AddPropType(builder, propTypeOffset);
    Vessel_Abridged.AddNumShafts(builder, numShafts);
    Vessel_Abridged.AddNumBlades(builder, numBlades);
    Vessel_Abridged.AddSternType(builder, sternTypeOffset);
    Vessel_Abridged.AddFirstSeen(builder, firstSeenOffset);
    Vessel_Abridged.AddStatus(builder, statusOffset);
    Vessel_Abridged.AddVesselBuilder(builder, vesselBuilderOffset);
    Vessel_Abridged.AddYearBuilt(builder, yearBuiltOffset);
    Vessel_Abridged.AddVesselFlag(builder, vesselFlagOffset);
    Vessel_Abridged.AddCallsign(builder, callsignOffset);
    Vessel_Abridged.AddMmsi(builder, mmsiOffset);
    Vessel_Abridged.AddImon(builder, imon);
    Vessel_Abridged.AddSconum(builder, sconumOffset);
    Vessel_Abridged.AddVesselDescription(builder, vesselDescriptionOffset);
    Vessel_Abridged.AddVesselClass(builder, vesselClassOffset);
    Vessel_Abridged.AddVesselType(builder, vesselTypeOffset);
    Vessel_Abridged.AddVesselName(builder, vesselNameOffset);
    Vessel_Abridged.AddIdOrganization(builder, idOrganizationOffset);
    Vessel_Abridged.AddAltVesselId(builder, altVesselIdOffset);
    Vessel_Abridged.AddIdEntity(builder, idEntityOffset);
    Vessel_Abridged.AddClassificationMarking(builder, classificationMarkingOffset);
    Vessel_Abridged.AddId(builder, idOffset);
    Vessel_Abridged.AddDataMode(builder, dataMode);
    return Vessel_Abridged.EndVessel_Abridged(builder);
  }

  public static void StartVessel_Abridged(FlatBufferBuilder builder) { builder.StartTable(34); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdEntity(FlatBufferBuilder builder, StringOffset idEntityOffset) { builder.AddOffset(2, idEntityOffset.Value, 0); }
  public static void AddAltVesselId(FlatBufferBuilder builder, StringOffset altVesselIdOffset) { builder.AddOffset(3, altVesselIdOffset.Value, 0); }
  public static void AddIdOrganization(FlatBufferBuilder builder, StringOffset idOrganizationOffset) { builder.AddOffset(4, idOrganizationOffset.Value, 0); }
  public static void AddVesselName(FlatBufferBuilder builder, StringOffset vesselNameOffset) { builder.AddOffset(5, vesselNameOffset.Value, 0); }
  public static void AddVesselType(FlatBufferBuilder builder, StringOffset vesselTypeOffset) { builder.AddOffset(6, vesselTypeOffset.Value, 0); }
  public static void AddVesselClass(FlatBufferBuilder builder, StringOffset vesselClassOffset) { builder.AddOffset(7, vesselClassOffset.Value, 0); }
  public static void AddVesselDescription(FlatBufferBuilder builder, StringOffset vesselDescriptionOffset) { builder.AddOffset(8, vesselDescriptionOffset.Value, 0); }
  public static void AddSconum(FlatBufferBuilder builder, StringOffset sconumOffset) { builder.AddOffset(9, sconumOffset.Value, 0); }
  public static void AddImon(FlatBufferBuilder builder, int imon) { builder.AddInt(10, imon, 0); }
  public static void AddMmsi(FlatBufferBuilder builder, StringOffset mmsiOffset) { builder.AddOffset(11, mmsiOffset.Value, 0); }
  public static void AddCallsign(FlatBufferBuilder builder, StringOffset callsignOffset) { builder.AddOffset(12, callsignOffset.Value, 0); }
  public static void AddVesselFlag(FlatBufferBuilder builder, StringOffset vesselFlagOffset) { builder.AddOffset(13, vesselFlagOffset.Value, 0); }
  public static void AddYearBuilt(FlatBufferBuilder builder, StringOffset yearBuiltOffset) { builder.AddOffset(14, yearBuiltOffset.Value, 0); }
  public static void AddVesselBuilder(FlatBufferBuilder builder, StringOffset vesselBuilderOffset) { builder.AddOffset(15, vesselBuilderOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(16, statusOffset.Value, 0); }
  public static void AddFirstSeen(FlatBufferBuilder builder, StringOffset firstSeenOffset) { builder.AddOffset(17, firstSeenOffset.Value, 0); }
  public static void AddLength(FlatBufferBuilder builder, double length) { builder.AddDouble(18, length, 0.0); }
  public static void AddWidth(FlatBufferBuilder builder, double width) { builder.AddDouble(19, width, 0.0); }
  public static void AddMaxDraught(FlatBufferBuilder builder, double maxDraught) { builder.AddDouble(20, maxDraught, 0.0); }
  public static void AddVslWt(FlatBufferBuilder builder, double vslWt) { builder.AddDouble(21, vslWt, 0.0); }
  public static void AddMaxSpeed(FlatBufferBuilder builder, double maxSpeed) { builder.AddDouble(22, maxSpeed, 0.0); }
  public static void AddSternType(FlatBufferBuilder builder, StringOffset sternTypeOffset) { builder.AddOffset(23, sternTypeOffset.Value, 0); }
  public static void AddNumBlades(FlatBufferBuilder builder, int numBlades) { builder.AddInt(24, numBlades, 0); }
  public static void AddNumShafts(FlatBufferBuilder builder, int numShafts) { builder.AddInt(25, numShafts, 0); }
  public static void AddPropType(FlatBufferBuilder builder, StringOffset propTypeOffset) { builder.AddOffset(26, propTypeOffset.Value, 0); }
  public static void AddHullNum(FlatBufferBuilder builder, StringOffset hullNumOffset) { builder.AddOffset(27, hullNumOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(28, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(29, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(30, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(31, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Vessel_Abridged_dataMode_Enum dataMode) { builder.AddSbyte(32, (sbyte)dataMode, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(33, origNetworkOffset.Value, 0); }
  public static Offset<Vessel_Abridged> EndVessel_Abridged(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Vessel_Abridged>(o);
  }
  public static void FinishVessel_AbridgedBuffer(FlatBufferBuilder builder, Offset<Vessel_Abridged> offset) { builder.Finish(offset.Value, "VESS"); }
  public static void FinishSizePrefixedVessel_AbridgedBuffer(FlatBufferBuilder builder, Offset<Vessel_Abridged> offset) { builder.FinishSizePrefixed(offset.Value, "VESS"); }
  public Vessel_AbridgedT UnPack() {
    var _o = new Vessel_AbridgedT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Vessel_AbridgedT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdEntity = this.IdEntity;
    _o.AltVesselId = this.AltVesselId;
    _o.IdOrganization = this.IdOrganization;
    _o.VesselName = this.VesselName;
    _o.VesselType = this.VesselType;
    _o.VesselClass = this.VesselClass;
    _o.VesselDescription = this.VesselDescription;
    _o.Sconum = this.Sconum;
    _o.Imon = this.Imon;
    _o.Mmsi = this.Mmsi;
    _o.Callsign = this.Callsign;
    _o.VesselFlag = this.VesselFlag;
    _o.YearBuilt = this.YearBuilt;
    _o.VesselBuilder = this.VesselBuilder;
    _o.Status = this.Status;
    _o.FirstSeen = this.FirstSeen;
    _o.Length = this.Length;
    _o.Width = this.Width;
    _o.MaxDraught = this.MaxDraught;
    _o.VslWt = this.VslWt;
    _o.MaxSpeed = this.MaxSpeed;
    _o.SternType = this.SternType;
    _o.NumBlades = this.NumBlades;
    _o.NumShafts = this.NumShafts;
    _o.PropType = this.PropType;
    _o.HullNum = this.HullNum;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Vessel_Abridged> Pack(FlatBufferBuilder builder, Vessel_AbridgedT _o) {
    if (_o == null) return default(Offset<Vessel_Abridged>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idEntity = _o.IdEntity == null ? default(StringOffset) : builder.CreateString(_o.IdEntity);
    var _altVesselId = _o.AltVesselId == null ? default(StringOffset) : builder.CreateString(_o.AltVesselId);
    var _idOrganization = _o.IdOrganization == null ? default(StringOffset) : builder.CreateString(_o.IdOrganization);
    var _vesselName = _o.VesselName == null ? default(StringOffset) : builder.CreateString(_o.VesselName);
    var _vesselType = _o.VesselType == null ? default(StringOffset) : builder.CreateString(_o.VesselType);
    var _vesselClass = _o.VesselClass == null ? default(StringOffset) : builder.CreateString(_o.VesselClass);
    var _vesselDescription = _o.VesselDescription == null ? default(StringOffset) : builder.CreateString(_o.VesselDescription);
    var _sconum = _o.Sconum == null ? default(StringOffset) : builder.CreateString(_o.Sconum);
    var _mmsi = _o.Mmsi == null ? default(StringOffset) : builder.CreateString(_o.Mmsi);
    var _callsign = _o.Callsign == null ? default(StringOffset) : builder.CreateString(_o.Callsign);
    var _vesselFlag = _o.VesselFlag == null ? default(StringOffset) : builder.CreateString(_o.VesselFlag);
    var _yearBuilt = _o.YearBuilt == null ? default(StringOffset) : builder.CreateString(_o.YearBuilt);
    var _vesselBuilder = _o.VesselBuilder == null ? default(StringOffset) : builder.CreateString(_o.VesselBuilder);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _firstSeen = _o.FirstSeen == null ? default(StringOffset) : builder.CreateString(_o.FirstSeen);
    var _sternType = _o.SternType == null ? default(StringOffset) : builder.CreateString(_o.SternType);
    var _propType = _o.PropType == null ? default(StringOffset) : builder.CreateString(_o.PropType);
    var _hullNum = _o.HullNum == null ? default(StringOffset) : builder.CreateString(_o.HullNum);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateVessel_Abridged(
      builder,
      _id,
      _classificationMarking,
      _idEntity,
      _altVesselId,
      _idOrganization,
      _vesselName,
      _vesselType,
      _vesselClass,
      _vesselDescription,
      _sconum,
      _o.Imon,
      _mmsi,
      _callsign,
      _vesselFlag,
      _yearBuilt,
      _vesselBuilder,
      _status,
      _firstSeen,
      _o.Length,
      _o.Width,
      _o.MaxDraught,
      _o.VslWt,
      _o.MaxSpeed,
      _sternType,
      _o.NumBlades,
      _o.NumShafts,
      _propType,
      _hullNum,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode,
      _origNetwork);
  }
}

public class Vessel_AbridgedT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdEntity { get; set; }
  public string AltVesselId { get; set; }
  public string IdOrganization { get; set; }
  public string VesselName { get; set; }
  public string VesselType { get; set; }
  public string VesselClass { get; set; }
  public string VesselDescription { get; set; }
  public string Sconum { get; set; }
  public int Imon { get; set; }
  public string Mmsi { get; set; }
  public string Callsign { get; set; }
  public string VesselFlag { get; set; }
  public string YearBuilt { get; set; }
  public string VesselBuilder { get; set; }
  public string Status { get; set; }
  public string FirstSeen { get; set; }
  public double Length { get; set; }
  public double Width { get; set; }
  public double MaxDraught { get; set; }
  public double VslWt { get; set; }
  public double MaxSpeed { get; set; }
  public string SternType { get; set; }
  public int NumBlades { get; set; }
  public int NumShafts { get; set; }
  public string PropType { get; set; }
  public string HullNum { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Vessel_Abridged_dataMode_Enum DataMode { get; set; }
  public string OrigNetwork { get; set; }

  public Vessel_AbridgedT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdEntity = null;
    this.AltVesselId = null;
    this.IdOrganization = null;
    this.VesselName = null;
    this.VesselType = null;
    this.VesselClass = null;
    this.VesselDescription = null;
    this.Sconum = null;
    this.Imon = 0;
    this.Mmsi = null;
    this.Callsign = null;
    this.VesselFlag = null;
    this.YearBuilt = null;
    this.VesselBuilder = null;
    this.Status = null;
    this.FirstSeen = null;
    this.Length = 0.0;
    this.Width = 0.0;
    this.MaxDraught = 0.0;
    this.VslWt = 0.0;
    this.MaxSpeed = 0.0;
    this.SternType = null;
    this.NumBlades = 0;
    this.NumShafts = 0;
    this.PropType = null;
    this.HullNum = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Vessel_Abridged_dataMode_Enum.REAL;
    this.OrigNetwork = null;
  }
  public static Vessel_AbridgedT DeserializeFromBinary(byte[] fbBuffer) {
    return Vessel_Abridged.GetRootAsVessel_Abridged(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Vessel_Abridged.FinishVessel_AbridgedBuffer(fbb, Vessel_Abridged.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Vessel_AbridgedVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdEntity*/, false)
      && verifier.VerifyString(tablePos, 10 /*AltVesselId*/, false)
      && verifier.VerifyString(tablePos, 12 /*IdOrganization*/, false)
      && verifier.VerifyString(tablePos, 14 /*VesselName*/, false)
      && verifier.VerifyString(tablePos, 16 /*VesselType*/, false)
      && verifier.VerifyString(tablePos, 18 /*VesselClass*/, false)
      && verifier.VerifyString(tablePos, 20 /*VesselDescription*/, false)
      && verifier.VerifyString(tablePos, 22 /*Sconum*/, false)
      && verifier.VerifyField(tablePos, 24 /*Imon*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 26 /*Mmsi*/, false)
      && verifier.VerifyString(tablePos, 28 /*Callsign*/, false)
      && verifier.VerifyString(tablePos, 30 /*VesselFlag*/, false)
      && verifier.VerifyString(tablePos, 32 /*YearBuilt*/, false)
      && verifier.VerifyString(tablePos, 34 /*VesselBuilder*/, false)
      && verifier.VerifyString(tablePos, 36 /*Status*/, false)
      && verifier.VerifyString(tablePos, 38 /*FirstSeen*/, false)
      && verifier.VerifyField(tablePos, 40 /*Length*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*Width*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*MaxDraught*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*VslWt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*MaxSpeed*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 50 /*SternType*/, false)
      && verifier.VerifyField(tablePos, 52 /*NumBlades*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 54 /*NumShafts*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 56 /*PropType*/, false)
      && verifier.VerifyString(tablePos, 58 /*HullNum*/, false)
      && verifier.VerifyString(tablePos, 60 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 62 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 64 /*Source*/, false)
      && verifier.VerifyString(tablePos, 66 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 68 /*DataMode*/, 1 /*Vessel_Abridged_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 70 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
