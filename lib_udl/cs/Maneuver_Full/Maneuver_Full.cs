// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
public struct Maneuver_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Maneuver_Full GetRootAsManeuver_Full(ByteBuffer _bb) { return GetRootAsManeuver_Full(_bb, new Maneuver_Full()); }
  public static Maneuver_Full GetRootAsManeuver_Full(ByteBuffer _bb, Maneuver_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Maneuver_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "MANE"); }
  public static bool VerifyManeuver_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("MANE", false, Maneuver_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Maneuver_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MANEUVER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  public int SatNo { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-11-16T04:15:00.0001Z
  /// Constraints: No constraints specified.
  public string ReportTime { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReportTimeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetReportTimeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetReportTimeArray() { return __p.__vector_as_array<byte>(10); }
  /// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
  /// Example: /// Example: 2023-11-16T01:05:16.835689Z
  /// Constraints: No constraints specified.
  public string EventStartTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventStartTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetEventStartTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetEventStartTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Maneuver event end time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-11-16T01:09:01.350012Z
  /// Constraints: No constraints specified.
  public string EventEndTime { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventEndTimeBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEventEndTimeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEventEndTimeArray() { return __p.__vector_as_array<byte>(14); }
  /// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
  /// Example: /// Example: 600.72
  /// Constraints: No constraints specified.
  public double TotalBurnTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-11-16T03:55:51Z
  /// Constraints: No constraints specified.
  public string OdFitEndTime { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOdFitEndTimeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetOdFitEndTimeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetOdFitEndTimeArray() { return __p.__vector_as_array<byte>(18); }
  /// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: 12
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdOnOrbit { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdOnOrbitBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIdOnOrbitBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIdOnOrbitArray() { return __p.__vector_as_array<byte>(20); }
  /// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(22); }
  /// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  public bool Uct { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Uncertainty in the occurrence of this maneuver (0 - 1).
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  public double ManeuverUnc { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
  /// Example: /// Example: North-South Station Keeping
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Characterization { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterizationBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCharacterizationBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCharacterizationArray() { return __p.__vector_as_array<byte>(28); }
  /// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
  /// Example: /// Example: 0.15
  /// Constraints: No constraints specified.
  public double CharacterizationUnc { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
  /// Example: /// Example: EVENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string EventId { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventIdBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetEventIdBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetEventIdArray() { return __p.__vector_as_array<byte>(32); }
  /// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigObjectId { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigObjectIdBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetOrigObjectIdBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetOrigObjectIdArray() { return __p.__vector_as_array<byte>(34); }
  /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(36); }
  /// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
  /// CANCELLED:  A previously planned maneuver whose execution was cancelled.
  /// PLANNED:  A maneuver planned to take place at the eventStartTime.
  /// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
  /// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
  /// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
  /// Example: /// Example: POSSIBLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string Status { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStatusBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetStatusBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetStatusArray() { return __p.__vector_as_array<byte>(38); }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
  /// Example: /// Example: 0.715998327
  /// Constraints: No constraints specified.
  public double DeltaPos { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  /// Example: /// Example: -0.022172844
  /// Constraints: No constraints specified.
  public double DeltaPosU { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  /// Example: /// Example: -0.033700154
  /// Constraints: No constraints specified.
  public double DeltaPosV { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  /// Example: /// Example: -0.714861014
  /// Constraints: No constraints specified.
  public double DeltaPosW { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
  /// Example: /// Example: 0.000631505
  /// Constraints: No constraints specified.
  public double DeltaVel { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  /// Example: /// Example: 3.50165629389647e-05
  /// Constraints: No constraints specified.
  public double DeltaVelU { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  /// Example: /// Example: 0.000544413
  /// Constraints: No constraints specified.
  public double DeltaVelV { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  /// Example: /// Example: -0.000318099
  /// Constraints: No constraints specified.
  public double DeltaVelW { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Difference in mass before and after the maneuver, in kg.
  /// Example: /// Example: 0.15
  /// Constraints: No constraints specified.
  public double DeltaMass { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional identifier of the element set for the pre-maneuver orbit.
  /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PreEventIdElset { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreEventIdElsetBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetPreEventIdElsetBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetPreEventIdElsetArray() { return __p.__vector_as_array<byte>(58); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string PreEventElset { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreEventElsetBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetPreEventElsetBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetPreEventElsetArray() { return __p.__vector_as_array<byte>(60); }
  /// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
  /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PreEventIdStateVector { get { int o = __p.__offset(62); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreEventIdStateVectorBytes() { return __p.__vector_as_span<byte>(62, 1); }
#else
  public ArraySegment<byte>? GetPreEventIdStateVectorBytes() { return __p.__vector_as_arraysegment(62); }
#endif
  public byte[] GetPreEventIdStateVectorArray() { return __p.__vector_as_array<byte>(62); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string PreEventStateVector { get { int o = __p.__offset(64); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPreEventStateVectorBytes() { return __p.__vector_as_span<byte>(64, 1); }
#else
  public ArraySegment<byte>? GetPreEventStateVectorBytes() { return __p.__vector_as_arraysegment(64); }
#endif
  public byte[] GetPreEventStateVectorArray() { return __p.__vector_as_array<byte>(64); }
  /// Pre-event X component of position in ECI space, in km.
  /// Example: /// Example: 3584.432545
  /// Constraints: No constraints specified.
  public double PrePosX { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event Y component of position in ECI space, in km.
  /// Example: /// Example: 42028.43245
  /// Constraints: No constraints specified.
  public double PrePosY { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event Z component of position in ECI space, in km.
  /// Example: /// Example: -1.97765
  /// Constraints: No constraints specified.
  public double PrePosZ { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event X component of velocity in ECI space, in km/sec.
  /// Example: /// Example: -2.543266
  /// Constraints: No constraints specified.
  public double PreVelX { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event Y component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.24876
  /// Constraints: No constraints specified.
  public double PreVelY { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event Z component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.0067352
  /// Constraints: No constraints specified.
  public double PreVelZ { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  /// Example: /// Example: 4.51e-07
  /// Constraints: No constraints specified.
  public double PreRadiationPressCoeff { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  /// Example: /// Example: 0.000437116
  /// Constraints: No constraints specified.
  public double PreBallisticCoeff { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35802
  /// Constraints: No constraints specified.
  public double PreApogee { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35786.5
  /// Constraints: No constraints specified.
  public double PrePerigee { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft orbital inclination, in degrees. 0-180.
  /// Example: /// Example: 0.0336
  /// Constraints: No constraints specified.
  public double PreInclination { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft eccentricity.
  /// Example: /// Example: 0.00017
  /// Constraints: No constraints specified.
  public double PreEccentricity { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft orbital period, in minutes.
  /// Example: /// Example: 1436.12
  /// Constraints: No constraints specified.
  public double PrePeriod { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  /// Example: /// Example: 98.3336
  /// Constraints: No constraints specified.
  public double PreRAAN { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
  /// Example: /// Example: 42165.1
  /// Constraints: No constraints specified.
  public double PreSMA { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -93.12
  /// Constraints: No constraints specified.
  public double PreGeoLongitude { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  /// Example: /// Example: -0.0125
  /// Constraints: No constraints specified.
  public double PreDriftRate { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  /// Example: /// Example: 0.215
  /// Constraints: No constraints specified.
  public double PreSigmaU { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  /// Example: /// Example: 1.97
  /// Constraints: No constraints specified.
  public double PreSigmaV { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  /// Example: /// Example: 0.208
  /// Constraints: No constraints specified.
  public double PreSigmaW { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional identifier of the element set for the post-maneuver orbit.
  /// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PostEventIdElset { get { int o = __p.__offset(106); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostEventIdElsetBytes() { return __p.__vector_as_span<byte>(106, 1); }
#else
  public ArraySegment<byte>? GetPostEventIdElsetBytes() { return __p.__vector_as_arraysegment(106); }
#endif
  public byte[] GetPostEventIdElsetArray() { return __p.__vector_as_array<byte>(106); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string PostEventElset { get { int o = __p.__offset(108); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostEventElsetBytes() { return __p.__vector_as_span<byte>(108, 1); }
#else
  public ArraySegment<byte>? GetPostEventElsetBytes() { return __p.__vector_as_arraysegment(108); }
#endif
  public byte[] GetPostEventElsetArray() { return __p.__vector_as_array<byte>(108); }
  /// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
  /// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string PostEventIdStateVector { get { int o = __p.__offset(110); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostEventIdStateVectorBytes() { return __p.__vector_as_span<byte>(110, 1); }
#else
  public ArraySegment<byte>? GetPostEventIdStateVectorBytes() { return __p.__vector_as_arraysegment(110); }
#endif
  public byte[] GetPostEventIdStateVectorArray() { return __p.__vector_as_array<byte>(110); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string PostEventStateVector { get { int o = __p.__offset(112); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostEventStateVectorBytes() { return __p.__vector_as_span<byte>(112, 1); }
#else
  public ArraySegment<byte>? GetPostEventStateVectorBytes() { return __p.__vector_as_arraysegment(112); }
#endif
  public byte[] GetPostEventStateVectorArray() { return __p.__vector_as_array<byte>(112); }
  /// Post-event X component of position in ECI space, in km.
  /// Example: /// Example: 3589.351957
  /// Constraints: No constraints specified.
  public double PostPosX { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event Y component of position in ECI space, in km.
  /// Example: /// Example: 42017.26823
  /// Constraints: No constraints specified.
  public double PostPosY { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event Z component of position in ECI space, in km.
  /// Example: /// Example: -1.27161796
  /// Constraints: No constraints specified.
  public double PostPosZ { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event X component of velocity in ECI space, in km/sec.
  /// Example: /// Example: -3.063152826
  /// Constraints: No constraints specified.
  public double PostVelX { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event Y component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.261586769
  /// Constraints: No constraints specified.
  public double PostVelY { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event Z component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.006842148
  /// Constraints: No constraints specified.
  public double PostVelZ { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  /// Example: /// Example: 4.51e-07
  /// Constraints: No constraints specified.
  public double PostRadiationPressCoeff { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  /// Example: /// Example: 0.000433209
  /// Constraints: No constraints specified.
  public double PostBallisticCoeff { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft apogee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35800.1
  /// Constraints: No constraints specified.
  public double PostApogee { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft perigee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35787.9
  /// Constraints: No constraints specified.
  public double PostPerigee { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft orbital inclination, in degrees. 0-180.
  /// Example: /// Example: 0.0327
  /// Constraints: No constraints specified.
  public double PostInclination { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft eccentricity.
  /// Example: /// Example: 0.000164
  /// Constraints: No constraints specified.
  public double PostEccentricity { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft orbital period, in minutes.
  /// Example: /// Example: 1436.01
  /// Constraints: No constraints specified.
  public double PostPeriod { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  /// Example: /// Example: 98.3335
  /// Constraints: No constraints specified.
  public double PostRAAN { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
  /// Example: /// Example: 42164.87
  /// Constraints: No constraints specified.
  public double PostSMA { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -93.15
  /// Constraints: No constraints specified.
  public double PostGeoLongitude { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  /// Example: /// Example: -0.0125
  /// Constraints: No constraints specified.
  public double PostDriftRate { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  /// Example: /// Example: 12.285
  /// Constraints: No constraints specified.
  public double PostSigmaU { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  /// Example: /// Example: 71.339
  /// Constraints: No constraints specified.
  public double PostSigmaV { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  /// Example: /// Example: 12.77
  /// Constraints: No constraints specified.
  public double PostSigmaW { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Cov(int j) { int o = __p.__offset(154); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CovLength { get { int o = __p.__offset(154); return o != 0 ? __p.__vector_len(o) : 0; } }
  ///  Estimated mass of the object following the maneuver, in kg.
  /// Example: /// Example: 1844.5
  /// Constraints: No constraints specified.
  public double PostMass { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Estimated area of the object following the maneuver, in meters squared.
  /// Example: /// Example: 35.77
  /// Constraints: No constraints specified.
  public double PostArea { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of observations used to generate the maneuver data.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  public int NumObs { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Description and notes of the maneuver.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  public string Description { get { int o = __p.__offset(162); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(162, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(162); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(162); }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Descriptor { get { int o = __p.__offset(164); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptorBytes() { return __p.__vector_as_span<byte>(164, 1); }
#else
  public ArraySegment<byte>? GetDescriptorBytes() { return __p.__vector_as_arraysegment(164); }
#endif
  public byte[] GetDescriptorArray() { return __p.__vector_as_array<byte>(164); }
  /// Name of the state model used to generate the maneuver data.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 0, Maximum length = 32
  public string StateModel { get { int o = __p.__offset(166); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateModelBytes() { return __p.__vector_as_span<byte>(166, 1); }
#else
  public ArraySegment<byte>? GetStateModelBytes() { return __p.__vector_as_arraysegment(166); }
#endif
  public byte[] GetStateModelArray() { return __p.__vector_as_array<byte>(166); }
  /// Version of the state model used to generate the maneuver data.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public double StateModelVersion { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// The total number of estimated acceleration points during the maneuver.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  public int NumAccelPoints { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [10.25, 50.56, 150.78]
  /// Constraints: No constraints specified.
  public string MnvrAccelTimes(int j) { int o = __p.__offset(172); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MnvrAccelTimesLength { get { int o = __p.__offset(172); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [0.05, 0.1, 0.05]
  /// Constraints: No constraints specified.
  public string MnvrAccels(int j) { int o = __p.__offset(174); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MnvrAccelsLength { get { int o = __p.__offset(174); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [0.0005, 0.001, 0.0005]
  /// Constraints: No constraints specified.
  public string MnvrAccelUncs(int j) { int o = __p.__offset(176); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MnvrAccelUncsLength { get { int o = __p.__offset(176); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string Source { get { int o = __p.__offset(178); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(178, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(178); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(178); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(180); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(180, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(180); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(180); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public Maneuver_Full_dataMode_Enum DataMode { get { int o = __p.__offset(182); return o != 0 ? (Maneuver_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Maneuver_Full_dataMode_Enum.REAL; } }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(184); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(184, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(184); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(184); }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(186); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(186, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(186); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(186); }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
  /// Constraints: No constraints specified.
  public string Tags(int j) { int o = __p.__offset(188); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(188); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional algorithm used to produce this record.
  /// Example: /// Example: Example algorithm
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Algorithm { get { int o = __p.__offset(190); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAlgorithmBytes() { return __p.__vector_as_span<byte>(190, 1); }
#else
  public ArraySegment<byte>? GetAlgorithmBytes() { return __p.__vector_as_arraysegment(190); }
#endif
  public byte[] GetAlgorithmArray() { return __p.__vector_as_array<byte>(190); }
  /// Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
  /// Constraints: No constraints specified.
  public string SourcedData(int j) { int o = __p.__offset(192); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SourcedDataLength { get { int o = __p.__offset(192); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
  /// Example: /// Example: ['EO', 'RADAR']
  /// Constraints: No constraints specified.
  public Maneuver_Full_sourcedDataTypes_Enum SourcedDataTypes { get { int o = __p.__offset(194); return o != 0 ? (Maneuver_Full_sourcedDataTypes_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : Maneuver_Full_sourcedDataTypes_Enum.EO; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string OnOrbit { get { int o = __p.__offset(196); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOnOrbitBytes() { return __p.__vector_as_span<byte>(196, 1); }
#else
  public ArraySegment<byte>? GetOnOrbitBytes() { return __p.__vector_as_arraysegment(196); }
#endif
  public byte[] GetOnOrbitArray() { return __p.__vector_as_array<byte>(196); }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string TransactionId { get { int o = __p.__offset(198); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTransactionIdBytes() { return __p.__vector_as_span<byte>(198, 1); }
#else
  public ArraySegment<byte>? GetTransactionIdBytes() { return __p.__vector_as_arraysegment(198); }
#endif
  public byte[] GetTransactionIdArray() { return __p.__vector_as_array<byte>(198); }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(200); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(200, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(200); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(200); }

  public static Offset<Maneuver_Full> CreateManeuver_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      int satNo = 0,
      StringOffset reportTimeOffset = default(StringOffset),
      StringOffset eventStartTimeOffset = default(StringOffset),
      StringOffset eventEndTimeOffset = default(StringOffset),
      double totalBurnTime = 0.0,
      StringOffset odFitEndTimeOffset = default(StringOffset),
      StringOffset idOnOrbitOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      bool uct = false,
      double maneuverUnc = 0.0,
      StringOffset characterizationOffset = default(StringOffset),
      double characterizationUnc = 0.0,
      StringOffset eventIdOffset = default(StringOffset),
      StringOffset origObjectIdOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset statusOffset = default(StringOffset),
      double deltaPos = 0.0,
      double deltaPosU = 0.0,
      double deltaPosV = 0.0,
      double deltaPosW = 0.0,
      double deltaVel = 0.0,
      double deltaVelU = 0.0,
      double deltaVelV = 0.0,
      double deltaVelW = 0.0,
      double deltaMass = 0.0,
      StringOffset preEventIdElsetOffset = default(StringOffset),
      StringOffset preEventElsetOffset = default(StringOffset),
      StringOffset preEventIdStateVectorOffset = default(StringOffset),
      StringOffset preEventStateVectorOffset = default(StringOffset),
      double prePosX = 0.0,
      double prePosY = 0.0,
      double prePosZ = 0.0,
      double preVelX = 0.0,
      double preVelY = 0.0,
      double preVelZ = 0.0,
      double preRadiationPressCoeff = 0.0,
      double preBallisticCoeff = 0.0,
      double preApogee = 0.0,
      double prePerigee = 0.0,
      double preInclination = 0.0,
      double preEccentricity = 0.0,
      double prePeriod = 0.0,
      double preRAAN = 0.0,
      double preSMA = 0.0,
      double preGeoLongitude = 0.0,
      double preDriftRate = 0.0,
      double preSigmaU = 0.0,
      double preSigmaV = 0.0,
      double preSigmaW = 0.0,
      StringOffset postEventIdElsetOffset = default(StringOffset),
      StringOffset postEventElsetOffset = default(StringOffset),
      StringOffset postEventIdStateVectorOffset = default(StringOffset),
      StringOffset postEventStateVectorOffset = default(StringOffset),
      double postPosX = 0.0,
      double postPosY = 0.0,
      double postPosZ = 0.0,
      double postVelX = 0.0,
      double postVelY = 0.0,
      double postVelZ = 0.0,
      double postRadiationPressCoeff = 0.0,
      double postBallisticCoeff = 0.0,
      double postApogee = 0.0,
      double postPerigee = 0.0,
      double postInclination = 0.0,
      double postEccentricity = 0.0,
      double postPeriod = 0.0,
      double postRAAN = 0.0,
      double postSMA = 0.0,
      double postGeoLongitude = 0.0,
      double postDriftRate = 0.0,
      double postSigmaU = 0.0,
      double postSigmaV = 0.0,
      double postSigmaW = 0.0,
      VectorOffset covOffset = default(VectorOffset),
      double postMass = 0.0,
      double postArea = 0.0,
      int numObs = 0,
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset descriptorOffset = default(StringOffset),
      StringOffset stateModelOffset = default(StringOffset),
      double stateModelVersion = 0.0,
      int numAccelPoints = 0,
      VectorOffset mnvrAccelTimesOffset = default(VectorOffset),
      VectorOffset mnvrAccelsOffset = default(VectorOffset),
      VectorOffset mnvrAccelUncsOffset = default(VectorOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      Maneuver_Full_dataMode_Enum dataMode = Maneuver_Full_dataMode_Enum.REAL,
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset algorithmOffset = default(StringOffset),
      VectorOffset sourcedDataOffset = default(VectorOffset),
      Maneuver_Full_sourcedDataTypes_Enum sourcedDataTypes = Maneuver_Full_sourcedDataTypes_Enum.EO,
      StringOffset onOrbitOffset = default(StringOffset),
      StringOffset transactionIdOffset = default(StringOffset),
      StringOffset origNetworkOffset = default(StringOffset)) {
    builder.StartTable(99);
    Maneuver_Full.AddStateModelVersion(builder, stateModelVersion);
    Maneuver_Full.AddPostArea(builder, postArea);
    Maneuver_Full.AddPostMass(builder, postMass);
    Maneuver_Full.AddPostSigmaW(builder, postSigmaW);
    Maneuver_Full.AddPostSigmaV(builder, postSigmaV);
    Maneuver_Full.AddPostSigmaU(builder, postSigmaU);
    Maneuver_Full.AddPostDriftRate(builder, postDriftRate);
    Maneuver_Full.AddPostGeoLongitude(builder, postGeoLongitude);
    Maneuver_Full.AddPostSMA(builder, postSMA);
    Maneuver_Full.AddPostRAAN(builder, postRAAN);
    Maneuver_Full.AddPostPeriod(builder, postPeriod);
    Maneuver_Full.AddPostEccentricity(builder, postEccentricity);
    Maneuver_Full.AddPostInclination(builder, postInclination);
    Maneuver_Full.AddPostPerigee(builder, postPerigee);
    Maneuver_Full.AddPostApogee(builder, postApogee);
    Maneuver_Full.AddPostBallisticCoeff(builder, postBallisticCoeff);
    Maneuver_Full.AddPostRadiationPressCoeff(builder, postRadiationPressCoeff);
    Maneuver_Full.AddPostVelZ(builder, postVelZ);
    Maneuver_Full.AddPostVelY(builder, postVelY);
    Maneuver_Full.AddPostVelX(builder, postVelX);
    Maneuver_Full.AddPostPosZ(builder, postPosZ);
    Maneuver_Full.AddPostPosY(builder, postPosY);
    Maneuver_Full.AddPostPosX(builder, postPosX);
    Maneuver_Full.AddPreSigmaW(builder, preSigmaW);
    Maneuver_Full.AddPreSigmaV(builder, preSigmaV);
    Maneuver_Full.AddPreSigmaU(builder, preSigmaU);
    Maneuver_Full.AddPreDriftRate(builder, preDriftRate);
    Maneuver_Full.AddPreGeoLongitude(builder, preGeoLongitude);
    Maneuver_Full.AddPreSMA(builder, preSMA);
    Maneuver_Full.AddPreRAAN(builder, preRAAN);
    Maneuver_Full.AddPrePeriod(builder, prePeriod);
    Maneuver_Full.AddPreEccentricity(builder, preEccentricity);
    Maneuver_Full.AddPreInclination(builder, preInclination);
    Maneuver_Full.AddPrePerigee(builder, prePerigee);
    Maneuver_Full.AddPreApogee(builder, preApogee);
    Maneuver_Full.AddPreBallisticCoeff(builder, preBallisticCoeff);
    Maneuver_Full.AddPreRadiationPressCoeff(builder, preRadiationPressCoeff);
    Maneuver_Full.AddPreVelZ(builder, preVelZ);
    Maneuver_Full.AddPreVelY(builder, preVelY);
    Maneuver_Full.AddPreVelX(builder, preVelX);
    Maneuver_Full.AddPrePosZ(builder, prePosZ);
    Maneuver_Full.AddPrePosY(builder, prePosY);
    Maneuver_Full.AddPrePosX(builder, prePosX);
    Maneuver_Full.AddDeltaMass(builder, deltaMass);
    Maneuver_Full.AddDeltaVelW(builder, deltaVelW);
    Maneuver_Full.AddDeltaVelV(builder, deltaVelV);
    Maneuver_Full.AddDeltaVelU(builder, deltaVelU);
    Maneuver_Full.AddDeltaVel(builder, deltaVel);
    Maneuver_Full.AddDeltaPosW(builder, deltaPosW);
    Maneuver_Full.AddDeltaPosV(builder, deltaPosV);
    Maneuver_Full.AddDeltaPosU(builder, deltaPosU);
    Maneuver_Full.AddDeltaPos(builder, deltaPos);
    Maneuver_Full.AddCharacterizationUnc(builder, characterizationUnc);
    Maneuver_Full.AddManeuverUnc(builder, maneuverUnc);
    Maneuver_Full.AddTotalBurnTime(builder, totalBurnTime);
    Maneuver_Full.AddOrigNetwork(builder, origNetworkOffset);
    Maneuver_Full.AddTransactionId(builder, transactionIdOffset);
    Maneuver_Full.AddOnOrbit(builder, onOrbitOffset);
    Maneuver_Full.AddSourcedData(builder, sourcedDataOffset);
    Maneuver_Full.AddAlgorithm(builder, algorithmOffset);
    Maneuver_Full.AddTags(builder, tagsOffset);
    Maneuver_Full.AddCreatedBy(builder, createdByOffset);
    Maneuver_Full.AddCreatedAt(builder, createdAtOffset);
    Maneuver_Full.AddOrigin(builder, originOffset);
    Maneuver_Full.AddSource(builder, sourceOffset);
    Maneuver_Full.AddMnvrAccelUncs(builder, mnvrAccelUncsOffset);
    Maneuver_Full.AddMnvrAccels(builder, mnvrAccelsOffset);
    Maneuver_Full.AddMnvrAccelTimes(builder, mnvrAccelTimesOffset);
    Maneuver_Full.AddNumAccelPoints(builder, numAccelPoints);
    Maneuver_Full.AddStateModel(builder, stateModelOffset);
    Maneuver_Full.AddDescriptor(builder, descriptorOffset);
    Maneuver_Full.AddDescription(builder, descriptionOffset);
    Maneuver_Full.AddNumObs(builder, numObs);
    Maneuver_Full.AddCov(builder, covOffset);
    Maneuver_Full.AddPostEventStateVector(builder, postEventStateVectorOffset);
    Maneuver_Full.AddPostEventIdStateVector(builder, postEventIdStateVectorOffset);
    Maneuver_Full.AddPostEventElset(builder, postEventElsetOffset);
    Maneuver_Full.AddPostEventIdElset(builder, postEventIdElsetOffset);
    Maneuver_Full.AddPreEventStateVector(builder, preEventStateVectorOffset);
    Maneuver_Full.AddPreEventIdStateVector(builder, preEventIdStateVectorOffset);
    Maneuver_Full.AddPreEventElset(builder, preEventElsetOffset);
    Maneuver_Full.AddPreEventIdElset(builder, preEventIdElsetOffset);
    Maneuver_Full.AddStatus(builder, statusOffset);
    Maneuver_Full.AddOrigSensorId(builder, origSensorIdOffset);
    Maneuver_Full.AddOrigObjectId(builder, origObjectIdOffset);
    Maneuver_Full.AddEventId(builder, eventIdOffset);
    Maneuver_Full.AddCharacterization(builder, characterizationOffset);
    Maneuver_Full.AddIdSensor(builder, idSensorOffset);
    Maneuver_Full.AddIdOnOrbit(builder, idOnOrbitOffset);
    Maneuver_Full.AddOdFitEndTime(builder, odFitEndTimeOffset);
    Maneuver_Full.AddEventEndTime(builder, eventEndTimeOffset);
    Maneuver_Full.AddEventStartTime(builder, eventStartTimeOffset);
    Maneuver_Full.AddReportTime(builder, reportTimeOffset);
    Maneuver_Full.AddSatNo(builder, satNo);
    Maneuver_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    Maneuver_Full.AddId(builder, idOffset);
    Maneuver_Full.AddSourcedDataTypes(builder, sourcedDataTypes);
    Maneuver_Full.AddDataMode(builder, dataMode);
    Maneuver_Full.AddUct(builder, uct);
    return Maneuver_Full.EndManeuver_Full(builder);
  }

  public static void StartManeuver_Full(FlatBufferBuilder builder) { builder.StartTable(99); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddSatNo(FlatBufferBuilder builder, int satNo) { builder.AddInt(2, satNo, 0); }
  public static void AddReportTime(FlatBufferBuilder builder, StringOffset reportTimeOffset) { builder.AddOffset(3, reportTimeOffset.Value, 0); }
  public static void AddEventStartTime(FlatBufferBuilder builder, StringOffset eventStartTimeOffset) { builder.AddOffset(4, eventStartTimeOffset.Value, 0); }
  public static void AddEventEndTime(FlatBufferBuilder builder, StringOffset eventEndTimeOffset) { builder.AddOffset(5, eventEndTimeOffset.Value, 0); }
  public static void AddTotalBurnTime(FlatBufferBuilder builder, double totalBurnTime) { builder.AddDouble(6, totalBurnTime, 0.0); }
  public static void AddOdFitEndTime(FlatBufferBuilder builder, StringOffset odFitEndTimeOffset) { builder.AddOffset(7, odFitEndTimeOffset.Value, 0); }
  public static void AddIdOnOrbit(FlatBufferBuilder builder, StringOffset idOnOrbitOffset) { builder.AddOffset(8, idOnOrbitOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(9, idSensorOffset.Value, 0); }
  public static void AddUct(FlatBufferBuilder builder, bool uct) { builder.AddBool(10, uct, false); }
  public static void AddManeuverUnc(FlatBufferBuilder builder, double maneuverUnc) { builder.AddDouble(11, maneuverUnc, 0.0); }
  public static void AddCharacterization(FlatBufferBuilder builder, StringOffset characterizationOffset) { builder.AddOffset(12, characterizationOffset.Value, 0); }
  public static void AddCharacterizationUnc(FlatBufferBuilder builder, double characterizationUnc) { builder.AddDouble(13, characterizationUnc, 0.0); }
  public static void AddEventId(FlatBufferBuilder builder, StringOffset eventIdOffset) { builder.AddOffset(14, eventIdOffset.Value, 0); }
  public static void AddOrigObjectId(FlatBufferBuilder builder, StringOffset origObjectIdOffset) { builder.AddOffset(15, origObjectIdOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(16, origSensorIdOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, StringOffset statusOffset) { builder.AddOffset(17, statusOffset.Value, 0); }
  public static void AddDeltaPos(FlatBufferBuilder builder, double deltaPos) { builder.AddDouble(18, deltaPos, 0.0); }
  public static void AddDeltaPosU(FlatBufferBuilder builder, double deltaPosU) { builder.AddDouble(19, deltaPosU, 0.0); }
  public static void AddDeltaPosV(FlatBufferBuilder builder, double deltaPosV) { builder.AddDouble(20, deltaPosV, 0.0); }
  public static void AddDeltaPosW(FlatBufferBuilder builder, double deltaPosW) { builder.AddDouble(21, deltaPosW, 0.0); }
  public static void AddDeltaVel(FlatBufferBuilder builder, double deltaVel) { builder.AddDouble(22, deltaVel, 0.0); }
  public static void AddDeltaVelU(FlatBufferBuilder builder, double deltaVelU) { builder.AddDouble(23, deltaVelU, 0.0); }
  public static void AddDeltaVelV(FlatBufferBuilder builder, double deltaVelV) { builder.AddDouble(24, deltaVelV, 0.0); }
  public static void AddDeltaVelW(FlatBufferBuilder builder, double deltaVelW) { builder.AddDouble(25, deltaVelW, 0.0); }
  public static void AddDeltaMass(FlatBufferBuilder builder, double deltaMass) { builder.AddDouble(26, deltaMass, 0.0); }
  public static void AddPreEventIdElset(FlatBufferBuilder builder, StringOffset preEventIdElsetOffset) { builder.AddOffset(27, preEventIdElsetOffset.Value, 0); }
  public static void AddPreEventElset(FlatBufferBuilder builder, StringOffset preEventElsetOffset) { builder.AddOffset(28, preEventElsetOffset.Value, 0); }
  public static void AddPreEventIdStateVector(FlatBufferBuilder builder, StringOffset preEventIdStateVectorOffset) { builder.AddOffset(29, preEventIdStateVectorOffset.Value, 0); }
  public static void AddPreEventStateVector(FlatBufferBuilder builder, StringOffset preEventStateVectorOffset) { builder.AddOffset(30, preEventStateVectorOffset.Value, 0); }
  public static void AddPrePosX(FlatBufferBuilder builder, double prePosX) { builder.AddDouble(31, prePosX, 0.0); }
  public static void AddPrePosY(FlatBufferBuilder builder, double prePosY) { builder.AddDouble(32, prePosY, 0.0); }
  public static void AddPrePosZ(FlatBufferBuilder builder, double prePosZ) { builder.AddDouble(33, prePosZ, 0.0); }
  public static void AddPreVelX(FlatBufferBuilder builder, double preVelX) { builder.AddDouble(34, preVelX, 0.0); }
  public static void AddPreVelY(FlatBufferBuilder builder, double preVelY) { builder.AddDouble(35, preVelY, 0.0); }
  public static void AddPreVelZ(FlatBufferBuilder builder, double preVelZ) { builder.AddDouble(36, preVelZ, 0.0); }
  public static void AddPreRadiationPressCoeff(FlatBufferBuilder builder, double preRadiationPressCoeff) { builder.AddDouble(37, preRadiationPressCoeff, 0.0); }
  public static void AddPreBallisticCoeff(FlatBufferBuilder builder, double preBallisticCoeff) { builder.AddDouble(38, preBallisticCoeff, 0.0); }
  public static void AddPreApogee(FlatBufferBuilder builder, double preApogee) { builder.AddDouble(39, preApogee, 0.0); }
  public static void AddPrePerigee(FlatBufferBuilder builder, double prePerigee) { builder.AddDouble(40, prePerigee, 0.0); }
  public static void AddPreInclination(FlatBufferBuilder builder, double preInclination) { builder.AddDouble(41, preInclination, 0.0); }
  public static void AddPreEccentricity(FlatBufferBuilder builder, double preEccentricity) { builder.AddDouble(42, preEccentricity, 0.0); }
  public static void AddPrePeriod(FlatBufferBuilder builder, double prePeriod) { builder.AddDouble(43, prePeriod, 0.0); }
  public static void AddPreRAAN(FlatBufferBuilder builder, double preRAAN) { builder.AddDouble(44, preRAAN, 0.0); }
  public static void AddPreSMA(FlatBufferBuilder builder, double preSMA) { builder.AddDouble(45, preSMA, 0.0); }
  public static void AddPreGeoLongitude(FlatBufferBuilder builder, double preGeoLongitude) { builder.AddDouble(46, preGeoLongitude, 0.0); }
  public static void AddPreDriftRate(FlatBufferBuilder builder, double preDriftRate) { builder.AddDouble(47, preDriftRate, 0.0); }
  public static void AddPreSigmaU(FlatBufferBuilder builder, double preSigmaU) { builder.AddDouble(48, preSigmaU, 0.0); }
  public static void AddPreSigmaV(FlatBufferBuilder builder, double preSigmaV) { builder.AddDouble(49, preSigmaV, 0.0); }
  public static void AddPreSigmaW(FlatBufferBuilder builder, double preSigmaW) { builder.AddDouble(50, preSigmaW, 0.0); }
  public static void AddPostEventIdElset(FlatBufferBuilder builder, StringOffset postEventIdElsetOffset) { builder.AddOffset(51, postEventIdElsetOffset.Value, 0); }
  public static void AddPostEventElset(FlatBufferBuilder builder, StringOffset postEventElsetOffset) { builder.AddOffset(52, postEventElsetOffset.Value, 0); }
  public static void AddPostEventIdStateVector(FlatBufferBuilder builder, StringOffset postEventIdStateVectorOffset) { builder.AddOffset(53, postEventIdStateVectorOffset.Value, 0); }
  public static void AddPostEventStateVector(FlatBufferBuilder builder, StringOffset postEventStateVectorOffset) { builder.AddOffset(54, postEventStateVectorOffset.Value, 0); }
  public static void AddPostPosX(FlatBufferBuilder builder, double postPosX) { builder.AddDouble(55, postPosX, 0.0); }
  public static void AddPostPosY(FlatBufferBuilder builder, double postPosY) { builder.AddDouble(56, postPosY, 0.0); }
  public static void AddPostPosZ(FlatBufferBuilder builder, double postPosZ) { builder.AddDouble(57, postPosZ, 0.0); }
  public static void AddPostVelX(FlatBufferBuilder builder, double postVelX) { builder.AddDouble(58, postVelX, 0.0); }
  public static void AddPostVelY(FlatBufferBuilder builder, double postVelY) { builder.AddDouble(59, postVelY, 0.0); }
  public static void AddPostVelZ(FlatBufferBuilder builder, double postVelZ) { builder.AddDouble(60, postVelZ, 0.0); }
  public static void AddPostRadiationPressCoeff(FlatBufferBuilder builder, double postRadiationPressCoeff) { builder.AddDouble(61, postRadiationPressCoeff, 0.0); }
  public static void AddPostBallisticCoeff(FlatBufferBuilder builder, double postBallisticCoeff) { builder.AddDouble(62, postBallisticCoeff, 0.0); }
  public static void AddPostApogee(FlatBufferBuilder builder, double postApogee) { builder.AddDouble(63, postApogee, 0.0); }
  public static void AddPostPerigee(FlatBufferBuilder builder, double postPerigee) { builder.AddDouble(64, postPerigee, 0.0); }
  public static void AddPostInclination(FlatBufferBuilder builder, double postInclination) { builder.AddDouble(65, postInclination, 0.0); }
  public static void AddPostEccentricity(FlatBufferBuilder builder, double postEccentricity) { builder.AddDouble(66, postEccentricity, 0.0); }
  public static void AddPostPeriod(FlatBufferBuilder builder, double postPeriod) { builder.AddDouble(67, postPeriod, 0.0); }
  public static void AddPostRAAN(FlatBufferBuilder builder, double postRAAN) { builder.AddDouble(68, postRAAN, 0.0); }
  public static void AddPostSMA(FlatBufferBuilder builder, double postSMA) { builder.AddDouble(69, postSMA, 0.0); }
  public static void AddPostGeoLongitude(FlatBufferBuilder builder, double postGeoLongitude) { builder.AddDouble(70, postGeoLongitude, 0.0); }
  public static void AddPostDriftRate(FlatBufferBuilder builder, double postDriftRate) { builder.AddDouble(71, postDriftRate, 0.0); }
  public static void AddPostSigmaU(FlatBufferBuilder builder, double postSigmaU) { builder.AddDouble(72, postSigmaU, 0.0); }
  public static void AddPostSigmaV(FlatBufferBuilder builder, double postSigmaV) { builder.AddDouble(73, postSigmaV, 0.0); }
  public static void AddPostSigmaW(FlatBufferBuilder builder, double postSigmaW) { builder.AddDouble(74, postSigmaW, 0.0); }
  public static void AddCov(FlatBufferBuilder builder, VectorOffset covOffset) { builder.AddOffset(75, covOffset.Value, 0); }
  public static VectorOffset CreateCovVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCovVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCovVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPostMass(FlatBufferBuilder builder, double postMass) { builder.AddDouble(76, postMass, 0.0); }
  public static void AddPostArea(FlatBufferBuilder builder, double postArea) { builder.AddDouble(77, postArea, 0.0); }
  public static void AddNumObs(FlatBufferBuilder builder, int numObs) { builder.AddInt(78, numObs, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(79, descriptionOffset.Value, 0); }
  public static void AddDescriptor(FlatBufferBuilder builder, StringOffset descriptorOffset) { builder.AddOffset(80, descriptorOffset.Value, 0); }
  public static void AddStateModel(FlatBufferBuilder builder, StringOffset stateModelOffset) { builder.AddOffset(81, stateModelOffset.Value, 0); }
  public static void AddStateModelVersion(FlatBufferBuilder builder, double stateModelVersion) { builder.AddDouble(82, stateModelVersion, 0.0); }
  public static void AddNumAccelPoints(FlatBufferBuilder builder, int numAccelPoints) { builder.AddInt(83, numAccelPoints, 0); }
  public static void AddMnvrAccelTimes(FlatBufferBuilder builder, VectorOffset mnvrAccelTimesOffset) { builder.AddOffset(84, mnvrAccelTimesOffset.Value, 0); }
  public static VectorOffset CreateMnvrAccelTimesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelTimesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelTimesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelTimesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMnvrAccelTimesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMnvrAccels(FlatBufferBuilder builder, VectorOffset mnvrAccelsOffset) { builder.AddOffset(85, mnvrAccelsOffset.Value, 0); }
  public static VectorOffset CreateMnvrAccelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMnvrAccelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMnvrAccelUncs(FlatBufferBuilder builder, VectorOffset mnvrAccelUncsOffset) { builder.AddOffset(86, mnvrAccelUncsOffset.Value, 0); }
  public static VectorOffset CreateMnvrAccelUncsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelUncsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelUncsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMnvrAccelUncsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMnvrAccelUncsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(87, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(88, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, Maneuver_Full_dataMode_Enum dataMode) { builder.AddSbyte(89, (sbyte)dataMode, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(90, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(91, createdByOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(92, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAlgorithm(FlatBufferBuilder builder, StringOffset algorithmOffset) { builder.AddOffset(93, algorithmOffset.Value, 0); }
  public static void AddSourcedData(FlatBufferBuilder builder, VectorOffset sourcedDataOffset) { builder.AddOffset(94, sourcedDataOffset.Value, 0); }
  public static VectorOffset CreateSourcedDataVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSourcedDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSourcedDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSourcedDataTypes(FlatBufferBuilder builder, Maneuver_Full_sourcedDataTypes_Enum sourcedDataTypes) { builder.AddSbyte(95, (sbyte)sourcedDataTypes, 0); }
  public static void AddOnOrbit(FlatBufferBuilder builder, StringOffset onOrbitOffset) { builder.AddOffset(96, onOrbitOffset.Value, 0); }
  public static void AddTransactionId(FlatBufferBuilder builder, StringOffset transactionIdOffset) { builder.AddOffset(97, transactionIdOffset.Value, 0); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(98, origNetworkOffset.Value, 0); }
  public static Offset<Maneuver_Full> EndManeuver_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Maneuver_Full>(o);
  }
  public static void FinishManeuver_FullBuffer(FlatBufferBuilder builder, Offset<Maneuver_Full> offset) { builder.Finish(offset.Value, "MANE"); }
  public static void FinishSizePrefixedManeuver_FullBuffer(FlatBufferBuilder builder, Offset<Maneuver_Full> offset) { builder.FinishSizePrefixed(offset.Value, "MANE"); }
  public Maneuver_FullT UnPack() {
    var _o = new Maneuver_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(Maneuver_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.SatNo = this.SatNo;
    _o.ReportTime = this.ReportTime;
    _o.EventStartTime = this.EventStartTime;
    _o.EventEndTime = this.EventEndTime;
    _o.TotalBurnTime = this.TotalBurnTime;
    _o.OdFitEndTime = this.OdFitEndTime;
    _o.IdOnOrbit = this.IdOnOrbit;
    _o.IdSensor = this.IdSensor;
    _o.Uct = this.Uct;
    _o.ManeuverUnc = this.ManeuverUnc;
    _o.Characterization = this.Characterization;
    _o.CharacterizationUnc = this.CharacterizationUnc;
    _o.EventId = this.EventId;
    _o.OrigObjectId = this.OrigObjectId;
    _o.OrigSensorId = this.OrigSensorId;
    _o.Status = this.Status;
    _o.DeltaPos = this.DeltaPos;
    _o.DeltaPosU = this.DeltaPosU;
    _o.DeltaPosV = this.DeltaPosV;
    _o.DeltaPosW = this.DeltaPosW;
    _o.DeltaVel = this.DeltaVel;
    _o.DeltaVelU = this.DeltaVelU;
    _o.DeltaVelV = this.DeltaVelV;
    _o.DeltaVelW = this.DeltaVelW;
    _o.DeltaMass = this.DeltaMass;
    _o.PreEventIdElset = this.PreEventIdElset;
    _o.PreEventElset = this.PreEventElset;
    _o.PreEventIdStateVector = this.PreEventIdStateVector;
    _o.PreEventStateVector = this.PreEventStateVector;
    _o.PrePosX = this.PrePosX;
    _o.PrePosY = this.PrePosY;
    _o.PrePosZ = this.PrePosZ;
    _o.PreVelX = this.PreVelX;
    _o.PreVelY = this.PreVelY;
    _o.PreVelZ = this.PreVelZ;
    _o.PreRadiationPressCoeff = this.PreRadiationPressCoeff;
    _o.PreBallisticCoeff = this.PreBallisticCoeff;
    _o.PreApogee = this.PreApogee;
    _o.PrePerigee = this.PrePerigee;
    _o.PreInclination = this.PreInclination;
    _o.PreEccentricity = this.PreEccentricity;
    _o.PrePeriod = this.PrePeriod;
    _o.PreRAAN = this.PreRAAN;
    _o.PreSMA = this.PreSMA;
    _o.PreGeoLongitude = this.PreGeoLongitude;
    _o.PreDriftRate = this.PreDriftRate;
    _o.PreSigmaU = this.PreSigmaU;
    _o.PreSigmaV = this.PreSigmaV;
    _o.PreSigmaW = this.PreSigmaW;
    _o.PostEventIdElset = this.PostEventIdElset;
    _o.PostEventElset = this.PostEventElset;
    _o.PostEventIdStateVector = this.PostEventIdStateVector;
    _o.PostEventStateVector = this.PostEventStateVector;
    _o.PostPosX = this.PostPosX;
    _o.PostPosY = this.PostPosY;
    _o.PostPosZ = this.PostPosZ;
    _o.PostVelX = this.PostVelX;
    _o.PostVelY = this.PostVelY;
    _o.PostVelZ = this.PostVelZ;
    _o.PostRadiationPressCoeff = this.PostRadiationPressCoeff;
    _o.PostBallisticCoeff = this.PostBallisticCoeff;
    _o.PostApogee = this.PostApogee;
    _o.PostPerigee = this.PostPerigee;
    _o.PostInclination = this.PostInclination;
    _o.PostEccentricity = this.PostEccentricity;
    _o.PostPeriod = this.PostPeriod;
    _o.PostRAAN = this.PostRAAN;
    _o.PostSMA = this.PostSMA;
    _o.PostGeoLongitude = this.PostGeoLongitude;
    _o.PostDriftRate = this.PostDriftRate;
    _o.PostSigmaU = this.PostSigmaU;
    _o.PostSigmaV = this.PostSigmaV;
    _o.PostSigmaW = this.PostSigmaW;
    _o.Cov = new List<string>();
    for (var _j = 0; _j < this.CovLength; ++_j) {_o.Cov.Add(this.Cov(_j));}
    _o.PostMass = this.PostMass;
    _o.PostArea = this.PostArea;
    _o.NumObs = this.NumObs;
    _o.Description = this.Description;
    _o.Descriptor = this.Descriptor;
    _o.StateModel = this.StateModel;
    _o.StateModelVersion = this.StateModelVersion;
    _o.NumAccelPoints = this.NumAccelPoints;
    _o.MnvrAccelTimes = new List<string>();
    for (var _j = 0; _j < this.MnvrAccelTimesLength; ++_j) {_o.MnvrAccelTimes.Add(this.MnvrAccelTimes(_j));}
    _o.MnvrAccels = new List<string>();
    for (var _j = 0; _j < this.MnvrAccelsLength; ++_j) {_o.MnvrAccels.Add(this.MnvrAccels(_j));}
    _o.MnvrAccelUncs = new List<string>();
    for (var _j = 0; _j < this.MnvrAccelUncsLength; ++_j) {_o.MnvrAccelUncs.Add(this.MnvrAccelUncs(_j));}
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Tags = new List<string>();
    for (var _j = 0; _j < this.TagsLength; ++_j) {_o.Tags.Add(this.Tags(_j));}
    _o.Algorithm = this.Algorithm;
    _o.SourcedData = new List<string>();
    for (var _j = 0; _j < this.SourcedDataLength; ++_j) {_o.SourcedData.Add(this.SourcedData(_j));}
    _o.SourcedDataTypes = this.SourcedDataTypes;
    _o.OnOrbit = this.OnOrbit;
    _o.TransactionId = this.TransactionId;
    _o.OrigNetwork = this.OrigNetwork;
  }
  public static Offset<Maneuver_Full> Pack(FlatBufferBuilder builder, Maneuver_FullT _o) {
    if (_o == null) return default(Offset<Maneuver_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _reportTime = _o.ReportTime == null ? default(StringOffset) : builder.CreateString(_o.ReportTime);
    var _eventStartTime = _o.EventStartTime == null ? default(StringOffset) : builder.CreateString(_o.EventStartTime);
    var _eventEndTime = _o.EventEndTime == null ? default(StringOffset) : builder.CreateString(_o.EventEndTime);
    var _odFitEndTime = _o.OdFitEndTime == null ? default(StringOffset) : builder.CreateString(_o.OdFitEndTime);
    var _idOnOrbit = _o.IdOnOrbit == null ? default(StringOffset) : builder.CreateString(_o.IdOnOrbit);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _characterization = _o.Characterization == null ? default(StringOffset) : builder.CreateString(_o.Characterization);
    var _eventId = _o.EventId == null ? default(StringOffset) : builder.CreateString(_o.EventId);
    var _origObjectId = _o.OrigObjectId == null ? default(StringOffset) : builder.CreateString(_o.OrigObjectId);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _status = _o.Status == null ? default(StringOffset) : builder.CreateString(_o.Status);
    var _preEventIdElset = _o.PreEventIdElset == null ? default(StringOffset) : builder.CreateString(_o.PreEventIdElset);
    var _preEventElset = _o.PreEventElset == null ? default(StringOffset) : builder.CreateString(_o.PreEventElset);
    var _preEventIdStateVector = _o.PreEventIdStateVector == null ? default(StringOffset) : builder.CreateString(_o.PreEventIdStateVector);
    var _preEventStateVector = _o.PreEventStateVector == null ? default(StringOffset) : builder.CreateString(_o.PreEventStateVector);
    var _postEventIdElset = _o.PostEventIdElset == null ? default(StringOffset) : builder.CreateString(_o.PostEventIdElset);
    var _postEventElset = _o.PostEventElset == null ? default(StringOffset) : builder.CreateString(_o.PostEventElset);
    var _postEventIdStateVector = _o.PostEventIdStateVector == null ? default(StringOffset) : builder.CreateString(_o.PostEventIdStateVector);
    var _postEventStateVector = _o.PostEventStateVector == null ? default(StringOffset) : builder.CreateString(_o.PostEventStateVector);
    var _cov = default(VectorOffset);
    if (_o.Cov != null) {
      var __cov = new StringOffset[_o.Cov.Count];
      for (var _j = 0; _j < __cov.Length; ++_j) { __cov[_j] = builder.CreateString(_o.Cov[_j]); }
      _cov = CreateCovVector(builder, __cov);
    }
    var _description = _o.Description == null ? default(StringOffset) : builder.CreateString(_o.Description);
    var _descriptor = _o.Descriptor == null ? default(StringOffset) : builder.CreateString(_o.Descriptor);
    var _stateModel = _o.StateModel == null ? default(StringOffset) : builder.CreateString(_o.StateModel);
    var _mnvrAccelTimes = default(VectorOffset);
    if (_o.MnvrAccelTimes != null) {
      var __mnvrAccelTimes = new StringOffset[_o.MnvrAccelTimes.Count];
      for (var _j = 0; _j < __mnvrAccelTimes.Length; ++_j) { __mnvrAccelTimes[_j] = builder.CreateString(_o.MnvrAccelTimes[_j]); }
      _mnvrAccelTimes = CreateMnvrAccelTimesVector(builder, __mnvrAccelTimes);
    }
    var _mnvrAccels = default(VectorOffset);
    if (_o.MnvrAccels != null) {
      var __mnvrAccels = new StringOffset[_o.MnvrAccels.Count];
      for (var _j = 0; _j < __mnvrAccels.Length; ++_j) { __mnvrAccels[_j] = builder.CreateString(_o.MnvrAccels[_j]); }
      _mnvrAccels = CreateMnvrAccelsVector(builder, __mnvrAccels);
    }
    var _mnvrAccelUncs = default(VectorOffset);
    if (_o.MnvrAccelUncs != null) {
      var __mnvrAccelUncs = new StringOffset[_o.MnvrAccelUncs.Count];
      for (var _j = 0; _j < __mnvrAccelUncs.Length; ++_j) { __mnvrAccelUncs[_j] = builder.CreateString(_o.MnvrAccelUncs[_j]); }
      _mnvrAccelUncs = CreateMnvrAccelUncsVector(builder, __mnvrAccelUncs);
    }
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _tags = default(VectorOffset);
    if (_o.Tags != null) {
      var __tags = new StringOffset[_o.Tags.Count];
      for (var _j = 0; _j < __tags.Length; ++_j) { __tags[_j] = builder.CreateString(_o.Tags[_j]); }
      _tags = CreateTagsVector(builder, __tags);
    }
    var _algorithm = _o.Algorithm == null ? default(StringOffset) : builder.CreateString(_o.Algorithm);
    var _sourcedData = default(VectorOffset);
    if (_o.SourcedData != null) {
      var __sourcedData = new StringOffset[_o.SourcedData.Count];
      for (var _j = 0; _j < __sourcedData.Length; ++_j) { __sourcedData[_j] = builder.CreateString(_o.SourcedData[_j]); }
      _sourcedData = CreateSourcedDataVector(builder, __sourcedData);
    }
    var _onOrbit = _o.OnOrbit == null ? default(StringOffset) : builder.CreateString(_o.OnOrbit);
    var _transactionId = _o.TransactionId == null ? default(StringOffset) : builder.CreateString(_o.TransactionId);
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    return CreateManeuver_Full(
      builder,
      _id,
      _classificationMarking,
      _o.SatNo,
      _reportTime,
      _eventStartTime,
      _eventEndTime,
      _o.TotalBurnTime,
      _odFitEndTime,
      _idOnOrbit,
      _idSensor,
      _o.Uct,
      _o.ManeuverUnc,
      _characterization,
      _o.CharacterizationUnc,
      _eventId,
      _origObjectId,
      _origSensorId,
      _status,
      _o.DeltaPos,
      _o.DeltaPosU,
      _o.DeltaPosV,
      _o.DeltaPosW,
      _o.DeltaVel,
      _o.DeltaVelU,
      _o.DeltaVelV,
      _o.DeltaVelW,
      _o.DeltaMass,
      _preEventIdElset,
      _preEventElset,
      _preEventIdStateVector,
      _preEventStateVector,
      _o.PrePosX,
      _o.PrePosY,
      _o.PrePosZ,
      _o.PreVelX,
      _o.PreVelY,
      _o.PreVelZ,
      _o.PreRadiationPressCoeff,
      _o.PreBallisticCoeff,
      _o.PreApogee,
      _o.PrePerigee,
      _o.PreInclination,
      _o.PreEccentricity,
      _o.PrePeriod,
      _o.PreRAAN,
      _o.PreSMA,
      _o.PreGeoLongitude,
      _o.PreDriftRate,
      _o.PreSigmaU,
      _o.PreSigmaV,
      _o.PreSigmaW,
      _postEventIdElset,
      _postEventElset,
      _postEventIdStateVector,
      _postEventStateVector,
      _o.PostPosX,
      _o.PostPosY,
      _o.PostPosZ,
      _o.PostVelX,
      _o.PostVelY,
      _o.PostVelZ,
      _o.PostRadiationPressCoeff,
      _o.PostBallisticCoeff,
      _o.PostApogee,
      _o.PostPerigee,
      _o.PostInclination,
      _o.PostEccentricity,
      _o.PostPeriod,
      _o.PostRAAN,
      _o.PostSMA,
      _o.PostGeoLongitude,
      _o.PostDriftRate,
      _o.PostSigmaU,
      _o.PostSigmaV,
      _o.PostSigmaW,
      _cov,
      _o.PostMass,
      _o.PostArea,
      _o.NumObs,
      _description,
      _descriptor,
      _stateModel,
      _o.StateModelVersion,
      _o.NumAccelPoints,
      _mnvrAccelTimes,
      _mnvrAccels,
      _mnvrAccelUncs,
      _source,
      _origin,
      _o.DataMode,
      _createdAt,
      _createdBy,
      _tags,
      _algorithm,
      _sourcedData,
      _o.SourcedDataTypes,
      _onOrbit,
      _transactionId,
      _origNetwork);
  }
}

public class Maneuver_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public int SatNo { get; set; }
  public string ReportTime { get; set; }
  public string EventStartTime { get; set; }
  public string EventEndTime { get; set; }
  public double TotalBurnTime { get; set; }
  public string OdFitEndTime { get; set; }
  public string IdOnOrbit { get; set; }
  public string IdSensor { get; set; }
  public bool Uct { get; set; }
  public double ManeuverUnc { get; set; }
  public string Characterization { get; set; }
  public double CharacterizationUnc { get; set; }
  public string EventId { get; set; }
  public string OrigObjectId { get; set; }
  public string OrigSensorId { get; set; }
  public string Status { get; set; }
  public double DeltaPos { get; set; }
  public double DeltaPosU { get; set; }
  public double DeltaPosV { get; set; }
  public double DeltaPosW { get; set; }
  public double DeltaVel { get; set; }
  public double DeltaVelU { get; set; }
  public double DeltaVelV { get; set; }
  public double DeltaVelW { get; set; }
  public double DeltaMass { get; set; }
  public string PreEventIdElset { get; set; }
  public string PreEventElset { get; set; }
  public string PreEventIdStateVector { get; set; }
  public string PreEventStateVector { get; set; }
  public double PrePosX { get; set; }
  public double PrePosY { get; set; }
  public double PrePosZ { get; set; }
  public double PreVelX { get; set; }
  public double PreVelY { get; set; }
  public double PreVelZ { get; set; }
  public double PreRadiationPressCoeff { get; set; }
  public double PreBallisticCoeff { get; set; }
  public double PreApogee { get; set; }
  public double PrePerigee { get; set; }
  public double PreInclination { get; set; }
  public double PreEccentricity { get; set; }
  public double PrePeriod { get; set; }
  public double PreRAAN { get; set; }
  public double PreSMA { get; set; }
  public double PreGeoLongitude { get; set; }
  public double PreDriftRate { get; set; }
  public double PreSigmaU { get; set; }
  public double PreSigmaV { get; set; }
  public double PreSigmaW { get; set; }
  public string PostEventIdElset { get; set; }
  public string PostEventElset { get; set; }
  public string PostEventIdStateVector { get; set; }
  public string PostEventStateVector { get; set; }
  public double PostPosX { get; set; }
  public double PostPosY { get; set; }
  public double PostPosZ { get; set; }
  public double PostVelX { get; set; }
  public double PostVelY { get; set; }
  public double PostVelZ { get; set; }
  public double PostRadiationPressCoeff { get; set; }
  public double PostBallisticCoeff { get; set; }
  public double PostApogee { get; set; }
  public double PostPerigee { get; set; }
  public double PostInclination { get; set; }
  public double PostEccentricity { get; set; }
  public double PostPeriod { get; set; }
  public double PostRAAN { get; set; }
  public double PostSMA { get; set; }
  public double PostGeoLongitude { get; set; }
  public double PostDriftRate { get; set; }
  public double PostSigmaU { get; set; }
  public double PostSigmaV { get; set; }
  public double PostSigmaW { get; set; }
  public List<string> Cov { get; set; }
  public double PostMass { get; set; }
  public double PostArea { get; set; }
  public int NumObs { get; set; }
  public string Description { get; set; }
  public string Descriptor { get; set; }
  public string StateModel { get; set; }
  public double StateModelVersion { get; set; }
  public int NumAccelPoints { get; set; }
  public List<string> MnvrAccelTimes { get; set; }
  public List<string> MnvrAccels { get; set; }
  public List<string> MnvrAccelUncs { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public Maneuver_Full_dataMode_Enum DataMode { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public List<string> Tags { get; set; }
  public string Algorithm { get; set; }
  public List<string> SourcedData { get; set; }
  public Maneuver_Full_sourcedDataTypes_Enum SourcedDataTypes { get; set; }
  public string OnOrbit { get; set; }
  public string TransactionId { get; set; }
  public string OrigNetwork { get; set; }

  public Maneuver_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.SatNo = 0;
    this.ReportTime = null;
    this.EventStartTime = null;
    this.EventEndTime = null;
    this.TotalBurnTime = 0.0;
    this.OdFitEndTime = null;
    this.IdOnOrbit = null;
    this.IdSensor = null;
    this.Uct = false;
    this.ManeuverUnc = 0.0;
    this.Characterization = null;
    this.CharacterizationUnc = 0.0;
    this.EventId = null;
    this.OrigObjectId = null;
    this.OrigSensorId = null;
    this.Status = null;
    this.DeltaPos = 0.0;
    this.DeltaPosU = 0.0;
    this.DeltaPosV = 0.0;
    this.DeltaPosW = 0.0;
    this.DeltaVel = 0.0;
    this.DeltaVelU = 0.0;
    this.DeltaVelV = 0.0;
    this.DeltaVelW = 0.0;
    this.DeltaMass = 0.0;
    this.PreEventIdElset = null;
    this.PreEventElset = null;
    this.PreEventIdStateVector = null;
    this.PreEventStateVector = null;
    this.PrePosX = 0.0;
    this.PrePosY = 0.0;
    this.PrePosZ = 0.0;
    this.PreVelX = 0.0;
    this.PreVelY = 0.0;
    this.PreVelZ = 0.0;
    this.PreRadiationPressCoeff = 0.0;
    this.PreBallisticCoeff = 0.0;
    this.PreApogee = 0.0;
    this.PrePerigee = 0.0;
    this.PreInclination = 0.0;
    this.PreEccentricity = 0.0;
    this.PrePeriod = 0.0;
    this.PreRAAN = 0.0;
    this.PreSMA = 0.0;
    this.PreGeoLongitude = 0.0;
    this.PreDriftRate = 0.0;
    this.PreSigmaU = 0.0;
    this.PreSigmaV = 0.0;
    this.PreSigmaW = 0.0;
    this.PostEventIdElset = null;
    this.PostEventElset = null;
    this.PostEventIdStateVector = null;
    this.PostEventStateVector = null;
    this.PostPosX = 0.0;
    this.PostPosY = 0.0;
    this.PostPosZ = 0.0;
    this.PostVelX = 0.0;
    this.PostVelY = 0.0;
    this.PostVelZ = 0.0;
    this.PostRadiationPressCoeff = 0.0;
    this.PostBallisticCoeff = 0.0;
    this.PostApogee = 0.0;
    this.PostPerigee = 0.0;
    this.PostInclination = 0.0;
    this.PostEccentricity = 0.0;
    this.PostPeriod = 0.0;
    this.PostRAAN = 0.0;
    this.PostSMA = 0.0;
    this.PostGeoLongitude = 0.0;
    this.PostDriftRate = 0.0;
    this.PostSigmaU = 0.0;
    this.PostSigmaV = 0.0;
    this.PostSigmaW = 0.0;
    this.Cov = null;
    this.PostMass = 0.0;
    this.PostArea = 0.0;
    this.NumObs = 0;
    this.Description = null;
    this.Descriptor = null;
    this.StateModel = null;
    this.StateModelVersion = 0.0;
    this.NumAccelPoints = 0;
    this.MnvrAccelTimes = null;
    this.MnvrAccels = null;
    this.MnvrAccelUncs = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = Maneuver_Full_dataMode_Enum.REAL;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Tags = null;
    this.Algorithm = null;
    this.SourcedData = null;
    this.SourcedDataTypes = Maneuver_Full_sourcedDataTypes_Enum.EO;
    this.OnOrbit = null;
    this.TransactionId = null;
    this.OrigNetwork = null;
  }
  public static Maneuver_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return Maneuver_Full.GetRootAsManeuver_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Maneuver_Full.FinishManeuver_FullBuffer(fbb, Maneuver_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class Maneuver_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyField(tablePos, 8 /*SatNo*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 10 /*ReportTime*/, false)
      && verifier.VerifyString(tablePos, 12 /*EventStartTime*/, false)
      && verifier.VerifyString(tablePos, 14 /*EventEndTime*/, false)
      && verifier.VerifyField(tablePos, 16 /*TotalBurnTime*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 18 /*OdFitEndTime*/, false)
      && verifier.VerifyString(tablePos, 20 /*IdOnOrbit*/, false)
      && verifier.VerifyString(tablePos, 22 /*IdSensor*/, false)
      && verifier.VerifyField(tablePos, 24 /*Uct*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 26 /*ManeuverUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 28 /*Characterization*/, false)
      && verifier.VerifyField(tablePos, 30 /*CharacterizationUnc*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 32 /*EventId*/, false)
      && verifier.VerifyString(tablePos, 34 /*OrigObjectId*/, false)
      && verifier.VerifyString(tablePos, 36 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 38 /*Status*/, false)
      && verifier.VerifyField(tablePos, 40 /*DeltaPos*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 42 /*DeltaPosU*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*DeltaPosV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 46 /*DeltaPosW*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 48 /*DeltaVel*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*DeltaVelU*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*DeltaVelV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*DeltaVelW*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*DeltaMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 58 /*PreEventIdElset*/, false)
      && verifier.VerifyString(tablePos, 60 /*PreEventElset*/, false)
      && verifier.VerifyString(tablePos, 62 /*PreEventIdStateVector*/, false)
      && verifier.VerifyString(tablePos, 64 /*PreEventStateVector*/, false)
      && verifier.VerifyField(tablePos, 66 /*PrePosX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*PrePosY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*PrePosZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*PreVelX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*PreVelY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*PreVelZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*PreRadiationPressCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*PreBallisticCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*PreApogee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*PrePerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*PreInclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 88 /*PreEccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 90 /*PrePeriod*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*PreRAAN*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*PreSMA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*PreGeoLongitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*PreDriftRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*PreSigmaU*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*PreSigmaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 104 /*PreSigmaW*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 106 /*PostEventIdElset*/, false)
      && verifier.VerifyString(tablePos, 108 /*PostEventElset*/, false)
      && verifier.VerifyString(tablePos, 110 /*PostEventIdStateVector*/, false)
      && verifier.VerifyString(tablePos, 112 /*PostEventStateVector*/, false)
      && verifier.VerifyField(tablePos, 114 /*PostPosX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 116 /*PostPosY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 118 /*PostPosZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*PostVelX*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*PostVelY*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*PostVelZ*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 126 /*PostRadiationPressCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*PostBallisticCoeff*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*PostApogee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*PostPerigee*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*PostInclination*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*PostEccentricity*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*PostPeriod*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*PostRAAN*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*PostSMA*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*PostGeoLongitude*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*PostDriftRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*PostSigmaU*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*PostSigmaV*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*PostSigmaW*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 154 /*Cov*/, false)
      && verifier.VerifyField(tablePos, 156 /*PostMass*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*PostArea*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 160 /*NumObs*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 162 /*Description*/, false)
      && verifier.VerifyString(tablePos, 164 /*Descriptor*/, false)
      && verifier.VerifyString(tablePos, 166 /*StateModel*/, false)
      && verifier.VerifyField(tablePos, 168 /*StateModelVersion*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 170 /*NumAccelPoints*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 172 /*MnvrAccelTimes*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 174 /*MnvrAccels*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 176 /*MnvrAccelUncs*/, false)
      && verifier.VerifyString(tablePos, 178 /*Source*/, false)
      && verifier.VerifyString(tablePos, 180 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 182 /*DataMode*/, 1 /*Maneuver_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 184 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 186 /*CreatedBy*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 188 /*Tags*/, false)
      && verifier.VerifyString(tablePos, 190 /*Algorithm*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 192 /*SourcedData*/, false)
      && verifier.VerifyField(tablePos, 194 /*SourcedDataTypes*/, 1 /*Maneuver_Full_sourcedDataTypes_Enum*/, 1, false)
      && verifier.VerifyString(tablePos, 196 /*OnOrbit*/, false)
      && verifier.VerifyString(tablePos, 198 /*TransactionId*/, false)
      && verifier.VerifyString(tablePos, 200 /*OrigNetwork*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
