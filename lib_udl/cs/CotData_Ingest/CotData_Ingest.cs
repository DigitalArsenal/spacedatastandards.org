// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// Schema for the CotData to post.
public struct CotData_Ingest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CotData_Ingest GetRootAsCotData_Ingest(ByteBuffer _bb) { return GetRootAsCotData_Ingest(_bb, new CotData_Ingest()); }
  public static CotData_Ingest GetRootAsCotData_Ingest(ByteBuffer _bb, CotData_Ingest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool CotData_IngestBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "COTD"); }
  public static bool VerifyCotData_Ingest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("COTD", false, CotData_IngestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CotData_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
  /// Example: /// Example: POI-ID
  /// Constraints: No constraints specified.
  public string SenderUid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSenderUidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSenderUidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSenderUidArray() { return __p.__vector_as_array<byte>(4); }
  /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: h-e
  /// Constraints: No constraints specified.
  public string How { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHowBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetHowBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetHowArray() { return __p.__vector_as_array<byte>(6); }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Ce { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  public double Le { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Stale timestamp (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Stale { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStaleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetStaleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetStaleArray() { return __p.__vector_as_array<byte>(12); }
  /// Start time of event validity (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string Start { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStartBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStartArray() { return __p.__vector_as_array<byte>(14); }
  /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lat { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  public double Lon { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Event type, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: a-h-G
  /// Constraints: No constraints specified.
  public string Type { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(20); }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  public double Alt { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CotPositionData { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCotPositionDataBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetCotPositionDataBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetCotPositionDataArray() { return __p.__vector_as_array<byte>(24); }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CotChatData { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCotChatDataBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetCotChatDataBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetCotChatDataArray() { return __p.__vector_as_array<byte>(26); }
  /// Optional list of call signs to send message to directly.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string CallSigns(int j) { int o = __p.__offset(28); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CallSignsLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional list of TAK user ids to send message to directly.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Uids(int j) { int o = __p.__offset(30); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int UidsLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  public string Groups(int j) { int o = __p.__offset(32); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int GroupsLength { get { int o = __p.__offset(32); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<CotData_Ingest> CreateCotData_Ingest(FlatBufferBuilder builder,
      StringOffset senderUidOffset = default(StringOffset),
      StringOffset howOffset = default(StringOffset),
      double ce = 0.0,
      double le = 0.0,
      StringOffset staleOffset = default(StringOffset),
      StringOffset startOffset = default(StringOffset),
      double lat = 0.0,
      double lon = 0.0,
      StringOffset typeOffset = default(StringOffset),
      double alt = 0.0,
      StringOffset cotPositionDataOffset = default(StringOffset),
      StringOffset cotChatDataOffset = default(StringOffset),
      VectorOffset callSignsOffset = default(VectorOffset),
      VectorOffset uidsOffset = default(VectorOffset),
      VectorOffset groupsOffset = default(VectorOffset)) {
    builder.StartTable(15);
    CotData_Ingest.AddAlt(builder, alt);
    CotData_Ingest.AddLon(builder, lon);
    CotData_Ingest.AddLat(builder, lat);
    CotData_Ingest.AddLe(builder, le);
    CotData_Ingest.AddCe(builder, ce);
    CotData_Ingest.AddGroups(builder, groupsOffset);
    CotData_Ingest.AddUids(builder, uidsOffset);
    CotData_Ingest.AddCallSigns(builder, callSignsOffset);
    CotData_Ingest.AddCotChatData(builder, cotChatDataOffset);
    CotData_Ingest.AddCotPositionData(builder, cotPositionDataOffset);
    CotData_Ingest.AddType(builder, typeOffset);
    CotData_Ingest.AddStart(builder, startOffset);
    CotData_Ingest.AddStale(builder, staleOffset);
    CotData_Ingest.AddHow(builder, howOffset);
    CotData_Ingest.AddSenderUid(builder, senderUidOffset);
    return CotData_Ingest.EndCotData_Ingest(builder);
  }

  public static void StartCotData_Ingest(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddSenderUid(FlatBufferBuilder builder, StringOffset senderUidOffset) { builder.AddOffset(0, senderUidOffset.Value, 0); }
  public static void AddHow(FlatBufferBuilder builder, StringOffset howOffset) { builder.AddOffset(1, howOffset.Value, 0); }
  public static void AddCe(FlatBufferBuilder builder, double ce) { builder.AddDouble(2, ce, 0.0); }
  public static void AddLe(FlatBufferBuilder builder, double le) { builder.AddDouble(3, le, 0.0); }
  public static void AddStale(FlatBufferBuilder builder, StringOffset staleOffset) { builder.AddOffset(4, staleOffset.Value, 0); }
  public static void AddStart(FlatBufferBuilder builder, StringOffset startOffset) { builder.AddOffset(5, startOffset.Value, 0); }
  public static void AddLat(FlatBufferBuilder builder, double lat) { builder.AddDouble(6, lat, 0.0); }
  public static void AddLon(FlatBufferBuilder builder, double lon) { builder.AddDouble(7, lon, 0.0); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(8, typeOffset.Value, 0); }
  public static void AddAlt(FlatBufferBuilder builder, double alt) { builder.AddDouble(9, alt, 0.0); }
  public static void AddCotPositionData(FlatBufferBuilder builder, StringOffset cotPositionDataOffset) { builder.AddOffset(10, cotPositionDataOffset.Value, 0); }
  public static void AddCotChatData(FlatBufferBuilder builder, StringOffset cotChatDataOffset) { builder.AddOffset(11, cotChatDataOffset.Value, 0); }
  public static void AddCallSigns(FlatBufferBuilder builder, VectorOffset callSignsOffset) { builder.AddOffset(12, callSignsOffset.Value, 0); }
  public static VectorOffset CreateCallSignsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCallSignsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCallSignsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCallSignsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCallSignsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUids(FlatBufferBuilder builder, VectorOffset uidsOffset) { builder.AddOffset(13, uidsOffset.Value, 0); }
  public static VectorOffset CreateUidsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUidsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUidsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateUidsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartUidsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroups(FlatBufferBuilder builder, VectorOffset groupsOffset) { builder.AddOffset(14, groupsOffset.Value, 0); }
  public static VectorOffset CreateGroupsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateGroupsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartGroupsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<CotData_Ingest> EndCotData_Ingest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CotData_Ingest>(o);
  }
  public static void FinishCotData_IngestBuffer(FlatBufferBuilder builder, Offset<CotData_Ingest> offset) { builder.Finish(offset.Value, "COTD"); }
  public static void FinishSizePrefixedCotData_IngestBuffer(FlatBufferBuilder builder, Offset<CotData_Ingest> offset) { builder.FinishSizePrefixed(offset.Value, "COTD"); }
  public CotData_IngestT UnPack() {
    var _o = new CotData_IngestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CotData_IngestT _o) {
    _o.SenderUid = this.SenderUid;
    _o.How = this.How;
    _o.Ce = this.Ce;
    _o.Le = this.Le;
    _o.Stale = this.Stale;
    _o.Start = this.Start;
    _o.Lat = this.Lat;
    _o.Lon = this.Lon;
    _o.Type = this.Type;
    _o.Alt = this.Alt;
    _o.CotPositionData = this.CotPositionData;
    _o.CotChatData = this.CotChatData;
    _o.CallSigns = new List<string>();
    for (var _j = 0; _j < this.CallSignsLength; ++_j) {_o.CallSigns.Add(this.CallSigns(_j));}
    _o.Uids = new List<string>();
    for (var _j = 0; _j < this.UidsLength; ++_j) {_o.Uids.Add(this.Uids(_j));}
    _o.Groups = new List<string>();
    for (var _j = 0; _j < this.GroupsLength; ++_j) {_o.Groups.Add(this.Groups(_j));}
  }
  public static Offset<CotData_Ingest> Pack(FlatBufferBuilder builder, CotData_IngestT _o) {
    if (_o == null) return default(Offset<CotData_Ingest>);
    var _senderUid = _o.SenderUid == null ? default(StringOffset) : builder.CreateString(_o.SenderUid);
    var _how = _o.How == null ? default(StringOffset) : builder.CreateString(_o.How);
    var _stale = _o.Stale == null ? default(StringOffset) : builder.CreateString(_o.Stale);
    var _start = _o.Start == null ? default(StringOffset) : builder.CreateString(_o.Start);
    var _type = _o.Type == null ? default(StringOffset) : builder.CreateString(_o.Type);
    var _cotPositionData = _o.CotPositionData == null ? default(StringOffset) : builder.CreateString(_o.CotPositionData);
    var _cotChatData = _o.CotChatData == null ? default(StringOffset) : builder.CreateString(_o.CotChatData);
    var _callSigns = default(VectorOffset);
    if (_o.CallSigns != null) {
      var __callSigns = new StringOffset[_o.CallSigns.Count];
      for (var _j = 0; _j < __callSigns.Length; ++_j) { __callSigns[_j] = builder.CreateString(_o.CallSigns[_j]); }
      _callSigns = CreateCallSignsVector(builder, __callSigns);
    }
    var _uids = default(VectorOffset);
    if (_o.Uids != null) {
      var __uids = new StringOffset[_o.Uids.Count];
      for (var _j = 0; _j < __uids.Length; ++_j) { __uids[_j] = builder.CreateString(_o.Uids[_j]); }
      _uids = CreateUidsVector(builder, __uids);
    }
    var _groups = default(VectorOffset);
    if (_o.Groups != null) {
      var __groups = new StringOffset[_o.Groups.Count];
      for (var _j = 0; _j < __groups.Length; ++_j) { __groups[_j] = builder.CreateString(_o.Groups[_j]); }
      _groups = CreateGroupsVector(builder, __groups);
    }
    return CreateCotData_Ingest(
      builder,
      _senderUid,
      _how,
      _o.Ce,
      _o.Le,
      _stale,
      _start,
      _o.Lat,
      _o.Lon,
      _type,
      _o.Alt,
      _cotPositionData,
      _cotChatData,
      _callSigns,
      _uids,
      _groups);
  }
}

public class CotData_IngestT
{
  public string SenderUid { get; set; }
  public string How { get; set; }
  public double Ce { get; set; }
  public double Le { get; set; }
  public string Stale { get; set; }
  public string Start { get; set; }
  public double Lat { get; set; }
  public double Lon { get; set; }
  public string Type { get; set; }
  public double Alt { get; set; }
  public string CotPositionData { get; set; }
  public string CotChatData { get; set; }
  public List<string> CallSigns { get; set; }
  public List<string> Uids { get; set; }
  public List<string> Groups { get; set; }

  public CotData_IngestT() {
    this.SenderUid = null;
    this.How = null;
    this.Ce = 0.0;
    this.Le = 0.0;
    this.Stale = null;
    this.Start = null;
    this.Lat = 0.0;
    this.Lon = 0.0;
    this.Type = null;
    this.Alt = 0.0;
    this.CotPositionData = null;
    this.CotChatData = null;
    this.CallSigns = null;
    this.Uids = null;
    this.Groups = null;
  }
  public static CotData_IngestT DeserializeFromBinary(byte[] fbBuffer) {
    return CotData_Ingest.GetRootAsCotData_Ingest(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    CotData_Ingest.FinishCotData_IngestBuffer(fbb, CotData_Ingest.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class CotData_IngestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*SenderUid*/, false)
      && verifier.VerifyString(tablePos, 6 /*How*/, false)
      && verifier.VerifyField(tablePos, 8 /*Ce*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*Le*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 12 /*Stale*/, false)
      && verifier.VerifyString(tablePos, 14 /*Start*/, false)
      && verifier.VerifyField(tablePos, 16 /*Lat*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*Lon*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 20 /*Type*/, false)
      && verifier.VerifyField(tablePos, 22 /*Alt*/, 8 /*double*/, 8, false)
      && verifier.VerifyString(tablePos, 24 /*CotPositionData*/, false)
      && verifier.VerifyString(tablePos, 26 /*CotChatData*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 28 /*CallSigns*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 30 /*Uids*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 32 /*Groups*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
