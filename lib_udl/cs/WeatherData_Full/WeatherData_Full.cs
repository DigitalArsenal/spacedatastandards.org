// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

/// /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
public struct WeatherData_Full : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static WeatherData_Full GetRootAsWeatherData_Full(ByteBuffer _bb) { return GetRootAsWeatherData_Full(_bb, new WeatherData_Full()); }
  public static WeatherData_Full GetRootAsWeatherData_Full(ByteBuffer _bb, WeatherData_Full obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool WeatherData_FullBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "WEAT"); }
  public static bool VerifyWeatherData_Full(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("WEAT", false, WeatherData_FullVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WeatherData_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: WEATHER-DATA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  public string ClassificationMarking { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassificationMarkingBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassificationMarkingBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassificationMarkingArray() { return __p.__vector_as_array<byte>(6); }
  /// Unique identifier of the sensor making the weather measurement.
  /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  /// Constraints: Minimum length = 0, Maximum length = 36
  public string IdSensor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdSensorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIdSensorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIdSensorArray() { return __p.__vector_as_array<byte>(8); }
  /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string OrigSensorId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigSensorIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOrigSensorIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOrigSensorIdArray() { return __p.__vector_as_array<byte>(10); }
  /// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string ObTime { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetObTimeBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetObTimeBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetObTimeArray() { return __p.__vector_as_array<byte>(12); }
  /// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
  /// Example: /// Example: [116.5, 121.6]
  /// Constraints: No constraints specified.
  public string SigPwrs(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SigPwrsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
  /// Example: /// Example: [58.2, 58.3]
  /// Constraints: No constraints specified.
  public string NoiseLvls(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NoiseLvlsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
  /// Example: /// Example: [0.3, 0.6]
  /// Constraints: No constraints specified.
  public string SpecWidths(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpecWidthsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
  /// Example: /// Example: [16, 1]
  /// Constraints: No constraints specified.
  public string FirstGuessAvgs(int j) { int o = __p.__offset(20); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FirstGuessAvgsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Quality control flag value, as defined by the data provider.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  public int QcValue { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Datetime the system files were created.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  public string FileCreation { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileCreationBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetFileCreationBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetFileCreationArray() { return __p.__vector_as_array<byte>(24); }
  /// Last altitude with recorded measurements in this record, in meters.
  /// Example: /// Example: 19505.1
  /// Constraints: No constraints specified.
  public double TermAlt { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average transmitted power of the radar, in kilowatts.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  public double AvgTxPwr { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Average power of the reflected signal received by the radar, in Watts.
  /// Example: /// Example: 714.9
  /// Constraints: No constraints specified.
  public double AvgRefPwr { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of sectors within the radar coverage area, each containing a number of antennas.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  public int SectorNum { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Number of antennas across all sectors within the radar coverage area.
  /// Example: /// Example: 640
  /// Constraints: No constraints specified.
  public int NumElements { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
  /// Example: /// Example: [32, 30]
  /// Constraints: No constraints specified.
  public string TdAvgSampleNums(int j) { int o = __p.__offset(36); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TdAvgSampleNumsLength { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Checksum value for the data.
  /// Example: /// Example: 133
  /// Constraints: No constraints specified.
  public int Checksum { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  public string CoIntegs(int j) { int o = __p.__offset(40); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int CoIntegsLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  public string SpecAvgs(int j) { int o = __p.__offset(42); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SpecAvgsLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
  /// Example: /// Example: [1000.3, 1000.2]
  /// Constraints: No constraints specified.
  public string InterpulsePeriods(int j) { int o = __p.__offset(44); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int InterpulsePeriodsLength { get { int o = __p.__offset(44); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
  /// Example: /// Example: [44.4, 467.3]
  /// Constraints: No constraints specified.
  public string DoppVels(int j) { int o = __p.__offset(46); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DoppVelsLength { get { int o = __p.__offset(46); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
  /// Example: /// Example: [5, 2]
  /// Constraints: No constraints specified.
  public string ConsRecs(int j) { int o = __p.__offset(48); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ConsRecsLength { get { int o = __p.__offset(48); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
  /// Example: /// Example: [14.5, -16.2]
  /// Constraints: No constraints specified.
  public string Snrs(int j) { int o = __p.__offset(50); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SnrsLength { get { int o = __p.__offset(50); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
  /// Example: /// Example: 163.7
  /// Constraints: No constraints specified.
  public double SigStrength { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 3.4
  /// Constraints: No constraints specified.
  public double SemiMajorAxis { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 0.3
  /// Constraints: No constraints specified.
  public double SemiMinorAxis { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
  /// Example: /// Example: 75.7
  /// Constraints: No constraints specified.
  public double AngleOrientation { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Number of sensors used in the lightning event location solution.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  public int LightEventNum { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Array of sensor(s) that participated in the lightning event location determination.
  /// Example: /// Example: [11, 28, 190]
  /// Constraints: No constraints specified.
  public string LightDetSensors(int j) { int o = __p.__offset(62); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LightDetSensorsLength { get { int o = __p.__offset(62); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The positional confidence of the calculated lightning event location using the chi-square statistical method.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  public double PosConfidence { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  /// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
  /// Constraints: No constraints specified.
  public string SrcTyps(int j) { int o = __p.__offset(66); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcTypsLength { get { int o = __p.__offset(66); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
  /// Constraints: No constraints specified.
  public string SrcIds(int j) { int o = __p.__offset(68); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int SrcIdsLength { get { int o = __p.__offset(68); return o != 0 ? __p.__vector_len(o) : 0; } }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  public string OrigNetwork { get { int o = __p.__offset(70); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOrigNetworkBytes() { return __p.__vector_as_span<byte>(70, 1); }
#else
  public ArraySegment<byte>? GetOrigNetworkBytes() { return __p.__vector_as_arraysegment(70); }
#endif
  public byte[] GetOrigNetworkArray() { return __p.__vector_as_array<byte>(70); }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  public string CreatedAt { get { int o = __p.__offset(72); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedAtBytes() { return __p.__vector_as_span<byte>(72, 1); }
#else
  public ArraySegment<byte>? GetCreatedAtBytes() { return __p.__vector_as_arraysegment(72); }
#endif
  public byte[] GetCreatedAtArray() { return __p.__vector_as_array<byte>(72); }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  public string CreatedBy { get { int o = __p.__offset(74); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCreatedByBytes() { return __p.__vector_as_span<byte>(74, 1); }
#else
  public ArraySegment<byte>? GetCreatedByBytes() { return __p.__vector_as_arraysegment(74); }
#endif
  public byte[] GetCreatedByArray() { return __p.__vector_as_array<byte>(74); }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  public string Source { get { int o = __p.__offset(76); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSourceBytes() { return __p.__vector_as_span<byte>(76, 1); }
#else
  public ArraySegment<byte>? GetSourceBytes() { return __p.__vector_as_arraysegment(76); }
#endif
  public byte[] GetSourceArray() { return __p.__vector_as_array<byte>(76); }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  public string Origin { get { int o = __p.__offset(78); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOriginBytes() { return __p.__vector_as_span<byte>(78, 1); }
#else
  public ArraySegment<byte>? GetOriginBytes() { return __p.__vector_as_arraysegment(78); }
#endif
  public byte[] GetOriginArray() { return __p.__vector_as_array<byte>(78); }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  public WeatherData_Full_dataMode_Enum DataMode { get { int o = __p.__offset(80); return o != 0 ? (WeatherData_Full_dataMode_Enum)__p.bb.GetSbyte(o + __p.bb_pos) : WeatherData_Full_dataMode_Enum.REAL; } }

  public static Offset<WeatherData_Full> CreateWeatherData_Full(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset classificationMarkingOffset = default(StringOffset),
      StringOffset idSensorOffset = default(StringOffset),
      StringOffset origSensorIdOffset = default(StringOffset),
      StringOffset obTimeOffset = default(StringOffset),
      VectorOffset sigPwrsOffset = default(VectorOffset),
      VectorOffset noiseLvlsOffset = default(VectorOffset),
      VectorOffset specWidthsOffset = default(VectorOffset),
      VectorOffset firstGuessAvgsOffset = default(VectorOffset),
      int qcValue = 0,
      StringOffset fileCreationOffset = default(StringOffset),
      double termAlt = 0.0,
      double avgTxPwr = 0.0,
      double avgRefPwr = 0.0,
      int sectorNum = 0,
      int numElements = 0,
      VectorOffset tdAvgSampleNumsOffset = default(VectorOffset),
      int checksum = 0,
      VectorOffset coIntegsOffset = default(VectorOffset),
      VectorOffset specAvgsOffset = default(VectorOffset),
      VectorOffset interpulsePeriodsOffset = default(VectorOffset),
      VectorOffset doppVelsOffset = default(VectorOffset),
      VectorOffset consRecsOffset = default(VectorOffset),
      VectorOffset snrsOffset = default(VectorOffset),
      double sigStrength = 0.0,
      double semiMajorAxis = 0.0,
      double semiMinorAxis = 0.0,
      double angleOrientation = 0.0,
      int lightEventNum = 0,
      VectorOffset lightDetSensorsOffset = default(VectorOffset),
      double posConfidence = 0.0,
      VectorOffset srcTypsOffset = default(VectorOffset),
      VectorOffset srcIdsOffset = default(VectorOffset),
      StringOffset origNetworkOffset = default(StringOffset),
      StringOffset createdAtOffset = default(StringOffset),
      StringOffset createdByOffset = default(StringOffset),
      StringOffset sourceOffset = default(StringOffset),
      StringOffset originOffset = default(StringOffset),
      WeatherData_Full_dataMode_Enum dataMode = WeatherData_Full_dataMode_Enum.REAL) {
    builder.StartTable(39);
    WeatherData_Full.AddPosConfidence(builder, posConfidence);
    WeatherData_Full.AddAngleOrientation(builder, angleOrientation);
    WeatherData_Full.AddSemiMinorAxis(builder, semiMinorAxis);
    WeatherData_Full.AddSemiMajorAxis(builder, semiMajorAxis);
    WeatherData_Full.AddSigStrength(builder, sigStrength);
    WeatherData_Full.AddAvgRefPwr(builder, avgRefPwr);
    WeatherData_Full.AddAvgTxPwr(builder, avgTxPwr);
    WeatherData_Full.AddTermAlt(builder, termAlt);
    WeatherData_Full.AddOrigin(builder, originOffset);
    WeatherData_Full.AddSource(builder, sourceOffset);
    WeatherData_Full.AddCreatedBy(builder, createdByOffset);
    WeatherData_Full.AddCreatedAt(builder, createdAtOffset);
    WeatherData_Full.AddOrigNetwork(builder, origNetworkOffset);
    WeatherData_Full.AddSrcIds(builder, srcIdsOffset);
    WeatherData_Full.AddSrcTyps(builder, srcTypsOffset);
    WeatherData_Full.AddLightDetSensors(builder, lightDetSensorsOffset);
    WeatherData_Full.AddLightEventNum(builder, lightEventNum);
    WeatherData_Full.AddSnrs(builder, snrsOffset);
    WeatherData_Full.AddConsRecs(builder, consRecsOffset);
    WeatherData_Full.AddDoppVels(builder, doppVelsOffset);
    WeatherData_Full.AddInterpulsePeriods(builder, interpulsePeriodsOffset);
    WeatherData_Full.AddSpecAvgs(builder, specAvgsOffset);
    WeatherData_Full.AddCoIntegs(builder, coIntegsOffset);
    WeatherData_Full.AddChecksum(builder, checksum);
    WeatherData_Full.AddTdAvgSampleNums(builder, tdAvgSampleNumsOffset);
    WeatherData_Full.AddNumElements(builder, numElements);
    WeatherData_Full.AddSectorNum(builder, sectorNum);
    WeatherData_Full.AddFileCreation(builder, fileCreationOffset);
    WeatherData_Full.AddQcValue(builder, qcValue);
    WeatherData_Full.AddFirstGuessAvgs(builder, firstGuessAvgsOffset);
    WeatherData_Full.AddSpecWidths(builder, specWidthsOffset);
    WeatherData_Full.AddNoiseLvls(builder, noiseLvlsOffset);
    WeatherData_Full.AddSigPwrs(builder, sigPwrsOffset);
    WeatherData_Full.AddObTime(builder, obTimeOffset);
    WeatherData_Full.AddOrigSensorId(builder, origSensorIdOffset);
    WeatherData_Full.AddIdSensor(builder, idSensorOffset);
    WeatherData_Full.AddClassificationMarking(builder, classificationMarkingOffset);
    WeatherData_Full.AddId(builder, idOffset);
    WeatherData_Full.AddDataMode(builder, dataMode);
    return WeatherData_Full.EndWeatherData_Full(builder);
  }

  public static void StartWeatherData_Full(FlatBufferBuilder builder) { builder.StartTable(39); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddClassificationMarking(FlatBufferBuilder builder, StringOffset classificationMarkingOffset) { builder.AddOffset(1, classificationMarkingOffset.Value, 0); }
  public static void AddIdSensor(FlatBufferBuilder builder, StringOffset idSensorOffset) { builder.AddOffset(2, idSensorOffset.Value, 0); }
  public static void AddOrigSensorId(FlatBufferBuilder builder, StringOffset origSensorIdOffset) { builder.AddOffset(3, origSensorIdOffset.Value, 0); }
  public static void AddObTime(FlatBufferBuilder builder, StringOffset obTimeOffset) { builder.AddOffset(4, obTimeOffset.Value, 0); }
  public static void AddSigPwrs(FlatBufferBuilder builder, VectorOffset sigPwrsOffset) { builder.AddOffset(5, sigPwrsOffset.Value, 0); }
  public static VectorOffset CreateSigPwrsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSigPwrsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSigPwrsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSigPwrsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSigPwrsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNoiseLvls(FlatBufferBuilder builder, VectorOffset noiseLvlsOffset) { builder.AddOffset(6, noiseLvlsOffset.Value, 0); }
  public static VectorOffset CreateNoiseLvlsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNoiseLvlsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoiseLvlsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoiseLvlsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoiseLvlsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecWidths(FlatBufferBuilder builder, VectorOffset specWidthsOffset) { builder.AddOffset(7, specWidthsOffset.Value, 0); }
  public static VectorOffset CreateSpecWidthsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpecWidthsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecWidthsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecWidthsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecWidthsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFirstGuessAvgs(FlatBufferBuilder builder, VectorOffset firstGuessAvgsOffset) { builder.AddOffset(8, firstGuessAvgsOffset.Value, 0); }
  public static VectorOffset CreateFirstGuessAvgsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFirstGuessAvgsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirstGuessAvgsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFirstGuessAvgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFirstGuessAvgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQcValue(FlatBufferBuilder builder, int qcValue) { builder.AddInt(9, qcValue, 0); }
  public static void AddFileCreation(FlatBufferBuilder builder, StringOffset fileCreationOffset) { builder.AddOffset(10, fileCreationOffset.Value, 0); }
  public static void AddTermAlt(FlatBufferBuilder builder, double termAlt) { builder.AddDouble(11, termAlt, 0.0); }
  public static void AddAvgTxPwr(FlatBufferBuilder builder, double avgTxPwr) { builder.AddDouble(12, avgTxPwr, 0.0); }
  public static void AddAvgRefPwr(FlatBufferBuilder builder, double avgRefPwr) { builder.AddDouble(13, avgRefPwr, 0.0); }
  public static void AddSectorNum(FlatBufferBuilder builder, int sectorNum) { builder.AddInt(14, sectorNum, 0); }
  public static void AddNumElements(FlatBufferBuilder builder, int numElements) { builder.AddInt(15, numElements, 0); }
  public static void AddTdAvgSampleNums(FlatBufferBuilder builder, VectorOffset tdAvgSampleNumsOffset) { builder.AddOffset(16, tdAvgSampleNumsOffset.Value, 0); }
  public static VectorOffset CreateTdAvgSampleNumsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTdAvgSampleNumsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTdAvgSampleNumsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTdAvgSampleNumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTdAvgSampleNumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChecksum(FlatBufferBuilder builder, int checksum) { builder.AddInt(17, checksum, 0); }
  public static void AddCoIntegs(FlatBufferBuilder builder, VectorOffset coIntegsOffset) { builder.AddOffset(18, coIntegsOffset.Value, 0); }
  public static VectorOffset CreateCoIntegsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateCoIntegsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoIntegsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateCoIntegsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartCoIntegsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecAvgs(FlatBufferBuilder builder, VectorOffset specAvgsOffset) { builder.AddOffset(19, specAvgsOffset.Value, 0); }
  public static VectorOffset CreateSpecAvgsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSpecAvgsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecAvgsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSpecAvgsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSpecAvgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInterpulsePeriods(FlatBufferBuilder builder, VectorOffset interpulsePeriodsOffset) { builder.AddOffset(20, interpulsePeriodsOffset.Value, 0); }
  public static VectorOffset CreateInterpulsePeriodsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInterpulsePeriodsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInterpulsePeriodsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateInterpulsePeriodsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartInterpulsePeriodsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDoppVels(FlatBufferBuilder builder, VectorOffset doppVelsOffset) { builder.AddOffset(21, doppVelsOffset.Value, 0); }
  public static VectorOffset CreateDoppVelsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDoppVelsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoppVelsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDoppVelsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDoppVelsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConsRecs(FlatBufferBuilder builder, VectorOffset consRecsOffset) { builder.AddOffset(22, consRecsOffset.Value, 0); }
  public static VectorOffset CreateConsRecsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConsRecsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsRecsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConsRecsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConsRecsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSnrs(FlatBufferBuilder builder, VectorOffset snrsOffset) { builder.AddOffset(23, snrsOffset.Value, 0); }
  public static VectorOffset CreateSnrsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSnrsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSnrsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSigStrength(FlatBufferBuilder builder, double sigStrength) { builder.AddDouble(24, sigStrength, 0.0); }
  public static void AddSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.AddDouble(25, semiMajorAxis, 0.0); }
  public static void AddSemiMinorAxis(FlatBufferBuilder builder, double semiMinorAxis) { builder.AddDouble(26, semiMinorAxis, 0.0); }
  public static void AddAngleOrientation(FlatBufferBuilder builder, double angleOrientation) { builder.AddDouble(27, angleOrientation, 0.0); }
  public static void AddLightEventNum(FlatBufferBuilder builder, int lightEventNum) { builder.AddInt(28, lightEventNum, 0); }
  public static void AddLightDetSensors(FlatBufferBuilder builder, VectorOffset lightDetSensorsOffset) { builder.AddOffset(29, lightDetSensorsOffset.Value, 0); }
  public static VectorOffset CreateLightDetSensorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLightDetSensorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLightDetSensorsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateLightDetSensorsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartLightDetSensorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPosConfidence(FlatBufferBuilder builder, double posConfidence) { builder.AddDouble(30, posConfidence, 0.0); }
  public static void AddSrcTyps(FlatBufferBuilder builder, VectorOffset srcTypsOffset) { builder.AddOffset(31, srcTypsOffset.Value, 0); }
  public static VectorOffset CreateSrcTypsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcTypsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSrcIds(FlatBufferBuilder builder, VectorOffset srcIdsOffset) { builder.AddOffset(32, srcIdsOffset.Value, 0); }
  public static VectorOffset CreateSrcIdsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSrcIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOrigNetwork(FlatBufferBuilder builder, StringOffset origNetworkOffset) { builder.AddOffset(33, origNetworkOffset.Value, 0); }
  public static void AddCreatedAt(FlatBufferBuilder builder, StringOffset createdAtOffset) { builder.AddOffset(34, createdAtOffset.Value, 0); }
  public static void AddCreatedBy(FlatBufferBuilder builder, StringOffset createdByOffset) { builder.AddOffset(35, createdByOffset.Value, 0); }
  public static void AddSource(FlatBufferBuilder builder, StringOffset sourceOffset) { builder.AddOffset(36, sourceOffset.Value, 0); }
  public static void AddOrigin(FlatBufferBuilder builder, StringOffset originOffset) { builder.AddOffset(37, originOffset.Value, 0); }
  public static void AddDataMode(FlatBufferBuilder builder, WeatherData_Full_dataMode_Enum dataMode) { builder.AddSbyte(38, (sbyte)dataMode, 0); }
  public static Offset<WeatherData_Full> EndWeatherData_Full(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<WeatherData_Full>(o);
  }
  public static void FinishWeatherData_FullBuffer(FlatBufferBuilder builder, Offset<WeatherData_Full> offset) { builder.Finish(offset.Value, "WEAT"); }
  public static void FinishSizePrefixedWeatherData_FullBuffer(FlatBufferBuilder builder, Offset<WeatherData_Full> offset) { builder.FinishSizePrefixed(offset.Value, "WEAT"); }
  public WeatherData_FullT UnPack() {
    var _o = new WeatherData_FullT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WeatherData_FullT _o) {
    _o.Id = this.Id;
    _o.ClassificationMarking = this.ClassificationMarking;
    _o.IdSensor = this.IdSensor;
    _o.OrigSensorId = this.OrigSensorId;
    _o.ObTime = this.ObTime;
    _o.SigPwrs = new List<string>();
    for (var _j = 0; _j < this.SigPwrsLength; ++_j) {_o.SigPwrs.Add(this.SigPwrs(_j));}
    _o.NoiseLvls = new List<string>();
    for (var _j = 0; _j < this.NoiseLvlsLength; ++_j) {_o.NoiseLvls.Add(this.NoiseLvls(_j));}
    _o.SpecWidths = new List<string>();
    for (var _j = 0; _j < this.SpecWidthsLength; ++_j) {_o.SpecWidths.Add(this.SpecWidths(_j));}
    _o.FirstGuessAvgs = new List<string>();
    for (var _j = 0; _j < this.FirstGuessAvgsLength; ++_j) {_o.FirstGuessAvgs.Add(this.FirstGuessAvgs(_j));}
    _o.QcValue = this.QcValue;
    _o.FileCreation = this.FileCreation;
    _o.TermAlt = this.TermAlt;
    _o.AvgTxPwr = this.AvgTxPwr;
    _o.AvgRefPwr = this.AvgRefPwr;
    _o.SectorNum = this.SectorNum;
    _o.NumElements = this.NumElements;
    _o.TdAvgSampleNums = new List<string>();
    for (var _j = 0; _j < this.TdAvgSampleNumsLength; ++_j) {_o.TdAvgSampleNums.Add(this.TdAvgSampleNums(_j));}
    _o.Checksum = this.Checksum;
    _o.CoIntegs = new List<string>();
    for (var _j = 0; _j < this.CoIntegsLength; ++_j) {_o.CoIntegs.Add(this.CoIntegs(_j));}
    _o.SpecAvgs = new List<string>();
    for (var _j = 0; _j < this.SpecAvgsLength; ++_j) {_o.SpecAvgs.Add(this.SpecAvgs(_j));}
    _o.InterpulsePeriods = new List<string>();
    for (var _j = 0; _j < this.InterpulsePeriodsLength; ++_j) {_o.InterpulsePeriods.Add(this.InterpulsePeriods(_j));}
    _o.DoppVels = new List<string>();
    for (var _j = 0; _j < this.DoppVelsLength; ++_j) {_o.DoppVels.Add(this.DoppVels(_j));}
    _o.ConsRecs = new List<string>();
    for (var _j = 0; _j < this.ConsRecsLength; ++_j) {_o.ConsRecs.Add(this.ConsRecs(_j));}
    _o.Snrs = new List<string>();
    for (var _j = 0; _j < this.SnrsLength; ++_j) {_o.Snrs.Add(this.Snrs(_j));}
    _o.SigStrength = this.SigStrength;
    _o.SemiMajorAxis = this.SemiMajorAxis;
    _o.SemiMinorAxis = this.SemiMinorAxis;
    _o.AngleOrientation = this.AngleOrientation;
    _o.LightEventNum = this.LightEventNum;
    _o.LightDetSensors = new List<string>();
    for (var _j = 0; _j < this.LightDetSensorsLength; ++_j) {_o.LightDetSensors.Add(this.LightDetSensors(_j));}
    _o.PosConfidence = this.PosConfidence;
    _o.SrcTyps = new List<string>();
    for (var _j = 0; _j < this.SrcTypsLength; ++_j) {_o.SrcTyps.Add(this.SrcTyps(_j));}
    _o.SrcIds = new List<string>();
    for (var _j = 0; _j < this.SrcIdsLength; ++_j) {_o.SrcIds.Add(this.SrcIds(_j));}
    _o.OrigNetwork = this.OrigNetwork;
    _o.CreatedAt = this.CreatedAt;
    _o.CreatedBy = this.CreatedBy;
    _o.Source = this.Source;
    _o.Origin = this.Origin;
    _o.DataMode = this.DataMode;
  }
  public static Offset<WeatherData_Full> Pack(FlatBufferBuilder builder, WeatherData_FullT _o) {
    if (_o == null) return default(Offset<WeatherData_Full>);
    var _id = _o.Id == null ? default(StringOffset) : builder.CreateString(_o.Id);
    var _classificationMarking = _o.ClassificationMarking == null ? default(StringOffset) : builder.CreateString(_o.ClassificationMarking);
    var _idSensor = _o.IdSensor == null ? default(StringOffset) : builder.CreateString(_o.IdSensor);
    var _origSensorId = _o.OrigSensorId == null ? default(StringOffset) : builder.CreateString(_o.OrigSensorId);
    var _obTime = _o.ObTime == null ? default(StringOffset) : builder.CreateString(_o.ObTime);
    var _sigPwrs = default(VectorOffset);
    if (_o.SigPwrs != null) {
      var __sigPwrs = new StringOffset[_o.SigPwrs.Count];
      for (var _j = 0; _j < __sigPwrs.Length; ++_j) { __sigPwrs[_j] = builder.CreateString(_o.SigPwrs[_j]); }
      _sigPwrs = CreateSigPwrsVector(builder, __sigPwrs);
    }
    var _noiseLvls = default(VectorOffset);
    if (_o.NoiseLvls != null) {
      var __noiseLvls = new StringOffset[_o.NoiseLvls.Count];
      for (var _j = 0; _j < __noiseLvls.Length; ++_j) { __noiseLvls[_j] = builder.CreateString(_o.NoiseLvls[_j]); }
      _noiseLvls = CreateNoiseLvlsVector(builder, __noiseLvls);
    }
    var _specWidths = default(VectorOffset);
    if (_o.SpecWidths != null) {
      var __specWidths = new StringOffset[_o.SpecWidths.Count];
      for (var _j = 0; _j < __specWidths.Length; ++_j) { __specWidths[_j] = builder.CreateString(_o.SpecWidths[_j]); }
      _specWidths = CreateSpecWidthsVector(builder, __specWidths);
    }
    var _firstGuessAvgs = default(VectorOffset);
    if (_o.FirstGuessAvgs != null) {
      var __firstGuessAvgs = new StringOffset[_o.FirstGuessAvgs.Count];
      for (var _j = 0; _j < __firstGuessAvgs.Length; ++_j) { __firstGuessAvgs[_j] = builder.CreateString(_o.FirstGuessAvgs[_j]); }
      _firstGuessAvgs = CreateFirstGuessAvgsVector(builder, __firstGuessAvgs);
    }
    var _fileCreation = _o.FileCreation == null ? default(StringOffset) : builder.CreateString(_o.FileCreation);
    var _tdAvgSampleNums = default(VectorOffset);
    if (_o.TdAvgSampleNums != null) {
      var __tdAvgSampleNums = new StringOffset[_o.TdAvgSampleNums.Count];
      for (var _j = 0; _j < __tdAvgSampleNums.Length; ++_j) { __tdAvgSampleNums[_j] = builder.CreateString(_o.TdAvgSampleNums[_j]); }
      _tdAvgSampleNums = CreateTdAvgSampleNumsVector(builder, __tdAvgSampleNums);
    }
    var _coIntegs = default(VectorOffset);
    if (_o.CoIntegs != null) {
      var __coIntegs = new StringOffset[_o.CoIntegs.Count];
      for (var _j = 0; _j < __coIntegs.Length; ++_j) { __coIntegs[_j] = builder.CreateString(_o.CoIntegs[_j]); }
      _coIntegs = CreateCoIntegsVector(builder, __coIntegs);
    }
    var _specAvgs = default(VectorOffset);
    if (_o.SpecAvgs != null) {
      var __specAvgs = new StringOffset[_o.SpecAvgs.Count];
      for (var _j = 0; _j < __specAvgs.Length; ++_j) { __specAvgs[_j] = builder.CreateString(_o.SpecAvgs[_j]); }
      _specAvgs = CreateSpecAvgsVector(builder, __specAvgs);
    }
    var _interpulsePeriods = default(VectorOffset);
    if (_o.InterpulsePeriods != null) {
      var __interpulsePeriods = new StringOffset[_o.InterpulsePeriods.Count];
      for (var _j = 0; _j < __interpulsePeriods.Length; ++_j) { __interpulsePeriods[_j] = builder.CreateString(_o.InterpulsePeriods[_j]); }
      _interpulsePeriods = CreateInterpulsePeriodsVector(builder, __interpulsePeriods);
    }
    var _doppVels = default(VectorOffset);
    if (_o.DoppVels != null) {
      var __doppVels = new StringOffset[_o.DoppVels.Count];
      for (var _j = 0; _j < __doppVels.Length; ++_j) { __doppVels[_j] = builder.CreateString(_o.DoppVels[_j]); }
      _doppVels = CreateDoppVelsVector(builder, __doppVels);
    }
    var _consRecs = default(VectorOffset);
    if (_o.ConsRecs != null) {
      var __consRecs = new StringOffset[_o.ConsRecs.Count];
      for (var _j = 0; _j < __consRecs.Length; ++_j) { __consRecs[_j] = builder.CreateString(_o.ConsRecs[_j]); }
      _consRecs = CreateConsRecsVector(builder, __consRecs);
    }
    var _snrs = default(VectorOffset);
    if (_o.Snrs != null) {
      var __snrs = new StringOffset[_o.Snrs.Count];
      for (var _j = 0; _j < __snrs.Length; ++_j) { __snrs[_j] = builder.CreateString(_o.Snrs[_j]); }
      _snrs = CreateSnrsVector(builder, __snrs);
    }
    var _lightDetSensors = default(VectorOffset);
    if (_o.LightDetSensors != null) {
      var __lightDetSensors = new StringOffset[_o.LightDetSensors.Count];
      for (var _j = 0; _j < __lightDetSensors.Length; ++_j) { __lightDetSensors[_j] = builder.CreateString(_o.LightDetSensors[_j]); }
      _lightDetSensors = CreateLightDetSensorsVector(builder, __lightDetSensors);
    }
    var _srcTyps = default(VectorOffset);
    if (_o.SrcTyps != null) {
      var __srcTyps = new StringOffset[_o.SrcTyps.Count];
      for (var _j = 0; _j < __srcTyps.Length; ++_j) { __srcTyps[_j] = builder.CreateString(_o.SrcTyps[_j]); }
      _srcTyps = CreateSrcTypsVector(builder, __srcTyps);
    }
    var _srcIds = default(VectorOffset);
    if (_o.SrcIds != null) {
      var __srcIds = new StringOffset[_o.SrcIds.Count];
      for (var _j = 0; _j < __srcIds.Length; ++_j) { __srcIds[_j] = builder.CreateString(_o.SrcIds[_j]); }
      _srcIds = CreateSrcIdsVector(builder, __srcIds);
    }
    var _origNetwork = _o.OrigNetwork == null ? default(StringOffset) : builder.CreateString(_o.OrigNetwork);
    var _createdAt = _o.CreatedAt == null ? default(StringOffset) : builder.CreateString(_o.CreatedAt);
    var _createdBy = _o.CreatedBy == null ? default(StringOffset) : builder.CreateString(_o.CreatedBy);
    var _source = _o.Source == null ? default(StringOffset) : builder.CreateString(_o.Source);
    var _origin = _o.Origin == null ? default(StringOffset) : builder.CreateString(_o.Origin);
    return CreateWeatherData_Full(
      builder,
      _id,
      _classificationMarking,
      _idSensor,
      _origSensorId,
      _obTime,
      _sigPwrs,
      _noiseLvls,
      _specWidths,
      _firstGuessAvgs,
      _o.QcValue,
      _fileCreation,
      _o.TermAlt,
      _o.AvgTxPwr,
      _o.AvgRefPwr,
      _o.SectorNum,
      _o.NumElements,
      _tdAvgSampleNums,
      _o.Checksum,
      _coIntegs,
      _specAvgs,
      _interpulsePeriods,
      _doppVels,
      _consRecs,
      _snrs,
      _o.SigStrength,
      _o.SemiMajorAxis,
      _o.SemiMinorAxis,
      _o.AngleOrientation,
      _o.LightEventNum,
      _lightDetSensors,
      _o.PosConfidence,
      _srcTyps,
      _srcIds,
      _origNetwork,
      _createdAt,
      _createdBy,
      _source,
      _origin,
      _o.DataMode);
  }
}

public class WeatherData_FullT
{
  public string Id { get; set; }
  public string ClassificationMarking { get; set; }
  public string IdSensor { get; set; }
  public string OrigSensorId { get; set; }
  public string ObTime { get; set; }
  public List<string> SigPwrs { get; set; }
  public List<string> NoiseLvls { get; set; }
  public List<string> SpecWidths { get; set; }
  public List<string> FirstGuessAvgs { get; set; }
  public int QcValue { get; set; }
  public string FileCreation { get; set; }
  public double TermAlt { get; set; }
  public double AvgTxPwr { get; set; }
  public double AvgRefPwr { get; set; }
  public int SectorNum { get; set; }
  public int NumElements { get; set; }
  public List<string> TdAvgSampleNums { get; set; }
  public int Checksum { get; set; }
  public List<string> CoIntegs { get; set; }
  public List<string> SpecAvgs { get; set; }
  public List<string> InterpulsePeriods { get; set; }
  public List<string> DoppVels { get; set; }
  public List<string> ConsRecs { get; set; }
  public List<string> Snrs { get; set; }
  public double SigStrength { get; set; }
  public double SemiMajorAxis { get; set; }
  public double SemiMinorAxis { get; set; }
  public double AngleOrientation { get; set; }
  public int LightEventNum { get; set; }
  public List<string> LightDetSensors { get; set; }
  public double PosConfidence { get; set; }
  public List<string> SrcTyps { get; set; }
  public List<string> SrcIds { get; set; }
  public string OrigNetwork { get; set; }
  public string CreatedAt { get; set; }
  public string CreatedBy { get; set; }
  public string Source { get; set; }
  public string Origin { get; set; }
  public WeatherData_Full_dataMode_Enum DataMode { get; set; }

  public WeatherData_FullT() {
    this.Id = null;
    this.ClassificationMarking = null;
    this.IdSensor = null;
    this.OrigSensorId = null;
    this.ObTime = null;
    this.SigPwrs = null;
    this.NoiseLvls = null;
    this.SpecWidths = null;
    this.FirstGuessAvgs = null;
    this.QcValue = 0;
    this.FileCreation = null;
    this.TermAlt = 0.0;
    this.AvgTxPwr = 0.0;
    this.AvgRefPwr = 0.0;
    this.SectorNum = 0;
    this.NumElements = 0;
    this.TdAvgSampleNums = null;
    this.Checksum = 0;
    this.CoIntegs = null;
    this.SpecAvgs = null;
    this.InterpulsePeriods = null;
    this.DoppVels = null;
    this.ConsRecs = null;
    this.Snrs = null;
    this.SigStrength = 0.0;
    this.SemiMajorAxis = 0.0;
    this.SemiMinorAxis = 0.0;
    this.AngleOrientation = 0.0;
    this.LightEventNum = 0;
    this.LightDetSensors = null;
    this.PosConfidence = 0.0;
    this.SrcTyps = null;
    this.SrcIds = null;
    this.OrigNetwork = null;
    this.CreatedAt = null;
    this.CreatedBy = null;
    this.Source = null;
    this.Origin = null;
    this.DataMode = WeatherData_Full_dataMode_Enum.REAL;
  }
  public static WeatherData_FullT DeserializeFromBinary(byte[] fbBuffer) {
    return WeatherData_Full.GetRootAsWeatherData_Full(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    WeatherData_Full.FinishWeatherData_FullBuffer(fbb, WeatherData_Full.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class WeatherData_FullVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Id*/, false)
      && verifier.VerifyString(tablePos, 6 /*ClassificationMarking*/, false)
      && verifier.VerifyString(tablePos, 8 /*IdSensor*/, false)
      && verifier.VerifyString(tablePos, 10 /*OrigSensorId*/, false)
      && verifier.VerifyString(tablePos, 12 /*ObTime*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*SigPwrs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 16 /*NoiseLvls*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*SpecWidths*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 20 /*FirstGuessAvgs*/, false)
      && verifier.VerifyField(tablePos, 22 /*QcValue*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 24 /*FileCreation*/, false)
      && verifier.VerifyField(tablePos, 26 /*TermAlt*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 28 /*AvgTxPwr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 30 /*AvgRefPwr*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 32 /*SectorNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 34 /*NumElements*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 36 /*TdAvgSampleNums*/, false)
      && verifier.VerifyField(tablePos, 38 /*Checksum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 40 /*CoIntegs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 42 /*SpecAvgs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 44 /*InterpulsePeriods*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 46 /*DoppVels*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 48 /*ConsRecs*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 50 /*Snrs*/, false)
      && verifier.VerifyField(tablePos, 52 /*SigStrength*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*SemiMajorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*SemiMinorAxis*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 58 /*AngleOrientation*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 60 /*LightEventNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 62 /*LightDetSensors*/, false)
      && verifier.VerifyField(tablePos, 64 /*PosConfidence*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 66 /*SrcTyps*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 68 /*SrcIds*/, false)
      && verifier.VerifyString(tablePos, 70 /*OrigNetwork*/, false)
      && verifier.VerifyString(tablePos, 72 /*CreatedAt*/, false)
      && verifier.VerifyString(tablePos, 74 /*CreatedBy*/, false)
      && verifier.VerifyString(tablePos, 76 /*Source*/, false)
      && verifier.VerifyString(tablePos, 78 /*Origin*/, false)
      && verifier.VerifyField(tablePos, 80 /*DataMode*/, 1 /*WeatherData_Full_dataMode_Enum*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
