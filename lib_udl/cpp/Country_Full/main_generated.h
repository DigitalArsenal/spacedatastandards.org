// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Country_Full;
struct Country_FullBuilder;

enum Country_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Country_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Country_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Country_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Country_Full_dataMode_Enum_EXERCISE = 3,
  Country_Full_dataMode_Enum_MIN = Country_Full_dataMode_Enum_REAL,
  Country_Full_dataMode_Enum_MAX = Country_Full_dataMode_Enum_EXERCISE
};

inline const Country_Full_dataMode_Enum (&EnumValuesCountry_Full_dataMode_Enum())[4] {
  static const Country_Full_dataMode_Enum values[] = {
    Country_Full_dataMode_Enum_REAL,
    Country_Full_dataMode_Enum_TEST,
    Country_Full_dataMode_Enum_SIMULATED,
    Country_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesCountry_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameCountry_Full_dataMode_Enum(Country_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Country_Full_dataMode_Enum_REAL, Country_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCountry_Full_dataMode_Enum()[index];
}

/// /// A Country may represent countries, multi-national consortiums, and international organizations.
struct Country_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Country_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE = 4,
    VT_NAME = 6,
    VT_FIPSCODE = 8,
    VT_ISO3CODE = 10,
    VT_CODEALT = 12,
    VT_CREATEDAT = 14,
    VT_CREATEDBY = 16,
    VT_UPDATEDAT = 18,
    VT_UPDATEDBY = 20,
    VT_SOURCE = 22,
    VT_ORIGNETWORK = 24,
    VT_DATAMODE = 26
  };
  /// The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  /// Country name.
  /// Example: /// Example: UNITED STATES
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *fipsCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIPSCODE);
  }
  /// ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *iso3Code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ISO3CODE);
  }
  /// 3 Digit or other alternate country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *codeAlt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODEALT);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Country_Full_dataMode_Enum dataMode() const {
    return static_cast<Country_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FIPSCODE) &&
           verifier.VerifyString(fipsCode()) &&
           VerifyOffset(verifier, VT_ISO3CODE) &&
           verifier.VerifyString(iso3Code()) &&
           VerifyOffset(verifier, VT_CODEALT) &&
           verifier.VerifyString(codeAlt()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Country_FullBuilder {
  typedef Country_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(Country_Full::VT_CODE, code);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Country_Full::VT_NAME, name);
  }
  void add_fipsCode(::flatbuffers::Offset<::flatbuffers::String> fipsCode) {
    fbb_.AddOffset(Country_Full::VT_FIPSCODE, fipsCode);
  }
  void add_iso3Code(::flatbuffers::Offset<::flatbuffers::String> iso3Code) {
    fbb_.AddOffset(Country_Full::VT_ISO3CODE, iso3Code);
  }
  void add_codeAlt(::flatbuffers::Offset<::flatbuffers::String> codeAlt) {
    fbb_.AddOffset(Country_Full::VT_CODEALT, codeAlt);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Country_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Country_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Country_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Country_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Country_Full::VT_SOURCE, source);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Country_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Country_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Country_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Country_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Country_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Country_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Country_Full> CreateCountry_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fipsCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iso3Code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> codeAlt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Country_Full_dataMode_Enum dataMode = Country_Full_dataMode_Enum_REAL) {
  Country_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_codeAlt(codeAlt);
  builder_.add_iso3Code(iso3Code);
  builder_.add_fipsCode(fipsCode);
  builder_.add_name(name);
  builder_.add_code(code);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Country_Full> CreateCountry_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *code = nullptr,
    const char *name = nullptr,
    const char *fipsCode = nullptr,
    const char *iso3Code = nullptr,
    const char *codeAlt = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origNetwork = nullptr,
    Country_Full_dataMode_Enum dataMode = Country_Full_dataMode_Enum_REAL) {
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto fipsCode__ = fipsCode ? _fbb.CreateString(fipsCode) : 0;
  auto iso3Code__ = iso3Code ? _fbb.CreateString(iso3Code) : 0;
  auto codeAlt__ = codeAlt ? _fbb.CreateString(codeAlt) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateCountry_Full(
      _fbb,
      code__,
      name__,
      fipsCode__,
      iso3Code__,
      codeAlt__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origNetwork__,
      dataMode);
}

inline const Country_Full *GetCountry_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Country_Full>(buf);
}

inline const Country_Full *GetSizePrefixedCountry_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Country_Full>(buf);
}

inline const char *Country_FullIdentifier() {
  return "COUN";
}

inline bool Country_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Country_FullIdentifier());
}

inline bool SizePrefixedCountry_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Country_FullIdentifier(), true);
}

inline bool VerifyCountry_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Country_Full>(Country_FullIdentifier());
}

inline bool VerifySizePrefixedCountry_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Country_Full>(Country_FullIdentifier());
}

inline void FinishCountry_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Country_Full> root) {
  fbb.Finish(root, Country_FullIdentifier());
}

inline void FinishSizePrefixedCountry_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Country_Full> root) {
  fbb.FinishSizePrefixed(root, Country_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
