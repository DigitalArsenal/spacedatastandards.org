// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfileIRI_Full;
struct IonoObservationDensityProfileIRI_FullBuilder;

/// /// Full set of the IRI formalism coefficients.
struct IonoObservationDensityProfileIRI_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfileIRI_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTION = 4,
    VT_NMF2 = 6,
    VT_HMF2 = 8,
    VT_B0 = 10,
    VT_B1 = 12,
    VT_NMF1 = 14,
    VT_HMF1 = 16,
    VT_D1 = 18,
    VT_HZ = 20,
    VT_HVALTOP = 22,
    VT_NVALB = 24,
    VT_NME = 26,
    VT_HME = 28,
    VT_HDX = 30,
    VT_NMD = 32,
    VT_HMD = 34,
    VT_HA = 36,
    VT_FP1 = 38,
    VT_FP2 = 40,
    VT_FP30 = 42,
    VT_FP3U = 44,
    VT_CHI = 46
  };
  /// Description of IRI implementation.
  /// Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Peak density of F2 layer, in grams per cubic centimeter.
  /// Example: /// Example: 313283.1
  /// Constraints: No constraints specified.
  double nmF2() const {
    return GetField<double>(VT_NMF2, 0.0);
  }
  /// Peak height of F2 layer, in kilometers.
  /// Example: /// Example: 265.42
  /// Constraints: No constraints specified.
  double hmF2() const {
    return GetField<double>(VT_HMF2, 0.0);
  }
  /// B0 parameter of the F2 layer shape.
  /// Example: /// Example: 245.1
  /// Constraints: No constraints specified.
  double b0() const {
    return GetField<double>(VT_B0, 0.0);
  }
  /// B1 parameter of the F2 layer shape.
  /// Example: /// Example: 3.45
  /// Constraints: No constraints specified.
  double b1() const {
    return GetField<double>(VT_B1, 0.0);
  }
  /// Peak density of the F1 layer, in grams per cubic centimeter.
  /// Example: /// Example: 210486
  /// Constraints: No constraints specified.
  double nmF1() const {
    return GetField<double>(VT_NMF1, 0.0);
  }
  /// Peak height of the F1 layer, in kilometers.
  /// Example: /// Example: 210.3
  /// Constraints: No constraints specified.
  double hmF1() const {
    return GetField<double>(VT_HMF1, 0.0);
  }
  /// D1 parameter of the F1 layer shape.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  double d1() const {
    return GetField<double>(VT_D1, 0.0);
  }
  /// Height HZ of the interim layer, in kilometers.
  /// Example: /// Example: 142.7
  /// Constraints: No constraints specified.
  double hz() const {
    return GetField<double>(VT_HZ, 0.0);
  }
  /// The valley height, in kilometers.
  /// Example: /// Example: 116.2
  /// Constraints: No constraints specified.
  double hValTop() const {
    return GetField<double>(VT_HVALTOP, 0.0);
  }
  /// The valley depth, in grams per cubic centimeter.
  /// Example: /// Example: 147025.1
  /// Constraints: No constraints specified.
  double nValB() const {
    return GetField<double>(VT_NVALB, 0.0);
  }
  /// Peak density of the E layer, in per cubic centimeter.
  /// Example: /// Example: 154164.1
  /// Constraints: No constraints specified.
  double nmE() const {
    return GetField<double>(VT_NME, 0.0);
  }
  /// Peak height of the F2 layer, in kilometers.
  /// Example: /// Example: 99.8
  /// Constraints: No constraints specified.
  double hmE() const {
    return GetField<double>(VT_HME, 0.0);
  }
  /// Height of the intermediate region at the top of D region, in kilometers.
  /// Example: /// Example: 85.6
  /// Constraints: No constraints specified.
  double hdx() const {
    return GetField<double>(VT_HDX, 0.0);
  }
  /// Peak density of the D layer, in per cubic centimeter.
  /// Example: /// Example: 937543116.1
  /// Constraints: No constraints specified.
  double nmD() const {
    return GetField<double>(VT_NMD, 0.0);
  }
  /// Peak height of the D layer, in kilometers.
  /// Example: /// Example: 81.1
  /// Constraints: No constraints specified.
  double hmD() const {
    return GetField<double>(VT_HMD, 0.0);
  }
  /// Starting height of the D layer, in kilometers.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  double ha() const {
    return GetField<double>(VT_HA, 0.0);
  }
  /// TBD.
  /// Example: /// Example: 0.0474732023322638
  /// Constraints: No constraints specified.
  double fp1() const {
    return GetField<double>(VT_FP1, 0.0);
  }
  /// TBD.
  /// Example: /// Example: -0.00112685246984002
  /// Constraints: No constraints specified.
  double fp2() const {
    return GetField<double>(VT_FP2, 0.0);
  }
  /// TBD.
  /// Example: /// Example: 0.00827559450035957
  /// Constraints: No constraints specified.
  double fp30() const {
    return GetField<double>(VT_FP30, 0.0);
  }
  /// TBD.
  /// Example: /// Example: 0.000201178475411428
  /// Constraints: No constraints specified.
  double fp3U() const {
    return GetField<double>(VT_FP3U, 0.0);
  }
  /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
  /// Example: /// Example: 35.1
  /// Constraints: No constraints specified.
  double chi() const {
    return GetField<double>(VT_CHI, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<double>(verifier, VT_NMF2, 8) &&
           VerifyField<double>(verifier, VT_HMF2, 8) &&
           VerifyField<double>(verifier, VT_B0, 8) &&
           VerifyField<double>(verifier, VT_B1, 8) &&
           VerifyField<double>(verifier, VT_NMF1, 8) &&
           VerifyField<double>(verifier, VT_HMF1, 8) &&
           VerifyField<double>(verifier, VT_D1, 8) &&
           VerifyField<double>(verifier, VT_HZ, 8) &&
           VerifyField<double>(verifier, VT_HVALTOP, 8) &&
           VerifyField<double>(verifier, VT_NVALB, 8) &&
           VerifyField<double>(verifier, VT_NME, 8) &&
           VerifyField<double>(verifier, VT_HME, 8) &&
           VerifyField<double>(verifier, VT_HDX, 8) &&
           VerifyField<double>(verifier, VT_NMD, 8) &&
           VerifyField<double>(verifier, VT_HMD, 8) &&
           VerifyField<double>(verifier, VT_HA, 8) &&
           VerifyField<double>(verifier, VT_FP1, 8) &&
           VerifyField<double>(verifier, VT_FP2, 8) &&
           VerifyField<double>(verifier, VT_FP30, 8) &&
           VerifyField<double>(verifier, VT_FP3U, 8) &&
           VerifyField<double>(verifier, VT_CHI, 8) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfileIRI_FullBuilder {
  typedef IonoObservationDensityProfileIRI_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(IonoObservationDensityProfileIRI_Full::VT_DESCRIPTION, description);
  }
  void add_nmF2(double nmF2) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_NMF2, nmF2, 0.0);
  }
  void add_hmF2(double hmF2) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HMF2, hmF2, 0.0);
  }
  void add_b0(double b0) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_B0, b0, 0.0);
  }
  void add_b1(double b1) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_B1, b1, 0.0);
  }
  void add_nmF1(double nmF1) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_NMF1, nmF1, 0.0);
  }
  void add_hmF1(double hmF1) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HMF1, hmF1, 0.0);
  }
  void add_d1(double d1) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_D1, d1, 0.0);
  }
  void add_hz(double hz) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HZ, hz, 0.0);
  }
  void add_hValTop(double hValTop) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HVALTOP, hValTop, 0.0);
  }
  void add_nValB(double nValB) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_NVALB, nValB, 0.0);
  }
  void add_nmE(double nmE) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_NME, nmE, 0.0);
  }
  void add_hmE(double hmE) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HME, hmE, 0.0);
  }
  void add_hdx(double hdx) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HDX, hdx, 0.0);
  }
  void add_nmD(double nmD) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_NMD, nmD, 0.0);
  }
  void add_hmD(double hmD) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HMD, hmD, 0.0);
  }
  void add_ha(double ha) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_HA, ha, 0.0);
  }
  void add_fp1(double fp1) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_FP1, fp1, 0.0);
  }
  void add_fp2(double fp2) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_FP2, fp2, 0.0);
  }
  void add_fp30(double fp30) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_FP30, fp30, 0.0);
  }
  void add_fp3U(double fp3U) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_FP3U, fp3U, 0.0);
  }
  void add_chi(double chi) {
    fbb_.AddElement<double>(IonoObservationDensityProfileIRI_Full::VT_CHI, chi, 0.0);
  }
  explicit IonoObservationDensityProfileIRI_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full> CreateIonoObservationDensityProfileIRI_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    double nmF2 = 0.0,
    double hmF2 = 0.0,
    double b0 = 0.0,
    double b1 = 0.0,
    double nmF1 = 0.0,
    double hmF1 = 0.0,
    double d1 = 0.0,
    double hz = 0.0,
    double hValTop = 0.0,
    double nValB = 0.0,
    double nmE = 0.0,
    double hmE = 0.0,
    double hdx = 0.0,
    double nmD = 0.0,
    double hmD = 0.0,
    double ha = 0.0,
    double fp1 = 0.0,
    double fp2 = 0.0,
    double fp30 = 0.0,
    double fp3U = 0.0,
    double chi = 0.0) {
  IonoObservationDensityProfileIRI_FullBuilder builder_(_fbb);
  builder_.add_chi(chi);
  builder_.add_fp3U(fp3U);
  builder_.add_fp30(fp30);
  builder_.add_fp2(fp2);
  builder_.add_fp1(fp1);
  builder_.add_ha(ha);
  builder_.add_hmD(hmD);
  builder_.add_nmD(nmD);
  builder_.add_hdx(hdx);
  builder_.add_hmE(hmE);
  builder_.add_nmE(nmE);
  builder_.add_nValB(nValB);
  builder_.add_hValTop(hValTop);
  builder_.add_hz(hz);
  builder_.add_d1(d1);
  builder_.add_hmF1(hmF1);
  builder_.add_nmF1(nmF1);
  builder_.add_b1(b1);
  builder_.add_b0(b0);
  builder_.add_hmF2(hmF2);
  builder_.add_nmF2(nmF2);
  builder_.add_description(description);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full> CreateIonoObservationDensityProfileIRI_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *description = nullptr,
    double nmF2 = 0.0,
    double hmF2 = 0.0,
    double b0 = 0.0,
    double b1 = 0.0,
    double nmF1 = 0.0,
    double hmF1 = 0.0,
    double d1 = 0.0,
    double hz = 0.0,
    double hValTop = 0.0,
    double nValB = 0.0,
    double nmE = 0.0,
    double hmE = 0.0,
    double hdx = 0.0,
    double nmD = 0.0,
    double hmD = 0.0,
    double ha = 0.0,
    double fp1 = 0.0,
    double fp2 = 0.0,
    double fp30 = 0.0,
    double fp3U = 0.0,
    double chi = 0.0) {
  auto description__ = description ? _fbb.CreateString(description) : 0;
  return CreateIonoObservationDensityProfileIRI_Full(
      _fbb,
      description__,
      nmF2,
      hmF2,
      b0,
      b1,
      nmF1,
      hmF1,
      d1,
      hz,
      hValTop,
      nValB,
      nmE,
      hmE,
      hdx,
      nmD,
      hmD,
      ha,
      fp1,
      fp2,
      fp30,
      fp3U,
      chi);
}

inline const IonoObservationDensityProfileIRI_Full *GetIonoObservationDensityProfileIRI_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfileIRI_Full>(buf);
}

inline const IonoObservationDensityProfileIRI_Full *GetSizePrefixedIonoObservationDensityProfileIRI_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfileIRI_Full>(buf);
}

inline const char *IonoObservationDensityProfileIRI_FullIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfileIRI_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileIRI_FullIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfileIRI_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileIRI_FullIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfileIRI_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfileIRI_Full>(IonoObservationDensityProfileIRI_FullIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfileIRI_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfileIRI_Full>(IonoObservationDensityProfileIRI_FullIdentifier());
}

inline void FinishIonoObservationDensityProfileIRI_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full> root) {
  fbb.Finish(root, IonoObservationDensityProfileIRI_FullIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfileIRI_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileIRI_Full> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfileIRI_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
