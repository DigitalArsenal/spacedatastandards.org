// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Vessel_Ingest;
struct Vessel_IngestBuilder;

enum Vessel_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Vessel_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Vessel_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Vessel_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Vessel_Ingest_dataMode_Enum_EXERCISE = 3,
  Vessel_Ingest_dataMode_Enum_MIN = Vessel_Ingest_dataMode_Enum_REAL,
  Vessel_Ingest_dataMode_Enum_MAX = Vessel_Ingest_dataMode_Enum_EXERCISE
};

inline const Vessel_Ingest_dataMode_Enum (&EnumValuesVessel_Ingest_dataMode_Enum())[4] {
  static const Vessel_Ingest_dataMode_Enum values[] = {
    Vessel_Ingest_dataMode_Enum_REAL,
    Vessel_Ingest_dataMode_Enum_TEST,
    Vessel_Ingest_dataMode_Enum_SIMULATED,
    Vessel_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesVessel_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameVessel_Ingest_dataMode_Enum(Vessel_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Vessel_Ingest_dataMode_Enum_REAL, Vessel_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesVessel_Ingest_dataMode_Enum()[index];
}

/// /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
struct Vessel_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vessel_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ENTITY = 8,
    VT_IDENTITY = 10,
    VT_ALTVESSELID = 12,
    VT_IDORGANIZATION = 14,
    VT_VESSELNAME = 16,
    VT_VESSELTYPE = 18,
    VT_VESSELCLASS = 20,
    VT_VESSELDESCRIPTION = 22,
    VT_SCONUM = 24,
    VT_IMON = 26,
    VT_MMSI = 28,
    VT_CALLSIGN = 30,
    VT_VESSELFLAG = 32,
    VT_YEARBUILT = 34,
    VT_VESSELBUILDER = 36,
    VT_STATUS = 38,
    VT_FIRSTSEEN = 40,
    VT_LENGTH = 42,
    VT_WIDTH = 44,
    VT_MAXDRAUGHT = 46,
    VT_VSLWT = 48,
    VT_MAXSPEED = 50,
    VT_STERNTYPE = 52,
    VT_NUMBLADES = 54,
    VT_NUMSHAFTS = 56,
    VT_PROPTYPE = 58,
    VT_HULLNUM = 60,
    VT_CREATEDAT = 62,
    VT_CREATEDBY = 64,
    VT_SOURCE = 66,
    VT_ORIGIN = 68,
    VT_DATAMODE = 70,
    VT_ORIGNETWORK = 72
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// The original source Id for this vessel.
  /// Example: /// Example: 590b5194fc32e75dd00682ba
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altVesselId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTVESSELID);
  }
  /// The UDL ID of the organization that owns the vessel.
  /// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOrganization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDORGANIZATION);
  }
  /// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
  /// Example: /// Example: DORNUM
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *vesselName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELNAME);
  }
  /// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
  /// Example: /// Example: Passenger
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *vesselType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELTYPE);
  }
  /// The common name for a group of ships with similar design, usually named for the first vessel of the class.
  /// Example: /// Example: Nimitz
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *vesselClass() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELCLASS);
  }
  /// Further description or explanation of the vessel or type.
  /// Example: /// Example: Search and Rescue Vessel
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *vesselDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELDESCRIPTION);
  }
  /// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
  /// Example: /// Example: B45524
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *sconum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCONUM);
  }
  /// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
  /// Example: /// Example: 9566356
  /// Constraints: No constraints specified.
  int32_t imon() const {
    return GetField<int32_t>(VT_IMON, 0);
  }
  /// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
  /// Example: /// Example: 416450000
  /// Constraints: Minimum length = 0, Maximum length = 9
  const ::flatbuffers::String *mmsi() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MMSI);
  }
  /// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
  /// Example: /// Example: V2OZ
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *callsign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The flag of the subject vessel.
  /// Example: /// Example: United States
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *vesselFlag() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELFLAG);
  }
  /// Year the vessel went into service.
  /// Example: /// Example: 2014
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *yearBuilt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_YEARBUILT);
  }
  /// The shipbuilder who built this vessel.
  /// Example: /// Example: Samsung Heavy Inds - Geoje
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *vesselBuilder() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VESSELBUILDER);
  }
  /// The status of this vessel.
  /// Example: /// Example: In Service/Commission
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// The date this vessel was first seen.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *firstSeen() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTSEEN);
  }
  /// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
  /// Example: /// Example: 511.1
  /// Constraints: No constraints specified.
  double length() const {
    return GetField<double>(VT_LENGTH, 0.0);
  }
  /// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
  /// Example: /// Example: 24.1
  /// Constraints: No constraints specified.
  double width() const {
    return GetField<double>(VT_WIDTH, 0.0);
  }
  /// The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
  /// Example: /// Example: 21.1
  /// Constraints: No constraints specified.
  double maxDraught() const {
    return GetField<double>(VT_MAXDRAUGHT, 0.0);
  }
  /// The weight in tons, of this vessel.
  /// Example: /// Example: 3423.76
  /// Constraints: No constraints specified.
  double vslWt() const {
    return GetField<double>(VT_VSLWT, 0.0);
  }
  /// The maximum possible speed of this vessel in meters per second.
  /// Example: /// Example: 32.5
  /// Constraints: No constraints specified.
  double maxSpeed() const {
    return GetField<double>(VT_MAXSPEED, 0.0);
  }
  /// The stern type code (Counter, Cruiser) associated with this vessel.
  /// Example: /// Example: Cruiser
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *sternType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STERNTYPE);
  }
  /// The number of blades per shaft for this vessel.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t numBlades() const {
    return GetField<int32_t>(VT_NUMBLADES, 0);
  }
  /// The number of shafts on this vessel.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t numShafts() const {
    return GetField<int32_t>(VT_NUMSHAFTS, 0);
  }
  /// The type of propulsion employed by this vessel.
  /// Example: /// Example: Diesel
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *propType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROPTYPE);
  }
  /// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
  /// Example: /// Example: A30081
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *hullNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HULLNUM);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  Vessel_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Vessel_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_ALTVESSELID) &&
           verifier.VerifyString(altVesselId()) &&
           VerifyOffset(verifier, VT_IDORGANIZATION) &&
           verifier.VerifyString(idOrganization()) &&
           VerifyOffset(verifier, VT_VESSELNAME) &&
           verifier.VerifyString(vesselName()) &&
           VerifyOffset(verifier, VT_VESSELTYPE) &&
           verifier.VerifyString(vesselType()) &&
           VerifyOffset(verifier, VT_VESSELCLASS) &&
           verifier.VerifyString(vesselClass()) &&
           VerifyOffset(verifier, VT_VESSELDESCRIPTION) &&
           verifier.VerifyString(vesselDescription()) &&
           VerifyOffset(verifier, VT_SCONUM) &&
           verifier.VerifyString(sconum()) &&
           VerifyField<int32_t>(verifier, VT_IMON, 4) &&
           VerifyOffset(verifier, VT_MMSI) &&
           verifier.VerifyString(mmsi()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callsign()) &&
           VerifyOffset(verifier, VT_VESSELFLAG) &&
           verifier.VerifyString(vesselFlag()) &&
           VerifyOffset(verifier, VT_YEARBUILT) &&
           verifier.VerifyString(yearBuilt()) &&
           VerifyOffset(verifier, VT_VESSELBUILDER) &&
           verifier.VerifyString(vesselBuilder()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_FIRSTSEEN) &&
           verifier.VerifyString(firstSeen()) &&
           VerifyField<double>(verifier, VT_LENGTH, 8) &&
           VerifyField<double>(verifier, VT_WIDTH, 8) &&
           VerifyField<double>(verifier, VT_MAXDRAUGHT, 8) &&
           VerifyField<double>(verifier, VT_VSLWT, 8) &&
           VerifyField<double>(verifier, VT_MAXSPEED, 8) &&
           VerifyOffset(verifier, VT_STERNTYPE) &&
           verifier.VerifyString(sternType()) &&
           VerifyField<int32_t>(verifier, VT_NUMBLADES, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMSHAFTS, 4) &&
           VerifyOffset(verifier, VT_PROPTYPE) &&
           verifier.VerifyString(propType()) &&
           VerifyOffset(verifier, VT_HULLNUM) &&
           verifier.VerifyString(hullNum()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Vessel_IngestBuilder {
  typedef Vessel_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Vessel_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Vessel_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Vessel_Ingest::VT_ENTITY, entity);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Vessel_Ingest::VT_IDENTITY, idEntity);
  }
  void add_altVesselId(::flatbuffers::Offset<::flatbuffers::String> altVesselId) {
    fbb_.AddOffset(Vessel_Ingest::VT_ALTVESSELID, altVesselId);
  }
  void add_idOrganization(::flatbuffers::Offset<::flatbuffers::String> idOrganization) {
    fbb_.AddOffset(Vessel_Ingest::VT_IDORGANIZATION, idOrganization);
  }
  void add_vesselName(::flatbuffers::Offset<::flatbuffers::String> vesselName) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELNAME, vesselName);
  }
  void add_vesselType(::flatbuffers::Offset<::flatbuffers::String> vesselType) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELTYPE, vesselType);
  }
  void add_vesselClass(::flatbuffers::Offset<::flatbuffers::String> vesselClass) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELCLASS, vesselClass);
  }
  void add_vesselDescription(::flatbuffers::Offset<::flatbuffers::String> vesselDescription) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELDESCRIPTION, vesselDescription);
  }
  void add_sconum(::flatbuffers::Offset<::flatbuffers::String> sconum) {
    fbb_.AddOffset(Vessel_Ingest::VT_SCONUM, sconum);
  }
  void add_imon(int32_t imon) {
    fbb_.AddElement<int32_t>(Vessel_Ingest::VT_IMON, imon, 0);
  }
  void add_mmsi(::flatbuffers::Offset<::flatbuffers::String> mmsi) {
    fbb_.AddOffset(Vessel_Ingest::VT_MMSI, mmsi);
  }
  void add_callsign(::flatbuffers::Offset<::flatbuffers::String> callsign) {
    fbb_.AddOffset(Vessel_Ingest::VT_CALLSIGN, callsign);
  }
  void add_vesselFlag(::flatbuffers::Offset<::flatbuffers::String> vesselFlag) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELFLAG, vesselFlag);
  }
  void add_yearBuilt(::flatbuffers::Offset<::flatbuffers::String> yearBuilt) {
    fbb_.AddOffset(Vessel_Ingest::VT_YEARBUILT, yearBuilt);
  }
  void add_vesselBuilder(::flatbuffers::Offset<::flatbuffers::String> vesselBuilder) {
    fbb_.AddOffset(Vessel_Ingest::VT_VESSELBUILDER, vesselBuilder);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(Vessel_Ingest::VT_STATUS, status);
  }
  void add_firstSeen(::flatbuffers::Offset<::flatbuffers::String> firstSeen) {
    fbb_.AddOffset(Vessel_Ingest::VT_FIRSTSEEN, firstSeen);
  }
  void add_length(double length) {
    fbb_.AddElement<double>(Vessel_Ingest::VT_LENGTH, length, 0.0);
  }
  void add_width(double width) {
    fbb_.AddElement<double>(Vessel_Ingest::VT_WIDTH, width, 0.0);
  }
  void add_maxDraught(double maxDraught) {
    fbb_.AddElement<double>(Vessel_Ingest::VT_MAXDRAUGHT, maxDraught, 0.0);
  }
  void add_vslWt(double vslWt) {
    fbb_.AddElement<double>(Vessel_Ingest::VT_VSLWT, vslWt, 0.0);
  }
  void add_maxSpeed(double maxSpeed) {
    fbb_.AddElement<double>(Vessel_Ingest::VT_MAXSPEED, maxSpeed, 0.0);
  }
  void add_sternType(::flatbuffers::Offset<::flatbuffers::String> sternType) {
    fbb_.AddOffset(Vessel_Ingest::VT_STERNTYPE, sternType);
  }
  void add_numBlades(int32_t numBlades) {
    fbb_.AddElement<int32_t>(Vessel_Ingest::VT_NUMBLADES, numBlades, 0);
  }
  void add_numShafts(int32_t numShafts) {
    fbb_.AddElement<int32_t>(Vessel_Ingest::VT_NUMSHAFTS, numShafts, 0);
  }
  void add_propType(::flatbuffers::Offset<::flatbuffers::String> propType) {
    fbb_.AddOffset(Vessel_Ingest::VT_PROPTYPE, propType);
  }
  void add_hullNum(::flatbuffers::Offset<::flatbuffers::String> hullNum) {
    fbb_.AddOffset(Vessel_Ingest::VT_HULLNUM, hullNum);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Vessel_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Vessel_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Vessel_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Vessel_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(Vessel_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Vessel_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Vessel_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit Vessel_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vessel_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vessel_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vessel_Ingest> CreateVessel_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altVesselId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOrganization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselClass = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselDescription = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sconum = 0,
    int32_t imon = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mmsi = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callsign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselFlag = 0,
    ::flatbuffers::Offset<::flatbuffers::String> yearBuilt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vesselBuilder = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> firstSeen = 0,
    double length = 0.0,
    double width = 0.0,
    double maxDraught = 0.0,
    double vslWt = 0.0,
    double maxSpeed = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> sternType = 0,
    int32_t numBlades = 0,
    int32_t numShafts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> propType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hullNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Vessel_Ingest_dataMode_Enum dataMode = Vessel_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Vessel_IngestBuilder builder_(_fbb);
  builder_.add_maxSpeed(maxSpeed);
  builder_.add_vslWt(vslWt);
  builder_.add_maxDraught(maxDraught);
  builder_.add_width(width);
  builder_.add_length(length);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_hullNum(hullNum);
  builder_.add_propType(propType);
  builder_.add_numShafts(numShafts);
  builder_.add_numBlades(numBlades);
  builder_.add_sternType(sternType);
  builder_.add_firstSeen(firstSeen);
  builder_.add_status(status);
  builder_.add_vesselBuilder(vesselBuilder);
  builder_.add_yearBuilt(yearBuilt);
  builder_.add_vesselFlag(vesselFlag);
  builder_.add_callsign(callsign);
  builder_.add_mmsi(mmsi);
  builder_.add_imon(imon);
  builder_.add_sconum(sconum);
  builder_.add_vesselDescription(vesselDescription);
  builder_.add_vesselClass(vesselClass);
  builder_.add_vesselType(vesselType);
  builder_.add_vesselName(vesselName);
  builder_.add_idOrganization(idOrganization);
  builder_.add_altVesselId(altVesselId);
  builder_.add_idEntity(idEntity);
  builder_.add_entity(entity);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Vessel_Ingest> CreateVessel_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *entity = nullptr,
    const char *idEntity = nullptr,
    const char *altVesselId = nullptr,
    const char *idOrganization = nullptr,
    const char *vesselName = nullptr,
    const char *vesselType = nullptr,
    const char *vesselClass = nullptr,
    const char *vesselDescription = nullptr,
    const char *sconum = nullptr,
    int32_t imon = 0,
    const char *mmsi = nullptr,
    const char *callsign = nullptr,
    const char *vesselFlag = nullptr,
    const char *yearBuilt = nullptr,
    const char *vesselBuilder = nullptr,
    const char *status = nullptr,
    const char *firstSeen = nullptr,
    double length = 0.0,
    double width = 0.0,
    double maxDraught = 0.0,
    double vslWt = 0.0,
    double maxSpeed = 0.0,
    const char *sternType = nullptr,
    int32_t numBlades = 0,
    int32_t numShafts = 0,
    const char *propType = nullptr,
    const char *hullNum = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Vessel_Ingest_dataMode_Enum dataMode = Vessel_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto altVesselId__ = altVesselId ? _fbb.CreateString(altVesselId) : 0;
  auto idOrganization__ = idOrganization ? _fbb.CreateString(idOrganization) : 0;
  auto vesselName__ = vesselName ? _fbb.CreateString(vesselName) : 0;
  auto vesselType__ = vesselType ? _fbb.CreateString(vesselType) : 0;
  auto vesselClass__ = vesselClass ? _fbb.CreateString(vesselClass) : 0;
  auto vesselDescription__ = vesselDescription ? _fbb.CreateString(vesselDescription) : 0;
  auto sconum__ = sconum ? _fbb.CreateString(sconum) : 0;
  auto mmsi__ = mmsi ? _fbb.CreateString(mmsi) : 0;
  auto callsign__ = callsign ? _fbb.CreateString(callsign) : 0;
  auto vesselFlag__ = vesselFlag ? _fbb.CreateString(vesselFlag) : 0;
  auto yearBuilt__ = yearBuilt ? _fbb.CreateString(yearBuilt) : 0;
  auto vesselBuilder__ = vesselBuilder ? _fbb.CreateString(vesselBuilder) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto firstSeen__ = firstSeen ? _fbb.CreateString(firstSeen) : 0;
  auto sternType__ = sternType ? _fbb.CreateString(sternType) : 0;
  auto propType__ = propType ? _fbb.CreateString(propType) : 0;
  auto hullNum__ = hullNum ? _fbb.CreateString(hullNum) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateVessel_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      entity__,
      idEntity__,
      altVesselId__,
      idOrganization__,
      vesselName__,
      vesselType__,
      vesselClass__,
      vesselDescription__,
      sconum__,
      imon,
      mmsi__,
      callsign__,
      vesselFlag__,
      yearBuilt__,
      vesselBuilder__,
      status__,
      firstSeen__,
      length,
      width,
      maxDraught,
      vslWt,
      maxSpeed,
      sternType__,
      numBlades,
      numShafts,
      propType__,
      hullNum__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const Vessel_Ingest *GetVessel_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Vessel_Ingest>(buf);
}

inline const Vessel_Ingest *GetSizePrefixedVessel_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Vessel_Ingest>(buf);
}

inline const char *Vessel_IngestIdentifier() {
  return "VESS";
}

inline bool Vessel_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Vessel_IngestIdentifier());
}

inline bool SizePrefixedVessel_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Vessel_IngestIdentifier(), true);
}

inline bool VerifyVessel_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Vessel_Ingest>(Vessel_IngestIdentifier());
}

inline bool VerifySizePrefixedVessel_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Vessel_Ingest>(Vessel_IngestIdentifier());
}

inline void FinishVessel_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Vessel_Ingest> root) {
  fbb.Finish(root, Vessel_IngestIdentifier());
}

inline void FinishSizePrefixedVessel_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Vessel_Ingest> root) {
  fbb.FinishSizePrefixed(root, Vessel_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
