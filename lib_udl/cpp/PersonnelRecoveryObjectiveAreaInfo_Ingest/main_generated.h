// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PersonnelRecoveryObjectiveAreaInfo_Ingest;
struct PersonnelRecoveryObjectiveAreaInfo_IngestBuilder;

/// /// Objective Area Information.
struct PersonnelRecoveryObjectiveAreaInfo_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonnelRecoveryObjectiveAreaInfo_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PZLOCATION = 4,
    VT_PZDESC = 6,
    VT_OSCCALLSIGN = 8,
    VT_OSCFREQ = 10,
    VT_ENEMYDATA = 12
  };
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [103.23, 30.445]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *pzLocation() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PZLOCATION);
  }
  /// Description of the pickup zone location.
  /// Example: /// Example: Near the lake.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *pzDesc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PZDESC);
  }
  /// The call sign of the on-scene commander.
  /// Example: /// Example: STARFOX
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *oscCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OSCCALLSIGN);
  }
  /// The radio frequency of the on-scene commander.
  /// Example: /// Example: 12.55
  /// Constraints: No constraints specified.
  double oscFreq() const {
    return GetField<double>(VT_OSCFREQ, 0.0);
  }
  /// Information detailing knowledge of enemies in the area.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *enemyData() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ENEMYDATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PZLOCATION) &&
           verifier.VerifyVector(pzLocation()) &&
           verifier.VerifyVectorOfStrings(pzLocation()) &&
           VerifyOffset(verifier, VT_PZDESC) &&
           verifier.VerifyString(pzDesc()) &&
           VerifyOffset(verifier, VT_OSCCALLSIGN) &&
           verifier.VerifyString(oscCallSign()) &&
           VerifyField<double>(verifier, VT_OSCFREQ, 8) &&
           VerifyOffset(verifier, VT_ENEMYDATA) &&
           verifier.VerifyVector(enemyData()) &&
           verifier.VerifyVectorOfStrings(enemyData()) &&
           verifier.EndTable();
  }
};

struct PersonnelRecoveryObjectiveAreaInfo_IngestBuilder {
  typedef PersonnelRecoveryObjectiveAreaInfo_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pzLocation(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> pzLocation) {
    fbb_.AddOffset(PersonnelRecoveryObjectiveAreaInfo_Ingest::VT_PZLOCATION, pzLocation);
  }
  void add_pzDesc(::flatbuffers::Offset<::flatbuffers::String> pzDesc) {
    fbb_.AddOffset(PersonnelRecoveryObjectiveAreaInfo_Ingest::VT_PZDESC, pzDesc);
  }
  void add_oscCallSign(::flatbuffers::Offset<::flatbuffers::String> oscCallSign) {
    fbb_.AddOffset(PersonnelRecoveryObjectiveAreaInfo_Ingest::VT_OSCCALLSIGN, oscCallSign);
  }
  void add_oscFreq(double oscFreq) {
    fbb_.AddElement<double>(PersonnelRecoveryObjectiveAreaInfo_Ingest::VT_OSCFREQ, oscFreq, 0.0);
  }
  void add_enemyData(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> enemyData) {
    fbb_.AddOffset(PersonnelRecoveryObjectiveAreaInfo_Ingest::VT_ENEMYDATA, enemyData);
  }
  explicit PersonnelRecoveryObjectiveAreaInfo_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest> CreatePersonnelRecoveryObjectiveAreaInfo_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> pzLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pzDesc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> oscCallSign = 0,
    double oscFreq = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> enemyData = 0) {
  PersonnelRecoveryObjectiveAreaInfo_IngestBuilder builder_(_fbb);
  builder_.add_oscFreq(oscFreq);
  builder_.add_enemyData(enemyData);
  builder_.add_oscCallSign(oscCallSign);
  builder_.add_pzDesc(pzDesc);
  builder_.add_pzLocation(pzLocation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest> CreatePersonnelRecoveryObjectiveAreaInfo_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *pzLocation = nullptr,
    const char *pzDesc = nullptr,
    const char *oscCallSign = nullptr,
    double oscFreq = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *enemyData = nullptr) {
  auto pzLocation__ = pzLocation ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*pzLocation) : 0;
  auto pzDesc__ = pzDesc ? _fbb.CreateString(pzDesc) : 0;
  auto oscCallSign__ = oscCallSign ? _fbb.CreateString(oscCallSign) : 0;
  auto enemyData__ = enemyData ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*enemyData) : 0;
  return CreatePersonnelRecoveryObjectiveAreaInfo_Ingest(
      _fbb,
      pzLocation__,
      pzDesc__,
      oscCallSign__,
      oscFreq,
      enemyData__);
}

inline const PersonnelRecoveryObjectiveAreaInfo_Ingest *GetPersonnelRecoveryObjectiveAreaInfo_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<PersonnelRecoveryObjectiveAreaInfo_Ingest>(buf);
}

inline const PersonnelRecoveryObjectiveAreaInfo_Ingest *GetSizePrefixedPersonnelRecoveryObjectiveAreaInfo_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonnelRecoveryObjectiveAreaInfo_Ingest>(buf);
}

inline const char *PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier() {
  return "PERS";
}

inline bool PersonnelRecoveryObjectiveAreaInfo_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier());
}

inline bool SizePrefixedPersonnelRecoveryObjectiveAreaInfo_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier(), true);
}

inline bool VerifyPersonnelRecoveryObjectiveAreaInfo_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonnelRecoveryObjectiveAreaInfo_Ingest>(PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier());
}

inline bool VerifySizePrefixedPersonnelRecoveryObjectiveAreaInfo_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonnelRecoveryObjectiveAreaInfo_Ingest>(PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier());
}

inline void FinishPersonnelRecoveryObjectiveAreaInfo_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest> root) {
  fbb.Finish(root, PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier());
}

inline void FinishSizePrefixedPersonnelRecoveryObjectiveAreaInfo_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryObjectiveAreaInfo_Ingest> root) {
  fbb.FinishSizePrefixed(root, PersonnelRecoveryObjectiveAreaInfo_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
