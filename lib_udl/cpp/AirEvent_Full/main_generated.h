// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirEvent_Full;
struct AirEvent_FullBuilder;

enum AirEvent_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirEvent_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirEvent_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirEvent_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirEvent_Full_dataMode_Enum_EXERCISE = 3,
  AirEvent_Full_dataMode_Enum_MIN = AirEvent_Full_dataMode_Enum_REAL,
  AirEvent_Full_dataMode_Enum_MAX = AirEvent_Full_dataMode_Enum_EXERCISE
};

inline const AirEvent_Full_dataMode_Enum (&EnumValuesAirEvent_Full_dataMode_Enum())[4] {
  static const AirEvent_Full_dataMode_Enum values[] = {
    AirEvent_Full_dataMode_Enum_REAL,
    AirEvent_Full_dataMode_Enum_TEST,
    AirEvent_Full_dataMode_Enum_SIMULATED,
    AirEvent_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirEvent_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirEvent_Full_dataMode_Enum(AirEvent_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirEvent_Full_dataMode_Enum_REAL, AirEvent_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirEvent_Full_dataMode_Enum()[index];
}

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
struct AirEvent_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirEvent_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_TYPE = 8,
    VT_IDSORTIE = 10,
    VT_IDMISSION = 12,
    VT_EXTERNALAIREVENTID = 14,
    VT_LEGNUM = 16,
    VT_LOCATION = 18,
    VT_ARRPURPOSE = 20,
    VT_PLANNEDARRTIME = 22,
    VT_ESTARRTIME = 24,
    VT_ACTUALARRTIME = 26,
    VT_DEPPURPOSE = 28,
    VT_PLANNEDDEPTIME = 30,
    VT_ESTDEPTIME = 32,
    VT_ACTUALDEPTIME = 34,
    VT_EXTERNALARTRACKID = 36,
    VT_ARTRACKID = 38,
    VT_ARTRACKNAME = 40,
    VT_RZCT = 42,
    VT_ARCT = 44,
    VT_BASEALT = 46,
    VT_PRIORITY = 48,
    VT_TRACKTIME = 50,
    VT_STATUSCODE = 52,
    VT_RZPOINT = 54,
    VT_RZTYPE = 56,
    VT_AREVENTTYPE = 58,
    VT_NUMTANKERS = 60,
    VT_REVTRACK = 62,
    VT_SHORTTRACK = 64,
    VT_CANCELLED = 66,
    VT_TANKERS = 68,
    VT_RECEIVERS = 70,
    VT_REMARKS = 72,
    VT_CREATEDAT = 74,
    VT_CREATEDBY = 76,
    VT_UPDATEDAT = 78,
    VT_UPDATEDBY = 80,
    VT_SOURCEDL = 82,
    VT_SOURCE = 84,
    VT_ORIGIN = 86,
    VT_ORIGNETWORK = 88,
    VT_DATAMODE = 90
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
  /// Example: /// Example: FUEL TRANSFER
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The UDL unique identifier of the sortie associated with this air event.
  /// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSORTIE);
  }
  /// The UDL unique identifier of the mission associated with this air event.
  /// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDMISSION);
  }
  /// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: MB014313032022407540
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalAirEventId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALAIREVENTID);
  }
  /// Identifies the Itinerary point of a sortie where an air event occurs.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  int32_t legNum() const {
    return GetField<int32_t>(VT_LEGNUM, 0);
  }
  /// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
  /// Example: /// Example: 901EW
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *location() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCATION);
  }
  /// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *arrPurpose() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRPURPOSE);
  }
  /// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *plannedArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNEDARRTIME);
  }
  /// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:59:48.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTARRTIME);
  }
  /// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:00:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALARRTIME);
  }
  /// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: Q
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *depPurpose() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPPURPOSE);
  }
  /// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:15:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *plannedDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNEDDEPTIME);
  }
  /// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:19:48.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTDEPTIME);
  }
  /// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:17:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALDEPTIME);
  }
  /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalARTrackId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALARTRACKID);
  }
  /// Identifier of the air refueling track, if applicable.
  /// Example: /// Example: CH61
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *arTrackId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARTRACKID);
  }
  /// Name of the air refueling track, if applicable.
  /// Example: /// Example: CH61 POST
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *arTrackName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARTRACKNAME);
  }
  /// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *rzct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RZCT);
  }
  /// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T15:11:27.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *arct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARCT);
  }
  /// Altitude of this air event, in feet.
  /// Example: /// Example: 28000.1
  /// Constraints: No constraints specified.
  double baseAlt() const {
    return GetField<double>(VT_BASEALT, 0.0);
  }
  /// Priority of this air event.
  /// Example: /// Example: 1A2
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *priority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIORITY);
  }
  /// Length of time the receiver unit has requested for an air event, in hours.
  /// Example: /// Example: 1.5
  /// Constraints: No constraints specified.
  double trackTime() const {
    return GetField<double>(VT_TRACKTIME, 0.0);
  }
  /// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *statusCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUSCODE);
  }
  /// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
  /// Example: /// Example: AN
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *rzPoint() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RZPOINT);
  }
  /// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
  /// Example: /// Example: PP
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *rzType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RZTYPE);
  }
  /// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *arEventType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREVENTTYPE);
  }
  /// The number of tankers requested for an air refueling event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numTankers() const {
    return GetField<int32_t>(VT_NUMTANKERS, 0);
  }
  /// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool revTrack() const {
    return GetField<uint8_t>(VT_REVTRACK, 0) != 0;
  }
  /// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool shortTrack() const {
    return GetField<uint8_t>(VT_SHORTTRACK, 0) != 0;
  }
  /// Flag indicating that this air refueling event has been cancelled.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool cancelled() const {
    return GetField<uint8_t>(VT_CANCELLED, 0) != 0;
  }
  /// Collection of tanker aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tankers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TANKERS);
  }
  /// Collection of receiver aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *receivers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RECEIVERS);
  }
  /// Collection of remarks associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REMARKS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirEvent_Full_dataMode_Enum dataMode() const {
    return static_cast<AirEvent_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_IDSORTIE) &&
           verifier.VerifyString(idSortie()) &&
           VerifyOffset(verifier, VT_IDMISSION) &&
           verifier.VerifyString(idMission()) &&
           VerifyOffset(verifier, VT_EXTERNALAIREVENTID) &&
           verifier.VerifyString(externalAirEventId()) &&
           VerifyField<int32_t>(verifier, VT_LEGNUM, 4) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyString(location()) &&
           VerifyOffset(verifier, VT_ARRPURPOSE) &&
           verifier.VerifyString(arrPurpose()) &&
           VerifyOffset(verifier, VT_PLANNEDARRTIME) &&
           verifier.VerifyString(plannedArrTime()) &&
           VerifyOffset(verifier, VT_ESTARRTIME) &&
           verifier.VerifyString(estArrTime()) &&
           VerifyOffset(verifier, VT_ACTUALARRTIME) &&
           verifier.VerifyString(actualArrTime()) &&
           VerifyOffset(verifier, VT_DEPPURPOSE) &&
           verifier.VerifyString(depPurpose()) &&
           VerifyOffset(verifier, VT_PLANNEDDEPTIME) &&
           verifier.VerifyString(plannedDepTime()) &&
           VerifyOffset(verifier, VT_ESTDEPTIME) &&
           verifier.VerifyString(estDepTime()) &&
           VerifyOffset(verifier, VT_ACTUALDEPTIME) &&
           verifier.VerifyString(actualDepTime()) &&
           VerifyOffset(verifier, VT_EXTERNALARTRACKID) &&
           verifier.VerifyString(externalARTrackId()) &&
           VerifyOffset(verifier, VT_ARTRACKID) &&
           verifier.VerifyString(arTrackId()) &&
           VerifyOffset(verifier, VT_ARTRACKNAME) &&
           verifier.VerifyString(arTrackName()) &&
           VerifyOffset(verifier, VT_RZCT) &&
           verifier.VerifyString(rzct()) &&
           VerifyOffset(verifier, VT_ARCT) &&
           verifier.VerifyString(arct()) &&
           VerifyField<double>(verifier, VT_BASEALT, 8) &&
           VerifyOffset(verifier, VT_PRIORITY) &&
           verifier.VerifyString(priority()) &&
           VerifyField<double>(verifier, VT_TRACKTIME, 8) &&
           VerifyOffset(verifier, VT_STATUSCODE) &&
           verifier.VerifyString(statusCode()) &&
           VerifyOffset(verifier, VT_RZPOINT) &&
           verifier.VerifyString(rzPoint()) &&
           VerifyOffset(verifier, VT_RZTYPE) &&
           verifier.VerifyString(rzType()) &&
           VerifyOffset(verifier, VT_AREVENTTYPE) &&
           verifier.VerifyString(arEventType()) &&
           VerifyField<int32_t>(verifier, VT_NUMTANKERS, 4) &&
           VerifyField<uint8_t>(verifier, VT_REVTRACK, 1) &&
           VerifyField<uint8_t>(verifier, VT_SHORTTRACK, 1) &&
           VerifyField<uint8_t>(verifier, VT_CANCELLED, 1) &&
           VerifyOffset(verifier, VT_TANKERS) &&
           verifier.VerifyVector(tankers()) &&
           verifier.VerifyVectorOfStrings(tankers()) &&
           VerifyOffset(verifier, VT_RECEIVERS) &&
           verifier.VerifyVector(receivers()) &&
           verifier.VerifyVectorOfStrings(receivers()) &&
           VerifyOffset(verifier, VT_REMARKS) &&
           verifier.VerifyVector(remarks()) &&
           verifier.VerifyVectorOfStrings(remarks()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AirEvent_FullBuilder {
  typedef AirEvent_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirEvent_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirEvent_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(AirEvent_Full::VT_TYPE, type);
  }
  void add_idSortie(::flatbuffers::Offset<::flatbuffers::String> idSortie) {
    fbb_.AddOffset(AirEvent_Full::VT_IDSORTIE, idSortie);
  }
  void add_idMission(::flatbuffers::Offset<::flatbuffers::String> idMission) {
    fbb_.AddOffset(AirEvent_Full::VT_IDMISSION, idMission);
  }
  void add_externalAirEventId(::flatbuffers::Offset<::flatbuffers::String> externalAirEventId) {
    fbb_.AddOffset(AirEvent_Full::VT_EXTERNALAIREVENTID, externalAirEventId);
  }
  void add_legNum(int32_t legNum) {
    fbb_.AddElement<int32_t>(AirEvent_Full::VT_LEGNUM, legNum, 0);
  }
  void add_location(::flatbuffers::Offset<::flatbuffers::String> location) {
    fbb_.AddOffset(AirEvent_Full::VT_LOCATION, location);
  }
  void add_arrPurpose(::flatbuffers::Offset<::flatbuffers::String> arrPurpose) {
    fbb_.AddOffset(AirEvent_Full::VT_ARRPURPOSE, arrPurpose);
  }
  void add_plannedArrTime(::flatbuffers::Offset<::flatbuffers::String> plannedArrTime) {
    fbb_.AddOffset(AirEvent_Full::VT_PLANNEDARRTIME, plannedArrTime);
  }
  void add_estArrTime(::flatbuffers::Offset<::flatbuffers::String> estArrTime) {
    fbb_.AddOffset(AirEvent_Full::VT_ESTARRTIME, estArrTime);
  }
  void add_actualArrTime(::flatbuffers::Offset<::flatbuffers::String> actualArrTime) {
    fbb_.AddOffset(AirEvent_Full::VT_ACTUALARRTIME, actualArrTime);
  }
  void add_depPurpose(::flatbuffers::Offset<::flatbuffers::String> depPurpose) {
    fbb_.AddOffset(AirEvent_Full::VT_DEPPURPOSE, depPurpose);
  }
  void add_plannedDepTime(::flatbuffers::Offset<::flatbuffers::String> plannedDepTime) {
    fbb_.AddOffset(AirEvent_Full::VT_PLANNEDDEPTIME, plannedDepTime);
  }
  void add_estDepTime(::flatbuffers::Offset<::flatbuffers::String> estDepTime) {
    fbb_.AddOffset(AirEvent_Full::VT_ESTDEPTIME, estDepTime);
  }
  void add_actualDepTime(::flatbuffers::Offset<::flatbuffers::String> actualDepTime) {
    fbb_.AddOffset(AirEvent_Full::VT_ACTUALDEPTIME, actualDepTime);
  }
  void add_externalARTrackId(::flatbuffers::Offset<::flatbuffers::String> externalARTrackId) {
    fbb_.AddOffset(AirEvent_Full::VT_EXTERNALARTRACKID, externalARTrackId);
  }
  void add_arTrackId(::flatbuffers::Offset<::flatbuffers::String> arTrackId) {
    fbb_.AddOffset(AirEvent_Full::VT_ARTRACKID, arTrackId);
  }
  void add_arTrackName(::flatbuffers::Offset<::flatbuffers::String> arTrackName) {
    fbb_.AddOffset(AirEvent_Full::VT_ARTRACKNAME, arTrackName);
  }
  void add_rzct(::flatbuffers::Offset<::flatbuffers::String> rzct) {
    fbb_.AddOffset(AirEvent_Full::VT_RZCT, rzct);
  }
  void add_arct(::flatbuffers::Offset<::flatbuffers::String> arct) {
    fbb_.AddOffset(AirEvent_Full::VT_ARCT, arct);
  }
  void add_baseAlt(double baseAlt) {
    fbb_.AddElement<double>(AirEvent_Full::VT_BASEALT, baseAlt, 0.0);
  }
  void add_priority(::flatbuffers::Offset<::flatbuffers::String> priority) {
    fbb_.AddOffset(AirEvent_Full::VT_PRIORITY, priority);
  }
  void add_trackTime(double trackTime) {
    fbb_.AddElement<double>(AirEvent_Full::VT_TRACKTIME, trackTime, 0.0);
  }
  void add_statusCode(::flatbuffers::Offset<::flatbuffers::String> statusCode) {
    fbb_.AddOffset(AirEvent_Full::VT_STATUSCODE, statusCode);
  }
  void add_rzPoint(::flatbuffers::Offset<::flatbuffers::String> rzPoint) {
    fbb_.AddOffset(AirEvent_Full::VT_RZPOINT, rzPoint);
  }
  void add_rzType(::flatbuffers::Offset<::flatbuffers::String> rzType) {
    fbb_.AddOffset(AirEvent_Full::VT_RZTYPE, rzType);
  }
  void add_arEventType(::flatbuffers::Offset<::flatbuffers::String> arEventType) {
    fbb_.AddOffset(AirEvent_Full::VT_AREVENTTYPE, arEventType);
  }
  void add_numTankers(int32_t numTankers) {
    fbb_.AddElement<int32_t>(AirEvent_Full::VT_NUMTANKERS, numTankers, 0);
  }
  void add_revTrack(bool revTrack) {
    fbb_.AddElement<uint8_t>(AirEvent_Full::VT_REVTRACK, static_cast<uint8_t>(revTrack), 0);
  }
  void add_shortTrack(bool shortTrack) {
    fbb_.AddElement<uint8_t>(AirEvent_Full::VT_SHORTTRACK, static_cast<uint8_t>(shortTrack), 0);
  }
  void add_cancelled(bool cancelled) {
    fbb_.AddElement<uint8_t>(AirEvent_Full::VT_CANCELLED, static_cast<uint8_t>(cancelled), 0);
  }
  void add_tankers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tankers) {
    fbb_.AddOffset(AirEvent_Full::VT_TANKERS, tankers);
  }
  void add_receivers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> receivers) {
    fbb_.AddOffset(AirEvent_Full::VT_RECEIVERS, receivers);
  }
  void add_remarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks) {
    fbb_.AddOffset(AirEvent_Full::VT_REMARKS, remarks);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirEvent_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirEvent_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(AirEvent_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(AirEvent_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirEvent_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirEvent_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirEvent_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirEvent_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AirEvent_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirEvent_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AirEvent_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirEvent_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirEvent_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirEvent_Full> CreateAirEvent_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalAirEventId = 0,
    int32_t legNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> location = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrPurpose = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plannedArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depPurpose = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plannedDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalARTrackId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arTrackId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arTrackName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rzct = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arct = 0,
    double baseAlt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> priority = 0,
    double trackTime = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> statusCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rzPoint = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rzType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arEventType = 0,
    int32_t numTankers = 0,
    bool revTrack = false,
    bool shortTrack = false,
    bool cancelled = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tankers = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> receivers = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AirEvent_Full_dataMode_Enum dataMode = AirEvent_Full_dataMode_Enum_REAL) {
  AirEvent_FullBuilder builder_(_fbb);
  builder_.add_trackTime(trackTime);
  builder_.add_baseAlt(baseAlt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_remarks(remarks);
  builder_.add_receivers(receivers);
  builder_.add_tankers(tankers);
  builder_.add_numTankers(numTankers);
  builder_.add_arEventType(arEventType);
  builder_.add_rzType(rzType);
  builder_.add_rzPoint(rzPoint);
  builder_.add_statusCode(statusCode);
  builder_.add_priority(priority);
  builder_.add_arct(arct);
  builder_.add_rzct(rzct);
  builder_.add_arTrackName(arTrackName);
  builder_.add_arTrackId(arTrackId);
  builder_.add_externalARTrackId(externalARTrackId);
  builder_.add_actualDepTime(actualDepTime);
  builder_.add_estDepTime(estDepTime);
  builder_.add_plannedDepTime(plannedDepTime);
  builder_.add_depPurpose(depPurpose);
  builder_.add_actualArrTime(actualArrTime);
  builder_.add_estArrTime(estArrTime);
  builder_.add_plannedArrTime(plannedArrTime);
  builder_.add_arrPurpose(arrPurpose);
  builder_.add_location(location);
  builder_.add_legNum(legNum);
  builder_.add_externalAirEventId(externalAirEventId);
  builder_.add_idMission(idMission);
  builder_.add_idSortie(idSortie);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_cancelled(cancelled);
  builder_.add_shortTrack(shortTrack);
  builder_.add_revTrack(revTrack);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirEvent_Full> CreateAirEvent_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    const char *idSortie = nullptr,
    const char *idMission = nullptr,
    const char *externalAirEventId = nullptr,
    int32_t legNum = 0,
    const char *location = nullptr,
    const char *arrPurpose = nullptr,
    const char *plannedArrTime = nullptr,
    const char *estArrTime = nullptr,
    const char *actualArrTime = nullptr,
    const char *depPurpose = nullptr,
    const char *plannedDepTime = nullptr,
    const char *estDepTime = nullptr,
    const char *actualDepTime = nullptr,
    const char *externalARTrackId = nullptr,
    const char *arTrackId = nullptr,
    const char *arTrackName = nullptr,
    const char *rzct = nullptr,
    const char *arct = nullptr,
    double baseAlt = 0.0,
    const char *priority = nullptr,
    double trackTime = 0.0,
    const char *statusCode = nullptr,
    const char *rzPoint = nullptr,
    const char *rzType = nullptr,
    const char *arEventType = nullptr,
    int32_t numTankers = 0,
    bool revTrack = false,
    bool shortTrack = false,
    bool cancelled = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tankers = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *receivers = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AirEvent_Full_dataMode_Enum dataMode = AirEvent_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto idSortie__ = idSortie ? _fbb.CreateString(idSortie) : 0;
  auto idMission__ = idMission ? _fbb.CreateString(idMission) : 0;
  auto externalAirEventId__ = externalAirEventId ? _fbb.CreateString(externalAirEventId) : 0;
  auto location__ = location ? _fbb.CreateString(location) : 0;
  auto arrPurpose__ = arrPurpose ? _fbb.CreateString(arrPurpose) : 0;
  auto plannedArrTime__ = plannedArrTime ? _fbb.CreateString(plannedArrTime) : 0;
  auto estArrTime__ = estArrTime ? _fbb.CreateString(estArrTime) : 0;
  auto actualArrTime__ = actualArrTime ? _fbb.CreateString(actualArrTime) : 0;
  auto depPurpose__ = depPurpose ? _fbb.CreateString(depPurpose) : 0;
  auto plannedDepTime__ = plannedDepTime ? _fbb.CreateString(plannedDepTime) : 0;
  auto estDepTime__ = estDepTime ? _fbb.CreateString(estDepTime) : 0;
  auto actualDepTime__ = actualDepTime ? _fbb.CreateString(actualDepTime) : 0;
  auto externalARTrackId__ = externalARTrackId ? _fbb.CreateString(externalARTrackId) : 0;
  auto arTrackId__ = arTrackId ? _fbb.CreateString(arTrackId) : 0;
  auto arTrackName__ = arTrackName ? _fbb.CreateString(arTrackName) : 0;
  auto rzct__ = rzct ? _fbb.CreateString(rzct) : 0;
  auto arct__ = arct ? _fbb.CreateString(arct) : 0;
  auto priority__ = priority ? _fbb.CreateString(priority) : 0;
  auto statusCode__ = statusCode ? _fbb.CreateString(statusCode) : 0;
  auto rzPoint__ = rzPoint ? _fbb.CreateString(rzPoint) : 0;
  auto rzType__ = rzType ? _fbb.CreateString(rzType) : 0;
  auto arEventType__ = arEventType ? _fbb.CreateString(arEventType) : 0;
  auto tankers__ = tankers ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tankers) : 0;
  auto receivers__ = receivers ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*receivers) : 0;
  auto remarks__ = remarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*remarks) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirEvent_Full(
      _fbb,
      id__,
      classificationMarking__,
      type__,
      idSortie__,
      idMission__,
      externalAirEventId__,
      legNum,
      location__,
      arrPurpose__,
      plannedArrTime__,
      estArrTime__,
      actualArrTime__,
      depPurpose__,
      plannedDepTime__,
      estDepTime__,
      actualDepTime__,
      externalARTrackId__,
      arTrackId__,
      arTrackName__,
      rzct__,
      arct__,
      baseAlt,
      priority__,
      trackTime,
      statusCode__,
      rzPoint__,
      rzType__,
      arEventType__,
      numTankers,
      revTrack,
      shortTrack,
      cancelled,
      tankers__,
      receivers__,
      remarks__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AirEvent_Full *GetAirEvent_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AirEvent_Full>(buf);
}

inline const AirEvent_Full *GetSizePrefixedAirEvent_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirEvent_Full>(buf);
}

inline const char *AirEvent_FullIdentifier() {
  return "AIRE";
}

inline bool AirEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEvent_FullIdentifier());
}

inline bool SizePrefixedAirEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEvent_FullIdentifier(), true);
}

inline bool VerifyAirEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirEvent_Full>(AirEvent_FullIdentifier());
}

inline bool VerifySizePrefixedAirEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirEvent_Full>(AirEvent_FullIdentifier());
}

inline void FinishAirEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEvent_Full> root) {
  fbb.Finish(root, AirEvent_FullIdentifier());
}

inline void FinishSizePrefixedAirEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEvent_Full> root) {
  fbb.FinishSizePrefixed(root, AirEvent_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
