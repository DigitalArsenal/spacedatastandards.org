// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EventEvolution_Full;
struct EventEvolution_FullBuilder;

enum EventEvolution_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EventEvolution_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EventEvolution_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EventEvolution_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EventEvolution_Full_dataMode_Enum_EXERCISE = 3,
  EventEvolution_Full_dataMode_Enum_MIN = EventEvolution_Full_dataMode_Enum_REAL,
  EventEvolution_Full_dataMode_Enum_MAX = EventEvolution_Full_dataMode_Enum_EXERCISE
};

inline const EventEvolution_Full_dataMode_Enum (&EnumValuesEventEvolution_Full_dataMode_Enum())[4] {
  static const EventEvolution_Full_dataMode_Enum values[] = {
    EventEvolution_Full_dataMode_Enum_REAL,
    EventEvolution_Full_dataMode_Enum_TEST,
    EventEvolution_Full_dataMode_Enum_SIMULATED,
    EventEvolution_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEventEvolution_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEventEvolution_Full_dataMode_Enum(EventEvolution_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EventEvolution_Full_dataMode_Enum_REAL, EventEvolution_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEventEvolution_Full_dataMode_Enum()[index];
}

/// /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
struct EventEvolution_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EventEvolution_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_EVENTID = 8,
    VT_CATEGORY = 10,
    VT_SUMMARY = 12,
    VT_STARTTIME = 14,
    VT_ENDTIME = 16,
    VT_STATUS = 18,
    VT_COUNTRYCODE = 20,
    VT_GEOADMINLEVEL1 = 22,
    VT_GEOADMINLEVEL2 = 24,
    VT_GEOADMINLEVEL3 = 26,
    VT_REDACT = 28,
    VT_SRCTYPS = 30,
    VT_SRCIDS = 32,
    VT_DATADESCRIPTION = 34,
    VT_AREA = 36,
    VT_ATEXT = 38,
    VT_AGJSON = 40,
    VT_ATYPE = 42,
    VT_ANDIMS = 44,
    VT_ASRID = 46,
    VT_URL = 48,
    VT_TAGS = 50,
    VT_CREATEDAT = 52,
    VT_CREATEDBY = 54,
    VT_SOURCE = 56,
    VT_ORIGIN = 58,
    VT_ORIGNETWORK = 60,
    VT_DATAMODE = 62
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EVENT_EVOL_ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
  /// Example: /// Example: EVENT_ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *eventId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTID);
  }
  /// The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
  /// Example: /// Example: PROTEST
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  /// Summary or description of the activity or event.
  /// Example: /// Example: Example summary of the event.
  /// Constraints: Minimum length = 1, Maximum length = 4096
  const ::flatbuffers::String *summary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUMMARY);
  }
  /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-12-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-12-03T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
  /// Example: /// Example: UNKNOWN
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *geoAdminLevel1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL1);
  }
  /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
  /// Example: /// Example: El Paso County
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *geoAdminLevel2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL2);
  }
  /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *geoAdminLevel3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL3);
  }
  /// Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool redact() const {
    return GetField<uint8_t>(VT_REDACT, 0) != 0;
  }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['AIS', 'CONJUNCTION']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
  /// Example: /// Example: Description of relationship between srcTyps and srcIds
  /// Constraints: Minimum length = 0, Maximum length = 2056
  const ::flatbuffers::String *dataDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATADESCRIPTION);
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *area() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREA);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *atext() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATEXT);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *agjson() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AGJSON);
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: POLYGON
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *atype() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATYPE);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t andims() const {
    return GetField<int32_t>(VT_ANDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  int32_t asrid() const {
    return GetField<int32_t>(VT_ASRID, 0);
  }
  /// List of URLs to before/after images of this point of interest entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *url() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_URL);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-12-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EventEvolution_Full_dataMode_Enum dataMode() const {
    return static_cast<EventEvolution_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EVENTID) &&
           verifier.VerifyString(eventId()) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_SUMMARY) &&
           verifier.VerifyString(summary()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL1) &&
           verifier.VerifyString(geoAdminLevel1()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL2) &&
           verifier.VerifyString(geoAdminLevel2()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL3) &&
           verifier.VerifyString(geoAdminLevel3()) &&
           VerifyField<uint8_t>(verifier, VT_REDACT, 1) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_DATADESCRIPTION) &&
           verifier.VerifyString(dataDescription()) &&
           VerifyOffset(verifier, VT_AREA) &&
           verifier.VerifyString(area()) &&
           VerifyOffset(verifier, VT_ATEXT) &&
           verifier.VerifyString(atext()) &&
           VerifyOffset(verifier, VT_AGJSON) &&
           verifier.VerifyString(agjson()) &&
           VerifyOffset(verifier, VT_ATYPE) &&
           verifier.VerifyString(atype()) &&
           VerifyField<int32_t>(verifier, VT_ANDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_ASRID, 4) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyVector(url()) &&
           verifier.VerifyVectorOfStrings(url()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct EventEvolution_FullBuilder {
  typedef EventEvolution_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(EventEvolution_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EventEvolution_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_eventId(::flatbuffers::Offset<::flatbuffers::String> eventId) {
    fbb_.AddOffset(EventEvolution_Full::VT_EVENTID, eventId);
  }
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(EventEvolution_Full::VT_CATEGORY, category);
  }
  void add_summary(::flatbuffers::Offset<::flatbuffers::String> summary) {
    fbb_.AddOffset(EventEvolution_Full::VT_SUMMARY, summary);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(EventEvolution_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(EventEvolution_Full::VT_ENDTIME, endTime);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(EventEvolution_Full::VT_STATUS, status);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(EventEvolution_Full::VT_COUNTRYCODE, countryCode);
  }
  void add_geoAdminLevel1(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel1) {
    fbb_.AddOffset(EventEvolution_Full::VT_GEOADMINLEVEL1, geoAdminLevel1);
  }
  void add_geoAdminLevel2(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel2) {
    fbb_.AddOffset(EventEvolution_Full::VT_GEOADMINLEVEL2, geoAdminLevel2);
  }
  void add_geoAdminLevel3(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel3) {
    fbb_.AddOffset(EventEvolution_Full::VT_GEOADMINLEVEL3, geoAdminLevel3);
  }
  void add_redact(bool redact) {
    fbb_.AddElement<uint8_t>(EventEvolution_Full::VT_REDACT, static_cast<uint8_t>(redact), 0);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(EventEvolution_Full::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(EventEvolution_Full::VT_SRCIDS, srcIds);
  }
  void add_dataDescription(::flatbuffers::Offset<::flatbuffers::String> dataDescription) {
    fbb_.AddOffset(EventEvolution_Full::VT_DATADESCRIPTION, dataDescription);
  }
  void add_area(::flatbuffers::Offset<::flatbuffers::String> area) {
    fbb_.AddOffset(EventEvolution_Full::VT_AREA, area);
  }
  void add_atext(::flatbuffers::Offset<::flatbuffers::String> atext) {
    fbb_.AddOffset(EventEvolution_Full::VT_ATEXT, atext);
  }
  void add_agjson(::flatbuffers::Offset<::flatbuffers::String> agjson) {
    fbb_.AddOffset(EventEvolution_Full::VT_AGJSON, agjson);
  }
  void add_atype(::flatbuffers::Offset<::flatbuffers::String> atype) {
    fbb_.AddOffset(EventEvolution_Full::VT_ATYPE, atype);
  }
  void add_andims(int32_t andims) {
    fbb_.AddElement<int32_t>(EventEvolution_Full::VT_ANDIMS, andims, 0);
  }
  void add_asrid(int32_t asrid) {
    fbb_.AddElement<int32_t>(EventEvolution_Full::VT_ASRID, asrid, 0);
  }
  void add_url(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> url) {
    fbb_.AddOffset(EventEvolution_Full::VT_URL, url);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(EventEvolution_Full::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EventEvolution_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EventEvolution_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EventEvolution_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(EventEvolution_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(EventEvolution_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(EventEvolution_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EventEvolution_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit EventEvolution_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EventEvolution_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EventEvolution_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EventEvolution_Full> CreateEventEvolution_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> summary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel3 = 0,
    bool redact = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dataDescription = 0,
    ::flatbuffers::Offset<::flatbuffers::String> area = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atext = 0,
    ::flatbuffers::Offset<::flatbuffers::String> agjson = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atype = 0,
    int32_t andims = 0,
    int32_t asrid = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> url = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    EventEvolution_Full_dataMode_Enum dataMode = EventEvolution_Full_dataMode_Enum_REAL) {
  EventEvolution_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_url(url);
  builder_.add_asrid(asrid);
  builder_.add_andims(andims);
  builder_.add_atype(atype);
  builder_.add_agjson(agjson);
  builder_.add_atext(atext);
  builder_.add_area(area);
  builder_.add_dataDescription(dataDescription);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_geoAdminLevel3(geoAdminLevel3);
  builder_.add_geoAdminLevel2(geoAdminLevel2);
  builder_.add_geoAdminLevel1(geoAdminLevel1);
  builder_.add_countryCode(countryCode);
  builder_.add_status(status);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_summary(summary);
  builder_.add_category(category);
  builder_.add_eventId(eventId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_redact(redact);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EventEvolution_Full> CreateEventEvolution_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *eventId = nullptr,
    const char *category = nullptr,
    const char *summary = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *status = nullptr,
    const char *countryCode = nullptr,
    const char *geoAdminLevel1 = nullptr,
    const char *geoAdminLevel2 = nullptr,
    const char *geoAdminLevel3 = nullptr,
    bool redact = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *dataDescription = nullptr,
    const char *area = nullptr,
    const char *atext = nullptr,
    const char *agjson = nullptr,
    const char *atype = nullptr,
    int32_t andims = 0,
    int32_t asrid = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *url = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    EventEvolution_Full_dataMode_Enum dataMode = EventEvolution_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto eventId__ = eventId ? _fbb.CreateString(eventId) : 0;
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto summary__ = summary ? _fbb.CreateString(summary) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto geoAdminLevel1__ = geoAdminLevel1 ? _fbb.CreateString(geoAdminLevel1) : 0;
  auto geoAdminLevel2__ = geoAdminLevel2 ? _fbb.CreateString(geoAdminLevel2) : 0;
  auto geoAdminLevel3__ = geoAdminLevel3 ? _fbb.CreateString(geoAdminLevel3) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto dataDescription__ = dataDescription ? _fbb.CreateString(dataDescription) : 0;
  auto area__ = area ? _fbb.CreateString(area) : 0;
  auto atext__ = atext ? _fbb.CreateString(atext) : 0;
  auto agjson__ = agjson ? _fbb.CreateString(agjson) : 0;
  auto atype__ = atype ? _fbb.CreateString(atype) : 0;
  auto url__ = url ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*url) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateEventEvolution_Full(
      _fbb,
      id__,
      classificationMarking__,
      eventId__,
      category__,
      summary__,
      startTime__,
      endTime__,
      status__,
      countryCode__,
      geoAdminLevel1__,
      geoAdminLevel2__,
      geoAdminLevel3__,
      redact,
      srcTyps__,
      srcIds__,
      dataDescription__,
      area__,
      atext__,
      agjson__,
      atype__,
      andims,
      asrid,
      url__,
      tags__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const EventEvolution_Full *GetEventEvolution_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EventEvolution_Full>(buf);
}

inline const EventEvolution_Full *GetSizePrefixedEventEvolution_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EventEvolution_Full>(buf);
}

inline const char *EventEvolution_FullIdentifier() {
  return "EVEN";
}

inline bool EventEvolution_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EventEvolution_FullIdentifier());
}

inline bool SizePrefixedEventEvolution_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EventEvolution_FullIdentifier(), true);
}

inline bool VerifyEventEvolution_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EventEvolution_Full>(EventEvolution_FullIdentifier());
}

inline bool VerifySizePrefixedEventEvolution_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EventEvolution_Full>(EventEvolution_FullIdentifier());
}

inline void FinishEventEvolution_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EventEvolution_Full> root) {
  fbb.Finish(root, EventEvolution_FullIdentifier());
}

inline void FinishSizePrefixedEventEvolution_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EventEvolution_Full> root) {
  fbb.FinishSizePrefixed(root, EventEvolution_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
