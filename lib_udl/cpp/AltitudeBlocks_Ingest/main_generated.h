// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AltitudeBlocks_Ingest;
struct AltitudeBlocks_IngestBuilder;

/// /// Minimum and maximum altitude bounds for the track.
struct AltitudeBlocks_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AltitudeBlocks_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALTITUDESEQUENCEID = 4,
    VT_LOWERALTITUDE = 6,
    VT_UPPERALTITUDE = 8
  };
  /// Sequencing field for the altitude block.
  /// Example: /// Example: A1
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *altitudeSequenceId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTITUDESEQUENCEID);
  }
  /// Lowest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  double lowerAltitude() const {
    return GetField<double>(VT_LOWERALTITUDE, 0.0);
  }
  /// Highest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27200.5
  /// Constraints: No constraints specified.
  double upperAltitude() const {
    return GetField<double>(VT_UPPERALTITUDE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ALTITUDESEQUENCEID) &&
           verifier.VerifyString(altitudeSequenceId()) &&
           VerifyField<double>(verifier, VT_LOWERALTITUDE, 8) &&
           VerifyField<double>(verifier, VT_UPPERALTITUDE, 8) &&
           verifier.EndTable();
  }
};

struct AltitudeBlocks_IngestBuilder {
  typedef AltitudeBlocks_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_altitudeSequenceId(::flatbuffers::Offset<::flatbuffers::String> altitudeSequenceId) {
    fbb_.AddOffset(AltitudeBlocks_Ingest::VT_ALTITUDESEQUENCEID, altitudeSequenceId);
  }
  void add_lowerAltitude(double lowerAltitude) {
    fbb_.AddElement<double>(AltitudeBlocks_Ingest::VT_LOWERALTITUDE, lowerAltitude, 0.0);
  }
  void add_upperAltitude(double upperAltitude) {
    fbb_.AddElement<double>(AltitudeBlocks_Ingest::VT_UPPERALTITUDE, upperAltitude, 0.0);
  }
  explicit AltitudeBlocks_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AltitudeBlocks_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AltitudeBlocks_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AltitudeBlocks_Ingest> CreateAltitudeBlocks_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> altitudeSequenceId = 0,
    double lowerAltitude = 0.0,
    double upperAltitude = 0.0) {
  AltitudeBlocks_IngestBuilder builder_(_fbb);
  builder_.add_upperAltitude(upperAltitude);
  builder_.add_lowerAltitude(lowerAltitude);
  builder_.add_altitudeSequenceId(altitudeSequenceId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AltitudeBlocks_Ingest> CreateAltitudeBlocks_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *altitudeSequenceId = nullptr,
    double lowerAltitude = 0.0,
    double upperAltitude = 0.0) {
  auto altitudeSequenceId__ = altitudeSequenceId ? _fbb.CreateString(altitudeSequenceId) : 0;
  return CreateAltitudeBlocks_Ingest(
      _fbb,
      altitudeSequenceId__,
      lowerAltitude,
      upperAltitude);
}

inline const AltitudeBlocks_Ingest *GetAltitudeBlocks_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AltitudeBlocks_Ingest>(buf);
}

inline const AltitudeBlocks_Ingest *GetSizePrefixedAltitudeBlocks_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AltitudeBlocks_Ingest>(buf);
}

inline const char *AltitudeBlocks_IngestIdentifier() {
  return "ALTI";
}

inline bool AltitudeBlocks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AltitudeBlocks_IngestIdentifier());
}

inline bool SizePrefixedAltitudeBlocks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AltitudeBlocks_IngestIdentifier(), true);
}

inline bool VerifyAltitudeBlocks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AltitudeBlocks_Ingest>(AltitudeBlocks_IngestIdentifier());
}

inline bool VerifySizePrefixedAltitudeBlocks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AltitudeBlocks_Ingest>(AltitudeBlocks_IngestIdentifier());
}

inline void FinishAltitudeBlocks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AltitudeBlocks_Ingest> root) {
  fbb.Finish(root, AltitudeBlocks_IngestIdentifier());
}

inline void FinishSizePrefixedAltitudeBlocks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AltitudeBlocks_Ingest> root) {
  fbb.FinishSizePrefixed(root, AltitudeBlocks_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
