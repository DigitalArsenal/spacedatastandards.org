// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationPolarization_Abridged;
struct IonoObservationPolarization_AbridgedBuilder;

enum IonoObservationPolarization_Abridged_data_Enum : int8_t {
  /// No description available.
  IonoObservationPolarization_Abridged_data_Enum_X = 0,
  /// No description available.
  IonoObservationPolarization_Abridged_data_Enum_O = 1,
  IonoObservationPolarization_Abridged_data_Enum_MIN = IonoObservationPolarization_Abridged_data_Enum_X,
  IonoObservationPolarization_Abridged_data_Enum_MAX = IonoObservationPolarization_Abridged_data_Enum_O
};

inline const IonoObservationPolarization_Abridged_data_Enum (&EnumValuesIonoObservationPolarization_Abridged_data_Enum())[2] {
  static const IonoObservationPolarization_Abridged_data_Enum values[] = {
    IonoObservationPolarization_Abridged_data_Enum_X,
    IonoObservationPolarization_Abridged_data_Enum_O
  };
  return values;
}

inline const char * const *EnumNamesIonoObservationPolarization_Abridged_data_Enum() {
  static const char * const names[3] = {
    "X",
    "O",
    nullptr
  };
  return names;
}

inline const char *EnumNameIonoObservationPolarization_Abridged_data_Enum(IonoObservationPolarization_Abridged_data_Enum e) {
  if (::flatbuffers::IsOutRange(e, IonoObservationPolarization_Abridged_data_Enum_X, IonoObservationPolarization_Abridged_data_Enum_O)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIonoObservationPolarization_Abridged_data_Enum()[index];
}

/// /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
struct IonoObservationPolarization_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationPolarization_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTES = 4,
    VT_DIMENSIONS = 6,
    VT_DIMENSIONNAME = 8,
    VT_DATA = 10
  };
  /// Notes for the polarization data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array of integers for polarization dimensions.
  /// Example: /// Example: [1, 2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONS);
  }
  /// Array of names for dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONNAME);
  }
  /// Array of polarization data.
  /// Example: /// Example: [[[[[[['X', 'O']]]]]]]
  /// Constraints: No constraints specified.
  IonoObservationPolarization_Abridged_data_Enum data() const {
    return static_cast<IonoObservationPolarization_Abridged_data_Enum>(GetField<int8_t>(VT_DATA, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_DIMENSIONS) &&
           verifier.VerifyVector(dimensions()) &&
           verifier.VerifyVectorOfStrings(dimensions()) &&
           VerifyOffset(verifier, VT_DIMENSIONNAME) &&
           verifier.VerifyVector(dimensionName()) &&
           verifier.VerifyVectorOfStrings(dimensionName()) &&
           VerifyField<int8_t>(verifier, VT_DATA, 1) &&
           verifier.EndTable();
  }
};

struct IonoObservationPolarization_AbridgedBuilder {
  typedef IonoObservationPolarization_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(IonoObservationPolarization_Abridged::VT_NOTES, notes);
  }
  void add_dimensions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions) {
    fbb_.AddOffset(IonoObservationPolarization_Abridged::VT_DIMENSIONS, dimensions);
  }
  void add_dimensionName(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName) {
    fbb_.AddOffset(IonoObservationPolarization_Abridged::VT_DIMENSIONNAME, dimensionName);
  }
  void add_data(IonoObservationPolarization_Abridged_data_Enum data) {
    fbb_.AddElement<int8_t>(IonoObservationPolarization_Abridged::VT_DATA, static_cast<int8_t>(data), 0);
  }
  explicit IonoObservationPolarization_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationPolarization_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationPolarization_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationPolarization_Abridged> CreateIonoObservationPolarization_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName = 0,
    IonoObservationPolarization_Abridged_data_Enum data = IonoObservationPolarization_Abridged_data_Enum_X) {
  IonoObservationPolarization_AbridgedBuilder builder_(_fbb);
  builder_.add_dimensionName(dimensionName);
  builder_.add_dimensions(dimensions);
  builder_.add_notes(notes);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationPolarization_Abridged> CreateIonoObservationPolarization_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName = nullptr,
    IonoObservationPolarization_Abridged_data_Enum data = IonoObservationPolarization_Abridged_data_Enum_X) {
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto dimensions__ = dimensions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensions) : 0;
  auto dimensionName__ = dimensionName ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensionName) : 0;
  return CreateIonoObservationPolarization_Abridged(
      _fbb,
      notes__,
      dimensions__,
      dimensionName__,
      data);
}

inline const IonoObservationPolarization_Abridged *GetIonoObservationPolarization_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationPolarization_Abridged>(buf);
}

inline const IonoObservationPolarization_Abridged *GetSizePrefixedIonoObservationPolarization_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationPolarization_Abridged>(buf);
}

inline const char *IonoObservationPolarization_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationPolarization_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationPolarization_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationPolarization_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationPolarization_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationPolarization_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationPolarization_Abridged>(IonoObservationPolarization_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationPolarization_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationPolarization_Abridged>(IonoObservationPolarization_AbridgedIdentifier());
}

inline void FinishIonoObservationPolarization_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationPolarization_Abridged> root) {
  fbb.Finish(root, IonoObservationPolarization_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationPolarization_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationPolarization_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationPolarization_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
