// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsSpecialties_Ingest;
struct LogisticsSpecialties_IngestBuilder;

/// /// The specialties required to implement this support item.
struct LogisticsSpecialties_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsSpecialties_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPECIALTY = 4,
    VT_SKILLLEVEL = 6,
    VT_FIRSTNAME = 8,
    VT_LASTNAME = 10,
    VT_RANKCODE = 12,
    VT_LAST4SSN = 14,
    VT_ROLETYPECODE = 16
  };
  /// Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
  /// Example: /// Example: ELEN
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *specialty() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECIALTY);
  }
  /// Skill level of the mission response team member.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t skillLevel() const {
    return GetField<int32_t>(VT_SKILLLEVEL, 0);
  }
  /// The first name of the specialist.
  /// Example: /// Example: JOHN
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *firstName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTNAME);
  }
  /// The last name of the specialist.
  /// Example: /// Example: SMITH
  /// Constraints: Minimum length = 0, Maximum length = 30
  const ::flatbuffers::String *lastName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTNAME);
  }
  /// Military service rank designation.
  /// Example: /// Example: MAJ
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *rankCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANKCODE);
  }
  /// The last four digits of the specialist's social security number.
  /// Example: /// Example: 9999
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *last4Ssn() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST4SSN);
  }
  /// Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
  /// Example: /// Example: TC
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *roleTypeCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROLETYPECODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPECIALTY) &&
           verifier.VerifyString(specialty()) &&
           VerifyField<int32_t>(verifier, VT_SKILLLEVEL, 4) &&
           VerifyOffset(verifier, VT_FIRSTNAME) &&
           verifier.VerifyString(firstName()) &&
           VerifyOffset(verifier, VT_LASTNAME) &&
           verifier.VerifyString(lastName()) &&
           VerifyOffset(verifier, VT_RANKCODE) &&
           verifier.VerifyString(rankCode()) &&
           VerifyOffset(verifier, VT_LAST4SSN) &&
           verifier.VerifyString(last4Ssn()) &&
           VerifyOffset(verifier, VT_ROLETYPECODE) &&
           verifier.VerifyString(roleTypeCode()) &&
           verifier.EndTable();
  }
};

struct LogisticsSpecialties_IngestBuilder {
  typedef LogisticsSpecialties_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_specialty(::flatbuffers::Offset<::flatbuffers::String> specialty) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_SPECIALTY, specialty);
  }
  void add_skillLevel(int32_t skillLevel) {
    fbb_.AddElement<int32_t>(LogisticsSpecialties_Ingest::VT_SKILLLEVEL, skillLevel, 0);
  }
  void add_firstName(::flatbuffers::Offset<::flatbuffers::String> firstName) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_FIRSTNAME, firstName);
  }
  void add_lastName(::flatbuffers::Offset<::flatbuffers::String> lastName) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_LASTNAME, lastName);
  }
  void add_rankCode(::flatbuffers::Offset<::flatbuffers::String> rankCode) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_RANKCODE, rankCode);
  }
  void add_last4Ssn(::flatbuffers::Offset<::flatbuffers::String> last4Ssn) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_LAST4SSN, last4Ssn);
  }
  void add_roleTypeCode(::flatbuffers::Offset<::flatbuffers::String> roleTypeCode) {
    fbb_.AddOffset(LogisticsSpecialties_Ingest::VT_ROLETYPECODE, roleTypeCode);
  }
  explicit LogisticsSpecialties_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsSpecialties_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsSpecialties_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsSpecialties_Ingest> CreateLogisticsSpecialties_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> specialty = 0,
    int32_t skillLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> firstName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rankCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last4Ssn = 0,
    ::flatbuffers::Offset<::flatbuffers::String> roleTypeCode = 0) {
  LogisticsSpecialties_IngestBuilder builder_(_fbb);
  builder_.add_roleTypeCode(roleTypeCode);
  builder_.add_last4Ssn(last4Ssn);
  builder_.add_rankCode(rankCode);
  builder_.add_lastName(lastName);
  builder_.add_firstName(firstName);
  builder_.add_skillLevel(skillLevel);
  builder_.add_specialty(specialty);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsSpecialties_Ingest> CreateLogisticsSpecialties_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *specialty = nullptr,
    int32_t skillLevel = 0,
    const char *firstName = nullptr,
    const char *lastName = nullptr,
    const char *rankCode = nullptr,
    const char *last4Ssn = nullptr,
    const char *roleTypeCode = nullptr) {
  auto specialty__ = specialty ? _fbb.CreateString(specialty) : 0;
  auto firstName__ = firstName ? _fbb.CreateString(firstName) : 0;
  auto lastName__ = lastName ? _fbb.CreateString(lastName) : 0;
  auto rankCode__ = rankCode ? _fbb.CreateString(rankCode) : 0;
  auto last4Ssn__ = last4Ssn ? _fbb.CreateString(last4Ssn) : 0;
  auto roleTypeCode__ = roleTypeCode ? _fbb.CreateString(roleTypeCode) : 0;
  return CreateLogisticsSpecialties_Ingest(
      _fbb,
      specialty__,
      skillLevel,
      firstName__,
      lastName__,
      rankCode__,
      last4Ssn__,
      roleTypeCode__);
}

inline const LogisticsSpecialties_Ingest *GetLogisticsSpecialties_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsSpecialties_Ingest>(buf);
}

inline const LogisticsSpecialties_Ingest *GetSizePrefixedLogisticsSpecialties_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsSpecialties_Ingest>(buf);
}

inline const char *LogisticsSpecialties_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsSpecialties_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSpecialties_IngestIdentifier());
}

inline bool SizePrefixedLogisticsSpecialties_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSpecialties_IngestIdentifier(), true);
}

inline bool VerifyLogisticsSpecialties_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsSpecialties_Ingest>(LogisticsSpecialties_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsSpecialties_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsSpecialties_Ingest>(LogisticsSpecialties_IngestIdentifier());
}

inline void FinishLogisticsSpecialties_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSpecialties_Ingest> root) {
  fbb.Finish(root, LogisticsSpecialties_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsSpecialties_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSpecialties_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsSpecialties_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
