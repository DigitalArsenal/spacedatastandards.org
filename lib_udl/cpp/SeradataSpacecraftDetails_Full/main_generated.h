// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataSpacecraftDetails_Full;
struct SeradataSpacecraftDetails_FullBuilder;

enum SeradataSpacecraftDetails_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataSpacecraftDetails_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataSpacecraftDetails_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataSpacecraftDetails_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataSpacecraftDetails_Full_dataMode_Enum_EXERCISE = 3,
  SeradataSpacecraftDetails_Full_dataMode_Enum_MIN = SeradataSpacecraftDetails_Full_dataMode_Enum_REAL,
  SeradataSpacecraftDetails_Full_dataMode_Enum_MAX = SeradataSpacecraftDetails_Full_dataMode_Enum_EXERCISE
};

inline const SeradataSpacecraftDetails_Full_dataMode_Enum (&EnumValuesSeradataSpacecraftDetails_Full_dataMode_Enum())[4] {
  static const SeradataSpacecraftDetails_Full_dataMode_Enum values[] = {
    SeradataSpacecraftDetails_Full_dataMode_Enum_REAL,
    SeradataSpacecraftDetails_Full_dataMode_Enum_TEST,
    SeradataSpacecraftDetails_Full_dataMode_Enum_SIMULATED,
    SeradataSpacecraftDetails_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataSpacecraftDetails_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataSpacecraftDetails_Full_dataMode_Enum(SeradataSpacecraftDetails_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataSpacecraftDetails_Full_dataMode_Enum_REAL, SeradataSpacecraftDetails_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataSpacecraftDetails_Full_dataMode_Enum()[index];
}

/// /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
struct SeradataSpacecraftDetails_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataSpacecraftDetails_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDONORBIT = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_NAME = 10,
    VT_DESCRIPTION = 12,
    VT_INTLNUMBER = 14,
    VT_SECTOR = 16,
    VT_APOGEE = 18,
    VT_PERIGEE = 20,
    VT_PERIOD = 22,
    VT_INCLINATION = 24,
    VT_PRIMEMANUFACTURERORGID = 26,
    VT_STABILIZER = 28,
    VT_DESIGNLIFE = 30,
    VT_EXPECTEDLIFE = 32,
    VT_INSUREDATLAUNCH = 34,
    VT_LAUNCHMASS = 36,
    VT_DRYMASS = 38,
    VT_CATALOGNUMBER = 40,
    VT_TOTALPAYLOADPOWER = 42,
    VT_CONSTELLATION = 44,
    VT_ORBITCATEGORY = 46,
    VT_ORBITSUBCATEGORY = 48,
    VT_LAUNCHCOST = 50,
    VT_LAUNCHCOSTESTIMATED = 52,
    VT_COSTESTIMATED = 54,
    VT_NEWCOST = 56,
    VT_COMBINEDNEWCOST = 58,
    VT_COMBINEDCOSTESTIMATED = 60,
    VT_INSUREDVALUEATLAUNCH = 62,
    VT_INSUREDVALUELAUNCHESTIMATED = 64,
    VT_ANNUALINSUREDDEPRECIATIONFACTOR = 66,
    VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED = 68,
    VT_INSURANCEPREMIUMATLAUNCH = 70,
    VT_INSURANCEPREMIUMATLAUNCHESTIMATED = 72,
    VT_NUMHUMANS = 74,
    VT_CUBESATDISPENSERTYPE = 76,
    VT_MASSCATEGORY = 78,
    VT_LAUNCHID = 80,
    VT_LAUNCHVEHICLEID = 82,
    VT_LAUNCHPROVIDERFLIGHTNUMBER = 84,
    VT_LAUNCHSITENAME = 86,
    VT_LAUNCHSITEID = 88,
    VT_LAUNCHCOUNTRY = 90,
    VT_LAUNCHPROVIDER = 92,
    VT_LAUNCHPROVIDERCOUNTRY = 94,
    VT_COMMERCIALLAUNCH = 96,
    VT_LAUNCHTYPE = 98,
    VT_LAUNCHCHARACTERISTIC = 100,
    VT_LAUNCHNUMBER = 102,
    VT_LAUNCHDATE = 104,
    VT_LAUNCHDATEREMARKS = 106,
    VT_YOUTUBELAUNCHLINK = 108,
    VT_STATUS = 110,
    VT_OWNER = 112,
    VT_OWNERCOUNTRY = 114,
    VT_OPERATOR_ = 116,
    VT_OPERATORCOUNTRY = 118,
    VT_LEASED = 120,
    VT_ORDERDATE = 122,
    VT_CAPABILITYLOST = 124,
    VT_CAPACITYLOST = 126,
    VT_PRIMARYMISSIONGROUP = 128,
    VT_ADDITIONALMISSIONSGROUPS = 130,
    VT_TOTALCLAIMS = 132,
    VT_TOTALINJURIES = 134,
    VT_TOTALFATALITIES = 136,
    VT_NAMEATLAUNCH = 138,
    VT_BUSID = 140,
    VT_CURRENTAGE = 142,
    VT_LIFELOST = 144,
    VT_GEOPOSITION = 146,
    VT_INSURANCELOSSESTOTAL = 148,
    VT_LAUNCHARRANGER = 150,
    VT_LAUNCHARRANGERCOUNTRY = 152,
    VT_SERIALNUMBER = 154,
    VT_PROGRAMNAME = 156,
    VT_REUSEDHULLNAME = 158,
    VT_DATEOFOBSERVATION = 160,
    VT_LAT = 162,
    VT_LON = 164,
    VT_ALTITUDE = 166,
    VT_COLLISIONRISKMM = 168,
    VT_COLLISIONRISKCM = 170,
    VT_QUANTITY = 172,
    VT_REUSABLEFLIGHTS = 174,
    VT_NOTES = 176,
    VT_INSURANCENOTES = 178,
    VT_LAUNCHNOTES = 180,
    VT_SOURCE = 182,
    VT_ORIGIN = 184,
    VT_ORIGNETWORK = 186,
    VT_DATAMODE = 188,
    VT_CREATEDAT = 190,
    VT_CREATEDBY = 192,
    VT_UPDATEDAT = 194,
    VT_UPDATEDBY = 196,
    VT_SERADATASIGINTPAYLOAD = 198,
    VT_SERADATARADARPAYLOAD = 200,
    VT_SERADATANAVIGATION = 202,
    VT_SERADATAOPTICALPAYLOAD = 204,
    VT_SERADATAEARLYWARNING = 206,
    VT_SCIENTIFIC = 208,
    VT_SERADATACOMMDETAILS = 210,
    VT_ONORBIT = 212
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// UUID of the parent Onorbit record, if available.
  /// Example: /// Example: 503
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Spacecraft name.
  /// Example: /// Example: name
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Description associated with the spacecraft.
  /// Example: /// Example: description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Seradata international number.
  /// Example: /// Example: number
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *intlNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTLNUMBER);
  }
  /// Seradata sector (e.g. Commercial, Military, Civil/Other).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *sector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECTOR);
  }
  /// Apogee in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double apogee() const {
    return GetField<double>(VT_APOGEE, 0.0);
  }
  /// Perigee in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double perigee() const {
    return GetField<double>(VT_PERIGEE, 0.0);
  }
  /// Spacecraft period in minutes.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double period() const {
    return GetField<double>(VT_PERIOD, 0.0);
  }
  /// Seradata provided inclination in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double inclination() const {
    return GetField<double>(VT_INCLINATION, 0.0);
  }
  /// UUID of the prime manufacturer organization, if available.
  /// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *primeManufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIMEMANUFACTURERORGID);
  }
  /// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
  /// Example: /// Example: 3-Axis
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *stabilizer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STABILIZER);
  }
  /// Spacecraft design life in days.
  /// Example: /// Example: 231
  /// Constraints: No constraints specified.
  int32_t designLife() const {
    return GetField<int32_t>(VT_DESIGNLIFE, 0);
  }
  /// Spacecraft expected life in days.
  /// Example: /// Example: 231
  /// Constraints: No constraints specified.
  int32_t expectedLife() const {
    return GetField<int32_t>(VT_EXPECTEDLIFE, 0);
  }
  /// Boolean indicating if the spacecraft was insured at launch.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool insuredAtLaunch() const {
    return GetField<uint8_t>(VT_INSUREDATLAUNCH, 0) != 0;
  }
  /// Mass at launch in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double launchMass() const {
    return GetField<double>(VT_LAUNCHMASS, 0.0);
  }
  /// Mass dry in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double dryMass() const {
    return GetField<double>(VT_DRYMASS, 0.0);
  }
  /// NORAD satellite number if available.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t catalogNumber() const {
    return GetField<int32_t>(VT_CATALOGNUMBER, 0);
  }
  /// Mass dry in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double totalPayloadPower() const {
    return GetField<double>(VT_TOTALPAYLOADPOWER, 0.0);
  }
  /// Spacecraft constellation.
  /// Example: /// Example: GPS
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *constellation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSTELLATION);
  }
  /// Spacecraft orbit category (e.g GEO, LEO, etc).
  /// Example: /// Example: GEO
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *orbitCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORBITCATEGORY);
  }
  /// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
  /// Example: /// Example: Geostationary
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *orbitSubCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORBITSUBCATEGORY);
  }
  /// Cost of launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double launchCost() const {
    return GetField<double>(VT_LAUNCHCOST, 0.0);
  }
  /// Boolean indicating if the spacecraft launch cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool launchCostEstimated() const {
    return GetField<uint8_t>(VT_LAUNCHCOSTESTIMATED, 0) != 0;
  }
  /// Boolean indicating if the spacecraft cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool costEstimated() const {
    return GetField<uint8_t>(VT_COSTESTIMATED, 0) != 0;
  }
  /// Cost of spacecraft at new in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double newCost() const {
    return GetField<double>(VT_NEWCOST, 0.0);
  }
  /// Combined cost of spacecraft at new in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double combinedNewCost() const {
    return GetField<double>(VT_COMBINEDNEWCOST, 0.0);
  }
  /// Boolean indicating if the spacecraft combined new cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool combinedCostEstimated() const {
    return GetField<uint8_t>(VT_COMBINEDCOSTESTIMATED, 0) != 0;
  }
  /// Insured value of spacecraft at launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double insuredValueAtLaunch() const {
    return GetField<double>(VT_INSUREDVALUEATLAUNCH, 0.0);
  }
  /// Boolean indicating if the spacecraft insured value at launch is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool insuredValueLaunchEstimated() const {
    return GetField<uint8_t>(VT_INSUREDVALUELAUNCHESTIMATED, 0) != 0;
  }
  /// Annual insured depreciaion factor as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double annualInsuredDepreciationFactor() const {
    return GetField<double>(VT_ANNUALINSUREDDEPRECIATIONFACTOR, 0.0);
  }
  /// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool annualInsuredDepreciationFactorEstimated() const {
    return GetField<uint8_t>(VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, 0) != 0;
  }
  /// Insurance premium at launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double insurancePremiumAtLaunch() const {
    return GetField<double>(VT_INSURANCEPREMIUMATLAUNCH, 0.0);
  }
  /// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool insurancePremiumAtLaunchEstimated() const {
    return GetField<uint8_t>(VT_INSURANCEPREMIUMATLAUNCHESTIMATED, 0) != 0;
  }
  /// Number of humans carried on spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numHumans() const {
    return GetField<int32_t>(VT_NUMHUMANS, 0);
  }
  /// Cubesat dispenser type.
  /// Example: /// Example: cubesatDispenserType
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *cubesatDispenserType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CUBESATDISPENSERTYPE);
  }
  /// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
  /// Example: /// Example: 2500 - 3500kg  - Large Satellite
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *massCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MASSCATEGORY);
  }
  /// Seradata launch ID.
  /// Example: /// Example: 11573
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *launchId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHID);
  }
  /// Seradata launch ID.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *launchVehicleId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHVEHICLEID);
  }
  /// Seradata launch vehicle family.
  /// Example: /// Example: launchProviderFlightNumber
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchProviderFlightNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHPROVIDERFLIGHTNUMBER);
  }
  /// Launch Site Name.
  /// Example: /// Example: launchSiteName
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchSiteName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHSITENAME);
  }
  /// Seradata Launch Site ID.
  /// Example: /// Example: 28
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *launchSiteId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHSITEID);
  }
  /// Seradata launch country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *launchCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHCOUNTRY);
  }
  /// Seradata launch provider.
  /// Example: /// Example: launchProvider
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *launchProvider() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHPROVIDER);
  }
  /// Seradata launch provider country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *launchProviderCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHPROVIDERCOUNTRY);
  }
  /// Boolean indicating if the launch was commercial.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool commercialLaunch() const {
    return GetField<uint8_t>(VT_COMMERCIALLAUNCH, 0) != 0;
  }
  /// Seradata launch type (e.g. Launched, Future, etc).
  /// Example: /// Example: Future
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *launchType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHTYPE);
  }
  /// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
  /// Example: /// Example: Expendable
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchCharacteristic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHCHARACTERISTIC);
  }
  /// Seradata launch number.
  /// Example: /// Example: FN040
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *launchNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHNUMBER);
  }
  /// Launch date.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *launchDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHDATE);
  }
  /// Seradata remarks on launch date.
  /// Example: /// Example: launchDateRemarks
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchDateRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHDATEREMARKS);
  }
  /// Youtube link of launch.
  /// Example: /// Example: youtubeLaunchLink
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *youtubeLaunchLink() const {
    return GetPointer<const ::flatbuffers::String *>(VT_YOUTUBELAUNCHLINK);
  }
  /// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
  /// Example: /// Example: Inactive - Retired
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// Spacecraft owner name.
  /// Example: /// Example: owner
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *owner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER);
  }
  /// Spacecraft owner country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *ownerCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNERCOUNTRY);
  }
  /// Spacecraft operator name.
  /// Example: /// Example: operator
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *operator_() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATOR_);
  }
  /// Spacecraft operator country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *operatorCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATORCOUNTRY);
  }
  /// Boolean indicating if the spacecraft was leased.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool leased() const {
    return GetField<uint8_t>(VT_LEASED, 0) != 0;
  }
  /// Spacecraft order date.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *orderDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORDERDATE);
  }
  /// Total capability lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double capabilityLost() const {
    return GetField<double>(VT_CAPABILITYLOST, 0.0);
  }
  /// Total capacity lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double capacityLost() const {
    return GetField<double>(VT_CAPACITYLOST, 0.0);
  }
  /// Spacecraft primary mission and group.
  /// Example: /// Example: primaryMissionGroup
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *primaryMissionGroup() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIMARYMISSIONGROUP);
  }
  /// Spacecraft additional missions and groups.
  /// Example: /// Example: additionalMissionsGroups
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *additionalMissionsGroups() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDITIONALMISSIONSGROUPS);
  }
  /// Number of insurance claims for this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t totalClaims() const {
    return GetField<int32_t>(VT_TOTALCLAIMS, 0);
  }
  /// Number of injuries related to this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t totalInjuries() const {
    return GetField<int32_t>(VT_TOTALINJURIES, 0);
  }
  /// Number of fatalities related to this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t totalFatalities() const {
    return GetField<int32_t>(VT_TOTALFATALITIES, 0);
  }
  /// Spacecraft name at launch.
  /// Example: /// Example: nameAtLaunch
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *nameAtLaunch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAMEATLAUNCH);
  }
  /// Spacecraft Bus ID.
  /// Example: /// Example: BUS-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *busId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUSID);
  }
  /// Current age in years.
  /// Example: /// Example: 5.898630136986301
  /// Constraints: No constraints specified.
  double currentAge() const {
    return GetField<double>(VT_CURRENTAGE, 0.0);
  }
  /// Spacecraft life lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double lifeLost() const {
    return GetField<double>(VT_LIFELOST, 0.0);
  }
  /// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -8.23
  /// Constraints: No constraints specified.
  double geoPosition() const {
    return GetField<double>(VT_GEOPOSITION, 0.0);
  }
  /// Spacecraft total insurance losses as a fraction.
  /// Example: /// Example: 0.393
  /// Constraints: No constraints specified.
  double insuranceLossesTotal() const {
    return GetField<double>(VT_INSURANCELOSSESTOTAL, 0.0);
  }
  /// Spacecraft launch arranger.
  /// Example: /// Example: launchArranger
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchArranger() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHARRANGER);
  }
  /// Spacecraft launch arranger country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *launchArrangerCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHARRANGERCOUNTRY);
  }
  /// Spacecraft serial number.
  /// Example: /// Example: serialNumber
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *serialNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERIALNUMBER);
  }
  /// Spacecraft program name.
  /// Example: /// Example: programName
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *programName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROGRAMNAME);
  }
  /// Spacecraft reused hull name.
  /// Example: /// Example: reusedHullName
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *reusedHullName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REUSEDHULLNAME);
  }
  /// Spacecraft date of observation.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *dateOfObservation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEOFOBSERVATION);
  }
  /// Spacecraft latest latitude in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// Spacecraft latest longitude in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Spacecraft latest altitude in km.
  /// Example: /// Example: 36036.6330576414
  /// Constraints: No constraints specified.
  double altitude() const {
    return GetField<double>(VT_ALTITUDE, 0.0);
  }
  /// Spacecraft collision risk 1mm sqm latest.
  /// Example: /// Example: 1.33
  /// Constraints: No constraints specified.
  double collisionRiskMM() const {
    return GetField<double>(VT_COLLISIONRISKMM, 0.0);
  }
  /// Spacecraft collision risk 1cm sqm latest.
  /// Example: /// Example: 1.43
  /// Constraints: No constraints specified.
  double collisionRiskCM() const {
    return GetField<double>(VT_COLLISIONRISKCM, 0.0);
  }
  /// Spacecraft quantity.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t quantity() const {
    return GetField<int32_t>(VT_QUANTITY, 0);
  }
  /// Spacecraft reusable flights.
  /// Example: /// Example: reusableFlights
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *reusableFlights() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REUSABLEFLIGHTS);
  }
  /// Notes on the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Insurance notes for the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *insuranceNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSURANCENOTES);
  }
  /// Insurance notes for the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *launchNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHNOTES);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataSpacecraftDetails_Full_dataMode_Enum dataMode() const {
    return static_cast<SeradataSpacecraftDetails_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataSigIntPayload() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATASIGINTPAYLOAD);
  }
  /// Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataRadarPayload() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATARADARPAYLOAD);
  }
  /// Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataNavigation() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATANAVIGATION);
  }
  /// Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataOpticalPayload() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATAOPTICALPAYLOAD);
  }
  /// Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataEarlyWarning() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATAEARLYWARNING);
  }
  /// Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *scientific() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SCIENTIFIC);
  }
  /// Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataCommDetails() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SERADATACOMMDETAILS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_INTLNUMBER) &&
           verifier.VerifyString(intlNumber()) &&
           VerifyOffset(verifier, VT_SECTOR) &&
           verifier.VerifyString(sector()) &&
           VerifyField<double>(verifier, VT_APOGEE, 8) &&
           VerifyField<double>(verifier, VT_PERIGEE, 8) &&
           VerifyField<double>(verifier, VT_PERIOD, 8) &&
           VerifyField<double>(verifier, VT_INCLINATION, 8) &&
           VerifyOffset(verifier, VT_PRIMEMANUFACTURERORGID) &&
           verifier.VerifyString(primeManufacturerOrgId()) &&
           VerifyOffset(verifier, VT_STABILIZER) &&
           verifier.VerifyString(stabilizer()) &&
           VerifyField<int32_t>(verifier, VT_DESIGNLIFE, 4) &&
           VerifyField<int32_t>(verifier, VT_EXPECTEDLIFE, 4) &&
           VerifyField<uint8_t>(verifier, VT_INSUREDATLAUNCH, 1) &&
           VerifyField<double>(verifier, VT_LAUNCHMASS, 8) &&
           VerifyField<double>(verifier, VT_DRYMASS, 8) &&
           VerifyField<int32_t>(verifier, VT_CATALOGNUMBER, 4) &&
           VerifyField<double>(verifier, VT_TOTALPAYLOADPOWER, 8) &&
           VerifyOffset(verifier, VT_CONSTELLATION) &&
           verifier.VerifyString(constellation()) &&
           VerifyOffset(verifier, VT_ORBITCATEGORY) &&
           verifier.VerifyString(orbitCategory()) &&
           VerifyOffset(verifier, VT_ORBITSUBCATEGORY) &&
           verifier.VerifyString(orbitSubCategory()) &&
           VerifyField<double>(verifier, VT_LAUNCHCOST, 8) &&
           VerifyField<uint8_t>(verifier, VT_LAUNCHCOSTESTIMATED, 1) &&
           VerifyField<uint8_t>(verifier, VT_COSTESTIMATED, 1) &&
           VerifyField<double>(verifier, VT_NEWCOST, 8) &&
           VerifyField<double>(verifier, VT_COMBINEDNEWCOST, 8) &&
           VerifyField<uint8_t>(verifier, VT_COMBINEDCOSTESTIMATED, 1) &&
           VerifyField<double>(verifier, VT_INSUREDVALUEATLAUNCH, 8) &&
           VerifyField<uint8_t>(verifier, VT_INSUREDVALUELAUNCHESTIMATED, 1) &&
           VerifyField<double>(verifier, VT_ANNUALINSUREDDEPRECIATIONFACTOR, 8) &&
           VerifyField<uint8_t>(verifier, VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, 1) &&
           VerifyField<double>(verifier, VT_INSURANCEPREMIUMATLAUNCH, 8) &&
           VerifyField<uint8_t>(verifier, VT_INSURANCEPREMIUMATLAUNCHESTIMATED, 1) &&
           VerifyField<int32_t>(verifier, VT_NUMHUMANS, 4) &&
           VerifyOffset(verifier, VT_CUBESATDISPENSERTYPE) &&
           verifier.VerifyString(cubesatDispenserType()) &&
           VerifyOffset(verifier, VT_MASSCATEGORY) &&
           verifier.VerifyString(massCategory()) &&
           VerifyOffset(verifier, VT_LAUNCHID) &&
           verifier.VerifyString(launchId()) &&
           VerifyOffset(verifier, VT_LAUNCHVEHICLEID) &&
           verifier.VerifyString(launchVehicleId()) &&
           VerifyOffset(verifier, VT_LAUNCHPROVIDERFLIGHTNUMBER) &&
           verifier.VerifyString(launchProviderFlightNumber()) &&
           VerifyOffset(verifier, VT_LAUNCHSITENAME) &&
           verifier.VerifyString(launchSiteName()) &&
           VerifyOffset(verifier, VT_LAUNCHSITEID) &&
           verifier.VerifyString(launchSiteId()) &&
           VerifyOffset(verifier, VT_LAUNCHCOUNTRY) &&
           verifier.VerifyString(launchCountry()) &&
           VerifyOffset(verifier, VT_LAUNCHPROVIDER) &&
           verifier.VerifyString(launchProvider()) &&
           VerifyOffset(verifier, VT_LAUNCHPROVIDERCOUNTRY) &&
           verifier.VerifyString(launchProviderCountry()) &&
           VerifyField<uint8_t>(verifier, VT_COMMERCIALLAUNCH, 1) &&
           VerifyOffset(verifier, VT_LAUNCHTYPE) &&
           verifier.VerifyString(launchType()) &&
           VerifyOffset(verifier, VT_LAUNCHCHARACTERISTIC) &&
           verifier.VerifyString(launchCharacteristic()) &&
           VerifyOffset(verifier, VT_LAUNCHNUMBER) &&
           verifier.VerifyString(launchNumber()) &&
           VerifyOffset(verifier, VT_LAUNCHDATE) &&
           verifier.VerifyString(launchDate()) &&
           VerifyOffset(verifier, VT_LAUNCHDATEREMARKS) &&
           verifier.VerifyString(launchDateRemarks()) &&
           VerifyOffset(verifier, VT_YOUTUBELAUNCHLINK) &&
           verifier.VerifyString(youtubeLaunchLink()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           VerifyOffset(verifier, VT_OWNERCOUNTRY) &&
           verifier.VerifyString(ownerCountry()) &&
           VerifyOffset(verifier, VT_OPERATOR_) &&
           verifier.VerifyString(operator_()) &&
           VerifyOffset(verifier, VT_OPERATORCOUNTRY) &&
           verifier.VerifyString(operatorCountry()) &&
           VerifyField<uint8_t>(verifier, VT_LEASED, 1) &&
           VerifyOffset(verifier, VT_ORDERDATE) &&
           verifier.VerifyString(orderDate()) &&
           VerifyField<double>(verifier, VT_CAPABILITYLOST, 8) &&
           VerifyField<double>(verifier, VT_CAPACITYLOST, 8) &&
           VerifyOffset(verifier, VT_PRIMARYMISSIONGROUP) &&
           verifier.VerifyString(primaryMissionGroup()) &&
           VerifyOffset(verifier, VT_ADDITIONALMISSIONSGROUPS) &&
           verifier.VerifyString(additionalMissionsGroups()) &&
           VerifyField<int32_t>(verifier, VT_TOTALCLAIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_TOTALINJURIES, 4) &&
           VerifyField<int32_t>(verifier, VT_TOTALFATALITIES, 4) &&
           VerifyOffset(verifier, VT_NAMEATLAUNCH) &&
           verifier.VerifyString(nameAtLaunch()) &&
           VerifyOffset(verifier, VT_BUSID) &&
           verifier.VerifyString(busId()) &&
           VerifyField<double>(verifier, VT_CURRENTAGE, 8) &&
           VerifyField<double>(verifier, VT_LIFELOST, 8) &&
           VerifyField<double>(verifier, VT_GEOPOSITION, 8) &&
           VerifyField<double>(verifier, VT_INSURANCELOSSESTOTAL, 8) &&
           VerifyOffset(verifier, VT_LAUNCHARRANGER) &&
           verifier.VerifyString(launchArranger()) &&
           VerifyOffset(verifier, VT_LAUNCHARRANGERCOUNTRY) &&
           verifier.VerifyString(launchArrangerCountry()) &&
           VerifyOffset(verifier, VT_SERIALNUMBER) &&
           verifier.VerifyString(serialNumber()) &&
           VerifyOffset(verifier, VT_PROGRAMNAME) &&
           verifier.VerifyString(programName()) &&
           VerifyOffset(verifier, VT_REUSEDHULLNAME) &&
           verifier.VerifyString(reusedHullName()) &&
           VerifyOffset(verifier, VT_DATEOFOBSERVATION) &&
           verifier.VerifyString(dateOfObservation()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALTITUDE, 8) &&
           VerifyField<double>(verifier, VT_COLLISIONRISKMM, 8) &&
           VerifyField<double>(verifier, VT_COLLISIONRISKCM, 8) &&
           VerifyField<int32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyOffset(verifier, VT_REUSABLEFLIGHTS) &&
           verifier.VerifyString(reusableFlights()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_INSURANCENOTES) &&
           verifier.VerifyString(insuranceNotes()) &&
           VerifyOffset(verifier, VT_LAUNCHNOTES) &&
           verifier.VerifyString(launchNotes()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SERADATASIGINTPAYLOAD) &&
           verifier.VerifyVector(seradataSigIntPayload()) &&
           verifier.VerifyVectorOfStrings(seradataSigIntPayload()) &&
           VerifyOffset(verifier, VT_SERADATARADARPAYLOAD) &&
           verifier.VerifyVector(seradataRadarPayload()) &&
           verifier.VerifyVectorOfStrings(seradataRadarPayload()) &&
           VerifyOffset(verifier, VT_SERADATANAVIGATION) &&
           verifier.VerifyVector(seradataNavigation()) &&
           verifier.VerifyVectorOfStrings(seradataNavigation()) &&
           VerifyOffset(verifier, VT_SERADATAOPTICALPAYLOAD) &&
           verifier.VerifyVector(seradataOpticalPayload()) &&
           verifier.VerifyVectorOfStrings(seradataOpticalPayload()) &&
           VerifyOffset(verifier, VT_SERADATAEARLYWARNING) &&
           verifier.VerifyVector(seradataEarlyWarning()) &&
           verifier.VerifyVectorOfStrings(seradataEarlyWarning()) &&
           VerifyOffset(verifier, VT_SCIENTIFIC) &&
           verifier.VerifyVector(scientific()) &&
           verifier.VerifyVectorOfStrings(scientific()) &&
           VerifyOffset(verifier, VT_SERADATACOMMDETAILS) &&
           verifier.VerifyVector(seradataCommDetails()) &&
           verifier.VerifyVectorOfStrings(seradataCommDetails()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           verifier.EndTable();
  }
};

struct SeradataSpacecraftDetails_FullBuilder {
  typedef SeradataSpacecraftDetails_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ID, id);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_NAME, name);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_DESCRIPTION, description);
  }
  void add_intlNumber(::flatbuffers::Offset<::flatbuffers::String> intlNumber) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_INTLNUMBER, intlNumber);
  }
  void add_sector(::flatbuffers::Offset<::flatbuffers::String> sector) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SECTOR, sector);
  }
  void add_apogee(double apogee) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_APOGEE, apogee, 0.0);
  }
  void add_perigee(double perigee) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_PERIGEE, perigee, 0.0);
  }
  void add_period(double period) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_PERIOD, period, 0.0);
  }
  void add_inclination(double inclination) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_INCLINATION, inclination, 0.0);
  }
  void add_primeManufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> primeManufacturerOrgId) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_PRIMEMANUFACTURERORGID, primeManufacturerOrgId);
  }
  void add_stabilizer(::flatbuffers::Offset<::flatbuffers::String> stabilizer) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_STABILIZER, stabilizer);
  }
  void add_designLife(int32_t designLife) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_DESIGNLIFE, designLife, 0);
  }
  void add_expectedLife(int32_t expectedLife) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_EXPECTEDLIFE, expectedLife, 0);
  }
  void add_insuredAtLaunch(bool insuredAtLaunch) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_INSUREDATLAUNCH, static_cast<uint8_t>(insuredAtLaunch), 0);
  }
  void add_launchMass(double launchMass) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_LAUNCHMASS, launchMass, 0.0);
  }
  void add_dryMass(double dryMass) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_DRYMASS, dryMass, 0.0);
  }
  void add_catalogNumber(int32_t catalogNumber) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_CATALOGNUMBER, catalogNumber, 0);
  }
  void add_totalPayloadPower(double totalPayloadPower) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_TOTALPAYLOADPOWER, totalPayloadPower, 0.0);
  }
  void add_constellation(::flatbuffers::Offset<::flatbuffers::String> constellation) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_CONSTELLATION, constellation);
  }
  void add_orbitCategory(::flatbuffers::Offset<::flatbuffers::String> orbitCategory) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ORBITCATEGORY, orbitCategory);
  }
  void add_orbitSubCategory(::flatbuffers::Offset<::flatbuffers::String> orbitSubCategory) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ORBITSUBCATEGORY, orbitSubCategory);
  }
  void add_launchCost(double launchCost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOST, launchCost, 0.0);
  }
  void add_launchCostEstimated(bool launchCostEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOSTESTIMATED, static_cast<uint8_t>(launchCostEstimated), 0);
  }
  void add_costEstimated(bool costEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_COSTESTIMATED, static_cast<uint8_t>(costEstimated), 0);
  }
  void add_newCost(double newCost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_NEWCOST, newCost, 0.0);
  }
  void add_combinedNewCost(double combinedNewCost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_COMBINEDNEWCOST, combinedNewCost, 0.0);
  }
  void add_combinedCostEstimated(bool combinedCostEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_COMBINEDCOSTESTIMATED, static_cast<uint8_t>(combinedCostEstimated), 0);
  }
  void add_insuredValueAtLaunch(double insuredValueAtLaunch) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUEATLAUNCH, insuredValueAtLaunch, 0.0);
  }
  void add_insuredValueLaunchEstimated(bool insuredValueLaunchEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUELAUNCHESTIMATED, static_cast<uint8_t>(insuredValueLaunchEstimated), 0);
  }
  void add_annualInsuredDepreciationFactor(double annualInsuredDepreciationFactor) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTOR, annualInsuredDepreciationFactor, 0.0);
  }
  void add_annualInsuredDepreciationFactorEstimated(bool annualInsuredDepreciationFactorEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, static_cast<uint8_t>(annualInsuredDepreciationFactorEstimated), 0);
  }
  void add_insurancePremiumAtLaunch(double insurancePremiumAtLaunch) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCH, insurancePremiumAtLaunch, 0.0);
  }
  void add_insurancePremiumAtLaunchEstimated(bool insurancePremiumAtLaunchEstimated) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCHESTIMATED, static_cast<uint8_t>(insurancePremiumAtLaunchEstimated), 0);
  }
  void add_numHumans(int32_t numHumans) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_NUMHUMANS, numHumans, 0);
  }
  void add_cubesatDispenserType(::flatbuffers::Offset<::flatbuffers::String> cubesatDispenserType) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_CUBESATDISPENSERTYPE, cubesatDispenserType);
  }
  void add_massCategory(::flatbuffers::Offset<::flatbuffers::String> massCategory) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_MASSCATEGORY, massCategory);
  }
  void add_launchId(::flatbuffers::Offset<::flatbuffers::String> launchId) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHID, launchId);
  }
  void add_launchVehicleId(::flatbuffers::Offset<::flatbuffers::String> launchVehicleId) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHVEHICLEID, launchVehicleId);
  }
  void add_launchProviderFlightNumber(::flatbuffers::Offset<::flatbuffers::String> launchProviderFlightNumber) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERFLIGHTNUMBER, launchProviderFlightNumber);
  }
  void add_launchSiteName(::flatbuffers::Offset<::flatbuffers::String> launchSiteName) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHSITENAME, launchSiteName);
  }
  void add_launchSiteId(::flatbuffers::Offset<::flatbuffers::String> launchSiteId) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHSITEID, launchSiteId);
  }
  void add_launchCountry(::flatbuffers::Offset<::flatbuffers::String> launchCountry) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHCOUNTRY, launchCountry);
  }
  void add_launchProvider(::flatbuffers::Offset<::flatbuffers::String> launchProvider) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDER, launchProvider);
  }
  void add_launchProviderCountry(::flatbuffers::Offset<::flatbuffers::String> launchProviderCountry) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERCOUNTRY, launchProviderCountry);
  }
  void add_commercialLaunch(bool commercialLaunch) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_COMMERCIALLAUNCH, static_cast<uint8_t>(commercialLaunch), 0);
  }
  void add_launchType(::flatbuffers::Offset<::flatbuffers::String> launchType) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHTYPE, launchType);
  }
  void add_launchCharacteristic(::flatbuffers::Offset<::flatbuffers::String> launchCharacteristic) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHCHARACTERISTIC, launchCharacteristic);
  }
  void add_launchNumber(::flatbuffers::Offset<::flatbuffers::String> launchNumber) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHNUMBER, launchNumber);
  }
  void add_launchDate(::flatbuffers::Offset<::flatbuffers::String> launchDate) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHDATE, launchDate);
  }
  void add_launchDateRemarks(::flatbuffers::Offset<::flatbuffers::String> launchDateRemarks) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHDATEREMARKS, launchDateRemarks);
  }
  void add_youtubeLaunchLink(::flatbuffers::Offset<::flatbuffers::String> youtubeLaunchLink) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_YOUTUBELAUNCHLINK, youtubeLaunchLink);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_STATUS, status);
  }
  void add_owner(::flatbuffers::Offset<::flatbuffers::String> owner) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_OWNER, owner);
  }
  void add_ownerCountry(::flatbuffers::Offset<::flatbuffers::String> ownerCountry) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_OWNERCOUNTRY, ownerCountry);
  }
  void add_operator_(::flatbuffers::Offset<::flatbuffers::String> operator_) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_OPERATOR_, operator_);
  }
  void add_operatorCountry(::flatbuffers::Offset<::flatbuffers::String> operatorCountry) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_OPERATORCOUNTRY, operatorCountry);
  }
  void add_leased(bool leased) {
    fbb_.AddElement<uint8_t>(SeradataSpacecraftDetails_Full::VT_LEASED, static_cast<uint8_t>(leased), 0);
  }
  void add_orderDate(::flatbuffers::Offset<::flatbuffers::String> orderDate) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ORDERDATE, orderDate);
  }
  void add_capabilityLost(double capabilityLost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_CAPABILITYLOST, capabilityLost, 0.0);
  }
  void add_capacityLost(double capacityLost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_CAPACITYLOST, capacityLost, 0.0);
  }
  void add_primaryMissionGroup(::flatbuffers::Offset<::flatbuffers::String> primaryMissionGroup) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_PRIMARYMISSIONGROUP, primaryMissionGroup);
  }
  void add_additionalMissionsGroups(::flatbuffers::Offset<::flatbuffers::String> additionalMissionsGroups) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ADDITIONALMISSIONSGROUPS, additionalMissionsGroups);
  }
  void add_totalClaims(int32_t totalClaims) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_TOTALCLAIMS, totalClaims, 0);
  }
  void add_totalInjuries(int32_t totalInjuries) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_TOTALINJURIES, totalInjuries, 0);
  }
  void add_totalFatalities(int32_t totalFatalities) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_TOTALFATALITIES, totalFatalities, 0);
  }
  void add_nameAtLaunch(::flatbuffers::Offset<::flatbuffers::String> nameAtLaunch) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_NAMEATLAUNCH, nameAtLaunch);
  }
  void add_busId(::flatbuffers::Offset<::flatbuffers::String> busId) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_BUSID, busId);
  }
  void add_currentAge(double currentAge) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_CURRENTAGE, currentAge, 0.0);
  }
  void add_lifeLost(double lifeLost) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_LIFELOST, lifeLost, 0.0);
  }
  void add_geoPosition(double geoPosition) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_GEOPOSITION, geoPosition, 0.0);
  }
  void add_insuranceLossesTotal(double insuranceLossesTotal) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_INSURANCELOSSESTOTAL, insuranceLossesTotal, 0.0);
  }
  void add_launchArranger(::flatbuffers::Offset<::flatbuffers::String> launchArranger) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGER, launchArranger);
  }
  void add_launchArrangerCountry(::flatbuffers::Offset<::flatbuffers::String> launchArrangerCountry) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGERCOUNTRY, launchArrangerCountry);
  }
  void add_serialNumber(::flatbuffers::Offset<::flatbuffers::String> serialNumber) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERIALNUMBER, serialNumber);
  }
  void add_programName(::flatbuffers::Offset<::flatbuffers::String> programName) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_PROGRAMNAME, programName);
  }
  void add_reusedHullName(::flatbuffers::Offset<::flatbuffers::String> reusedHullName) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_REUSEDHULLNAME, reusedHullName);
  }
  void add_dateOfObservation(::flatbuffers::Offset<::flatbuffers::String> dateOfObservation) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_DATEOFOBSERVATION, dateOfObservation);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_LON, lon, 0.0);
  }
  void add_altitude(double altitude) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_ALTITUDE, altitude, 0.0);
  }
  void add_collisionRiskMM(double collisionRiskMM) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKMM, collisionRiskMM, 0.0);
  }
  void add_collisionRiskCM(double collisionRiskCM) {
    fbb_.AddElement<double>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKCM, collisionRiskCM, 0.0);
  }
  void add_quantity(int32_t quantity) {
    fbb_.AddElement<int32_t>(SeradataSpacecraftDetails_Full::VT_QUANTITY, quantity, 0);
  }
  void add_reusableFlights(::flatbuffers::Offset<::flatbuffers::String> reusableFlights) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_REUSABLEFLIGHTS, reusableFlights);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_NOTES, notes);
  }
  void add_insuranceNotes(::flatbuffers::Offset<::flatbuffers::String> insuranceNotes) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_INSURANCENOTES, insuranceNotes);
  }
  void add_launchNotes(::flatbuffers::Offset<::flatbuffers::String> launchNotes) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_LAUNCHNOTES, launchNotes);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataSpacecraftDetails_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataSpacecraftDetails_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_seradataSigIntPayload(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataSigIntPayload) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATASIGINTPAYLOAD, seradataSigIntPayload);
  }
  void add_seradataRadarPayload(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataRadarPayload) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATARADARPAYLOAD, seradataRadarPayload);
  }
  void add_seradataNavigation(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataNavigation) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATANAVIGATION, seradataNavigation);
  }
  void add_seradataOpticalPayload(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataOpticalPayload) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATAOPTICALPAYLOAD, seradataOpticalPayload);
  }
  void add_seradataEarlyWarning(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataEarlyWarning) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATAEARLYWARNING, seradataEarlyWarning);
  }
  void add_scientific(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> scientific) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SCIENTIFIC, scientific);
  }
  void add_seradataCommDetails(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataCommDetails) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_SERADATACOMMDETAILS, seradataCommDetails);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(SeradataSpacecraftDetails_Full::VT_ONORBIT, onOrbit);
  }
  explicit SeradataSpacecraftDetails_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataSpacecraftDetails_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataSpacecraftDetails_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataSpacecraftDetails_Full> CreateSeradataSpacecraftDetails_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> intlNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sector = 0,
    double apogee = 0.0,
    double perigee = 0.0,
    double period = 0.0,
    double inclination = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> primeManufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stabilizer = 0,
    int32_t designLife = 0,
    int32_t expectedLife = 0,
    bool insuredAtLaunch = false,
    double launchMass = 0.0,
    double dryMass = 0.0,
    int32_t catalogNumber = 0,
    double totalPayloadPower = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> constellation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> orbitCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> orbitSubCategory = 0,
    double launchCost = 0.0,
    bool launchCostEstimated = false,
    bool costEstimated = false,
    double newCost = 0.0,
    double combinedNewCost = 0.0,
    bool combinedCostEstimated = false,
    double insuredValueAtLaunch = 0.0,
    bool insuredValueLaunchEstimated = false,
    double annualInsuredDepreciationFactor = 0.0,
    bool annualInsuredDepreciationFactorEstimated = false,
    double insurancePremiumAtLaunch = 0.0,
    bool insurancePremiumAtLaunchEstimated = false,
    int32_t numHumans = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cubesatDispenserType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> massCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchVehicleId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchProviderFlightNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchSiteName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchSiteId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchCountry = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchProvider = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchProviderCountry = 0,
    bool commercialLaunch = false,
    ::flatbuffers::Offset<::flatbuffers::String> launchType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchCharacteristic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchDateRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> youtubeLaunchLink = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> owner = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ownerCountry = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operator_ = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operatorCountry = 0,
    bool leased = false,
    ::flatbuffers::Offset<::flatbuffers::String> orderDate = 0,
    double capabilityLost = 0.0,
    double capacityLost = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> primaryMissionGroup = 0,
    ::flatbuffers::Offset<::flatbuffers::String> additionalMissionsGroups = 0,
    int32_t totalClaims = 0,
    int32_t totalInjuries = 0,
    int32_t totalFatalities = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nameAtLaunch = 0,
    ::flatbuffers::Offset<::flatbuffers::String> busId = 0,
    double currentAge = 0.0,
    double lifeLost = 0.0,
    double geoPosition = 0.0,
    double insuranceLossesTotal = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> launchArranger = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchArrangerCountry = 0,
    ::flatbuffers::Offset<::flatbuffers::String> serialNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> programName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reusedHullName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateOfObservation = 0,
    double lat = 0.0,
    double lon = 0.0,
    double altitude = 0.0,
    double collisionRiskMM = 0.0,
    double collisionRiskCM = 0.0,
    int32_t quantity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reusableFlights = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> insuranceNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataSpacecraftDetails_Full_dataMode_Enum dataMode = SeradataSpacecraftDetails_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataSigIntPayload = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataRadarPayload = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataNavigation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataOpticalPayload = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataEarlyWarning = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> scientific = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seradataCommDetails = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0) {
  SeradataSpacecraftDetails_FullBuilder builder_(_fbb);
  builder_.add_collisionRiskCM(collisionRiskCM);
  builder_.add_collisionRiskMM(collisionRiskMM);
  builder_.add_altitude(altitude);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_insuranceLossesTotal(insuranceLossesTotal);
  builder_.add_geoPosition(geoPosition);
  builder_.add_lifeLost(lifeLost);
  builder_.add_currentAge(currentAge);
  builder_.add_capacityLost(capacityLost);
  builder_.add_capabilityLost(capabilityLost);
  builder_.add_insurancePremiumAtLaunch(insurancePremiumAtLaunch);
  builder_.add_annualInsuredDepreciationFactor(annualInsuredDepreciationFactor);
  builder_.add_insuredValueAtLaunch(insuredValueAtLaunch);
  builder_.add_combinedNewCost(combinedNewCost);
  builder_.add_newCost(newCost);
  builder_.add_launchCost(launchCost);
  builder_.add_totalPayloadPower(totalPayloadPower);
  builder_.add_dryMass(dryMass);
  builder_.add_launchMass(launchMass);
  builder_.add_inclination(inclination);
  builder_.add_period(period);
  builder_.add_perigee(perigee);
  builder_.add_apogee(apogee);
  builder_.add_onOrbit(onOrbit);
  builder_.add_seradataCommDetails(seradataCommDetails);
  builder_.add_scientific(scientific);
  builder_.add_seradataEarlyWarning(seradataEarlyWarning);
  builder_.add_seradataOpticalPayload(seradataOpticalPayload);
  builder_.add_seradataNavigation(seradataNavigation);
  builder_.add_seradataRadarPayload(seradataRadarPayload);
  builder_.add_seradataSigIntPayload(seradataSigIntPayload);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_launchNotes(launchNotes);
  builder_.add_insuranceNotes(insuranceNotes);
  builder_.add_notes(notes);
  builder_.add_reusableFlights(reusableFlights);
  builder_.add_quantity(quantity);
  builder_.add_dateOfObservation(dateOfObservation);
  builder_.add_reusedHullName(reusedHullName);
  builder_.add_programName(programName);
  builder_.add_serialNumber(serialNumber);
  builder_.add_launchArrangerCountry(launchArrangerCountry);
  builder_.add_launchArranger(launchArranger);
  builder_.add_busId(busId);
  builder_.add_nameAtLaunch(nameAtLaunch);
  builder_.add_totalFatalities(totalFatalities);
  builder_.add_totalInjuries(totalInjuries);
  builder_.add_totalClaims(totalClaims);
  builder_.add_additionalMissionsGroups(additionalMissionsGroups);
  builder_.add_primaryMissionGroup(primaryMissionGroup);
  builder_.add_orderDate(orderDate);
  builder_.add_operatorCountry(operatorCountry);
  builder_.add_operator_(operator_);
  builder_.add_ownerCountry(ownerCountry);
  builder_.add_owner(owner);
  builder_.add_status(status);
  builder_.add_youtubeLaunchLink(youtubeLaunchLink);
  builder_.add_launchDateRemarks(launchDateRemarks);
  builder_.add_launchDate(launchDate);
  builder_.add_launchNumber(launchNumber);
  builder_.add_launchCharacteristic(launchCharacteristic);
  builder_.add_launchType(launchType);
  builder_.add_launchProviderCountry(launchProviderCountry);
  builder_.add_launchProvider(launchProvider);
  builder_.add_launchCountry(launchCountry);
  builder_.add_launchSiteId(launchSiteId);
  builder_.add_launchSiteName(launchSiteName);
  builder_.add_launchProviderFlightNumber(launchProviderFlightNumber);
  builder_.add_launchVehicleId(launchVehicleId);
  builder_.add_launchId(launchId);
  builder_.add_massCategory(massCategory);
  builder_.add_cubesatDispenserType(cubesatDispenserType);
  builder_.add_numHumans(numHumans);
  builder_.add_orbitSubCategory(orbitSubCategory);
  builder_.add_orbitCategory(orbitCategory);
  builder_.add_constellation(constellation);
  builder_.add_catalogNumber(catalogNumber);
  builder_.add_expectedLife(expectedLife);
  builder_.add_designLife(designLife);
  builder_.add_stabilizer(stabilizer);
  builder_.add_primeManufacturerOrgId(primeManufacturerOrgId);
  builder_.add_sector(sector);
  builder_.add_intlNumber(intlNumber);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_leased(leased);
  builder_.add_commercialLaunch(commercialLaunch);
  builder_.add_insurancePremiumAtLaunchEstimated(insurancePremiumAtLaunchEstimated);
  builder_.add_annualInsuredDepreciationFactorEstimated(annualInsuredDepreciationFactorEstimated);
  builder_.add_insuredValueLaunchEstimated(insuredValueLaunchEstimated);
  builder_.add_combinedCostEstimated(combinedCostEstimated);
  builder_.add_costEstimated(costEstimated);
  builder_.add_launchCostEstimated(launchCostEstimated);
  builder_.add_insuredAtLaunch(insuredAtLaunch);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataSpacecraftDetails_Full> CreateSeradataSpacecraftDetails_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOnOrbit = nullptr,
    const char *classificationMarking = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    const char *intlNumber = nullptr,
    const char *sector = nullptr,
    double apogee = 0.0,
    double perigee = 0.0,
    double period = 0.0,
    double inclination = 0.0,
    const char *primeManufacturerOrgId = nullptr,
    const char *stabilizer = nullptr,
    int32_t designLife = 0,
    int32_t expectedLife = 0,
    bool insuredAtLaunch = false,
    double launchMass = 0.0,
    double dryMass = 0.0,
    int32_t catalogNumber = 0,
    double totalPayloadPower = 0.0,
    const char *constellation = nullptr,
    const char *orbitCategory = nullptr,
    const char *orbitSubCategory = nullptr,
    double launchCost = 0.0,
    bool launchCostEstimated = false,
    bool costEstimated = false,
    double newCost = 0.0,
    double combinedNewCost = 0.0,
    bool combinedCostEstimated = false,
    double insuredValueAtLaunch = 0.0,
    bool insuredValueLaunchEstimated = false,
    double annualInsuredDepreciationFactor = 0.0,
    bool annualInsuredDepreciationFactorEstimated = false,
    double insurancePremiumAtLaunch = 0.0,
    bool insurancePremiumAtLaunchEstimated = false,
    int32_t numHumans = 0,
    const char *cubesatDispenserType = nullptr,
    const char *massCategory = nullptr,
    const char *launchId = nullptr,
    const char *launchVehicleId = nullptr,
    const char *launchProviderFlightNumber = nullptr,
    const char *launchSiteName = nullptr,
    const char *launchSiteId = nullptr,
    const char *launchCountry = nullptr,
    const char *launchProvider = nullptr,
    const char *launchProviderCountry = nullptr,
    bool commercialLaunch = false,
    const char *launchType = nullptr,
    const char *launchCharacteristic = nullptr,
    const char *launchNumber = nullptr,
    const char *launchDate = nullptr,
    const char *launchDateRemarks = nullptr,
    const char *youtubeLaunchLink = nullptr,
    const char *status = nullptr,
    const char *owner = nullptr,
    const char *ownerCountry = nullptr,
    const char *operator_ = nullptr,
    const char *operatorCountry = nullptr,
    bool leased = false,
    const char *orderDate = nullptr,
    double capabilityLost = 0.0,
    double capacityLost = 0.0,
    const char *primaryMissionGroup = nullptr,
    const char *additionalMissionsGroups = nullptr,
    int32_t totalClaims = 0,
    int32_t totalInjuries = 0,
    int32_t totalFatalities = 0,
    const char *nameAtLaunch = nullptr,
    const char *busId = nullptr,
    double currentAge = 0.0,
    double lifeLost = 0.0,
    double geoPosition = 0.0,
    double insuranceLossesTotal = 0.0,
    const char *launchArranger = nullptr,
    const char *launchArrangerCountry = nullptr,
    const char *serialNumber = nullptr,
    const char *programName = nullptr,
    const char *reusedHullName = nullptr,
    const char *dateOfObservation = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double altitude = 0.0,
    double collisionRiskMM = 0.0,
    double collisionRiskCM = 0.0,
    int32_t quantity = 0,
    const char *reusableFlights = nullptr,
    const char *notes = nullptr,
    const char *insuranceNotes = nullptr,
    const char *launchNotes = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataSpacecraftDetails_Full_dataMode_Enum dataMode = SeradataSpacecraftDetails_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataSigIntPayload = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataRadarPayload = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataNavigation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataOpticalPayload = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataEarlyWarning = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *scientific = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seradataCommDetails = nullptr,
    const char *onOrbit = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto intlNumber__ = intlNumber ? _fbb.CreateString(intlNumber) : 0;
  auto sector__ = sector ? _fbb.CreateString(sector) : 0;
  auto primeManufacturerOrgId__ = primeManufacturerOrgId ? _fbb.CreateString(primeManufacturerOrgId) : 0;
  auto stabilizer__ = stabilizer ? _fbb.CreateString(stabilizer) : 0;
  auto constellation__ = constellation ? _fbb.CreateString(constellation) : 0;
  auto orbitCategory__ = orbitCategory ? _fbb.CreateString(orbitCategory) : 0;
  auto orbitSubCategory__ = orbitSubCategory ? _fbb.CreateString(orbitSubCategory) : 0;
  auto cubesatDispenserType__ = cubesatDispenserType ? _fbb.CreateString(cubesatDispenserType) : 0;
  auto massCategory__ = massCategory ? _fbb.CreateString(massCategory) : 0;
  auto launchId__ = launchId ? _fbb.CreateString(launchId) : 0;
  auto launchVehicleId__ = launchVehicleId ? _fbb.CreateString(launchVehicleId) : 0;
  auto launchProviderFlightNumber__ = launchProviderFlightNumber ? _fbb.CreateString(launchProviderFlightNumber) : 0;
  auto launchSiteName__ = launchSiteName ? _fbb.CreateString(launchSiteName) : 0;
  auto launchSiteId__ = launchSiteId ? _fbb.CreateString(launchSiteId) : 0;
  auto launchCountry__ = launchCountry ? _fbb.CreateString(launchCountry) : 0;
  auto launchProvider__ = launchProvider ? _fbb.CreateString(launchProvider) : 0;
  auto launchProviderCountry__ = launchProviderCountry ? _fbb.CreateString(launchProviderCountry) : 0;
  auto launchType__ = launchType ? _fbb.CreateString(launchType) : 0;
  auto launchCharacteristic__ = launchCharacteristic ? _fbb.CreateString(launchCharacteristic) : 0;
  auto launchNumber__ = launchNumber ? _fbb.CreateString(launchNumber) : 0;
  auto launchDate__ = launchDate ? _fbb.CreateString(launchDate) : 0;
  auto launchDateRemarks__ = launchDateRemarks ? _fbb.CreateString(launchDateRemarks) : 0;
  auto youtubeLaunchLink__ = youtubeLaunchLink ? _fbb.CreateString(youtubeLaunchLink) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto owner__ = owner ? _fbb.CreateString(owner) : 0;
  auto ownerCountry__ = ownerCountry ? _fbb.CreateString(ownerCountry) : 0;
  auto operator___ = operator_ ? _fbb.CreateString(operator_) : 0;
  auto operatorCountry__ = operatorCountry ? _fbb.CreateString(operatorCountry) : 0;
  auto orderDate__ = orderDate ? _fbb.CreateString(orderDate) : 0;
  auto primaryMissionGroup__ = primaryMissionGroup ? _fbb.CreateString(primaryMissionGroup) : 0;
  auto additionalMissionsGroups__ = additionalMissionsGroups ? _fbb.CreateString(additionalMissionsGroups) : 0;
  auto nameAtLaunch__ = nameAtLaunch ? _fbb.CreateString(nameAtLaunch) : 0;
  auto busId__ = busId ? _fbb.CreateString(busId) : 0;
  auto launchArranger__ = launchArranger ? _fbb.CreateString(launchArranger) : 0;
  auto launchArrangerCountry__ = launchArrangerCountry ? _fbb.CreateString(launchArrangerCountry) : 0;
  auto serialNumber__ = serialNumber ? _fbb.CreateString(serialNumber) : 0;
  auto programName__ = programName ? _fbb.CreateString(programName) : 0;
  auto reusedHullName__ = reusedHullName ? _fbb.CreateString(reusedHullName) : 0;
  auto dateOfObservation__ = dateOfObservation ? _fbb.CreateString(dateOfObservation) : 0;
  auto reusableFlights__ = reusableFlights ? _fbb.CreateString(reusableFlights) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto insuranceNotes__ = insuranceNotes ? _fbb.CreateString(insuranceNotes) : 0;
  auto launchNotes__ = launchNotes ? _fbb.CreateString(launchNotes) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto seradataSigIntPayload__ = seradataSigIntPayload ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataSigIntPayload) : 0;
  auto seradataRadarPayload__ = seradataRadarPayload ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataRadarPayload) : 0;
  auto seradataNavigation__ = seradataNavigation ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataNavigation) : 0;
  auto seradataOpticalPayload__ = seradataOpticalPayload ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataOpticalPayload) : 0;
  auto seradataEarlyWarning__ = seradataEarlyWarning ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataEarlyWarning) : 0;
  auto scientific__ = scientific ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*scientific) : 0;
  auto seradataCommDetails__ = seradataCommDetails ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seradataCommDetails) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  return CreateSeradataSpacecraftDetails_Full(
      _fbb,
      id__,
      idOnOrbit__,
      classificationMarking__,
      name__,
      description__,
      intlNumber__,
      sector__,
      apogee,
      perigee,
      period,
      inclination,
      primeManufacturerOrgId__,
      stabilizer__,
      designLife,
      expectedLife,
      insuredAtLaunch,
      launchMass,
      dryMass,
      catalogNumber,
      totalPayloadPower,
      constellation__,
      orbitCategory__,
      orbitSubCategory__,
      launchCost,
      launchCostEstimated,
      costEstimated,
      newCost,
      combinedNewCost,
      combinedCostEstimated,
      insuredValueAtLaunch,
      insuredValueLaunchEstimated,
      annualInsuredDepreciationFactor,
      annualInsuredDepreciationFactorEstimated,
      insurancePremiumAtLaunch,
      insurancePremiumAtLaunchEstimated,
      numHumans,
      cubesatDispenserType__,
      massCategory__,
      launchId__,
      launchVehicleId__,
      launchProviderFlightNumber__,
      launchSiteName__,
      launchSiteId__,
      launchCountry__,
      launchProvider__,
      launchProviderCountry__,
      commercialLaunch,
      launchType__,
      launchCharacteristic__,
      launchNumber__,
      launchDate__,
      launchDateRemarks__,
      youtubeLaunchLink__,
      status__,
      owner__,
      ownerCountry__,
      operator___,
      operatorCountry__,
      leased,
      orderDate__,
      capabilityLost,
      capacityLost,
      primaryMissionGroup__,
      additionalMissionsGroups__,
      totalClaims,
      totalInjuries,
      totalFatalities,
      nameAtLaunch__,
      busId__,
      currentAge,
      lifeLost,
      geoPosition,
      insuranceLossesTotal,
      launchArranger__,
      launchArrangerCountry__,
      serialNumber__,
      programName__,
      reusedHullName__,
      dateOfObservation__,
      lat,
      lon,
      altitude,
      collisionRiskMM,
      collisionRiskCM,
      quantity,
      reusableFlights__,
      notes__,
      insuranceNotes__,
      launchNotes__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      seradataSigIntPayload__,
      seradataRadarPayload__,
      seradataNavigation__,
      seradataOpticalPayload__,
      seradataEarlyWarning__,
      scientific__,
      seradataCommDetails__,
      onOrbit__);
}

inline const SeradataSpacecraftDetails_Full *GetSeradataSpacecraftDetails_Full(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataSpacecraftDetails_Full>(buf);
}

inline const SeradataSpacecraftDetails_Full *GetSizePrefixedSeradataSpacecraftDetails_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataSpacecraftDetails_Full>(buf);
}

inline const char *SeradataSpacecraftDetails_FullIdentifier() {
  return "SERA";
}

inline bool SeradataSpacecraftDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataSpacecraftDetails_FullIdentifier());
}

inline bool SizePrefixedSeradataSpacecraftDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataSpacecraftDetails_FullIdentifier(), true);
}

inline bool VerifySeradataSpacecraftDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataSpacecraftDetails_Full>(SeradataSpacecraftDetails_FullIdentifier());
}

inline bool VerifySizePrefixedSeradataSpacecraftDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataSpacecraftDetails_Full>(SeradataSpacecraftDetails_FullIdentifier());
}

inline void FinishSeradataSpacecraftDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataSpacecraftDetails_Full> root) {
  fbb.Finish(root, SeradataSpacecraftDetails_FullIdentifier());
}

inline void FinishSizePrefixedSeradataSpacecraftDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataSpacecraftDetails_Full> root) {
  fbb.FinishSizePrefixed(root, SeradataSpacecraftDetails_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
