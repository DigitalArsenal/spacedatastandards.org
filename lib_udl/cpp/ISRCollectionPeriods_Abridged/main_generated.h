// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionPeriods_Abridged;
struct ISRCollectionPeriods_AbridgedBuilder;

/// /// Tasking collection periods.
struct ISRCollectionPeriods_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionPeriods_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLANNED = 4,
    VT_ACTUAL = 6
  };
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *planned() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNED);
  }
  /// Actual start and stop for the collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *actual() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACTUAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLANNED) &&
           verifier.VerifyString(planned()) &&
           VerifyOffset(verifier, VT_ACTUAL) &&
           verifier.VerifyVector(actual()) &&
           verifier.VerifyVectorOfStrings(actual()) &&
           verifier.EndTable();
  }
};

struct ISRCollectionPeriods_AbridgedBuilder {
  typedef ISRCollectionPeriods_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_planned(::flatbuffers::Offset<::flatbuffers::String> planned) {
    fbb_.AddOffset(ISRCollectionPeriods_Abridged::VT_PLANNED, planned);
  }
  void add_actual(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actual) {
    fbb_.AddOffset(ISRCollectionPeriods_Abridged::VT_ACTUAL, actual);
  }
  explicit ISRCollectionPeriods_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionPeriods_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionPeriods_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionPeriods_Abridged> CreateISRCollectionPeriods_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> planned = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actual = 0) {
  ISRCollectionPeriods_AbridgedBuilder builder_(_fbb);
  builder_.add_actual(actual);
  builder_.add_planned(planned);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionPeriods_Abridged> CreateISRCollectionPeriods_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *planned = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *actual = nullptr) {
  auto planned__ = planned ? _fbb.CreateString(planned) : 0;
  auto actual__ = actual ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*actual) : 0;
  return CreateISRCollectionPeriods_Abridged(
      _fbb,
      planned__,
      actual__);
}

inline const ISRCollectionPeriods_Abridged *GetISRCollectionPeriods_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionPeriods_Abridged>(buf);
}

inline const ISRCollectionPeriods_Abridged *GetSizePrefixedISRCollectionPeriods_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionPeriods_Abridged>(buf);
}

inline const char *ISRCollectionPeriods_AbridgedIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionPeriods_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPeriods_AbridgedIdentifier());
}

inline bool SizePrefixedISRCollectionPeriods_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPeriods_AbridgedIdentifier(), true);
}

inline bool VerifyISRCollectionPeriods_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionPeriods_Abridged>(ISRCollectionPeriods_AbridgedIdentifier());
}

inline bool VerifySizePrefixedISRCollectionPeriods_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionPeriods_Abridged>(ISRCollectionPeriods_AbridgedIdentifier());
}

inline void FinishISRCollectionPeriods_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPeriods_Abridged> root) {
  fbb.Finish(root, ISRCollectionPeriods_AbridgedIdentifier());
}

inline void FinishSizePrefixedISRCollectionPeriods_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPeriods_Abridged> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionPeriods_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
