// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiPlatformLocation_Ingest;
struct MtiPlatformLocation_IngestBuilder;

/// /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
struct MtiPlatformLocation_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiPlatformLocation_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_L1 = 4,
    VT_L2 = 6,
    VT_L3 = 8,
    VT_L4 = 10,
    VT_L5 = 12,
    VT_L6 = 14,
    VT_L7 = 16,
    VT_PLATLOCTS = 18
  };
  /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  int64_t l1() const {
    return GetField<int64_t>(VT_L1, 0);
  }
  /// North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double l2() const {
    return GetField<double>(VT_L2, 0.0);
  }
  /// East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double l3() const {
    return GetField<double>(VT_L3, 0.0);
  }
  /// Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
  /// Example: /// Example: 45
  /// Constraints: No constraints specified.
  int32_t l4() const {
    return GetField<int32_t>(VT_L4, 0);
  }
  /// Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double l5() const {
    return GetField<double>(VT_L5, 0.0);
  }
  /// Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  int32_t l6() const {
    return GetField<int32_t>(VT_L6, 0);
  }
  /// Velocity of the platform in the vertical direction, expressed as decimeters per second.
  /// Example: /// Example: 82
  /// Constraints: No constraints specified.
  int32_t l7() const {
    return GetField<int32_t>(VT_L7, 0);
  }
  /// Platform location timestamp in ISO8601 UTC format.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *platlocts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLATLOCTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_L1, 8) &&
           VerifyField<double>(verifier, VT_L2, 8) &&
           VerifyField<double>(verifier, VT_L3, 8) &&
           VerifyField<int32_t>(verifier, VT_L4, 4) &&
           VerifyField<double>(verifier, VT_L5, 8) &&
           VerifyField<int32_t>(verifier, VT_L6, 4) &&
           VerifyField<int32_t>(verifier, VT_L7, 4) &&
           VerifyOffset(verifier, VT_PLATLOCTS) &&
           verifier.VerifyString(platlocts()) &&
           verifier.EndTable();
  }
};

struct MtiPlatformLocation_IngestBuilder {
  typedef MtiPlatformLocation_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_l1(int64_t l1) {
    fbb_.AddElement<int64_t>(MtiPlatformLocation_Ingest::VT_L1, l1, 0);
  }
  void add_l2(double l2) {
    fbb_.AddElement<double>(MtiPlatformLocation_Ingest::VT_L2, l2, 0.0);
  }
  void add_l3(double l3) {
    fbb_.AddElement<double>(MtiPlatformLocation_Ingest::VT_L3, l3, 0.0);
  }
  void add_l4(int32_t l4) {
    fbb_.AddElement<int32_t>(MtiPlatformLocation_Ingest::VT_L4, l4, 0);
  }
  void add_l5(double l5) {
    fbb_.AddElement<double>(MtiPlatformLocation_Ingest::VT_L5, l5, 0.0);
  }
  void add_l6(int32_t l6) {
    fbb_.AddElement<int32_t>(MtiPlatformLocation_Ingest::VT_L6, l6, 0);
  }
  void add_l7(int32_t l7) {
    fbb_.AddElement<int32_t>(MtiPlatformLocation_Ingest::VT_L7, l7, 0);
  }
  void add_platlocts(::flatbuffers::Offset<::flatbuffers::String> platlocts) {
    fbb_.AddOffset(MtiPlatformLocation_Ingest::VT_PLATLOCTS, platlocts);
  }
  explicit MtiPlatformLocation_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiPlatformLocation_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiPlatformLocation_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiPlatformLocation_Ingest> CreateMtiPlatformLocation_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t l1 = 0,
    double l2 = 0.0,
    double l3 = 0.0,
    int32_t l4 = 0,
    double l5 = 0.0,
    int32_t l6 = 0,
    int32_t l7 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> platlocts = 0) {
  MtiPlatformLocation_IngestBuilder builder_(_fbb);
  builder_.add_l5(l5);
  builder_.add_l3(l3);
  builder_.add_l2(l2);
  builder_.add_l1(l1);
  builder_.add_platlocts(platlocts);
  builder_.add_l7(l7);
  builder_.add_l6(l6);
  builder_.add_l4(l4);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiPlatformLocation_Ingest> CreateMtiPlatformLocation_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t l1 = 0,
    double l2 = 0.0,
    double l3 = 0.0,
    int32_t l4 = 0,
    double l5 = 0.0,
    int32_t l6 = 0,
    int32_t l7 = 0,
    const char *platlocts = nullptr) {
  auto platlocts__ = platlocts ? _fbb.CreateString(platlocts) : 0;
  return CreateMtiPlatformLocation_Ingest(
      _fbb,
      l1,
      l2,
      l3,
      l4,
      l5,
      l6,
      l7,
      platlocts__);
}

inline const MtiPlatformLocation_Ingest *GetMtiPlatformLocation_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<MtiPlatformLocation_Ingest>(buf);
}

inline const MtiPlatformLocation_Ingest *GetSizePrefixedMtiPlatformLocation_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiPlatformLocation_Ingest>(buf);
}

inline const char *MtiPlatformLocation_IngestIdentifier() {
  return "MTIP";
}

inline bool MtiPlatformLocation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiPlatformLocation_IngestIdentifier());
}

inline bool SizePrefixedMtiPlatformLocation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiPlatformLocation_IngestIdentifier(), true);
}

inline bool VerifyMtiPlatformLocation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiPlatformLocation_Ingest>(MtiPlatformLocation_IngestIdentifier());
}

inline bool VerifySizePrefixedMtiPlatformLocation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiPlatformLocation_Ingest>(MtiPlatformLocation_IngestIdentifier());
}

inline void FinishMtiPlatformLocation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiPlatformLocation_Ingest> root) {
  fbb.Finish(root, MtiPlatformLocation_IngestIdentifier());
}

inline void FinishSizePrefixedMtiPlatformLocation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiPlatformLocation_Ingest> root) {
  fbb.FinishSizePrefixed(root, MtiPlatformLocation_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
