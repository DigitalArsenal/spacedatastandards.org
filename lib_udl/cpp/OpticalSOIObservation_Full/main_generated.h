// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OpticalSOIObservation_Full;
struct OpticalSOIObservation_FullBuilder;

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
struct OpticalSOIObservation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OpticalSOIObservation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBSTARTTIME = 4,
    VT_INTENSITYTIMES = 6,
    VT_CURRENTSPECTRALFILTERNUM = 8,
    VT_EXPDURATION = 10,
    VT_INTENSITIES = 12,
    VT_EXTINCTIONCOEFFS = 14,
    VT_EXTINCTIONCOEFFSUNC = 16,
    VT_SKYBGS = 18,
    VT_LOCALSKYBGS = 20,
    VT_LOCALSKYBGSUNC = 22,
    VT_NUMDETECTEDSTARS = 24,
    VT_NUMCORRELATEDSTARS = 26,
    VT_ZEROPOINTS = 28,
    VT_RAS = 30,
    VT_DECLINATIONS = 32,
    VT_RARATES = 34,
    VT_PERCENTSATS = 36
  };
  /// Observation detection start time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.888456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTARTTIME);
  }
  /// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
  /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *intensityTimes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTENSITYTIMES);
  }
  /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t currentSpectralFilterNum() const {
    return GetField<int32_t>(VT_CURRENTSPECTRALFILTERNUM, 0);
  }
  /// Image exposure duration in seconds.
  /// Example: /// Example: 0.455
  /// Constraints: No constraints specified.
  double expDuration() const {
    return GetField<double>(VT_EXPDURATION, 0.0);
  }
  /// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
  /// Example: /// Example: [1.1, 1.1, 1.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *intensities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTENSITIES);
  }
  /// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
  /// Example: /// Example: [0.32, 0.32, 0.32]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXTINCTIONCOEFFS);
  }
  /// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: [0.06, 0.06, 0.06]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffsUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXTINCTIONCOEFFSUNC);
  }
  /// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *skyBgs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SKYBGS);
  }
  /// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *localSkyBgs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOCALSKYBGS);
  }
  /// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
  /// Example: /// Example: [0.065, 0.065, 0.065]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *localSkyBgsUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOCALSKYBGSUNC);
  }
  /// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [6, 6, 6]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *numDetectedStars() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NUMDETECTEDSTARS);
  }
  /// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [3, 3, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *numCorrelatedStars() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NUMCORRELATEDSTARS);
  }
  /// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
  /// Example: /// Example: [24.711, 24.711, 24.711]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZEROPOINTS);
  }
  /// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
  /// Example: /// Example: [107.4, 107.4, 107.4]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ras() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RAS);
  }
  /// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [-0.45, -0.45, -0.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *declinations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DECLINATIONS);
  }
  /// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [0, 0, 0]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *raRates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RARATES);
  }
  /// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
  /// Example: /// Example: [0.1, 0.2, 1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *percentSats() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PERCENTSATS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBSTARTTIME) &&
           verifier.VerifyString(obStartTime()) &&
           VerifyOffset(verifier, VT_INTENSITYTIMES) &&
           verifier.VerifyVector(intensityTimes()) &&
           verifier.VerifyVectorOfStrings(intensityTimes()) &&
           VerifyField<int32_t>(verifier, VT_CURRENTSPECTRALFILTERNUM, 4) &&
           VerifyField<double>(verifier, VT_EXPDURATION, 8) &&
           VerifyOffset(verifier, VT_INTENSITIES) &&
           verifier.VerifyVector(intensities()) &&
           verifier.VerifyVectorOfStrings(intensities()) &&
           VerifyOffset(verifier, VT_EXTINCTIONCOEFFS) &&
           verifier.VerifyVector(extinctionCoeffs()) &&
           verifier.VerifyVectorOfStrings(extinctionCoeffs()) &&
           VerifyOffset(verifier, VT_EXTINCTIONCOEFFSUNC) &&
           verifier.VerifyVector(extinctionCoeffsUnc()) &&
           verifier.VerifyVectorOfStrings(extinctionCoeffsUnc()) &&
           VerifyOffset(verifier, VT_SKYBGS) &&
           verifier.VerifyVector(skyBgs()) &&
           verifier.VerifyVectorOfStrings(skyBgs()) &&
           VerifyOffset(verifier, VT_LOCALSKYBGS) &&
           verifier.VerifyVector(localSkyBgs()) &&
           verifier.VerifyVectorOfStrings(localSkyBgs()) &&
           VerifyOffset(verifier, VT_LOCALSKYBGSUNC) &&
           verifier.VerifyVector(localSkyBgsUnc()) &&
           verifier.VerifyVectorOfStrings(localSkyBgsUnc()) &&
           VerifyOffset(verifier, VT_NUMDETECTEDSTARS) &&
           verifier.VerifyVector(numDetectedStars()) &&
           verifier.VerifyVectorOfStrings(numDetectedStars()) &&
           VerifyOffset(verifier, VT_NUMCORRELATEDSTARS) &&
           verifier.VerifyVector(numCorrelatedStars()) &&
           verifier.VerifyVectorOfStrings(numCorrelatedStars()) &&
           VerifyOffset(verifier, VT_ZEROPOINTS) &&
           verifier.VerifyVector(zeroPoints()) &&
           verifier.VerifyVectorOfStrings(zeroPoints()) &&
           VerifyOffset(verifier, VT_RAS) &&
           verifier.VerifyVector(ras()) &&
           verifier.VerifyVectorOfStrings(ras()) &&
           VerifyOffset(verifier, VT_DECLINATIONS) &&
           verifier.VerifyVector(declinations()) &&
           verifier.VerifyVectorOfStrings(declinations()) &&
           VerifyOffset(verifier, VT_RARATES) &&
           verifier.VerifyVector(raRates()) &&
           verifier.VerifyVectorOfStrings(raRates()) &&
           VerifyOffset(verifier, VT_PERCENTSATS) &&
           verifier.VerifyVector(percentSats()) &&
           verifier.VerifyVectorOfStrings(percentSats()) &&
           verifier.EndTable();
  }
};

struct OpticalSOIObservation_FullBuilder {
  typedef OpticalSOIObservation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obStartTime(::flatbuffers::Offset<::flatbuffers::String> obStartTime) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_OBSTARTTIME, obStartTime);
  }
  void add_intensityTimes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intensityTimes) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_INTENSITYTIMES, intensityTimes);
  }
  void add_currentSpectralFilterNum(int32_t currentSpectralFilterNum) {
    fbb_.AddElement<int32_t>(OpticalSOIObservation_Full::VT_CURRENTSPECTRALFILTERNUM, currentSpectralFilterNum, 0);
  }
  void add_expDuration(double expDuration) {
    fbb_.AddElement<double>(OpticalSOIObservation_Full::VT_EXPDURATION, expDuration, 0.0);
  }
  void add_intensities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intensities) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_INTENSITIES, intensities);
  }
  void add_extinctionCoeffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffs) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFS, extinctionCoeffs);
  }
  void add_extinctionCoeffsUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffsUnc) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFSUNC, extinctionCoeffsUnc);
  }
  void add_skyBgs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> skyBgs) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_SKYBGS, skyBgs);
  }
  void add_localSkyBgs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> localSkyBgs) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_LOCALSKYBGS, localSkyBgs);
  }
  void add_localSkyBgsUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> localSkyBgsUnc) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_LOCALSKYBGSUNC, localSkyBgsUnc);
  }
  void add_numDetectedStars(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> numDetectedStars) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_NUMDETECTEDSTARS, numDetectedStars);
  }
  void add_numCorrelatedStars(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> numCorrelatedStars) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_NUMCORRELATEDSTARS, numCorrelatedStars);
  }
  void add_zeroPoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPoints) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_ZEROPOINTS, zeroPoints);
  }
  void add_ras(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ras) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_RAS, ras);
  }
  void add_declinations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> declinations) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_DECLINATIONS, declinations);
  }
  void add_raRates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> raRates) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_RARATES, raRates);
  }
  void add_percentSats(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> percentSats) {
    fbb_.AddOffset(OpticalSOIObservation_Full::VT_PERCENTSATS, percentSats);
  }
  explicit OpticalSOIObservation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OpticalSOIObservation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OpticalSOIObservation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OpticalSOIObservation_Full> CreateOpticalSOIObservation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> obStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intensityTimes = 0,
    int32_t currentSpectralFilterNum = 0,
    double expDuration = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intensities = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffsUnc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> skyBgs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> localSkyBgs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> localSkyBgsUnc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> numDetectedStars = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> numCorrelatedStars = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPoints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ras = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> declinations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> raRates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> percentSats = 0) {
  OpticalSOIObservation_FullBuilder builder_(_fbb);
  builder_.add_expDuration(expDuration);
  builder_.add_percentSats(percentSats);
  builder_.add_raRates(raRates);
  builder_.add_declinations(declinations);
  builder_.add_ras(ras);
  builder_.add_zeroPoints(zeroPoints);
  builder_.add_numCorrelatedStars(numCorrelatedStars);
  builder_.add_numDetectedStars(numDetectedStars);
  builder_.add_localSkyBgsUnc(localSkyBgsUnc);
  builder_.add_localSkyBgs(localSkyBgs);
  builder_.add_skyBgs(skyBgs);
  builder_.add_extinctionCoeffsUnc(extinctionCoeffsUnc);
  builder_.add_extinctionCoeffs(extinctionCoeffs);
  builder_.add_intensities(intensities);
  builder_.add_currentSpectralFilterNum(currentSpectralFilterNum);
  builder_.add_intensityTimes(intensityTimes);
  builder_.add_obStartTime(obStartTime);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OpticalSOIObservation_Full> CreateOpticalSOIObservation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *obStartTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *intensityTimes = nullptr,
    int32_t currentSpectralFilterNum = 0,
    double expDuration = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *intensities = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffsUnc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *skyBgs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *localSkyBgs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *localSkyBgsUnc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *numDetectedStars = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *numCorrelatedStars = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPoints = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ras = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *declinations = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *raRates = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *percentSats = nullptr) {
  auto obStartTime__ = obStartTime ? _fbb.CreateString(obStartTime) : 0;
  auto intensityTimes__ = intensityTimes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*intensityTimes) : 0;
  auto intensities__ = intensities ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*intensities) : 0;
  auto extinctionCoeffs__ = extinctionCoeffs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*extinctionCoeffs) : 0;
  auto extinctionCoeffsUnc__ = extinctionCoeffsUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*extinctionCoeffsUnc) : 0;
  auto skyBgs__ = skyBgs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*skyBgs) : 0;
  auto localSkyBgs__ = localSkyBgs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*localSkyBgs) : 0;
  auto localSkyBgsUnc__ = localSkyBgsUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*localSkyBgsUnc) : 0;
  auto numDetectedStars__ = numDetectedStars ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*numDetectedStars) : 0;
  auto numCorrelatedStars__ = numCorrelatedStars ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*numCorrelatedStars) : 0;
  auto zeroPoints__ = zeroPoints ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zeroPoints) : 0;
  auto ras__ = ras ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ras) : 0;
  auto declinations__ = declinations ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*declinations) : 0;
  auto raRates__ = raRates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*raRates) : 0;
  auto percentSats__ = percentSats ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*percentSats) : 0;
  return CreateOpticalSOIObservation_Full(
      _fbb,
      obStartTime__,
      intensityTimes__,
      currentSpectralFilterNum,
      expDuration,
      intensities__,
      extinctionCoeffs__,
      extinctionCoeffsUnc__,
      skyBgs__,
      localSkyBgs__,
      localSkyBgsUnc__,
      numDetectedStars__,
      numCorrelatedStars__,
      zeroPoints__,
      ras__,
      declinations__,
      raRates__,
      percentSats__);
}

inline const OpticalSOIObservation_Full *GetOpticalSOIObservation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<OpticalSOIObservation_Full>(buf);
}

inline const OpticalSOIObservation_Full *GetSizePrefixedOpticalSOIObservation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OpticalSOIObservation_Full>(buf);
}

inline const char *OpticalSOIObservation_FullIdentifier() {
  return "OPTI";
}

inline bool OpticalSOIObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OpticalSOIObservation_FullIdentifier());
}

inline bool SizePrefixedOpticalSOIObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OpticalSOIObservation_FullIdentifier(), true);
}

inline bool VerifyOpticalSOIObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpticalSOIObservation_Full>(OpticalSOIObservation_FullIdentifier());
}

inline bool VerifySizePrefixedOpticalSOIObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpticalSOIObservation_Full>(OpticalSOIObservation_FullIdentifier());
}

inline void FinishOpticalSOIObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpticalSOIObservation_Full> root) {
  fbb.Finish(root, OpticalSOIObservation_FullIdentifier());
}

inline void FinishSizePrefixedOpticalSOIObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OpticalSOIObservation_Full> root) {
  fbb.FinishSizePrefixed(root, OpticalSOIObservation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
