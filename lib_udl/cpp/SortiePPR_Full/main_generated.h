// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SortiePPR_Full;
struct SortiePPR_FullBuilder;

enum SortiePPR_Full_type_Enum : int8_t {
  /// No description available.
  SortiePPR_Full_type_Enum_M = 0,
  /// No description available.
  SortiePPR_Full_type_Enum_C = 1,
  SortiePPR_Full_type_Enum_MIN = SortiePPR_Full_type_Enum_M,
  SortiePPR_Full_type_Enum_MAX = SortiePPR_Full_type_Enum_C
};

inline const SortiePPR_Full_type_Enum (&EnumValuesSortiePPR_Full_type_Enum())[2] {
  static const SortiePPR_Full_type_Enum values[] = {
    SortiePPR_Full_type_Enum_M,
    SortiePPR_Full_type_Enum_C
  };
  return values;
}

inline const char * const *EnumNamesSortiePPR_Full_type_Enum() {
  static const char * const names[3] = {
    "M",
    "C",
    nullptr
  };
  return names;
}

inline const char *EnumNameSortiePPR_Full_type_Enum(SortiePPR_Full_type_Enum e) {
  if (::flatbuffers::IsOutRange(e, SortiePPR_Full_type_Enum_M, SortiePPR_Full_type_Enum_C)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSortiePPR_Full_type_Enum()[index];
}

enum SortiePPR_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SortiePPR_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SortiePPR_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SortiePPR_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SortiePPR_Full_dataMode_Enum_EXERCISE = 3,
  SortiePPR_Full_dataMode_Enum_MIN = SortiePPR_Full_dataMode_Enum_REAL,
  SortiePPR_Full_dataMode_Enum_MAX = SortiePPR_Full_dataMode_Enum_EXERCISE
};

inline const SortiePPR_Full_dataMode_Enum (&EnumValuesSortiePPR_Full_dataMode_Enum())[4] {
  static const SortiePPR_Full_dataMode_Enum values[] = {
    SortiePPR_Full_dataMode_Enum_REAL,
    SortiePPR_Full_dataMode_Enum_TEST,
    SortiePPR_Full_dataMode_Enum_SIMULATED,
    SortiePPR_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSortiePPR_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSortiePPR_Full_dataMode_Enum(SortiePPR_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SortiePPR_Full_dataMode_Enum_REAL, SortiePPR_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSortiePPR_Full_dataMode_Enum()[index];
}

/// /// SortiePPR is a regulatory requirement where operators must obtain permissions to full operational access to a runway, taxiway, or airport service.
struct SortiePPR_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SortiePPR_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDSORTIE = 8,
    VT_EXTERNALID = 10,
    VT_NUMBER = 12,
    VT_STARTTIME = 14,
    VT_ENDTIME = 16,
    VT_REQUESTOR = 18,
    VT_GRANTOR = 20,
    VT_TYPE = 22,
    VT_REMARKS = 24,
    VT_CREATEDAT = 26,
    VT_CREATEDBY = 28,
    VT_UPDATEDAT = 30,
    VT_UPDATEDBY = 32,
    VT_SOURCEDL = 34,
    VT_SOURCE = 36,
    VT_ORIGIN = 38,
    VT_ORIGNETWORK = 40,
    VT_DATAMODE = 42
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SORTIEPPR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.
  /// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSORTIE);
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The prior permission required (PPR) number issued by the airfield for a sortie.
  /// Example: /// Example: 07-21-07W
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *number() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NUMBER);
  }
  /// Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// The username of the prior permission required (PPR) requestor.
  /// Example: /// Example: jsmith1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *requestor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQUESTOR);
  }
  /// Identifier of the prior permission required (PPR) grantor.
  /// Example: /// Example: SMITH
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *grantor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GRANTOR);
  }
  /// Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 1
  SortiePPR_Full_type_Enum type() const {
    return static_cast<SortiePPR_Full_type_Enum>(GetField<int8_t>(VT_TYPE, 0));
  }
  /// Remarks concerning the prior permission required (PPR) for a sortie.
  /// Example: /// Example: PPR remark
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *remarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMARKS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SortiePPR_Full_dataMode_Enum dataMode() const {
    return static_cast<SortiePPR_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDSORTIE) &&
           verifier.VerifyString(idSortie()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_NUMBER) &&
           verifier.VerifyString(number()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_REQUESTOR) &&
           verifier.VerifyString(requestor()) &&
           VerifyOffset(verifier, VT_GRANTOR) &&
           verifier.VerifyString(grantor()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_REMARKS) &&
           verifier.VerifyString(remarks()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SortiePPR_FullBuilder {
  typedef SortiePPR_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SortiePPR_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SortiePPR_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idSortie(::flatbuffers::Offset<::flatbuffers::String> idSortie) {
    fbb_.AddOffset(SortiePPR_Full::VT_IDSORTIE, idSortie);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(SortiePPR_Full::VT_EXTERNALID, externalId);
  }
  void add_number(::flatbuffers::Offset<::flatbuffers::String> number) {
    fbb_.AddOffset(SortiePPR_Full::VT_NUMBER, number);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(SortiePPR_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(SortiePPR_Full::VT_ENDTIME, endTime);
  }
  void add_requestor(::flatbuffers::Offset<::flatbuffers::String> requestor) {
    fbb_.AddOffset(SortiePPR_Full::VT_REQUESTOR, requestor);
  }
  void add_grantor(::flatbuffers::Offset<::flatbuffers::String> grantor) {
    fbb_.AddOffset(SortiePPR_Full::VT_GRANTOR, grantor);
  }
  void add_type(SortiePPR_Full_type_Enum type) {
    fbb_.AddElement<int8_t>(SortiePPR_Full::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_remarks(::flatbuffers::Offset<::flatbuffers::String> remarks) {
    fbb_.AddOffset(SortiePPR_Full::VT_REMARKS, remarks);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SortiePPR_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SortiePPR_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(SortiePPR_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(SortiePPR_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(SortiePPR_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SortiePPR_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SortiePPR_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SortiePPR_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SortiePPR_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SortiePPR_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SortiePPR_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SortiePPR_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SortiePPR_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SortiePPR_Full> CreateSortiePPR_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> number = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> requestor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> grantor = 0,
    SortiePPR_Full_type_Enum type = SortiePPR_Full_type_Enum_M,
    ::flatbuffers::Offset<::flatbuffers::String> remarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SortiePPR_Full_dataMode_Enum dataMode = SortiePPR_Full_dataMode_Enum_REAL) {
  SortiePPR_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_remarks(remarks);
  builder_.add_grantor(grantor);
  builder_.add_requestor(requestor);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_number(number);
  builder_.add_externalId(externalId);
  builder_.add_idSortie(idSortie);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SortiePPR_Full> CreateSortiePPR_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idSortie = nullptr,
    const char *externalId = nullptr,
    const char *number = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *requestor = nullptr,
    const char *grantor = nullptr,
    SortiePPR_Full_type_Enum type = SortiePPR_Full_type_Enum_M,
    const char *remarks = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SortiePPR_Full_dataMode_Enum dataMode = SortiePPR_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idSortie__ = idSortie ? _fbb.CreateString(idSortie) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto number__ = number ? _fbb.CreateString(number) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto requestor__ = requestor ? _fbb.CreateString(requestor) : 0;
  auto grantor__ = grantor ? _fbb.CreateString(grantor) : 0;
  auto remarks__ = remarks ? _fbb.CreateString(remarks) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSortiePPR_Full(
      _fbb,
      id__,
      classificationMarking__,
      idSortie__,
      externalId__,
      number__,
      startTime__,
      endTime__,
      requestor__,
      grantor__,
      type,
      remarks__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const SortiePPR_Full *GetSortiePPR_Full(const void *buf) {
  return ::flatbuffers::GetRoot<SortiePPR_Full>(buf);
}

inline const SortiePPR_Full *GetSizePrefixedSortiePPR_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SortiePPR_Full>(buf);
}

inline const char *SortiePPR_FullIdentifier() {
  return "SORT";
}

inline bool SortiePPR_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SortiePPR_FullIdentifier());
}

inline bool SizePrefixedSortiePPR_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SortiePPR_FullIdentifier(), true);
}

inline bool VerifySortiePPR_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SortiePPR_Full>(SortiePPR_FullIdentifier());
}

inline bool VerifySizePrefixedSortiePPR_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SortiePPR_Full>(SortiePPR_FullIdentifier());
}

inline void FinishSortiePPR_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SortiePPR_Full> root) {
  fbb.Finish(root, SortiePPR_FullIdentifier());
}

inline void FinishSizePrefixedSortiePPR_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SortiePPR_Full> root) {
  fbb.FinishSizePrefixed(root, SortiePPR_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
