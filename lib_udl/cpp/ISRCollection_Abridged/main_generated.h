// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollection_Abridged;
struct ISRCollection_AbridgedBuilder;

enum ISRCollection_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  ISRCollection_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ISRCollection_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  ISRCollection_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ISRCollection_Abridged_dataMode_Enum_EXERCISE = 3,
  ISRCollection_Abridged_dataMode_Enum_MIN = ISRCollection_Abridged_dataMode_Enum_REAL,
  ISRCollection_Abridged_dataMode_Enum_MAX = ISRCollection_Abridged_dataMode_Enum_EXERCISE
};

inline const ISRCollection_Abridged_dataMode_Enum (&EnumValuesISRCollection_Abridged_dataMode_Enum())[4] {
  static const ISRCollection_Abridged_dataMode_Enum values[] = {
    ISRCollection_Abridged_dataMode_Enum_REAL,
    ISRCollection_Abridged_dataMode_Enum_TEST,
    ISRCollection_Abridged_dataMode_Enum_SIMULATED,
    ISRCollection_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesISRCollection_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameISRCollection_Abridged_dataMode_Enum(ISRCollection_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, ISRCollection_Abridged_dataMode_Enum_REAL, ISRCollection_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesISRCollection_Abridged_dataMode_Enum()[index];
}

/// /// ISR Collection data.
struct ISRCollection_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollection_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDEXVERSION = 8,
    VT_NAME = 10,
    VT_MISSIONID = 12,
    VT_MISSIONAOR = 14,
    VT_MISSIONPRIMARYINTELDISCIPLINE = 16,
    VT_MISSIONPRIMARYSUBCATEGORY = 18,
    VT_MISSIONSECONDARYINTELDISCIPLINE = 20,
    VT_MISSIONSECONDARYSUBCATEGORY = 22,
    VT_MISSIONROLE = 24,
    VT_MISSIONOPERATION = 26,
    VT_MISSIONPRIORITY = 28,
    VT_MISSIONSUPPORTEDUNIT = 30,
    VT_MISSIONEMPHASIS = 32,
    VT_MISSIONSTARTPOINTLAT = 34,
    VT_MISSIONSTARTPOINTLONG = 36,
    VT_MISSIONCOLLECTIONAREA = 38,
    VT_MISSIONJOA = 40,
    VT_MISSIONSYNCMATRIXBIN = 42,
    VT_MISSIONCOUNTRY = 44,
    VT_MISSIONREGION = 46,
    VT_MISSIONSUBREGION = 48,
    VT_COLLECTIONREQUIREMENTS = 50,
    VT_TRANSIT = 52,
    VT_TASKINGS = 54,
    VT_CREATEDAT = 56,
    VT_CREATEDBY = 58,
    VT_UPDATEDAT = 60,
    VT_UPDATEDBY = 62,
    VT_SOURCE = 64,
    VT_ORIGIN = 66,
    VT_DATAMODE = 68,
    VT_ORIGNETWORK = 70
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ISRCOLLECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Version of the IDEX software the request came from for compatibility.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t idexVersion() const {
    return GetField<int32_t>(VT_IDEXVERSION, 0);
  }
  /// Human readable Mission Name.
  /// Example: /// Example: Example mission name
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Mission Identifier.
  /// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONID);
  }
  /// Designation of mission Area Of Responsibility.
  /// Example: /// Example: Kandahar
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionAOR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONAOR);
  }
  /// Primary type of intelligence to be collected during the mission.
  /// Example: /// Example: Sig
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionPrimaryIntelDiscipline() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONPRIMARYINTELDISCIPLINE);
  }
  /// Sub category of primary intelligence to be collected.
  /// Example: /// Example: FMV
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionPrimarySubCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONPRIMARYSUBCATEGORY);
  }
  /// Type of intelligence to be collected second.
  /// Example: /// Example: Intelligence_2
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionSecondaryIntelDiscipline() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONSECONDARYINTELDISCIPLINE);
  }
  /// Mission sub category for secondary intelligence discipline to be collected.
  /// Example: /// Example: Convoy
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionSecondarySubCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONSECONDARYSUBCATEGORY);
  }
  /// What is the primary objective(Role) of this mission.
  /// Example: /// Example: Targeting of Lead Vehicle
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionRole() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONROLE);
  }
  /// Mission operation name.
  /// Example: /// Example: OP-HONEY-BADGER
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionOperation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONOPERATION);
  }
  /// Mission Priority (1-n).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t missionPriority() const {
    return GetField<int32_t>(VT_MISSIONPRIORITY, 0);
  }
  /// Name of the Supporting unit/Location that is performing this mission.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionSupportedUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONSUPPORTEDUNIT);
  }
  /// Text version of what we are emphasizing in this mission.
  /// Example: /// Example: Mission emphasis
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionEmphasis() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONEMPHASIS);
  }
  /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double missionStartPointLat() const {
    return GetField<double>(VT_MISSIONSTARTPOINTLAT, 0.0);
  }
  /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  double missionStartPointLong() const {
    return GetField<double>(VT_MISSIONSTARTPOINTLONG, 0.0);
  }
  /// Mission geographical collection area.
  /// Example: /// Example: Example collection area
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *missionCollectionArea() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONCOLLECTIONAREA);
  }
  /// Joint Operations Area.
  /// Example: /// Example: Operation area
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionJoa() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONJOA);
  }
  /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
  /// Example: /// Example: MATRIX
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionSyncMatrixBin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONSYNCMATRIXBIN);
  }
  /// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *missionCountry() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONCOUNTRY);
  }
  /// Region of the mission.
  /// Example: /// Example: Example Region
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionRegion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONREGION);
  }
  /// Subregion of the mission.
  /// Example: /// Example: Example Subregion
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *missionSubRegion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONSUBREGION);
  }
  /// Mission desired collection requirements.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *collectionRequirements() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COLLECTIONREQUIREMENTS);
  }
  /// Object for data dissemination.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *transit() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRANSIT);
  }
  /// Individual taskings to complete the mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *taskings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TASKINGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  ISRCollection_Abridged_dataMode_Enum dataMode() const {
    return static_cast<ISRCollection_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int32_t>(verifier, VT_IDEXVERSION, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MISSIONID) &&
           verifier.VerifyString(missionId()) &&
           VerifyOffset(verifier, VT_MISSIONAOR) &&
           verifier.VerifyString(missionAOR()) &&
           VerifyOffset(verifier, VT_MISSIONPRIMARYINTELDISCIPLINE) &&
           verifier.VerifyString(missionPrimaryIntelDiscipline()) &&
           VerifyOffset(verifier, VT_MISSIONPRIMARYSUBCATEGORY) &&
           verifier.VerifyString(missionPrimarySubCategory()) &&
           VerifyOffset(verifier, VT_MISSIONSECONDARYINTELDISCIPLINE) &&
           verifier.VerifyString(missionSecondaryIntelDiscipline()) &&
           VerifyOffset(verifier, VT_MISSIONSECONDARYSUBCATEGORY) &&
           verifier.VerifyString(missionSecondarySubCategory()) &&
           VerifyOffset(verifier, VT_MISSIONROLE) &&
           verifier.VerifyString(missionRole()) &&
           VerifyOffset(verifier, VT_MISSIONOPERATION) &&
           verifier.VerifyString(missionOperation()) &&
           VerifyField<int32_t>(verifier, VT_MISSIONPRIORITY, 4) &&
           VerifyOffset(verifier, VT_MISSIONSUPPORTEDUNIT) &&
           verifier.VerifyString(missionSupportedUnit()) &&
           VerifyOffset(verifier, VT_MISSIONEMPHASIS) &&
           verifier.VerifyString(missionEmphasis()) &&
           VerifyField<double>(verifier, VT_MISSIONSTARTPOINTLAT, 8) &&
           VerifyField<double>(verifier, VT_MISSIONSTARTPOINTLONG, 8) &&
           VerifyOffset(verifier, VT_MISSIONCOLLECTIONAREA) &&
           verifier.VerifyString(missionCollectionArea()) &&
           VerifyOffset(verifier, VT_MISSIONJOA) &&
           verifier.VerifyString(missionJoa()) &&
           VerifyOffset(verifier, VT_MISSIONSYNCMATRIXBIN) &&
           verifier.VerifyString(missionSyncMatrixBin()) &&
           VerifyOffset(verifier, VT_MISSIONCOUNTRY) &&
           verifier.VerifyString(missionCountry()) &&
           VerifyOffset(verifier, VT_MISSIONREGION) &&
           verifier.VerifyString(missionRegion()) &&
           VerifyOffset(verifier, VT_MISSIONSUBREGION) &&
           verifier.VerifyString(missionSubRegion()) &&
           VerifyOffset(verifier, VT_COLLECTIONREQUIREMENTS) &&
           verifier.VerifyVector(collectionRequirements()) &&
           verifier.VerifyVectorOfStrings(collectionRequirements()) &&
           VerifyOffset(verifier, VT_TRANSIT) &&
           verifier.VerifyVector(transit()) &&
           verifier.VerifyVectorOfStrings(transit()) &&
           VerifyOffset(verifier, VT_TASKINGS) &&
           verifier.VerifyVector(taskings()) &&
           verifier.VerifyVectorOfStrings(taskings()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct ISRCollection_AbridgedBuilder {
  typedef ISRCollection_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idexVersion(int32_t idexVersion) {
    fbb_.AddElement<int32_t>(ISRCollection_Abridged::VT_IDEXVERSION, idexVersion, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_NAME, name);
  }
  void add_missionId(::flatbuffers::Offset<::flatbuffers::String> missionId) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONID, missionId);
  }
  void add_missionAOR(::flatbuffers::Offset<::flatbuffers::String> missionAOR) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONAOR, missionAOR);
  }
  void add_missionPrimaryIntelDiscipline(::flatbuffers::Offset<::flatbuffers::String> missionPrimaryIntelDiscipline) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONPRIMARYINTELDISCIPLINE, missionPrimaryIntelDiscipline);
  }
  void add_missionPrimarySubCategory(::flatbuffers::Offset<::flatbuffers::String> missionPrimarySubCategory) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONPRIMARYSUBCATEGORY, missionPrimarySubCategory);
  }
  void add_missionSecondaryIntelDiscipline(::flatbuffers::Offset<::flatbuffers::String> missionSecondaryIntelDiscipline) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONSECONDARYINTELDISCIPLINE, missionSecondaryIntelDiscipline);
  }
  void add_missionSecondarySubCategory(::flatbuffers::Offset<::flatbuffers::String> missionSecondarySubCategory) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONSECONDARYSUBCATEGORY, missionSecondarySubCategory);
  }
  void add_missionRole(::flatbuffers::Offset<::flatbuffers::String> missionRole) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONROLE, missionRole);
  }
  void add_missionOperation(::flatbuffers::Offset<::flatbuffers::String> missionOperation) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONOPERATION, missionOperation);
  }
  void add_missionPriority(int32_t missionPriority) {
    fbb_.AddElement<int32_t>(ISRCollection_Abridged::VT_MISSIONPRIORITY, missionPriority, 0);
  }
  void add_missionSupportedUnit(::flatbuffers::Offset<::flatbuffers::String> missionSupportedUnit) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONSUPPORTEDUNIT, missionSupportedUnit);
  }
  void add_missionEmphasis(::flatbuffers::Offset<::flatbuffers::String> missionEmphasis) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONEMPHASIS, missionEmphasis);
  }
  void add_missionStartPointLat(double missionStartPointLat) {
    fbb_.AddElement<double>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLAT, missionStartPointLat, 0.0);
  }
  void add_missionStartPointLong(double missionStartPointLong) {
    fbb_.AddElement<double>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLONG, missionStartPointLong, 0.0);
  }
  void add_missionCollectionArea(::flatbuffers::Offset<::flatbuffers::String> missionCollectionArea) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONCOLLECTIONAREA, missionCollectionArea);
  }
  void add_missionJoa(::flatbuffers::Offset<::flatbuffers::String> missionJoa) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONJOA, missionJoa);
  }
  void add_missionSyncMatrixBin(::flatbuffers::Offset<::flatbuffers::String> missionSyncMatrixBin) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONSYNCMATRIXBIN, missionSyncMatrixBin);
  }
  void add_missionCountry(::flatbuffers::Offset<::flatbuffers::String> missionCountry) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONCOUNTRY, missionCountry);
  }
  void add_missionRegion(::flatbuffers::Offset<::flatbuffers::String> missionRegion) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONREGION, missionRegion);
  }
  void add_missionSubRegion(::flatbuffers::Offset<::flatbuffers::String> missionSubRegion) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_MISSIONSUBREGION, missionSubRegion);
  }
  void add_collectionRequirements(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> collectionRequirements) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_COLLECTIONREQUIREMENTS, collectionRequirements);
  }
  void add_transit(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transit) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_TRANSIT, transit);
  }
  void add_taskings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> taskings) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_TASKINGS, taskings);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(ISRCollection_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(ISRCollection_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(ISRCollection_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit ISRCollection_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollection_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollection_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollection_Abridged> CreateISRCollection_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int32_t idexVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionAOR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionPrimaryIntelDiscipline = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionPrimarySubCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionSecondaryIntelDiscipline = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionSecondarySubCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionRole = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionOperation = 0,
    int32_t missionPriority = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionSupportedUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionEmphasis = 0,
    double missionStartPointLat = 0.0,
    double missionStartPointLong = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> missionCollectionArea = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionJoa = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionSyncMatrixBin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionCountry = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionRegion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionSubRegion = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> collectionRequirements = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transit = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> taskings = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ISRCollection_Abridged_dataMode_Enum dataMode = ISRCollection_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  ISRCollection_AbridgedBuilder builder_(_fbb);
  builder_.add_missionStartPointLong(missionStartPointLong);
  builder_.add_missionStartPointLat(missionStartPointLat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_taskings(taskings);
  builder_.add_transit(transit);
  builder_.add_collectionRequirements(collectionRequirements);
  builder_.add_missionSubRegion(missionSubRegion);
  builder_.add_missionRegion(missionRegion);
  builder_.add_missionCountry(missionCountry);
  builder_.add_missionSyncMatrixBin(missionSyncMatrixBin);
  builder_.add_missionJoa(missionJoa);
  builder_.add_missionCollectionArea(missionCollectionArea);
  builder_.add_missionEmphasis(missionEmphasis);
  builder_.add_missionSupportedUnit(missionSupportedUnit);
  builder_.add_missionPriority(missionPriority);
  builder_.add_missionOperation(missionOperation);
  builder_.add_missionRole(missionRole);
  builder_.add_missionSecondarySubCategory(missionSecondarySubCategory);
  builder_.add_missionSecondaryIntelDiscipline(missionSecondaryIntelDiscipline);
  builder_.add_missionPrimarySubCategory(missionPrimarySubCategory);
  builder_.add_missionPrimaryIntelDiscipline(missionPrimaryIntelDiscipline);
  builder_.add_missionAOR(missionAOR);
  builder_.add_missionId(missionId);
  builder_.add_name(name);
  builder_.add_idexVersion(idexVersion);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollection_Abridged> CreateISRCollection_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    int32_t idexVersion = 0,
    const char *name = nullptr,
    const char *missionId = nullptr,
    const char *missionAOR = nullptr,
    const char *missionPrimaryIntelDiscipline = nullptr,
    const char *missionPrimarySubCategory = nullptr,
    const char *missionSecondaryIntelDiscipline = nullptr,
    const char *missionSecondarySubCategory = nullptr,
    const char *missionRole = nullptr,
    const char *missionOperation = nullptr,
    int32_t missionPriority = 0,
    const char *missionSupportedUnit = nullptr,
    const char *missionEmphasis = nullptr,
    double missionStartPointLat = 0.0,
    double missionStartPointLong = 0.0,
    const char *missionCollectionArea = nullptr,
    const char *missionJoa = nullptr,
    const char *missionSyncMatrixBin = nullptr,
    const char *missionCountry = nullptr,
    const char *missionRegion = nullptr,
    const char *missionSubRegion = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *collectionRequirements = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *transit = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *taskings = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    ISRCollection_Abridged_dataMode_Enum dataMode = ISRCollection_Abridged_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto missionId__ = missionId ? _fbb.CreateString(missionId) : 0;
  auto missionAOR__ = missionAOR ? _fbb.CreateString(missionAOR) : 0;
  auto missionPrimaryIntelDiscipline__ = missionPrimaryIntelDiscipline ? _fbb.CreateString(missionPrimaryIntelDiscipline) : 0;
  auto missionPrimarySubCategory__ = missionPrimarySubCategory ? _fbb.CreateString(missionPrimarySubCategory) : 0;
  auto missionSecondaryIntelDiscipline__ = missionSecondaryIntelDiscipline ? _fbb.CreateString(missionSecondaryIntelDiscipline) : 0;
  auto missionSecondarySubCategory__ = missionSecondarySubCategory ? _fbb.CreateString(missionSecondarySubCategory) : 0;
  auto missionRole__ = missionRole ? _fbb.CreateString(missionRole) : 0;
  auto missionOperation__ = missionOperation ? _fbb.CreateString(missionOperation) : 0;
  auto missionSupportedUnit__ = missionSupportedUnit ? _fbb.CreateString(missionSupportedUnit) : 0;
  auto missionEmphasis__ = missionEmphasis ? _fbb.CreateString(missionEmphasis) : 0;
  auto missionCollectionArea__ = missionCollectionArea ? _fbb.CreateString(missionCollectionArea) : 0;
  auto missionJoa__ = missionJoa ? _fbb.CreateString(missionJoa) : 0;
  auto missionSyncMatrixBin__ = missionSyncMatrixBin ? _fbb.CreateString(missionSyncMatrixBin) : 0;
  auto missionCountry__ = missionCountry ? _fbb.CreateString(missionCountry) : 0;
  auto missionRegion__ = missionRegion ? _fbb.CreateString(missionRegion) : 0;
  auto missionSubRegion__ = missionSubRegion ? _fbb.CreateString(missionSubRegion) : 0;
  auto collectionRequirements__ = collectionRequirements ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*collectionRequirements) : 0;
  auto transit__ = transit ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*transit) : 0;
  auto taskings__ = taskings ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*taskings) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateISRCollection_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idexVersion,
      name__,
      missionId__,
      missionAOR__,
      missionPrimaryIntelDiscipline__,
      missionPrimarySubCategory__,
      missionSecondaryIntelDiscipline__,
      missionSecondarySubCategory__,
      missionRole__,
      missionOperation__,
      missionPriority,
      missionSupportedUnit__,
      missionEmphasis__,
      missionStartPointLat,
      missionStartPointLong,
      missionCollectionArea__,
      missionJoa__,
      missionSyncMatrixBin__,
      missionCountry__,
      missionRegion__,
      missionSubRegion__,
      collectionRequirements__,
      transit__,
      taskings__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const ISRCollection_Abridged *GetISRCollection_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollection_Abridged>(buf);
}

inline const ISRCollection_Abridged *GetSizePrefixedISRCollection_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollection_Abridged>(buf);
}

inline const char *ISRCollection_AbridgedIdentifier() {
  return "ISRC";
}

inline bool ISRCollection_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollection_AbridgedIdentifier());
}

inline bool SizePrefixedISRCollection_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollection_AbridgedIdentifier(), true);
}

inline bool VerifyISRCollection_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollection_Abridged>(ISRCollection_AbridgedIdentifier());
}

inline bool VerifySizePrefixedISRCollection_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollection_Abridged>(ISRCollection_AbridgedIdentifier());
}

inline void FinishISRCollection_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollection_Abridged> root) {
  fbb.Finish(root, ISRCollection_AbridgedIdentifier());
}

inline void FinishSizePrefixedISRCollection_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollection_Abridged> root) {
  fbb.FinishSizePrefixed(root, ISRCollection_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
