// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LaunchEvent_Full;
struct LaunchEvent_FullBuilder;

enum LaunchEvent_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LaunchEvent_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LaunchEvent_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LaunchEvent_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LaunchEvent_Full_dataMode_Enum_EXERCISE = 3,
  LaunchEvent_Full_dataMode_Enum_MIN = LaunchEvent_Full_dataMode_Enum_REAL,
  LaunchEvent_Full_dataMode_Enum_MAX = LaunchEvent_Full_dataMode_Enum_EXERCISE
};

inline const LaunchEvent_Full_dataMode_Enum (&EnumValuesLaunchEvent_Full_dataMode_Enum())[4] {
  static const LaunchEvent_Full_dataMode_Enum values[] = {
    LaunchEvent_Full_dataMode_Enum_REAL,
    LaunchEvent_Full_dataMode_Enum_TEST,
    LaunchEvent_Full_dataMode_Enum_SIMULATED,
    LaunchEvent_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLaunchEvent_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLaunchEvent_Full_dataMode_Enum(LaunchEvent_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LaunchEvent_Full_dataMode_Enum_REAL, LaunchEvent_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLaunchEvent_Full_dataMode_Enum()[index];
}

/// /// Information on known launch events.
struct LaunchEvent_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LaunchEvent_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDONORBIT = 6,
    VT_ORIGOBJECTID = 8,
    VT_CLASSIFICATIONMARKING = 10,
    VT_DERIVEDFROM = 12,
    VT_DECLASSIFICATIONDATE = 14,
    VT_DECLASSIFICATIONSTRING = 16,
    VT_MSGCREATEDATE = 18,
    VT_LAUNCHFAILURECODE = 20,
    VT_LAUNCHDATE = 22,
    VT_BENUMBER = 24,
    VT_OSUFFIX = 26,
    VT_LAUNCHFACILITYNAME = 28,
    VT_CREATEDAT = 30,
    VT_CREATEDBY = 32,
    VT_ORIGIN = 34,
    VT_SOURCE = 36,
    VT_DATAMODE = 38,
    VT_ORIGNETWORK = 40,
    VT_ONORBIT = 42,
    VT_SATNO = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional target-id, if missing in UDL.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The sources or SCG references from which the classification of this data is derived.
  /// Example: /// Example: Example source
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *derivedFrom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DERIVEDFROM);
  }
  /// The declassification date of this data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:02.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *declassificationDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DECLASSIFICATIONDATE);
  }
  /// Declassification string of this data.
  /// Example: /// Example: Example Declassification
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *declassificationString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DECLASSIFICATIONSTRING);
  }
  /// Timestamp of the originating message in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T00:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *msgCreateDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGCREATEDATE);
  }
  /// The DISOB launch Failure Code, if applicable.
  /// Example: /// Example: Example failure code
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *launchFailureCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHFAILURECODE);
  }
  /// The launch date, in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T00:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *launchDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHDATE);
  }
  /// The Basic Encyclopedia Number, if applicable.
  /// Example: /// Example: ENC-123
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *beNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BENUMBER);
  }
  /// The OSuffix, if applicable.
  /// Example: /// Example: oSuffix
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *oSuffix() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OSUFFIX);
  }
  /// The Launch facility name.
  /// Example: /// Example: Example launch facility name
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *launchFacilityName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHFACILITYNAME);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LaunchEvent_Full_dataMode_Enum dataMode() const {
    return static_cast<LaunchEvent_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_DERIVEDFROM) &&
           verifier.VerifyString(derivedFrom()) &&
           VerifyOffset(verifier, VT_DECLASSIFICATIONDATE) &&
           verifier.VerifyString(declassificationDate()) &&
           VerifyOffset(verifier, VT_DECLASSIFICATIONSTRING) &&
           verifier.VerifyString(declassificationString()) &&
           VerifyOffset(verifier, VT_MSGCREATEDATE) &&
           verifier.VerifyString(msgCreateDate()) &&
           VerifyOffset(verifier, VT_LAUNCHFAILURECODE) &&
           verifier.VerifyString(launchFailureCode()) &&
           VerifyOffset(verifier, VT_LAUNCHDATE) &&
           verifier.VerifyString(launchDate()) &&
           VerifyOffset(verifier, VT_BENUMBER) &&
           verifier.VerifyString(beNumber()) &&
           VerifyOffset(verifier, VT_OSUFFIX) &&
           verifier.VerifyString(oSuffix()) &&
           VerifyOffset(verifier, VT_LAUNCHFACILITYNAME) &&
           verifier.VerifyString(launchFacilityName()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           verifier.EndTable();
  }
};

struct LaunchEvent_FullBuilder {
  typedef LaunchEvent_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LaunchEvent_Full::VT_ID, id);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(LaunchEvent_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(LaunchEvent_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LaunchEvent_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_derivedFrom(::flatbuffers::Offset<::flatbuffers::String> derivedFrom) {
    fbb_.AddOffset(LaunchEvent_Full::VT_DERIVEDFROM, derivedFrom);
  }
  void add_declassificationDate(::flatbuffers::Offset<::flatbuffers::String> declassificationDate) {
    fbb_.AddOffset(LaunchEvent_Full::VT_DECLASSIFICATIONDATE, declassificationDate);
  }
  void add_declassificationString(::flatbuffers::Offset<::flatbuffers::String> declassificationString) {
    fbb_.AddOffset(LaunchEvent_Full::VT_DECLASSIFICATIONSTRING, declassificationString);
  }
  void add_msgCreateDate(::flatbuffers::Offset<::flatbuffers::String> msgCreateDate) {
    fbb_.AddOffset(LaunchEvent_Full::VT_MSGCREATEDATE, msgCreateDate);
  }
  void add_launchFailureCode(::flatbuffers::Offset<::flatbuffers::String> launchFailureCode) {
    fbb_.AddOffset(LaunchEvent_Full::VT_LAUNCHFAILURECODE, launchFailureCode);
  }
  void add_launchDate(::flatbuffers::Offset<::flatbuffers::String> launchDate) {
    fbb_.AddOffset(LaunchEvent_Full::VT_LAUNCHDATE, launchDate);
  }
  void add_beNumber(::flatbuffers::Offset<::flatbuffers::String> beNumber) {
    fbb_.AddOffset(LaunchEvent_Full::VT_BENUMBER, beNumber);
  }
  void add_oSuffix(::flatbuffers::Offset<::flatbuffers::String> oSuffix) {
    fbb_.AddOffset(LaunchEvent_Full::VT_OSUFFIX, oSuffix);
  }
  void add_launchFacilityName(::flatbuffers::Offset<::flatbuffers::String> launchFacilityName) {
    fbb_.AddOffset(LaunchEvent_Full::VT_LAUNCHFACILITYNAME, launchFacilityName);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LaunchEvent_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LaunchEvent_Full::VT_CREATEDBY, createdBy);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LaunchEvent_Full::VT_ORIGIN, origin);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LaunchEvent_Full::VT_SOURCE, source);
  }
  void add_dataMode(LaunchEvent_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LaunchEvent_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LaunchEvent_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(LaunchEvent_Full::VT_ONORBIT, onOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(LaunchEvent_Full::VT_SATNO, satNo, 0);
  }
  explicit LaunchEvent_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LaunchEvent_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LaunchEvent_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LaunchEvent_Full> CreateLaunchEvent_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> derivedFrom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> declassificationDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> declassificationString = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgCreateDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchFailureCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> beNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> oSuffix = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchFacilityName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    LaunchEvent_Full_dataMode_Enum dataMode = LaunchEvent_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0,
    int32_t satNo = 0) {
  LaunchEvent_FullBuilder builder_(_fbb);
  builder_.add_satNo(satNo);
  builder_.add_onOrbit(onOrbit);
  builder_.add_origNetwork(origNetwork);
  builder_.add_source(source);
  builder_.add_origin(origin);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_launchFacilityName(launchFacilityName);
  builder_.add_oSuffix(oSuffix);
  builder_.add_beNumber(beNumber);
  builder_.add_launchDate(launchDate);
  builder_.add_launchFailureCode(launchFailureCode);
  builder_.add_msgCreateDate(msgCreateDate);
  builder_.add_declassificationString(declassificationString);
  builder_.add_declassificationDate(declassificationDate);
  builder_.add_derivedFrom(derivedFrom);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LaunchEvent_Full> CreateLaunchEvent_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    const char *classificationMarking = nullptr,
    const char *derivedFrom = nullptr,
    const char *declassificationDate = nullptr,
    const char *declassificationString = nullptr,
    const char *msgCreateDate = nullptr,
    const char *launchFailureCode = nullptr,
    const char *launchDate = nullptr,
    const char *beNumber = nullptr,
    const char *oSuffix = nullptr,
    const char *launchFacilityName = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *origin = nullptr,
    const char *source = nullptr,
    LaunchEvent_Full_dataMode_Enum dataMode = LaunchEvent_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr,
    const char *onOrbit = nullptr,
    int32_t satNo = 0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto derivedFrom__ = derivedFrom ? _fbb.CreateString(derivedFrom) : 0;
  auto declassificationDate__ = declassificationDate ? _fbb.CreateString(declassificationDate) : 0;
  auto declassificationString__ = declassificationString ? _fbb.CreateString(declassificationString) : 0;
  auto msgCreateDate__ = msgCreateDate ? _fbb.CreateString(msgCreateDate) : 0;
  auto launchFailureCode__ = launchFailureCode ? _fbb.CreateString(launchFailureCode) : 0;
  auto launchDate__ = launchDate ? _fbb.CreateString(launchDate) : 0;
  auto beNumber__ = beNumber ? _fbb.CreateString(beNumber) : 0;
  auto oSuffix__ = oSuffix ? _fbb.CreateString(oSuffix) : 0;
  auto launchFacilityName__ = launchFacilityName ? _fbb.CreateString(launchFacilityName) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  return CreateLaunchEvent_Full(
      _fbb,
      id__,
      idOnOrbit__,
      origObjectId__,
      classificationMarking__,
      derivedFrom__,
      declassificationDate__,
      declassificationString__,
      msgCreateDate__,
      launchFailureCode__,
      launchDate__,
      beNumber__,
      oSuffix__,
      launchFacilityName__,
      createdAt__,
      createdBy__,
      origin__,
      source__,
      dataMode,
      origNetwork__,
      onOrbit__,
      satNo);
}

inline const LaunchEvent_Full *GetLaunchEvent_Full(const void *buf) {
  return ::flatbuffers::GetRoot<LaunchEvent_Full>(buf);
}

inline const LaunchEvent_Full *GetSizePrefixedLaunchEvent_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LaunchEvent_Full>(buf);
}

inline const char *LaunchEvent_FullIdentifier() {
  return "LAUN";
}

inline bool LaunchEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchEvent_FullIdentifier());
}

inline bool SizePrefixedLaunchEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchEvent_FullIdentifier(), true);
}

inline bool VerifyLaunchEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LaunchEvent_Full>(LaunchEvent_FullIdentifier());
}

inline bool VerifySizePrefixedLaunchEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LaunchEvent_Full>(LaunchEvent_FullIdentifier());
}

inline void FinishLaunchEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchEvent_Full> root) {
  fbb.Finish(root, LaunchEvent_FullIdentifier());
}

inline void FinishSizePrefixedLaunchEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchEvent_Full> root) {
  fbb.FinishSizePrefixed(root, LaunchEvent_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
