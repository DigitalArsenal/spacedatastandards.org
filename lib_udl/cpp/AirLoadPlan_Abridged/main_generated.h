// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirLoadPlan_Abridged;
struct AirLoadPlan_AbridgedBuilder;

enum AirLoadPlan_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirLoadPlan_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirLoadPlan_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirLoadPlan_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirLoadPlan_Abridged_dataMode_Enum_EXERCISE = 3,
  AirLoadPlan_Abridged_dataMode_Enum_MIN = AirLoadPlan_Abridged_dataMode_Enum_REAL,
  AirLoadPlan_Abridged_dataMode_Enum_MAX = AirLoadPlan_Abridged_dataMode_Enum_EXERCISE
};

inline const AirLoadPlan_Abridged_dataMode_Enum (&EnumValuesAirLoadPlan_Abridged_dataMode_Enum())[4] {
  static const AirLoadPlan_Abridged_dataMode_Enum values[] = {
    AirLoadPlan_Abridged_dataMode_Enum_REAL,
    AirLoadPlan_Abridged_dataMode_Enum_TEST,
    AirLoadPlan_Abridged_dataMode_Enum_SIMULATED,
    AirLoadPlan_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirLoadPlan_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirLoadPlan_Abridged_dataMode_Enum(AirLoadPlan_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirLoadPlan_Abridged_dataMode_Enum_REAL, AirLoadPlan_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirLoadPlan_Abridged_dataMode_Enum()[index];
}

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
struct AirLoadPlan_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirLoadPlan_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_EXTERNALID = 8,
    VT_IDMISSION = 10,
    VT_MISSIONNUMBER = 12,
    VT_IDSORTIE = 14,
    VT_LEGNUM = 16,
    VT_CALLSIGN = 18,
    VT_TAILNUMBER = 20,
    VT_AIRCRAFTMDS = 22,
    VT_DEPICAO = 24,
    VT_DEPAIRFIELD = 26,
    VT_ESTDEPTIME = 28,
    VT_ARRICAO = 30,
    VT_ARRAIRFIELD = 32,
    VT_ESTARRTIME = 34,
    VT_CREWSIZE = 36,
    VT_CARGOCONFIG = 38,
    VT_EQUIPCONFIG = 40,
    VT_TANKCONFIG = 42,
    VT_BASICWEIGHT = 44,
    VT_BASICMOMENT = 46,
    VT_FUELWEIGHT = 48,
    VT_FUELMOMENT = 50,
    VT_ESTLANDINGFUELWEIGHT = 52,
    VT_ESTLANDINGFUELMOMENT = 54,
    VT_OPERATINGWEIGHT = 56,
    VT_OPERATINGMOMENT = 58,
    VT_CARGOWEIGHT = 60,
    VT_CARGOMOMENT = 62,
    VT_ZEROFUELWEIGHT = 64,
    VT_ZEROFUELMOMENT = 66,
    VT_ZEROFUELCG = 68,
    VT_GROSSWEIGHT = 70,
    VT_GROSSMOMENT = 72,
    VT_GROSSCG = 74,
    VT_LANDINGWEIGHT = 76,
    VT_LANDINGMOMENT = 78,
    VT_LANDINGCG = 80,
    VT_CARGOBAYFSMIN = 82,
    VT_CARGOBAYFSMAX = 84,
    VT_CARGOBAYWIDTH = 86,
    VT_CREATEDAT = 88,
    VT_CREATEDBY = 90,
    VT_SOURCEDL = 92,
    VT_SOURCE = 94,
    VT_ORIGIN = 96,
    VT_ORIGNETWORK = 98,
    VT_DATAMODE = 100
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The UDL ID of the mission this record is associated with.
  /// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDMISSION);
  }
  /// The mission number of the mission supporting this load plan.
  /// Example: /// Example: AJM123456123
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *missionNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONNUMBER);
  }
  /// The UDL ID of the aircraft sortie this record is associated with.
  /// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSORTIE);
  }
  /// The leg number of the mission supporting this load plan.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  int32_t legNum() const {
    return GetField<int32_t>(VT_LEGNUM, 0);
  }
  /// The call sign of the mission supporting this load plan.
  /// Example: /// Example: RCH1234
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The tail number of the aircraft supporting this load plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *tailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAILNUMBER);
  }
  /// The Model Design Series designation of the aircraft supporting this load plan.
  /// Example: /// Example: C17A
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *aircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTMDS);
  }
  /// The departure International Civil Organization (ICAO) code of the departure airfield.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *depICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPICAO);
  }
  /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *depAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPAIRFIELD);
  }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTDEPTIME);
  }
  /// The arrival International Civil Organization (ICAO) code of the landing airfield.
  /// Example: /// Example: ETAR
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *arrICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRICAO);
  }
  /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *arrAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRAIRFIELD);
  }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTARRTIME);
  }
  /// The number of crew members on the aircraft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t crewSize() const {
    return GetField<int32_t>(VT_CREWSIZE, 0);
  }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *cargoConfig() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CARGOCONFIG);
  }
  /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: Standard
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *equipConfig() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPCONFIG);
  }
  /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: ER
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *tankConfig() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKCONFIG);
  }
  /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double basicWeight() const {
    return GetField<double>(VT_BASICWEIGHT, 0.0);
  }
  /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double basicMoment() const {
    return GetField<double>(VT_BASICMOMENT, 0.0);
  }
  /// The weight of usable fuel on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double fuelWeight() const {
    return GetField<double>(VT_FUELWEIGHT, 0.0);
  }
  /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double fuelMoment() const {
    return GetField<double>(VT_FUELMOMENT, 0.0);
  }
  /// The estimated weight of usable fuel upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double estLandingFuelWeight() const {
    return GetField<double>(VT_ESTLANDINGFUELWEIGHT, 0.0);
  }
  /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double estLandingFuelMoment() const {
    return GetField<double>(VT_ESTLANDINGFUELMOMENT, 0.0);
  }
  /// The basic weight of the aircraft including passengers and equipment, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double operatingWeight() const {
    return GetField<double>(VT_OPERATINGWEIGHT, 0.0);
  }
  /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double operatingMoment() const {
    return GetField<double>(VT_OPERATINGMOMENT, 0.0);
  }
  /// The weight of the cargo on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double cargoWeight() const {
    return GetField<double>(VT_CARGOWEIGHT, 0.0);
  }
  /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double cargoMoment() const {
    return GetField<double>(VT_CARGOMOMENT, 0.0);
  }
  /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double zeroFuelWeight() const {
    return GetField<double>(VT_ZEROFUELWEIGHT, 0.0);
  }
  /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double zeroFuelMoment() const {
    return GetField<double>(VT_ZEROFUELMOMENT, 0.0);
  }
  /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 39.5
  /// Constraints: No constraints specified.
  double zeroFuelCG() const {
    return GetField<double>(VT_ZEROFUELCG, 0.0);
  }
  /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double grossWeight() const {
    return GetField<double>(VT_GROSSWEIGHT, 0.0);
  }
  /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double grossMoment() const {
    return GetField<double>(VT_GROSSMOMENT, 0.0);
  }
  /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.8
  /// Constraints: No constraints specified.
  double grossCG() const {
    return GetField<double>(VT_GROSSCG, 0.0);
  }
  /// The gross weight of the aircraft upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double landingWeight() const {
    return GetField<double>(VT_LANDINGWEIGHT, 0.0);
  }
  /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  double landingMoment() const {
    return GetField<double>(VT_LANDINGMOMENT, 0.0);
  }
  /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.2
  /// Constraints: No constraints specified.
  double landingCG() const {
    return GetField<double>(VT_LANDINGCG, 0.0);
  }
  /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t cargoBayFSMin() const {
    return GetField<int32_t>(VT_CARGOBAYFSMIN, 0);
  }
  /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t cargoBayFSMax() const {
    return GetField<int32_t>(VT_CARGOBAYFSMAX, 0);
  }
  /// Width of the cargo bay, in meters.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  double cargoBayWidth() const {
    return GetField<double>(VT_CARGOBAYWIDTH, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: source
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirLoadPlan_Abridged_dataMode_Enum dataMode() const {
    return static_cast<AirLoadPlan_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_IDMISSION) &&
           verifier.VerifyString(idMission()) &&
           VerifyOffset(verifier, VT_MISSIONNUMBER) &&
           verifier.VerifyString(missionNumber()) &&
           VerifyOffset(verifier, VT_IDSORTIE) &&
           verifier.VerifyString(idSortie()) &&
           VerifyField<int32_t>(verifier, VT_LEGNUM, 4) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_TAILNUMBER) &&
           verifier.VerifyString(tailNumber()) &&
           VerifyOffset(verifier, VT_AIRCRAFTMDS) &&
           verifier.VerifyString(aircraftMDS()) &&
           VerifyOffset(verifier, VT_DEPICAO) &&
           verifier.VerifyString(depICAO()) &&
           VerifyOffset(verifier, VT_DEPAIRFIELD) &&
           verifier.VerifyString(depAirfield()) &&
           VerifyOffset(verifier, VT_ESTDEPTIME) &&
           verifier.VerifyString(estDepTime()) &&
           VerifyOffset(verifier, VT_ARRICAO) &&
           verifier.VerifyString(arrICAO()) &&
           VerifyOffset(verifier, VT_ARRAIRFIELD) &&
           verifier.VerifyString(arrAirfield()) &&
           VerifyOffset(verifier, VT_ESTARRTIME) &&
           verifier.VerifyString(estArrTime()) &&
           VerifyField<int32_t>(verifier, VT_CREWSIZE, 4) &&
           VerifyOffset(verifier, VT_CARGOCONFIG) &&
           verifier.VerifyString(cargoConfig()) &&
           VerifyOffset(verifier, VT_EQUIPCONFIG) &&
           verifier.VerifyString(equipConfig()) &&
           VerifyOffset(verifier, VT_TANKCONFIG) &&
           verifier.VerifyString(tankConfig()) &&
           VerifyField<double>(verifier, VT_BASICWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_BASICMOMENT, 8) &&
           VerifyField<double>(verifier, VT_FUELWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_FUELMOMENT, 8) &&
           VerifyField<double>(verifier, VT_ESTLANDINGFUELWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_ESTLANDINGFUELMOMENT, 8) &&
           VerifyField<double>(verifier, VT_OPERATINGWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_OPERATINGMOMENT, 8) &&
           VerifyField<double>(verifier, VT_CARGOWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_CARGOMOMENT, 8) &&
           VerifyField<double>(verifier, VT_ZEROFUELWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_ZEROFUELMOMENT, 8) &&
           VerifyField<double>(verifier, VT_ZEROFUELCG, 8) &&
           VerifyField<double>(verifier, VT_GROSSWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_GROSSMOMENT, 8) &&
           VerifyField<double>(verifier, VT_GROSSCG, 8) &&
           VerifyField<double>(verifier, VT_LANDINGWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_LANDINGMOMENT, 8) &&
           VerifyField<double>(verifier, VT_LANDINGCG, 8) &&
           VerifyField<int32_t>(verifier, VT_CARGOBAYFSMIN, 4) &&
           VerifyField<int32_t>(verifier, VT_CARGOBAYFSMAX, 4) &&
           VerifyField<double>(verifier, VT_CARGOBAYWIDTH, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AirLoadPlan_AbridgedBuilder {
  typedef AirLoadPlan_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_EXTERNALID, externalId);
  }
  void add_idMission(::flatbuffers::Offset<::flatbuffers::String> idMission) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_IDMISSION, idMission);
  }
  void add_missionNumber(::flatbuffers::Offset<::flatbuffers::String> missionNumber) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_MISSIONNUMBER, missionNumber);
  }
  void add_idSortie(::flatbuffers::Offset<::flatbuffers::String> idSortie) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_IDSORTIE, idSortie);
  }
  void add_legNum(int32_t legNum) {
    fbb_.AddElement<int32_t>(AirLoadPlan_Abridged::VT_LEGNUM, legNum, 0);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_CALLSIGN, callSign);
  }
  void add_tailNumber(::flatbuffers::Offset<::flatbuffers::String> tailNumber) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_TAILNUMBER, tailNumber);
  }
  void add_aircraftMDS(::flatbuffers::Offset<::flatbuffers::String> aircraftMDS) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_AIRCRAFTMDS, aircraftMDS);
  }
  void add_depICAO(::flatbuffers::Offset<::flatbuffers::String> depICAO) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_DEPICAO, depICAO);
  }
  void add_depAirfield(::flatbuffers::Offset<::flatbuffers::String> depAirfield) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_DEPAIRFIELD, depAirfield);
  }
  void add_estDepTime(::flatbuffers::Offset<::flatbuffers::String> estDepTime) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  void add_arrICAO(::flatbuffers::Offset<::flatbuffers::String> arrICAO) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ARRICAO, arrICAO);
  }
  void add_arrAirfield(::flatbuffers::Offset<::flatbuffers::String> arrAirfield) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ARRAIRFIELD, arrAirfield);
  }
  void add_estArrTime(::flatbuffers::Offset<::flatbuffers::String> estArrTime) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ESTARRTIME, estArrTime);
  }
  void add_crewSize(int32_t crewSize) {
    fbb_.AddElement<int32_t>(AirLoadPlan_Abridged::VT_CREWSIZE, crewSize, 0);
  }
  void add_cargoConfig(::flatbuffers::Offset<::flatbuffers::String> cargoConfig) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_CARGOCONFIG, cargoConfig);
  }
  void add_equipConfig(::flatbuffers::Offset<::flatbuffers::String> equipConfig) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_EQUIPCONFIG, equipConfig);
  }
  void add_tankConfig(::flatbuffers::Offset<::flatbuffers::String> tankConfig) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_TANKCONFIG, tankConfig);
  }
  void add_basicWeight(double basicWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_BASICWEIGHT, basicWeight, 0.0);
  }
  void add_basicMoment(double basicMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_BASICMOMENT, basicMoment, 0.0);
  }
  void add_fuelWeight(double fuelWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_FUELWEIGHT, fuelWeight, 0.0);
  }
  void add_fuelMoment(double fuelMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_FUELMOMENT, fuelMoment, 0.0);
  }
  void add_estLandingFuelWeight(double estLandingFuelWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELWEIGHT, estLandingFuelWeight, 0.0);
  }
  void add_estLandingFuelMoment(double estLandingFuelMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELMOMENT, estLandingFuelMoment, 0.0);
  }
  void add_operatingWeight(double operatingWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_OPERATINGWEIGHT, operatingWeight, 0.0);
  }
  void add_operatingMoment(double operatingMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_OPERATINGMOMENT, operatingMoment, 0.0);
  }
  void add_cargoWeight(double cargoWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_CARGOWEIGHT, cargoWeight, 0.0);
  }
  void add_cargoMoment(double cargoMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_CARGOMOMENT, cargoMoment, 0.0);
  }
  void add_zeroFuelWeight(double zeroFuelWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_ZEROFUELWEIGHT, zeroFuelWeight, 0.0);
  }
  void add_zeroFuelMoment(double zeroFuelMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_ZEROFUELMOMENT, zeroFuelMoment, 0.0);
  }
  void add_zeroFuelCG(double zeroFuelCG) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_ZEROFUELCG, zeroFuelCG, 0.0);
  }
  void add_grossWeight(double grossWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_GROSSWEIGHT, grossWeight, 0.0);
  }
  void add_grossMoment(double grossMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_GROSSMOMENT, grossMoment, 0.0);
  }
  void add_grossCG(double grossCG) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_GROSSCG, grossCG, 0.0);
  }
  void add_landingWeight(double landingWeight) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_LANDINGWEIGHT, landingWeight, 0.0);
  }
  void add_landingMoment(double landingMoment) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_LANDINGMOMENT, landingMoment, 0.0);
  }
  void add_landingCG(double landingCG) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_LANDINGCG, landingCG, 0.0);
  }
  void add_cargoBayFSMin(int32_t cargoBayFSMin) {
    fbb_.AddElement<int32_t>(AirLoadPlan_Abridged::VT_CARGOBAYFSMIN, cargoBayFSMin, 0);
  }
  void add_cargoBayFSMax(int32_t cargoBayFSMax) {
    fbb_.AddElement<int32_t>(AirLoadPlan_Abridged::VT_CARGOBAYFSMAX, cargoBayFSMax, 0);
  }
  void add_cargoBayWidth(double cargoBayWidth) {
    fbb_.AddElement<double>(AirLoadPlan_Abridged::VT_CARGOBAYWIDTH, cargoBayWidth, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirLoadPlan_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AirLoadPlan_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirLoadPlan_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AirLoadPlan_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirLoadPlan_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirLoadPlan_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirLoadPlan_Abridged> CreateAirLoadPlan_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSortie = 0,
    int32_t legNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estArrTime = 0,
    int32_t crewSize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cargoConfig = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipConfig = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankConfig = 0,
    double basicWeight = 0.0,
    double basicMoment = 0.0,
    double fuelWeight = 0.0,
    double fuelMoment = 0.0,
    double estLandingFuelWeight = 0.0,
    double estLandingFuelMoment = 0.0,
    double operatingWeight = 0.0,
    double operatingMoment = 0.0,
    double cargoWeight = 0.0,
    double cargoMoment = 0.0,
    double zeroFuelWeight = 0.0,
    double zeroFuelMoment = 0.0,
    double zeroFuelCG = 0.0,
    double grossWeight = 0.0,
    double grossMoment = 0.0,
    double grossCG = 0.0,
    double landingWeight = 0.0,
    double landingMoment = 0.0,
    double landingCG = 0.0,
    int32_t cargoBayFSMin = 0,
    int32_t cargoBayFSMax = 0,
    double cargoBayWidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AirLoadPlan_Abridged_dataMode_Enum dataMode = AirLoadPlan_Abridged_dataMode_Enum_REAL) {
  AirLoadPlan_AbridgedBuilder builder_(_fbb);
  builder_.add_cargoBayWidth(cargoBayWidth);
  builder_.add_landingCG(landingCG);
  builder_.add_landingMoment(landingMoment);
  builder_.add_landingWeight(landingWeight);
  builder_.add_grossCG(grossCG);
  builder_.add_grossMoment(grossMoment);
  builder_.add_grossWeight(grossWeight);
  builder_.add_zeroFuelCG(zeroFuelCG);
  builder_.add_zeroFuelMoment(zeroFuelMoment);
  builder_.add_zeroFuelWeight(zeroFuelWeight);
  builder_.add_cargoMoment(cargoMoment);
  builder_.add_cargoWeight(cargoWeight);
  builder_.add_operatingMoment(operatingMoment);
  builder_.add_operatingWeight(operatingWeight);
  builder_.add_estLandingFuelMoment(estLandingFuelMoment);
  builder_.add_estLandingFuelWeight(estLandingFuelWeight);
  builder_.add_fuelMoment(fuelMoment);
  builder_.add_fuelWeight(fuelWeight);
  builder_.add_basicMoment(basicMoment);
  builder_.add_basicWeight(basicWeight);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_cargoBayFSMax(cargoBayFSMax);
  builder_.add_cargoBayFSMin(cargoBayFSMin);
  builder_.add_tankConfig(tankConfig);
  builder_.add_equipConfig(equipConfig);
  builder_.add_cargoConfig(cargoConfig);
  builder_.add_crewSize(crewSize);
  builder_.add_estArrTime(estArrTime);
  builder_.add_arrAirfield(arrAirfield);
  builder_.add_arrICAO(arrICAO);
  builder_.add_estDepTime(estDepTime);
  builder_.add_depAirfield(depAirfield);
  builder_.add_depICAO(depICAO);
  builder_.add_aircraftMDS(aircraftMDS);
  builder_.add_tailNumber(tailNumber);
  builder_.add_callSign(callSign);
  builder_.add_legNum(legNum);
  builder_.add_idSortie(idSortie);
  builder_.add_missionNumber(missionNumber);
  builder_.add_idMission(idMission);
  builder_.add_externalId(externalId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirLoadPlan_Abridged> CreateAirLoadPlan_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *externalId = nullptr,
    const char *idMission = nullptr,
    const char *missionNumber = nullptr,
    const char *idSortie = nullptr,
    int32_t legNum = 0,
    const char *callSign = nullptr,
    const char *tailNumber = nullptr,
    const char *aircraftMDS = nullptr,
    const char *depICAO = nullptr,
    const char *depAirfield = nullptr,
    const char *estDepTime = nullptr,
    const char *arrICAO = nullptr,
    const char *arrAirfield = nullptr,
    const char *estArrTime = nullptr,
    int32_t crewSize = 0,
    const char *cargoConfig = nullptr,
    const char *equipConfig = nullptr,
    const char *tankConfig = nullptr,
    double basicWeight = 0.0,
    double basicMoment = 0.0,
    double fuelWeight = 0.0,
    double fuelMoment = 0.0,
    double estLandingFuelWeight = 0.0,
    double estLandingFuelMoment = 0.0,
    double operatingWeight = 0.0,
    double operatingMoment = 0.0,
    double cargoWeight = 0.0,
    double cargoMoment = 0.0,
    double zeroFuelWeight = 0.0,
    double zeroFuelMoment = 0.0,
    double zeroFuelCG = 0.0,
    double grossWeight = 0.0,
    double grossMoment = 0.0,
    double grossCG = 0.0,
    double landingWeight = 0.0,
    double landingMoment = 0.0,
    double landingCG = 0.0,
    int32_t cargoBayFSMin = 0,
    int32_t cargoBayFSMax = 0,
    double cargoBayWidth = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AirLoadPlan_Abridged_dataMode_Enum dataMode = AirLoadPlan_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto idMission__ = idMission ? _fbb.CreateString(idMission) : 0;
  auto missionNumber__ = missionNumber ? _fbb.CreateString(missionNumber) : 0;
  auto idSortie__ = idSortie ? _fbb.CreateString(idSortie) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto tailNumber__ = tailNumber ? _fbb.CreateString(tailNumber) : 0;
  auto aircraftMDS__ = aircraftMDS ? _fbb.CreateString(aircraftMDS) : 0;
  auto depICAO__ = depICAO ? _fbb.CreateString(depICAO) : 0;
  auto depAirfield__ = depAirfield ? _fbb.CreateString(depAirfield) : 0;
  auto estDepTime__ = estDepTime ? _fbb.CreateString(estDepTime) : 0;
  auto arrICAO__ = arrICAO ? _fbb.CreateString(arrICAO) : 0;
  auto arrAirfield__ = arrAirfield ? _fbb.CreateString(arrAirfield) : 0;
  auto estArrTime__ = estArrTime ? _fbb.CreateString(estArrTime) : 0;
  auto cargoConfig__ = cargoConfig ? _fbb.CreateString(cargoConfig) : 0;
  auto equipConfig__ = equipConfig ? _fbb.CreateString(equipConfig) : 0;
  auto tankConfig__ = tankConfig ? _fbb.CreateString(tankConfig) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirLoadPlan_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      externalId__,
      idMission__,
      missionNumber__,
      idSortie__,
      legNum,
      callSign__,
      tailNumber__,
      aircraftMDS__,
      depICAO__,
      depAirfield__,
      estDepTime__,
      arrICAO__,
      arrAirfield__,
      estArrTime__,
      crewSize,
      cargoConfig__,
      equipConfig__,
      tankConfig__,
      basicWeight,
      basicMoment,
      fuelWeight,
      fuelMoment,
      estLandingFuelWeight,
      estLandingFuelMoment,
      operatingWeight,
      operatingMoment,
      cargoWeight,
      cargoMoment,
      zeroFuelWeight,
      zeroFuelMoment,
      zeroFuelCG,
      grossWeight,
      grossMoment,
      grossCG,
      landingWeight,
      landingMoment,
      landingCG,
      cargoBayFSMin,
      cargoBayFSMax,
      cargoBayWidth,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AirLoadPlan_Abridged *GetAirLoadPlan_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AirLoadPlan_Abridged>(buf);
}

inline const AirLoadPlan_Abridged *GetSizePrefixedAirLoadPlan_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirLoadPlan_Abridged>(buf);
}

inline const char *AirLoadPlan_AbridgedIdentifier() {
  return "AIRL";
}

inline bool AirLoadPlan_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirLoadPlan_AbridgedIdentifier());
}

inline bool SizePrefixedAirLoadPlan_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirLoadPlan_AbridgedIdentifier(), true);
}

inline bool VerifyAirLoadPlan_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirLoadPlan_Abridged>(AirLoadPlan_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAirLoadPlan_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirLoadPlan_Abridged>(AirLoadPlan_AbridgedIdentifier());
}

inline void FinishAirLoadPlan_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirLoadPlan_Abridged> root) {
  fbb.Finish(root, AirLoadPlan_AbridgedIdentifier());
}

inline void FinishSizePrefixedAirLoadPlan_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirLoadPlan_Abridged> root) {
  fbb.FinishSizePrefixed(root, AirLoadPlan_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
