// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SofDataSourceRef_Full;
struct SofDataSourceRef_FullBuilder;

/// /// List of data sources related to this document.
struct SofDataSourceRef_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SofDataSourceRef_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATASOURCEID = 4,
    VT_STARTPOSITION = 6,
    VT_ENDPOSITION = 8,
    VT_PARAGRAPHNUMBER = 10,
    VT_SENTENCENUMBER = 12
  };
  /// Data source id.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *dataSourceId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATASOURCEID);
  }
  /// start position.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTPOSITION);
  }
  /// end position.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDPOSITION);
  }
  /// paragraph number.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *paragraphNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARAGRAPHNUMBER);
  }
  /// sentence number.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sentenceNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENTENCENUMBER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATASOURCEID) &&
           verifier.VerifyString(dataSourceId()) &&
           VerifyOffset(verifier, VT_STARTPOSITION) &&
           verifier.VerifyString(startPosition()) &&
           VerifyOffset(verifier, VT_ENDPOSITION) &&
           verifier.VerifyString(endPosition()) &&
           VerifyOffset(verifier, VT_PARAGRAPHNUMBER) &&
           verifier.VerifyString(paragraphNumber()) &&
           VerifyOffset(verifier, VT_SENTENCENUMBER) &&
           verifier.VerifyString(sentenceNumber()) &&
           verifier.EndTable();
  }
};

struct SofDataSourceRef_FullBuilder {
  typedef SofDataSourceRef_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dataSourceId(::flatbuffers::Offset<::flatbuffers::String> dataSourceId) {
    fbb_.AddOffset(SofDataSourceRef_Full::VT_DATASOURCEID, dataSourceId);
  }
  void add_startPosition(::flatbuffers::Offset<::flatbuffers::String> startPosition) {
    fbb_.AddOffset(SofDataSourceRef_Full::VT_STARTPOSITION, startPosition);
  }
  void add_endPosition(::flatbuffers::Offset<::flatbuffers::String> endPosition) {
    fbb_.AddOffset(SofDataSourceRef_Full::VT_ENDPOSITION, endPosition);
  }
  void add_paragraphNumber(::flatbuffers::Offset<::flatbuffers::String> paragraphNumber) {
    fbb_.AddOffset(SofDataSourceRef_Full::VT_PARAGRAPHNUMBER, paragraphNumber);
  }
  void add_sentenceNumber(::flatbuffers::Offset<::flatbuffers::String> sentenceNumber) {
    fbb_.AddOffset(SofDataSourceRef_Full::VT_SENTENCENUMBER, sentenceNumber);
  }
  explicit SofDataSourceRef_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SofDataSourceRef_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SofDataSourceRef_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SofDataSourceRef_Full> CreateSofDataSourceRef_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> dataSourceId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> paragraphNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sentenceNumber = 0) {
  SofDataSourceRef_FullBuilder builder_(_fbb);
  builder_.add_sentenceNumber(sentenceNumber);
  builder_.add_paragraphNumber(paragraphNumber);
  builder_.add_endPosition(endPosition);
  builder_.add_startPosition(startPosition);
  builder_.add_dataSourceId(dataSourceId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SofDataSourceRef_Full> CreateSofDataSourceRef_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataSourceId = nullptr,
    const char *startPosition = nullptr,
    const char *endPosition = nullptr,
    const char *paragraphNumber = nullptr,
    const char *sentenceNumber = nullptr) {
  auto dataSourceId__ = dataSourceId ? _fbb.CreateString(dataSourceId) : 0;
  auto startPosition__ = startPosition ? _fbb.CreateString(startPosition) : 0;
  auto endPosition__ = endPosition ? _fbb.CreateString(endPosition) : 0;
  auto paragraphNumber__ = paragraphNumber ? _fbb.CreateString(paragraphNumber) : 0;
  auto sentenceNumber__ = sentenceNumber ? _fbb.CreateString(sentenceNumber) : 0;
  return CreateSofDataSourceRef_Full(
      _fbb,
      dataSourceId__,
      startPosition__,
      endPosition__,
      paragraphNumber__,
      sentenceNumber__);
}

inline const SofDataSourceRef_Full *GetSofDataSourceRef_Full(const void *buf) {
  return ::flatbuffers::GetRoot<SofDataSourceRef_Full>(buf);
}

inline const SofDataSourceRef_Full *GetSizePrefixedSofDataSourceRef_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SofDataSourceRef_Full>(buf);
}

inline const char *SofDataSourceRef_FullIdentifier() {
  return "SOFD";
}

inline bool SofDataSourceRef_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SofDataSourceRef_FullIdentifier());
}

inline bool SizePrefixedSofDataSourceRef_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SofDataSourceRef_FullIdentifier(), true);
}

inline bool VerifySofDataSourceRef_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SofDataSourceRef_Full>(SofDataSourceRef_FullIdentifier());
}

inline bool VerifySizePrefixedSofDataSourceRef_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SofDataSourceRef_Full>(SofDataSourceRef_FullIdentifier());
}

inline void FinishSofDataSourceRef_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SofDataSourceRef_Full> root) {
  fbb.Finish(root, SofDataSourceRef_FullIdentifier());
}

inline void FinishSizePrefixedSofDataSourceRef_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SofDataSourceRef_Full> root) {
  fbb.FinishSizePrefixed(root, SofDataSourceRef_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
