// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Notification_Full;
struct Notification_FullBuilder;

enum Notification_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Notification_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Notification_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Notification_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Notification_Full_dataMode_Enum_EXERCISE = 3,
  Notification_Full_dataMode_Enum_MIN = Notification_Full_dataMode_Enum_REAL,
  Notification_Full_dataMode_Enum_MAX = Notification_Full_dataMode_Enum_EXERCISE
};

inline const Notification_Full_dataMode_Enum (&EnumValuesNotification_Full_dataMode_Enum())[4] {
  static const Notification_Full_dataMode_Enum values[] = {
    Notification_Full_dataMode_Enum_REAL,
    Notification_Full_dataMode_Enum_TEST,
    Notification_Full_dataMode_Enum_SIMULATED,
    Notification_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesNotification_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameNotification_Full_dataMode_Enum(Notification_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Notification_Full_dataMode_Enum_REAL, Notification_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesNotification_Full_dataMode_Enum()[index];
}

/// /// Model representation of client generated notification data.  Contains a message type and message body field to store notification information.
struct Notification_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Notification_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_MSGTYPE = 8,
    VT_MSGBODY = 10,
    VT_DATAMODE = 12,
    VT_SOURCEDL = 14,
    VT_SOURCE = 16,
    VT_ORIGIN = 18,
    VT_TAGS = 20,
    VT_CREATEDAT = 22,
    VT_CREATEDBY = 24,
    VT_ORIGNETWORK = 26
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: NOTIFICATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Source provided message type.
  /// Example: /// Example: msgType
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *msgType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTYPE);
  }
  /// The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.
  /// Example: /// Example: msgBody
  /// Constraints: Minimum length = 1, Maximum length = 1000000
  const ::flatbuffers::String *msgBody() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGBODY);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Notification_Full_dataMode_Enum dataMode() const {
    return static_cast<Notification_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// The date and time the notification was created, auto-generated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// The user that created the notification.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_MSGTYPE) &&
           verifier.VerifyString(msgType()) &&
           VerifyOffset(verifier, VT_MSGBODY) &&
           verifier.VerifyString(msgBody()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Notification_FullBuilder {
  typedef Notification_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Notification_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Notification_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_msgType(::flatbuffers::Offset<::flatbuffers::String> msgType) {
    fbb_.AddOffset(Notification_Full::VT_MSGTYPE, msgType);
  }
  void add_msgBody(::flatbuffers::Offset<::flatbuffers::String> msgBody) {
    fbb_.AddOffset(Notification_Full::VT_MSGBODY, msgBody);
  }
  void add_dataMode(Notification_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Notification_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Notification_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Notification_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Notification_Full::VT_ORIGIN, origin);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Notification_Full::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Notification_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Notification_Full::VT_CREATEDBY, createdBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Notification_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit Notification_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Notification_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Notification_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Notification_Full> CreateNotification_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgBody = 0,
    Notification_Full_dataMode_Enum dataMode = Notification_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Notification_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_msgBody(msgBody);
  builder_.add_msgType(msgType);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Notification_Full> CreateNotification_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *msgType = nullptr,
    const char *msgBody = nullptr,
    Notification_Full_dataMode_Enum dataMode = Notification_Full_dataMode_Enum_REAL,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto msgType__ = msgType ? _fbb.CreateString(msgType) : 0;
  auto msgBody__ = msgBody ? _fbb.CreateString(msgBody) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateNotification_Full(
      _fbb,
      id__,
      classificationMarking__,
      msgType__,
      msgBody__,
      dataMode,
      sourceDL__,
      source__,
      origin__,
      tags__,
      createdAt__,
      createdBy__,
      origNetwork__);
}

inline const Notification_Full *GetNotification_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Notification_Full>(buf);
}

inline const Notification_Full *GetSizePrefixedNotification_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Notification_Full>(buf);
}

inline const char *Notification_FullIdentifier() {
  return "NOTI";
}

inline bool Notification_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Notification_FullIdentifier());
}

inline bool SizePrefixedNotification_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Notification_FullIdentifier(), true);
}

inline bool VerifyNotification_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Notification_Full>(Notification_FullIdentifier());
}

inline bool VerifySizePrefixedNotification_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Notification_Full>(Notification_FullIdentifier());
}

inline void FinishNotification_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Notification_Full> root) {
  fbb.Finish(root, Notification_FullIdentifier());
}

inline void FinishSizePrefixedNotification_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Notification_Full> root) {
  fbb.FinishSizePrefixed(root, Notification_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
