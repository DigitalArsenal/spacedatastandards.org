// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct NavigationalObstruction_Ingest;
struct NavigationalObstruction_IngestBuilder;

enum NavigationalObstruction_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  NavigationalObstruction_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  NavigationalObstruction_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  NavigationalObstruction_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  NavigationalObstruction_Ingest_dataMode_Enum_EXERCISE = 3,
  NavigationalObstruction_Ingest_dataMode_Enum_MIN = NavigationalObstruction_Ingest_dataMode_Enum_REAL,
  NavigationalObstruction_Ingest_dataMode_Enum_MAX = NavigationalObstruction_Ingest_dataMode_Enum_EXERCISE
};

inline const NavigationalObstruction_Ingest_dataMode_Enum (&EnumValuesNavigationalObstruction_Ingest_dataMode_Enum())[4] {
  static const NavigationalObstruction_Ingest_dataMode_Enum values[] = {
    NavigationalObstruction_Ingest_dataMode_Enum_REAL,
    NavigationalObstruction_Ingest_dataMode_Enum_TEST,
    NavigationalObstruction_Ingest_dataMode_Enum_SIMULATED,
    NavigationalObstruction_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesNavigationalObstruction_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameNavigationalObstruction_Ingest_dataMode_Enum(NavigationalObstruction_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, NavigationalObstruction_Ingest_dataMode_Enum_REAL, NavigationalObstruction_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesNavigationalObstruction_Ingest_dataMode_Enum()[index];
}

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
struct NavigationalObstruction_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NavigationalObstruction_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_CYCLEDATE = 8,
    VT_OBSTACLETYPE = 10,
    VT_OBSTACLEID = 12,
    VT_EXTERNALID = 14,
    VT_ORIGID = 16,
    VT_COUNTRYCODE = 18,
    VT_PROVINCECODE = 20,
    VT_POINTLAT = 22,
    VT_POINTLON = 24,
    VT_LINENELON = 26,
    VT_LINENELAT = 28,
    VT_LINESWLON = 30,
    VT_LINESWLAT = 32,
    VT_SEGSTARTPOINT = 34,
    VT_SEGENDPOINT = 36,
    VT_SEGNUM = 38,
    VT_FACC = 40,
    VT_FEATURECODE = 42,
    VT_FEATURETYPE = 44,
    VT_FEATURENAME = 46,
    VT_FEATUREDESCRIPTION = 48,
    VT_WAC = 50,
    VT_WACINNR = 52,
    VT_MULTOBS = 54,
    VT_NUMOBS = 56,
    VT_HORIZDATUMCODE = 58,
    VT_HEIGHTAGL = 60,
    VT_HEIGHTAGLACC = 62,
    VT_HEIGHTMSL = 64,
    VT_HEIGHTMSLACC = 66,
    VT_ELEVATION = 68,
    VT_ELEVATIONACC = 70,
    VT_HORIZACC = 72,
    VT_QUALITY = 74,
    VT_LIGHTINGCODE = 76,
    VT_SURFACEMATCODE = 78,
    VT_DIRECTIVITYCODE = 80,
    VT_VALIDATIONCODE = 82,
    VT_TRANSACTIONCODE = 84,
    VT_PROCESSCODE = 86,
    VT_ACTDELCODE = 88,
    VT_PRODUCER = 90,
    VT_DERIVINGORG = 92,
    VT_DELETINGORG = 94,
    VT_SOURCEDATE = 96,
    VT_REVDATE = 98,
    VT_INITRECORDDATE = 100,
    VT_KEYS = 102,
    VT_VALUES = 104,
    VT_OBSTACLEREMARKS = 106,
    VT_NEXTCYCLEDATE = 108,
    VT_BASELINECUTOFFDATE = 110,
    VT_CUTOFFDATE = 112,
    VT_AIRACCYCLE = 114,
    VT_BASEAIRACCYCLE = 116,
    VT_OWNERCOUNTRYCODE = 118,
    VT_BOUNDNELON = 120,
    VT_BOUNDNELAT = 122,
    VT_BOUNDSWLON = 124,
    VT_BOUNDSWLAT = 126,
    VT_MINHEIGHTAGL = 128,
    VT_NUMPOINTS = 130,
    VT_NUMLINES = 132,
    VT_DATASETREMARKS = 134,
    VT_POINTSFILENAME = 136,
    VT_LINESFILENAME = 138,
    VT_VECTORSFILENAME = 140,
    VT_RAWFILEURI = 142,
    VT_CREATEDAT = 144,
    VT_CREATEDBY = 146,
    VT_SOURCEDL = 148,
    VT_SOURCE = 150,
    VT_ORIGIN = 152,
    VT_ORIGNETWORK = 154,
    VT_DATAMODE = 156
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
  /// Example: /// Example: 2024-06-13
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *cycleDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CYCLEDATE);
  }
  /// Type of obstacle (e.g. P for point, V for vector, L for line).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 1, Maximum length = 1
  const ::flatbuffers::String *obstacleType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTACLETYPE);
  }
  /// The ID of this obstacle.
  /// Example: /// Example: 359655
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *obstacleId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTACLEID);
  }
  /// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: OU812
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The original ID for this obstacle.
  /// Example: /// Example: L0000002289
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGID);
  }
  /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
  /// Example: /// Example: 23
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *provinceCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROVINCECODE);
  }
  /// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 46.757211
  /// Constraints: No constraints specified.
  double pointLat() const {
    return GetField<double>(VT_POINTLAT, 0.0);
  }
  /// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -67.759494
  /// Constraints: No constraints specified.
  double pointLon() const {
    return GetField<double>(VT_POINTLON, 0.0);
  }
  /// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.197891
  /// Constraints: No constraints specified.
  double lineNELon() const {
    return GetField<double>(VT_LINENELON, 0.0);
  }
  /// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 49.000584
  /// Constraints: No constraints specified.
  double lineNELat() const {
    return GetField<double>(VT_LINENELAT, 0.0);
  }
  /// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.722946
  /// Constraints: No constraints specified.
  double lineSWLon() const {
    return GetField<double>(VT_LINESWLON, 0.0);
  }
  /// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 48.507027
  /// Constraints: No constraints specified.
  double lineSWLat() const {
    return GetField<double>(VT_LINESWLAT, 0.0);
  }
  /// ID of the starting point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  int32_t segStartPoint() const {
    return GetField<int32_t>(VT_SEGSTARTPOINT, 0);
  }
  /// ID of the end point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  int32_t segEndPoint() const {
    return GetField<int32_t>(VT_SEGENDPOINT, 0);
  }
  /// Identifies the sequence number of a line segment.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t segNum() const {
    return GetField<int32_t>(VT_SEGNUM, 0);
  }
  /// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
  /// Example: /// Example: AT040
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *facc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FACC);
  }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *featureCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FEATURECODE);
  }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *featureType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FEATURETYPE);
  }
  /// Type name of point obstacle.
  /// Example: /// Example: PYLON
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *featureName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FEATURENAME);
  }
  /// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
  /// Example: /// Example: Powerline Pylon, General
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *featureDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FEATUREDESCRIPTION);
  }
  /// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
  /// Example: /// Example: 262
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *wac() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WAC);
  }
  /// This obstacle's World Area Code installation number (WAC-INNR).
  /// Example: /// Example: 0409-00039
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *wacINNR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WACINNR);
  }
  /// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
  /// Example: /// Example: S
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *multObs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MULTOBS);
  }
  /// Indicates the number of obstructions associated with a feature.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numObs() const {
    return GetField<int32_t>(VT_NUMOBS, 0);
  }
  /// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
  /// Example: /// Example: WGS-84
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *horizDatumCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HORIZDATUMCODE);
  }
  /// The height Above Ground Level (AGL) of the point obstacle in feet.
  /// Example: /// Example: 314.1
  /// Constraints: No constraints specified.
  double heightAGL() const {
    return GetField<double>(VT_HEIGHTAGL, 0.0);
  }
  /// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
  /// Example: /// Example: 30.1
  /// Constraints: No constraints specified.
  double heightAGLAcc() const {
    return GetField<double>(VT_HEIGHTAGLACC, 0.0);
  }
  /// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
  /// Example: /// Example: 1154.1
  /// Constraints: No constraints specified.
  double heightMSL() const {
    return GetField<double>(VT_HEIGHTMSL, 0.0);
  }
  /// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
  /// Example: /// Example: 34.1
  /// Constraints: No constraints specified.
  double heightMSLAcc() const {
    return GetField<double>(VT_HEIGHTMSLACC, 0.0);
  }
  /// The elevation at the point obstacle's location in feet.
  /// Example: /// Example: 840.1
  /// Constraints: No constraints specified.
  double elevation() const {
    return GetField<double>(VT_ELEVATION, 0.0);
  }
  /// The difference between the assigned elevation of this point and its true elevation, in feet.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  double elevationAcc() const {
    return GetField<double>(VT_ELEVATIONACC, 0.0);
  }
  /// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
  /// Example: /// Example: 8.1
  /// Constraints: No constraints specified.
  double horizAcc() const {
    return GetField<double>(VT_HORIZACC, 0.0);
  }
  /// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
  /// Example: /// Example: 0
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *quality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUALITY);
  }
  /// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *lightingCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LIGHTINGCODE);
  }
  /// The surface material composition code of this point obstacle.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *surfaceMatCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SURFACEMATCODE);
  }
  /// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t directivityCode() const {
    return GetField<int32_t>(VT_DIRECTIVITYCODE, 0);
  }
  /// Method used to confirm the existence of this obstacle.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t validationCode() const {
    return GetField<int32_t>(VT_VALIDATIONCODE, 0);
  }
  /// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *transactionCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONCODE);
  }
  /// Code denoting the action, review, or process that updated this obstacle.
  /// Example: /// Example: OT
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *processCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROCESSCODE);
  }
  /// Indicates if this obstacle record is Active (A) or Deleted (D).
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *actDelCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTDELCODE);
  }
  /// Name of the agency that produced this obstruction data set.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *producer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCER);
  }
  /// The organization that entered obstacle data other than the producer.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *derivingOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DERIVINGORG);
  }
  /// The organization that deleted this obstacle record.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *deletingOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DELETINGORG);
  }
  /// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2016-04-01
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sourceDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDATE);
  }
  /// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2020-02-26
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *revDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REVDATE);
  }
  /// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 1991-03-28
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *initRecordDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INITRECORDDATE);
  }
  /// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYS);
  }
  /// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *values() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VALUES);
  }
  /// Remarks regarding this obstacle.
  /// Example: /// Example: Obstacle remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *obstacleRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTACLEREMARKS);
  }
  /// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-07-11
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *nextCycleDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NEXTCYCLEDATE);
  }
  /// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
  /// Example: /// Example: 2024-04-23
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *baselineCutoffDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASELINECUTOFFDATE);
  }
  /// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-05-21
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *cutoffDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CUTOFFDATE);
  }
  /// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2406
  /// Constraints: No constraints specified.
  int32_t airacCycle() const {
    return GetField<int32_t>(VT_AIRACCYCLE, 0);
  }
  /// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2405
  /// Constraints: No constraints specified.
  int32_t baseAiracCycle() const {
    return GetField<int32_t>(VT_BASEAIRACCYCLE, 0);
  }
  /// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *ownerCountryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNERCOUNTRYCODE);
  }
  /// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 99.1
  /// Constraints: No constraints specified.
  double boundNELon() const {
    return GetField<double>(VT_BOUNDNELON, 0.0);
  }
  /// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 29.1
  /// Constraints: No constraints specified.
  double boundNELat() const {
    return GetField<double>(VT_BOUNDNELAT, 0.0);
  }
  /// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -144.1
  /// Constraints: No constraints specified.
  double boundSWLon() const {
    return GetField<double>(VT_BOUNDSWLON, 0.0);
  }
  /// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -44.1
  /// Constraints: No constraints specified.
  double boundSWLat() const {
    return GetField<double>(VT_BOUNDSWLAT, 0.0);
  }
  /// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
  /// Example: /// Example: 20.1
  /// Constraints: No constraints specified.
  double minHeightAGL() const {
    return GetField<double>(VT_MINHEIGHTAGL, 0.0);
  }
  /// The number of point features associated with this obstruction data set.
  /// Example: /// Example: 21830590
  /// Constraints: No constraints specified.
  int32_t numPoints() const {
    return GetField<int32_t>(VT_NUMPOINTS, 0);
  }
  /// The number of line features associated with this obstruction data set.
  /// Example: /// Example: 45993
  /// Constraints: No constraints specified.
  int32_t numLines() const {
    return GetField<int32_t>(VT_NUMLINES, 0);
  }
  /// Remarks concerning this obstruction's data set.
  /// Example: /// Example: Data set remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *dataSetRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATASETREMARKS);
  }
  /// The name of the point file associated with this obstruction data set.
  /// Example: /// Example: points.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *pointsFilename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POINTSFILENAME);
  }
  /// The name of the line file associated with this obstruction data set.
  /// Example: /// Example: lines.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *linesFilename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINESFILENAME);
  }
  /// The name of the vector file associated with this obstruction data set.
  /// Example: /// Example: vectors.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *vectorsFilename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VECTORSFILENAME);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  NavigationalObstruction_Ingest_dataMode_Enum dataMode() const {
    return static_cast<NavigationalObstruction_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_CYCLEDATE) &&
           verifier.VerifyString(cycleDate()) &&
           VerifyOffset(verifier, VT_OBSTACLETYPE) &&
           verifier.VerifyString(obstacleType()) &&
           VerifyOffset(verifier, VT_OBSTACLEID) &&
           verifier.VerifyString(obstacleId()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_ORIGID) &&
           verifier.VerifyString(origId()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_PROVINCECODE) &&
           verifier.VerifyString(provinceCode()) &&
           VerifyField<double>(verifier, VT_POINTLAT, 8) &&
           VerifyField<double>(verifier, VT_POINTLON, 8) &&
           VerifyField<double>(verifier, VT_LINENELON, 8) &&
           VerifyField<double>(verifier, VT_LINENELAT, 8) &&
           VerifyField<double>(verifier, VT_LINESWLON, 8) &&
           VerifyField<double>(verifier, VT_LINESWLAT, 8) &&
           VerifyField<int32_t>(verifier, VT_SEGSTARTPOINT, 4) &&
           VerifyField<int32_t>(verifier, VT_SEGENDPOINT, 4) &&
           VerifyField<int32_t>(verifier, VT_SEGNUM, 4) &&
           VerifyOffset(verifier, VT_FACC) &&
           verifier.VerifyString(facc()) &&
           VerifyOffset(verifier, VT_FEATURECODE) &&
           verifier.VerifyString(featureCode()) &&
           VerifyOffset(verifier, VT_FEATURETYPE) &&
           verifier.VerifyString(featureType()) &&
           VerifyOffset(verifier, VT_FEATURENAME) &&
           verifier.VerifyString(featureName()) &&
           VerifyOffset(verifier, VT_FEATUREDESCRIPTION) &&
           verifier.VerifyString(featureDescription()) &&
           VerifyOffset(verifier, VT_WAC) &&
           verifier.VerifyString(wac()) &&
           VerifyOffset(verifier, VT_WACINNR) &&
           verifier.VerifyString(wacINNR()) &&
           VerifyOffset(verifier, VT_MULTOBS) &&
           verifier.VerifyString(multObs()) &&
           VerifyField<int32_t>(verifier, VT_NUMOBS, 4) &&
           VerifyOffset(verifier, VT_HORIZDATUMCODE) &&
           verifier.VerifyString(horizDatumCode()) &&
           VerifyField<double>(verifier, VT_HEIGHTAGL, 8) &&
           VerifyField<double>(verifier, VT_HEIGHTAGLACC, 8) &&
           VerifyField<double>(verifier, VT_HEIGHTMSL, 8) &&
           VerifyField<double>(verifier, VT_HEIGHTMSLACC, 8) &&
           VerifyField<double>(verifier, VT_ELEVATION, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONACC, 8) &&
           VerifyField<double>(verifier, VT_HORIZACC, 8) &&
           VerifyOffset(verifier, VT_QUALITY) &&
           verifier.VerifyString(quality()) &&
           VerifyOffset(verifier, VT_LIGHTINGCODE) &&
           verifier.VerifyString(lightingCode()) &&
           VerifyOffset(verifier, VT_SURFACEMATCODE) &&
           verifier.VerifyString(surfaceMatCode()) &&
           VerifyField<int32_t>(verifier, VT_DIRECTIVITYCODE, 4) &&
           VerifyField<int32_t>(verifier, VT_VALIDATIONCODE, 4) &&
           VerifyOffset(verifier, VT_TRANSACTIONCODE) &&
           verifier.VerifyString(transactionCode()) &&
           VerifyOffset(verifier, VT_PROCESSCODE) &&
           verifier.VerifyString(processCode()) &&
           VerifyOffset(verifier, VT_ACTDELCODE) &&
           verifier.VerifyString(actDelCode()) &&
           VerifyOffset(verifier, VT_PRODUCER) &&
           verifier.VerifyString(producer()) &&
           VerifyOffset(verifier, VT_DERIVINGORG) &&
           verifier.VerifyString(derivingOrg()) &&
           VerifyOffset(verifier, VT_DELETINGORG) &&
           verifier.VerifyString(deletingOrg()) &&
           VerifyOffset(verifier, VT_SOURCEDATE) &&
           verifier.VerifyString(sourceDate()) &&
           VerifyOffset(verifier, VT_REVDATE) &&
           verifier.VerifyString(revDate()) &&
           VerifyOffset(verifier, VT_INITRECORDDATE) &&
           verifier.VerifyString(initRecordDate()) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfStrings(values()) &&
           VerifyOffset(verifier, VT_OBSTACLEREMARKS) &&
           verifier.VerifyString(obstacleRemarks()) &&
           VerifyOffset(verifier, VT_NEXTCYCLEDATE) &&
           verifier.VerifyString(nextCycleDate()) &&
           VerifyOffset(verifier, VT_BASELINECUTOFFDATE) &&
           verifier.VerifyString(baselineCutoffDate()) &&
           VerifyOffset(verifier, VT_CUTOFFDATE) &&
           verifier.VerifyString(cutoffDate()) &&
           VerifyField<int32_t>(verifier, VT_AIRACCYCLE, 4) &&
           VerifyField<int32_t>(verifier, VT_BASEAIRACCYCLE, 4) &&
           VerifyOffset(verifier, VT_OWNERCOUNTRYCODE) &&
           verifier.VerifyString(ownerCountryCode()) &&
           VerifyField<double>(verifier, VT_BOUNDNELON, 8) &&
           VerifyField<double>(verifier, VT_BOUNDNELAT, 8) &&
           VerifyField<double>(verifier, VT_BOUNDSWLON, 8) &&
           VerifyField<double>(verifier, VT_BOUNDSWLAT, 8) &&
           VerifyField<double>(verifier, VT_MINHEIGHTAGL, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMPOINTS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMLINES, 4) &&
           VerifyOffset(verifier, VT_DATASETREMARKS) &&
           verifier.VerifyString(dataSetRemarks()) &&
           VerifyOffset(verifier, VT_POINTSFILENAME) &&
           verifier.VerifyString(pointsFilename()) &&
           VerifyOffset(verifier, VT_LINESFILENAME) &&
           verifier.VerifyString(linesFilename()) &&
           VerifyOffset(verifier, VT_VECTORSFILENAME) &&
           verifier.VerifyString(vectorsFilename()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct NavigationalObstruction_IngestBuilder {
  typedef NavigationalObstruction_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_cycleDate(::flatbuffers::Offset<::flatbuffers::String> cycleDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_CYCLEDATE, cycleDate);
  }
  void add_obstacleType(::flatbuffers::Offset<::flatbuffers::String> obstacleType) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_OBSTACLETYPE, obstacleType);
  }
  void add_obstacleId(::flatbuffers::Offset<::flatbuffers::String> obstacleId) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_OBSTACLEID, obstacleId);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_EXTERNALID, externalId);
  }
  void add_origId(::flatbuffers::Offset<::flatbuffers::String> origId) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_ORIGID, origId);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_COUNTRYCODE, countryCode);
  }
  void add_provinceCode(::flatbuffers::Offset<::flatbuffers::String> provinceCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_PROVINCECODE, provinceCode);
  }
  void add_pointLat(double pointLat) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_POINTLAT, pointLat, 0.0);
  }
  void add_pointLon(double pointLon) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_POINTLON, pointLon, 0.0);
  }
  void add_lineNELon(double lineNELon) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_LINENELON, lineNELon, 0.0);
  }
  void add_lineNELat(double lineNELat) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_LINENELAT, lineNELat, 0.0);
  }
  void add_lineSWLon(double lineSWLon) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_LINESWLON, lineSWLon, 0.0);
  }
  void add_lineSWLat(double lineSWLat) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_LINESWLAT, lineSWLat, 0.0);
  }
  void add_segStartPoint(int32_t segStartPoint) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_SEGSTARTPOINT, segStartPoint, 0);
  }
  void add_segEndPoint(int32_t segEndPoint) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_SEGENDPOINT, segEndPoint, 0);
  }
  void add_segNum(int32_t segNum) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_SEGNUM, segNum, 0);
  }
  void add_facc(::flatbuffers::Offset<::flatbuffers::String> facc) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_FACC, facc);
  }
  void add_featureCode(::flatbuffers::Offset<::flatbuffers::String> featureCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_FEATURECODE, featureCode);
  }
  void add_featureType(::flatbuffers::Offset<::flatbuffers::String> featureType) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_FEATURETYPE, featureType);
  }
  void add_featureName(::flatbuffers::Offset<::flatbuffers::String> featureName) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_FEATURENAME, featureName);
  }
  void add_featureDescription(::flatbuffers::Offset<::flatbuffers::String> featureDescription) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_FEATUREDESCRIPTION, featureDescription);
  }
  void add_wac(::flatbuffers::Offset<::flatbuffers::String> wac) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_WAC, wac);
  }
  void add_wacINNR(::flatbuffers::Offset<::flatbuffers::String> wacINNR) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_WACINNR, wacINNR);
  }
  void add_multObs(::flatbuffers::Offset<::flatbuffers::String> multObs) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_MULTOBS, multObs);
  }
  void add_numObs(int32_t numObs) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_NUMOBS, numObs, 0);
  }
  void add_horizDatumCode(::flatbuffers::Offset<::flatbuffers::String> horizDatumCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_HORIZDATUMCODE, horizDatumCode);
  }
  void add_heightAGL(double heightAGL) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_HEIGHTAGL, heightAGL, 0.0);
  }
  void add_heightAGLAcc(double heightAGLAcc) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_HEIGHTAGLACC, heightAGLAcc, 0.0);
  }
  void add_heightMSL(double heightMSL) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_HEIGHTMSL, heightMSL, 0.0);
  }
  void add_heightMSLAcc(double heightMSLAcc) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_HEIGHTMSLACC, heightMSLAcc, 0.0);
  }
  void add_elevation(double elevation) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_ELEVATION, elevation, 0.0);
  }
  void add_elevationAcc(double elevationAcc) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_ELEVATIONACC, elevationAcc, 0.0);
  }
  void add_horizAcc(double horizAcc) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_HORIZACC, horizAcc, 0.0);
  }
  void add_quality(::flatbuffers::Offset<::flatbuffers::String> quality) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_QUALITY, quality);
  }
  void add_lightingCode(::flatbuffers::Offset<::flatbuffers::String> lightingCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_LIGHTINGCODE, lightingCode);
  }
  void add_surfaceMatCode(::flatbuffers::Offset<::flatbuffers::String> surfaceMatCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_SURFACEMATCODE, surfaceMatCode);
  }
  void add_directivityCode(int32_t directivityCode) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_DIRECTIVITYCODE, directivityCode, 0);
  }
  void add_validationCode(int32_t validationCode) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_VALIDATIONCODE, validationCode, 0);
  }
  void add_transactionCode(::flatbuffers::Offset<::flatbuffers::String> transactionCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_TRANSACTIONCODE, transactionCode);
  }
  void add_processCode(::flatbuffers::Offset<::flatbuffers::String> processCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_PROCESSCODE, processCode);
  }
  void add_actDelCode(::flatbuffers::Offset<::flatbuffers::String> actDelCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_ACTDELCODE, actDelCode);
  }
  void add_producer(::flatbuffers::Offset<::flatbuffers::String> producer) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_PRODUCER, producer);
  }
  void add_derivingOrg(::flatbuffers::Offset<::flatbuffers::String> derivingOrg) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_DERIVINGORG, derivingOrg);
  }
  void add_deletingOrg(::flatbuffers::Offset<::flatbuffers::String> deletingOrg) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_DELETINGORG, deletingOrg);
  }
  void add_sourceDate(::flatbuffers::Offset<::flatbuffers::String> sourceDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_SOURCEDATE, sourceDate);
  }
  void add_revDate(::flatbuffers::Offset<::flatbuffers::String> revDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_REVDATE, revDate);
  }
  void add_initRecordDate(::flatbuffers::Offset<::flatbuffers::String> initRecordDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_INITRECORDDATE, initRecordDate);
  }
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_KEYS, keys);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_VALUES, values);
  }
  void add_obstacleRemarks(::flatbuffers::Offset<::flatbuffers::String> obstacleRemarks) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_OBSTACLEREMARKS, obstacleRemarks);
  }
  void add_nextCycleDate(::flatbuffers::Offset<::flatbuffers::String> nextCycleDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_NEXTCYCLEDATE, nextCycleDate);
  }
  void add_baselineCutoffDate(::flatbuffers::Offset<::flatbuffers::String> baselineCutoffDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_BASELINECUTOFFDATE, baselineCutoffDate);
  }
  void add_cutoffDate(::flatbuffers::Offset<::flatbuffers::String> cutoffDate) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_CUTOFFDATE, cutoffDate);
  }
  void add_airacCycle(int32_t airacCycle) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_AIRACCYCLE, airacCycle, 0);
  }
  void add_baseAiracCycle(int32_t baseAiracCycle) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_BASEAIRACCYCLE, baseAiracCycle, 0);
  }
  void add_ownerCountryCode(::flatbuffers::Offset<::flatbuffers::String> ownerCountryCode) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_OWNERCOUNTRYCODE, ownerCountryCode);
  }
  void add_boundNELon(double boundNELon) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_BOUNDNELON, boundNELon, 0.0);
  }
  void add_boundNELat(double boundNELat) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_BOUNDNELAT, boundNELat, 0.0);
  }
  void add_boundSWLon(double boundSWLon) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_BOUNDSWLON, boundSWLon, 0.0);
  }
  void add_boundSWLat(double boundSWLat) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_BOUNDSWLAT, boundSWLat, 0.0);
  }
  void add_minHeightAGL(double minHeightAGL) {
    fbb_.AddElement<double>(NavigationalObstruction_Ingest::VT_MINHEIGHTAGL, minHeightAGL, 0.0);
  }
  void add_numPoints(int32_t numPoints) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_NUMPOINTS, numPoints, 0);
  }
  void add_numLines(int32_t numLines) {
    fbb_.AddElement<int32_t>(NavigationalObstruction_Ingest::VT_NUMLINES, numLines, 0);
  }
  void add_dataSetRemarks(::flatbuffers::Offset<::flatbuffers::String> dataSetRemarks) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_DATASETREMARKS, dataSetRemarks);
  }
  void add_pointsFilename(::flatbuffers::Offset<::flatbuffers::String> pointsFilename) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_POINTSFILENAME, pointsFilename);
  }
  void add_linesFilename(::flatbuffers::Offset<::flatbuffers::String> linesFilename) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_LINESFILENAME, linesFilename);
  }
  void add_vectorsFilename(::flatbuffers::Offset<::flatbuffers::String> vectorsFilename) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_VECTORSFILENAME, vectorsFilename);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(NavigationalObstruction_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(NavigationalObstruction_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(NavigationalObstruction_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit NavigationalObstruction_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NavigationalObstruction_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NavigationalObstruction_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NavigationalObstruction_Ingest> CreateNavigationalObstruction_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cycleDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obstacleType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obstacleId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> provinceCode = 0,
    double pointLat = 0.0,
    double pointLon = 0.0,
    double lineNELon = 0.0,
    double lineNELat = 0.0,
    double lineSWLon = 0.0,
    double lineSWLat = 0.0,
    int32_t segStartPoint = 0,
    int32_t segEndPoint = 0,
    int32_t segNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> facc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> featureCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> featureType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> featureName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> featureDescription = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wac = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wacINNR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> multObs = 0,
    int32_t numObs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> horizDatumCode = 0,
    double heightAGL = 0.0,
    double heightAGLAcc = 0.0,
    double heightMSL = 0.0,
    double heightMSLAcc = 0.0,
    double elevation = 0.0,
    double elevationAcc = 0.0,
    double horizAcc = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> quality = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lightingCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> surfaceMatCode = 0,
    int32_t directivityCode = 0,
    int32_t validationCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> processCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actDelCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> producer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> derivingOrg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> deletingOrg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> revDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> initRecordDate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obstacleRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nextCycleDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> baselineCutoffDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cutoffDate = 0,
    int32_t airacCycle = 0,
    int32_t baseAiracCycle = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ownerCountryCode = 0,
    double boundNELon = 0.0,
    double boundNELat = 0.0,
    double boundSWLon = 0.0,
    double boundSWLat = 0.0,
    double minHeightAGL = 0.0,
    int32_t numPoints = 0,
    int32_t numLines = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dataSetRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pointsFilename = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linesFilename = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vectorsFilename = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    NavigationalObstruction_Ingest_dataMode_Enum dataMode = NavigationalObstruction_Ingest_dataMode_Enum_REAL) {
  NavigationalObstruction_IngestBuilder builder_(_fbb);
  builder_.add_minHeightAGL(minHeightAGL);
  builder_.add_boundSWLat(boundSWLat);
  builder_.add_boundSWLon(boundSWLon);
  builder_.add_boundNELat(boundNELat);
  builder_.add_boundNELon(boundNELon);
  builder_.add_horizAcc(horizAcc);
  builder_.add_elevationAcc(elevationAcc);
  builder_.add_elevation(elevation);
  builder_.add_heightMSLAcc(heightMSLAcc);
  builder_.add_heightMSL(heightMSL);
  builder_.add_heightAGLAcc(heightAGLAcc);
  builder_.add_heightAGL(heightAGL);
  builder_.add_lineSWLat(lineSWLat);
  builder_.add_lineSWLon(lineSWLon);
  builder_.add_lineNELat(lineNELat);
  builder_.add_lineNELon(lineNELon);
  builder_.add_pointLon(pointLon);
  builder_.add_pointLat(pointLat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_vectorsFilename(vectorsFilename);
  builder_.add_linesFilename(linesFilename);
  builder_.add_pointsFilename(pointsFilename);
  builder_.add_dataSetRemarks(dataSetRemarks);
  builder_.add_numLines(numLines);
  builder_.add_numPoints(numPoints);
  builder_.add_ownerCountryCode(ownerCountryCode);
  builder_.add_baseAiracCycle(baseAiracCycle);
  builder_.add_airacCycle(airacCycle);
  builder_.add_cutoffDate(cutoffDate);
  builder_.add_baselineCutoffDate(baselineCutoffDate);
  builder_.add_nextCycleDate(nextCycleDate);
  builder_.add_obstacleRemarks(obstacleRemarks);
  builder_.add_values(values);
  builder_.add_keys(keys);
  builder_.add_initRecordDate(initRecordDate);
  builder_.add_revDate(revDate);
  builder_.add_sourceDate(sourceDate);
  builder_.add_deletingOrg(deletingOrg);
  builder_.add_derivingOrg(derivingOrg);
  builder_.add_producer(producer);
  builder_.add_actDelCode(actDelCode);
  builder_.add_processCode(processCode);
  builder_.add_transactionCode(transactionCode);
  builder_.add_validationCode(validationCode);
  builder_.add_directivityCode(directivityCode);
  builder_.add_surfaceMatCode(surfaceMatCode);
  builder_.add_lightingCode(lightingCode);
  builder_.add_quality(quality);
  builder_.add_horizDatumCode(horizDatumCode);
  builder_.add_numObs(numObs);
  builder_.add_multObs(multObs);
  builder_.add_wacINNR(wacINNR);
  builder_.add_wac(wac);
  builder_.add_featureDescription(featureDescription);
  builder_.add_featureName(featureName);
  builder_.add_featureType(featureType);
  builder_.add_featureCode(featureCode);
  builder_.add_facc(facc);
  builder_.add_segNum(segNum);
  builder_.add_segEndPoint(segEndPoint);
  builder_.add_segStartPoint(segStartPoint);
  builder_.add_provinceCode(provinceCode);
  builder_.add_countryCode(countryCode);
  builder_.add_origId(origId);
  builder_.add_externalId(externalId);
  builder_.add_obstacleId(obstacleId);
  builder_.add_obstacleType(obstacleType);
  builder_.add_cycleDate(cycleDate);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NavigationalObstruction_Ingest> CreateNavigationalObstruction_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *cycleDate = nullptr,
    const char *obstacleType = nullptr,
    const char *obstacleId = nullptr,
    const char *externalId = nullptr,
    const char *origId = nullptr,
    const char *countryCode = nullptr,
    const char *provinceCode = nullptr,
    double pointLat = 0.0,
    double pointLon = 0.0,
    double lineNELon = 0.0,
    double lineNELat = 0.0,
    double lineSWLon = 0.0,
    double lineSWLat = 0.0,
    int32_t segStartPoint = 0,
    int32_t segEndPoint = 0,
    int32_t segNum = 0,
    const char *facc = nullptr,
    const char *featureCode = nullptr,
    const char *featureType = nullptr,
    const char *featureName = nullptr,
    const char *featureDescription = nullptr,
    const char *wac = nullptr,
    const char *wacINNR = nullptr,
    const char *multObs = nullptr,
    int32_t numObs = 0,
    const char *horizDatumCode = nullptr,
    double heightAGL = 0.0,
    double heightAGLAcc = 0.0,
    double heightMSL = 0.0,
    double heightMSLAcc = 0.0,
    double elevation = 0.0,
    double elevationAcc = 0.0,
    double horizAcc = 0.0,
    const char *quality = nullptr,
    const char *lightingCode = nullptr,
    const char *surfaceMatCode = nullptr,
    int32_t directivityCode = 0,
    int32_t validationCode = 0,
    const char *transactionCode = nullptr,
    const char *processCode = nullptr,
    const char *actDelCode = nullptr,
    const char *producer = nullptr,
    const char *derivingOrg = nullptr,
    const char *deletingOrg = nullptr,
    const char *sourceDate = nullptr,
    const char *revDate = nullptr,
    const char *initRecordDate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keys = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *values = nullptr,
    const char *obstacleRemarks = nullptr,
    const char *nextCycleDate = nullptr,
    const char *baselineCutoffDate = nullptr,
    const char *cutoffDate = nullptr,
    int32_t airacCycle = 0,
    int32_t baseAiracCycle = 0,
    const char *ownerCountryCode = nullptr,
    double boundNELon = 0.0,
    double boundNELat = 0.0,
    double boundSWLon = 0.0,
    double boundSWLat = 0.0,
    double minHeightAGL = 0.0,
    int32_t numPoints = 0,
    int32_t numLines = 0,
    const char *dataSetRemarks = nullptr,
    const char *pointsFilename = nullptr,
    const char *linesFilename = nullptr,
    const char *vectorsFilename = nullptr,
    const char *rawFileURI = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    NavigationalObstruction_Ingest_dataMode_Enum dataMode = NavigationalObstruction_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto cycleDate__ = cycleDate ? _fbb.CreateString(cycleDate) : 0;
  auto obstacleType__ = obstacleType ? _fbb.CreateString(obstacleType) : 0;
  auto obstacleId__ = obstacleId ? _fbb.CreateString(obstacleId) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto origId__ = origId ? _fbb.CreateString(origId) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto provinceCode__ = provinceCode ? _fbb.CreateString(provinceCode) : 0;
  auto facc__ = facc ? _fbb.CreateString(facc) : 0;
  auto featureCode__ = featureCode ? _fbb.CreateString(featureCode) : 0;
  auto featureType__ = featureType ? _fbb.CreateString(featureType) : 0;
  auto featureName__ = featureName ? _fbb.CreateString(featureName) : 0;
  auto featureDescription__ = featureDescription ? _fbb.CreateString(featureDescription) : 0;
  auto wac__ = wac ? _fbb.CreateString(wac) : 0;
  auto wacINNR__ = wacINNR ? _fbb.CreateString(wacINNR) : 0;
  auto multObs__ = multObs ? _fbb.CreateString(multObs) : 0;
  auto horizDatumCode__ = horizDatumCode ? _fbb.CreateString(horizDatumCode) : 0;
  auto quality__ = quality ? _fbb.CreateString(quality) : 0;
  auto lightingCode__ = lightingCode ? _fbb.CreateString(lightingCode) : 0;
  auto surfaceMatCode__ = surfaceMatCode ? _fbb.CreateString(surfaceMatCode) : 0;
  auto transactionCode__ = transactionCode ? _fbb.CreateString(transactionCode) : 0;
  auto processCode__ = processCode ? _fbb.CreateString(processCode) : 0;
  auto actDelCode__ = actDelCode ? _fbb.CreateString(actDelCode) : 0;
  auto producer__ = producer ? _fbb.CreateString(producer) : 0;
  auto derivingOrg__ = derivingOrg ? _fbb.CreateString(derivingOrg) : 0;
  auto deletingOrg__ = deletingOrg ? _fbb.CreateString(deletingOrg) : 0;
  auto sourceDate__ = sourceDate ? _fbb.CreateString(sourceDate) : 0;
  auto revDate__ = revDate ? _fbb.CreateString(revDate) : 0;
  auto initRecordDate__ = initRecordDate ? _fbb.CreateString(initRecordDate) : 0;
  auto keys__ = keys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keys) : 0;
  auto values__ = values ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*values) : 0;
  auto obstacleRemarks__ = obstacleRemarks ? _fbb.CreateString(obstacleRemarks) : 0;
  auto nextCycleDate__ = nextCycleDate ? _fbb.CreateString(nextCycleDate) : 0;
  auto baselineCutoffDate__ = baselineCutoffDate ? _fbb.CreateString(baselineCutoffDate) : 0;
  auto cutoffDate__ = cutoffDate ? _fbb.CreateString(cutoffDate) : 0;
  auto ownerCountryCode__ = ownerCountryCode ? _fbb.CreateString(ownerCountryCode) : 0;
  auto dataSetRemarks__ = dataSetRemarks ? _fbb.CreateString(dataSetRemarks) : 0;
  auto pointsFilename__ = pointsFilename ? _fbb.CreateString(pointsFilename) : 0;
  auto linesFilename__ = linesFilename ? _fbb.CreateString(linesFilename) : 0;
  auto vectorsFilename__ = vectorsFilename ? _fbb.CreateString(vectorsFilename) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateNavigationalObstruction_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      cycleDate__,
      obstacleType__,
      obstacleId__,
      externalId__,
      origId__,
      countryCode__,
      provinceCode__,
      pointLat,
      pointLon,
      lineNELon,
      lineNELat,
      lineSWLon,
      lineSWLat,
      segStartPoint,
      segEndPoint,
      segNum,
      facc__,
      featureCode__,
      featureType__,
      featureName__,
      featureDescription__,
      wac__,
      wacINNR__,
      multObs__,
      numObs,
      horizDatumCode__,
      heightAGL,
      heightAGLAcc,
      heightMSL,
      heightMSLAcc,
      elevation,
      elevationAcc,
      horizAcc,
      quality__,
      lightingCode__,
      surfaceMatCode__,
      directivityCode,
      validationCode,
      transactionCode__,
      processCode__,
      actDelCode__,
      producer__,
      derivingOrg__,
      deletingOrg__,
      sourceDate__,
      revDate__,
      initRecordDate__,
      keys__,
      values__,
      obstacleRemarks__,
      nextCycleDate__,
      baselineCutoffDate__,
      cutoffDate__,
      airacCycle,
      baseAiracCycle,
      ownerCountryCode__,
      boundNELon,
      boundNELat,
      boundSWLon,
      boundSWLat,
      minHeightAGL,
      numPoints,
      numLines,
      dataSetRemarks__,
      pointsFilename__,
      linesFilename__,
      vectorsFilename__,
      rawFileURI__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const NavigationalObstruction_Ingest *GetNavigationalObstruction_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<NavigationalObstruction_Ingest>(buf);
}

inline const NavigationalObstruction_Ingest *GetSizePrefixedNavigationalObstruction_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NavigationalObstruction_Ingest>(buf);
}

inline const char *NavigationalObstruction_IngestIdentifier() {
  return "NAVI";
}

inline bool NavigationalObstruction_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, NavigationalObstruction_IngestIdentifier());
}

inline bool SizePrefixedNavigationalObstruction_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, NavigationalObstruction_IngestIdentifier(), true);
}

inline bool VerifyNavigationalObstruction_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NavigationalObstruction_Ingest>(NavigationalObstruction_IngestIdentifier());
}

inline bool VerifySizePrefixedNavigationalObstruction_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NavigationalObstruction_Ingest>(NavigationalObstruction_IngestIdentifier());
}

inline void FinishNavigationalObstruction_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NavigationalObstruction_Ingest> root) {
  fbb.Finish(root, NavigationalObstruction_IngestIdentifier());
}

inline void FinishSizePrefixedNavigationalObstruction_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NavigationalObstruction_Ingest> root) {
  fbb.FinishSizePrefixed(root, NavigationalObstruction_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
