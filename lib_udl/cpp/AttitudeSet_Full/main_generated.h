// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AttitudeSet_Full;
struct AttitudeSet_FullBuilder;

enum AttitudeSet_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AttitudeSet_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AttitudeSet_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AttitudeSet_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AttitudeSet_Full_dataMode_Enum_EXERCISE = 3,
  AttitudeSet_Full_dataMode_Enum_MIN = AttitudeSet_Full_dataMode_Enum_REAL,
  AttitudeSet_Full_dataMode_Enum_MAX = AttitudeSet_Full_dataMode_Enum_EXERCISE
};

inline const AttitudeSet_Full_dataMode_Enum (&EnumValuesAttitudeSet_Full_dataMode_Enum())[4] {
  static const AttitudeSet_Full_dataMode_Enum values[] = {
    AttitudeSet_Full_dataMode_Enum_REAL,
    AttitudeSet_Full_dataMode_Enum_TEST,
    AttitudeSet_Full_dataMode_Enum_SIMULATED,
    AttitudeSet_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAttitudeSet_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAttitudeSet_Full_dataMode_Enum(AttitudeSet_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AttitudeSet_Full_dataMode_Enum_REAL, AttitudeSet_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAttitudeSet_Full_dataMode_Enum()[index];
}

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
struct AttitudeSet_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttitudeSet_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_SATNO = 10,
    VT_ORIGOBJECTID = 12,
    VT_TYPE = 14,
    VT_ESID = 16,
    VT_ASREF = 18,
    VT_IDSENSOR = 20,
    VT_ORIGSENSORID = 22,
    VT_STARTTIME = 24,
    VT_ENDTIME = 26,
    VT_FRAME1 = 28,
    VT_FRAME2 = 30,
    VT_NUMPOINTS = 32,
    VT_STEPSIZE = 34,
    VT_PRECANGLEINIT = 36,
    VT_SPINANGLEINIT = 38,
    VT_EULERROTSEQ = 40,
    VT_ATTITUDELIST = 42,
    VT_INTERPOLATOR = 44,
    VT_INTERPOLATORDEGREE = 46,
    VT_NOTES = 48,
    VT_CREATEDAT = 50,
    VT_CREATEDBY = 52,
    VT_SOURCE = 54,
    VT_ORIGIN = 56,
    VT_DATAMODE = 58,
    VT_ORIGNETWORK = 60,
    VT_ONORBIT = 62
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ATTITUDESET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the on-orbit satellite to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the on-orbit object to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: D6593
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// The type of attitude message or messages associated with this set.
  /// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
  /// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
  /// Example: /// Example: AEM
  /// Constraints: Minimum length = 1, Maximum length = 3
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *esId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESID);
  }
  /// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
  /// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *asRef() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ASREF);
  }
  /// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
  /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
  /// Example: /// Example: 2022-07-07T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
  /// Example: /// Example: 2022-07-07T18:00:00.654321Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: SCBODY
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *frame1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME1);
  }
  /// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *frame2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRAME2);
  }
  /// Number of attitude records contained in this set.
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  int32_t numPoints() const {
    return GetField<int32_t>(VT_NUMPOINTS, 0);
  }
  /// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
  /// Example: /// Example: 60
  /// Constraints: No constraints specified.
  int32_t stepSize() const {
    return GetField<int32_t>(VT_STEPSIZE, 0);
  }
  /// Initial precession angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 30.5
  /// Constraints: No constraints specified.
  double precAngleInit() const {
    return GetField<double>(VT_PRECANGLEINIT, 0.0);
  }
  /// Initial spin angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 25.5
  /// Constraints: No constraints specified.
  double spinAngleInit() const {
    return GetField<double>(VT_SPINANGLEINIT, 0.0);
  }
  /// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
  /// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *eulerRotSeq() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EULERROTSEQ);
  }
  /// Collection of attitude data associated with this Attitude Set.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *attitudeList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ATTITUDELIST);
  }
  /// Recommended interpolation method for estimating attitude ephemeris data.
  /// Example: /// Example: LINEAR
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *interpolator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTERPOLATOR);
  }
  /// Recommended polynomial interpolation degree.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t interpolatorDegree() const {
    return GetField<int32_t>(VT_INTERPOLATORDEGREE, 0);
  }
  /// Optional notes/comments for this attitude set.
  /// Example: /// Example: Notes for this attitude set
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-07-05T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AttitudeSet_Full_dataMode_Enum dataMode() const {
    return static_cast<AttitudeSet_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_ESID) &&
           verifier.VerifyString(esId()) &&
           VerifyOffset(verifier, VT_ASREF) &&
           verifier.VerifyVector(asRef()) &&
           verifier.VerifyVectorOfStrings(asRef()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_FRAME1) &&
           verifier.VerifyString(frame1()) &&
           VerifyOffset(verifier, VT_FRAME2) &&
           verifier.VerifyString(frame2()) &&
           VerifyField<int32_t>(verifier, VT_NUMPOINTS, 4) &&
           VerifyField<int32_t>(verifier, VT_STEPSIZE, 4) &&
           VerifyField<double>(verifier, VT_PRECANGLEINIT, 8) &&
           VerifyField<double>(verifier, VT_SPINANGLEINIT, 8) &&
           VerifyOffset(verifier, VT_EULERROTSEQ) &&
           verifier.VerifyString(eulerRotSeq()) &&
           VerifyOffset(verifier, VT_ATTITUDELIST) &&
           verifier.VerifyVector(attitudeList()) &&
           verifier.VerifyVectorOfStrings(attitudeList()) &&
           VerifyOffset(verifier, VT_INTERPOLATOR) &&
           verifier.VerifyString(interpolator()) &&
           VerifyField<int32_t>(verifier, VT_INTERPOLATORDEGREE, 4) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           verifier.EndTable();
  }
};

struct AttitudeSet_FullBuilder {
  typedef AttitudeSet_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AttitudeSet_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(AttitudeSet_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(AttitudeSet_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(AttitudeSet_Full::VT_TYPE, type);
  }
  void add_esId(::flatbuffers::Offset<::flatbuffers::String> esId) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ESID, esId);
  }
  void add_asRef(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> asRef) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ASREF, asRef);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(AttitudeSet_Full::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ORIGSENSORID, origSensorId);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(AttitudeSet_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ENDTIME, endTime);
  }
  void add_frame1(::flatbuffers::Offset<::flatbuffers::String> frame1) {
    fbb_.AddOffset(AttitudeSet_Full::VT_FRAME1, frame1);
  }
  void add_frame2(::flatbuffers::Offset<::flatbuffers::String> frame2) {
    fbb_.AddOffset(AttitudeSet_Full::VT_FRAME2, frame2);
  }
  void add_numPoints(int32_t numPoints) {
    fbb_.AddElement<int32_t>(AttitudeSet_Full::VT_NUMPOINTS, numPoints, 0);
  }
  void add_stepSize(int32_t stepSize) {
    fbb_.AddElement<int32_t>(AttitudeSet_Full::VT_STEPSIZE, stepSize, 0);
  }
  void add_precAngleInit(double precAngleInit) {
    fbb_.AddElement<double>(AttitudeSet_Full::VT_PRECANGLEINIT, precAngleInit, 0.0);
  }
  void add_spinAngleInit(double spinAngleInit) {
    fbb_.AddElement<double>(AttitudeSet_Full::VT_SPINANGLEINIT, spinAngleInit, 0.0);
  }
  void add_eulerRotSeq(::flatbuffers::Offset<::flatbuffers::String> eulerRotSeq) {
    fbb_.AddOffset(AttitudeSet_Full::VT_EULERROTSEQ, eulerRotSeq);
  }
  void add_attitudeList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> attitudeList) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ATTITUDELIST, attitudeList);
  }
  void add_interpolator(::flatbuffers::Offset<::flatbuffers::String> interpolator) {
    fbb_.AddOffset(AttitudeSet_Full::VT_INTERPOLATOR, interpolator);
  }
  void add_interpolatorDegree(int32_t interpolatorDegree) {
    fbb_.AddElement<int32_t>(AttitudeSet_Full::VT_INTERPOLATORDEGREE, interpolatorDegree, 0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(AttitudeSet_Full::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AttitudeSet_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AttitudeSet_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AttitudeSet_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(AttitudeSet_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AttitudeSet_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(AttitudeSet_Full::VT_ONORBIT, onOrbit);
  }
  explicit AttitudeSet_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttitudeSet_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttitudeSet_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttitudeSet_Full> CreateAttitudeSet_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> esId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> asRef = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frame1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frame2 = 0,
    int32_t numPoints = 0,
    int32_t stepSize = 0,
    double precAngleInit = 0.0,
    double spinAngleInit = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> eulerRotSeq = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> attitudeList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> interpolator = 0,
    int32_t interpolatorDegree = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    AttitudeSet_Full_dataMode_Enum dataMode = AttitudeSet_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0) {
  AttitudeSet_FullBuilder builder_(_fbb);
  builder_.add_spinAngleInit(spinAngleInit);
  builder_.add_precAngleInit(precAngleInit);
  builder_.add_onOrbit(onOrbit);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_interpolatorDegree(interpolatorDegree);
  builder_.add_interpolator(interpolator);
  builder_.add_attitudeList(attitudeList);
  builder_.add_eulerRotSeq(eulerRotSeq);
  builder_.add_stepSize(stepSize);
  builder_.add_numPoints(numPoints);
  builder_.add_frame2(frame2);
  builder_.add_frame1(frame1);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_asRef(asRef);
  builder_.add_esId(esId);
  builder_.add_type(type);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttitudeSet_Full> CreateAttitudeSet_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *type = nullptr,
    const char *esId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *asRef = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *frame1 = nullptr,
    const char *frame2 = nullptr,
    int32_t numPoints = 0,
    int32_t stepSize = 0,
    double precAngleInit = 0.0,
    double spinAngleInit = 0.0,
    const char *eulerRotSeq = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *attitudeList = nullptr,
    const char *interpolator = nullptr,
    int32_t interpolatorDegree = 0,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    AttitudeSet_Full_dataMode_Enum dataMode = AttitudeSet_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr,
    const char *onOrbit = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto esId__ = esId ? _fbb.CreateString(esId) : 0;
  auto asRef__ = asRef ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*asRef) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto frame1__ = frame1 ? _fbb.CreateString(frame1) : 0;
  auto frame2__ = frame2 ? _fbb.CreateString(frame2) : 0;
  auto eulerRotSeq__ = eulerRotSeq ? _fbb.CreateString(eulerRotSeq) : 0;
  auto attitudeList__ = attitudeList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*attitudeList) : 0;
  auto interpolator__ = interpolator ? _fbb.CreateString(interpolator) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  return CreateAttitudeSet_Full(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      type__,
      esId__,
      asRef__,
      idSensor__,
      origSensorId__,
      startTime__,
      endTime__,
      frame1__,
      frame2__,
      numPoints,
      stepSize,
      precAngleInit,
      spinAngleInit,
      eulerRotSeq__,
      attitudeList__,
      interpolator__,
      interpolatorDegree,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__,
      onOrbit__);
}

inline const AttitudeSet_Full *GetAttitudeSet_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AttitudeSet_Full>(buf);
}

inline const AttitudeSet_Full *GetSizePrefixedAttitudeSet_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AttitudeSet_Full>(buf);
}

inline const char *AttitudeSet_FullIdentifier() {
  return "ATTI";
}

inline bool AttitudeSet_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AttitudeSet_FullIdentifier());
}

inline bool SizePrefixedAttitudeSet_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AttitudeSet_FullIdentifier(), true);
}

inline bool VerifyAttitudeSet_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AttitudeSet_Full>(AttitudeSet_FullIdentifier());
}

inline bool VerifySizePrefixedAttitudeSet_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AttitudeSet_Full>(AttitudeSet_FullIdentifier());
}

inline void FinishAttitudeSet_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AttitudeSet_Full> root) {
  fbb.Finish(root, AttitudeSet_FullIdentifier());
}

inline void FinishSizePrefixedAttitudeSet_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AttitudeSet_Full> root) {
  fbb.FinishSizePrefixed(root, AttitudeSet_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
