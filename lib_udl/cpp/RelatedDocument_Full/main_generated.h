// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RelatedDocument_Full;
struct RelatedDocument_FullBuilder;

/// /// Related document ids.
struct RelatedDocument_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RelatedDocument_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DOCUMENTID = 4,
    VT_DATASOURCEREFS = 6
  };
  /// The document id of the related document.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *documentId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOCUMENTID);
  }
  /// List of data sources related to this document.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dataSourceRefs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DATASOURCEREFS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DOCUMENTID) &&
           verifier.VerifyString(documentId()) &&
           VerifyOffset(verifier, VT_DATASOURCEREFS) &&
           verifier.VerifyVector(dataSourceRefs()) &&
           verifier.VerifyVectorOfStrings(dataSourceRefs()) &&
           verifier.EndTable();
  }
};

struct RelatedDocument_FullBuilder {
  typedef RelatedDocument_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_documentId(::flatbuffers::Offset<::flatbuffers::String> documentId) {
    fbb_.AddOffset(RelatedDocument_Full::VT_DOCUMENTID, documentId);
  }
  void add_dataSourceRefs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dataSourceRefs) {
    fbb_.AddOffset(RelatedDocument_Full::VT_DATASOURCEREFS, dataSourceRefs);
  }
  explicit RelatedDocument_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RelatedDocument_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RelatedDocument_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RelatedDocument_Full> CreateRelatedDocument_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> documentId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dataSourceRefs = 0) {
  RelatedDocument_FullBuilder builder_(_fbb);
  builder_.add_dataSourceRefs(dataSourceRefs);
  builder_.add_documentId(documentId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RelatedDocument_Full> CreateRelatedDocument_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *documentId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dataSourceRefs = nullptr) {
  auto documentId__ = documentId ? _fbb.CreateString(documentId) : 0;
  auto dataSourceRefs__ = dataSourceRefs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dataSourceRefs) : 0;
  return CreateRelatedDocument_Full(
      _fbb,
      documentId__,
      dataSourceRefs__);
}

inline const RelatedDocument_Full *GetRelatedDocument_Full(const void *buf) {
  return ::flatbuffers::GetRoot<RelatedDocument_Full>(buf);
}

inline const RelatedDocument_Full *GetSizePrefixedRelatedDocument_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RelatedDocument_Full>(buf);
}

inline const char *RelatedDocument_FullIdentifier() {
  return "RELA";
}

inline bool RelatedDocument_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RelatedDocument_FullIdentifier());
}

inline bool SizePrefixedRelatedDocument_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RelatedDocument_FullIdentifier(), true);
}

inline bool VerifyRelatedDocument_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RelatedDocument_Full>(RelatedDocument_FullIdentifier());
}

inline bool VerifySizePrefixedRelatedDocument_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RelatedDocument_Full>(RelatedDocument_FullIdentifier());
}

inline void FinishRelatedDocument_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RelatedDocument_Full> root) {
  fbb.Finish(root, RelatedDocument_FullIdentifier());
}

inline void FinishSizePrefixedRelatedDocument_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RelatedDocument_Full> root) {
  fbb.FinishSizePrefixed(root, RelatedDocument_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
