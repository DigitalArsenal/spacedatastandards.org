// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DiplomaticClearance_Abridged;
struct DiplomaticClearance_AbridgedBuilder;

enum DiplomaticClearance_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  DiplomaticClearance_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  DiplomaticClearance_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  DiplomaticClearance_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  DiplomaticClearance_Abridged_dataMode_Enum_EXERCISE = 3,
  DiplomaticClearance_Abridged_dataMode_Enum_MIN = DiplomaticClearance_Abridged_dataMode_Enum_REAL,
  DiplomaticClearance_Abridged_dataMode_Enum_MAX = DiplomaticClearance_Abridged_dataMode_Enum_EXERCISE
};

inline const DiplomaticClearance_Abridged_dataMode_Enum (&EnumValuesDiplomaticClearance_Abridged_dataMode_Enum())[4] {
  static const DiplomaticClearance_Abridged_dataMode_Enum values[] = {
    DiplomaticClearance_Abridged_dataMode_Enum_REAL,
    DiplomaticClearance_Abridged_dataMode_Enum_TEST,
    DiplomaticClearance_Abridged_dataMode_Enum_SIMULATED,
    DiplomaticClearance_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesDiplomaticClearance_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameDiplomaticClearance_Abridged_dataMode_Enum(DiplomaticClearance_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, DiplomaticClearance_Abridged_dataMode_Enum_REAL, DiplomaticClearance_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDiplomaticClearance_Abridged_dataMode_Enum()[index];
}

/// /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
struct DiplomaticClearance_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DiplomaticClearance_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDMISSION = 8,
    VT_EXTERNALWORKSHEETID = 10,
    VT_DIPWORKSHEETNAME = 12,
    VT_FIRSTDEPDATE = 14,
    VT_DOCDEADLINE = 16,
    VT_APACSID = 18,
    VT_DIPLOMATICCLEARANCEDETAILS = 20,
    VT_DIPLOMATICCLEARANCEREMARKS = 22,
    VT_CREATEDAT = 24,
    VT_CREATEDBY = 26,
    VT_UPDATEDAT = 28,
    VT_UPDATEDBY = 30,
    VT_SOURCEDL = 32,
    VT_SOURCE = 34,
    VT_ORIGIN = 36,
    VT_ORIGNETWORK = 38,
    VT_DATAMODE = 40
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the Mission associated with this diplomatic clearance record.
  /// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDMISSION);
  }
  /// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 990ae849089e3d6cad69655324176bb6
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalWorksheetId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALWORKSHEETID);
  }
  /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  /// Example: /// Example: G2-939911-AC
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *dipWorksheetName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DIPWORKSHEETNAME);
  }
  /// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *firstDepDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTDEPDATE);
  }
  /// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *docDeadline() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOCDEADLINE);
  }
  /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
  /// Example: /// Example: 1083034
  /// Constraints: Minimum length = 0, Maximum length = 40
  const ::flatbuffers::String *apacsId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APACSID);
  }
  /// Collection of diplomatic clearance details.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *diplomaticClearanceDetails() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIPLOMATICCLEARANCEDETAILS);
  }
  /// Collection of diplomatic clearance remarks.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *diplomaticClearanceRemarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIPLOMATICCLEARANCEREMARKS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  DiplomaticClearance_Abridged_dataMode_Enum dataMode() const {
    return static_cast<DiplomaticClearance_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDMISSION) &&
           verifier.VerifyString(idMission()) &&
           VerifyOffset(verifier, VT_EXTERNALWORKSHEETID) &&
           verifier.VerifyString(externalWorksheetId()) &&
           VerifyOffset(verifier, VT_DIPWORKSHEETNAME) &&
           verifier.VerifyString(dipWorksheetName()) &&
           VerifyOffset(verifier, VT_FIRSTDEPDATE) &&
           verifier.VerifyString(firstDepDate()) &&
           VerifyOffset(verifier, VT_DOCDEADLINE) &&
           verifier.VerifyString(docDeadline()) &&
           VerifyOffset(verifier, VT_APACSID) &&
           verifier.VerifyString(apacsId()) &&
           VerifyOffset(verifier, VT_DIPLOMATICCLEARANCEDETAILS) &&
           verifier.VerifyVector(diplomaticClearanceDetails()) &&
           verifier.VerifyVectorOfStrings(diplomaticClearanceDetails()) &&
           VerifyOffset(verifier, VT_DIPLOMATICCLEARANCEREMARKS) &&
           verifier.VerifyVector(diplomaticClearanceRemarks()) &&
           verifier.VerifyVectorOfStrings(diplomaticClearanceRemarks()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct DiplomaticClearance_AbridgedBuilder {
  typedef DiplomaticClearance_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idMission(::flatbuffers::Offset<::flatbuffers::String> idMission) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_IDMISSION, idMission);
  }
  void add_externalWorksheetId(::flatbuffers::Offset<::flatbuffers::String> externalWorksheetId) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_EXTERNALWORKSHEETID, externalWorksheetId);
  }
  void add_dipWorksheetName(::flatbuffers::Offset<::flatbuffers::String> dipWorksheetName) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_DIPWORKSHEETNAME, dipWorksheetName);
  }
  void add_firstDepDate(::flatbuffers::Offset<::flatbuffers::String> firstDepDate) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_FIRSTDEPDATE, firstDepDate);
  }
  void add_docDeadline(::flatbuffers::Offset<::flatbuffers::String> docDeadline) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_DOCDEADLINE, docDeadline);
  }
  void add_apacsId(::flatbuffers::Offset<::flatbuffers::String> apacsId) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_APACSID, apacsId);
  }
  void add_diplomaticClearanceDetails(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diplomaticClearanceDetails) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEDETAILS, diplomaticClearanceDetails);
  }
  void add_diplomaticClearanceRemarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diplomaticClearanceRemarks) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEREMARKS, diplomaticClearanceRemarks);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(DiplomaticClearance_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(DiplomaticClearance_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(DiplomaticClearance_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit DiplomaticClearance_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DiplomaticClearance_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DiplomaticClearance_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DiplomaticClearance_Abridged> CreateDiplomaticClearance_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalWorksheetId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dipWorksheetName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> firstDepDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> docDeadline = 0,
    ::flatbuffers::Offset<::flatbuffers::String> apacsId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diplomaticClearanceDetails = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diplomaticClearanceRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    DiplomaticClearance_Abridged_dataMode_Enum dataMode = DiplomaticClearance_Abridged_dataMode_Enum_REAL) {
  DiplomaticClearance_AbridgedBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_diplomaticClearanceRemarks(diplomaticClearanceRemarks);
  builder_.add_diplomaticClearanceDetails(diplomaticClearanceDetails);
  builder_.add_apacsId(apacsId);
  builder_.add_docDeadline(docDeadline);
  builder_.add_firstDepDate(firstDepDate);
  builder_.add_dipWorksheetName(dipWorksheetName);
  builder_.add_externalWorksheetId(externalWorksheetId);
  builder_.add_idMission(idMission);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DiplomaticClearance_Abridged> CreateDiplomaticClearance_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idMission = nullptr,
    const char *externalWorksheetId = nullptr,
    const char *dipWorksheetName = nullptr,
    const char *firstDepDate = nullptr,
    const char *docDeadline = nullptr,
    const char *apacsId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *diplomaticClearanceDetails = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *diplomaticClearanceRemarks = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    DiplomaticClearance_Abridged_dataMode_Enum dataMode = DiplomaticClearance_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idMission__ = idMission ? _fbb.CreateString(idMission) : 0;
  auto externalWorksheetId__ = externalWorksheetId ? _fbb.CreateString(externalWorksheetId) : 0;
  auto dipWorksheetName__ = dipWorksheetName ? _fbb.CreateString(dipWorksheetName) : 0;
  auto firstDepDate__ = firstDepDate ? _fbb.CreateString(firstDepDate) : 0;
  auto docDeadline__ = docDeadline ? _fbb.CreateString(docDeadline) : 0;
  auto apacsId__ = apacsId ? _fbb.CreateString(apacsId) : 0;
  auto diplomaticClearanceDetails__ = diplomaticClearanceDetails ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*diplomaticClearanceDetails) : 0;
  auto diplomaticClearanceRemarks__ = diplomaticClearanceRemarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*diplomaticClearanceRemarks) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateDiplomaticClearance_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idMission__,
      externalWorksheetId__,
      dipWorksheetName__,
      firstDepDate__,
      docDeadline__,
      apacsId__,
      diplomaticClearanceDetails__,
      diplomaticClearanceRemarks__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const DiplomaticClearance_Abridged *GetDiplomaticClearance_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DiplomaticClearance_Abridged>(buf);
}

inline const DiplomaticClearance_Abridged *GetSizePrefixedDiplomaticClearance_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DiplomaticClearance_Abridged>(buf);
}

inline const char *DiplomaticClearance_AbridgedIdentifier() {
  return "DIPL";
}

inline bool DiplomaticClearance_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DiplomaticClearance_AbridgedIdentifier());
}

inline bool SizePrefixedDiplomaticClearance_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DiplomaticClearance_AbridgedIdentifier(), true);
}

inline bool VerifyDiplomaticClearance_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DiplomaticClearance_Abridged>(DiplomaticClearance_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDiplomaticClearance_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DiplomaticClearance_Abridged>(DiplomaticClearance_AbridgedIdentifier());
}

inline void FinishDiplomaticClearance_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DiplomaticClearance_Abridged> root) {
  fbb.Finish(root, DiplomaticClearance_AbridgedIdentifier());
}

inline void FinishSizePrefixedDiplomaticClearance_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DiplomaticClearance_Abridged> root) {
  fbb.FinishSizePrefixed(root, DiplomaticClearance_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
