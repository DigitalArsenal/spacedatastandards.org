// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SEObservation_Ingest;
struct SEObservation_IngestBuilder;

/// /// A single space environment observation.
struct SEObservation_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SEObservation_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBTYPE = 4,
    VT_OBUOM = 6,
    VT_OBVALUE = 8,
    VT_OBSTRING = 10,
    VT_OBARRAY = 12,
    VT_OBBOOL = 14,
    VT_OBQUALITY = 16,
    VT_OBDESCRIPTION = 18
  };
  /// The type of observation associated with this record.
  /// Example: /// Example: INTEGRAL FLUX
  /// Constraints: Minimum length = 1, Maximum length = 24
  const ::flatbuffers::String *obType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTYPE);
  }
  /// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
  /// Example: /// Example: particles/cm^2/s/sr
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *obUoM() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBUOM);
  }
  /// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: 0.487687826
  /// Constraints: No constraints specified.
  double obValue() const {
    return GetField<double>(VT_OBVALUE, 0.0);
  }
  /// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: C1.3
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *obString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTRING);
  }
  /// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *obArray() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OBARRAY);
  }
  /// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool obBool() const {
    return GetField<uint8_t>(VT_OBBOOL, 0) != 0;
  }
  /// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *obQuality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBQUALITY);
  }
  /// Descriptive or additional information associated with this individual observation.
  /// Example: /// Example: Observation Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *obDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBDESCRIPTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBTYPE) &&
           verifier.VerifyString(obType()) &&
           VerifyOffset(verifier, VT_OBUOM) &&
           verifier.VerifyString(obUoM()) &&
           VerifyField<double>(verifier, VT_OBVALUE, 8) &&
           VerifyOffset(verifier, VT_OBSTRING) &&
           verifier.VerifyString(obString()) &&
           VerifyOffset(verifier, VT_OBARRAY) &&
           verifier.VerifyVector(obArray()) &&
           verifier.VerifyVectorOfStrings(obArray()) &&
           VerifyField<uint8_t>(verifier, VT_OBBOOL, 1) &&
           VerifyOffset(verifier, VT_OBQUALITY) &&
           verifier.VerifyString(obQuality()) &&
           VerifyOffset(verifier, VT_OBDESCRIPTION) &&
           verifier.VerifyString(obDescription()) &&
           verifier.EndTable();
  }
};

struct SEObservation_IngestBuilder {
  typedef SEObservation_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obType(::flatbuffers::Offset<::flatbuffers::String> obType) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBTYPE, obType);
  }
  void add_obUoM(::flatbuffers::Offset<::flatbuffers::String> obUoM) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBUOM, obUoM);
  }
  void add_obValue(double obValue) {
    fbb_.AddElement<double>(SEObservation_Ingest::VT_OBVALUE, obValue, 0.0);
  }
  void add_obString(::flatbuffers::Offset<::flatbuffers::String> obString) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBSTRING, obString);
  }
  void add_obArray(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obArray) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBARRAY, obArray);
  }
  void add_obBool(bool obBool) {
    fbb_.AddElement<uint8_t>(SEObservation_Ingest::VT_OBBOOL, static_cast<uint8_t>(obBool), 0);
  }
  void add_obQuality(::flatbuffers::Offset<::flatbuffers::String> obQuality) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBQUALITY, obQuality);
  }
  void add_obDescription(::flatbuffers::Offset<::flatbuffers::String> obDescription) {
    fbb_.AddOffset(SEObservation_Ingest::VT_OBDESCRIPTION, obDescription);
  }
  explicit SEObservation_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SEObservation_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SEObservation_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SEObservation_Ingest> CreateSEObservation_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> obType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obUoM = 0,
    double obValue = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> obString = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obArray = 0,
    bool obBool = false,
    ::flatbuffers::Offset<::flatbuffers::String> obQuality = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obDescription = 0) {
  SEObservation_IngestBuilder builder_(_fbb);
  builder_.add_obValue(obValue);
  builder_.add_obDescription(obDescription);
  builder_.add_obQuality(obQuality);
  builder_.add_obArray(obArray);
  builder_.add_obString(obString);
  builder_.add_obUoM(obUoM);
  builder_.add_obType(obType);
  builder_.add_obBool(obBool);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SEObservation_Ingest> CreateSEObservation_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *obType = nullptr,
    const char *obUoM = nullptr,
    double obValue = 0.0,
    const char *obString = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *obArray = nullptr,
    bool obBool = false,
    const char *obQuality = nullptr,
    const char *obDescription = nullptr) {
  auto obType__ = obType ? _fbb.CreateString(obType) : 0;
  auto obUoM__ = obUoM ? _fbb.CreateString(obUoM) : 0;
  auto obString__ = obString ? _fbb.CreateString(obString) : 0;
  auto obArray__ = obArray ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*obArray) : 0;
  auto obQuality__ = obQuality ? _fbb.CreateString(obQuality) : 0;
  auto obDescription__ = obDescription ? _fbb.CreateString(obDescription) : 0;
  return CreateSEObservation_Ingest(
      _fbb,
      obType__,
      obUoM__,
      obValue,
      obString__,
      obArray__,
      obBool,
      obQuality__,
      obDescription__);
}

inline const SEObservation_Ingest *GetSEObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<SEObservation_Ingest>(buf);
}

inline const SEObservation_Ingest *GetSizePrefixedSEObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SEObservation_Ingest>(buf);
}

inline const char *SEObservation_IngestIdentifier() {
  return "SEOB";
}

inline bool SEObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SEObservation_IngestIdentifier());
}

inline bool SizePrefixedSEObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SEObservation_IngestIdentifier(), true);
}

inline bool VerifySEObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SEObservation_Ingest>(SEObservation_IngestIdentifier());
}

inline bool VerifySizePrefixedSEObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SEObservation_Ingest>(SEObservation_IngestIdentifier());
}

inline void FinishSEObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SEObservation_Ingest> root) {
  fbb.Finish(root, SEObservation_IngestIdentifier());
}

inline void FinishSizePrefixedSEObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SEObservation_Ingest> root) {
  fbb.FinishSizePrefixed(root, SEObservation_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
