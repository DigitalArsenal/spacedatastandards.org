// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RadarObservation_Ingest;
struct RadarObservation_IngestBuilder;

enum RadarObservation_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  RadarObservation_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  RadarObservation_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  RadarObservation_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  RadarObservation_Ingest_dataMode_Enum_EXERCISE = 3,
  RadarObservation_Ingest_dataMode_Enum_MIN = RadarObservation_Ingest_dataMode_Enum_REAL,
  RadarObservation_Ingest_dataMode_Enum_MAX = RadarObservation_Ingest_dataMode_Enum_EXERCISE
};

inline const RadarObservation_Ingest_dataMode_Enum (&EnumValuesRadarObservation_Ingest_dataMode_Enum())[4] {
  static const RadarObservation_Ingest_dataMode_Enum values[] = {
    RadarObservation_Ingest_dataMode_Enum_REAL,
    RadarObservation_Ingest_dataMode_Enum_TEST,
    RadarObservation_Ingest_dataMode_Enum_SIMULATED,
    RadarObservation_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesRadarObservation_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRadarObservation_Ingest_dataMode_Enum(RadarObservation_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, RadarObservation_Ingest_dataMode_Enum_REAL, RadarObservation_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRadarObservation_Ingest_dataMode_Enum()[index];
}

enum RadarObservation_Ingest_senReferenceFrame_Enum : int8_t {
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_J2000 = 0,
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_EFG_TDR = 1,
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_ECR_ECEF = 2,
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_TEME = 3,
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_ITRF = 4,
  /// No description available.
  RadarObservation_Ingest_senReferenceFrame_Enum_GCRF = 5,
  RadarObservation_Ingest_senReferenceFrame_Enum_MIN = RadarObservation_Ingest_senReferenceFrame_Enum_J2000,
  RadarObservation_Ingest_senReferenceFrame_Enum_MAX = RadarObservation_Ingest_senReferenceFrame_Enum_GCRF
};

inline const RadarObservation_Ingest_senReferenceFrame_Enum (&EnumValuesRadarObservation_Ingest_senReferenceFrame_Enum())[6] {
  static const RadarObservation_Ingest_senReferenceFrame_Enum values[] = {
    RadarObservation_Ingest_senReferenceFrame_Enum_J2000,
    RadarObservation_Ingest_senReferenceFrame_Enum_EFG_TDR,
    RadarObservation_Ingest_senReferenceFrame_Enum_ECR_ECEF,
    RadarObservation_Ingest_senReferenceFrame_Enum_TEME,
    RadarObservation_Ingest_senReferenceFrame_Enum_ITRF,
    RadarObservation_Ingest_senReferenceFrame_Enum_GCRF
  };
  return values;
}

inline const char * const *EnumNamesRadarObservation_Ingest_senReferenceFrame_Enum() {
  static const char * const names[7] = {
    "J2000",
    "EFG_TDR",
    "ECR_ECEF",
    "TEME",
    "ITRF",
    "GCRF",
    nullptr
  };
  return names;
}

inline const char *EnumNameRadarObservation_Ingest_senReferenceFrame_Enum(RadarObservation_Ingest_senReferenceFrame_Enum e) {
  if (::flatbuffers::IsOutRange(e, RadarObservation_Ingest_senReferenceFrame_Enum_J2000, RadarObservation_Ingest_senReferenceFrame_Enum_GCRF)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRadarObservation_Ingest_senReferenceFrame_Enum()[index];
}

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
struct RadarObservation_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RadarObservation_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_OBTIME = 8,
    VT_IDONORBIT = 10,
    VT_IDSENSOR = 12,
    VT_SATNO = 14,
    VT_TASKID = 16,
    VT_TRANSACTIONID = 18,
    VT_TRACKID = 20,
    VT_OBPOSITION = 22,
    VT_ORIGOBJECTID = 24,
    VT_ORIGSENSORID = 26,
    VT_UCT = 28,
    VT_AZIMUTH = 30,
    VT_AZIMUTHUNC = 32,
    VT_AZIMUTHBIAS = 34,
    VT_AZIMUTHRATE = 36,
    VT_ELEVATION = 38,
    VT_ELEVATIONUNC = 40,
    VT_ELEVATIONBIAS = 42,
    VT_ELEVATIONRATE = 44,
    VT_RANGE = 46,
    VT_RANGEACCEL = 48,
    VT_RANGEACCELUNC = 50,
    VT_RANGEUNC = 52,
    VT_RANGEBIAS = 54,
    VT_RANGERATE = 56,
    VT_RANGERATEUNC = 58,
    VT_DOPPLER = 60,
    VT_DOPPLERUNC = 62,
    VT_RA = 64,
    VT_DECLINATION = 66,
    VT_X = 68,
    VT_Y = 70,
    VT_Z = 72,
    VT_XVEL = 74,
    VT_YVEL = 76,
    VT_ZVEL = 78,
    VT_SENX = 80,
    VT_SENY = 82,
    VT_SENZ = 84,
    VT_RCS = 86,
    VT_RCSUNC = 88,
    VT_ORTHOGONALRCS = 90,
    VT_ORTHOGONALRCSUNC = 92,
    VT_SNR = 94,
    VT_BEAM = 96,
    VT_TIMINGBIAS = 98,
    VT_RAWFILEURI = 100,
    VT_SOURCE = 102,
    VT_ORIGIN = 104,
    VT_DATAMODE = 106,
    VT_TAGS = 108,
    VT_CREATEDAT = 110,
    VT_CREATEDBY = 112,
    VT_SENREFERENCEFRAME = 114,
    VT_DESCRIPTOR = 116,
    VT_ORIGNETWORK = 118,
    VT_SOURCEDL = 120,
    VT_TYPE = 122
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RADAROBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *taskId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASKID);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trackId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRACKID);
  }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *obPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBPOSITION);
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool uct() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double azimuth() const {
    return GetField<double>(VT_AZIMUTH, 0.0);
  }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double azimuthUnc() const {
    return GetField<double>(VT_AZIMUTHUNC, 0.0);
  }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double azimuthBias() const {
    return GetField<double>(VT_AZIMUTHBIAS, 0.0);
  }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double azimuthRate() const {
    return GetField<double>(VT_AZIMUTHRATE, 0.0);
  }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double elevation() const {
    return GetField<double>(VT_ELEVATION, 0.0);
  }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double elevationUnc() const {
    return GetField<double>(VT_ELEVATIONUNC, 0.0);
  }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double elevationBias() const {
    return GetField<double>(VT_ELEVATIONBIAS, 0.0);
  }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double elevationRate() const {
    return GetField<double>(VT_ELEVATIONRATE, 0.0);
  }
  /// Target range in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  double range() const {
    return GetField<double>(VT_RANGE, 0.0);
  }
  /// Range accelaration in km/s2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double rangeAccel() const {
    return GetField<double>(VT_RANGEACCEL, 0.0);
  }
  /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rangeAccelUnc() const {
    return GetField<double>(VT_RANGEACCELUNC, 0.0);
  }
  /// One sigma uncertainty in the range measurement, in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rangeUnc() const {
    return GetField<double>(VT_RANGEUNC, 0.0);
  }
  /// Sensor range bias in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rangeBias() const {
    return GetField<double>(VT_RANGEBIAS, 0.0);
  }
  /// Rate of change of the line of sight range in km/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rangeRate() const {
    return GetField<double>(VT_RANGERATE, 0.0);
  }
  /// One sigma uncertainty in the range rate measurement, in kilometers/second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double rangeRateUnc() const {
    return GetField<double>(VT_RANGERATEUNC, 0.0);
  }
  /// Corrected doppler measurement in meters per second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double doppler() const {
    return GetField<double>(VT_DOPPLER, 0.0);
  }
  /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double dopplerUnc() const {
    return GetField<double>(VT_DOPPLERUNC, 0.0);
  }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double ra() const {
    return GetField<double>(VT_RA, 0.0);
  }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double declination() const {
    return GetField<double>(VT_DECLINATION, 0.0);
  }
  /// X position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// Y position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  /// Z position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  /// X velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double xvel() const {
    return GetField<double>(VT_XVEL, 0.0);
  }
  /// Y velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double yvel() const {
    return GetField<double>(VT_YVEL, 0.0);
  }
  /// Z velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double zvel() const {
    return GetField<double>(VT_ZVEL, 0.0);
  }
  /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double senx() const {
    return GetField<double>(VT_SENX, 0.0);
  }
  /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 40.23
  /// Constraints: No constraints specified.
  double seny() const {
    return GetField<double>(VT_SENY, 0.0);
  }
  /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 35.23
  /// Constraints: No constraints specified.
  double senz() const {
    return GetField<double>(VT_SENZ, 0.0);
  }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  double rcs() const {
    return GetField<double>(VT_RCS, 0.0);
  }
  /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rcsUnc() const {
    return GetField<double>(VT_RCSUNC, 0.0);
  }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double orthogonalRcs() const {
    return GetField<double>(VT_ORTHOGONALRCS, 0.0);
  }
  /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double orthogonalRcsUnc() const {
    return GetField<double>(VT_ORTHOGONALRCSUNC, 0.0);
  }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double snr() const {
    return GetField<double>(VT_SNR, 0.0);
  }
  /// ID of the beam that produced this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double beam() const {
    return GetField<double>(VT_BEAM, 0.0);
  }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double timingBias() const {
    return GetField<double>(VT_TIMINGBIAS, 0.0);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: rawFileURI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  RadarObservation_Ingest_dataMode_Enum dataMode() const {
    return static_cast<RadarObservation_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  RadarObservation_Ingest_senReferenceFrame_Enum senReferenceFrame() const {
    return static_cast<RadarObservation_Ingest_senReferenceFrame_Enum>(GetField<int8_t>(VT_SENREFERENCEFRAME, 0));
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_TASKID) &&
           verifier.VerifyString(taskId()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_TRACKID) &&
           verifier.VerifyString(trackId()) &&
           VerifyOffset(verifier, VT_OBPOSITION) &&
           verifier.VerifyString(obPosition()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyField<double>(verifier, VT_AZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHUNC, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHBIAS, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHRATE, 8) &&
           VerifyField<double>(verifier, VT_ELEVATION, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONUNC, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONBIAS, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONRATE, 8) &&
           VerifyField<double>(verifier, VT_RANGE, 8) &&
           VerifyField<double>(verifier, VT_RANGEACCEL, 8) &&
           VerifyField<double>(verifier, VT_RANGEACCELUNC, 8) &&
           VerifyField<double>(verifier, VT_RANGEUNC, 8) &&
           VerifyField<double>(verifier, VT_RANGEBIAS, 8) &&
           VerifyField<double>(verifier, VT_RANGERATE, 8) &&
           VerifyField<double>(verifier, VT_RANGERATEUNC, 8) &&
           VerifyField<double>(verifier, VT_DOPPLER, 8) &&
           VerifyField<double>(verifier, VT_DOPPLERUNC, 8) &&
           VerifyField<double>(verifier, VT_RA, 8) &&
           VerifyField<double>(verifier, VT_DECLINATION, 8) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           VerifyField<double>(verifier, VT_XVEL, 8) &&
           VerifyField<double>(verifier, VT_YVEL, 8) &&
           VerifyField<double>(verifier, VT_ZVEL, 8) &&
           VerifyField<double>(verifier, VT_SENX, 8) &&
           VerifyField<double>(verifier, VT_SENY, 8) &&
           VerifyField<double>(verifier, VT_SENZ, 8) &&
           VerifyField<double>(verifier, VT_RCS, 8) &&
           VerifyField<double>(verifier, VT_RCSUNC, 8) &&
           VerifyField<double>(verifier, VT_ORTHOGONALRCS, 8) &&
           VerifyField<double>(verifier, VT_ORTHOGONALRCSUNC, 8) &&
           VerifyField<double>(verifier, VT_SNR, 8) &&
           VerifyField<double>(verifier, VT_BEAM, 8) &&
           VerifyField<double>(verifier, VT_TIMINGBIAS, 8) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyField<int8_t>(verifier, VT_SENREFERENCEFRAME, 1) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           verifier.EndTable();
  }
};

struct RadarObservation_IngestBuilder {
  typedef RadarObservation_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_OBTIME, obTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_IDSENSOR, idSensor);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(RadarObservation_Ingest::VT_SATNO, satNo, 0);
  }
  void add_taskId(::flatbuffers::Offset<::flatbuffers::String> taskId) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_TASKID, taskId);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_TRANSACTIONID, transactionId);
  }
  void add_trackId(::flatbuffers::Offset<::flatbuffers::String> trackId) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_TRACKID, trackId);
  }
  void add_obPosition(::flatbuffers::Offset<::flatbuffers::String> obPosition) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_OBPOSITION, obPosition);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  void add_uct(bool uct) {
    fbb_.AddElement<uint8_t>(RadarObservation_Ingest::VT_UCT, static_cast<uint8_t>(uct), 0);
  }
  void add_azimuth(double azimuth) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_AZIMUTH, azimuth, 0.0);
  }
  void add_azimuthUnc(double azimuthUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  void add_azimuthBias(double azimuthBias) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_AZIMUTHBIAS, azimuthBias, 0.0);
  }
  void add_azimuthRate(double azimuthRate) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  void add_elevation(double elevation) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ELEVATION, elevation, 0.0);
  }
  void add_elevationUnc(double elevationUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  void add_elevationBias(double elevationBias) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ELEVATIONBIAS, elevationBias, 0.0);
  }
  void add_elevationRate(double elevationRate) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  void add_range(double range) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGE, range, 0.0);
  }
  void add_rangeAccel(double rangeAccel) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGEACCEL, rangeAccel, 0.0);
  }
  void add_rangeAccelUnc(double rangeAccelUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGEACCELUNC, rangeAccelUnc, 0.0);
  }
  void add_rangeUnc(double rangeUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGEUNC, rangeUnc, 0.0);
  }
  void add_rangeBias(double rangeBias) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGEBIAS, rangeBias, 0.0);
  }
  void add_rangeRate(double rangeRate) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGERATE, rangeRate, 0.0);
  }
  void add_rangeRateUnc(double rangeRateUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RANGERATEUNC, rangeRateUnc, 0.0);
  }
  void add_doppler(double doppler) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_DOPPLER, doppler, 0.0);
  }
  void add_dopplerUnc(double dopplerUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_DOPPLERUNC, dopplerUnc, 0.0);
  }
  void add_ra(double ra) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RA, ra, 0.0);
  }
  void add_declination(double declination) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_DECLINATION, declination, 0.0);
  }
  void add_x(double x) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_Z, z, 0.0);
  }
  void add_xvel(double xvel) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_XVEL, xvel, 0.0);
  }
  void add_yvel(double yvel) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_YVEL, yvel, 0.0);
  }
  void add_zvel(double zvel) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ZVEL, zvel, 0.0);
  }
  void add_senx(double senx) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_SENX, senx, 0.0);
  }
  void add_seny(double seny) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_SENY, seny, 0.0);
  }
  void add_senz(double senz) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_SENZ, senz, 0.0);
  }
  void add_rcs(double rcs) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RCS, rcs, 0.0);
  }
  void add_rcsUnc(double rcsUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_RCSUNC, rcsUnc, 0.0);
  }
  void add_orthogonalRcs(double orthogonalRcs) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ORTHOGONALRCS, orthogonalRcs, 0.0);
  }
  void add_orthogonalRcsUnc(double orthogonalRcsUnc) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_ORTHOGONALRCSUNC, orthogonalRcsUnc, 0.0);
  }
  void add_snr(double snr) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_SNR, snr, 0.0);
  }
  void add_beam(double beam) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_BEAM, beam, 0.0);
  }
  void add_timingBias(double timingBias) {
    fbb_.AddElement<double>(RadarObservation_Ingest::VT_TIMINGBIAS, timingBias, 0.0);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(RadarObservation_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(RadarObservation_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_senReferenceFrame(RadarObservation_Ingest_senReferenceFrame_Enum senReferenceFrame) {
    fbb_.AddElement<int8_t>(RadarObservation_Ingest::VT_SENREFERENCEFRAME, static_cast<int8_t>(senReferenceFrame), 0);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_DESCRIPTOR, descriptor);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(RadarObservation_Ingest::VT_TYPE, type);
  }
  explicit RadarObservation_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RadarObservation_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RadarObservation_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RadarObservation_Ingest> CreateRadarObservation_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taskId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trackId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    bool uct = false,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthBias = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationBias = 0.0,
    double elevationRate = 0.0,
    double range = 0.0,
    double rangeAccel = 0.0,
    double rangeAccelUnc = 0.0,
    double rangeUnc = 0.0,
    double rangeBias = 0.0,
    double rangeRate = 0.0,
    double rangeRateUnc = 0.0,
    double doppler = 0.0,
    double dopplerUnc = 0.0,
    double ra = 0.0,
    double declination = 0.0,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double senx = 0.0,
    double seny = 0.0,
    double senz = 0.0,
    double rcs = 0.0,
    double rcsUnc = 0.0,
    double orthogonalRcs = 0.0,
    double orthogonalRcsUnc = 0.0,
    double snr = 0.0,
    double beam = 0.0,
    double timingBias = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    RadarObservation_Ingest_dataMode_Enum dataMode = RadarObservation_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    RadarObservation_Ingest_senReferenceFrame_Enum senReferenceFrame = RadarObservation_Ingest_senReferenceFrame_Enum_J2000,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0) {
  RadarObservation_IngestBuilder builder_(_fbb);
  builder_.add_timingBias(timingBias);
  builder_.add_beam(beam);
  builder_.add_snr(snr);
  builder_.add_orthogonalRcsUnc(orthogonalRcsUnc);
  builder_.add_orthogonalRcs(orthogonalRcs);
  builder_.add_rcsUnc(rcsUnc);
  builder_.add_rcs(rcs);
  builder_.add_senz(senz);
  builder_.add_seny(seny);
  builder_.add_senx(senx);
  builder_.add_zvel(zvel);
  builder_.add_yvel(yvel);
  builder_.add_xvel(xvel);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_declination(declination);
  builder_.add_ra(ra);
  builder_.add_dopplerUnc(dopplerUnc);
  builder_.add_doppler(doppler);
  builder_.add_rangeRateUnc(rangeRateUnc);
  builder_.add_rangeRate(rangeRate);
  builder_.add_rangeBias(rangeBias);
  builder_.add_rangeUnc(rangeUnc);
  builder_.add_rangeAccelUnc(rangeAccelUnc);
  builder_.add_rangeAccel(rangeAccel);
  builder_.add_range(range);
  builder_.add_elevationRate(elevationRate);
  builder_.add_elevationBias(elevationBias);
  builder_.add_elevationUnc(elevationUnc);
  builder_.add_elevation(elevation);
  builder_.add_azimuthRate(azimuthRate);
  builder_.add_azimuthBias(azimuthBias);
  builder_.add_azimuthUnc(azimuthUnc);
  builder_.add_azimuth(azimuth);
  builder_.add_type(type);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_descriptor(descriptor);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_origSensorId(origSensorId);
  builder_.add_origObjectId(origObjectId);
  builder_.add_obPosition(obPosition);
  builder_.add_trackId(trackId);
  builder_.add_transactionId(transactionId);
  builder_.add_taskId(taskId);
  builder_.add_satNo(satNo);
  builder_.add_idSensor(idSensor);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_obTime(obTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_senReferenceFrame(senReferenceFrame);
  builder_.add_dataMode(dataMode);
  builder_.add_uct(uct);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RadarObservation_Ingest> CreateRadarObservation_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *obTime = nullptr,
    const char *idOnOrbit = nullptr,
    const char *idSensor = nullptr,
    int32_t satNo = 0,
    const char *taskId = nullptr,
    const char *transactionId = nullptr,
    const char *trackId = nullptr,
    const char *obPosition = nullptr,
    const char *origObjectId = nullptr,
    const char *origSensorId = nullptr,
    bool uct = false,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthBias = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationBias = 0.0,
    double elevationRate = 0.0,
    double range = 0.0,
    double rangeAccel = 0.0,
    double rangeAccelUnc = 0.0,
    double rangeUnc = 0.0,
    double rangeBias = 0.0,
    double rangeRate = 0.0,
    double rangeRateUnc = 0.0,
    double doppler = 0.0,
    double dopplerUnc = 0.0,
    double ra = 0.0,
    double declination = 0.0,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double senx = 0.0,
    double seny = 0.0,
    double senz = 0.0,
    double rcs = 0.0,
    double rcsUnc = 0.0,
    double orthogonalRcs = 0.0,
    double orthogonalRcsUnc = 0.0,
    double snr = 0.0,
    double beam = 0.0,
    double timingBias = 0.0,
    const char *rawFileURI = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    RadarObservation_Ingest_dataMode_Enum dataMode = RadarObservation_Ingest_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    RadarObservation_Ingest_senReferenceFrame_Enum senReferenceFrame = RadarObservation_Ingest_senReferenceFrame_Enum_J2000,
    const char *descriptor = nullptr,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    const char *type = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto taskId__ = taskId ? _fbb.CreateString(taskId) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto trackId__ = trackId ? _fbb.CreateString(trackId) : 0;
  auto obPosition__ = obPosition ? _fbb.CreateString(obPosition) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return CreateRadarObservation_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      obTime__,
      idOnOrbit__,
      idSensor__,
      satNo,
      taskId__,
      transactionId__,
      trackId__,
      obPosition__,
      origObjectId__,
      origSensorId__,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      range,
      rangeAccel,
      rangeAccelUnc,
      rangeUnc,
      rangeBias,
      rangeRate,
      rangeRateUnc,
      doppler,
      dopplerUnc,
      ra,
      declination,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      senx,
      seny,
      senz,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      beam,
      timingBias,
      rawFileURI__,
      source__,
      origin__,
      dataMode,
      tags__,
      createdAt__,
      createdBy__,
      senReferenceFrame,
      descriptor__,
      origNetwork__,
      sourceDL__,
      type__);
}

inline const RadarObservation_Ingest *GetRadarObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<RadarObservation_Ingest>(buf);
}

inline const RadarObservation_Ingest *GetSizePrefixedRadarObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RadarObservation_Ingest>(buf);
}

inline const char *RadarObservation_IngestIdentifier() {
  return "RADA";
}

inline bool RadarObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RadarObservation_IngestIdentifier());
}

inline bool SizePrefixedRadarObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RadarObservation_IngestIdentifier(), true);
}

inline bool VerifyRadarObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RadarObservation_Ingest>(RadarObservation_IngestIdentifier());
}

inline bool VerifySizePrefixedRadarObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RadarObservation_Ingest>(RadarObservation_IngestIdentifier());
}

inline void FinishRadarObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RadarObservation_Ingest> root) {
  fbb.Finish(root, RadarObservation_IngestIdentifier());
}

inline void FinishSizePrefixedRadarObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RadarObservation_Ingest> root) {
  fbb.FinishSizePrefixed(root, RadarObservation_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
