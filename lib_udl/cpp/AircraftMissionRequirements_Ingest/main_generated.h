// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftMissionRequirements_Ingest;
struct AircraftMissionRequirements_IngestBuilder;

/// /// Collection of Requirements associated with this Air Transport Mission.
struct AircraftMissionRequirements_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftMissionRequirements_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GDSSREQID = 4,
    VT_ONLOADID = 6,
    VT_ONLOADLOCODE = 8,
    VT_OFFLOADID = 10,
    VT_OFFLOADLOCODE = 12,
    VT_ULN = 14,
    VT_TRANSREQNUM = 16,
    VT_PROJNAME = 18,
    VT_OPLAN = 20,
    VT_NUMPAX = 22,
    VT_NUMLITTER = 24,
    VT_NUMAMBULATORY = 26,
    VT_NUMATTENDANT = 28,
    VT_BULKWEIGHT = 30,
    VT_OVERSIZEWEIGHT = 32,
    VT_OUTSIZEWEIGHT = 34,
    VT_EAD = 36,
    VT_LAD = 38
  };
  /// Global Decision Support System (GDSS) mission requirement identifier.
  /// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *gdssReqId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GDSSREQID);
  }
  /// Identifier of the onload itinerary location.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  int32_t onloadId() const {
    return GetField<int32_t>(VT_ONLOADID, 0);
  }
  /// Onload location code.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *onloadLOCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONLOADLOCODE);
  }
  /// Identifier of the offload itinerary location.
  /// Example: /// Example: 300
  /// Constraints: No constraints specified.
  int32_t offloadId() const {
    return GetField<int32_t>(VT_OFFLOADID, 0);
  }
  /// Offload location code.
  /// Example: /// Example: KHOP
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *offloadLOCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OFFLOADLOCODE);
  }
  /// Unit line number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *uln() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ULN);
  }
  /// Transportation requirement number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *transReqNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSREQNUM);
  }
  /// Project name.
  /// Example: /// Example: CENTINTRA21
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *projName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROJNAME);
  }
  /// Identification number of the Operation Plan (OPLAN) associated with this mission.
  /// Example: /// Example: 5027
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *oplan() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPLAN);
  }
  /// Number of passengers associated with the mission.
  /// Example: /// Example: 44
  /// Constraints: No constraints specified.
  int32_t numPax() const {
    return GetField<int32_t>(VT_NUMPAX, 0);
  }
  /// Number of litter patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numLitter() const {
    return GetField<int32_t>(VT_NUMLITTER, 0);
  }
  /// Number of ambulatory patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numAmbulatory() const {
    return GetField<int32_t>(VT_NUMAMBULATORY, 0);
  }
  /// Number of attendants tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numAttendant() const {
    return GetField<int32_t>(VT_NUMATTENDANT, 0);
  }
  /// Total weight of the bulk cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  double bulkWeight() const {
    return GetField<double>(VT_BULKWEIGHT, 0.0);
  }
  /// Total weight of the oversized cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  double oversizeWeight() const {
    return GetField<double>(VT_OVERSIZEWEIGHT, 0.0);
  }
  /// Total weight of the outsize cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  double outsizeWeight() const {
    return GetField<double>(VT_OUTSIZEWEIGHT, 0.0);
  }
  /// Earliest available date the cargo can be picked up.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ead() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EAD);
  }
  /// Latest available date the cargo may be delivered.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lad() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GDSSREQID) &&
           verifier.VerifyString(gdssReqId()) &&
           VerifyField<int32_t>(verifier, VT_ONLOADID, 4) &&
           VerifyOffset(verifier, VT_ONLOADLOCODE) &&
           verifier.VerifyString(onloadLOCode()) &&
           VerifyField<int32_t>(verifier, VT_OFFLOADID, 4) &&
           VerifyOffset(verifier, VT_OFFLOADLOCODE) &&
           verifier.VerifyString(offloadLOCode()) &&
           VerifyOffset(verifier, VT_ULN) &&
           verifier.VerifyString(uln()) &&
           VerifyOffset(verifier, VT_TRANSREQNUM) &&
           verifier.VerifyString(transReqNum()) &&
           VerifyOffset(verifier, VT_PROJNAME) &&
           verifier.VerifyString(projName()) &&
           VerifyOffset(verifier, VT_OPLAN) &&
           verifier.VerifyString(oplan()) &&
           VerifyField<int32_t>(verifier, VT_NUMPAX, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMLITTER, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMAMBULATORY, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMATTENDANT, 4) &&
           VerifyField<double>(verifier, VT_BULKWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_OVERSIZEWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_OUTSIZEWEIGHT, 8) &&
           VerifyOffset(verifier, VT_EAD) &&
           verifier.VerifyString(ead()) &&
           VerifyOffset(verifier, VT_LAD) &&
           verifier.VerifyString(lad()) &&
           verifier.EndTable();
  }
};

struct AircraftMissionRequirements_IngestBuilder {
  typedef AircraftMissionRequirements_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gdssReqId(::flatbuffers::Offset<::flatbuffers::String> gdssReqId) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_GDSSREQID, gdssReqId);
  }
  void add_onloadId(int32_t onloadId) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_ONLOADID, onloadId, 0);
  }
  void add_onloadLOCode(::flatbuffers::Offset<::flatbuffers::String> onloadLOCode) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_ONLOADLOCODE, onloadLOCode);
  }
  void add_offloadId(int32_t offloadId) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_OFFLOADID, offloadId, 0);
  }
  void add_offloadLOCode(::flatbuffers::Offset<::flatbuffers::String> offloadLOCode) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_OFFLOADLOCODE, offloadLOCode);
  }
  void add_uln(::flatbuffers::Offset<::flatbuffers::String> uln) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_ULN, uln);
  }
  void add_transReqNum(::flatbuffers::Offset<::flatbuffers::String> transReqNum) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_TRANSREQNUM, transReqNum);
  }
  void add_projName(::flatbuffers::Offset<::flatbuffers::String> projName) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_PROJNAME, projName);
  }
  void add_oplan(::flatbuffers::Offset<::flatbuffers::String> oplan) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_OPLAN, oplan);
  }
  void add_numPax(int32_t numPax) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_NUMPAX, numPax, 0);
  }
  void add_numLitter(int32_t numLitter) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_NUMLITTER, numLitter, 0);
  }
  void add_numAmbulatory(int32_t numAmbulatory) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_NUMAMBULATORY, numAmbulatory, 0);
  }
  void add_numAttendant(int32_t numAttendant) {
    fbb_.AddElement<int32_t>(AircraftMissionRequirements_Ingest::VT_NUMATTENDANT, numAttendant, 0);
  }
  void add_bulkWeight(double bulkWeight) {
    fbb_.AddElement<double>(AircraftMissionRequirements_Ingest::VT_BULKWEIGHT, bulkWeight, 0.0);
  }
  void add_oversizeWeight(double oversizeWeight) {
    fbb_.AddElement<double>(AircraftMissionRequirements_Ingest::VT_OVERSIZEWEIGHT, oversizeWeight, 0.0);
  }
  void add_outsizeWeight(double outsizeWeight) {
    fbb_.AddElement<double>(AircraftMissionRequirements_Ingest::VT_OUTSIZEWEIGHT, outsizeWeight, 0.0);
  }
  void add_ead(::flatbuffers::Offset<::flatbuffers::String> ead) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_EAD, ead);
  }
  void add_lad(::flatbuffers::Offset<::flatbuffers::String> lad) {
    fbb_.AddOffset(AircraftMissionRequirements_Ingest::VT_LAD, lad);
  }
  explicit AircraftMissionRequirements_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftMissionRequirements_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftMissionRequirements_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftMissionRequirements_Ingest> CreateAircraftMissionRequirements_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> gdssReqId = 0,
    int32_t onloadId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onloadLOCode = 0,
    int32_t offloadId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> offloadLOCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> uln = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transReqNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> projName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> oplan = 0,
    int32_t numPax = 0,
    int32_t numLitter = 0,
    int32_t numAmbulatory = 0,
    int32_t numAttendant = 0,
    double bulkWeight = 0.0,
    double oversizeWeight = 0.0,
    double outsizeWeight = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> ead = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lad = 0) {
  AircraftMissionRequirements_IngestBuilder builder_(_fbb);
  builder_.add_outsizeWeight(outsizeWeight);
  builder_.add_oversizeWeight(oversizeWeight);
  builder_.add_bulkWeight(bulkWeight);
  builder_.add_lad(lad);
  builder_.add_ead(ead);
  builder_.add_numAttendant(numAttendant);
  builder_.add_numAmbulatory(numAmbulatory);
  builder_.add_numLitter(numLitter);
  builder_.add_numPax(numPax);
  builder_.add_oplan(oplan);
  builder_.add_projName(projName);
  builder_.add_transReqNum(transReqNum);
  builder_.add_uln(uln);
  builder_.add_offloadLOCode(offloadLOCode);
  builder_.add_offloadId(offloadId);
  builder_.add_onloadLOCode(onloadLOCode);
  builder_.add_onloadId(onloadId);
  builder_.add_gdssReqId(gdssReqId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftMissionRequirements_Ingest> CreateAircraftMissionRequirements_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *gdssReqId = nullptr,
    int32_t onloadId = 0,
    const char *onloadLOCode = nullptr,
    int32_t offloadId = 0,
    const char *offloadLOCode = nullptr,
    const char *uln = nullptr,
    const char *transReqNum = nullptr,
    const char *projName = nullptr,
    const char *oplan = nullptr,
    int32_t numPax = 0,
    int32_t numLitter = 0,
    int32_t numAmbulatory = 0,
    int32_t numAttendant = 0,
    double bulkWeight = 0.0,
    double oversizeWeight = 0.0,
    double outsizeWeight = 0.0,
    const char *ead = nullptr,
    const char *lad = nullptr) {
  auto gdssReqId__ = gdssReqId ? _fbb.CreateString(gdssReqId) : 0;
  auto onloadLOCode__ = onloadLOCode ? _fbb.CreateString(onloadLOCode) : 0;
  auto offloadLOCode__ = offloadLOCode ? _fbb.CreateString(offloadLOCode) : 0;
  auto uln__ = uln ? _fbb.CreateString(uln) : 0;
  auto transReqNum__ = transReqNum ? _fbb.CreateString(transReqNum) : 0;
  auto projName__ = projName ? _fbb.CreateString(projName) : 0;
  auto oplan__ = oplan ? _fbb.CreateString(oplan) : 0;
  auto ead__ = ead ? _fbb.CreateString(ead) : 0;
  auto lad__ = lad ? _fbb.CreateString(lad) : 0;
  return CreateAircraftMissionRequirements_Ingest(
      _fbb,
      gdssReqId__,
      onloadId,
      onloadLOCode__,
      offloadId,
      offloadLOCode__,
      uln__,
      transReqNum__,
      projName__,
      oplan__,
      numPax,
      numLitter,
      numAmbulatory,
      numAttendant,
      bulkWeight,
      oversizeWeight,
      outsizeWeight,
      ead__,
      lad__);
}

inline const AircraftMissionRequirements_Ingest *GetAircraftMissionRequirements_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftMissionRequirements_Ingest>(buf);
}

inline const AircraftMissionRequirements_Ingest *GetSizePrefixedAircraftMissionRequirements_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftMissionRequirements_Ingest>(buf);
}

inline const char *AircraftMissionRequirements_IngestIdentifier() {
  return "AIRC";
}

inline bool AircraftMissionRequirements_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionRequirements_IngestIdentifier());
}

inline bool SizePrefixedAircraftMissionRequirements_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionRequirements_IngestIdentifier(), true);
}

inline bool VerifyAircraftMissionRequirements_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftMissionRequirements_Ingest>(AircraftMissionRequirements_IngestIdentifier());
}

inline bool VerifySizePrefixedAircraftMissionRequirements_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftMissionRequirements_Ingest>(AircraftMissionRequirements_IngestIdentifier());
}

inline void FinishAircraftMissionRequirements_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionRequirements_Ingest> root) {
  fbb.Finish(root, AircraftMissionRequirements_IngestIdentifier());
}

inline void FinishSizePrefixedAircraftMissionRequirements_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionRequirements_Ingest> root) {
  fbb.FinishSizePrefixed(root, AircraftMissionRequirements_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
