// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataMode;
struct DataModeBuilder;

/// /// No description available.
struct DataMode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataModeBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct DataModeBuilder {
  typedef DataMode Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit DataModeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataMode>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataMode> CreateDataMode(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  DataModeBuilder builder_(_fbb);
  return builder_.Finish();
}

inline const DataMode *GetDataMode(const void *buf) {
  return ::flatbuffers::GetRoot<DataMode>(buf);
}

inline const DataMode *GetSizePrefixedDataMode(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataMode>(buf);
}

inline const char *DataModeIdentifier() {
  return "DATA";
}

inline bool DataModeBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataModeIdentifier());
}

inline bool SizePrefixedDataModeBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataModeIdentifier(), true);
}

inline bool VerifyDataModeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataMode>(DataModeIdentifier());
}

inline bool VerifySizePrefixedDataModeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataMode>(DataModeIdentifier());
}

inline void FinishDataModeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataMode> root) {
  fbb.Finish(root, DataModeIdentifier());
}

inline void FinishSizePrefixedDataModeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataMode> root) {
  fbb.FinishSizePrefixed(root, DataModeIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
