// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacVitalSignData_Full;
struct EvacVitalSignData_FullBuilder;

/// /// Information obtained for vital signs.
struct EvacVitalSignData_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacVitalSignData_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VITALSIGN = 4,
    VT_VITALSIGN1 = 6,
    VT_VITALSIGN2 = 8,
    VT_MEDCONFFACTOR = 10,
    VT_TIME = 12
  };
  /// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
  /// Example: /// Example: HEART RATE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *vitalSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VITALSIGN);
  }
  /// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  double vitalSign1() const {
    return GetField<double>(VT_VITALSIGN1, 0.0);
  }
  /// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 80
  /// Constraints: No constraints specified.
  double vitalSign2() const {
    return GetField<double>(VT_VITALSIGN2, 0.0);
  }
  /// Medical confidence factor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t medConfFactor() const {
    return GetField<int32_t>(VT_MEDCONFFACTOR, 0);
  }
  /// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VITALSIGN) &&
           verifier.VerifyString(vitalSign()) &&
           VerifyField<double>(verifier, VT_VITALSIGN1, 8) &&
           VerifyField<double>(verifier, VT_VITALSIGN2, 8) &&
           VerifyField<int32_t>(verifier, VT_MEDCONFFACTOR, 4) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           verifier.EndTable();
  }
};

struct EvacVitalSignData_FullBuilder {
  typedef EvacVitalSignData_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vitalSign(::flatbuffers::Offset<::flatbuffers::String> vitalSign) {
    fbb_.AddOffset(EvacVitalSignData_Full::VT_VITALSIGN, vitalSign);
  }
  void add_vitalSign1(double vitalSign1) {
    fbb_.AddElement<double>(EvacVitalSignData_Full::VT_VITALSIGN1, vitalSign1, 0.0);
  }
  void add_vitalSign2(double vitalSign2) {
    fbb_.AddElement<double>(EvacVitalSignData_Full::VT_VITALSIGN2, vitalSign2, 0.0);
  }
  void add_medConfFactor(int32_t medConfFactor) {
    fbb_.AddElement<int32_t>(EvacVitalSignData_Full::VT_MEDCONFFACTOR, medConfFactor, 0);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacVitalSignData_Full::VT_TIME, time);
  }
  explicit EvacVitalSignData_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacVitalSignData_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacVitalSignData_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacVitalSignData_Full> CreateEvacVitalSignData_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> vitalSign = 0,
    double vitalSign1 = 0.0,
    double vitalSign2 = 0.0,
    int32_t medConfFactor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0) {
  EvacVitalSignData_FullBuilder builder_(_fbb);
  builder_.add_vitalSign2(vitalSign2);
  builder_.add_vitalSign1(vitalSign1);
  builder_.add_time(time);
  builder_.add_medConfFactor(medConfFactor);
  builder_.add_vitalSign(vitalSign);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacVitalSignData_Full> CreateEvacVitalSignData_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *vitalSign = nullptr,
    double vitalSign1 = 0.0,
    double vitalSign2 = 0.0,
    int32_t medConfFactor = 0,
    const char *time = nullptr) {
  auto vitalSign__ = vitalSign ? _fbb.CreateString(vitalSign) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  return CreateEvacVitalSignData_Full(
      _fbb,
      vitalSign__,
      vitalSign1,
      vitalSign2,
      medConfFactor,
      time__);
}

inline const EvacVitalSignData_Full *GetEvacVitalSignData_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EvacVitalSignData_Full>(buf);
}

inline const EvacVitalSignData_Full *GetSizePrefixedEvacVitalSignData_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacVitalSignData_Full>(buf);
}

inline const char *EvacVitalSignData_FullIdentifier() {
  return "EVAC";
}

inline bool EvacVitalSignData_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacVitalSignData_FullIdentifier());
}

inline bool SizePrefixedEvacVitalSignData_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacVitalSignData_FullIdentifier(), true);
}

inline bool VerifyEvacVitalSignData_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacVitalSignData_Full>(EvacVitalSignData_FullIdentifier());
}

inline bool VerifySizePrefixedEvacVitalSignData_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacVitalSignData_Full>(EvacVitalSignData_FullIdentifier());
}

inline void FinishEvacVitalSignData_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacVitalSignData_Full> root) {
  fbb.Finish(root, EvacVitalSignData_FullIdentifier());
}

inline void FinishSizePrefixedEvacVitalSignData_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacVitalSignData_Full> root) {
  fbb.FinishSizePrefixed(root, EvacVitalSignData_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
