// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitEvent_Full;
struct OnorbitEvent_FullBuilder;

enum OnorbitEvent_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnorbitEvent_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnorbitEvent_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnorbitEvent_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnorbitEvent_Full_dataMode_Enum_EXERCISE = 3,
  OnorbitEvent_Full_dataMode_Enum_MIN = OnorbitEvent_Full_dataMode_Enum_REAL,
  OnorbitEvent_Full_dataMode_Enum_MAX = OnorbitEvent_Full_dataMode_Enum_EXERCISE
};

inline const OnorbitEvent_Full_dataMode_Enum (&EnumValuesOnorbitEvent_Full_dataMode_Enum())[4] {
  static const OnorbitEvent_Full_dataMode_Enum values[] = {
    OnorbitEvent_Full_dataMode_Enum_REAL,
    OnorbitEvent_Full_dataMode_Enum_TEST,
    OnorbitEvent_Full_dataMode_Enum_SIMULATED,
    OnorbitEvent_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnorbitEvent_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnorbitEvent_Full_dataMode_Enum(OnorbitEvent_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnorbitEvent_Full_dataMode_Enum_REAL, OnorbitEvent_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnorbitEvent_Full_dataMode_Enum()[index];
}

/// /// No description available.
struct OnorbitEvent_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitEvent_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_DERIVEDFROM = 8,
    VT_DECLASSIFICATIONDATE = 10,
    VT_DECLASSIFICATIONSTRING = 12,
    VT_IDONORBIT = 14,
    VT_SATNO = 16,
    VT_ORIGOBJECTID = 18,
    VT_EVENTTIME = 20,
    VT_EVENTTIMENOTES = 22,
    VT_OPERATORORGID = 24,
    VT_OWNERORGID = 26,
    VT_LESSEEORGID = 28,
    VT_OPERATEDONBEHALFOFORGID = 30,
    VT_GEOPOSITION = 32,
    VT_PLANESLOT = 34,
    VT_PLANENUMBER = 36,
    VT_POSITIONSTATUS = 38,
    VT_UNTILTIME = 40,
    VT_OFFICIALLOSSDATE = 42,
    VT_NETAMOUNT = 44,
    VT_UNDERLYINGCAUSE = 46,
    VT_CAPABILITYLOSS = 48,
    VT_CAPACITYLOSS = 50,
    VT_INSURANCELOSS = 52,
    VT_THIRDPARTYINSURANCELOSS = 54,
    VT_INJURED = 56,
    VT_KILLED = 58,
    VT_LIFELOST = 60,
    VT_AGEATEVENT = 62,
    VT_ACHIEVEDFLIGHTPHASE = 64,
    VT_OCCURRENCEFLIGHTPHASE = 66,
    VT_STAGEATFAULT = 68,
    VT_EQUIPMENTATFAULT = 70,
    VT_EQUIPMENTTYPEATFAULT = 72,
    VT_EQUIPMENTPARTATFAULT = 74,
    VT_CONSEQUENTIALEQUIPMENTFAILURE = 76,
    VT_INCLINED = 78,
    VT_DESCRIPTION = 80,
    VT_REMARKS = 82,
    VT_INSURANCELOSSNOTES = 84,
    VT_CAPABILITYLOSSNOTES = 86,
    VT_INSURANCECARRIEDNOTES = 88,
    VT_EQUIPMENTCAUSINGLOSSNOTES = 90,
    VT_EVENTTYPE = 92,
    VT_EVENTRESULT = 94,
    VT_OBJECTSTATUS = 96,
    VT_SATELLITEPOSITION = 98,
    VT_SOURCE = 100,
    VT_ORIGIN = 102,
    VT_DATAMODE = 104,
    VT_CREATEDAT = 106,
    VT_CREATEDBY = 108,
    VT_UPDATEDAT = 110,
    VT_UPDATEDBY = 112,
    VT_ONORBIT = 114,
    VT_ORIGNETWORK = 116
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The sources or SCG references from which the classification of this data is derived.
  /// Example: /// Example: DERIVED_SOURCE
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *derivedFrom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DERIVEDFROM);
  }
  /// The declassification date of this data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:02.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *declassificationDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DECLASSIFICATIONDATE);
  }
  /// Declassification string of this data.
  /// Example: /// Example: DECLASS_STRING
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *declassificationString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DECLASSIFICATIONSTRING);
  }
  /// Unique identifier of the on-orbit object for this event.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eventTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTTIME);
  }
  /// Notes/remarks on the validity/accuracy of the eventTime.
  /// Example: /// Example: Notes on validity
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *eventTimeNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTTIMENOTES);
  }
  /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OPERATORORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *operatorOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATORORGID);
  }
  /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OWNERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *ownerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNERORGID);
  }
  /// Unique identifier of the organization which leases this on-orbit spacecraft.
  /// Example: /// Example: LESSEEORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *lesseeOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LESSEEORGID);
  }
  /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
  /// Example: /// Example: OPERATEDONBEHALFOFORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *operatedOnBehalfOfOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATEDONBEHALFOFORGID);
  }
  /// GEO position longitude at event time if applicable. Negative values are west.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double geoPosition() const {
    return GetField<double>(VT_GEOPOSITION, 0.0);
  }
  /// GEO plane slot of the spacecraft at event time.
  /// Example: /// Example: example_slot
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *planeSlot() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANESLOT);
  }
  /// GEO slot plane number/designator of the spacecraft at event time.
  /// Example: /// Example: PL_1
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *planeNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANENUMBER);
  }
  /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
  /// Example: /// Example: Stable
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *positionStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSITIONSTATUS);
  }
  /// Maximum validity time of the event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *untilTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNTILTIME);
  }
  /// Date time of official loss of the spacecraft.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *officialLossDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OFFICIALLOSSDATE);
  }
  /// Net amount of the insurance claim for the event, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  double netAmount() const {
    return GetField<double>(VT_NETAMOUNT, 0.0);
  }
  /// Underlying cause of the event.
  /// Example: /// Example: CAUSE_EXAMPLE
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *underlyingCause() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNDERLYINGCAUSE);
  }
  /// Spacecraft capability loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double capabilityLoss() const {
    return GetField<double>(VT_CAPABILITYLOSS, 0.0);
  }
  /// Spacecraft capacity loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double capacityLoss() const {
    return GetField<double>(VT_CAPACITYLOSS, 0.0);
  }
  /// Insurance loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double insuranceLoss() const {
    return GetField<double>(VT_INSURANCELOSS, 0.0);
  }
  /// Insurance loss incurred by 3rd party insurance, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  double thirdPartyInsuranceLoss() const {
    return GetField<double>(VT_THIRDPARTYINSURANCELOSS, 0.0);
  }
  /// Number of humans injured in the event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t injured() const {
    return GetField<int32_t>(VT_INJURED, 0);
  }
  /// Number of humans killed in the event.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  int32_t killed() const {
    return GetField<int32_t>(VT_KILLED, 0);
  }
  /// Spacecraft life lost due to the event as a percent/fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double lifeLost() const {
    return GetField<double>(VT_LIFELOST, 0.0);
  }
  /// Spacecraft age at the event in years.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double ageAtEvent() const {
    return GetField<double>(VT_AGEATEVENT, 0.0);
  }
  /// Achieved phase of flight prior to the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *achievedFlightPhase() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACHIEVEDFLIGHTPHASE);
  }
  /// Phase of flight during which the event occurred.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *occurrenceFlightPhase() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCURRENCEFLIGHTPHASE);
  }
  /// Faulty stage of flight for the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *stageAtFault() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STAGEATFAULT);
  }
  /// Equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *equipmentAtFault() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPMENTATFAULT);
  }
  /// Type of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *equipmentTypeAtFault() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPMENTTYPEATFAULT);
  }
  /// Specific part of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *equipmentPartAtFault() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPMENTPARTATFAULT);
  }
  /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *consequentialEquipmentFailure() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSEQUENTIALEQUIPMENTFAILURE);
  }
  /// Boolean indicating if the spacecraft is inclined.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool inclined() const {
    return GetField<uint8_t>(VT_INCLINED, 0) != 0;
  }
  /// Notes/description of the event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Additional remarks on the event description.
  /// Example: /// Example: Example remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *remarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMARKS);
  }
  /// Additional insurance notes if the event is an official loss.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *insuranceLossNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSURANCELOSSNOTES);
  }
  /// Notes on capability loss at the time of event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *capabilityLossNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAPABILITYLOSSNOTES);
  }
  /// Additional insurance notes on coverages at the time of event.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *insuranceCarriedNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSURANCECARRIEDNOTES);
  }
  /// Additional notes on the equipment causing the event/loss.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *equipmentCausingLossNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPMENTCAUSINGLOSSNOTES);
  }
  /// The type of on-orbit event being reported.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *eventType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTTYPE);
  }
  /// The result of the reported event.
  /// Example: /// Example: Example results
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *eventResult() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTRESULT);
  }
  /// The status of the on-orbit object.
  /// Example: /// Example: Status1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *objectStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJECTSTATUS);
  }
  /// Description of the satellite orbital position or regime.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *satellitePosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SATELLITEPOSITION);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OnorbitEvent_Full_dataMode_Enum dataMode() const {
    return static_cast<OnorbitEvent_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_DERIVEDFROM) &&
           verifier.VerifyString(derivedFrom()) &&
           VerifyOffset(verifier, VT_DECLASSIFICATIONDATE) &&
           verifier.VerifyString(declassificationDate()) &&
           VerifyOffset(verifier, VT_DECLASSIFICATIONSTRING) &&
           verifier.VerifyString(declassificationString()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_EVENTTIME) &&
           verifier.VerifyString(eventTime()) &&
           VerifyOffset(verifier, VT_EVENTTIMENOTES) &&
           verifier.VerifyString(eventTimeNotes()) &&
           VerifyOffset(verifier, VT_OPERATORORGID) &&
           verifier.VerifyString(operatorOrgId()) &&
           VerifyOffset(verifier, VT_OWNERORGID) &&
           verifier.VerifyString(ownerOrgId()) &&
           VerifyOffset(verifier, VT_LESSEEORGID) &&
           verifier.VerifyString(lesseeOrgId()) &&
           VerifyOffset(verifier, VT_OPERATEDONBEHALFOFORGID) &&
           verifier.VerifyString(operatedOnBehalfOfOrgId()) &&
           VerifyField<double>(verifier, VT_GEOPOSITION, 8) &&
           VerifyOffset(verifier, VT_PLANESLOT) &&
           verifier.VerifyString(planeSlot()) &&
           VerifyOffset(verifier, VT_PLANENUMBER) &&
           verifier.VerifyString(planeNumber()) &&
           VerifyOffset(verifier, VT_POSITIONSTATUS) &&
           verifier.VerifyString(positionStatus()) &&
           VerifyOffset(verifier, VT_UNTILTIME) &&
           verifier.VerifyString(untilTime()) &&
           VerifyOffset(verifier, VT_OFFICIALLOSSDATE) &&
           verifier.VerifyString(officialLossDate()) &&
           VerifyField<double>(verifier, VT_NETAMOUNT, 8) &&
           VerifyOffset(verifier, VT_UNDERLYINGCAUSE) &&
           verifier.VerifyString(underlyingCause()) &&
           VerifyField<double>(verifier, VT_CAPABILITYLOSS, 8) &&
           VerifyField<double>(verifier, VT_CAPACITYLOSS, 8) &&
           VerifyField<double>(verifier, VT_INSURANCELOSS, 8) &&
           VerifyField<double>(verifier, VT_THIRDPARTYINSURANCELOSS, 8) &&
           VerifyField<int32_t>(verifier, VT_INJURED, 4) &&
           VerifyField<int32_t>(verifier, VT_KILLED, 4) &&
           VerifyField<double>(verifier, VT_LIFELOST, 8) &&
           VerifyField<double>(verifier, VT_AGEATEVENT, 8) &&
           VerifyOffset(verifier, VT_ACHIEVEDFLIGHTPHASE) &&
           verifier.VerifyString(achievedFlightPhase()) &&
           VerifyOffset(verifier, VT_OCCURRENCEFLIGHTPHASE) &&
           verifier.VerifyString(occurrenceFlightPhase()) &&
           VerifyOffset(verifier, VT_STAGEATFAULT) &&
           verifier.VerifyString(stageAtFault()) &&
           VerifyOffset(verifier, VT_EQUIPMENTATFAULT) &&
           verifier.VerifyString(equipmentAtFault()) &&
           VerifyOffset(verifier, VT_EQUIPMENTTYPEATFAULT) &&
           verifier.VerifyString(equipmentTypeAtFault()) &&
           VerifyOffset(verifier, VT_EQUIPMENTPARTATFAULT) &&
           verifier.VerifyString(equipmentPartAtFault()) &&
           VerifyOffset(verifier, VT_CONSEQUENTIALEQUIPMENTFAILURE) &&
           verifier.VerifyString(consequentialEquipmentFailure()) &&
           VerifyField<uint8_t>(verifier, VT_INCLINED, 1) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_REMARKS) &&
           verifier.VerifyString(remarks()) &&
           VerifyOffset(verifier, VT_INSURANCELOSSNOTES) &&
           verifier.VerifyString(insuranceLossNotes()) &&
           VerifyOffset(verifier, VT_CAPABILITYLOSSNOTES) &&
           verifier.VerifyString(capabilityLossNotes()) &&
           VerifyOffset(verifier, VT_INSURANCECARRIEDNOTES) &&
           verifier.VerifyString(insuranceCarriedNotes()) &&
           VerifyOffset(verifier, VT_EQUIPMENTCAUSINGLOSSNOTES) &&
           verifier.VerifyString(equipmentCausingLossNotes()) &&
           VerifyOffset(verifier, VT_EVENTTYPE) &&
           verifier.VerifyString(eventType()) &&
           VerifyOffset(verifier, VT_EVENTRESULT) &&
           verifier.VerifyString(eventResult()) &&
           VerifyOffset(verifier, VT_OBJECTSTATUS) &&
           verifier.VerifyString(objectStatus()) &&
           VerifyOffset(verifier, VT_SATELLITEPOSITION) &&
           verifier.VerifyString(satellitePosition()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct OnorbitEvent_FullBuilder {
  typedef OnorbitEvent_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_derivedFrom(::flatbuffers::Offset<::flatbuffers::String> derivedFrom) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_DERIVEDFROM, derivedFrom);
  }
  void add_declassificationDate(::flatbuffers::Offset<::flatbuffers::String> declassificationDate) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_DECLASSIFICATIONDATE, declassificationDate);
  }
  void add_declassificationString(::flatbuffers::Offset<::flatbuffers::String> declassificationString) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_DECLASSIFICATIONSTRING, declassificationString);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(OnorbitEvent_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_eventTime(::flatbuffers::Offset<::flatbuffers::String> eventTime) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EVENTTIME, eventTime);
  }
  void add_eventTimeNotes(::flatbuffers::Offset<::flatbuffers::String> eventTimeNotes) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EVENTTIMENOTES, eventTimeNotes);
  }
  void add_operatorOrgId(::flatbuffers::Offset<::flatbuffers::String> operatorOrgId) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OPERATORORGID, operatorOrgId);
  }
  void add_ownerOrgId(::flatbuffers::Offset<::flatbuffers::String> ownerOrgId) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OWNERORGID, ownerOrgId);
  }
  void add_lesseeOrgId(::flatbuffers::Offset<::flatbuffers::String> lesseeOrgId) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_LESSEEORGID, lesseeOrgId);
  }
  void add_operatedOnBehalfOfOrgId(::flatbuffers::Offset<::flatbuffers::String> operatedOnBehalfOfOrgId) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OPERATEDONBEHALFOFORGID, operatedOnBehalfOfOrgId);
  }
  void add_geoPosition(double geoPosition) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_GEOPOSITION, geoPosition, 0.0);
  }
  void add_planeSlot(::flatbuffers::Offset<::flatbuffers::String> planeSlot) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_PLANESLOT, planeSlot);
  }
  void add_planeNumber(::flatbuffers::Offset<::flatbuffers::String> planeNumber) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_PLANENUMBER, planeNumber);
  }
  void add_positionStatus(::flatbuffers::Offset<::flatbuffers::String> positionStatus) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_POSITIONSTATUS, positionStatus);
  }
  void add_untilTime(::flatbuffers::Offset<::flatbuffers::String> untilTime) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_UNTILTIME, untilTime);
  }
  void add_officialLossDate(::flatbuffers::Offset<::flatbuffers::String> officialLossDate) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OFFICIALLOSSDATE, officialLossDate);
  }
  void add_netAmount(double netAmount) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_NETAMOUNT, netAmount, 0.0);
  }
  void add_underlyingCause(::flatbuffers::Offset<::flatbuffers::String> underlyingCause) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_UNDERLYINGCAUSE, underlyingCause);
  }
  void add_capabilityLoss(double capabilityLoss) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_CAPABILITYLOSS, capabilityLoss, 0.0);
  }
  void add_capacityLoss(double capacityLoss) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_CAPACITYLOSS, capacityLoss, 0.0);
  }
  void add_insuranceLoss(double insuranceLoss) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_INSURANCELOSS, insuranceLoss, 0.0);
  }
  void add_thirdPartyInsuranceLoss(double thirdPartyInsuranceLoss) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_THIRDPARTYINSURANCELOSS, thirdPartyInsuranceLoss, 0.0);
  }
  void add_injured(int32_t injured) {
    fbb_.AddElement<int32_t>(OnorbitEvent_Full::VT_INJURED, injured, 0);
  }
  void add_killed(int32_t killed) {
    fbb_.AddElement<int32_t>(OnorbitEvent_Full::VT_KILLED, killed, 0);
  }
  void add_lifeLost(double lifeLost) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_LIFELOST, lifeLost, 0.0);
  }
  void add_ageAtEvent(double ageAtEvent) {
    fbb_.AddElement<double>(OnorbitEvent_Full::VT_AGEATEVENT, ageAtEvent, 0.0);
  }
  void add_achievedFlightPhase(::flatbuffers::Offset<::flatbuffers::String> achievedFlightPhase) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ACHIEVEDFLIGHTPHASE, achievedFlightPhase);
  }
  void add_occurrenceFlightPhase(::flatbuffers::Offset<::flatbuffers::String> occurrenceFlightPhase) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OCCURRENCEFLIGHTPHASE, occurrenceFlightPhase);
  }
  void add_stageAtFault(::flatbuffers::Offset<::flatbuffers::String> stageAtFault) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_STAGEATFAULT, stageAtFault);
  }
  void add_equipmentAtFault(::flatbuffers::Offset<::flatbuffers::String> equipmentAtFault) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EQUIPMENTATFAULT, equipmentAtFault);
  }
  void add_equipmentTypeAtFault(::flatbuffers::Offset<::flatbuffers::String> equipmentTypeAtFault) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EQUIPMENTTYPEATFAULT, equipmentTypeAtFault);
  }
  void add_equipmentPartAtFault(::flatbuffers::Offset<::flatbuffers::String> equipmentPartAtFault) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EQUIPMENTPARTATFAULT, equipmentPartAtFault);
  }
  void add_consequentialEquipmentFailure(::flatbuffers::Offset<::flatbuffers::String> consequentialEquipmentFailure) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_CONSEQUENTIALEQUIPMENTFAILURE, consequentialEquipmentFailure);
  }
  void add_inclined(bool inclined) {
    fbb_.AddElement<uint8_t>(OnorbitEvent_Full::VT_INCLINED, static_cast<uint8_t>(inclined), 0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_DESCRIPTION, description);
  }
  void add_remarks(::flatbuffers::Offset<::flatbuffers::String> remarks) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_REMARKS, remarks);
  }
  void add_insuranceLossNotes(::flatbuffers::Offset<::flatbuffers::String> insuranceLossNotes) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_INSURANCELOSSNOTES, insuranceLossNotes);
  }
  void add_capabilityLossNotes(::flatbuffers::Offset<::flatbuffers::String> capabilityLossNotes) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_CAPABILITYLOSSNOTES, capabilityLossNotes);
  }
  void add_insuranceCarriedNotes(::flatbuffers::Offset<::flatbuffers::String> insuranceCarriedNotes) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_INSURANCECARRIEDNOTES, insuranceCarriedNotes);
  }
  void add_equipmentCausingLossNotes(::flatbuffers::Offset<::flatbuffers::String> equipmentCausingLossNotes) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EQUIPMENTCAUSINGLOSSNOTES, equipmentCausingLossNotes);
  }
  void add_eventType(::flatbuffers::Offset<::flatbuffers::String> eventType) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EVENTTYPE, eventType);
  }
  void add_eventResult(::flatbuffers::Offset<::flatbuffers::String> eventResult) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_EVENTRESULT, eventResult);
  }
  void add_objectStatus(::flatbuffers::Offset<::flatbuffers::String> objectStatus) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_OBJECTSTATUS, objectStatus);
  }
  void add_satellitePosition(::flatbuffers::Offset<::flatbuffers::String> satellitePosition) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_SATELLITEPOSITION, satellitePosition);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(OnorbitEvent_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnorbitEvent_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ONORBIT, onOrbit);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OnorbitEvent_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit OnorbitEvent_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitEvent_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitEvent_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitEvent_Full> CreateOnorbitEvent_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> derivedFrom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> declassificationDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> declassificationString = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventTimeNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operatorOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ownerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lesseeOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operatedOnBehalfOfOrgId = 0,
    double geoPosition = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> planeSlot = 0,
    ::flatbuffers::Offset<::flatbuffers::String> planeNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> positionStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> untilTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> officialLossDate = 0,
    double netAmount = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> underlyingCause = 0,
    double capabilityLoss = 0.0,
    double capacityLoss = 0.0,
    double insuranceLoss = 0.0,
    double thirdPartyInsuranceLoss = 0.0,
    int32_t injured = 0,
    int32_t killed = 0,
    double lifeLost = 0.0,
    double ageAtEvent = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> achievedFlightPhase = 0,
    ::flatbuffers::Offset<::flatbuffers::String> occurrenceFlightPhase = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stageAtFault = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipmentAtFault = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipmentTypeAtFault = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipmentPartAtFault = 0,
    ::flatbuffers::Offset<::flatbuffers::String> consequentialEquipmentFailure = 0,
    bool inclined = false,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> insuranceLossNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> capabilityLossNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> insuranceCarriedNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipmentCausingLossNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventResult = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objectStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> satellitePosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    OnorbitEvent_Full_dataMode_Enum dataMode = OnorbitEvent_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  OnorbitEvent_FullBuilder builder_(_fbb);
  builder_.add_ageAtEvent(ageAtEvent);
  builder_.add_lifeLost(lifeLost);
  builder_.add_thirdPartyInsuranceLoss(thirdPartyInsuranceLoss);
  builder_.add_insuranceLoss(insuranceLoss);
  builder_.add_capacityLoss(capacityLoss);
  builder_.add_capabilityLoss(capabilityLoss);
  builder_.add_netAmount(netAmount);
  builder_.add_geoPosition(geoPosition);
  builder_.add_origNetwork(origNetwork);
  builder_.add_onOrbit(onOrbit);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_satellitePosition(satellitePosition);
  builder_.add_objectStatus(objectStatus);
  builder_.add_eventResult(eventResult);
  builder_.add_eventType(eventType);
  builder_.add_equipmentCausingLossNotes(equipmentCausingLossNotes);
  builder_.add_insuranceCarriedNotes(insuranceCarriedNotes);
  builder_.add_capabilityLossNotes(capabilityLossNotes);
  builder_.add_insuranceLossNotes(insuranceLossNotes);
  builder_.add_remarks(remarks);
  builder_.add_description(description);
  builder_.add_consequentialEquipmentFailure(consequentialEquipmentFailure);
  builder_.add_equipmentPartAtFault(equipmentPartAtFault);
  builder_.add_equipmentTypeAtFault(equipmentTypeAtFault);
  builder_.add_equipmentAtFault(equipmentAtFault);
  builder_.add_stageAtFault(stageAtFault);
  builder_.add_occurrenceFlightPhase(occurrenceFlightPhase);
  builder_.add_achievedFlightPhase(achievedFlightPhase);
  builder_.add_killed(killed);
  builder_.add_injured(injured);
  builder_.add_underlyingCause(underlyingCause);
  builder_.add_officialLossDate(officialLossDate);
  builder_.add_untilTime(untilTime);
  builder_.add_positionStatus(positionStatus);
  builder_.add_planeNumber(planeNumber);
  builder_.add_planeSlot(planeSlot);
  builder_.add_operatedOnBehalfOfOrgId(operatedOnBehalfOfOrgId);
  builder_.add_lesseeOrgId(lesseeOrgId);
  builder_.add_ownerOrgId(ownerOrgId);
  builder_.add_operatorOrgId(operatorOrgId);
  builder_.add_eventTimeNotes(eventTimeNotes);
  builder_.add_eventTime(eventTime);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_declassificationString(declassificationString);
  builder_.add_declassificationDate(declassificationDate);
  builder_.add_derivedFrom(derivedFrom);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_inclined(inclined);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitEvent_Full> CreateOnorbitEvent_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *derivedFrom = nullptr,
    const char *declassificationDate = nullptr,
    const char *declassificationString = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *eventTime = nullptr,
    const char *eventTimeNotes = nullptr,
    const char *operatorOrgId = nullptr,
    const char *ownerOrgId = nullptr,
    const char *lesseeOrgId = nullptr,
    const char *operatedOnBehalfOfOrgId = nullptr,
    double geoPosition = 0.0,
    const char *planeSlot = nullptr,
    const char *planeNumber = nullptr,
    const char *positionStatus = nullptr,
    const char *untilTime = nullptr,
    const char *officialLossDate = nullptr,
    double netAmount = 0.0,
    const char *underlyingCause = nullptr,
    double capabilityLoss = 0.0,
    double capacityLoss = 0.0,
    double insuranceLoss = 0.0,
    double thirdPartyInsuranceLoss = 0.0,
    int32_t injured = 0,
    int32_t killed = 0,
    double lifeLost = 0.0,
    double ageAtEvent = 0.0,
    const char *achievedFlightPhase = nullptr,
    const char *occurrenceFlightPhase = nullptr,
    const char *stageAtFault = nullptr,
    const char *equipmentAtFault = nullptr,
    const char *equipmentTypeAtFault = nullptr,
    const char *equipmentPartAtFault = nullptr,
    const char *consequentialEquipmentFailure = nullptr,
    bool inclined = false,
    const char *description = nullptr,
    const char *remarks = nullptr,
    const char *insuranceLossNotes = nullptr,
    const char *capabilityLossNotes = nullptr,
    const char *insuranceCarriedNotes = nullptr,
    const char *equipmentCausingLossNotes = nullptr,
    const char *eventType = nullptr,
    const char *eventResult = nullptr,
    const char *objectStatus = nullptr,
    const char *satellitePosition = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    OnorbitEvent_Full_dataMode_Enum dataMode = OnorbitEvent_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *onOrbit = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto derivedFrom__ = derivedFrom ? _fbb.CreateString(derivedFrom) : 0;
  auto declassificationDate__ = declassificationDate ? _fbb.CreateString(declassificationDate) : 0;
  auto declassificationString__ = declassificationString ? _fbb.CreateString(declassificationString) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto eventTime__ = eventTime ? _fbb.CreateString(eventTime) : 0;
  auto eventTimeNotes__ = eventTimeNotes ? _fbb.CreateString(eventTimeNotes) : 0;
  auto operatorOrgId__ = operatorOrgId ? _fbb.CreateString(operatorOrgId) : 0;
  auto ownerOrgId__ = ownerOrgId ? _fbb.CreateString(ownerOrgId) : 0;
  auto lesseeOrgId__ = lesseeOrgId ? _fbb.CreateString(lesseeOrgId) : 0;
  auto operatedOnBehalfOfOrgId__ = operatedOnBehalfOfOrgId ? _fbb.CreateString(operatedOnBehalfOfOrgId) : 0;
  auto planeSlot__ = planeSlot ? _fbb.CreateString(planeSlot) : 0;
  auto planeNumber__ = planeNumber ? _fbb.CreateString(planeNumber) : 0;
  auto positionStatus__ = positionStatus ? _fbb.CreateString(positionStatus) : 0;
  auto untilTime__ = untilTime ? _fbb.CreateString(untilTime) : 0;
  auto officialLossDate__ = officialLossDate ? _fbb.CreateString(officialLossDate) : 0;
  auto underlyingCause__ = underlyingCause ? _fbb.CreateString(underlyingCause) : 0;
  auto achievedFlightPhase__ = achievedFlightPhase ? _fbb.CreateString(achievedFlightPhase) : 0;
  auto occurrenceFlightPhase__ = occurrenceFlightPhase ? _fbb.CreateString(occurrenceFlightPhase) : 0;
  auto stageAtFault__ = stageAtFault ? _fbb.CreateString(stageAtFault) : 0;
  auto equipmentAtFault__ = equipmentAtFault ? _fbb.CreateString(equipmentAtFault) : 0;
  auto equipmentTypeAtFault__ = equipmentTypeAtFault ? _fbb.CreateString(equipmentTypeAtFault) : 0;
  auto equipmentPartAtFault__ = equipmentPartAtFault ? _fbb.CreateString(equipmentPartAtFault) : 0;
  auto consequentialEquipmentFailure__ = consequentialEquipmentFailure ? _fbb.CreateString(consequentialEquipmentFailure) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto remarks__ = remarks ? _fbb.CreateString(remarks) : 0;
  auto insuranceLossNotes__ = insuranceLossNotes ? _fbb.CreateString(insuranceLossNotes) : 0;
  auto capabilityLossNotes__ = capabilityLossNotes ? _fbb.CreateString(capabilityLossNotes) : 0;
  auto insuranceCarriedNotes__ = insuranceCarriedNotes ? _fbb.CreateString(insuranceCarriedNotes) : 0;
  auto equipmentCausingLossNotes__ = equipmentCausingLossNotes ? _fbb.CreateString(equipmentCausingLossNotes) : 0;
  auto eventType__ = eventType ? _fbb.CreateString(eventType) : 0;
  auto eventResult__ = eventResult ? _fbb.CreateString(eventResult) : 0;
  auto objectStatus__ = objectStatus ? _fbb.CreateString(objectStatus) : 0;
  auto satellitePosition__ = satellitePosition ? _fbb.CreateString(satellitePosition) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOnorbitEvent_Full(
      _fbb,
      id__,
      classificationMarking__,
      derivedFrom__,
      declassificationDate__,
      declassificationString__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      eventTime__,
      eventTimeNotes__,
      operatorOrgId__,
      ownerOrgId__,
      lesseeOrgId__,
      operatedOnBehalfOfOrgId__,
      geoPosition,
      planeSlot__,
      planeNumber__,
      positionStatus__,
      untilTime__,
      officialLossDate__,
      netAmount,
      underlyingCause__,
      capabilityLoss,
      capacityLoss,
      insuranceLoss,
      thirdPartyInsuranceLoss,
      injured,
      killed,
      lifeLost,
      ageAtEvent,
      achievedFlightPhase__,
      occurrenceFlightPhase__,
      stageAtFault__,
      equipmentAtFault__,
      equipmentTypeAtFault__,
      equipmentPartAtFault__,
      consequentialEquipmentFailure__,
      inclined,
      description__,
      remarks__,
      insuranceLossNotes__,
      capabilityLossNotes__,
      insuranceCarriedNotes__,
      equipmentCausingLossNotes__,
      eventType__,
      eventResult__,
      objectStatus__,
      satellitePosition__,
      source__,
      origin__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      onOrbit__,
      origNetwork__);
}

inline const OnorbitEvent_Full *GetOnorbitEvent_Full(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitEvent_Full>(buf);
}

inline const OnorbitEvent_Full *GetSizePrefixedOnorbitEvent_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitEvent_Full>(buf);
}

inline const char *OnorbitEvent_FullIdentifier() {
  return "ONOR";
}

inline bool OnorbitEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitEvent_FullIdentifier());
}

inline bool SizePrefixedOnorbitEvent_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitEvent_FullIdentifier(), true);
}

inline bool VerifyOnorbitEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitEvent_Full>(OnorbitEvent_FullIdentifier());
}

inline bool VerifySizePrefixedOnorbitEvent_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitEvent_Full>(OnorbitEvent_FullIdentifier());
}

inline void FinishOnorbitEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitEvent_Full> root) {
  fbb.Finish(root, OnorbitEvent_FullIdentifier());
}

inline void FinishSizePrefixedOnorbitEvent_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitEvent_Full> root) {
  fbb.FinishSizePrefixed(root, OnorbitEvent_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
