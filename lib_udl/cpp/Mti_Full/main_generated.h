// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Mti_Full;
struct Mti_FullBuilder;

enum Mti_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Mti_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Mti_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Mti_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Mti_Full_dataMode_Enum_EXERCISE = 3,
  Mti_Full_dataMode_Enum_MIN = Mti_Full_dataMode_Enum_REAL,
  Mti_Full_dataMode_Enum_MAX = Mti_Full_dataMode_Enum_EXERCISE
};

inline const Mti_Full_dataMode_Enum (&EnumValuesMti_Full_dataMode_Enum())[4] {
  static const Mti_Full_dataMode_Enum values[] = {
    Mti_Full_dataMode_Enum_REAL,
    Mti_Full_dataMode_Enum_TEST,
    Mti_Full_dataMode_Enum_SIMULATED,
    Mti_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesMti_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameMti_Full_dataMode_Enum(Mti_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Mti_Full_dataMode_Enum_REAL, Mti_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMti_Full_dataMode_Enum()[index];
}

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
struct Mti_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Mti_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLASSIFICATIONMARKING = 4,
    VT_SOURCE = 6,
    VT_ORIGIN = 8,
    VT_ID = 10,
    VT_DATAMODE = 12,
    VT_CREATEDBY = 14,
    VT_CREATEDAT = 16,
    VT_P3 = 18,
    VT_P6 = 20,
    VT_P7 = 22,
    VT_P8 = 24,
    VT_P9 = 26,
    VT_P10 = 28,
    VT_MISSIONS = 30,
    VT_DWELLS = 32,
    VT_HRRS = 34,
    VT_JOBDEFS = 36,
    VT_FREETEXTS = 38,
    VT_PLATFORMLOCS = 40,
    VT_JOBREQUESTS = 42,
    VT_ORIGNETWORK = 44
  };
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MTI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Mti_Full_dataMode_Enum dataMode() const {
    return static_cast<Mti_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Nationality of the platform providing the data.
  /// Example: /// Example: NATIONALITY
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *p3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_P3);
  }
  /// Control / handling marking.
  /// Example: /// Example: MARKING
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *p6() const {
    return GetPointer<const ::flatbuffers::String *>(VT_P6);
  }
  /// Data record exercise indicator.
  /// Example: /// Example: INDICATOR
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *p7() const {
    return GetPointer<const ::flatbuffers::String *>(VT_P7);
  }
  /// ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
  /// Example: /// Example: P8-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *p8() const {
    return GetPointer<const ::flatbuffers::String *>(VT_P8);
  }
  /// Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
  /// Example: /// Example: 45
  /// Constraints: No constraints specified.
  int32_t p9() const {
    return GetField<int32_t>(VT_P9, 0);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: 45
  /// Constraints: No constraints specified.
  int32_t p10() const {
    return GetField<int32_t>(VT_P10, 0);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *missions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MISSIONS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dwells() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DWELLS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *hrrs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HRRS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *jobDefs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_JOBDEFS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *freeTexts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FREETEXTS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *platformLocs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PLATFORMLOCS);
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *jobRequests() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_JOBREQUESTS);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_P3) &&
           verifier.VerifyString(p3()) &&
           VerifyOffset(verifier, VT_P6) &&
           verifier.VerifyString(p6()) &&
           VerifyOffset(verifier, VT_P7) &&
           verifier.VerifyString(p7()) &&
           VerifyOffset(verifier, VT_P8) &&
           verifier.VerifyString(p8()) &&
           VerifyField<int32_t>(verifier, VT_P9, 4) &&
           VerifyField<int32_t>(verifier, VT_P10, 4) &&
           VerifyOffset(verifier, VT_MISSIONS) &&
           verifier.VerifyVector(missions()) &&
           verifier.VerifyVectorOfStrings(missions()) &&
           VerifyOffset(verifier, VT_DWELLS) &&
           verifier.VerifyVector(dwells()) &&
           verifier.VerifyVectorOfStrings(dwells()) &&
           VerifyOffset(verifier, VT_HRRS) &&
           verifier.VerifyVector(hrrs()) &&
           verifier.VerifyVectorOfStrings(hrrs()) &&
           VerifyOffset(verifier, VT_JOBDEFS) &&
           verifier.VerifyVector(jobDefs()) &&
           verifier.VerifyVectorOfStrings(jobDefs()) &&
           VerifyOffset(verifier, VT_FREETEXTS) &&
           verifier.VerifyVector(freeTexts()) &&
           verifier.VerifyVectorOfStrings(freeTexts()) &&
           VerifyOffset(verifier, VT_PLATFORMLOCS) &&
           verifier.VerifyVector(platformLocs()) &&
           verifier.VerifyVectorOfStrings(platformLocs()) &&
           VerifyOffset(verifier, VT_JOBREQUESTS) &&
           verifier.VerifyVector(jobRequests()) &&
           verifier.VerifyVectorOfStrings(jobRequests()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Mti_FullBuilder {
  typedef Mti_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Mti_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Mti_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Mti_Full::VT_ORIGIN, origin);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Mti_Full::VT_ID, id);
  }
  void add_dataMode(Mti_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Mti_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Mti_Full::VT_CREATEDBY, createdBy);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Mti_Full::VT_CREATEDAT, createdAt);
  }
  void add_p3(::flatbuffers::Offset<::flatbuffers::String> p3) {
    fbb_.AddOffset(Mti_Full::VT_P3, p3);
  }
  void add_p6(::flatbuffers::Offset<::flatbuffers::String> p6) {
    fbb_.AddOffset(Mti_Full::VT_P6, p6);
  }
  void add_p7(::flatbuffers::Offset<::flatbuffers::String> p7) {
    fbb_.AddOffset(Mti_Full::VT_P7, p7);
  }
  void add_p8(::flatbuffers::Offset<::flatbuffers::String> p8) {
    fbb_.AddOffset(Mti_Full::VT_P8, p8);
  }
  void add_p9(int32_t p9) {
    fbb_.AddElement<int32_t>(Mti_Full::VT_P9, p9, 0);
  }
  void add_p10(int32_t p10) {
    fbb_.AddElement<int32_t>(Mti_Full::VT_P10, p10, 0);
  }
  void add_missions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> missions) {
    fbb_.AddOffset(Mti_Full::VT_MISSIONS, missions);
  }
  void add_dwells(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dwells) {
    fbb_.AddOffset(Mti_Full::VT_DWELLS, dwells);
  }
  void add_hrrs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hrrs) {
    fbb_.AddOffset(Mti_Full::VT_HRRS, hrrs);
  }
  void add_jobDefs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> jobDefs) {
    fbb_.AddOffset(Mti_Full::VT_JOBDEFS, jobDefs);
  }
  void add_freeTexts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> freeTexts) {
    fbb_.AddOffset(Mti_Full::VT_FREETEXTS, freeTexts);
  }
  void add_platformLocs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platformLocs) {
    fbb_.AddOffset(Mti_Full::VT_PLATFORMLOCS, platformLocs);
  }
  void add_jobRequests(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> jobRequests) {
    fbb_.AddOffset(Mti_Full::VT_JOBREQUESTS, jobRequests);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Mti_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit Mti_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mti_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mti_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mti_Full> CreateMti_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    Mti_Full_dataMode_Enum dataMode = Mti_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> p3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> p6 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> p7 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> p8 = 0,
    int32_t p9 = 0,
    int32_t p10 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> missions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dwells = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hrrs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> jobDefs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> freeTexts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platformLocs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> jobRequests = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Mti_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_jobRequests(jobRequests);
  builder_.add_platformLocs(platformLocs);
  builder_.add_freeTexts(freeTexts);
  builder_.add_jobDefs(jobDefs);
  builder_.add_hrrs(hrrs);
  builder_.add_dwells(dwells);
  builder_.add_missions(missions);
  builder_.add_p10(p10);
  builder_.add_p9(p9);
  builder_.add_p8(p8);
  builder_.add_p7(p7);
  builder_.add_p6(p6);
  builder_.add_p3(p3);
  builder_.add_createdAt(createdAt);
  builder_.add_createdBy(createdBy);
  builder_.add_id(id);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mti_Full> CreateMti_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *classificationMarking = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *id = nullptr,
    Mti_Full_dataMode_Enum dataMode = Mti_Full_dataMode_Enum_REAL,
    const char *createdBy = nullptr,
    const char *createdAt = nullptr,
    const char *p3 = nullptr,
    const char *p6 = nullptr,
    const char *p7 = nullptr,
    const char *p8 = nullptr,
    int32_t p9 = 0,
    int32_t p10 = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *missions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dwells = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *hrrs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *jobDefs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *freeTexts = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *platformLocs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *jobRequests = nullptr,
    const char *origNetwork = nullptr) {
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto p3__ = p3 ? _fbb.CreateString(p3) : 0;
  auto p6__ = p6 ? _fbb.CreateString(p6) : 0;
  auto p7__ = p7 ? _fbb.CreateString(p7) : 0;
  auto p8__ = p8 ? _fbb.CreateString(p8) : 0;
  auto missions__ = missions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*missions) : 0;
  auto dwells__ = dwells ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dwells) : 0;
  auto hrrs__ = hrrs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*hrrs) : 0;
  auto jobDefs__ = jobDefs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*jobDefs) : 0;
  auto freeTexts__ = freeTexts ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*freeTexts) : 0;
  auto platformLocs__ = platformLocs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*platformLocs) : 0;
  auto jobRequests__ = jobRequests ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*jobRequests) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateMti_Full(
      _fbb,
      classificationMarking__,
      source__,
      origin__,
      id__,
      dataMode,
      createdBy__,
      createdAt__,
      p3__,
      p6__,
      p7__,
      p8__,
      p9,
      p10,
      missions__,
      dwells__,
      hrrs__,
      jobDefs__,
      freeTexts__,
      platformLocs__,
      jobRequests__,
      origNetwork__);
}

inline const Mti_Full *GetMti_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Mti_Full>(buf);
}

inline const Mti_Full *GetSizePrefixedMti_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Mti_Full>(buf);
}

inline const char *Mti_FullIdentifier() {
  return "MTIF";
}

inline bool Mti_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Mti_FullIdentifier());
}

inline bool SizePrefixedMti_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Mti_FullIdentifier(), true);
}

inline bool VerifyMti_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Mti_Full>(Mti_FullIdentifier());
}

inline bool VerifySizePrefixedMti_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Mti_Full>(Mti_FullIdentifier());
}

inline void FinishMti_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mti_Full> root) {
  fbb.Finish(root, Mti_FullIdentifier());
}

inline void FinishSizePrefixedMti_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mti_Full> root) {
  fbb.FinishSizePrefixed(root, Mti_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
