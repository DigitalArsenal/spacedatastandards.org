// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataOpticalPayload_Ingest;
struct SeradataOpticalPayload_IngestBuilder;

enum SeradataOpticalPayload_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataOpticalPayload_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataOpticalPayload_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataOpticalPayload_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataOpticalPayload_Ingest_dataMode_Enum_EXERCISE = 3,
  SeradataOpticalPayload_Ingest_dataMode_Enum_MIN = SeradataOpticalPayload_Ingest_dataMode_Enum_REAL,
  SeradataOpticalPayload_Ingest_dataMode_Enum_MAX = SeradataOpticalPayload_Ingest_dataMode_Enum_EXERCISE
};

inline const SeradataOpticalPayload_Ingest_dataMode_Enum (&EnumValuesSeradataOpticalPayload_Ingest_dataMode_Enum())[4] {
  static const SeradataOpticalPayload_Ingest_dataMode_Enum values[] = {
    SeradataOpticalPayload_Ingest_dataMode_Enum_REAL,
    SeradataOpticalPayload_Ingest_dataMode_Enum_TEST,
    SeradataOpticalPayload_Ingest_dataMode_Enum_SIMULATED,
    SeradataOpticalPayload_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataOpticalPayload_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataOpticalPayload_Ingest_dataMode_Enum(SeradataOpticalPayload_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataOpticalPayload_Ingest_dataMode_Enum_REAL, SeradataOpticalPayload_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataOpticalPayload_Ingest_dataMode_Enum()[index];
}

/// /// Details for an optical payload from  Seradata.
struct SeradataOpticalPayload_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataOpticalPayload_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SPACECRAFTID = 8,
    VT_IDSENSOR = 10,
    VT_HOSTEDFORCOMPANYORGID = 12,
    VT_MANUFACTURERORGID = 14,
    VT_IMAGINGPAYLOADCATEGORY = 16,
    VT_NAME = 18,
    VT_SPECTRALBAND = 20,
    VT_SPECTRALFREQUENCYLIMITS = 22,
    VT_NUMBEROFFILMRETURNCANISTERS = 24,
    VT_BESTRESOLUTION = 26,
    VT_SWATHWIDTH = 28,
    VT_RECORDERSIZE = 30,
    VT_FIELDOFVIEW = 32,
    VT_FIELDOFREGARD = 34,
    VT_POINTINGMETHOD = 36,
    VT_GROUNDSTATIONS = 38,
    VT_GROUNDSTATIONLOCATIONS = 40,
    VT_NOTES = 42,
    VT_CREATEDAT = 44,
    VT_CREATEDBY = 46,
    VT_SOURCE = 48,
    VT_ORIGIN = 50,
    VT_ORIGNETWORK = 52,
    VT_DATAMODE = 54
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATAOPTICALPAYLOAD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *spacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPACECRAFTID);
  }
  /// UUID of the Sensor record.
  /// Example: /// Example: idSensor
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *hostedForCompanyOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTEDFORCOMPANYORGID);
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
  /// Example: /// Example: Infrared
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *imagingPayloadCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGINGPAYLOADCATEGORY);
  }
  /// Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
  /// Example: /// Example: TOURNESOL
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
  /// Example: /// Example: Green
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *spectralBand() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECTRALBAND);
  }
  /// Frequency limit for this payload, e.g. 0.51 - 0.59.
  /// Example: /// Example: 0.51
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *spectralFrequencyLimits() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECTRALFREQUENCYLIMITS);
  }
  /// Number of film return canisters.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numberOfFilmReturnCanisters() const {
    return GetField<int32_t>(VT_NUMBEROFFILMRETURNCANISTERS, 0);
  }
  /// Best resolution.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double bestResolution() const {
    return GetField<double>(VT_BESTRESOLUTION, 0.0);
  }
  /// Swath width in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double swathWidth() const {
    return GetField<double>(VT_SWATHWIDTH, 0.0);
  }
  /// Recorder size.
  /// Example: /// Example: 1024
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *recorderSize() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECORDERSIZE);
  }
  /// Field of view of this radar in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double fieldOfView() const {
    return GetField<double>(VT_FIELDOFVIEW, 0.0);
  }
  /// Field of regard of this radar in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double fieldOfRegard() const {
    return GetField<double>(VT_FIELDOFREGARD, 0.0);
  }
  /// Point method for this radar, e.g. Spacecraft.
  /// Example: /// Example: Spacecraft
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *pointingMethod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POINTINGMETHOD);
  }
  /// Ground Station info for this payload.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *groundStations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONS);
  }
  /// Ground Station Locations for this payload.
  /// Example: /// Example: groundStationLocations
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *groundStationLocations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONLOCATIONS);
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataOpticalPayload_Ingest_dataMode_Enum dataMode() const {
    return static_cast<SeradataOpticalPayload_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SPACECRAFTID) &&
           verifier.VerifyString(spacecraftId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_HOSTEDFORCOMPANYORGID) &&
           verifier.VerifyString(hostedForCompanyOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_IMAGINGPAYLOADCATEGORY) &&
           verifier.VerifyString(imagingPayloadCategory()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SPECTRALBAND) &&
           verifier.VerifyString(spectralBand()) &&
           VerifyOffset(verifier, VT_SPECTRALFREQUENCYLIMITS) &&
           verifier.VerifyString(spectralFrequencyLimits()) &&
           VerifyField<int32_t>(verifier, VT_NUMBEROFFILMRETURNCANISTERS, 4) &&
           VerifyField<double>(verifier, VT_BESTRESOLUTION, 8) &&
           VerifyField<double>(verifier, VT_SWATHWIDTH, 8) &&
           VerifyOffset(verifier, VT_RECORDERSIZE) &&
           verifier.VerifyString(recorderSize()) &&
           VerifyField<double>(verifier, VT_FIELDOFVIEW, 8) &&
           VerifyField<double>(verifier, VT_FIELDOFREGARD, 8) &&
           VerifyOffset(verifier, VT_POINTINGMETHOD) &&
           verifier.VerifyString(pointingMethod()) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONS) &&
           verifier.VerifyString(groundStations()) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONLOCATIONS) &&
           verifier.VerifyString(groundStationLocations()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SeradataOpticalPayload_IngestBuilder {
  typedef SeradataOpticalPayload_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_spacecraftId(::flatbuffers::Offset<::flatbuffers::String> spacecraftId) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_SPACECRAFTID, spacecraftId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_IDSENSOR, idSensor);
  }
  void add_hostedForCompanyOrgId(::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_imagingPayloadCategory(::flatbuffers::Offset<::flatbuffers::String> imagingPayloadCategory) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_IMAGINGPAYLOADCATEGORY, imagingPayloadCategory);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_NAME, name);
  }
  void add_spectralBand(::flatbuffers::Offset<::flatbuffers::String> spectralBand) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_SPECTRALBAND, spectralBand);
  }
  void add_spectralFrequencyLimits(::flatbuffers::Offset<::flatbuffers::String> spectralFrequencyLimits) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_SPECTRALFREQUENCYLIMITS, spectralFrequencyLimits);
  }
  void add_numberOfFilmReturnCanisters(int32_t numberOfFilmReturnCanisters) {
    fbb_.AddElement<int32_t>(SeradataOpticalPayload_Ingest::VT_NUMBEROFFILMRETURNCANISTERS, numberOfFilmReturnCanisters, 0);
  }
  void add_bestResolution(double bestResolution) {
    fbb_.AddElement<double>(SeradataOpticalPayload_Ingest::VT_BESTRESOLUTION, bestResolution, 0.0);
  }
  void add_swathWidth(double swathWidth) {
    fbb_.AddElement<double>(SeradataOpticalPayload_Ingest::VT_SWATHWIDTH, swathWidth, 0.0);
  }
  void add_recorderSize(::flatbuffers::Offset<::flatbuffers::String> recorderSize) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_RECORDERSIZE, recorderSize);
  }
  void add_fieldOfView(double fieldOfView) {
    fbb_.AddElement<double>(SeradataOpticalPayload_Ingest::VT_FIELDOFVIEW, fieldOfView, 0.0);
  }
  void add_fieldOfRegard(double fieldOfRegard) {
    fbb_.AddElement<double>(SeradataOpticalPayload_Ingest::VT_FIELDOFREGARD, fieldOfRegard, 0.0);
  }
  void add_pointingMethod(::flatbuffers::Offset<::flatbuffers::String> pointingMethod) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_POINTINGMETHOD, pointingMethod);
  }
  void add_groundStations(::flatbuffers::Offset<::flatbuffers::String> groundStations) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_GROUNDSTATIONS, groundStations);
  }
  void add_groundStationLocations(::flatbuffers::Offset<::flatbuffers::String> groundStationLocations) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_GROUNDSTATIONLOCATIONS, groundStationLocations);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataOpticalPayload_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataOpticalPayload_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataOpticalPayload_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SeradataOpticalPayload_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataOpticalPayload_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataOpticalPayload_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataOpticalPayload_Ingest> CreateSeradataOpticalPayload_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> imagingPayloadCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spectralBand = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spectralFrequencyLimits = 0,
    int32_t numberOfFilmReturnCanisters = 0,
    double bestResolution = 0.0,
    double swathWidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> recorderSize = 0,
    double fieldOfView = 0.0,
    double fieldOfRegard = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> pointingMethod = 0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStationLocations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataOpticalPayload_Ingest_dataMode_Enum dataMode = SeradataOpticalPayload_Ingest_dataMode_Enum_REAL) {
  SeradataOpticalPayload_IngestBuilder builder_(_fbb);
  builder_.add_fieldOfRegard(fieldOfRegard);
  builder_.add_fieldOfView(fieldOfView);
  builder_.add_swathWidth(swathWidth);
  builder_.add_bestResolution(bestResolution);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_groundStationLocations(groundStationLocations);
  builder_.add_groundStations(groundStations);
  builder_.add_pointingMethod(pointingMethod);
  builder_.add_recorderSize(recorderSize);
  builder_.add_numberOfFilmReturnCanisters(numberOfFilmReturnCanisters);
  builder_.add_spectralFrequencyLimits(spectralFrequencyLimits);
  builder_.add_spectralBand(spectralBand);
  builder_.add_name(name);
  builder_.add_imagingPayloadCategory(imagingPayloadCategory);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_hostedForCompanyOrgId(hostedForCompanyOrgId);
  builder_.add_idSensor(idSensor);
  builder_.add_spacecraftId(spacecraftId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataOpticalPayload_Ingest> CreateSeradataOpticalPayload_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *spacecraftId = nullptr,
    const char *idSensor = nullptr,
    const char *hostedForCompanyOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *imagingPayloadCategory = nullptr,
    const char *name = nullptr,
    const char *spectralBand = nullptr,
    const char *spectralFrequencyLimits = nullptr,
    int32_t numberOfFilmReturnCanisters = 0,
    double bestResolution = 0.0,
    double swathWidth = 0.0,
    const char *recorderSize = nullptr,
    double fieldOfView = 0.0,
    double fieldOfRegard = 0.0,
    const char *pointingMethod = nullptr,
    const char *groundStations = nullptr,
    const char *groundStationLocations = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataOpticalPayload_Ingest_dataMode_Enum dataMode = SeradataOpticalPayload_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto spacecraftId__ = spacecraftId ? _fbb.CreateString(spacecraftId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto hostedForCompanyOrgId__ = hostedForCompanyOrgId ? _fbb.CreateString(hostedForCompanyOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto imagingPayloadCategory__ = imagingPayloadCategory ? _fbb.CreateString(imagingPayloadCategory) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto spectralBand__ = spectralBand ? _fbb.CreateString(spectralBand) : 0;
  auto spectralFrequencyLimits__ = spectralFrequencyLimits ? _fbb.CreateString(spectralFrequencyLimits) : 0;
  auto recorderSize__ = recorderSize ? _fbb.CreateString(recorderSize) : 0;
  auto pointingMethod__ = pointingMethod ? _fbb.CreateString(pointingMethod) : 0;
  auto groundStations__ = groundStations ? _fbb.CreateString(groundStations) : 0;
  auto groundStationLocations__ = groundStationLocations ? _fbb.CreateString(groundStationLocations) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSeradataOpticalPayload_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      spacecraftId__,
      idSensor__,
      hostedForCompanyOrgId__,
      manufacturerOrgId__,
      imagingPayloadCategory__,
      name__,
      spectralBand__,
      spectralFrequencyLimits__,
      numberOfFilmReturnCanisters,
      bestResolution,
      swathWidth,
      recorderSize__,
      fieldOfView,
      fieldOfRegard,
      pointingMethod__,
      groundStations__,
      groundStationLocations__,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const SeradataOpticalPayload_Ingest *GetSeradataOpticalPayload_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataOpticalPayload_Ingest>(buf);
}

inline const SeradataOpticalPayload_Ingest *GetSizePrefixedSeradataOpticalPayload_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataOpticalPayload_Ingest>(buf);
}

inline const char *SeradataOpticalPayload_IngestIdentifier() {
  return "SERA";
}

inline bool SeradataOpticalPayload_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataOpticalPayload_IngestIdentifier());
}

inline bool SizePrefixedSeradataOpticalPayload_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataOpticalPayload_IngestIdentifier(), true);
}

inline bool VerifySeradataOpticalPayload_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataOpticalPayload_Ingest>(SeradataOpticalPayload_IngestIdentifier());
}

inline bool VerifySizePrefixedSeradataOpticalPayload_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataOpticalPayload_Ingest>(SeradataOpticalPayload_IngestIdentifier());
}

inline void FinishSeradataOpticalPayload_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataOpticalPayload_Ingest> root) {
  fbb.Finish(root, SeradataOpticalPayload_IngestIdentifier());
}

inline void FinishSizePrefixedSeradataOpticalPayload_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataOpticalPayload_Ingest> root) {
  fbb.FinishSizePrefixed(root, SeradataOpticalPayload_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
