// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LaunchVehicleDetails_Abridged;
struct LaunchVehicleDetails_AbridgedBuilder;

enum LaunchVehicleDetails_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LaunchVehicleDetails_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LaunchVehicleDetails_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LaunchVehicleDetails_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LaunchVehicleDetails_Abridged_dataMode_Enum_EXERCISE = 3,
  LaunchVehicleDetails_Abridged_dataMode_Enum_MIN = LaunchVehicleDetails_Abridged_dataMode_Enum_REAL,
  LaunchVehicleDetails_Abridged_dataMode_Enum_MAX = LaunchVehicleDetails_Abridged_dataMode_Enum_EXERCISE
};

inline const LaunchVehicleDetails_Abridged_dataMode_Enum (&EnumValuesLaunchVehicleDetails_Abridged_dataMode_Enum())[4] {
  static const LaunchVehicleDetails_Abridged_dataMode_Enum values[] = {
    LaunchVehicleDetails_Abridged_dataMode_Enum_REAL,
    LaunchVehicleDetails_Abridged_dataMode_Enum_TEST,
    LaunchVehicleDetails_Abridged_dataMode_Enum_SIMULATED,
    LaunchVehicleDetails_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLaunchVehicleDetails_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLaunchVehicleDetails_Abridged_dataMode_Enum(LaunchVehicleDetails_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LaunchVehicleDetails_Abridged_dataMode_Enum_REAL, LaunchVehicleDetails_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLaunchVehicleDetails_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
struct LaunchVehicleDetails_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LaunchVehicleDetails_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDLAUNCHVEHICLE = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_VARIANT = 10,
    VT_MINORVARIANT = 12,
    VT_CATEGORY = 14,
    VT_MANUFACTURERORGID = 16,
    VT_LAUNCHPREFIX = 18,
    VT_FAMILY = 20,
    VT_PROPELLANT = 22,
    VT_OXIDIZER = 24,
    VT_LENGTH = 26,
    VT_DIAMETER = 28,
    VT_LAUNCHMASS = 30,
    VT_GEOPAYLOADMASS = 32,
    VT_GTOPAYLOADMASS = 34,
    VT_LEOPAYLOADMASS = 36,
    VT_SSOPAYLOADMASS = 38,
    VT_FAIRINGLENGTH = 40,
    VT_FAIRINGNAME = 42,
    VT_FAIRINGEXTERNALDIAMETER = 44,
    VT_FAIRINGINTERNALDIAMETER = 46,
    VT_FAIRINGMASS = 48,
    VT_FAIRINGMATERIAL = 50,
    VT_MAXACCELLOAD = 52,
    VT_MAXPAYLOADFREQLAT = 54,
    VT_MAXPAYLOADFREQLON = 56,
    VT_MAXACOUSTICLEVEL = 58,
    VT_MAXACOUSTICLEVELRANGE = 60,
    VT_SOUNDPRESSURELEVEL = 62,
    VT_MAXFLIGHTSHOCKFORCE = 64,
    VT_MAXFLIGHTSHOCKFREQ = 66,
    VT_MAXFAIRINGPRESSURECHANGE = 68,
    VT_ESTLAUNCHPRICE = 70,
    VT_ESTLAUNCHPRICETYPICAL = 72,
    VT_GTOINJ3SIGACCURACYAPOGEETARGET = 74,
    VT_GTOINJ3SIGACCURACYAPOGEEMARGIN = 76,
    VT_GTOINJ3SIGACCURACYPERIGEETARGET = 78,
    VT_GTOINJ3SIGACCURACYPERIGEEMARGIN = 80,
    VT_GTOINJ3SIGACCURACYINCLINATIONTARGET = 82,
    VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN = 84,
    VT_ATTITUDEACCURACY = 86,
    VT_PAYLOADSEPARATIONRATE = 88,
    VT_DEPLOYMENTROTATIONRATE = 90,
    VT_SOURCEURL = 92,
    VT_NOTES = 94,
    VT_FAIRINGNOTES = 96,
    VT_PAYLOADNOTES = 98,
    VT_CREATEDAT = 100,
    VT_CREATEDBY = 102,
    VT_SOURCE = 104,
    VT_ORIGIN = 106,
    VT_ORIGNETWORK = 108,
    VT_DATAMODE = 110
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Identifier of the parent launch vehicle record.
  /// Example: /// Example: LAUNCHVEHICLE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idLaunchVehicle() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDLAUNCHVEHICLE);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Vehicle variant.
  /// Example: /// Example: Example-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *variant() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VARIANT);
  }
  /// Vehicle minor variant.
  /// Example: /// Example: Example-minor-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *minorVariant() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MINORVARIANT);
  }
  /// Vehicle category.
  /// Example: /// Example: Example-category
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  /// ID of the organization that manufactures the launch vehicle.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Vehicle launch prefix.
  /// Example: /// Example: AX011
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *launchPrefix() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHPREFIX);
  }
  /// Vehicle family.
  /// Example: /// Example: Example-family
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *family() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAMILY);
  }
  /// Propellant type.
  /// Example: /// Example: Nitrogen
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *propellant() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROPELLANT);
  }
  /// Oxidizer type.
  /// Example: /// Example: Bromine
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *oxidizer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OXIDIZER);
  }
  /// Vehicle length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double length() const {
    return GetField<double>(VT_LENGTH, 0.0);
  }
  /// Vehicle diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double diameter() const {
    return GetField<double>(VT_DIAMETER, 0.0);
  }
  /// Vehicle total mass at launch time in kg (including all boosters).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double launchMass() const {
    return GetField<double>(VT_LAUNCHMASS, 0.0);
  }
  /// Maximum vehicle payload mass to GEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double geoPayloadMass() const {
    return GetField<double>(VT_GEOPAYLOADMASS, 0.0);
  }
  /// Max vehicle payload mass to Geo-Transfer Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoPayloadMass() const {
    return GetField<double>(VT_GTOPAYLOADMASS, 0.0);
  }
  /// Max vehicle payload mass to LEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double leoPayloadMass() const {
    return GetField<double>(VT_LEOPAYLOADMASS, 0.0);
  }
  /// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double ssoPayloadMass() const {
    return GetField<double>(VT_SSOPAYLOADMASS, 0.0);
  }
  /// Vehicle fairing length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double fairingLength() const {
    return GetField<double>(VT_FAIRINGLENGTH, 0.0);
  }
  /// Name of the fairing.
  /// Example: /// Example: Example-fairing-name
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *fairingName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAIRINGNAME);
  }
  /// Vehicle fairing maximum external diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double fairingExternalDiameter() const {
    return GetField<double>(VT_FAIRINGEXTERNALDIAMETER, 0.0);
  }
  /// Vehicle fairing maximum internal diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double fairingInternalDiameter() const {
    return GetField<double>(VT_FAIRINGINTERNALDIAMETER, 0.0);
  }
  /// Vehicle fairing mass in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double fairingMass() const {
    return GetField<double>(VT_FAIRINGMASS, 0.0);
  }
  /// Fairing material.
  /// Example: /// Example: Example-fairing-material
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *fairingMaterial() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAIRINGMATERIAL);
  }
  /// Vehicle maximum acceleration load in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxAccelLoad() const {
    return GetField<double>(VT_MAXACCELLOAD, 0.0);
  }
  /// Vehicle maximum payload lateral frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxPayloadFreqLat() const {
    return GetField<double>(VT_MAXPAYLOADFREQLAT, 0.0);
  }
  /// Vehicle maximum payload longitudinal frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxPayloadFreqLon() const {
    return GetField<double>(VT_MAXPAYLOADFREQLON, 0.0);
  }
  /// Vehicle maximum acoustic level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxAcousticLevel() const {
    return GetField<double>(VT_MAXACOUSTICLEVEL, 0.0);
  }
  /// Vehicle maximum acoustic level range in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxAcousticLevelRange() const {
    return GetField<double>(VT_MAXACOUSTICLEVELRANGE, 0.0);
  }
  /// Vehicle overall sound pressure level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double soundPressureLevel() const {
    return GetField<double>(VT_SOUNDPRESSURELEVEL, 0.0);
  }
  /// Vehicle maximum flight shock force in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxFlightShockForce() const {
    return GetField<double>(VT_MAXFLIGHTSHOCKFORCE, 0.0);
  }
  /// Vehicle maximum flight shock frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxFlightShockFreq() const {
    return GetField<double>(VT_MAXFLIGHTSHOCKFREQ, 0.0);
  }
  /// Vehicle fairing maximum pressure change in kPa/sec.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxFairingPressureChange() const {
    return GetField<double>(VT_MAXFAIRINGPRESSURECHANGE, 0.0);
  }
  /// Launch vehicle estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double estLaunchPrice() const {
    return GetField<double>(VT_ESTLAUNCHPRICE, 0.0);
  }
  /// Launch vehicle typical estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double estLaunchPriceTypical() const {
    return GetField<double>(VT_ESTLAUNCHPRICETYPICAL, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyApogeeTarget() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYAPOGEETARGET, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyApogeeMargin() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyPerigeeTarget() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYPERIGEETARGET, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyPerigeeMargin() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyInclinationTarget() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, 0.0);
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double gtoInj3SigAccuracyInclinationMargin() const {
    return GetField<double>(VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, 0.0);
  }
  /// Launch vehicle attitude accuracy (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double attitudeAccuracy() const {
    return GetField<double>(VT_ATTITUDEACCURACY, 0.0);
  }
  /// Launch vehicle payload separation rate in m/s.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double payloadSeparationRate() const {
    return GetField<double>(VT_PAYLOADSEPARATIONRATE, 0.0);
  }
  /// Launch vehicle deployment rotation rate in RPM.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double deploymentRotationRate() const {
    return GetField<double>(VT_DEPLOYMENTROTATIONRATE, 0.0);
  }
  /// Optional URL for additional information on the vehicle.
  /// Example: /// Example: Example URL
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *sourceURL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEURL);
  }
  /// Notes/Description of the launch vehicle.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Notes/Description of the launch vehicle fairing.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *fairingNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAIRINGNOTES);
  }
  /// Notes/Description of the launch vehicle payload.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *payloadNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOADNOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LaunchVehicleDetails_Abridged_dataMode_Enum dataMode() const {
    return static_cast<LaunchVehicleDetails_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDLAUNCHVEHICLE) &&
           verifier.VerifyString(idLaunchVehicle()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_VARIANT) &&
           verifier.VerifyString(variant()) &&
           VerifyOffset(verifier, VT_MINORVARIANT) &&
           verifier.VerifyString(minorVariant()) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_LAUNCHPREFIX) &&
           verifier.VerifyString(launchPrefix()) &&
           VerifyOffset(verifier, VT_FAMILY) &&
           verifier.VerifyString(family()) &&
           VerifyOffset(verifier, VT_PROPELLANT) &&
           verifier.VerifyString(propellant()) &&
           VerifyOffset(verifier, VT_OXIDIZER) &&
           verifier.VerifyString(oxidizer()) &&
           VerifyField<double>(verifier, VT_LENGTH, 8) &&
           VerifyField<double>(verifier, VT_DIAMETER, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHMASS, 8) &&
           VerifyField<double>(verifier, VT_GEOPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_GTOPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_LEOPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_SSOPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_FAIRINGLENGTH, 8) &&
           VerifyOffset(verifier, VT_FAIRINGNAME) &&
           verifier.VerifyString(fairingName()) &&
           VerifyField<double>(verifier, VT_FAIRINGEXTERNALDIAMETER, 8) &&
           VerifyField<double>(verifier, VT_FAIRINGINTERNALDIAMETER, 8) &&
           VerifyField<double>(verifier, VT_FAIRINGMASS, 8) &&
           VerifyOffset(verifier, VT_FAIRINGMATERIAL) &&
           verifier.VerifyString(fairingMaterial()) &&
           VerifyField<double>(verifier, VT_MAXACCELLOAD, 8) &&
           VerifyField<double>(verifier, VT_MAXPAYLOADFREQLAT, 8) &&
           VerifyField<double>(verifier, VT_MAXPAYLOADFREQLON, 8) &&
           VerifyField<double>(verifier, VT_MAXACOUSTICLEVEL, 8) &&
           VerifyField<double>(verifier, VT_MAXACOUSTICLEVELRANGE, 8) &&
           VerifyField<double>(verifier, VT_SOUNDPRESSURELEVEL, 8) &&
           VerifyField<double>(verifier, VT_MAXFLIGHTSHOCKFORCE, 8) &&
           VerifyField<double>(verifier, VT_MAXFLIGHTSHOCKFREQ, 8) &&
           VerifyField<double>(verifier, VT_MAXFAIRINGPRESSURECHANGE, 8) &&
           VerifyField<double>(verifier, VT_ESTLAUNCHPRICE, 8) &&
           VerifyField<double>(verifier, VT_ESTLAUNCHPRICETYPICAL, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYAPOGEETARGET, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYPERIGEETARGET, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, 8) &&
           VerifyField<double>(verifier, VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, 8) &&
           VerifyField<double>(verifier, VT_ATTITUDEACCURACY, 8) &&
           VerifyField<double>(verifier, VT_PAYLOADSEPARATIONRATE, 8) &&
           VerifyField<double>(verifier, VT_DEPLOYMENTROTATIONRATE, 8) &&
           VerifyOffset(verifier, VT_SOURCEURL) &&
           verifier.VerifyString(sourceURL()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_FAIRINGNOTES) &&
           verifier.VerifyString(fairingNotes()) &&
           VerifyOffset(verifier, VT_PAYLOADNOTES) &&
           verifier.VerifyString(payloadNotes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct LaunchVehicleDetails_AbridgedBuilder {
  typedef LaunchVehicleDetails_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_ID, id);
  }
  void add_idLaunchVehicle(::flatbuffers::Offset<::flatbuffers::String> idLaunchVehicle) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_IDLAUNCHVEHICLE, idLaunchVehicle);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_variant(::flatbuffers::Offset<::flatbuffers::String> variant) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_VARIANT, variant);
  }
  void add_minorVariant(::flatbuffers::Offset<::flatbuffers::String> minorVariant) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_MINORVARIANT, minorVariant);
  }
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_CATEGORY, category);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_launchPrefix(::flatbuffers::Offset<::flatbuffers::String> launchPrefix) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_LAUNCHPREFIX, launchPrefix);
  }
  void add_family(::flatbuffers::Offset<::flatbuffers::String> family) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_FAMILY, family);
  }
  void add_propellant(::flatbuffers::Offset<::flatbuffers::String> propellant) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_PROPELLANT, propellant);
  }
  void add_oxidizer(::flatbuffers::Offset<::flatbuffers::String> oxidizer) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_OXIDIZER, oxidizer);
  }
  void add_length(double length) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_LENGTH, length, 0.0);
  }
  void add_diameter(double diameter) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_DIAMETER, diameter, 0.0);
  }
  void add_launchMass(double launchMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_LAUNCHMASS, launchMass, 0.0);
  }
  void add_geoPayloadMass(double geoPayloadMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GEOPAYLOADMASS, geoPayloadMass, 0.0);
  }
  void add_gtoPayloadMass(double gtoPayloadMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOPAYLOADMASS, gtoPayloadMass, 0.0);
  }
  void add_leoPayloadMass(double leoPayloadMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_LEOPAYLOADMASS, leoPayloadMass, 0.0);
  }
  void add_ssoPayloadMass(double ssoPayloadMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_SSOPAYLOADMASS, ssoPayloadMass, 0.0);
  }
  void add_fairingLength(double fairingLength) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_FAIRINGLENGTH, fairingLength, 0.0);
  }
  void add_fairingName(::flatbuffers::Offset<::flatbuffers::String> fairingName) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_FAIRINGNAME, fairingName);
  }
  void add_fairingExternalDiameter(double fairingExternalDiameter) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_FAIRINGEXTERNALDIAMETER, fairingExternalDiameter, 0.0);
  }
  void add_fairingInternalDiameter(double fairingInternalDiameter) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_FAIRINGINTERNALDIAMETER, fairingInternalDiameter, 0.0);
  }
  void add_fairingMass(double fairingMass) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_FAIRINGMASS, fairingMass, 0.0);
  }
  void add_fairingMaterial(::flatbuffers::Offset<::flatbuffers::String> fairingMaterial) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_FAIRINGMATERIAL, fairingMaterial);
  }
  void add_maxAccelLoad(double maxAccelLoad) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXACCELLOAD, maxAccelLoad, 0.0);
  }
  void add_maxPayloadFreqLat(double maxPayloadFreqLat) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXPAYLOADFREQLAT, maxPayloadFreqLat, 0.0);
  }
  void add_maxPayloadFreqLon(double maxPayloadFreqLon) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXPAYLOADFREQLON, maxPayloadFreqLon, 0.0);
  }
  void add_maxAcousticLevel(double maxAcousticLevel) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXACOUSTICLEVEL, maxAcousticLevel, 0.0);
  }
  void add_maxAcousticLevelRange(double maxAcousticLevelRange) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXACOUSTICLEVELRANGE, maxAcousticLevelRange, 0.0);
  }
  void add_soundPressureLevel(double soundPressureLevel) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_SOUNDPRESSURELEVEL, soundPressureLevel, 0.0);
  }
  void add_maxFlightShockForce(double maxFlightShockForce) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXFLIGHTSHOCKFORCE, maxFlightShockForce, 0.0);
  }
  void add_maxFlightShockFreq(double maxFlightShockFreq) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXFLIGHTSHOCKFREQ, maxFlightShockFreq, 0.0);
  }
  void add_maxFairingPressureChange(double maxFairingPressureChange) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_MAXFAIRINGPRESSURECHANGE, maxFairingPressureChange, 0.0);
  }
  void add_estLaunchPrice(double estLaunchPrice) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_ESTLAUNCHPRICE, estLaunchPrice, 0.0);
  }
  void add_estLaunchPriceTypical(double estLaunchPriceTypical) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_ESTLAUNCHPRICETYPICAL, estLaunchPriceTypical, 0.0);
  }
  void add_gtoInj3SigAccuracyApogeeTarget(double gtoInj3SigAccuracyApogeeTarget) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYAPOGEETARGET, gtoInj3SigAccuracyApogeeTarget, 0.0);
  }
  void add_gtoInj3SigAccuracyApogeeMargin(double gtoInj3SigAccuracyApogeeMargin) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, gtoInj3SigAccuracyApogeeMargin, 0.0);
  }
  void add_gtoInj3SigAccuracyPerigeeTarget(double gtoInj3SigAccuracyPerigeeTarget) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYPERIGEETARGET, gtoInj3SigAccuracyPerigeeTarget, 0.0);
  }
  void add_gtoInj3SigAccuracyPerigeeMargin(double gtoInj3SigAccuracyPerigeeMargin) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, gtoInj3SigAccuracyPerigeeMargin, 0.0);
  }
  void add_gtoInj3SigAccuracyInclinationTarget(double gtoInj3SigAccuracyInclinationTarget) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, gtoInj3SigAccuracyInclinationTarget, 0.0);
  }
  void add_gtoInj3SigAccuracyInclinationMargin(double gtoInj3SigAccuracyInclinationMargin) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, gtoInj3SigAccuracyInclinationMargin, 0.0);
  }
  void add_attitudeAccuracy(double attitudeAccuracy) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_ATTITUDEACCURACY, attitudeAccuracy, 0.0);
  }
  void add_payloadSeparationRate(double payloadSeparationRate) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_PAYLOADSEPARATIONRATE, payloadSeparationRate, 0.0);
  }
  void add_deploymentRotationRate(double deploymentRotationRate) {
    fbb_.AddElement<double>(LaunchVehicleDetails_Abridged::VT_DEPLOYMENTROTATIONRATE, deploymentRotationRate, 0.0);
  }
  void add_sourceURL(::flatbuffers::Offset<::flatbuffers::String> sourceURL) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_SOURCEURL, sourceURL);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_NOTES, notes);
  }
  void add_fairingNotes(::flatbuffers::Offset<::flatbuffers::String> fairingNotes) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_FAIRINGNOTES, fairingNotes);
  }
  void add_payloadNotes(::flatbuffers::Offset<::flatbuffers::String> payloadNotes) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_PAYLOADNOTES, payloadNotes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LaunchVehicleDetails_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(LaunchVehicleDetails_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LaunchVehicleDetails_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit LaunchVehicleDetails_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LaunchVehicleDetails_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LaunchVehicleDetails_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LaunchVehicleDetails_Abridged> CreateLaunchVehicleDetails_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idLaunchVehicle = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> variant = 0,
    ::flatbuffers::Offset<::flatbuffers::String> minorVariant = 0,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchPrefix = 0,
    ::flatbuffers::Offset<::flatbuffers::String> family = 0,
    ::flatbuffers::Offset<::flatbuffers::String> propellant = 0,
    ::flatbuffers::Offset<::flatbuffers::String> oxidizer = 0,
    double length = 0.0,
    double diameter = 0.0,
    double launchMass = 0.0,
    double geoPayloadMass = 0.0,
    double gtoPayloadMass = 0.0,
    double leoPayloadMass = 0.0,
    double ssoPayloadMass = 0.0,
    double fairingLength = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> fairingName = 0,
    double fairingExternalDiameter = 0.0,
    double fairingInternalDiameter = 0.0,
    double fairingMass = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> fairingMaterial = 0,
    double maxAccelLoad = 0.0,
    double maxPayloadFreqLat = 0.0,
    double maxPayloadFreqLon = 0.0,
    double maxAcousticLevel = 0.0,
    double maxAcousticLevelRange = 0.0,
    double soundPressureLevel = 0.0,
    double maxFlightShockForce = 0.0,
    double maxFlightShockFreq = 0.0,
    double maxFairingPressureChange = 0.0,
    double estLaunchPrice = 0.0,
    double estLaunchPriceTypical = 0.0,
    double gtoInj3SigAccuracyApogeeTarget = 0.0,
    double gtoInj3SigAccuracyApogeeMargin = 0.0,
    double gtoInj3SigAccuracyPerigeeTarget = 0.0,
    double gtoInj3SigAccuracyPerigeeMargin = 0.0,
    double gtoInj3SigAccuracyInclinationTarget = 0.0,
    double gtoInj3SigAccuracyInclinationMargin = 0.0,
    double attitudeAccuracy = 0.0,
    double payloadSeparationRate = 0.0,
    double deploymentRotationRate = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceURL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fairingNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> payloadNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    LaunchVehicleDetails_Abridged_dataMode_Enum dataMode = LaunchVehicleDetails_Abridged_dataMode_Enum_REAL) {
  LaunchVehicleDetails_AbridgedBuilder builder_(_fbb);
  builder_.add_deploymentRotationRate(deploymentRotationRate);
  builder_.add_payloadSeparationRate(payloadSeparationRate);
  builder_.add_attitudeAccuracy(attitudeAccuracy);
  builder_.add_gtoInj3SigAccuracyInclinationMargin(gtoInj3SigAccuracyInclinationMargin);
  builder_.add_gtoInj3SigAccuracyInclinationTarget(gtoInj3SigAccuracyInclinationTarget);
  builder_.add_gtoInj3SigAccuracyPerigeeMargin(gtoInj3SigAccuracyPerigeeMargin);
  builder_.add_gtoInj3SigAccuracyPerigeeTarget(gtoInj3SigAccuracyPerigeeTarget);
  builder_.add_gtoInj3SigAccuracyApogeeMargin(gtoInj3SigAccuracyApogeeMargin);
  builder_.add_gtoInj3SigAccuracyApogeeTarget(gtoInj3SigAccuracyApogeeTarget);
  builder_.add_estLaunchPriceTypical(estLaunchPriceTypical);
  builder_.add_estLaunchPrice(estLaunchPrice);
  builder_.add_maxFairingPressureChange(maxFairingPressureChange);
  builder_.add_maxFlightShockFreq(maxFlightShockFreq);
  builder_.add_maxFlightShockForce(maxFlightShockForce);
  builder_.add_soundPressureLevel(soundPressureLevel);
  builder_.add_maxAcousticLevelRange(maxAcousticLevelRange);
  builder_.add_maxAcousticLevel(maxAcousticLevel);
  builder_.add_maxPayloadFreqLon(maxPayloadFreqLon);
  builder_.add_maxPayloadFreqLat(maxPayloadFreqLat);
  builder_.add_maxAccelLoad(maxAccelLoad);
  builder_.add_fairingMass(fairingMass);
  builder_.add_fairingInternalDiameter(fairingInternalDiameter);
  builder_.add_fairingExternalDiameter(fairingExternalDiameter);
  builder_.add_fairingLength(fairingLength);
  builder_.add_ssoPayloadMass(ssoPayloadMass);
  builder_.add_leoPayloadMass(leoPayloadMass);
  builder_.add_gtoPayloadMass(gtoPayloadMass);
  builder_.add_geoPayloadMass(geoPayloadMass);
  builder_.add_launchMass(launchMass);
  builder_.add_diameter(diameter);
  builder_.add_length(length);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_payloadNotes(payloadNotes);
  builder_.add_fairingNotes(fairingNotes);
  builder_.add_notes(notes);
  builder_.add_sourceURL(sourceURL);
  builder_.add_fairingMaterial(fairingMaterial);
  builder_.add_fairingName(fairingName);
  builder_.add_oxidizer(oxidizer);
  builder_.add_propellant(propellant);
  builder_.add_family(family);
  builder_.add_launchPrefix(launchPrefix);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_category(category);
  builder_.add_minorVariant(minorVariant);
  builder_.add_variant(variant);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idLaunchVehicle(idLaunchVehicle);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LaunchVehicleDetails_Abridged> CreateLaunchVehicleDetails_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idLaunchVehicle = nullptr,
    const char *classificationMarking = nullptr,
    const char *variant = nullptr,
    const char *minorVariant = nullptr,
    const char *category = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *launchPrefix = nullptr,
    const char *family = nullptr,
    const char *propellant = nullptr,
    const char *oxidizer = nullptr,
    double length = 0.0,
    double diameter = 0.0,
    double launchMass = 0.0,
    double geoPayloadMass = 0.0,
    double gtoPayloadMass = 0.0,
    double leoPayloadMass = 0.0,
    double ssoPayloadMass = 0.0,
    double fairingLength = 0.0,
    const char *fairingName = nullptr,
    double fairingExternalDiameter = 0.0,
    double fairingInternalDiameter = 0.0,
    double fairingMass = 0.0,
    const char *fairingMaterial = nullptr,
    double maxAccelLoad = 0.0,
    double maxPayloadFreqLat = 0.0,
    double maxPayloadFreqLon = 0.0,
    double maxAcousticLevel = 0.0,
    double maxAcousticLevelRange = 0.0,
    double soundPressureLevel = 0.0,
    double maxFlightShockForce = 0.0,
    double maxFlightShockFreq = 0.0,
    double maxFairingPressureChange = 0.0,
    double estLaunchPrice = 0.0,
    double estLaunchPriceTypical = 0.0,
    double gtoInj3SigAccuracyApogeeTarget = 0.0,
    double gtoInj3SigAccuracyApogeeMargin = 0.0,
    double gtoInj3SigAccuracyPerigeeTarget = 0.0,
    double gtoInj3SigAccuracyPerigeeMargin = 0.0,
    double gtoInj3SigAccuracyInclinationTarget = 0.0,
    double gtoInj3SigAccuracyInclinationMargin = 0.0,
    double attitudeAccuracy = 0.0,
    double payloadSeparationRate = 0.0,
    double deploymentRotationRate = 0.0,
    const char *sourceURL = nullptr,
    const char *notes = nullptr,
    const char *fairingNotes = nullptr,
    const char *payloadNotes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    LaunchVehicleDetails_Abridged_dataMode_Enum dataMode = LaunchVehicleDetails_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idLaunchVehicle__ = idLaunchVehicle ? _fbb.CreateString(idLaunchVehicle) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto variant__ = variant ? _fbb.CreateString(variant) : 0;
  auto minorVariant__ = minorVariant ? _fbb.CreateString(minorVariant) : 0;
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto launchPrefix__ = launchPrefix ? _fbb.CreateString(launchPrefix) : 0;
  auto family__ = family ? _fbb.CreateString(family) : 0;
  auto propellant__ = propellant ? _fbb.CreateString(propellant) : 0;
  auto oxidizer__ = oxidizer ? _fbb.CreateString(oxidizer) : 0;
  auto fairingName__ = fairingName ? _fbb.CreateString(fairingName) : 0;
  auto fairingMaterial__ = fairingMaterial ? _fbb.CreateString(fairingMaterial) : 0;
  auto sourceURL__ = sourceURL ? _fbb.CreateString(sourceURL) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto fairingNotes__ = fairingNotes ? _fbb.CreateString(fairingNotes) : 0;
  auto payloadNotes__ = payloadNotes ? _fbb.CreateString(payloadNotes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateLaunchVehicleDetails_Abridged(
      _fbb,
      id__,
      idLaunchVehicle__,
      classificationMarking__,
      variant__,
      minorVariant__,
      category__,
      manufacturerOrgId__,
      launchPrefix__,
      family__,
      propellant__,
      oxidizer__,
      length,
      diameter,
      launchMass,
      geoPayloadMass,
      gtoPayloadMass,
      leoPayloadMass,
      ssoPayloadMass,
      fairingLength,
      fairingName__,
      fairingExternalDiameter,
      fairingInternalDiameter,
      fairingMass,
      fairingMaterial__,
      maxAccelLoad,
      maxPayloadFreqLat,
      maxPayloadFreqLon,
      maxAcousticLevel,
      maxAcousticLevelRange,
      soundPressureLevel,
      maxFlightShockForce,
      maxFlightShockFreq,
      maxFairingPressureChange,
      estLaunchPrice,
      estLaunchPriceTypical,
      gtoInj3SigAccuracyApogeeTarget,
      gtoInj3SigAccuracyApogeeMargin,
      gtoInj3SigAccuracyPerigeeTarget,
      gtoInj3SigAccuracyPerigeeMargin,
      gtoInj3SigAccuracyInclinationTarget,
      gtoInj3SigAccuracyInclinationMargin,
      attitudeAccuracy,
      payloadSeparationRate,
      deploymentRotationRate,
      sourceURL__,
      notes__,
      fairingNotes__,
      payloadNotes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const LaunchVehicleDetails_Abridged *GetLaunchVehicleDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<LaunchVehicleDetails_Abridged>(buf);
}

inline const LaunchVehicleDetails_Abridged *GetSizePrefixedLaunchVehicleDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LaunchVehicleDetails_Abridged>(buf);
}

inline const char *LaunchVehicleDetails_AbridgedIdentifier() {
  return "LAUN";
}

inline bool LaunchVehicleDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchVehicleDetails_AbridgedIdentifier());
}

inline bool SizePrefixedLaunchVehicleDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchVehicleDetails_AbridgedIdentifier(), true);
}

inline bool VerifyLaunchVehicleDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LaunchVehicleDetails_Abridged>(LaunchVehicleDetails_AbridgedIdentifier());
}

inline bool VerifySizePrefixedLaunchVehicleDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LaunchVehicleDetails_Abridged>(LaunchVehicleDetails_AbridgedIdentifier());
}

inline void FinishLaunchVehicleDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchVehicleDetails_Abridged> root) {
  fbb.Finish(root, LaunchVehicleDetails_AbridgedIdentifier());
}

inline void FinishSizePrefixedLaunchVehicleDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchVehicleDetails_Abridged> root) {
  fbb.FinishSizePrefixed(root, LaunchVehicleDetails_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
