// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataCommDetails_Ingest;
struct SeradataCommDetails_IngestBuilder;

enum SeradataCommDetails_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataCommDetails_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataCommDetails_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataCommDetails_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataCommDetails_Ingest_dataMode_Enum_EXERCISE = 3,
  SeradataCommDetails_Ingest_dataMode_Enum_MIN = SeradataCommDetails_Ingest_dataMode_Enum_REAL,
  SeradataCommDetails_Ingest_dataMode_Enum_MAX = SeradataCommDetails_Ingest_dataMode_Enum_EXERCISE
};

inline const SeradataCommDetails_Ingest_dataMode_Enum (&EnumValuesSeradataCommDetails_Ingest_dataMode_Enum())[4] {
  static const SeradataCommDetails_Ingest_dataMode_Enum values[] = {
    SeradataCommDetails_Ingest_dataMode_Enum_REAL,
    SeradataCommDetails_Ingest_dataMode_Enum_TEST,
    SeradataCommDetails_Ingest_dataMode_Enum_SIMULATED,
    SeradataCommDetails_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataCommDetails_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataCommDetails_Ingest_dataMode_Enum(SeradataCommDetails_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataCommDetails_Ingest_dataMode_Enum_REAL, SeradataCommDetails_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataCommDetails_Ingest_dataMode_Enum()[index];
}

/// /// Seradata-compiled information on communications payloads.
struct SeradataCommDetails_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataCommDetails_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDCOMM = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_SPACECRAFTID = 10,
    VT_BAND = 12,
    VT_SOLIDSTATEPOWERAMP = 14,
    VT_TRAVELINGWAVETUBEAMPLIFIER = 16,
    VT_GATEWAYUPLINKFROM = 18,
    VT_GATEWAYUPLINKTO = 20,
    VT_GATEWAYDOWNLINKFROM = 22,
    VT_GATEWAYDOWNLINKTO = 24,
    VT_POLARIZATION = 26,
    VT_EIRP = 28,
    VT_BANDWIDTH = 30,
    VT_NUMOPERATIONALTRANSPONDERS = 32,
    VT_NUMSPARETRANSPONDERS = 34,
    VT_HOSTEDFORCOMPANYORGID = 36,
    VT_MANUFACTURERORGID = 38,
    VT_TRADELEASEORGID = 40,
    VT_NUM36MHZEQUIVALENTTRANSPONDERS = 42,
    VT_HTSNUMUSERSPOTBEAMS = 44,
    VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM = 46,
    VT_HTSUSERUPLINKBANDWIDTHPERBEAM = 48,
    VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM = 50,
    VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM = 52,
    VT_ESTHTSTOTALCAPACITY = 54,
    VT_USERDOWNLINKFROM = 56,
    VT_USERDOWNLINKTO = 58,
    VT_USERUPLINKFROM = 60,
    VT_USERUPLINKTO = 62,
    VT_PAYLOADNOTES = 64,
    VT_SOURCE = 66,
    VT_ORIGIN = 68,
    VT_ORIGNETWORK = 70,
    VT_DATAMODE = 72,
    VT_CREATEDAT = 74,
    VT_CREATEDBY = 76
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATACOMMDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// UUID of the parent Comm record.
  /// Example: /// Example: idComm
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idComm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDCOMM);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *spacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPACECRAFTID);
  }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: X
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *band() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BAND);
  }
  /// Solid state power amplifier, in Watts.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double solidStatePowerAmp() const {
    return GetField<double>(VT_SOLIDSTATEPOWERAMP, 0.0);
  }
  /// Comm travelingWaveTubeAmplifier in Watts.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double travelingWaveTubeAmplifier() const {
    return GetField<double>(VT_TRAVELINGWAVETUBEAMPLIFIER, 0.0);
  }
  /// Comm gatewayUplinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double gatewayUplinkFrom() const {
    return GetField<double>(VT_GATEWAYUPLINKFROM, 0.0);
  }
  /// Comm gatewayUplinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double gatewayUplinkTo() const {
    return GetField<double>(VT_GATEWAYUPLINKTO, 0.0);
  }
  /// Comm gatewayDownlinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double gatewayDownlinkFrom() const {
    return GetField<double>(VT_GATEWAYDOWNLINKFROM, 0.0);
  }
  /// Comm gatewayDownlinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double gatewayDownlinkTo() const {
    return GetField<double>(VT_GATEWAYDOWNLINKTO, 0.0);
  }
  /// Comm polarization.
  /// Example: /// Example: polarization
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *polarization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POLARIZATION);
  }
  /// Effective isotropic radiated power in dB.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double eirp() const {
    return GetField<double>(VT_EIRP, 0.0);
  }
  /// Comm bandwidth in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double bandwidth() const {
    return GetField<double>(VT_BANDWIDTH, 0.0);
  }
  /// Comm numOperationalTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numOperationalTransponders() const {
    return GetField<int32_t>(VT_NUMOPERATIONALTRANSPONDERS, 0);
  }
  /// Comm numSpareTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numSpareTransponders() const {
    return GetField<int32_t>(VT_NUMSPARETRANSPONDERS, 0);
  }
  /// Comm hostedForCompanyOrgId.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *hostedForCompanyOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTEDFORCOMPANYORGID);
  }
  /// Comm manufacturerOrgId.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Comm tradeLeaseOrgId.
  /// Example: /// Example: tradeLeaseOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *tradeLeaseOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRADELEASEORGID);
  }
  /// Comm num36MhzEquivalentTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t num36MhzEquivalentTransponders() const {
    return GetField<int32_t>(VT_NUM36MHZEQUIVALENTTRANSPONDERS, 0);
  }
  /// Comm htsNumUserSpotBeams.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t htsNumUserSpotBeams() const {
    return GetField<int32_t>(VT_HTSNUMUSERSPOTBEAMS, 0);
  }
  /// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double htsUserDownlinkBandwidthPerBeam() const {
    return GetField<double>(VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, 0.0);
  }
  /// Comm htsUserUplinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double htsUserUplinkBandwidthPerBeam() const {
    return GetField<double>(VT_HTSUSERUPLINKBANDWIDTHPERBEAM, 0.0);
  }
  /// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double estHtsTotalUserDownlinkBandwidthPerBeam() const {
    return GetField<double>(VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, 0.0);
  }
  /// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double estHtsTotalUserUplinkBandwidthPerBeam() const {
    return GetField<double>(VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, 0.0);
  }
  /// Comm estimated HtsTotalCapacity in Gbps.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double estHtsTotalCapacity() const {
    return GetField<double>(VT_ESTHTSTOTALCAPACITY, 0.0);
  }
  /// Comm userDownlinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double userDownlinkFrom() const {
    return GetField<double>(VT_USERDOWNLINKFROM, 0.0);
  }
  /// Comm userDownlinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double userDownlinkTo() const {
    return GetField<double>(VT_USERDOWNLINKTO, 0.0);
  }
  /// Comm userUplinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double userUplinkFrom() const {
    return GetField<double>(VT_USERUPLINKFROM, 0.0);
  }
  /// Comm userUplinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double userUplinkTo() const {
    return GetField<double>(VT_USERUPLINKTO, 0.0);
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *payloadNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOADNOTES);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataCommDetails_Ingest_dataMode_Enum dataMode() const {
    return static_cast<SeradataCommDetails_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDCOMM) &&
           verifier.VerifyString(idComm()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SPACECRAFTID) &&
           verifier.VerifyString(spacecraftId()) &&
           VerifyOffset(verifier, VT_BAND) &&
           verifier.VerifyString(band()) &&
           VerifyField<double>(verifier, VT_SOLIDSTATEPOWERAMP, 8) &&
           VerifyField<double>(verifier, VT_TRAVELINGWAVETUBEAMPLIFIER, 8) &&
           VerifyField<double>(verifier, VT_GATEWAYUPLINKFROM, 8) &&
           VerifyField<double>(verifier, VT_GATEWAYUPLINKTO, 8) &&
           VerifyField<double>(verifier, VT_GATEWAYDOWNLINKFROM, 8) &&
           VerifyField<double>(verifier, VT_GATEWAYDOWNLINKTO, 8) &&
           VerifyOffset(verifier, VT_POLARIZATION) &&
           verifier.VerifyString(polarization()) &&
           VerifyField<double>(verifier, VT_EIRP, 8) &&
           VerifyField<double>(verifier, VT_BANDWIDTH, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMOPERATIONALTRANSPONDERS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMSPARETRANSPONDERS, 4) &&
           VerifyOffset(verifier, VT_HOSTEDFORCOMPANYORGID) &&
           verifier.VerifyString(hostedForCompanyOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_TRADELEASEORGID) &&
           verifier.VerifyString(tradeLeaseOrgId()) &&
           VerifyField<int32_t>(verifier, VT_NUM36MHZEQUIVALENTTRANSPONDERS, 4) &&
           VerifyField<int32_t>(verifier, VT_HTSNUMUSERSPOTBEAMS, 4) &&
           VerifyField<double>(verifier, VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, 8) &&
           VerifyField<double>(verifier, VT_HTSUSERUPLINKBANDWIDTHPERBEAM, 8) &&
           VerifyField<double>(verifier, VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, 8) &&
           VerifyField<double>(verifier, VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, 8) &&
           VerifyField<double>(verifier, VT_ESTHTSTOTALCAPACITY, 8) &&
           VerifyField<double>(verifier, VT_USERDOWNLINKFROM, 8) &&
           VerifyField<double>(verifier, VT_USERDOWNLINKTO, 8) &&
           VerifyField<double>(verifier, VT_USERUPLINKFROM, 8) &&
           VerifyField<double>(verifier, VT_USERUPLINKTO, 8) &&
           VerifyOffset(verifier, VT_PAYLOADNOTES) &&
           verifier.VerifyString(payloadNotes()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct SeradataCommDetails_IngestBuilder {
  typedef SeradataCommDetails_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_ID, id);
  }
  void add_idComm(::flatbuffers::Offset<::flatbuffers::String> idComm) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_IDCOMM, idComm);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_spacecraftId(::flatbuffers::Offset<::flatbuffers::String> spacecraftId) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_SPACECRAFTID, spacecraftId);
  }
  void add_band(::flatbuffers::Offset<::flatbuffers::String> band) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_BAND, band);
  }
  void add_solidStatePowerAmp(double solidStatePowerAmp) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_SOLIDSTATEPOWERAMP, solidStatePowerAmp, 0.0);
  }
  void add_travelingWaveTubeAmplifier(double travelingWaveTubeAmplifier) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_TRAVELINGWAVETUBEAMPLIFIER, travelingWaveTubeAmplifier, 0.0);
  }
  void add_gatewayUplinkFrom(double gatewayUplinkFrom) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_GATEWAYUPLINKFROM, gatewayUplinkFrom, 0.0);
  }
  void add_gatewayUplinkTo(double gatewayUplinkTo) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_GATEWAYUPLINKTO, gatewayUplinkTo, 0.0);
  }
  void add_gatewayDownlinkFrom(double gatewayDownlinkFrom) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_GATEWAYDOWNLINKFROM, gatewayDownlinkFrom, 0.0);
  }
  void add_gatewayDownlinkTo(double gatewayDownlinkTo) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_GATEWAYDOWNLINKTO, gatewayDownlinkTo, 0.0);
  }
  void add_polarization(::flatbuffers::Offset<::flatbuffers::String> polarization) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_POLARIZATION, polarization);
  }
  void add_eirp(double eirp) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_EIRP, eirp, 0.0);
  }
  void add_bandwidth(double bandwidth) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_BANDWIDTH, bandwidth, 0.0);
  }
  void add_numOperationalTransponders(int32_t numOperationalTransponders) {
    fbb_.AddElement<int32_t>(SeradataCommDetails_Ingest::VT_NUMOPERATIONALTRANSPONDERS, numOperationalTransponders, 0);
  }
  void add_numSpareTransponders(int32_t numSpareTransponders) {
    fbb_.AddElement<int32_t>(SeradataCommDetails_Ingest::VT_NUMSPARETRANSPONDERS, numSpareTransponders, 0);
  }
  void add_hostedForCompanyOrgId(::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_tradeLeaseOrgId(::flatbuffers::Offset<::flatbuffers::String> tradeLeaseOrgId) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_TRADELEASEORGID, tradeLeaseOrgId);
  }
  void add_num36MhzEquivalentTransponders(int32_t num36MhzEquivalentTransponders) {
    fbb_.AddElement<int32_t>(SeradataCommDetails_Ingest::VT_NUM36MHZEQUIVALENTTRANSPONDERS, num36MhzEquivalentTransponders, 0);
  }
  void add_htsNumUserSpotBeams(int32_t htsNumUserSpotBeams) {
    fbb_.AddElement<int32_t>(SeradataCommDetails_Ingest::VT_HTSNUMUSERSPOTBEAMS, htsNumUserSpotBeams, 0);
  }
  void add_htsUserDownlinkBandwidthPerBeam(double htsUserDownlinkBandwidthPerBeam) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, htsUserDownlinkBandwidthPerBeam, 0.0);
  }
  void add_htsUserUplinkBandwidthPerBeam(double htsUserUplinkBandwidthPerBeam) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_HTSUSERUPLINKBANDWIDTHPERBEAM, htsUserUplinkBandwidthPerBeam, 0.0);
  }
  void add_estHtsTotalUserDownlinkBandwidthPerBeam(double estHtsTotalUserDownlinkBandwidthPerBeam) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0);
  }
  void add_estHtsTotalUserUplinkBandwidthPerBeam(double estHtsTotalUserUplinkBandwidthPerBeam) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, estHtsTotalUserUplinkBandwidthPerBeam, 0.0);
  }
  void add_estHtsTotalCapacity(double estHtsTotalCapacity) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_ESTHTSTOTALCAPACITY, estHtsTotalCapacity, 0.0);
  }
  void add_userDownlinkFrom(double userDownlinkFrom) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_USERDOWNLINKFROM, userDownlinkFrom, 0.0);
  }
  void add_userDownlinkTo(double userDownlinkTo) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_USERDOWNLINKTO, userDownlinkTo, 0.0);
  }
  void add_userUplinkFrom(double userUplinkFrom) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_USERUPLINKFROM, userUplinkFrom, 0.0);
  }
  void add_userUplinkTo(double userUplinkTo) {
    fbb_.AddElement<double>(SeradataCommDetails_Ingest::VT_USERUPLINKTO, userUplinkTo, 0.0);
  }
  void add_payloadNotes(::flatbuffers::Offset<::flatbuffers::String> payloadNotes) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_PAYLOADNOTES, payloadNotes);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataCommDetails_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataCommDetails_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataCommDetails_Ingest::VT_CREATEDBY, createdBy);
  }
  explicit SeradataCommDetails_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataCommDetails_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataCommDetails_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataCommDetails_Ingest> CreateSeradataCommDetails_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idComm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> band = 0,
    double solidStatePowerAmp = 0.0,
    double travelingWaveTubeAmplifier = 0.0,
    double gatewayUplinkFrom = 0.0,
    double gatewayUplinkTo = 0.0,
    double gatewayDownlinkFrom = 0.0,
    double gatewayDownlinkTo = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> polarization = 0,
    double eirp = 0.0,
    double bandwidth = 0.0,
    int32_t numOperationalTransponders = 0,
    int32_t numSpareTransponders = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tradeLeaseOrgId = 0,
    int32_t num36MhzEquivalentTransponders = 0,
    int32_t htsNumUserSpotBeams = 0,
    double htsUserDownlinkBandwidthPerBeam = 0.0,
    double htsUserUplinkBandwidthPerBeam = 0.0,
    double estHtsTotalUserDownlinkBandwidthPerBeam = 0.0,
    double estHtsTotalUserUplinkBandwidthPerBeam = 0.0,
    double estHtsTotalCapacity = 0.0,
    double userDownlinkFrom = 0.0,
    double userDownlinkTo = 0.0,
    double userUplinkFrom = 0.0,
    double userUplinkTo = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> payloadNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataCommDetails_Ingest_dataMode_Enum dataMode = SeradataCommDetails_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  SeradataCommDetails_IngestBuilder builder_(_fbb);
  builder_.add_userUplinkTo(userUplinkTo);
  builder_.add_userUplinkFrom(userUplinkFrom);
  builder_.add_userDownlinkTo(userDownlinkTo);
  builder_.add_userDownlinkFrom(userDownlinkFrom);
  builder_.add_estHtsTotalCapacity(estHtsTotalCapacity);
  builder_.add_estHtsTotalUserUplinkBandwidthPerBeam(estHtsTotalUserUplinkBandwidthPerBeam);
  builder_.add_estHtsTotalUserDownlinkBandwidthPerBeam(estHtsTotalUserDownlinkBandwidthPerBeam);
  builder_.add_htsUserUplinkBandwidthPerBeam(htsUserUplinkBandwidthPerBeam);
  builder_.add_htsUserDownlinkBandwidthPerBeam(htsUserDownlinkBandwidthPerBeam);
  builder_.add_bandwidth(bandwidth);
  builder_.add_eirp(eirp);
  builder_.add_gatewayDownlinkTo(gatewayDownlinkTo);
  builder_.add_gatewayDownlinkFrom(gatewayDownlinkFrom);
  builder_.add_gatewayUplinkTo(gatewayUplinkTo);
  builder_.add_gatewayUplinkFrom(gatewayUplinkFrom);
  builder_.add_travelingWaveTubeAmplifier(travelingWaveTubeAmplifier);
  builder_.add_solidStatePowerAmp(solidStatePowerAmp);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_payloadNotes(payloadNotes);
  builder_.add_htsNumUserSpotBeams(htsNumUserSpotBeams);
  builder_.add_num36MhzEquivalentTransponders(num36MhzEquivalentTransponders);
  builder_.add_tradeLeaseOrgId(tradeLeaseOrgId);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_hostedForCompanyOrgId(hostedForCompanyOrgId);
  builder_.add_numSpareTransponders(numSpareTransponders);
  builder_.add_numOperationalTransponders(numOperationalTransponders);
  builder_.add_polarization(polarization);
  builder_.add_band(band);
  builder_.add_spacecraftId(spacecraftId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idComm(idComm);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataCommDetails_Ingest> CreateSeradataCommDetails_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idComm = nullptr,
    const char *classificationMarking = nullptr,
    const char *spacecraftId = nullptr,
    const char *band = nullptr,
    double solidStatePowerAmp = 0.0,
    double travelingWaveTubeAmplifier = 0.0,
    double gatewayUplinkFrom = 0.0,
    double gatewayUplinkTo = 0.0,
    double gatewayDownlinkFrom = 0.0,
    double gatewayDownlinkTo = 0.0,
    const char *polarization = nullptr,
    double eirp = 0.0,
    double bandwidth = 0.0,
    int32_t numOperationalTransponders = 0,
    int32_t numSpareTransponders = 0,
    const char *hostedForCompanyOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *tradeLeaseOrgId = nullptr,
    int32_t num36MhzEquivalentTransponders = 0,
    int32_t htsNumUserSpotBeams = 0,
    double htsUserDownlinkBandwidthPerBeam = 0.0,
    double htsUserUplinkBandwidthPerBeam = 0.0,
    double estHtsTotalUserDownlinkBandwidthPerBeam = 0.0,
    double estHtsTotalUserUplinkBandwidthPerBeam = 0.0,
    double estHtsTotalCapacity = 0.0,
    double userDownlinkFrom = 0.0,
    double userDownlinkTo = 0.0,
    double userUplinkFrom = 0.0,
    double userUplinkTo = 0.0,
    const char *payloadNotes = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataCommDetails_Ingest_dataMode_Enum dataMode = SeradataCommDetails_Ingest_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idComm__ = idComm ? _fbb.CreateString(idComm) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto spacecraftId__ = spacecraftId ? _fbb.CreateString(spacecraftId) : 0;
  auto band__ = band ? _fbb.CreateString(band) : 0;
  auto polarization__ = polarization ? _fbb.CreateString(polarization) : 0;
  auto hostedForCompanyOrgId__ = hostedForCompanyOrgId ? _fbb.CreateString(hostedForCompanyOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto tradeLeaseOrgId__ = tradeLeaseOrgId ? _fbb.CreateString(tradeLeaseOrgId) : 0;
  auto payloadNotes__ = payloadNotes ? _fbb.CreateString(payloadNotes) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateSeradataCommDetails_Ingest(
      _fbb,
      id__,
      idComm__,
      classificationMarking__,
      spacecraftId__,
      band__,
      solidStatePowerAmp,
      travelingWaveTubeAmplifier,
      gatewayUplinkFrom,
      gatewayUplinkTo,
      gatewayDownlinkFrom,
      gatewayDownlinkTo,
      polarization__,
      eirp,
      bandwidth,
      numOperationalTransponders,
      numSpareTransponders,
      hostedForCompanyOrgId__,
      manufacturerOrgId__,
      tradeLeaseOrgId__,
      num36MhzEquivalentTransponders,
      htsNumUserSpotBeams,
      htsUserDownlinkBandwidthPerBeam,
      htsUserUplinkBandwidthPerBeam,
      estHtsTotalUserDownlinkBandwidthPerBeam,
      estHtsTotalUserUplinkBandwidthPerBeam,
      estHtsTotalCapacity,
      userDownlinkFrom,
      userDownlinkTo,
      userUplinkFrom,
      userUplinkTo,
      payloadNotes__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const SeradataCommDetails_Ingest *GetSeradataCommDetails_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataCommDetails_Ingest>(buf);
}

inline const SeradataCommDetails_Ingest *GetSizePrefixedSeradataCommDetails_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataCommDetails_Ingest>(buf);
}

inline const char *SeradataCommDetails_IngestIdentifier() {
  return "SERA";
}

inline bool SeradataCommDetails_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataCommDetails_IngestIdentifier());
}

inline bool SizePrefixedSeradataCommDetails_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataCommDetails_IngestIdentifier(), true);
}

inline bool VerifySeradataCommDetails_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataCommDetails_Ingest>(SeradataCommDetails_IngestIdentifier());
}

inline bool VerifySizePrefixedSeradataCommDetails_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataCommDetails_Ingest>(SeradataCommDetails_IngestIdentifier());
}

inline void FinishSeradataCommDetails_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataCommDetails_Ingest> root) {
  fbb.Finish(root, SeradataCommDetails_IngestIdentifier());
}

inline void FinishSizePrefixedSeradataCommDetails_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataCommDetails_Ingest> root) {
  fbb.FinishSizePrefixed(root, SeradataCommDetails_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
