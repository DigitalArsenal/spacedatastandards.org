// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OrganizationDetails_Full;
struct OrganizationDetails_FullBuilder;

enum OrganizationDetails_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OrganizationDetails_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OrganizationDetails_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OrganizationDetails_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OrganizationDetails_Full_dataMode_Enum_EXERCISE = 3,
  OrganizationDetails_Full_dataMode_Enum_MIN = OrganizationDetails_Full_dataMode_Enum_REAL,
  OrganizationDetails_Full_dataMode_Enum_MAX = OrganizationDetails_Full_dataMode_Enum_EXERCISE
};

inline const OrganizationDetails_Full_dataMode_Enum (&EnumValuesOrganizationDetails_Full_dataMode_Enum())[4] {
  static const OrganizationDetails_Full_dataMode_Enum values[] = {
    OrganizationDetails_Full_dataMode_Enum_REAL,
    OrganizationDetails_Full_dataMode_Enum_TEST,
    OrganizationDetails_Full_dataMode_Enum_SIMULATED,
    OrganizationDetails_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOrganizationDetails_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrganizationDetails_Full_dataMode_Enum(OrganizationDetails_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OrganizationDetails_Full_dataMode_Enum_REAL, OrganizationDetails_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrganizationDetails_Full_dataMode_Enum()[index];
}

/// /// Model representation of additional detailed organization data as collected by a particular source.
struct OrganizationDetails_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrganizationDetails_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDORGANIZATION = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_NAME = 10,
    VT_EMAIL = 12,
    VT_ADDRESS1 = 14,
    VT_ADDRESS2 = 16,
    VT_ADDRESS3 = 18,
    VT_GEOADMINLEVEL1 = 20,
    VT_GEOADMINLEVEL2 = 22,
    VT_GEOADMINLEVEL3 = 24,
    VT_POSTALCODE = 26,
    VT_DESCRIPTION = 28,
    VT_FORMERORGID = 30,
    VT_PARENTORGID = 32,
    VT_FINANCIALYEARENDDATE = 34,
    VT_REVENUE = 36,
    VT_PROFIT = 38,
    VT_EBITDA = 40,
    VT_FTES = 42,
    VT_BROKER = 44,
    VT_CEO = 46,
    VT_CFO = 48,
    VT_CTO = 50,
    VT_RISKMANAGER = 52,
    VT_MASSRANKING = 54,
    VT_REVENUERANKING = 56,
    VT_FINANCIALNOTES = 58,
    VT_SERVICESNOTES = 60,
    VT_FLEETPLANNOTES = 62,
    VT_SOURCE = 64,
    VT_ORIGIN = 66,
    VT_DATAMODE = 68,
    VT_TAGS = 70,
    VT_CREATEDAT = 72,
    VT_CREATEDBY = 74,
    VT_UPDATEDAT = 76,
    VT_UPDATEDBY = 78,
    VT_ORIGNETWORK = 80
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ORGANIZATIONDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique identifier of the parent organization.
  /// Example: /// Example: ORGANIZATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOrganization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDORGANIZATION);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Organization details name.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Listed contact email address for the organization.
  /// Example: /// Example: some_organization@organization.com
  /// Constraints: Minimum length = 0, Maximum length = 320
  const ::flatbuffers::String *email() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMAIL);
  }
  /// Street number of the organization.
  /// Example: /// Example: 123 Main Street
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *address1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS1);
  }
  /// Field for additional organization address information such as PO Box and unit number.
  /// Example: /// Example: Apt 4B
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *address2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS2);
  }
  /// Contains the third line of address information for an organization.
  /// Example: /// Example: Colorado Springs CO, 80903
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *address3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS3);
  }
  /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *geoAdminLevel1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL1);
  }
  /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
  /// Example: /// Example: El Paso County
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *geoAdminLevel2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL2);
  }
  /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 120
  const ::flatbuffers::String *geoAdminLevel3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOADMINLEVEL3);
  }
  /// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
  /// Example: /// Example: 80903
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *postalCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSTALCODE);
  }
  /// Organization description.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Former organization ID (if this organization previously existed as another organization).
  /// Example: /// Example: FORMERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *formerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORMERORGID);
  }
  /// Parent organization ID of this organization if it is a child organization.
  /// Example: /// Example: PARENTORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *parentOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARENTORGID);
  }
  /// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *financialYearEndDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FINANCIALYEARENDDATE);
  }
  /// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double revenue() const {
    return GetField<double>(VT_REVENUE, 0.0);
  }
  /// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double profit() const {
    return GetField<double>(VT_PROFIT, 0.0);
  }
  /// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double ebitda() const {
    return GetField<double>(VT_EBITDA, 0.0);
  }
  /// Total number of FTEs in this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t ftes() const {
    return GetField<int32_t>(VT_FTES, 0);
  }
  /// Designated broker for this organization.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *broker() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BROKER);
  }
  /// For organizations of type CORPORATION, the name of the Chief Executive Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *ceo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CEO);
  }
  /// For organizations of type CORPORATION, the name of the Chief Financial Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *cfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CFO);
  }
  /// For organizations of type CORPORATION, the name of the Chief Technology Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *cto() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTO);
  }
  /// The name of the risk manager for the organization.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *riskManager() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RISKMANAGER);
  }
  /// Mass ranking for this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t massRanking() const {
    return GetField<int32_t>(VT_MASSRANKING, 0);
  }
  /// Revenue ranking for this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t revenueRanking() const {
    return GetField<int32_t>(VT_REVENUERANKING, 0);
  }
  /// For organizations of type CORPORATION, notes on company financials.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *financialNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FINANCIALNOTES);
  }
  /// Notes on the services provided by the organization.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *servicesNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICESNOTES);
  }
  /// Satellite fleet planning notes for this organization.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *fleetPlanNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLEETPLANNOTES);
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OrganizationDetails_Full_dataMode_Enum dataMode() const {
    return static_cast<OrganizationDetails_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDORGANIZATION) &&
           verifier.VerifyString(idOrganization()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_ADDRESS1) &&
           verifier.VerifyString(address1()) &&
           VerifyOffset(verifier, VT_ADDRESS2) &&
           verifier.VerifyString(address2()) &&
           VerifyOffset(verifier, VT_ADDRESS3) &&
           verifier.VerifyString(address3()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL1) &&
           verifier.VerifyString(geoAdminLevel1()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL2) &&
           verifier.VerifyString(geoAdminLevel2()) &&
           VerifyOffset(verifier, VT_GEOADMINLEVEL3) &&
           verifier.VerifyString(geoAdminLevel3()) &&
           VerifyOffset(verifier, VT_POSTALCODE) &&
           verifier.VerifyString(postalCode()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_FORMERORGID) &&
           verifier.VerifyString(formerOrgId()) &&
           VerifyOffset(verifier, VT_PARENTORGID) &&
           verifier.VerifyString(parentOrgId()) &&
           VerifyOffset(verifier, VT_FINANCIALYEARENDDATE) &&
           verifier.VerifyString(financialYearEndDate()) &&
           VerifyField<double>(verifier, VT_REVENUE, 8) &&
           VerifyField<double>(verifier, VT_PROFIT, 8) &&
           VerifyField<double>(verifier, VT_EBITDA, 8) &&
           VerifyField<int32_t>(verifier, VT_FTES, 4) &&
           VerifyOffset(verifier, VT_BROKER) &&
           verifier.VerifyString(broker()) &&
           VerifyOffset(verifier, VT_CEO) &&
           verifier.VerifyString(ceo()) &&
           VerifyOffset(verifier, VT_CFO) &&
           verifier.VerifyString(cfo()) &&
           VerifyOffset(verifier, VT_CTO) &&
           verifier.VerifyString(cto()) &&
           VerifyOffset(verifier, VT_RISKMANAGER) &&
           verifier.VerifyString(riskManager()) &&
           VerifyField<int32_t>(verifier, VT_MASSRANKING, 4) &&
           VerifyField<int32_t>(verifier, VT_REVENUERANKING, 4) &&
           VerifyOffset(verifier, VT_FINANCIALNOTES) &&
           verifier.VerifyString(financialNotes()) &&
           VerifyOffset(verifier, VT_SERVICESNOTES) &&
           verifier.VerifyString(servicesNotes()) &&
           VerifyOffset(verifier, VT_FLEETPLANNOTES) &&
           verifier.VerifyString(fleetPlanNotes()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct OrganizationDetails_FullBuilder {
  typedef OrganizationDetails_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ID, id);
  }
  void add_idOrganization(::flatbuffers::Offset<::flatbuffers::String> idOrganization) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_IDORGANIZATION, idOrganization);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_NAME, name);
  }
  void add_email(::flatbuffers::Offset<::flatbuffers::String> email) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_EMAIL, email);
  }
  void add_address1(::flatbuffers::Offset<::flatbuffers::String> address1) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ADDRESS1, address1);
  }
  void add_address2(::flatbuffers::Offset<::flatbuffers::String> address2) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ADDRESS2, address2);
  }
  void add_address3(::flatbuffers::Offset<::flatbuffers::String> address3) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ADDRESS3, address3);
  }
  void add_geoAdminLevel1(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel1) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_GEOADMINLEVEL1, geoAdminLevel1);
  }
  void add_geoAdminLevel2(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel2) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_GEOADMINLEVEL2, geoAdminLevel2);
  }
  void add_geoAdminLevel3(::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel3) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_GEOADMINLEVEL3, geoAdminLevel3);
  }
  void add_postalCode(::flatbuffers::Offset<::flatbuffers::String> postalCode) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_POSTALCODE, postalCode);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_DESCRIPTION, description);
  }
  void add_formerOrgId(::flatbuffers::Offset<::flatbuffers::String> formerOrgId) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_FORMERORGID, formerOrgId);
  }
  void add_parentOrgId(::flatbuffers::Offset<::flatbuffers::String> parentOrgId) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_PARENTORGID, parentOrgId);
  }
  void add_financialYearEndDate(::flatbuffers::Offset<::flatbuffers::String> financialYearEndDate) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_FINANCIALYEARENDDATE, financialYearEndDate);
  }
  void add_revenue(double revenue) {
    fbb_.AddElement<double>(OrganizationDetails_Full::VT_REVENUE, revenue, 0.0);
  }
  void add_profit(double profit) {
    fbb_.AddElement<double>(OrganizationDetails_Full::VT_PROFIT, profit, 0.0);
  }
  void add_ebitda(double ebitda) {
    fbb_.AddElement<double>(OrganizationDetails_Full::VT_EBITDA, ebitda, 0.0);
  }
  void add_ftes(int32_t ftes) {
    fbb_.AddElement<int32_t>(OrganizationDetails_Full::VT_FTES, ftes, 0);
  }
  void add_broker(::flatbuffers::Offset<::flatbuffers::String> broker) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_BROKER, broker);
  }
  void add_ceo(::flatbuffers::Offset<::flatbuffers::String> ceo) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CEO, ceo);
  }
  void add_cfo(::flatbuffers::Offset<::flatbuffers::String> cfo) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CFO, cfo);
  }
  void add_cto(::flatbuffers::Offset<::flatbuffers::String> cto) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CTO, cto);
  }
  void add_riskManager(::flatbuffers::Offset<::flatbuffers::String> riskManager) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_RISKMANAGER, riskManager);
  }
  void add_massRanking(int32_t massRanking) {
    fbb_.AddElement<int32_t>(OrganizationDetails_Full::VT_MASSRANKING, massRanking, 0);
  }
  void add_revenueRanking(int32_t revenueRanking) {
    fbb_.AddElement<int32_t>(OrganizationDetails_Full::VT_REVENUERANKING, revenueRanking, 0);
  }
  void add_financialNotes(::flatbuffers::Offset<::flatbuffers::String> financialNotes) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_FINANCIALNOTES, financialNotes);
  }
  void add_servicesNotes(::flatbuffers::Offset<::flatbuffers::String> servicesNotes) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_SERVICESNOTES, servicesNotes);
  }
  void add_fleetPlanNotes(::flatbuffers::Offset<::flatbuffers::String> fleetPlanNotes) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_FLEETPLANNOTES, fleetPlanNotes);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(OrganizationDetails_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OrganizationDetails_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OrganizationDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit OrganizationDetails_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrganizationDetails_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrganizationDetails_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrganizationDetails_Full> CreateOrganizationDetails_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOrganization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> email = 0,
    ::flatbuffers::Offset<::flatbuffers::String> address1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> address2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> address3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoAdminLevel3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> postalCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> formerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> parentOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> financialYearEndDate = 0,
    double revenue = 0.0,
    double profit = 0.0,
    double ebitda = 0.0,
    int32_t ftes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> broker = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ceo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cto = 0,
    ::flatbuffers::Offset<::flatbuffers::String> riskManager = 0,
    int32_t massRanking = 0,
    int32_t revenueRanking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> financialNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> servicesNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fleetPlanNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    OrganizationDetails_Full_dataMode_Enum dataMode = OrganizationDetails_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  OrganizationDetails_FullBuilder builder_(_fbb);
  builder_.add_ebitda(ebitda);
  builder_.add_profit(profit);
  builder_.add_revenue(revenue);
  builder_.add_origNetwork(origNetwork);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_fleetPlanNotes(fleetPlanNotes);
  builder_.add_servicesNotes(servicesNotes);
  builder_.add_financialNotes(financialNotes);
  builder_.add_revenueRanking(revenueRanking);
  builder_.add_massRanking(massRanking);
  builder_.add_riskManager(riskManager);
  builder_.add_cto(cto);
  builder_.add_cfo(cfo);
  builder_.add_ceo(ceo);
  builder_.add_broker(broker);
  builder_.add_ftes(ftes);
  builder_.add_financialYearEndDate(financialYearEndDate);
  builder_.add_parentOrgId(parentOrgId);
  builder_.add_formerOrgId(formerOrgId);
  builder_.add_description(description);
  builder_.add_postalCode(postalCode);
  builder_.add_geoAdminLevel3(geoAdminLevel3);
  builder_.add_geoAdminLevel2(geoAdminLevel2);
  builder_.add_geoAdminLevel1(geoAdminLevel1);
  builder_.add_address3(address3);
  builder_.add_address2(address2);
  builder_.add_address1(address1);
  builder_.add_email(email);
  builder_.add_name(name);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idOrganization(idOrganization);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrganizationDetails_Full> CreateOrganizationDetails_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOrganization = nullptr,
    const char *classificationMarking = nullptr,
    const char *name = nullptr,
    const char *email = nullptr,
    const char *address1 = nullptr,
    const char *address2 = nullptr,
    const char *address3 = nullptr,
    const char *geoAdminLevel1 = nullptr,
    const char *geoAdminLevel2 = nullptr,
    const char *geoAdminLevel3 = nullptr,
    const char *postalCode = nullptr,
    const char *description = nullptr,
    const char *formerOrgId = nullptr,
    const char *parentOrgId = nullptr,
    const char *financialYearEndDate = nullptr,
    double revenue = 0.0,
    double profit = 0.0,
    double ebitda = 0.0,
    int32_t ftes = 0,
    const char *broker = nullptr,
    const char *ceo = nullptr,
    const char *cfo = nullptr,
    const char *cto = nullptr,
    const char *riskManager = nullptr,
    int32_t massRanking = 0,
    int32_t revenueRanking = 0,
    const char *financialNotes = nullptr,
    const char *servicesNotes = nullptr,
    const char *fleetPlanNotes = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    OrganizationDetails_Full_dataMode_Enum dataMode = OrganizationDetails_Full_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOrganization__ = idOrganization ? _fbb.CreateString(idOrganization) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto address1__ = address1 ? _fbb.CreateString(address1) : 0;
  auto address2__ = address2 ? _fbb.CreateString(address2) : 0;
  auto address3__ = address3 ? _fbb.CreateString(address3) : 0;
  auto geoAdminLevel1__ = geoAdminLevel1 ? _fbb.CreateString(geoAdminLevel1) : 0;
  auto geoAdminLevel2__ = geoAdminLevel2 ? _fbb.CreateString(geoAdminLevel2) : 0;
  auto geoAdminLevel3__ = geoAdminLevel3 ? _fbb.CreateString(geoAdminLevel3) : 0;
  auto postalCode__ = postalCode ? _fbb.CreateString(postalCode) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto formerOrgId__ = formerOrgId ? _fbb.CreateString(formerOrgId) : 0;
  auto parentOrgId__ = parentOrgId ? _fbb.CreateString(parentOrgId) : 0;
  auto financialYearEndDate__ = financialYearEndDate ? _fbb.CreateString(financialYearEndDate) : 0;
  auto broker__ = broker ? _fbb.CreateString(broker) : 0;
  auto ceo__ = ceo ? _fbb.CreateString(ceo) : 0;
  auto cfo__ = cfo ? _fbb.CreateString(cfo) : 0;
  auto cto__ = cto ? _fbb.CreateString(cto) : 0;
  auto riskManager__ = riskManager ? _fbb.CreateString(riskManager) : 0;
  auto financialNotes__ = financialNotes ? _fbb.CreateString(financialNotes) : 0;
  auto servicesNotes__ = servicesNotes ? _fbb.CreateString(servicesNotes) : 0;
  auto fleetPlanNotes__ = fleetPlanNotes ? _fbb.CreateString(fleetPlanNotes) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOrganizationDetails_Full(
      _fbb,
      id__,
      idOrganization__,
      classificationMarking__,
      name__,
      email__,
      address1__,
      address2__,
      address3__,
      geoAdminLevel1__,
      geoAdminLevel2__,
      geoAdminLevel3__,
      postalCode__,
      description__,
      formerOrgId__,
      parentOrgId__,
      financialYearEndDate__,
      revenue,
      profit,
      ebitda,
      ftes,
      broker__,
      ceo__,
      cfo__,
      cto__,
      riskManager__,
      massRanking,
      revenueRanking,
      financialNotes__,
      servicesNotes__,
      fleetPlanNotes__,
      source__,
      origin__,
      dataMode,
      tags__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      origNetwork__);
}

inline const OrganizationDetails_Full *GetOrganizationDetails_Full(const void *buf) {
  return ::flatbuffers::GetRoot<OrganizationDetails_Full>(buf);
}

inline const OrganizationDetails_Full *GetSizePrefixedOrganizationDetails_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OrganizationDetails_Full>(buf);
}

inline const char *OrganizationDetails_FullIdentifier() {
  return "ORGA";
}

inline bool OrganizationDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OrganizationDetails_FullIdentifier());
}

inline bool SizePrefixedOrganizationDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OrganizationDetails_FullIdentifier(), true);
}

inline bool VerifyOrganizationDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OrganizationDetails_Full>(OrganizationDetails_FullIdentifier());
}

inline bool VerifySizePrefixedOrganizationDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OrganizationDetails_Full>(OrganizationDetails_FullIdentifier());
}

inline void FinishOrganizationDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrganizationDetails_Full> root) {
  fbb.Finish(root, OrganizationDetails_FullIdentifier());
}

inline void FinishSizePrefixedOrganizationDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrganizationDetails_Full> root) {
  fbb.FinishSizePrefixed(root, OrganizationDetails_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
