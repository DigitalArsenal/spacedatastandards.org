// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EffectResponseMetrics_Abridged;
struct EffectResponseMetrics_AbridgedBuilder;

/// /// List of COA metrics associated with this effect response.
struct EffectResponseMetrics_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EffectResponseMetrics_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METRICTYPE = 4,
    VT_DOMAINVALUE = 6,
    VT_RELATIVEVALUE = 8,
    VT_PROVENANCE = 10
  };
  /// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
  /// Example: /// Example: GoalAchievement
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *metricType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METRICTYPE);
  }
  /// The metric score specific to its domain.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double domainValue() const {
    return GetField<double>(VT_DOMAINVALUE, 0.0);
  }
  /// The metric score adjusted to be relative and comparable to other domains.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double relativeValue() const {
    return GetField<double>(VT_RELATIVEVALUE, 0.0);
  }
  /// The metric that was used to score this task.
  /// Example: /// Example: Example metric
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *provenance() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROVENANCE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_METRICTYPE) &&
           verifier.VerifyString(metricType()) &&
           VerifyField<double>(verifier, VT_DOMAINVALUE, 8) &&
           VerifyField<double>(verifier, VT_RELATIVEVALUE, 8) &&
           VerifyOffset(verifier, VT_PROVENANCE) &&
           verifier.VerifyString(provenance()) &&
           verifier.EndTable();
  }
};

struct EffectResponseMetrics_AbridgedBuilder {
  typedef EffectResponseMetrics_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_metricType(::flatbuffers::Offset<::flatbuffers::String> metricType) {
    fbb_.AddOffset(EffectResponseMetrics_Abridged::VT_METRICTYPE, metricType);
  }
  void add_domainValue(double domainValue) {
    fbb_.AddElement<double>(EffectResponseMetrics_Abridged::VT_DOMAINVALUE, domainValue, 0.0);
  }
  void add_relativeValue(double relativeValue) {
    fbb_.AddElement<double>(EffectResponseMetrics_Abridged::VT_RELATIVEVALUE, relativeValue, 0.0);
  }
  void add_provenance(::flatbuffers::Offset<::flatbuffers::String> provenance) {
    fbb_.AddOffset(EffectResponseMetrics_Abridged::VT_PROVENANCE, provenance);
  }
  explicit EffectResponseMetrics_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EffectResponseMetrics_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EffectResponseMetrics_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EffectResponseMetrics_Abridged> CreateEffectResponseMetrics_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> metricType = 0,
    double domainValue = 0.0,
    double relativeValue = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> provenance = 0) {
  EffectResponseMetrics_AbridgedBuilder builder_(_fbb);
  builder_.add_relativeValue(relativeValue);
  builder_.add_domainValue(domainValue);
  builder_.add_provenance(provenance);
  builder_.add_metricType(metricType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EffectResponseMetrics_Abridged> CreateEffectResponseMetrics_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *metricType = nullptr,
    double domainValue = 0.0,
    double relativeValue = 0.0,
    const char *provenance = nullptr) {
  auto metricType__ = metricType ? _fbb.CreateString(metricType) : 0;
  auto provenance__ = provenance ? _fbb.CreateString(provenance) : 0;
  return CreateEffectResponseMetrics_Abridged(
      _fbb,
      metricType__,
      domainValue,
      relativeValue,
      provenance__);
}

inline const EffectResponseMetrics_Abridged *GetEffectResponseMetrics_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<EffectResponseMetrics_Abridged>(buf);
}

inline const EffectResponseMetrics_Abridged *GetSizePrefixedEffectResponseMetrics_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EffectResponseMetrics_Abridged>(buf);
}

inline const char *EffectResponseMetrics_AbridgedIdentifier() {
  return "EFFE";
}

inline bool EffectResponseMetrics_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponseMetrics_AbridgedIdentifier());
}

inline bool SizePrefixedEffectResponseMetrics_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponseMetrics_AbridgedIdentifier(), true);
}

inline bool VerifyEffectResponseMetrics_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EffectResponseMetrics_Abridged>(EffectResponseMetrics_AbridgedIdentifier());
}

inline bool VerifySizePrefixedEffectResponseMetrics_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EffectResponseMetrics_Abridged>(EffectResponseMetrics_AbridgedIdentifier());
}

inline void FinishEffectResponseMetrics_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponseMetrics_Abridged> root) {
  fbb.Finish(root, EffectResponseMetrics_AbridgedIdentifier());
}

inline void FinishSizePrefixedEffectResponseMetrics_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponseMetrics_Abridged> root) {
  fbb.FinishSizePrefixed(root, EffectResponseMetrics_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
