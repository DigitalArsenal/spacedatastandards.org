// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AttitudeData_Abridged;
struct AttitudeData_AbridgedBuilder;

enum AttitudeData_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AttitudeData_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AttitudeData_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AttitudeData_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AttitudeData_Abridged_dataMode_Enum_EXERCISE = 3,
  AttitudeData_Abridged_dataMode_Enum_MIN = AttitudeData_Abridged_dataMode_Enum_REAL,
  AttitudeData_Abridged_dataMode_Enum_MAX = AttitudeData_Abridged_dataMode_Enum_EXERCISE
};

inline const AttitudeData_Abridged_dataMode_Enum (&EnumValuesAttitudeData_Abridged_dataMode_Enum())[4] {
  static const AttitudeData_Abridged_dataMode_Enum values[] = {
    AttitudeData_Abridged_dataMode_Enum_REAL,
    AttitudeData_Abridged_dataMode_Enum_TEST,
    AttitudeData_Abridged_dataMode_Enum_SIMULATED,
    AttitudeData_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAttitudeData_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAttitudeData_Abridged_dataMode_Enum(AttitudeData_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AttitudeData_Abridged_dataMode_Enum_REAL, AttitudeData_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAttitudeData_Abridged_dataMode_Enum()[index];
}

/// /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
struct AttitudeData_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttitudeData_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ASID = 8,
    VT_IDONORBIT = 10,
    VT_SATNO = 12,
    VT_ORIGOBJECTID = 14,
    VT_TS = 16,
    VT_MOTIONTYPE = 18,
    VT_Q1 = 20,
    VT_Q2 = 22,
    VT_Q3 = 24,
    VT_QC = 26,
    VT_Q1DOT = 28,
    VT_Q2DOT = 30,
    VT_Q3DOT = 32,
    VT_QCDOT = 34,
    VT_XANGLE = 36,
    VT_YANGLE = 38,
    VT_ZANGLE = 40,
    VT_XRATE = 42,
    VT_YRATE = 44,
    VT_ZRATE = 46,
    VT_RA = 48,
    VT_DECLINATION = 50,
    VT_CONINGANGLE = 52,
    VT_PRECPERIOD = 54,
    VT_SPINPERIOD = 56,
    VT_CREATEDAT = 58,
    VT_CREATEDBY = 60,
    VT_SOURCE = 62,
    VT_ORIGIN = 64,
    VT_DATAMODE = 66,
    VT_ORIGNETWORK = 68
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ATTITUDEDATA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the parent AttitudeSet associated with this record.
  /// Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *asId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASID);
  }
  /// Unique identifier of the on-orbit satellite to which this attitude record applies.
  /// Example: /// Example: 41947
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the on-orbit object to which this attitude record applies.
  /// Example: /// Example: 41947
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: D6593
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2022-03-07T14:51:39.653043Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// Label specifying type of rotational motion of target.
  /// Example: /// Example: PROSOL_MOTION
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *motionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MOTIONTYPE);
  }
  /// Quaternion vector component 1.
  /// Example: /// Example: 0.0312
  /// Constraints: No constraints specified.
  double q1() const {
    return GetField<double>(VT_Q1, 0.0);
  }
  /// Quaternion vector component 2.
  /// Example: /// Example: 0.7854
  /// Constraints: No constraints specified.
  double q2() const {
    return GetField<double>(VT_Q2, 0.0);
  }
  /// Quaternion vector component 3.
  /// Example: /// Example: 0.3916
  /// Constraints: No constraints specified.
  double q3() const {
    return GetField<double>(VT_Q3, 0.0);
  }
  /// Quaternion scalar component.
  /// Example: /// Example: 0.4783
  /// Constraints: No constraints specified.
  double qc() const {
    return GetField<double>(VT_QC, 0.0);
  }
  /// Derivative of quaternion vector component 1.
  /// Example: /// Example: 0.0043
  /// Constraints: No constraints specified.
  double q1Dot() const {
    return GetField<double>(VT_Q1DOT, 0.0);
  }
  /// Derivative of quaternion vector component 2.
  /// Example: /// Example: 0.06
  /// Constraints: No constraints specified.
  double q2Dot() const {
    return GetField<double>(VT_Q2DOT, 0.0);
  }
  /// Derivative of quaternion vector component 3.
  /// Example: /// Example: 0.499
  /// Constraints: No constraints specified.
  double q3Dot() const {
    return GetField<double>(VT_Q3DOT, 0.0);
  }
  /// Derivative of quaternion scalar component.
  /// Example: /// Example: 0.011
  /// Constraints: No constraints specified.
  double qcDot() const {
    return GetField<double>(VT_QCDOT, 0.0);
  }
  /// Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [139.753]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *xAngle() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_XANGLE);
  }
  /// Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [25.066]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *yAngle() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_YANGLE);
  }
  /// Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
  /// Example: /// Example: [-53.368]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zAngle() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZANGLE);
  }
  /// Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.105]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *xRate() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_XRATE);
  }
  /// Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.032]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *yRate() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_YRATE);
  }
  /// Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
  /// Example: /// Example: [0.022]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zRate() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZRATE);
  }
  /// Precession axis right ascension (ECI J2000 frame) in degrees.
  /// Example: /// Example: -173.75
  /// Constraints: No constraints specified.
  double ra() const {
    return GetField<double>(VT_RA, 0.0);
  }
  /// Precession axis declination (ECI J2000 frame) in degrees.
  /// Example: /// Example: 0.799
  /// Constraints: No constraints specified.
  double declination() const {
    return GetField<double>(VT_DECLINATION, 0.0);
  }
  /// Coning angle in degrees.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double coningAngle() const {
    return GetField<double>(VT_CONINGANGLE, 0.0);
  }
  /// Precession period in seconds.
  /// Example: /// Example: 36.1
  /// Constraints: No constraints specified.
  double precPeriod() const {
    return GetField<double>(VT_PRECPERIOD, 0.0);
  }
  /// Spin period in seconds.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double spinPeriod() const {
    return GetField<double>(VT_SPINPERIOD, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-07-05T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AttitudeData_Abridged_dataMode_Enum dataMode() const {
    return static_cast<AttitudeData_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ASID) &&
           verifier.VerifyString(asId()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyOffset(verifier, VT_MOTIONTYPE) &&
           verifier.VerifyString(motionType()) &&
           VerifyField<double>(verifier, VT_Q1, 8) &&
           VerifyField<double>(verifier, VT_Q2, 8) &&
           VerifyField<double>(verifier, VT_Q3, 8) &&
           VerifyField<double>(verifier, VT_QC, 8) &&
           VerifyField<double>(verifier, VT_Q1DOT, 8) &&
           VerifyField<double>(verifier, VT_Q2DOT, 8) &&
           VerifyField<double>(verifier, VT_Q3DOT, 8) &&
           VerifyField<double>(verifier, VT_QCDOT, 8) &&
           VerifyOffset(verifier, VT_XANGLE) &&
           verifier.VerifyVector(xAngle()) &&
           verifier.VerifyVectorOfStrings(xAngle()) &&
           VerifyOffset(verifier, VT_YANGLE) &&
           verifier.VerifyVector(yAngle()) &&
           verifier.VerifyVectorOfStrings(yAngle()) &&
           VerifyOffset(verifier, VT_ZANGLE) &&
           verifier.VerifyVector(zAngle()) &&
           verifier.VerifyVectorOfStrings(zAngle()) &&
           VerifyOffset(verifier, VT_XRATE) &&
           verifier.VerifyVector(xRate()) &&
           verifier.VerifyVectorOfStrings(xRate()) &&
           VerifyOffset(verifier, VT_YRATE) &&
           verifier.VerifyVector(yRate()) &&
           verifier.VerifyVectorOfStrings(yRate()) &&
           VerifyOffset(verifier, VT_ZRATE) &&
           verifier.VerifyVector(zRate()) &&
           verifier.VerifyVectorOfStrings(zRate()) &&
           VerifyField<double>(verifier, VT_RA, 8) &&
           VerifyField<double>(verifier, VT_DECLINATION, 8) &&
           VerifyField<double>(verifier, VT_CONINGANGLE, 8) &&
           VerifyField<double>(verifier, VT_PRECPERIOD, 8) &&
           VerifyField<double>(verifier, VT_SPINPERIOD, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct AttitudeData_AbridgedBuilder {
  typedef AttitudeData_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_asId(::flatbuffers::Offset<::flatbuffers::String> asId) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ASID, asId);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(AttitudeData_Abridged::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_TS, ts);
  }
  void add_motionType(::flatbuffers::Offset<::flatbuffers::String> motionType) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_MOTIONTYPE, motionType);
  }
  void add_q1(double q1) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q1, q1, 0.0);
  }
  void add_q2(double q2) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q2, q2, 0.0);
  }
  void add_q3(double q3) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q3, q3, 0.0);
  }
  void add_qc(double qc) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_QC, qc, 0.0);
  }
  void add_q1Dot(double q1Dot) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q1DOT, q1Dot, 0.0);
  }
  void add_q2Dot(double q2Dot) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q2DOT, q2Dot, 0.0);
  }
  void add_q3Dot(double q3Dot) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_Q3DOT, q3Dot, 0.0);
  }
  void add_qcDot(double qcDot) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_QCDOT, qcDot, 0.0);
  }
  void add_xAngle(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xAngle) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_XANGLE, xAngle);
  }
  void add_yAngle(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yAngle) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_YANGLE, yAngle);
  }
  void add_zAngle(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zAngle) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ZANGLE, zAngle);
  }
  void add_xRate(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xRate) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_XRATE, xRate);
  }
  void add_yRate(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yRate) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_YRATE, yRate);
  }
  void add_zRate(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zRate) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ZRATE, zRate);
  }
  void add_ra(double ra) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_RA, ra, 0.0);
  }
  void add_declination(double declination) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_DECLINATION, declination, 0.0);
  }
  void add_coningAngle(double coningAngle) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_CONINGANGLE, coningAngle, 0.0);
  }
  void add_precPeriod(double precPeriod) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_PRECPERIOD, precPeriod, 0.0);
  }
  void add_spinPeriod(double spinPeriod) {
    fbb_.AddElement<double>(AttitudeData_Abridged::VT_SPINPERIOD, spinPeriod, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(AttitudeData_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AttitudeData_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AttitudeData_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit AttitudeData_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttitudeData_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttitudeData_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttitudeData_Abridged> CreateAttitudeData_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> asId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> motionType = 0,
    double q1 = 0.0,
    double q2 = 0.0,
    double q3 = 0.0,
    double qc = 0.0,
    double q1Dot = 0.0,
    double q2Dot = 0.0,
    double q3Dot = 0.0,
    double qcDot = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xAngle = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yAngle = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zAngle = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xRate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yRate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zRate = 0,
    double ra = 0.0,
    double declination = 0.0,
    double coningAngle = 0.0,
    double precPeriod = 0.0,
    double spinPeriod = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    AttitudeData_Abridged_dataMode_Enum dataMode = AttitudeData_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  AttitudeData_AbridgedBuilder builder_(_fbb);
  builder_.add_spinPeriod(spinPeriod);
  builder_.add_precPeriod(precPeriod);
  builder_.add_coningAngle(coningAngle);
  builder_.add_declination(declination);
  builder_.add_ra(ra);
  builder_.add_qcDot(qcDot);
  builder_.add_q3Dot(q3Dot);
  builder_.add_q2Dot(q2Dot);
  builder_.add_q1Dot(q1Dot);
  builder_.add_qc(qc);
  builder_.add_q3(q3);
  builder_.add_q2(q2);
  builder_.add_q1(q1);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_zRate(zRate);
  builder_.add_yRate(yRate);
  builder_.add_xRate(xRate);
  builder_.add_zAngle(zAngle);
  builder_.add_yAngle(yAngle);
  builder_.add_xAngle(xAngle);
  builder_.add_motionType(motionType);
  builder_.add_ts(ts);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_asId(asId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttitudeData_Abridged> CreateAttitudeData_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *asId = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *ts = nullptr,
    const char *motionType = nullptr,
    double q1 = 0.0,
    double q2 = 0.0,
    double q3 = 0.0,
    double qc = 0.0,
    double q1Dot = 0.0,
    double q2Dot = 0.0,
    double q3Dot = 0.0,
    double qcDot = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *xAngle = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *yAngle = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zAngle = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *xRate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *yRate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zRate = nullptr,
    double ra = 0.0,
    double declination = 0.0,
    double coningAngle = 0.0,
    double precPeriod = 0.0,
    double spinPeriod = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    AttitudeData_Abridged_dataMode_Enum dataMode = AttitudeData_Abridged_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto asId__ = asId ? _fbb.CreateString(asId) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto motionType__ = motionType ? _fbb.CreateString(motionType) : 0;
  auto xAngle__ = xAngle ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*xAngle) : 0;
  auto yAngle__ = yAngle ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*yAngle) : 0;
  auto zAngle__ = zAngle ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zAngle) : 0;
  auto xRate__ = xRate ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*xRate) : 0;
  auto yRate__ = yRate ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*yRate) : 0;
  auto zRate__ = zRate ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zRate) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAttitudeData_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      asId__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      ts__,
      motionType__,
      q1,
      q2,
      q3,
      qc,
      q1Dot,
      q2Dot,
      q3Dot,
      qcDot,
      xAngle__,
      yAngle__,
      zAngle__,
      xRate__,
      yRate__,
      zRate__,
      ra,
      declination,
      coningAngle,
      precPeriod,
      spinPeriod,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const AttitudeData_Abridged *GetAttitudeData_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AttitudeData_Abridged>(buf);
}

inline const AttitudeData_Abridged *GetSizePrefixedAttitudeData_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AttitudeData_Abridged>(buf);
}

inline const char *AttitudeData_AbridgedIdentifier() {
  return "ATTI";
}

inline bool AttitudeData_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AttitudeData_AbridgedIdentifier());
}

inline bool SizePrefixedAttitudeData_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AttitudeData_AbridgedIdentifier(), true);
}

inline bool VerifyAttitudeData_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AttitudeData_Abridged>(AttitudeData_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAttitudeData_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AttitudeData_Abridged>(AttitudeData_AbridgedIdentifier());
}

inline void FinishAttitudeData_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AttitudeData_Abridged> root) {
  fbb.Finish(root, AttitudeData_AbridgedIdentifier());
}

inline void FinishSizePrefixedAttitudeData_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AttitudeData_Abridged> root) {
  fbb.FinishSizePrefixed(root, AttitudeData_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
