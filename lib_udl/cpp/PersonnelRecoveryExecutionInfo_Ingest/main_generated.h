// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PersonnelRecoveryExecutionInfo_Ingest;
struct PersonnelRecoveryExecutionInfo_IngestBuilder;

/// /// Information pertaining to the details of executing the recovery.
struct PersonnelRecoveryExecutionInfo_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonnelRecoveryExecutionInfo_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INITIALPOINT = 4,
    VT_INGRESS = 6,
    VT_OBJSTRATEGY = 8,
    VT_EGRESSPOINT = 10,
    VT_EGRESS = 12,
    VT_RECOVERYVEHICLE = 14,
    VT_ESCORTVEHICLE = 16
  };
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [103.23, 30.445]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *initialPoint() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INITIALPOINT);
  }
  /// The heading, in degrees clockwise from North, of entering the recovery zone.
  /// Example: /// Example: 35.66
  /// Constraints: No constraints specified.
  double ingress() const {
    return GetField<double>(VT_INGRESS, 0.0);
  }
  /// Description of the objective strategy plan.
  /// Example: /// Example: Description of strategy plan.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *objStrategy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJSTRATEGY);
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [107.23, 30.455]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *egressPoint() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EGRESSPOINT);
  }
  /// The heading, in degrees, of leaving the recovery zone.
  /// Example: /// Example: 66.53
  /// Constraints: No constraints specified.
  double egress() const {
    return GetField<double>(VT_EGRESS, 0.0);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *recoveryVehicle() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECOVERYVEHICLE);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *escortVehicle() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESCORTVEHICLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INITIALPOINT) &&
           verifier.VerifyVector(initialPoint()) &&
           verifier.VerifyVectorOfStrings(initialPoint()) &&
           VerifyField<double>(verifier, VT_INGRESS, 8) &&
           VerifyOffset(verifier, VT_OBJSTRATEGY) &&
           verifier.VerifyString(objStrategy()) &&
           VerifyOffset(verifier, VT_EGRESSPOINT) &&
           verifier.VerifyVector(egressPoint()) &&
           verifier.VerifyVectorOfStrings(egressPoint()) &&
           VerifyField<double>(verifier, VT_EGRESS, 8) &&
           VerifyOffset(verifier, VT_RECOVERYVEHICLE) &&
           verifier.VerifyString(recoveryVehicle()) &&
           VerifyOffset(verifier, VT_ESCORTVEHICLE) &&
           verifier.VerifyString(escortVehicle()) &&
           verifier.EndTable();
  }
};

struct PersonnelRecoveryExecutionInfo_IngestBuilder {
  typedef PersonnelRecoveryExecutionInfo_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_initialPoint(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> initialPoint) {
    fbb_.AddOffset(PersonnelRecoveryExecutionInfo_Ingest::VT_INITIALPOINT, initialPoint);
  }
  void add_ingress(double ingress) {
    fbb_.AddElement<double>(PersonnelRecoveryExecutionInfo_Ingest::VT_INGRESS, ingress, 0.0);
  }
  void add_objStrategy(::flatbuffers::Offset<::flatbuffers::String> objStrategy) {
    fbb_.AddOffset(PersonnelRecoveryExecutionInfo_Ingest::VT_OBJSTRATEGY, objStrategy);
  }
  void add_egressPoint(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> egressPoint) {
    fbb_.AddOffset(PersonnelRecoveryExecutionInfo_Ingest::VT_EGRESSPOINT, egressPoint);
  }
  void add_egress(double egress) {
    fbb_.AddElement<double>(PersonnelRecoveryExecutionInfo_Ingest::VT_EGRESS, egress, 0.0);
  }
  void add_recoveryVehicle(::flatbuffers::Offset<::flatbuffers::String> recoveryVehicle) {
    fbb_.AddOffset(PersonnelRecoveryExecutionInfo_Ingest::VT_RECOVERYVEHICLE, recoveryVehicle);
  }
  void add_escortVehicle(::flatbuffers::Offset<::flatbuffers::String> escortVehicle) {
    fbb_.AddOffset(PersonnelRecoveryExecutionInfo_Ingest::VT_ESCORTVEHICLE, escortVehicle);
  }
  explicit PersonnelRecoveryExecutionInfo_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest> CreatePersonnelRecoveryExecutionInfo_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> initialPoint = 0,
    double ingress = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> objStrategy = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> egressPoint = 0,
    double egress = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> recoveryVehicle = 0,
    ::flatbuffers::Offset<::flatbuffers::String> escortVehicle = 0) {
  PersonnelRecoveryExecutionInfo_IngestBuilder builder_(_fbb);
  builder_.add_egress(egress);
  builder_.add_ingress(ingress);
  builder_.add_escortVehicle(escortVehicle);
  builder_.add_recoveryVehicle(recoveryVehicle);
  builder_.add_egressPoint(egressPoint);
  builder_.add_objStrategy(objStrategy);
  builder_.add_initialPoint(initialPoint);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest> CreatePersonnelRecoveryExecutionInfo_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *initialPoint = nullptr,
    double ingress = 0.0,
    const char *objStrategy = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *egressPoint = nullptr,
    double egress = 0.0,
    const char *recoveryVehicle = nullptr,
    const char *escortVehicle = nullptr) {
  auto initialPoint__ = initialPoint ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*initialPoint) : 0;
  auto objStrategy__ = objStrategy ? _fbb.CreateString(objStrategy) : 0;
  auto egressPoint__ = egressPoint ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*egressPoint) : 0;
  auto recoveryVehicle__ = recoveryVehicle ? _fbb.CreateString(recoveryVehicle) : 0;
  auto escortVehicle__ = escortVehicle ? _fbb.CreateString(escortVehicle) : 0;
  return CreatePersonnelRecoveryExecutionInfo_Ingest(
      _fbb,
      initialPoint__,
      ingress,
      objStrategy__,
      egressPoint__,
      egress,
      recoveryVehicle__,
      escortVehicle__);
}

inline const PersonnelRecoveryExecutionInfo_Ingest *GetPersonnelRecoveryExecutionInfo_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<PersonnelRecoveryExecutionInfo_Ingest>(buf);
}

inline const PersonnelRecoveryExecutionInfo_Ingest *GetSizePrefixedPersonnelRecoveryExecutionInfo_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonnelRecoveryExecutionInfo_Ingest>(buf);
}

inline const char *PersonnelRecoveryExecutionInfo_IngestIdentifier() {
  return "PERS";
}

inline bool PersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryExecutionInfo_IngestIdentifier());
}

inline bool SizePrefixedPersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryExecutionInfo_IngestIdentifier(), true);
}

inline bool VerifyPersonnelRecoveryExecutionInfo_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonnelRecoveryExecutionInfo_Ingest>(PersonnelRecoveryExecutionInfo_IngestIdentifier());
}

inline bool VerifySizePrefixedPersonnelRecoveryExecutionInfo_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonnelRecoveryExecutionInfo_Ingest>(PersonnelRecoveryExecutionInfo_IngestIdentifier());
}

inline void FinishPersonnelRecoveryExecutionInfo_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest> root) {
  fbb.Finish(root, PersonnelRecoveryExecutionInfo_IngestIdentifier());
}

inline void FinishSizePrefixedPersonnelRecoveryExecutionInfo_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryExecutionInfo_Ingest> root) {
  fbb.FinishSizePrefixed(root, PersonnelRecoveryExecutionInfo_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
