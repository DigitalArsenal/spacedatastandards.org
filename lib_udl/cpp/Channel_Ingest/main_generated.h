// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Channel_Ingest;
struct Channel_IngestBuilder;

enum Channel_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Channel_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Channel_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Channel_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Channel_Ingest_dataMode_Enum_EXERCISE = 3,
  Channel_Ingest_dataMode_Enum_MIN = Channel_Ingest_dataMode_Enum_REAL,
  Channel_Ingest_dataMode_Enum_MAX = Channel_Ingest_dataMode_Enum_EXERCISE
};

inline const Channel_Ingest_dataMode_Enum (&EnumValuesChannel_Ingest_dataMode_Enum())[4] {
  static const Channel_Ingest_dataMode_Enum values[] = {
    Channel_Ingest_dataMode_Enum_REAL,
    Channel_Ingest_dataMode_Enum_TEST,
    Channel_Ingest_dataMode_Enum_SIMULATED,
    Channel_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesChannel_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameChannel_Ingest_dataMode_Enum(Channel_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Channel_Ingest_dataMode_Enum_REAL, Channel_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesChannel_Ingest_dataMode_Enum()[index];
}

/// /// Channel information on a particular transponder.
struct Channel_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Channel_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDTRANSPONDER = 6,
    VT_NAME = 8,
    VT_CLASSIFICATIONMARKING = 10,
    VT_TYPE = 12,
    VT_IDBEAM = 14,
    VT_BEAMNAME = 16,
    VT_IDRFBAND = 18,
    VT_ENCRYPTION = 20,
    VT_PKG = 22,
    VT_RES = 24,
    VT_COMPRESSION = 26,
    VT_VPID = 28,
    VT_APID = 30,
    VT_SID = 32,
    VT_OWNER = 34,
    VT_SOURCE = 36,
    VT_ORIGIN = 38,
    VT_ORIGNETWORK = 40,
    VT_DATAMODE = 42,
    VT_CREATEDAT = 44,
    VT_CREATEDBY = 46
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: CHANNEL-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// ID of the parent transponder object for this Channel.
  /// Example: /// Example: REF-TRANSPONDER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idTransponder() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDTRANSPONDER);
  }
  /// Channel name.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Channel type.
  /// Example: /// Example: Example type
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Identifier of the particular beam for this channel.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idBeam() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDBEAM);
  }
  /// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
  /// Example: /// Example: B8VD
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *beamName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BEAMNAME);
  }
  /// ID of the RF Band object for this channel.
  /// Example: /// Example: REF-RFBAND-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idRFBand() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRFBAND);
  }
  /// Channel encryption.
  /// Example: /// Example: Example encryption
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *encryption() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENCRYPTION);
  }
  /// Pkg.
  /// Example: /// Example: Example pkg
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *pkg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PKG);
  }
  /// Res.
  /// Example: /// Example: Example res
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *res() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RES);
  }
  /// Channel compression.
  /// Example: /// Example: Example compression
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *compression() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMPRESSION);
  }
  /// Channel vPid.
  /// Example: /// Example: VP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *vpid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VPID);
  }
  /// Channel aPid.
  /// Example: /// Example: AP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *apid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APID);
  }
  /// SID.
  /// Example: /// Example: S-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *sid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SID);
  }
  /// Owner.
  /// Example: /// Example: example_owner
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *owner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER);
  }
  /// Source of the data.
  /// Example: /// Example: system.source
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: example_origin
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Channel_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Channel_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDTRANSPONDER) &&
           verifier.VerifyString(idTransponder()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_IDBEAM) &&
           verifier.VerifyString(idBeam()) &&
           VerifyOffset(verifier, VT_BEAMNAME) &&
           verifier.VerifyString(beamName()) &&
           VerifyOffset(verifier, VT_IDRFBAND) &&
           verifier.VerifyString(idRFBand()) &&
           VerifyOffset(verifier, VT_ENCRYPTION) &&
           verifier.VerifyString(encryption()) &&
           VerifyOffset(verifier, VT_PKG) &&
           verifier.VerifyString(pkg()) &&
           VerifyOffset(verifier, VT_RES) &&
           verifier.VerifyString(res()) &&
           VerifyOffset(verifier, VT_COMPRESSION) &&
           verifier.VerifyString(compression()) &&
           VerifyOffset(verifier, VT_VPID) &&
           verifier.VerifyString(vpid()) &&
           VerifyOffset(verifier, VT_APID) &&
           verifier.VerifyString(apid()) &&
           VerifyOffset(verifier, VT_SID) &&
           verifier.VerifyString(sid()) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct Channel_IngestBuilder {
  typedef Channel_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Channel_Ingest::VT_ID, id);
  }
  void add_idTransponder(::flatbuffers::Offset<::flatbuffers::String> idTransponder) {
    fbb_.AddOffset(Channel_Ingest::VT_IDTRANSPONDER, idTransponder);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Channel_Ingest::VT_NAME, name);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Channel_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Channel_Ingest::VT_TYPE, type);
  }
  void add_idBeam(::flatbuffers::Offset<::flatbuffers::String> idBeam) {
    fbb_.AddOffset(Channel_Ingest::VT_IDBEAM, idBeam);
  }
  void add_beamName(::flatbuffers::Offset<::flatbuffers::String> beamName) {
    fbb_.AddOffset(Channel_Ingest::VT_BEAMNAME, beamName);
  }
  void add_idRFBand(::flatbuffers::Offset<::flatbuffers::String> idRFBand) {
    fbb_.AddOffset(Channel_Ingest::VT_IDRFBAND, idRFBand);
  }
  void add_encryption(::flatbuffers::Offset<::flatbuffers::String> encryption) {
    fbb_.AddOffset(Channel_Ingest::VT_ENCRYPTION, encryption);
  }
  void add_pkg(::flatbuffers::Offset<::flatbuffers::String> pkg) {
    fbb_.AddOffset(Channel_Ingest::VT_PKG, pkg);
  }
  void add_res(::flatbuffers::Offset<::flatbuffers::String> res) {
    fbb_.AddOffset(Channel_Ingest::VT_RES, res);
  }
  void add_compression(::flatbuffers::Offset<::flatbuffers::String> compression) {
    fbb_.AddOffset(Channel_Ingest::VT_COMPRESSION, compression);
  }
  void add_vpid(::flatbuffers::Offset<::flatbuffers::String> vpid) {
    fbb_.AddOffset(Channel_Ingest::VT_VPID, vpid);
  }
  void add_apid(::flatbuffers::Offset<::flatbuffers::String> apid) {
    fbb_.AddOffset(Channel_Ingest::VT_APID, apid);
  }
  void add_sid(::flatbuffers::Offset<::flatbuffers::String> sid) {
    fbb_.AddOffset(Channel_Ingest::VT_SID, sid);
  }
  void add_owner(::flatbuffers::Offset<::flatbuffers::String> owner) {
    fbb_.AddOffset(Channel_Ingest::VT_OWNER, owner);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Channel_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Channel_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Channel_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Channel_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Channel_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Channel_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Channel_Ingest::VT_CREATEDBY, createdBy);
  }
  explicit Channel_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Channel_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Channel_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Channel_Ingest> CreateChannel_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idTransponder = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idBeam = 0,
    ::flatbuffers::Offset<::flatbuffers::String> beamName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idRFBand = 0,
    ::flatbuffers::Offset<::flatbuffers::String> encryption = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pkg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> res = 0,
    ::flatbuffers::Offset<::flatbuffers::String> compression = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vpid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> apid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> owner = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Channel_Ingest_dataMode_Enum dataMode = Channel_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  Channel_IngestBuilder builder_(_fbb);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_owner(owner);
  builder_.add_sid(sid);
  builder_.add_apid(apid);
  builder_.add_vpid(vpid);
  builder_.add_compression(compression);
  builder_.add_res(res);
  builder_.add_pkg(pkg);
  builder_.add_encryption(encryption);
  builder_.add_idRFBand(idRFBand);
  builder_.add_beamName(beamName);
  builder_.add_idBeam(idBeam);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_name(name);
  builder_.add_idTransponder(idTransponder);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Channel_Ingest> CreateChannel_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idTransponder = nullptr,
    const char *name = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    const char *idBeam = nullptr,
    const char *beamName = nullptr,
    const char *idRFBand = nullptr,
    const char *encryption = nullptr,
    const char *pkg = nullptr,
    const char *res = nullptr,
    const char *compression = nullptr,
    const char *vpid = nullptr,
    const char *apid = nullptr,
    const char *sid = nullptr,
    const char *owner = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Channel_Ingest_dataMode_Enum dataMode = Channel_Ingest_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idTransponder__ = idTransponder ? _fbb.CreateString(idTransponder) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto idBeam__ = idBeam ? _fbb.CreateString(idBeam) : 0;
  auto beamName__ = beamName ? _fbb.CreateString(beamName) : 0;
  auto idRFBand__ = idRFBand ? _fbb.CreateString(idRFBand) : 0;
  auto encryption__ = encryption ? _fbb.CreateString(encryption) : 0;
  auto pkg__ = pkg ? _fbb.CreateString(pkg) : 0;
  auto res__ = res ? _fbb.CreateString(res) : 0;
  auto compression__ = compression ? _fbb.CreateString(compression) : 0;
  auto vpid__ = vpid ? _fbb.CreateString(vpid) : 0;
  auto apid__ = apid ? _fbb.CreateString(apid) : 0;
  auto sid__ = sid ? _fbb.CreateString(sid) : 0;
  auto owner__ = owner ? _fbb.CreateString(owner) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateChannel_Ingest(
      _fbb,
      id__,
      idTransponder__,
      name__,
      classificationMarking__,
      type__,
      idBeam__,
      beamName__,
      idRFBand__,
      encryption__,
      pkg__,
      res__,
      compression__,
      vpid__,
      apid__,
      sid__,
      owner__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const Channel_Ingest *GetChannel_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Channel_Ingest>(buf);
}

inline const Channel_Ingest *GetSizePrefixedChannel_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Channel_Ingest>(buf);
}

inline const char *Channel_IngestIdentifier() {
  return "CHAN";
}

inline bool Channel_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Channel_IngestIdentifier());
}

inline bool SizePrefixedChannel_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Channel_IngestIdentifier(), true);
}

inline bool VerifyChannel_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Channel_Ingest>(Channel_IngestIdentifier());
}

inline bool VerifySizePrefixedChannel_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Channel_Ingest>(Channel_IngestIdentifier());
}

inline void FinishChannel_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Channel_Ingest> root) {
  fbb.Finish(root, Channel_IngestIdentifier());
}

inline void FinishSizePrefixedChannel_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Channel_Ingest> root) {
  fbb.FinishSizePrefixed(root, Channel_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
