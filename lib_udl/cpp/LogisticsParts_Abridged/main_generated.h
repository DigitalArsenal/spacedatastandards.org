// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsParts_Abridged;
struct LogisticsParts_AbridgedBuilder;

/// /// The parts associated with this support item.
struct LogisticsParts_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsParts_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARTNUMBER = 4,
    VT_NATIONALSTOCKNUMBER = 6,
    VT_MEASUREMENTUNITCODE = 8,
    VT_WORKUNITCODE = 10,
    VT_TECHNICALORDERTEXT = 12,
    VT_FIGURENUMBER = 14,
    VT_INDEXNUMBER = 16,
    VT_REQUESTVERIFIER = 18,
    VT_LOCATIONVERIFIER = 20,
    VT_SUPPLYDOCUMENTNUMBER = 22,
    VT_LOGISTICSSTOCKS = 24
  };
  /// Requested or supplied part number.
  /// Example: /// Example: MS35338-42
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *partNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTNUMBER);
  }
  /// The National Stock Number of the part being requested or supplied.
  /// Example: /// Example: 5310-00-045-3299
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *nationalStockNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NATIONALSTOCKNUMBER);
  }
  /// Code for a unit of measurement.
  /// Example: /// Example: EA
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *measurementUnitCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEASUREMENTUNITCODE);
  }
  /// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
  /// Example: /// Example: 5611UU001
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *workUnitCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WORKUNITCODE);
  }
  /// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
  /// Example: /// Example: 1C-17A-4
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *technicalOrderText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TECHNICALORDERTEXT);
  }
  /// Technical order manual figure number for the requested / supplied part.
  /// Example: /// Example: 3
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *figureNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIGURENUMBER);
  }
  /// Technical order manual index number for the requested part.
  /// Example: /// Example: 4
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *indexNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INDEXNUMBER);
  }
  /// The person who validated the request for parts.
  /// Example: /// Example: JOHN SMITH
  /// Constraints: Minimum length = 0, Maximum length = 25
  const ::flatbuffers::String *requestVerifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQUESTVERIFIER);
  }
  /// The person who validated that the sourced location has, and can supply, the requested parts.
  /// Example: /// Example: JANE DOE
  /// Constraints: Minimum length = 0, Maximum length = 25
  const ::flatbuffers::String *locationVerifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCATIONVERIFIER);
  }
  /// The supply document number.
  /// Example: /// Example: J223FU31908300
  /// Constraints: Minimum length = 0, Maximum length = 17
  const ::flatbuffers::String *supplyDocumentNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUPPLYDOCUMENTNUMBER);
  }
  /// The supply stocks for this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsStocks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSSTOCKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARTNUMBER) &&
           verifier.VerifyString(partNumber()) &&
           VerifyOffset(verifier, VT_NATIONALSTOCKNUMBER) &&
           verifier.VerifyString(nationalStockNumber()) &&
           VerifyOffset(verifier, VT_MEASUREMENTUNITCODE) &&
           verifier.VerifyString(measurementUnitCode()) &&
           VerifyOffset(verifier, VT_WORKUNITCODE) &&
           verifier.VerifyString(workUnitCode()) &&
           VerifyOffset(verifier, VT_TECHNICALORDERTEXT) &&
           verifier.VerifyString(technicalOrderText()) &&
           VerifyOffset(verifier, VT_FIGURENUMBER) &&
           verifier.VerifyString(figureNumber()) &&
           VerifyOffset(verifier, VT_INDEXNUMBER) &&
           verifier.VerifyString(indexNumber()) &&
           VerifyOffset(verifier, VT_REQUESTVERIFIER) &&
           verifier.VerifyString(requestVerifier()) &&
           VerifyOffset(verifier, VT_LOCATIONVERIFIER) &&
           verifier.VerifyString(locationVerifier()) &&
           VerifyOffset(verifier, VT_SUPPLYDOCUMENTNUMBER) &&
           verifier.VerifyString(supplyDocumentNumber()) &&
           VerifyOffset(verifier, VT_LOGISTICSSTOCKS) &&
           verifier.VerifyVector(logisticsStocks()) &&
           verifier.VerifyVectorOfStrings(logisticsStocks()) &&
           verifier.EndTable();
  }
};

struct LogisticsParts_AbridgedBuilder {
  typedef LogisticsParts_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_partNumber(::flatbuffers::Offset<::flatbuffers::String> partNumber) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_PARTNUMBER, partNumber);
  }
  void add_nationalStockNumber(::flatbuffers::Offset<::flatbuffers::String> nationalStockNumber) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_NATIONALSTOCKNUMBER, nationalStockNumber);
  }
  void add_measurementUnitCode(::flatbuffers::Offset<::flatbuffers::String> measurementUnitCode) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_MEASUREMENTUNITCODE, measurementUnitCode);
  }
  void add_workUnitCode(::flatbuffers::Offset<::flatbuffers::String> workUnitCode) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_WORKUNITCODE, workUnitCode);
  }
  void add_technicalOrderText(::flatbuffers::Offset<::flatbuffers::String> technicalOrderText) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_TECHNICALORDERTEXT, technicalOrderText);
  }
  void add_figureNumber(::flatbuffers::Offset<::flatbuffers::String> figureNumber) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_FIGURENUMBER, figureNumber);
  }
  void add_indexNumber(::flatbuffers::Offset<::flatbuffers::String> indexNumber) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_INDEXNUMBER, indexNumber);
  }
  void add_requestVerifier(::flatbuffers::Offset<::flatbuffers::String> requestVerifier) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_REQUESTVERIFIER, requestVerifier);
  }
  void add_locationVerifier(::flatbuffers::Offset<::flatbuffers::String> locationVerifier) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_LOCATIONVERIFIER, locationVerifier);
  }
  void add_supplyDocumentNumber(::flatbuffers::Offset<::flatbuffers::String> supplyDocumentNumber) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_SUPPLYDOCUMENTNUMBER, supplyDocumentNumber);
  }
  void add_logisticsStocks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsStocks) {
    fbb_.AddOffset(LogisticsParts_Abridged::VT_LOGISTICSSTOCKS, logisticsStocks);
  }
  explicit LogisticsParts_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsParts_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsParts_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsParts_Abridged> CreateLogisticsParts_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> partNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nationalStockNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> measurementUnitCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> workUnitCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> technicalOrderText = 0,
    ::flatbuffers::Offset<::flatbuffers::String> figureNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> indexNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> requestVerifier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> locationVerifier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> supplyDocumentNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsStocks = 0) {
  LogisticsParts_AbridgedBuilder builder_(_fbb);
  builder_.add_logisticsStocks(logisticsStocks);
  builder_.add_supplyDocumentNumber(supplyDocumentNumber);
  builder_.add_locationVerifier(locationVerifier);
  builder_.add_requestVerifier(requestVerifier);
  builder_.add_indexNumber(indexNumber);
  builder_.add_figureNumber(figureNumber);
  builder_.add_technicalOrderText(technicalOrderText);
  builder_.add_workUnitCode(workUnitCode);
  builder_.add_measurementUnitCode(measurementUnitCode);
  builder_.add_nationalStockNumber(nationalStockNumber);
  builder_.add_partNumber(partNumber);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsParts_Abridged> CreateLogisticsParts_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *partNumber = nullptr,
    const char *nationalStockNumber = nullptr,
    const char *measurementUnitCode = nullptr,
    const char *workUnitCode = nullptr,
    const char *technicalOrderText = nullptr,
    const char *figureNumber = nullptr,
    const char *indexNumber = nullptr,
    const char *requestVerifier = nullptr,
    const char *locationVerifier = nullptr,
    const char *supplyDocumentNumber = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsStocks = nullptr) {
  auto partNumber__ = partNumber ? _fbb.CreateString(partNumber) : 0;
  auto nationalStockNumber__ = nationalStockNumber ? _fbb.CreateString(nationalStockNumber) : 0;
  auto measurementUnitCode__ = measurementUnitCode ? _fbb.CreateString(measurementUnitCode) : 0;
  auto workUnitCode__ = workUnitCode ? _fbb.CreateString(workUnitCode) : 0;
  auto technicalOrderText__ = technicalOrderText ? _fbb.CreateString(technicalOrderText) : 0;
  auto figureNumber__ = figureNumber ? _fbb.CreateString(figureNumber) : 0;
  auto indexNumber__ = indexNumber ? _fbb.CreateString(indexNumber) : 0;
  auto requestVerifier__ = requestVerifier ? _fbb.CreateString(requestVerifier) : 0;
  auto locationVerifier__ = locationVerifier ? _fbb.CreateString(locationVerifier) : 0;
  auto supplyDocumentNumber__ = supplyDocumentNumber ? _fbb.CreateString(supplyDocumentNumber) : 0;
  auto logisticsStocks__ = logisticsStocks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsStocks) : 0;
  return CreateLogisticsParts_Abridged(
      _fbb,
      partNumber__,
      nationalStockNumber__,
      measurementUnitCode__,
      workUnitCode__,
      technicalOrderText__,
      figureNumber__,
      indexNumber__,
      requestVerifier__,
      locationVerifier__,
      supplyDocumentNumber__,
      logisticsStocks__);
}

inline const LogisticsParts_Abridged *GetLogisticsParts_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsParts_Abridged>(buf);
}

inline const LogisticsParts_Abridged *GetSizePrefixedLogisticsParts_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsParts_Abridged>(buf);
}

inline const char *LogisticsParts_AbridgedIdentifier() {
  return "LOGI";
}

inline bool LogisticsParts_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsParts_AbridgedIdentifier());
}

inline bool SizePrefixedLogisticsParts_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsParts_AbridgedIdentifier(), true);
}

inline bool VerifyLogisticsParts_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsParts_Abridged>(LogisticsParts_AbridgedIdentifier());
}

inline bool VerifySizePrefixedLogisticsParts_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsParts_Abridged>(LogisticsParts_AbridgedIdentifier());
}

inline void FinishLogisticsParts_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsParts_Abridged> root) {
  fbb.Finish(root, LogisticsParts_AbridgedIdentifier());
}

inline void FinishSizePrefixedLogisticsParts_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsParts_Abridged> root) {
  fbb.FinishSizePrefixed(root, LogisticsParts_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
