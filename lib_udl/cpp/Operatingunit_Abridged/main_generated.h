// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Operatingunit_Abridged;
struct Operatingunit_AbridgedBuilder;

enum Operatingunit_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Operatingunit_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Operatingunit_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Operatingunit_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Operatingunit_Abridged_dataMode_Enum_EXERCISE = 3,
  Operatingunit_Abridged_dataMode_Enum_MIN = Operatingunit_Abridged_dataMode_Enum_REAL,
  Operatingunit_Abridged_dataMode_Enum_MAX = Operatingunit_Abridged_dataMode_Enum_EXERCISE
};

inline const Operatingunit_Abridged_dataMode_Enum (&EnumValuesOperatingunit_Abridged_dataMode_Enum())[4] {
  static const Operatingunit_Abridged_dataMode_Enum values[] = {
    Operatingunit_Abridged_dataMode_Enum_REAL,
    Operatingunit_Abridged_dataMode_Enum_TEST,
    Operatingunit_Abridged_dataMode_Enum_SIMULATED,
    Operatingunit_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOperatingunit_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOperatingunit_Abridged_dataMode_Enum(Operatingunit_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Operatingunit_Abridged_dataMode_Enum_REAL, Operatingunit_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOperatingunit_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
struct Operatingunit_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Operatingunit_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDOPERATINGUNIT = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ALTOPERATINGUNITID = 8,
    VT_NAME = 10,
    VT_DESCRIPTION = 12,
    VT_IDLOCATION = 14,
    VT_IDCONTACT = 16,
    VT_IDORGANIZATION = 18,
    VT_UNITIDENTIFIER = 20,
    VT_COUNTRYCODE = 22,
    VT_ALTCOUNTRYCODE = 24,
    VT_WAC = 26,
    VT_OPERSTATUS = 28,
    VT_CONDITION = 30,
    VT_CONDITIONAVAIL = 32,
    VT_EVAL = 34,
    VT_FPA = 36,
    VT_IDENT = 38,
    VT_ALLEGIANCE = 40,
    VT_ALTALLEGIANCE = 42,
    VT_LOCNAME = 44,
    VT_LOCREASON = 46,
    VT_FORCE = 48,
    VT_FORCENAME = 50,
    VT_FUNCTROLE = 52,
    VT_MSNPRIMARY = 54,
    VT_MSNPRIMARYSPECIALTY = 56,
    VT_MASTERUNIT = 58,
    VT_STYLIZEDUNIT = 60,
    VT_DIVCAT = 62,
    VT_ECHELON = 64,
    VT_ECHELONTIER = 66,
    VT_FLEETID = 68,
    VT_DEPLOYSTATUS = 70,
    VT_FLAGFLOWN = 72,
    VT_COORDDATUM = 74,
    VT_COORD = 76,
    VT_COORDDERIVACC = 78,
    VT_LAT = 80,
    VT_LON = 82,
    VT_ELEVMSL = 84,
    VT_ELEVMSLCONFLVL = 86,
    VT_ELEVMSLDERIVACC = 88,
    VT_GEOIDALMSLSEP = 90,
    VT_MILGRIDSYS = 92,
    VT_MILGRID = 94,
    VT_UTM = 96,
    VT_AIRDEFAREA = 98,
    VT_POLSUBDIV = 100,
    VT_SYMCODE = 102,
    VT_CLASSRATING = 104,
    VT_RECSTATUS = 106,
    VT_REVIEWDATE = 108,
    VT_RESPROD = 110,
    VT_REFERENCEDOC = 112,
    VT_CREATEDAT = 114,
    VT_CREATEDBY = 116,
    VT_SOURCE = 118,
    VT_ORIGIN = 120,
    VT_DATAMODE = 122
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: OPERATINGUNIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOperatingUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDOPERATINGUNIT);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the operating unit record from the originating system.
  /// Example: /// Example: 32100000000021
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altOperatingUnitId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTOPERATINGUNITID);
  }
  /// Name of the operating unit.
  /// Example: /// Example: SOME_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Description of the operating unit.
  /// Example: /// Example: Description of unit
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Unique identifier of the location record for this operating unit.
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idLocation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDLOCATION);
  }
  /// Unique identifier of the contact for this operating unit.
  /// Example: /// Example: CONTACT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idContact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDCONTACT);
  }
  /// Unique identifier of the organization record for this operating unit.
  /// Example: /// Example: ORGANIZATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOrganization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDORGANIZATION);
  }
  /// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
  /// Example: /// Example: AZXAZ12345
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *unitIdentifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNITIDENTIFIER);
  }
  /// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: IQ
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *altCountryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTCOUNTRYCODE);
  }
  /// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *wac() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WAC);
  }
  /// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *operStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERSTATUS);
  }
  /// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *condition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONDITION);
  }
  /// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *conditionAvail() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONDITIONAVAIL);
  }
  /// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t eval() const {
    return GetField<int32_t>(VT_EVAL, 0);
  }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: EOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *fpa() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FPA);
  }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *ident() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENT);
  }
  /// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *allegiance() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALLEGIANCE);
  }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *altAllegiance() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTALLEGIANCE);
  }
  /// Location name for the coordinates.
  /// Example: /// Example: LOCATION_NAME
  /// Constraints: Minimum length = 0, Maximum length = 54
  const ::flatbuffers::String *locName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCNAME);
  }
  /// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: GR
  /// Constraints: Minimum length = 0, Maximum length = 9
  const ::flatbuffers::String *locReason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCREASON);
  }
  /// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: NV
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *force() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORCE);
  }
  /// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
  /// Example: /// Example: FORCE-NAME
  /// Constraints: Minimum length = 0, Maximum length = 54
  const ::flatbuffers::String *forceName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORCENAME);
  }
  /// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: MIL
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *functRole() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNCTROLE);
  }
  /// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: W6
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *msnPrimary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNPRIMARY);
  }
  /// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: QK
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *msnPrimarySpecialty() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNPRIMARYSPECIALTY);
  }
  /// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool masterUnit() const {
    return GetField<uint8_t>(VT_MASTERUNIT, 0) != 0;
  }
  /// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool stylizedUnit() const {
    return GetField<uint8_t>(VT_STYLIZEDUNIT, 0) != 0;
  }
  /// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: 5
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *divCat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DIVCAT);
  }
  /// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: SHIP
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *echelon() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ECHELON);
  }
  /// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: 68
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *echelonTier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ECHELONTIER);
  }
  /// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *fleetId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLEETID);
  }
  /// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: ND
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *deployStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPLOYSTATUS);
  }
  /// The country code of the observed flag flown.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *flagFlown() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLAGFLOWN);
  }
  /// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *coordDatum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORDDATUM);
  }
  /// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  const ::flatbuffers::String *coord() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORD);
  }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  double coordDerivAcc() const {
    return GetField<double>(VT_COORDDERIVACC, 0.0);
  }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  double elevMsl() const {
    return GetField<double>(VT_ELEVMSL, 0.0);
  }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  int32_t elevMslConfLvl() const {
    return GetField<int32_t>(VT_ELEVMSLCONFLVL, 0);
  }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  double elevMslDerivAcc() const {
    return GetField<double>(VT_ELEVMSLDERIVACC, 0.0);
  }
  /// The distance between Mean Sea Level and a referenced ellipsoid.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  double geoidalMslSep() const {
    return GetField<double>(VT_GEOIDALMSLSEP, 0.0);
  }
  /// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator".
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *milGridSys() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILGRIDSYS);
  }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *milGrid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILGRID);
  }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *utm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UTM);
  }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *airDefArea() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRDEFAREA);
  }
  /// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZ07
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *polSubdiv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POLSUBDIV);
  }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *symCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMCODE);
  }
  /// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  /// 0 - Does not meet criteria above
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *classRating() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSRATING);
  }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *recStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECSTATUS);
  }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *reviewDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REVIEWDATE);
  }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *resProd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESPROD);
  }
  /// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *referenceDoc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFERENCEDOC);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Operatingunit_Abridged_dataMode_Enum dataMode() const {
    return static_cast<Operatingunit_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDOPERATINGUNIT) &&
           verifier.VerifyString(idOperatingUnit()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ALTOPERATINGUNITID) &&
           verifier.VerifyString(altOperatingUnitId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_IDLOCATION) &&
           verifier.VerifyString(idLocation()) &&
           VerifyOffset(verifier, VT_IDCONTACT) &&
           verifier.VerifyString(idContact()) &&
           VerifyOffset(verifier, VT_IDORGANIZATION) &&
           verifier.VerifyString(idOrganization()) &&
           VerifyOffset(verifier, VT_UNITIDENTIFIER) &&
           verifier.VerifyString(unitIdentifier()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_ALTCOUNTRYCODE) &&
           verifier.VerifyString(altCountryCode()) &&
           VerifyOffset(verifier, VT_WAC) &&
           verifier.VerifyString(wac()) &&
           VerifyOffset(verifier, VT_OPERSTATUS) &&
           verifier.VerifyString(operStatus()) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           verifier.VerifyString(condition()) &&
           VerifyOffset(verifier, VT_CONDITIONAVAIL) &&
           verifier.VerifyString(conditionAvail()) &&
           VerifyField<int32_t>(verifier, VT_EVAL, 4) &&
           VerifyOffset(verifier, VT_FPA) &&
           verifier.VerifyString(fpa()) &&
           VerifyOffset(verifier, VT_IDENT) &&
           verifier.VerifyString(ident()) &&
           VerifyOffset(verifier, VT_ALLEGIANCE) &&
           verifier.VerifyString(allegiance()) &&
           VerifyOffset(verifier, VT_ALTALLEGIANCE) &&
           verifier.VerifyString(altAllegiance()) &&
           VerifyOffset(verifier, VT_LOCNAME) &&
           verifier.VerifyString(locName()) &&
           VerifyOffset(verifier, VT_LOCREASON) &&
           verifier.VerifyString(locReason()) &&
           VerifyOffset(verifier, VT_FORCE) &&
           verifier.VerifyString(force()) &&
           VerifyOffset(verifier, VT_FORCENAME) &&
           verifier.VerifyString(forceName()) &&
           VerifyOffset(verifier, VT_FUNCTROLE) &&
           verifier.VerifyString(functRole()) &&
           VerifyOffset(verifier, VT_MSNPRIMARY) &&
           verifier.VerifyString(msnPrimary()) &&
           VerifyOffset(verifier, VT_MSNPRIMARYSPECIALTY) &&
           verifier.VerifyString(msnPrimarySpecialty()) &&
           VerifyField<uint8_t>(verifier, VT_MASTERUNIT, 1) &&
           VerifyField<uint8_t>(verifier, VT_STYLIZEDUNIT, 1) &&
           VerifyOffset(verifier, VT_DIVCAT) &&
           verifier.VerifyString(divCat()) &&
           VerifyOffset(verifier, VT_ECHELON) &&
           verifier.VerifyString(echelon()) &&
           VerifyOffset(verifier, VT_ECHELONTIER) &&
           verifier.VerifyString(echelonTier()) &&
           VerifyOffset(verifier, VT_FLEETID) &&
           verifier.VerifyString(fleetId()) &&
           VerifyOffset(verifier, VT_DEPLOYSTATUS) &&
           verifier.VerifyString(deployStatus()) &&
           VerifyOffset(verifier, VT_FLAGFLOWN) &&
           verifier.VerifyString(flagFlown()) &&
           VerifyOffset(verifier, VT_COORDDATUM) &&
           verifier.VerifyString(coordDatum()) &&
           VerifyOffset(verifier, VT_COORD) &&
           verifier.VerifyString(coord()) &&
           VerifyField<double>(verifier, VT_COORDDERIVACC, 8) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ELEVMSL, 8) &&
           VerifyField<int32_t>(verifier, VT_ELEVMSLCONFLVL, 4) &&
           VerifyField<double>(verifier, VT_ELEVMSLDERIVACC, 8) &&
           VerifyField<double>(verifier, VT_GEOIDALMSLSEP, 8) &&
           VerifyOffset(verifier, VT_MILGRIDSYS) &&
           verifier.VerifyString(milGridSys()) &&
           VerifyOffset(verifier, VT_MILGRID) &&
           verifier.VerifyString(milGrid()) &&
           VerifyOffset(verifier, VT_UTM) &&
           verifier.VerifyString(utm()) &&
           VerifyOffset(verifier, VT_AIRDEFAREA) &&
           verifier.VerifyString(airDefArea()) &&
           VerifyOffset(verifier, VT_POLSUBDIV) &&
           verifier.VerifyString(polSubdiv()) &&
           VerifyOffset(verifier, VT_SYMCODE) &&
           verifier.VerifyString(symCode()) &&
           VerifyOffset(verifier, VT_CLASSRATING) &&
           verifier.VerifyString(classRating()) &&
           VerifyOffset(verifier, VT_RECSTATUS) &&
           verifier.VerifyString(recStatus()) &&
           VerifyOffset(verifier, VT_REVIEWDATE) &&
           verifier.VerifyString(reviewDate()) &&
           VerifyOffset(verifier, VT_RESPROD) &&
           verifier.VerifyString(resProd()) &&
           VerifyOffset(verifier, VT_REFERENCEDOC) &&
           verifier.VerifyString(referenceDoc()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Operatingunit_AbridgedBuilder {
  typedef Operatingunit_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idOperatingUnit(::flatbuffers::Offset<::flatbuffers::String> idOperatingUnit) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_IDOPERATINGUNIT, idOperatingUnit);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_altOperatingUnitId(::flatbuffers::Offset<::flatbuffers::String> altOperatingUnitId) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ALTOPERATINGUNITID, altOperatingUnitId);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_NAME, name);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_DESCRIPTION, description);
  }
  void add_idLocation(::flatbuffers::Offset<::flatbuffers::String> idLocation) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_IDLOCATION, idLocation);
  }
  void add_idContact(::flatbuffers::Offset<::flatbuffers::String> idContact) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_IDCONTACT, idContact);
  }
  void add_idOrganization(::flatbuffers::Offset<::flatbuffers::String> idOrganization) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_IDORGANIZATION, idOrganization);
  }
  void add_unitIdentifier(::flatbuffers::Offset<::flatbuffers::String> unitIdentifier) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_UNITIDENTIFIER, unitIdentifier);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_COUNTRYCODE, countryCode);
  }
  void add_altCountryCode(::flatbuffers::Offset<::flatbuffers::String> altCountryCode) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ALTCOUNTRYCODE, altCountryCode);
  }
  void add_wac(::flatbuffers::Offset<::flatbuffers::String> wac) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_WAC, wac);
  }
  void add_operStatus(::flatbuffers::Offset<::flatbuffers::String> operStatus) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_OPERSTATUS, operStatus);
  }
  void add_condition(::flatbuffers::Offset<::flatbuffers::String> condition) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CONDITION, condition);
  }
  void add_conditionAvail(::flatbuffers::Offset<::flatbuffers::String> conditionAvail) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CONDITIONAVAIL, conditionAvail);
  }
  void add_eval(int32_t eval) {
    fbb_.AddElement<int32_t>(Operatingunit_Abridged::VT_EVAL, eval, 0);
  }
  void add_fpa(::flatbuffers::Offset<::flatbuffers::String> fpa) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FPA, fpa);
  }
  void add_ident(::flatbuffers::Offset<::flatbuffers::String> ident) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_IDENT, ident);
  }
  void add_allegiance(::flatbuffers::Offset<::flatbuffers::String> allegiance) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ALLEGIANCE, allegiance);
  }
  void add_altAllegiance(::flatbuffers::Offset<::flatbuffers::String> altAllegiance) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ALTALLEGIANCE, altAllegiance);
  }
  void add_locName(::flatbuffers::Offset<::flatbuffers::String> locName) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_LOCNAME, locName);
  }
  void add_locReason(::flatbuffers::Offset<::flatbuffers::String> locReason) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_LOCREASON, locReason);
  }
  void add_force(::flatbuffers::Offset<::flatbuffers::String> force) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FORCE, force);
  }
  void add_forceName(::flatbuffers::Offset<::flatbuffers::String> forceName) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FORCENAME, forceName);
  }
  void add_functRole(::flatbuffers::Offset<::flatbuffers::String> functRole) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FUNCTROLE, functRole);
  }
  void add_msnPrimary(::flatbuffers::Offset<::flatbuffers::String> msnPrimary) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_MSNPRIMARY, msnPrimary);
  }
  void add_msnPrimarySpecialty(::flatbuffers::Offset<::flatbuffers::String> msnPrimarySpecialty) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_MSNPRIMARYSPECIALTY, msnPrimarySpecialty);
  }
  void add_masterUnit(bool masterUnit) {
    fbb_.AddElement<uint8_t>(Operatingunit_Abridged::VT_MASTERUNIT, static_cast<uint8_t>(masterUnit), 0);
  }
  void add_stylizedUnit(bool stylizedUnit) {
    fbb_.AddElement<uint8_t>(Operatingunit_Abridged::VT_STYLIZEDUNIT, static_cast<uint8_t>(stylizedUnit), 0);
  }
  void add_divCat(::flatbuffers::Offset<::flatbuffers::String> divCat) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_DIVCAT, divCat);
  }
  void add_echelon(::flatbuffers::Offset<::flatbuffers::String> echelon) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ECHELON, echelon);
  }
  void add_echelonTier(::flatbuffers::Offset<::flatbuffers::String> echelonTier) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ECHELONTIER, echelonTier);
  }
  void add_fleetId(::flatbuffers::Offset<::flatbuffers::String> fleetId) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FLEETID, fleetId);
  }
  void add_deployStatus(::flatbuffers::Offset<::flatbuffers::String> deployStatus) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_DEPLOYSTATUS, deployStatus);
  }
  void add_flagFlown(::flatbuffers::Offset<::flatbuffers::String> flagFlown) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_FLAGFLOWN, flagFlown);
  }
  void add_coordDatum(::flatbuffers::Offset<::flatbuffers::String> coordDatum) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_COORDDATUM, coordDatum);
  }
  void add_coord(::flatbuffers::Offset<::flatbuffers::String> coord) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_COORD, coord);
  }
  void add_coordDerivAcc(double coordDerivAcc) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_COORDDERIVACC, coordDerivAcc, 0.0);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_LON, lon, 0.0);
  }
  void add_elevMsl(double elevMsl) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_ELEVMSL, elevMsl, 0.0);
  }
  void add_elevMslConfLvl(int32_t elevMslConfLvl) {
    fbb_.AddElement<int32_t>(Operatingunit_Abridged::VT_ELEVMSLCONFLVL, elevMslConfLvl, 0);
  }
  void add_elevMslDerivAcc(double elevMslDerivAcc) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_ELEVMSLDERIVACC, elevMslDerivAcc, 0.0);
  }
  void add_geoidalMslSep(double geoidalMslSep) {
    fbb_.AddElement<double>(Operatingunit_Abridged::VT_GEOIDALMSLSEP, geoidalMslSep, 0.0);
  }
  void add_milGridSys(::flatbuffers::Offset<::flatbuffers::String> milGridSys) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_MILGRIDSYS, milGridSys);
  }
  void add_milGrid(::flatbuffers::Offset<::flatbuffers::String> milGrid) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_MILGRID, milGrid);
  }
  void add_utm(::flatbuffers::Offset<::flatbuffers::String> utm) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_UTM, utm);
  }
  void add_airDefArea(::flatbuffers::Offset<::flatbuffers::String> airDefArea) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_AIRDEFAREA, airDefArea);
  }
  void add_polSubdiv(::flatbuffers::Offset<::flatbuffers::String> polSubdiv) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_POLSUBDIV, polSubdiv);
  }
  void add_symCode(::flatbuffers::Offset<::flatbuffers::String> symCode) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_SYMCODE, symCode);
  }
  void add_classRating(::flatbuffers::Offset<::flatbuffers::String> classRating) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CLASSRATING, classRating);
  }
  void add_recStatus(::flatbuffers::Offset<::flatbuffers::String> recStatus) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_RECSTATUS, recStatus);
  }
  void add_reviewDate(::flatbuffers::Offset<::flatbuffers::String> reviewDate) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_REVIEWDATE, reviewDate);
  }
  void add_resProd(::flatbuffers::Offset<::flatbuffers::String> resProd) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_RESPROD, resProd);
  }
  void add_referenceDoc(::flatbuffers::Offset<::flatbuffers::String> referenceDoc) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_REFERENCEDOC, referenceDoc);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Operatingunit_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(Operatingunit_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Operatingunit_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Operatingunit_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Operatingunit_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Operatingunit_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Operatingunit_Abridged> CreateOperatingunit_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idOperatingUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altOperatingUnitId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idContact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOrganization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> unitIdentifier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altCountryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wac = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> condition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> conditionAvail = 0,
    int32_t eval = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fpa = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ident = 0,
    ::flatbuffers::Offset<::flatbuffers::String> allegiance = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altAllegiance = 0,
    ::flatbuffers::Offset<::flatbuffers::String> locName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> locReason = 0,
    ::flatbuffers::Offset<::flatbuffers::String> force = 0,
    ::flatbuffers::Offset<::flatbuffers::String> forceName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> functRole = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnPrimary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnPrimarySpecialty = 0,
    bool masterUnit = false,
    bool stylizedUnit = false,
    ::flatbuffers::Offset<::flatbuffers::String> divCat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> echelon = 0,
    ::flatbuffers::Offset<::flatbuffers::String> echelonTier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fleetId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> deployStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> flagFlown = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coordDatum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coord = 0,
    double coordDerivAcc = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    double elevMsl = 0.0,
    int32_t elevMslConfLvl = 0,
    double elevMslDerivAcc = 0.0,
    double geoidalMslSep = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> milGridSys = 0,
    ::flatbuffers::Offset<::flatbuffers::String> milGrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> utm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> airDefArea = 0,
    ::flatbuffers::Offset<::flatbuffers::String> polSubdiv = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classRating = 0,
    ::flatbuffers::Offset<::flatbuffers::String> recStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reviewDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resProd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> referenceDoc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Operatingunit_Abridged_dataMode_Enum dataMode = Operatingunit_Abridged_dataMode_Enum_REAL) {
  Operatingunit_AbridgedBuilder builder_(_fbb);
  builder_.add_geoidalMslSep(geoidalMslSep);
  builder_.add_elevMslDerivAcc(elevMslDerivAcc);
  builder_.add_elevMsl(elevMsl);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_coordDerivAcc(coordDerivAcc);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_referenceDoc(referenceDoc);
  builder_.add_resProd(resProd);
  builder_.add_reviewDate(reviewDate);
  builder_.add_recStatus(recStatus);
  builder_.add_classRating(classRating);
  builder_.add_symCode(symCode);
  builder_.add_polSubdiv(polSubdiv);
  builder_.add_airDefArea(airDefArea);
  builder_.add_utm(utm);
  builder_.add_milGrid(milGrid);
  builder_.add_milGridSys(milGridSys);
  builder_.add_elevMslConfLvl(elevMslConfLvl);
  builder_.add_coord(coord);
  builder_.add_coordDatum(coordDatum);
  builder_.add_flagFlown(flagFlown);
  builder_.add_deployStatus(deployStatus);
  builder_.add_fleetId(fleetId);
  builder_.add_echelonTier(echelonTier);
  builder_.add_echelon(echelon);
  builder_.add_divCat(divCat);
  builder_.add_msnPrimarySpecialty(msnPrimarySpecialty);
  builder_.add_msnPrimary(msnPrimary);
  builder_.add_functRole(functRole);
  builder_.add_forceName(forceName);
  builder_.add_force(force);
  builder_.add_locReason(locReason);
  builder_.add_locName(locName);
  builder_.add_altAllegiance(altAllegiance);
  builder_.add_allegiance(allegiance);
  builder_.add_ident(ident);
  builder_.add_fpa(fpa);
  builder_.add_eval(eval);
  builder_.add_conditionAvail(conditionAvail);
  builder_.add_condition(condition);
  builder_.add_operStatus(operStatus);
  builder_.add_wac(wac);
  builder_.add_altCountryCode(altCountryCode);
  builder_.add_countryCode(countryCode);
  builder_.add_unitIdentifier(unitIdentifier);
  builder_.add_idOrganization(idOrganization);
  builder_.add_idContact(idContact);
  builder_.add_idLocation(idLocation);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_altOperatingUnitId(altOperatingUnitId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idOperatingUnit(idOperatingUnit);
  builder_.add_dataMode(dataMode);
  builder_.add_stylizedUnit(stylizedUnit);
  builder_.add_masterUnit(masterUnit);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Operatingunit_Abridged> CreateOperatingunit_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idOperatingUnit = nullptr,
    const char *classificationMarking = nullptr,
    const char *altOperatingUnitId = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    const char *idLocation = nullptr,
    const char *idContact = nullptr,
    const char *idOrganization = nullptr,
    const char *unitIdentifier = nullptr,
    const char *countryCode = nullptr,
    const char *altCountryCode = nullptr,
    const char *wac = nullptr,
    const char *operStatus = nullptr,
    const char *condition = nullptr,
    const char *conditionAvail = nullptr,
    int32_t eval = 0,
    const char *fpa = nullptr,
    const char *ident = nullptr,
    const char *allegiance = nullptr,
    const char *altAllegiance = nullptr,
    const char *locName = nullptr,
    const char *locReason = nullptr,
    const char *force = nullptr,
    const char *forceName = nullptr,
    const char *functRole = nullptr,
    const char *msnPrimary = nullptr,
    const char *msnPrimarySpecialty = nullptr,
    bool masterUnit = false,
    bool stylizedUnit = false,
    const char *divCat = nullptr,
    const char *echelon = nullptr,
    const char *echelonTier = nullptr,
    const char *fleetId = nullptr,
    const char *deployStatus = nullptr,
    const char *flagFlown = nullptr,
    const char *coordDatum = nullptr,
    const char *coord = nullptr,
    double coordDerivAcc = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    double elevMsl = 0.0,
    int32_t elevMslConfLvl = 0,
    double elevMslDerivAcc = 0.0,
    double geoidalMslSep = 0.0,
    const char *milGridSys = nullptr,
    const char *milGrid = nullptr,
    const char *utm = nullptr,
    const char *airDefArea = nullptr,
    const char *polSubdiv = nullptr,
    const char *symCode = nullptr,
    const char *classRating = nullptr,
    const char *recStatus = nullptr,
    const char *reviewDate = nullptr,
    const char *resProd = nullptr,
    const char *referenceDoc = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Operatingunit_Abridged_dataMode_Enum dataMode = Operatingunit_Abridged_dataMode_Enum_REAL) {
  auto idOperatingUnit__ = idOperatingUnit ? _fbb.CreateString(idOperatingUnit) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto altOperatingUnitId__ = altOperatingUnitId ? _fbb.CreateString(altOperatingUnitId) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto idLocation__ = idLocation ? _fbb.CreateString(idLocation) : 0;
  auto idContact__ = idContact ? _fbb.CreateString(idContact) : 0;
  auto idOrganization__ = idOrganization ? _fbb.CreateString(idOrganization) : 0;
  auto unitIdentifier__ = unitIdentifier ? _fbb.CreateString(unitIdentifier) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto altCountryCode__ = altCountryCode ? _fbb.CreateString(altCountryCode) : 0;
  auto wac__ = wac ? _fbb.CreateString(wac) : 0;
  auto operStatus__ = operStatus ? _fbb.CreateString(operStatus) : 0;
  auto condition__ = condition ? _fbb.CreateString(condition) : 0;
  auto conditionAvail__ = conditionAvail ? _fbb.CreateString(conditionAvail) : 0;
  auto fpa__ = fpa ? _fbb.CreateString(fpa) : 0;
  auto ident__ = ident ? _fbb.CreateString(ident) : 0;
  auto allegiance__ = allegiance ? _fbb.CreateString(allegiance) : 0;
  auto altAllegiance__ = altAllegiance ? _fbb.CreateString(altAllegiance) : 0;
  auto locName__ = locName ? _fbb.CreateString(locName) : 0;
  auto locReason__ = locReason ? _fbb.CreateString(locReason) : 0;
  auto force__ = force ? _fbb.CreateString(force) : 0;
  auto forceName__ = forceName ? _fbb.CreateString(forceName) : 0;
  auto functRole__ = functRole ? _fbb.CreateString(functRole) : 0;
  auto msnPrimary__ = msnPrimary ? _fbb.CreateString(msnPrimary) : 0;
  auto msnPrimarySpecialty__ = msnPrimarySpecialty ? _fbb.CreateString(msnPrimarySpecialty) : 0;
  auto divCat__ = divCat ? _fbb.CreateString(divCat) : 0;
  auto echelon__ = echelon ? _fbb.CreateString(echelon) : 0;
  auto echelonTier__ = echelonTier ? _fbb.CreateString(echelonTier) : 0;
  auto fleetId__ = fleetId ? _fbb.CreateString(fleetId) : 0;
  auto deployStatus__ = deployStatus ? _fbb.CreateString(deployStatus) : 0;
  auto flagFlown__ = flagFlown ? _fbb.CreateString(flagFlown) : 0;
  auto coordDatum__ = coordDatum ? _fbb.CreateString(coordDatum) : 0;
  auto coord__ = coord ? _fbb.CreateString(coord) : 0;
  auto milGridSys__ = milGridSys ? _fbb.CreateString(milGridSys) : 0;
  auto milGrid__ = milGrid ? _fbb.CreateString(milGrid) : 0;
  auto utm__ = utm ? _fbb.CreateString(utm) : 0;
  auto airDefArea__ = airDefArea ? _fbb.CreateString(airDefArea) : 0;
  auto polSubdiv__ = polSubdiv ? _fbb.CreateString(polSubdiv) : 0;
  auto symCode__ = symCode ? _fbb.CreateString(symCode) : 0;
  auto classRating__ = classRating ? _fbb.CreateString(classRating) : 0;
  auto recStatus__ = recStatus ? _fbb.CreateString(recStatus) : 0;
  auto reviewDate__ = reviewDate ? _fbb.CreateString(reviewDate) : 0;
  auto resProd__ = resProd ? _fbb.CreateString(resProd) : 0;
  auto referenceDoc__ = referenceDoc ? _fbb.CreateString(referenceDoc) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateOperatingunit_Abridged(
      _fbb,
      idOperatingUnit__,
      classificationMarking__,
      altOperatingUnitId__,
      name__,
      description__,
      idLocation__,
      idContact__,
      idOrganization__,
      unitIdentifier__,
      countryCode__,
      altCountryCode__,
      wac__,
      operStatus__,
      condition__,
      conditionAvail__,
      eval,
      fpa__,
      ident__,
      allegiance__,
      altAllegiance__,
      locName__,
      locReason__,
      force__,
      forceName__,
      functRole__,
      msnPrimary__,
      msnPrimarySpecialty__,
      masterUnit,
      stylizedUnit,
      divCat__,
      echelon__,
      echelonTier__,
      fleetId__,
      deployStatus__,
      flagFlown__,
      coordDatum__,
      coord__,
      coordDerivAcc,
      lat,
      lon,
      elevMsl,
      elevMslConfLvl,
      elevMslDerivAcc,
      geoidalMslSep,
      milGridSys__,
      milGrid__,
      utm__,
      airDefArea__,
      polSubdiv__,
      symCode__,
      classRating__,
      recStatus__,
      reviewDate__,
      resProd__,
      referenceDoc__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode);
}

inline const Operatingunit_Abridged *GetOperatingunit_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<Operatingunit_Abridged>(buf);
}

inline const Operatingunit_Abridged *GetSizePrefixedOperatingunit_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Operatingunit_Abridged>(buf);
}

inline const char *Operatingunit_AbridgedIdentifier() {
  return "OPER";
}

inline bool Operatingunit_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Operatingunit_AbridgedIdentifier());
}

inline bool SizePrefixedOperatingunit_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Operatingunit_AbridgedIdentifier(), true);
}

inline bool VerifyOperatingunit_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Operatingunit_Abridged>(Operatingunit_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOperatingunit_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Operatingunit_Abridged>(Operatingunit_AbridgedIdentifier());
}

inline void FinishOperatingunit_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Operatingunit_Abridged> root) {
  fbb.Finish(root, Operatingunit_AbridgedIdentifier());
}

inline void FinishSizePrefixedOperatingunit_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Operatingunit_Abridged> root) {
  fbb.FinishSizePrefixed(root, Operatingunit_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
