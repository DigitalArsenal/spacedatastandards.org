// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EOObservationDetails_Full;
struct EOObservationDetails_FullBuilder;

enum EOObservationDetails_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EOObservationDetails_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EOObservationDetails_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EOObservationDetails_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EOObservationDetails_Full_dataMode_Enum_EXERCISE = 3,
  EOObservationDetails_Full_dataMode_Enum_MIN = EOObservationDetails_Full_dataMode_Enum_REAL,
  EOObservationDetails_Full_dataMode_Enum_MAX = EOObservationDetails_Full_dataMode_Enum_EXERCISE
};

inline const EOObservationDetails_Full_dataMode_Enum (&EnumValuesEOObservationDetails_Full_dataMode_Enum())[4] {
  static const EOObservationDetails_Full_dataMode_Enum values[] = {
    EOObservationDetails_Full_dataMode_Enum_REAL,
    EOObservationDetails_Full_dataMode_Enum_TEST,
    EOObservationDetails_Full_dataMode_Enum_SIMULATED,
    EOObservationDetails_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEOObservationDetails_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEOObservationDetails_Full_dataMode_Enum(EOObservationDetails_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EOObservationDetails_Full_dataMode_Enum_REAL, EOObservationDetails_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEOObservationDetails_Full_dataMode_Enum()[index];
}

/// /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
struct EOObservationDetails_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EOObservationDetails_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDEOOBSERVATION = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_OBTIME = 8,
    VT_PREDICTEDRA = 10,
    VT_PREDICTEDDECLINATION = 12,
    VT_PREDICTEDAZIMUTH = 14,
    VT_PREDICTEDELEVATION = 16,
    VT_SUNAZIMUTH = 18,
    VT_SUNELEVATION = 20,
    VT_NUMSPECTRALFILTERS = 22,
    VT_SPECTRALFILTERS = 24,
    VT_SPECTRALZMFL = 26,
    VT_SPECTRALFILTERSOLARMAG = 28,
    VT_ZEROPOINTS = 30,
    VT_ZEROPOINTSUNC = 32,
    VT_EXTINCTIONCOEFFS = 34,
    VT_EXTINCTIONCOEFFSUNC = 36,
    VT_COLORCOEFFS = 38,
    VT_NUMNEUTRALDENSITYFILTERS = 40,
    VT_NEUTRALDENSITYFILTERNAMES = 42,
    VT_NEUTRALDENSITYFILTERTRANSMISSIONS = 44,
    VT_NEUTRALDENSITYFILTERTRANSMISSIONSUNC = 46,
    VT_GAIN = 48,
    VT_IFOV = 50,
    VT_PIXELARRAYWIDTH = 52,
    VT_PIXELARRAYHEIGHT = 54,
    VT_PIXELMIN = 56,
    VT_PIXELMAX = 58,
    VT_CENTROIDROW = 60,
    VT_CENTROIDCOLUMN = 62,
    VT_ROWVARIANCE = 64,
    VT_COLUMNVARIANCE = 66,
    VT_ROWCOLCOV = 68,
    VT_DISTFROMSTREAKCENTER = 70,
    VT_SURFBRIGHTNESS = 72,
    VT_SURFBRIGHTNESSUNC = 74,
    VT_TIMESUNC = 76,
    VT_CCDTEMP = 78,
    VT_CURRENTSPECTRALFILTERNUM = 80,
    VT_CURRENTNEUTRALDENSITYFILTERNUM = 82,
    VT_BINNINGHORIZ = 84,
    VT_BINNINGVERT = 86,
    VT_PCALNUMSTARS = 88,
    VT_CCDOBJPOSX = 90,
    VT_CCDOBJPOSY = 92,
    VT_CCDOBJWIDTH = 94,
    VT_BACKGROUNDSIGNAL = 96,
    VT_BACKGROUNDSIGNALUNC = 98,
    VT_PEAKAPERTURECOUNT = 100,
    VT_PEAKBACKGROUNDCOUNT = 102,
    VT_SNREST = 104,
    VT_MAGINSTRUMENTAL = 106,
    VT_MAGINSTRUMENTALUNC = 108,
    VT_OPTICALCROSSSECTION = 110,
    VT_OPTICALCROSSSECTIONUNC = 112,
    VT_SUNSTATEPOSX = 114,
    VT_SUNSTATEPOSY = 116,
    VT_SUNSTATEPOSZ = 118,
    VT_SUNSTATEVELX = 120,
    VT_SUNSTATEVELY = 122,
    VT_SUNSTATEVELZ = 124,
    VT_NUMCATALOGSTARS = 126,
    VT_NUMDETECTEDSTARS = 128,
    VT_NUMCORRELATEDSTARS = 130,
    VT_PREDICTEDRAUNC = 132,
    VT_PREDICTEDDECLINATIONUNC = 134,
    VT_RACOV = 136,
    VT_DECLINATIONCOV = 138,
    VT_RADECLINATIONCOV = 140,
    VT_ACALCRPIXX = 142,
    VT_ACALCRPIXY = 144,
    VT_ACALCRVALX = 146,
    VT_ACALCRVALY = 148,
    VT_ACALNUMSTARS = 150,
    VT_OBJSUNRANGE = 152,
    VT_PHASEANGBISECT = 154,
    VT_SOLARDISKFRAC = 156,
    VT_TOES = 158,
    VT_DOES = 160,
    VT_SOURCE = 162,
    VT_DATAMODE = 164,
    VT_CREATEDAT = 166,
    VT_CREATEDBY = 168
  };
  /// Unique identifier of the parent EOObservation.
  /// Example: /// Example: EOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idEOObservation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDEOOBSERVATION);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double predictedRa() const {
    return GetField<double>(VT_PREDICTEDRA, 0.0);
  }
  /// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double predictedDeclination() const {
    return GetField<double>(VT_PREDICTEDDECLINATION, 0.0);
  }
  /// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double predictedAzimuth() const {
    return GetField<double>(VT_PREDICTEDAZIMUTH, 0.0);
  }
  /// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double predictedElevation() const {
    return GetField<double>(VT_PREDICTEDELEVATION, 0.0);
  }
  /// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double sunAzimuth() const {
    return GetField<double>(VT_SUNAZIMUTH, 0.0);
  }
  /// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double sunElevation() const {
    return GetField<double>(VT_SUNELEVATION, 0.0);
  }
  /// The value is the number of spectral filters used.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numSpectralFilters() const {
    return GetField<int32_t>(VT_NUMSPECTRALFILTERS, 0);
  }
  /// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: ['Keyword1', 'Keyword2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralFilters() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECTRALFILTERS);
  }
  /// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralZMFL() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECTRALZMFL);
  }
  /// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralFilterSolarMag() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECTRALFILTERSOLARMAG);
  }
  /// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZEROPOINTS);
  }
  /// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPointsUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZEROPOINTSUNC);
  }
  /// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXTINCTIONCOEFFS);
  }
  /// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffsUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXTINCTIONCOEFFSUNC);
  }
  /// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *colorCoeffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COLORCOEFFS);
  }
  /// The value is the number of neutral density filters used.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t numNeutralDensityFilters() const {
    return GetField<int32_t>(VT_NUMNEUTRALDENSITYFILTERS, 0);
  }
  /// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NEUTRALDENSITYFILTERNAMES);
  }
  /// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterTransmissions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NEUTRALDENSITYFILTERTRANSMISSIONS);
  }
  /// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterTransmissionsUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NEUTRALDENSITYFILTERTRANSMISSIONSUNC);
  }
  /// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
  /// Example: /// Example: 234.2
  /// Constraints: No constraints specified.
  double gain() const {
    return GetField<double>(VT_GAIN, 0.0);
  }
  /// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  double ifov() const {
    return GetField<double>(VT_IFOV, 0.0);
  }
  /// Pixel array size (width) in pixels.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t pixelArrayWidth() const {
    return GetField<int32_t>(VT_PIXELARRAYWIDTH, 0);
  }
  /// Pixel array size (height) in pixels.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  int32_t pixelArrayHeight() const {
    return GetField<int32_t>(VT_PIXELARRAYHEIGHT, 0);
  }
  /// Minimum valid pixel value, this is typically 0.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t pixelMin() const {
    return GetField<int32_t>(VT_PIXELMIN, 0);
  }
  /// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
  /// Example: /// Example: 256
  /// Constraints: No constraints specified.
  int32_t pixelMax() const {
    return GetField<int32_t>(VT_PIXELMAX, 0);
  }
  /// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double centroidRow() const {
    return GetField<double>(VT_CENTROIDROW, 0.0);
  }
  /// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double centroidColumn() const {
    return GetField<double>(VT_CENTROIDCOLUMN, 0.0);
  }
  /// Spatial variance of image distribution in vertical direction measured in pixels squared.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double rowVariance() const {
    return GetField<double>(VT_ROWVARIANCE, 0.0);
  }
  /// Spatial variance of image distribution in horizontal direction measured in pixels squared.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double columnVariance() const {
    return GetField<double>(VT_COLUMNVARIANCE, 0.0);
  }
  /// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
  /// Example: /// Example: 0.01
  /// Constraints: No constraints specified.
  double rowColCov() const {
    return GetField<double>(VT_ROWCOLCOV, 0.0);
  }
  /// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [-127.153, -126.153, -125.153]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *distFromStreakCenter() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DISTFROMSTREAKCENTER);
  }
  /// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [21.01, 21.382, 21.725]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *surfBrightness() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SURFBRIGHTNESS);
  }
  /// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
  /// Example: /// Example: [0.165, 0.165, 0.165]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *surfBrightnessUnc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SURFBRIGHTNESSUNC);
  }
  /// Uncertainty in the times reported in UTC in seconds.
  /// Example: /// Example: 13.1
  /// Constraints: No constraints specified.
  double timesUnc() const {
    return GetField<double>(VT_TIMESUNC, 0.0);
  }
  /// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double ccdTemp() const {
    return GetField<double>(VT_CCDTEMP, 0.0);
  }
  /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  int32_t currentSpectralFilterNum() const {
    return GetField<int32_t>(VT_CURRENTSPECTRALFILTERNUM, 0);
  }
  /// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t currentNeutralDensityFilterNum() const {
    return GetField<int32_t>(VT_CURRENTNEUTRALDENSITYFILTERNUM, 0);
  }
  /// The number of pixels binned horizontally.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t binningHoriz() const {
    return GetField<int32_t>(VT_BINNINGHORIZ, 0);
  }
  /// The number of pixels binned vertically.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  int32_t binningVert() const {
    return GetField<int32_t>(VT_BINNINGVERT, 0);
  }
  /// Number of stars used in photometric fit count.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  int32_t pcalNumStars() const {
    return GetField<int32_t>(VT_PCALNUMSTARS, 0);
  }
  /// The x centroid position on the CCD of the target object in pixels.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double ccdObjPosX() const {
    return GetField<double>(VT_CCDOBJPOSX, 0.0);
  }
  /// The y centroid position on the CCD of the target object in pixels.
  /// Example: /// Example: 321.4
  /// Constraints: No constraints specified.
  double ccdObjPosY() const {
    return GetField<double>(VT_CCDOBJPOSY, 0.0);
  }
  /// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
  /// Example: /// Example: 133.2
  /// Constraints: No constraints specified.
  double ccdObjWidth() const {
    return GetField<double>(VT_CCDOBJWIDTH, 0.0);
  }
  /// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
  /// Example: /// Example: 4134.1
  /// Constraints: No constraints specified.
  double backgroundSignal() const {
    return GetField<double>(VT_BACKGROUNDSIGNAL, 0.0);
  }
  /// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double backgroundSignalUnc() const {
    return GetField<double>(VT_BACKGROUNDSIGNALUNC, 0.0);
  }
  /// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double peakApertureCount() const {
    return GetField<double>(VT_PEAKAPERTURECOUNT, 0.0);
  }
  /// Peak Background Raw Counts is the largest pixel value used in background signal.
  /// Example: /// Example: 321
  /// Constraints: No constraints specified.
  int32_t peakBackgroundCount() const {
    return GetField<int32_t>(VT_PEAKBACKGROUNDCOUNT, 0);
  }
  /// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
  /// Example: /// Example: 13.4
  /// Constraints: No constraints specified.
  double snrEst() const {
    return GetField<double>(VT_SNREST, 0.0);
  }
  /// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double magInstrumental() const {
    return GetField<double>(VT_MAGINSTRUMENTAL, 0.0);
  }
  /// Uncertainty in the instrumental magnitude.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double magInstrumentalUnc() const {
    return GetField<double>(VT_MAGINSTRUMENTALUNC, 0.0);
  }
  /// Optical Cross Section computed in units m(2)/ster.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double opticalCrossSection() const {
    return GetField<double>(VT_OPTICALCROSSSECTION, 0.0);
  }
  /// Uncertainty in Optical Cross Section computed in units m(2)/ster.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double opticalCrossSectionUnc() const {
    return GetField<double>(VT_OPTICALCROSSSECTIONUNC, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStatePosX() const {
    return GetField<double>(VT_SUNSTATEPOSX, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStatePosY() const {
    return GetField<double>(VT_SUNSTATEPOSY, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStatePosZ() const {
    return GetField<double>(VT_SUNSTATEPOSZ, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStateVelX() const {
    return GetField<double>(VT_SUNSTATEVELX, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStateVelY() const {
    return GetField<double>(VT_SUNSTATEVELY, 0.0);
  }
  /// Sun state vector in ECI J2000 coordinate frame in km/sec.
  /// Example: /// Example: 123.3
  /// Constraints: No constraints specified.
  double sunStateVelZ() const {
    return GetField<double>(VT_SUNSTATEVELZ, 0.0);
  }
  /// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t numCatalogStars() const {
    return GetField<int32_t>(VT_NUMCATALOGSTARS, 0);
  }
  /// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t numDetectedStars() const {
    return GetField<int32_t>(VT_NUMDETECTEDSTARS, 0);
  }
  /// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t numCorrelatedStars() const {
    return GetField<int32_t>(VT_NUMCORRELATEDSTARS, 0);
  }
  /// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double predictedRaUnc() const {
    return GetField<double>(VT_PREDICTEDRAUNC, 0.0);
  }
  /// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double predictedDeclinationUnc() const {
    return GetField<double>(VT_PREDICTEDDECLINATIONUNC, 0.0);
  }
  /// Covariance (x^2) in measured Right Ascension (X) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double raCov() const {
    return GetField<double>(VT_RACOV, 0.0);
  }
  /// Covariance (Y^2) in measured declination (Y) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double declinationCov() const {
    return GetField<double>(VT_DECLINATIONCOV, 0.0);
  }
  /// Covariance (XY) in measured ra/declination (XY) in deg^2.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double raDeclinationCov() const {
    return GetField<double>(VT_RADECLINATIONCOV, 0.0);
  }
  /// World Coordinate System (WCS) X pixel origin in astrometric fit.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double acalCrPixX() const {
    return GetField<double>(VT_ACALCRPIXX, 0.0);
  }
  /// World Coordinate System (WCS) Y pixel origin in astrometric fit.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double acalCrPixY() const {
    return GetField<double>(VT_ACALCRPIXY, 0.0);
  }
  /// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double acalCrValX() const {
    return GetField<double>(VT_ACALCRVALX, 0.0);
  }
  /// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double acalCrValY() const {
    return GetField<double>(VT_ACALCRVALY, 0.0);
  }
  /// Number of stars used in astrometric fit.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t acalNumStars() const {
    return GetField<int32_t>(VT_ACALNUMSTARS, 0);
  }
  /// Distance from the target object to the sun during the observation in meters.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double objSunRange() const {
    return GetField<double>(VT_OBJSUNRANGE, 0.0);
  }
  /// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double phaseAngBisect() const {
    return GetField<double>(VT_PHASEANGBISECT, 0.0);
  }
  /// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double solarDiskFrac() const {
    return GetField<double>(VT_SOLARDISKFRAC, 0.0);
  }
  /// Time off element set.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double toes() const {
    return GetField<double>(VT_TOES, 0.0);
  }
  /// Degrees Off Element Set.
  /// Example: /// Example: 123.2
  /// Constraints: No constraints specified.
  double does() const {
    return GetField<double>(VT_DOES, 0.0);
  }
  /// Source of the data, will be set to EOObservation source if blank.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// , will be set to EOObservation dataMode if blank.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EOObservationDetails_Full_dataMode_Enum dataMode() const {
    return static_cast<EOObservationDetails_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDEOOBSERVATION) &&
           verifier.VerifyString(idEOObservation()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyField<double>(verifier, VT_PREDICTEDRA, 8) &&
           VerifyField<double>(verifier, VT_PREDICTEDDECLINATION, 8) &&
           VerifyField<double>(verifier, VT_PREDICTEDAZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_PREDICTEDELEVATION, 8) &&
           VerifyField<double>(verifier, VT_SUNAZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_SUNELEVATION, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMSPECTRALFILTERS, 4) &&
           VerifyOffset(verifier, VT_SPECTRALFILTERS) &&
           verifier.VerifyVector(spectralFilters()) &&
           verifier.VerifyVectorOfStrings(spectralFilters()) &&
           VerifyOffset(verifier, VT_SPECTRALZMFL) &&
           verifier.VerifyVector(spectralZMFL()) &&
           verifier.VerifyVectorOfStrings(spectralZMFL()) &&
           VerifyOffset(verifier, VT_SPECTRALFILTERSOLARMAG) &&
           verifier.VerifyVector(spectralFilterSolarMag()) &&
           verifier.VerifyVectorOfStrings(spectralFilterSolarMag()) &&
           VerifyOffset(verifier, VT_ZEROPOINTS) &&
           verifier.VerifyVector(zeroPoints()) &&
           verifier.VerifyVectorOfStrings(zeroPoints()) &&
           VerifyOffset(verifier, VT_ZEROPOINTSUNC) &&
           verifier.VerifyVector(zeroPointsUnc()) &&
           verifier.VerifyVectorOfStrings(zeroPointsUnc()) &&
           VerifyOffset(verifier, VT_EXTINCTIONCOEFFS) &&
           verifier.VerifyVector(extinctionCoeffs()) &&
           verifier.VerifyVectorOfStrings(extinctionCoeffs()) &&
           VerifyOffset(verifier, VT_EXTINCTIONCOEFFSUNC) &&
           verifier.VerifyVector(extinctionCoeffsUnc()) &&
           verifier.VerifyVectorOfStrings(extinctionCoeffsUnc()) &&
           VerifyOffset(verifier, VT_COLORCOEFFS) &&
           verifier.VerifyVector(colorCoeffs()) &&
           verifier.VerifyVectorOfStrings(colorCoeffs()) &&
           VerifyField<int32_t>(verifier, VT_NUMNEUTRALDENSITYFILTERS, 4) &&
           VerifyOffset(verifier, VT_NEUTRALDENSITYFILTERNAMES) &&
           verifier.VerifyVector(neutralDensityFilterNames()) &&
           verifier.VerifyVectorOfStrings(neutralDensityFilterNames()) &&
           VerifyOffset(verifier, VT_NEUTRALDENSITYFILTERTRANSMISSIONS) &&
           verifier.VerifyVector(neutralDensityFilterTransmissions()) &&
           verifier.VerifyVectorOfStrings(neutralDensityFilterTransmissions()) &&
           VerifyOffset(verifier, VT_NEUTRALDENSITYFILTERTRANSMISSIONSUNC) &&
           verifier.VerifyVector(neutralDensityFilterTransmissionsUnc()) &&
           verifier.VerifyVectorOfStrings(neutralDensityFilterTransmissionsUnc()) &&
           VerifyField<double>(verifier, VT_GAIN, 8) &&
           VerifyField<double>(verifier, VT_IFOV, 8) &&
           VerifyField<int32_t>(verifier, VT_PIXELARRAYWIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_PIXELARRAYHEIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_PIXELMIN, 4) &&
           VerifyField<int32_t>(verifier, VT_PIXELMAX, 4) &&
           VerifyField<double>(verifier, VT_CENTROIDROW, 8) &&
           VerifyField<double>(verifier, VT_CENTROIDCOLUMN, 8) &&
           VerifyField<double>(verifier, VT_ROWVARIANCE, 8) &&
           VerifyField<double>(verifier, VT_COLUMNVARIANCE, 8) &&
           VerifyField<double>(verifier, VT_ROWCOLCOV, 8) &&
           VerifyOffset(verifier, VT_DISTFROMSTREAKCENTER) &&
           verifier.VerifyVector(distFromStreakCenter()) &&
           verifier.VerifyVectorOfStrings(distFromStreakCenter()) &&
           VerifyOffset(verifier, VT_SURFBRIGHTNESS) &&
           verifier.VerifyVector(surfBrightness()) &&
           verifier.VerifyVectorOfStrings(surfBrightness()) &&
           VerifyOffset(verifier, VT_SURFBRIGHTNESSUNC) &&
           verifier.VerifyVector(surfBrightnessUnc()) &&
           verifier.VerifyVectorOfStrings(surfBrightnessUnc()) &&
           VerifyField<double>(verifier, VT_TIMESUNC, 8) &&
           VerifyField<double>(verifier, VT_CCDTEMP, 8) &&
           VerifyField<int32_t>(verifier, VT_CURRENTSPECTRALFILTERNUM, 4) &&
           VerifyField<int32_t>(verifier, VT_CURRENTNEUTRALDENSITYFILTERNUM, 4) &&
           VerifyField<int32_t>(verifier, VT_BINNINGHORIZ, 4) &&
           VerifyField<int32_t>(verifier, VT_BINNINGVERT, 4) &&
           VerifyField<int32_t>(verifier, VT_PCALNUMSTARS, 4) &&
           VerifyField<double>(verifier, VT_CCDOBJPOSX, 8) &&
           VerifyField<double>(verifier, VT_CCDOBJPOSY, 8) &&
           VerifyField<double>(verifier, VT_CCDOBJWIDTH, 8) &&
           VerifyField<double>(verifier, VT_BACKGROUNDSIGNAL, 8) &&
           VerifyField<double>(verifier, VT_BACKGROUNDSIGNALUNC, 8) &&
           VerifyField<double>(verifier, VT_PEAKAPERTURECOUNT, 8) &&
           VerifyField<int32_t>(verifier, VT_PEAKBACKGROUNDCOUNT, 4) &&
           VerifyField<double>(verifier, VT_SNREST, 8) &&
           VerifyField<double>(verifier, VT_MAGINSTRUMENTAL, 8) &&
           VerifyField<double>(verifier, VT_MAGINSTRUMENTALUNC, 8) &&
           VerifyField<double>(verifier, VT_OPTICALCROSSSECTION, 8) &&
           VerifyField<double>(verifier, VT_OPTICALCROSSSECTIONUNC, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEPOSX, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEPOSY, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEPOSZ, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEVELX, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEVELY, 8) &&
           VerifyField<double>(verifier, VT_SUNSTATEVELZ, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMCATALOGSTARS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMDETECTEDSTARS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMCORRELATEDSTARS, 4) &&
           VerifyField<double>(verifier, VT_PREDICTEDRAUNC, 8) &&
           VerifyField<double>(verifier, VT_PREDICTEDDECLINATIONUNC, 8) &&
           VerifyField<double>(verifier, VT_RACOV, 8) &&
           VerifyField<double>(verifier, VT_DECLINATIONCOV, 8) &&
           VerifyField<double>(verifier, VT_RADECLINATIONCOV, 8) &&
           VerifyField<double>(verifier, VT_ACALCRPIXX, 8) &&
           VerifyField<double>(verifier, VT_ACALCRPIXY, 8) &&
           VerifyField<double>(verifier, VT_ACALCRVALX, 8) &&
           VerifyField<double>(verifier, VT_ACALCRVALY, 8) &&
           VerifyField<int32_t>(verifier, VT_ACALNUMSTARS, 4) &&
           VerifyField<double>(verifier, VT_OBJSUNRANGE, 8) &&
           VerifyField<double>(verifier, VT_PHASEANGBISECT, 8) &&
           VerifyField<double>(verifier, VT_SOLARDISKFRAC, 8) &&
           VerifyField<double>(verifier, VT_TOES, 8) &&
           VerifyField<double>(verifier, VT_DOES, 8) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct EOObservationDetails_FullBuilder {
  typedef EOObservationDetails_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idEOObservation(::flatbuffers::Offset<::flatbuffers::String> idEOObservation) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_IDEOOBSERVATION, idEOObservation);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_OBTIME, obTime);
  }
  void add_predictedRa(double predictedRa) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDRA, predictedRa, 0.0);
  }
  void add_predictedDeclination(double predictedDeclination) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDDECLINATION, predictedDeclination, 0.0);
  }
  void add_predictedAzimuth(double predictedAzimuth) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDAZIMUTH, predictedAzimuth, 0.0);
  }
  void add_predictedElevation(double predictedElevation) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDELEVATION, predictedElevation, 0.0);
  }
  void add_sunAzimuth(double sunAzimuth) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNAZIMUTH, sunAzimuth, 0.0);
  }
  void add_sunElevation(double sunElevation) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNELEVATION, sunElevation, 0.0);
  }
  void add_numSpectralFilters(int32_t numSpectralFilters) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_NUMSPECTRALFILTERS, numSpectralFilters, 0);
  }
  void add_spectralFilters(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralFilters) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SPECTRALFILTERS, spectralFilters);
  }
  void add_spectralZMFL(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralZMFL) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SPECTRALZMFL, spectralZMFL);
  }
  void add_spectralFilterSolarMag(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralFilterSolarMag) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SPECTRALFILTERSOLARMAG, spectralFilterSolarMag);
  }
  void add_zeroPoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPoints) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_ZEROPOINTS, zeroPoints);
  }
  void add_zeroPointsUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPointsUnc) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_ZEROPOINTSUNC, zeroPointsUnc);
  }
  void add_extinctionCoeffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffs) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_EXTINCTIONCOEFFS, extinctionCoeffs);
  }
  void add_extinctionCoeffsUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffsUnc) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_EXTINCTIONCOEFFSUNC, extinctionCoeffsUnc);
  }
  void add_colorCoeffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> colorCoeffs) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_COLORCOEFFS, colorCoeffs);
  }
  void add_numNeutralDensityFilters(int32_t numNeutralDensityFilters) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_NUMNEUTRALDENSITYFILTERS, numNeutralDensityFilters, 0);
  }
  void add_neutralDensityFilterNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterNames) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_NEUTRALDENSITYFILTERNAMES, neutralDensityFilterNames);
  }
  void add_neutralDensityFilterTransmissions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterTransmissions) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_NEUTRALDENSITYFILTERTRANSMISSIONS, neutralDensityFilterTransmissions);
  }
  void add_neutralDensityFilterTransmissionsUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterTransmissionsUnc) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_NEUTRALDENSITYFILTERTRANSMISSIONSUNC, neutralDensityFilterTransmissionsUnc);
  }
  void add_gain(double gain) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_GAIN, gain, 0.0);
  }
  void add_ifov(double ifov) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_IFOV, ifov, 0.0);
  }
  void add_pixelArrayWidth(int32_t pixelArrayWidth) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PIXELARRAYWIDTH, pixelArrayWidth, 0);
  }
  void add_pixelArrayHeight(int32_t pixelArrayHeight) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PIXELARRAYHEIGHT, pixelArrayHeight, 0);
  }
  void add_pixelMin(int32_t pixelMin) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PIXELMIN, pixelMin, 0);
  }
  void add_pixelMax(int32_t pixelMax) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PIXELMAX, pixelMax, 0);
  }
  void add_centroidRow(double centroidRow) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CENTROIDROW, centroidRow, 0.0);
  }
  void add_centroidColumn(double centroidColumn) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CENTROIDCOLUMN, centroidColumn, 0.0);
  }
  void add_rowVariance(double rowVariance) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ROWVARIANCE, rowVariance, 0.0);
  }
  void add_columnVariance(double columnVariance) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_COLUMNVARIANCE, columnVariance, 0.0);
  }
  void add_rowColCov(double rowColCov) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ROWCOLCOV, rowColCov, 0.0);
  }
  void add_distFromStreakCenter(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> distFromStreakCenter) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_DISTFROMSTREAKCENTER, distFromStreakCenter);
  }
  void add_surfBrightness(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> surfBrightness) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SURFBRIGHTNESS, surfBrightness);
  }
  void add_surfBrightnessUnc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> surfBrightnessUnc) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SURFBRIGHTNESSUNC, surfBrightnessUnc);
  }
  void add_timesUnc(double timesUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_TIMESUNC, timesUnc, 0.0);
  }
  void add_ccdTemp(double ccdTemp) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CCDTEMP, ccdTemp, 0.0);
  }
  void add_currentSpectralFilterNum(int32_t currentSpectralFilterNum) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_CURRENTSPECTRALFILTERNUM, currentSpectralFilterNum, 0);
  }
  void add_currentNeutralDensityFilterNum(int32_t currentNeutralDensityFilterNum) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_CURRENTNEUTRALDENSITYFILTERNUM, currentNeutralDensityFilterNum, 0);
  }
  void add_binningHoriz(int32_t binningHoriz) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_BINNINGHORIZ, binningHoriz, 0);
  }
  void add_binningVert(int32_t binningVert) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_BINNINGVERT, binningVert, 0);
  }
  void add_pcalNumStars(int32_t pcalNumStars) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PCALNUMSTARS, pcalNumStars, 0);
  }
  void add_ccdObjPosX(double ccdObjPosX) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CCDOBJPOSX, ccdObjPosX, 0.0);
  }
  void add_ccdObjPosY(double ccdObjPosY) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CCDOBJPOSY, ccdObjPosY, 0.0);
  }
  void add_ccdObjWidth(double ccdObjWidth) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_CCDOBJWIDTH, ccdObjWidth, 0.0);
  }
  void add_backgroundSignal(double backgroundSignal) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_BACKGROUNDSIGNAL, backgroundSignal, 0.0);
  }
  void add_backgroundSignalUnc(double backgroundSignalUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_BACKGROUNDSIGNALUNC, backgroundSignalUnc, 0.0);
  }
  void add_peakApertureCount(double peakApertureCount) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PEAKAPERTURECOUNT, peakApertureCount, 0.0);
  }
  void add_peakBackgroundCount(int32_t peakBackgroundCount) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_PEAKBACKGROUNDCOUNT, peakBackgroundCount, 0);
  }
  void add_snrEst(double snrEst) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SNREST, snrEst, 0.0);
  }
  void add_magInstrumental(double magInstrumental) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_MAGINSTRUMENTAL, magInstrumental, 0.0);
  }
  void add_magInstrumentalUnc(double magInstrumentalUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_MAGINSTRUMENTALUNC, magInstrumentalUnc, 0.0);
  }
  void add_opticalCrossSection(double opticalCrossSection) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_OPTICALCROSSSECTION, opticalCrossSection, 0.0);
  }
  void add_opticalCrossSectionUnc(double opticalCrossSectionUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_OPTICALCROSSSECTIONUNC, opticalCrossSectionUnc, 0.0);
  }
  void add_sunStatePosX(double sunStatePosX) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEPOSX, sunStatePosX, 0.0);
  }
  void add_sunStatePosY(double sunStatePosY) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEPOSY, sunStatePosY, 0.0);
  }
  void add_sunStatePosZ(double sunStatePosZ) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEPOSZ, sunStatePosZ, 0.0);
  }
  void add_sunStateVelX(double sunStateVelX) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEVELX, sunStateVelX, 0.0);
  }
  void add_sunStateVelY(double sunStateVelY) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEVELY, sunStateVelY, 0.0);
  }
  void add_sunStateVelZ(double sunStateVelZ) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SUNSTATEVELZ, sunStateVelZ, 0.0);
  }
  void add_numCatalogStars(int32_t numCatalogStars) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_NUMCATALOGSTARS, numCatalogStars, 0);
  }
  void add_numDetectedStars(int32_t numDetectedStars) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_NUMDETECTEDSTARS, numDetectedStars, 0);
  }
  void add_numCorrelatedStars(int32_t numCorrelatedStars) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_NUMCORRELATEDSTARS, numCorrelatedStars, 0);
  }
  void add_predictedRaUnc(double predictedRaUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDRAUNC, predictedRaUnc, 0.0);
  }
  void add_predictedDeclinationUnc(double predictedDeclinationUnc) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PREDICTEDDECLINATIONUNC, predictedDeclinationUnc, 0.0);
  }
  void add_raCov(double raCov) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_RACOV, raCov, 0.0);
  }
  void add_declinationCov(double declinationCov) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_DECLINATIONCOV, declinationCov, 0.0);
  }
  void add_raDeclinationCov(double raDeclinationCov) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_RADECLINATIONCOV, raDeclinationCov, 0.0);
  }
  void add_acalCrPixX(double acalCrPixX) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ACALCRPIXX, acalCrPixX, 0.0);
  }
  void add_acalCrPixY(double acalCrPixY) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ACALCRPIXY, acalCrPixY, 0.0);
  }
  void add_acalCrValX(double acalCrValX) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ACALCRVALX, acalCrValX, 0.0);
  }
  void add_acalCrValY(double acalCrValY) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_ACALCRVALY, acalCrValY, 0.0);
  }
  void add_acalNumStars(int32_t acalNumStars) {
    fbb_.AddElement<int32_t>(EOObservationDetails_Full::VT_ACALNUMSTARS, acalNumStars, 0);
  }
  void add_objSunRange(double objSunRange) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_OBJSUNRANGE, objSunRange, 0.0);
  }
  void add_phaseAngBisect(double phaseAngBisect) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_PHASEANGBISECT, phaseAngBisect, 0.0);
  }
  void add_solarDiskFrac(double solarDiskFrac) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_SOLARDISKFRAC, solarDiskFrac, 0.0);
  }
  void add_toes(double toes) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_TOES, toes, 0.0);
  }
  void add_does(double does) {
    fbb_.AddElement<double>(EOObservationDetails_Full::VT_DOES, does, 0.0);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_SOURCE, source);
  }
  void add_dataMode(EOObservationDetails_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EOObservationDetails_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EOObservationDetails_Full::VT_CREATEDBY, createdBy);
  }
  explicit EOObservationDetails_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EOObservationDetails_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EOObservationDetails_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EOObservationDetails_Full> CreateEOObservationDetails_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idEOObservation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    double predictedRa = 0.0,
    double predictedDeclination = 0.0,
    double predictedAzimuth = 0.0,
    double predictedElevation = 0.0,
    double sunAzimuth = 0.0,
    double sunElevation = 0.0,
    int32_t numSpectralFilters = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralFilters = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralZMFL = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> spectralFilterSolarMag = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPoints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zeroPointsUnc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> extinctionCoeffsUnc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> colorCoeffs = 0,
    int32_t numNeutralDensityFilters = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterTransmissions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> neutralDensityFilterTransmissionsUnc = 0,
    double gain = 0.0,
    double ifov = 0.0,
    int32_t pixelArrayWidth = 0,
    int32_t pixelArrayHeight = 0,
    int32_t pixelMin = 0,
    int32_t pixelMax = 0,
    double centroidRow = 0.0,
    double centroidColumn = 0.0,
    double rowVariance = 0.0,
    double columnVariance = 0.0,
    double rowColCov = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> distFromStreakCenter = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> surfBrightness = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> surfBrightnessUnc = 0,
    double timesUnc = 0.0,
    double ccdTemp = 0.0,
    int32_t currentSpectralFilterNum = 0,
    int32_t currentNeutralDensityFilterNum = 0,
    int32_t binningHoriz = 0,
    int32_t binningVert = 0,
    int32_t pcalNumStars = 0,
    double ccdObjPosX = 0.0,
    double ccdObjPosY = 0.0,
    double ccdObjWidth = 0.0,
    double backgroundSignal = 0.0,
    double backgroundSignalUnc = 0.0,
    double peakApertureCount = 0.0,
    int32_t peakBackgroundCount = 0,
    double snrEst = 0.0,
    double magInstrumental = 0.0,
    double magInstrumentalUnc = 0.0,
    double opticalCrossSection = 0.0,
    double opticalCrossSectionUnc = 0.0,
    double sunStatePosX = 0.0,
    double sunStatePosY = 0.0,
    double sunStatePosZ = 0.0,
    double sunStateVelX = 0.0,
    double sunStateVelY = 0.0,
    double sunStateVelZ = 0.0,
    int32_t numCatalogStars = 0,
    int32_t numDetectedStars = 0,
    int32_t numCorrelatedStars = 0,
    double predictedRaUnc = 0.0,
    double predictedDeclinationUnc = 0.0,
    double raCov = 0.0,
    double declinationCov = 0.0,
    double raDeclinationCov = 0.0,
    double acalCrPixX = 0.0,
    double acalCrPixY = 0.0,
    double acalCrValX = 0.0,
    double acalCrValY = 0.0,
    int32_t acalNumStars = 0,
    double objSunRange = 0.0,
    double phaseAngBisect = 0.0,
    double solarDiskFrac = 0.0,
    double toes = 0.0,
    double does = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    EOObservationDetails_Full_dataMode_Enum dataMode = EOObservationDetails_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  EOObservationDetails_FullBuilder builder_(_fbb);
  builder_.add_does(does);
  builder_.add_toes(toes);
  builder_.add_solarDiskFrac(solarDiskFrac);
  builder_.add_phaseAngBisect(phaseAngBisect);
  builder_.add_objSunRange(objSunRange);
  builder_.add_acalCrValY(acalCrValY);
  builder_.add_acalCrValX(acalCrValX);
  builder_.add_acalCrPixY(acalCrPixY);
  builder_.add_acalCrPixX(acalCrPixX);
  builder_.add_raDeclinationCov(raDeclinationCov);
  builder_.add_declinationCov(declinationCov);
  builder_.add_raCov(raCov);
  builder_.add_predictedDeclinationUnc(predictedDeclinationUnc);
  builder_.add_predictedRaUnc(predictedRaUnc);
  builder_.add_sunStateVelZ(sunStateVelZ);
  builder_.add_sunStateVelY(sunStateVelY);
  builder_.add_sunStateVelX(sunStateVelX);
  builder_.add_sunStatePosZ(sunStatePosZ);
  builder_.add_sunStatePosY(sunStatePosY);
  builder_.add_sunStatePosX(sunStatePosX);
  builder_.add_opticalCrossSectionUnc(opticalCrossSectionUnc);
  builder_.add_opticalCrossSection(opticalCrossSection);
  builder_.add_magInstrumentalUnc(magInstrumentalUnc);
  builder_.add_magInstrumental(magInstrumental);
  builder_.add_snrEst(snrEst);
  builder_.add_peakApertureCount(peakApertureCount);
  builder_.add_backgroundSignalUnc(backgroundSignalUnc);
  builder_.add_backgroundSignal(backgroundSignal);
  builder_.add_ccdObjWidth(ccdObjWidth);
  builder_.add_ccdObjPosY(ccdObjPosY);
  builder_.add_ccdObjPosX(ccdObjPosX);
  builder_.add_ccdTemp(ccdTemp);
  builder_.add_timesUnc(timesUnc);
  builder_.add_rowColCov(rowColCov);
  builder_.add_columnVariance(columnVariance);
  builder_.add_rowVariance(rowVariance);
  builder_.add_centroidColumn(centroidColumn);
  builder_.add_centroidRow(centroidRow);
  builder_.add_ifov(ifov);
  builder_.add_gain(gain);
  builder_.add_sunElevation(sunElevation);
  builder_.add_sunAzimuth(sunAzimuth);
  builder_.add_predictedElevation(predictedElevation);
  builder_.add_predictedAzimuth(predictedAzimuth);
  builder_.add_predictedDeclination(predictedDeclination);
  builder_.add_predictedRa(predictedRa);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_source(source);
  builder_.add_acalNumStars(acalNumStars);
  builder_.add_numCorrelatedStars(numCorrelatedStars);
  builder_.add_numDetectedStars(numDetectedStars);
  builder_.add_numCatalogStars(numCatalogStars);
  builder_.add_peakBackgroundCount(peakBackgroundCount);
  builder_.add_pcalNumStars(pcalNumStars);
  builder_.add_binningVert(binningVert);
  builder_.add_binningHoriz(binningHoriz);
  builder_.add_currentNeutralDensityFilterNum(currentNeutralDensityFilterNum);
  builder_.add_currentSpectralFilterNum(currentSpectralFilterNum);
  builder_.add_surfBrightnessUnc(surfBrightnessUnc);
  builder_.add_surfBrightness(surfBrightness);
  builder_.add_distFromStreakCenter(distFromStreakCenter);
  builder_.add_pixelMax(pixelMax);
  builder_.add_pixelMin(pixelMin);
  builder_.add_pixelArrayHeight(pixelArrayHeight);
  builder_.add_pixelArrayWidth(pixelArrayWidth);
  builder_.add_neutralDensityFilterTransmissionsUnc(neutralDensityFilterTransmissionsUnc);
  builder_.add_neutralDensityFilterTransmissions(neutralDensityFilterTransmissions);
  builder_.add_neutralDensityFilterNames(neutralDensityFilterNames);
  builder_.add_numNeutralDensityFilters(numNeutralDensityFilters);
  builder_.add_colorCoeffs(colorCoeffs);
  builder_.add_extinctionCoeffsUnc(extinctionCoeffsUnc);
  builder_.add_extinctionCoeffs(extinctionCoeffs);
  builder_.add_zeroPointsUnc(zeroPointsUnc);
  builder_.add_zeroPoints(zeroPoints);
  builder_.add_spectralFilterSolarMag(spectralFilterSolarMag);
  builder_.add_spectralZMFL(spectralZMFL);
  builder_.add_spectralFilters(spectralFilters);
  builder_.add_numSpectralFilters(numSpectralFilters);
  builder_.add_obTime(obTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idEOObservation(idEOObservation);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EOObservationDetails_Full> CreateEOObservationDetails_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idEOObservation = nullptr,
    const char *classificationMarking = nullptr,
    const char *obTime = nullptr,
    double predictedRa = 0.0,
    double predictedDeclination = 0.0,
    double predictedAzimuth = 0.0,
    double predictedElevation = 0.0,
    double sunAzimuth = 0.0,
    double sunElevation = 0.0,
    int32_t numSpectralFilters = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralFilters = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralZMFL = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *spectralFilterSolarMag = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPoints = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zeroPointsUnc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *extinctionCoeffsUnc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *colorCoeffs = nullptr,
    int32_t numNeutralDensityFilters = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterNames = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterTransmissions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *neutralDensityFilterTransmissionsUnc = nullptr,
    double gain = 0.0,
    double ifov = 0.0,
    int32_t pixelArrayWidth = 0,
    int32_t pixelArrayHeight = 0,
    int32_t pixelMin = 0,
    int32_t pixelMax = 0,
    double centroidRow = 0.0,
    double centroidColumn = 0.0,
    double rowVariance = 0.0,
    double columnVariance = 0.0,
    double rowColCov = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *distFromStreakCenter = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *surfBrightness = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *surfBrightnessUnc = nullptr,
    double timesUnc = 0.0,
    double ccdTemp = 0.0,
    int32_t currentSpectralFilterNum = 0,
    int32_t currentNeutralDensityFilterNum = 0,
    int32_t binningHoriz = 0,
    int32_t binningVert = 0,
    int32_t pcalNumStars = 0,
    double ccdObjPosX = 0.0,
    double ccdObjPosY = 0.0,
    double ccdObjWidth = 0.0,
    double backgroundSignal = 0.0,
    double backgroundSignalUnc = 0.0,
    double peakApertureCount = 0.0,
    int32_t peakBackgroundCount = 0,
    double snrEst = 0.0,
    double magInstrumental = 0.0,
    double magInstrumentalUnc = 0.0,
    double opticalCrossSection = 0.0,
    double opticalCrossSectionUnc = 0.0,
    double sunStatePosX = 0.0,
    double sunStatePosY = 0.0,
    double sunStatePosZ = 0.0,
    double sunStateVelX = 0.0,
    double sunStateVelY = 0.0,
    double sunStateVelZ = 0.0,
    int32_t numCatalogStars = 0,
    int32_t numDetectedStars = 0,
    int32_t numCorrelatedStars = 0,
    double predictedRaUnc = 0.0,
    double predictedDeclinationUnc = 0.0,
    double raCov = 0.0,
    double declinationCov = 0.0,
    double raDeclinationCov = 0.0,
    double acalCrPixX = 0.0,
    double acalCrPixY = 0.0,
    double acalCrValX = 0.0,
    double acalCrValY = 0.0,
    int32_t acalNumStars = 0,
    double objSunRange = 0.0,
    double phaseAngBisect = 0.0,
    double solarDiskFrac = 0.0,
    double toes = 0.0,
    double does = 0.0,
    const char *source = nullptr,
    EOObservationDetails_Full_dataMode_Enum dataMode = EOObservationDetails_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto idEOObservation__ = idEOObservation ? _fbb.CreateString(idEOObservation) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto spectralFilters__ = spectralFilters ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*spectralFilters) : 0;
  auto spectralZMFL__ = spectralZMFL ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*spectralZMFL) : 0;
  auto spectralFilterSolarMag__ = spectralFilterSolarMag ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*spectralFilterSolarMag) : 0;
  auto zeroPoints__ = zeroPoints ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zeroPoints) : 0;
  auto zeroPointsUnc__ = zeroPointsUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zeroPointsUnc) : 0;
  auto extinctionCoeffs__ = extinctionCoeffs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*extinctionCoeffs) : 0;
  auto extinctionCoeffsUnc__ = extinctionCoeffsUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*extinctionCoeffsUnc) : 0;
  auto colorCoeffs__ = colorCoeffs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*colorCoeffs) : 0;
  auto neutralDensityFilterNames__ = neutralDensityFilterNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*neutralDensityFilterNames) : 0;
  auto neutralDensityFilterTransmissions__ = neutralDensityFilterTransmissions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*neutralDensityFilterTransmissions) : 0;
  auto neutralDensityFilterTransmissionsUnc__ = neutralDensityFilterTransmissionsUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*neutralDensityFilterTransmissionsUnc) : 0;
  auto distFromStreakCenter__ = distFromStreakCenter ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*distFromStreakCenter) : 0;
  auto surfBrightness__ = surfBrightness ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*surfBrightness) : 0;
  auto surfBrightnessUnc__ = surfBrightnessUnc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*surfBrightnessUnc) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateEOObservationDetails_Full(
      _fbb,
      idEOObservation__,
      classificationMarking__,
      obTime__,
      predictedRa,
      predictedDeclination,
      predictedAzimuth,
      predictedElevation,
      sunAzimuth,
      sunElevation,
      numSpectralFilters,
      spectralFilters__,
      spectralZMFL__,
      spectralFilterSolarMag__,
      zeroPoints__,
      zeroPointsUnc__,
      extinctionCoeffs__,
      extinctionCoeffsUnc__,
      colorCoeffs__,
      numNeutralDensityFilters,
      neutralDensityFilterNames__,
      neutralDensityFilterTransmissions__,
      neutralDensityFilterTransmissionsUnc__,
      gain,
      ifov,
      pixelArrayWidth,
      pixelArrayHeight,
      pixelMin,
      pixelMax,
      centroidRow,
      centroidColumn,
      rowVariance,
      columnVariance,
      rowColCov,
      distFromStreakCenter__,
      surfBrightness__,
      surfBrightnessUnc__,
      timesUnc,
      ccdTemp,
      currentSpectralFilterNum,
      currentNeutralDensityFilterNum,
      binningHoriz,
      binningVert,
      pcalNumStars,
      ccdObjPosX,
      ccdObjPosY,
      ccdObjWidth,
      backgroundSignal,
      backgroundSignalUnc,
      peakApertureCount,
      peakBackgroundCount,
      snrEst,
      magInstrumental,
      magInstrumentalUnc,
      opticalCrossSection,
      opticalCrossSectionUnc,
      sunStatePosX,
      sunStatePosY,
      sunStatePosZ,
      sunStateVelX,
      sunStateVelY,
      sunStateVelZ,
      numCatalogStars,
      numDetectedStars,
      numCorrelatedStars,
      predictedRaUnc,
      predictedDeclinationUnc,
      raCov,
      declinationCov,
      raDeclinationCov,
      acalCrPixX,
      acalCrPixY,
      acalCrValX,
      acalCrValY,
      acalNumStars,
      objSunRange,
      phaseAngBisect,
      solarDiskFrac,
      toes,
      does,
      source__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const EOObservationDetails_Full *GetEOObservationDetails_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EOObservationDetails_Full>(buf);
}

inline const EOObservationDetails_Full *GetSizePrefixedEOObservationDetails_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EOObservationDetails_Full>(buf);
}

inline const char *EOObservationDetails_FullIdentifier() {
  return "EOOB";
}

inline bool EOObservationDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EOObservationDetails_FullIdentifier());
}

inline bool SizePrefixedEOObservationDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EOObservationDetails_FullIdentifier(), true);
}

inline bool VerifyEOObservationDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EOObservationDetails_Full>(EOObservationDetails_FullIdentifier());
}

inline bool VerifySizePrefixedEOObservationDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EOObservationDetails_Full>(EOObservationDetails_FullIdentifier());
}

inline void FinishEOObservationDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EOObservationDetails_Full> root) {
  fbb.Finish(root, EOObservationDetails_FullIdentifier());
}

inline void FinishSizePrefixedEOObservationDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EOObservationDetails_Full> root) {
  fbb.FinishSizePrefixed(root, EOObservationDetails_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
