// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SigAct_Full;
struct SigAct_FullBuilder;

enum SigAct_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SigAct_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SigAct_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SigAct_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SigAct_Full_dataMode_Enum_EXERCISE = 3,
  SigAct_Full_dataMode_Enum_MIN = SigAct_Full_dataMode_Enum_REAL,
  SigAct_Full_dataMode_Enum_MAX = SigAct_Full_dataMode_Enum_EXERCISE
};

inline const SigAct_Full_dataMode_Enum (&EnumValuesSigAct_Full_dataMode_Enum())[4] {
  static const SigAct_Full_dataMode_Enum values[] = {
    SigAct_Full_dataMode_Enum_REAL,
    SigAct_Full_dataMode_Enum_TEST,
    SigAct_Full_dataMode_Enum_SIMULATED,
    SigAct_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSigAct_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSigAct_Full_dataMode_Enum(SigAct_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SigAct_Full_dataMode_Enum_REAL, SigAct_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSigAct_Full_dataMode_Enum()[index];
}

/// /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
struct SigAct_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SigAct_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SOURCELANGUAGE = 8,
    VT_COUNTRYCODE = 10,
    VT_CITY = 12,
    VT_DISTRICT = 14,
    VT_PROVINCE = 16,
    VT_LAT = 18,
    VT_LON = 20,
    VT_MILGRID = 22,
    VT_THEATER = 24,
    VT_AREA = 26,
    VT_ATEXT = 28,
    VT_AGJSON = 30,
    VT_ATYPE = 32,
    VT_ANDIMS = 34,
    VT_ASRID = 36,
    VT_EVENTSTART = 38,
    VT_EVENTEND = 40,
    VT_REPORTDATE = 42,
    VT_ACTORS = 44,
    VT_CIVABD = 46,
    VT_CIVDET = 48,
    VT_CIVKIA = 50,
    VT_CIVWOUND = 52,
    VT_COALABD = 54,
    VT_COALDET = 56,
    VT_COALKIA = 58,
    VT_COALWOUND = 60,
    VT_ENEMYABD = 62,
    VT_ENEMYDET = 64,
    VT_ENEMYKIA = 66,
    VT_FRIENDLYABD = 68,
    VT_FRIENDLYDET = 70,
    VT_FRIENDLYKIA = 72,
    VT_FRIENDLYWOUND = 74,
    VT_HOSTNATABD = 76,
    VT_HOSTNATDET = 78,
    VT_HOSTNATKIA = 80,
    VT_HOSTNATWOUND = 82,
    VT_SIDEAABD = 84,
    VT_SIDEADET = 86,
    VT_SIDEAKIA = 88,
    VT_SIDEAWOUND = 90,
    VT_SIDEBABD = 92,
    VT_SIDEBDET = 94,
    VT_SIDEBKIA = 96,
    VT_SIDEBWOUND = 98,
    VT_TARGET = 100,
    VT_EVENTDESCRIPTION = 102,
    VT_EVENTTYPE = 104,
    VT_TYPEOFATTACK = 106,
    VT_COMPLEXATTACK = 108,
    VT_IDNUMBER = 110,
    VT_CONFIDENCE = 112,
    VT_ACCURACY = 114,
    VT_CLARITY = 116,
    VT_CAMEOCODE = 118,
    VT_CAMEOBASECODE = 120,
    VT_CAMEOROOTCODE = 122,
    VT_GOLDSTEIN = 124,
    VT_DOCUMENTSOURCE = 126,
    VT_DOCUMENTFILENAME = 128,
    VT_HASATTACHMENT = 130,
    VT_FILESIZE = 132,
    VT_CHECKSUMVALUE = 134,
    VT_REPUNIT = 136,
    VT_REPUNITTYPE = 138,
    VT_REPUNITACTIVITY = 140,
    VT_NUMMENTIONS = 142,
    VT_NUMSOURCES = 144,
    VT_NUMARTICLES = 146,
    VT_AVGTONE = 148,
    VT_SOURCEURL = 150,
    VT_RELATEDDOCS = 152,
    VT_SUMMARY = 154,
    VT_NOTES = 156,
    VT_CREATEDAT = 158,
    VT_CREATEDBY = 160,
    VT_SOURCE = 162,
    VT_ORIGIN = 164,
    VT_DATAMODE = 166,
    VT_ORIGNETWORK = 168
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SIGACT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The source language of the significant event using the ISO 639-3, 3 character code definition.
  /// Example: /// Example: eng
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *sourceLanguage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCELANGUAGE);
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// The city in or near which this event occurred.
  /// Example: /// Example: Austin
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *city() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CITY);
  }
  /// The district in which this event occurred.
  /// Example: /// Example: district 12
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *district() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISTRICT);
  }
  /// The province in which this event occurred.
  /// Example: /// Example: Province_Example
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *province() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROVINCE);
  }
  /// WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.31
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// &nbsp;&nbsp;4Q (grid zone designator, GZD)
  /// &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
  /// &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *milgrid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILGRID);
  }
  /// Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
  /// Example: /// Example: Kabul
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *theater() const {
    return GetPointer<const ::flatbuffers::String *>(VT_THEATER);
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *area() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREA);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *atext() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATEXT);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *agjson() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AGJSON);
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *atype() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATYPE);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t andims() const {
    return GetField<int32_t>(VT_ANDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t asrid() const {
    return GetField<int32_t>(VT_ASRID, 0);
  }
  /// The approximate start time of the event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eventStart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTSTART);
  }
  /// The approximate end time of the event, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eventEnd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTEND);
  }
  /// Date of the report or filing.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *reportDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTDATE);
  }
  /// A list of one or more actors involved in the event.
  /// Example: /// Example: ['US', 'CAN']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *actors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACTORS);
  }
  /// Number of civilians abducted in the activity.
  /// Example: /// Example: 423
  /// Constraints: No constraints specified.
  int32_t civAbd() const {
    return GetField<int32_t>(VT_CIVABD, 0);
  }
  /// Number of civilians detained in the activity.
  /// Example: /// Example: 234
  /// Constraints: No constraints specified.
  int32_t civDet() const {
    return GetField<int32_t>(VT_CIVDET, 0);
  }
  /// Number of civilians killed in the activity.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t civKIA() const {
    return GetField<int32_t>(VT_CIVKIA, 0);
  }
  /// Number of civilians wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t civWound() const {
    return GetField<int32_t>(VT_CIVWOUND, 0);
  }
  /// Number of coalition members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t coalAbd() const {
    return GetField<int32_t>(VT_COALABD, 0);
  }
  /// Number of coalition members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t coalDet() const {
    return GetField<int32_t>(VT_COALDET, 0);
  }
  /// Number of coalition members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t coalKIA() const {
    return GetField<int32_t>(VT_COALKIA, 0);
  }
  /// Number of coalition members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t coalWound() const {
    return GetField<int32_t>(VT_COALWOUND, 0);
  }
  /// Number of enemy combatants abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t enemyAbd() const {
    return GetField<int32_t>(VT_ENEMYABD, 0);
  }
  /// Number of enemy combatants detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t enemyDet() const {
    return GetField<int32_t>(VT_ENEMYDET, 0);
  }
  /// Number of enemy combatants killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t enemyKIA() const {
    return GetField<int32_t>(VT_ENEMYKIA, 0);
  }
  /// Number of friendlies abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t friendlyAbd() const {
    return GetField<int32_t>(VT_FRIENDLYABD, 0);
  }
  /// Number of friendlies in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t friendlyDet() const {
    return GetField<int32_t>(VT_FRIENDLYDET, 0);
  }
  /// Number of friendlies killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t friendlyKIA() const {
    return GetField<int32_t>(VT_FRIENDLYKIA, 0);
  }
  /// Number of friendlies wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t friendlyWound() const {
    return GetField<int32_t>(VT_FRIENDLYWOUND, 0);
  }
  /// Number of Host Nation members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t hostNatAbd() const {
    return GetField<int32_t>(VT_HOSTNATABD, 0);
  }
  /// Number of Host Nation members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t hostNatDet() const {
    return GetField<int32_t>(VT_HOSTNATDET, 0);
  }
  /// Number of Host Nation members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t hostNatKIA() const {
    return GetField<int32_t>(VT_HOSTNATKIA, 0);
  }
  /// Number of Host Nation members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t hostNatWound() const {
    return GetField<int32_t>(VT_HOSTNATWOUND, 0);
  }
  /// Number of side A members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideAAbd() const {
    return GetField<int32_t>(VT_SIDEAABD, 0);
  }
  /// Number of side A members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideADet() const {
    return GetField<int32_t>(VT_SIDEADET, 0);
  }
  /// Number of side A members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideAKIA() const {
    return GetField<int32_t>(VT_SIDEAKIA, 0);
  }
  /// Number of side A members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideAWound() const {
    return GetField<int32_t>(VT_SIDEAWOUND, 0);
  }
  /// Number of side B members abducted in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideBAbd() const {
    return GetField<int32_t>(VT_SIDEBABD, 0);
  }
  /// Number of side B members detained in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideBDet() const {
    return GetField<int32_t>(VT_SIDEBDET, 0);
  }
  /// Number of side B members killed in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideBKIA() const {
    return GetField<int32_t>(VT_SIDEBKIA, 0);
  }
  /// Number of side B members wounded in the activity.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t sideBWound() const {
    return GetField<int32_t>(VT_SIDEBWOUND, 0);
  }
  /// The name of the target.  The target may be an individual, an entity, or a country/region.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *target() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGET);
  }
  /// A description of the event.
  /// Example: /// Example: Example_Description
  /// Constraints: Minimum length = 0, Maximum length = 4096
  const ::flatbuffers::String *eventDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTDESCRIPTION);
  }
  /// The type of event (e.g.  Military, Natural, Political, Social, etc.).
  /// Example: /// Example: Military
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *eventType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTTYPE);
  }
  /// The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
  /// Example: /// Example: IED Explosion
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *typeOfAttack() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPEOFATTACK);
  }
  /// Flag indicating that this attack was of a complex or coordinated nature.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool complexAttack() const {
    return GetField<uint8_t>(VT_COMPLEXATTACK, 0) != 0;
  }
  /// Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
  /// Example: /// Example: NUMBER-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *idNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDNUMBER);
  }
  /// Estimate of the confidence that this event occurred.
  /// Example: /// Example: 13
  /// Constraints: No constraints specified.
  int32_t confidence() const {
    return GetField<int32_t>(VT_CONFIDENCE, 0);
  }
  /// Estimate of the accuracy that this event occurred as described/reported.
  /// Example: /// Example: 13
  /// Constraints: No constraints specified.
  int32_t accuracy() const {
    return GetField<int32_t>(VT_ACCURACY, 0);
  }
  /// 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
  /// 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t clarity() const {
    return GetField<int32_t>(VT_CLARITY, 0);
  }
  /// This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
  /// Example: /// Example: CAMEO_CODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *cameoCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAMEOCODE);
  }
  /// CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  /// Example: /// Example: Example_cameoBaseCode
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *cameoBaseCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAMEOBASECODE);
  }
  /// Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
  /// Example: /// Example: Example_cameoRootCode
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *cameoRootCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAMEOROOTCODE);
  }
  /// Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
  /// Example: /// Example: 9.32
  /// Constraints: No constraints specified.
  double goldstein() const {
    return GetField<double>(VT_GOLDSTEIN, 0.0);
  }
  /// The source of the document or report.
  /// Example: /// Example: Example_documentSource
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *documentSource() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOCUMENTSOURCE);
  }
  /// The filename of the document or report.
  /// Example: /// Example: Example_documentFilename
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *documentFilename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOCUMENTFILENAME);
  }
  /// Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool hasAttachment() const {
    return GetField<uint8_t>(VT_HASATTACHMENT, 0) != 0;
  }
  /// Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int64_t filesize() const {
    return GetField<int64_t>(VT_FILESIZE, 0);
  }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *checksumValue() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHECKSUMVALUE);
  }
  /// The reporting unit.
  /// Example: /// Example: Unit_1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *repUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPUNIT);
  }
  /// The reporting unit type.
  /// Example: /// Example: Example_repUnitType
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *repUnitType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPUNITTYPE);
  }
  /// The activity the unit was engaged in.
  /// Example: /// Example: Example_Activity
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *repUnitActivity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPUNITACTIVITY);
  }
  /// This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  int32_t numMentions() const {
    return GetField<int32_t>(VT_NUMMENTIONS, 0);
  }
  /// This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  int32_t numSources() const {
    return GetField<int32_t>(VT_NUMSOURCES, 0);
  }
  /// This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  int32_t numArticles() const {
    return GetField<int32_t>(VT_NUMARTICLES, 0);
  }
  /// This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
  /// Example: /// Example: 8.23
  /// Constraints: No constraints specified.
  double avgTone() const {
    return GetField<double>(VT_AVGTONE, 0.0);
  }
  /// This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
  /// Example: /// Example: Example_URL
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *sourceUrl() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEURL);
  }
  /// Related document ids.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *relatedDocs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RELATEDDOCS);
  }
  /// A summary of the event.
  /// Example: /// Example: Example_Summary
  /// Constraints: Minimum length = 0, Maximum length = 4096
  const ::flatbuffers::String *summary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUMMARY);
  }
  /// Notes related to the documents or event.
  /// Example: /// Example: Example_Notes
  /// Constraints: Minimum length = 0, Maximum length = 4096
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SigAct_Full_dataMode_Enum dataMode() const {
    return static_cast<SigAct_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SOURCELANGUAGE) &&
           verifier.VerifyString(sourceLanguage()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyString(city()) &&
           VerifyOffset(verifier, VT_DISTRICT) &&
           verifier.VerifyString(district()) &&
           VerifyOffset(verifier, VT_PROVINCE) &&
           verifier.VerifyString(province()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_MILGRID) &&
           verifier.VerifyString(milgrid()) &&
           VerifyOffset(verifier, VT_THEATER) &&
           verifier.VerifyString(theater()) &&
           VerifyOffset(verifier, VT_AREA) &&
           verifier.VerifyString(area()) &&
           VerifyOffset(verifier, VT_ATEXT) &&
           verifier.VerifyString(atext()) &&
           VerifyOffset(verifier, VT_AGJSON) &&
           verifier.VerifyString(agjson()) &&
           VerifyOffset(verifier, VT_ATYPE) &&
           verifier.VerifyString(atype()) &&
           VerifyField<int32_t>(verifier, VT_ANDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_ASRID, 4) &&
           VerifyOffset(verifier, VT_EVENTSTART) &&
           verifier.VerifyString(eventStart()) &&
           VerifyOffset(verifier, VT_EVENTEND) &&
           verifier.VerifyString(eventEnd()) &&
           VerifyOffset(verifier, VT_REPORTDATE) &&
           verifier.VerifyString(reportDate()) &&
           VerifyOffset(verifier, VT_ACTORS) &&
           verifier.VerifyVector(actors()) &&
           verifier.VerifyVectorOfStrings(actors()) &&
           VerifyField<int32_t>(verifier, VT_CIVABD, 4) &&
           VerifyField<int32_t>(verifier, VT_CIVDET, 4) &&
           VerifyField<int32_t>(verifier, VT_CIVKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_CIVWOUND, 4) &&
           VerifyField<int32_t>(verifier, VT_COALABD, 4) &&
           VerifyField<int32_t>(verifier, VT_COALDET, 4) &&
           VerifyField<int32_t>(verifier, VT_COALKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_COALWOUND, 4) &&
           VerifyField<int32_t>(verifier, VT_ENEMYABD, 4) &&
           VerifyField<int32_t>(verifier, VT_ENEMYDET, 4) &&
           VerifyField<int32_t>(verifier, VT_ENEMYKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_FRIENDLYABD, 4) &&
           VerifyField<int32_t>(verifier, VT_FRIENDLYDET, 4) &&
           VerifyField<int32_t>(verifier, VT_FRIENDLYKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_FRIENDLYWOUND, 4) &&
           VerifyField<int32_t>(verifier, VT_HOSTNATABD, 4) &&
           VerifyField<int32_t>(verifier, VT_HOSTNATDET, 4) &&
           VerifyField<int32_t>(verifier, VT_HOSTNATKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_HOSTNATWOUND, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEAABD, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEADET, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEAKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEAWOUND, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEBABD, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEBDET, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEBKIA, 4) &&
           VerifyField<int32_t>(verifier, VT_SIDEBWOUND, 4) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.VerifyString(target()) &&
           VerifyOffset(verifier, VT_EVENTDESCRIPTION) &&
           verifier.VerifyString(eventDescription()) &&
           VerifyOffset(verifier, VT_EVENTTYPE) &&
           verifier.VerifyString(eventType()) &&
           VerifyOffset(verifier, VT_TYPEOFATTACK) &&
           verifier.VerifyString(typeOfAttack()) &&
           VerifyField<uint8_t>(verifier, VT_COMPLEXATTACK, 1) &&
           VerifyOffset(verifier, VT_IDNUMBER) &&
           verifier.VerifyString(idNumber()) &&
           VerifyField<int32_t>(verifier, VT_CONFIDENCE, 4) &&
           VerifyField<int32_t>(verifier, VT_ACCURACY, 4) &&
           VerifyField<int32_t>(verifier, VT_CLARITY, 4) &&
           VerifyOffset(verifier, VT_CAMEOCODE) &&
           verifier.VerifyString(cameoCode()) &&
           VerifyOffset(verifier, VT_CAMEOBASECODE) &&
           verifier.VerifyString(cameoBaseCode()) &&
           VerifyOffset(verifier, VT_CAMEOROOTCODE) &&
           verifier.VerifyString(cameoRootCode()) &&
           VerifyField<double>(verifier, VT_GOLDSTEIN, 8) &&
           VerifyOffset(verifier, VT_DOCUMENTSOURCE) &&
           verifier.VerifyString(documentSource()) &&
           VerifyOffset(verifier, VT_DOCUMENTFILENAME) &&
           verifier.VerifyString(documentFilename()) &&
           VerifyField<uint8_t>(verifier, VT_HASATTACHMENT, 1) &&
           VerifyField<int64_t>(verifier, VT_FILESIZE, 8) &&
           VerifyOffset(verifier, VT_CHECKSUMVALUE) &&
           verifier.VerifyString(checksumValue()) &&
           VerifyOffset(verifier, VT_REPUNIT) &&
           verifier.VerifyString(repUnit()) &&
           VerifyOffset(verifier, VT_REPUNITTYPE) &&
           verifier.VerifyString(repUnitType()) &&
           VerifyOffset(verifier, VT_REPUNITACTIVITY) &&
           verifier.VerifyString(repUnitActivity()) &&
           VerifyField<int32_t>(verifier, VT_NUMMENTIONS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMSOURCES, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMARTICLES, 4) &&
           VerifyField<double>(verifier, VT_AVGTONE, 8) &&
           VerifyOffset(verifier, VT_SOURCEURL) &&
           verifier.VerifyString(sourceUrl()) &&
           VerifyOffset(verifier, VT_RELATEDDOCS) &&
           verifier.VerifyVector(relatedDocs()) &&
           verifier.VerifyVectorOfStrings(relatedDocs()) &&
           VerifyOffset(verifier, VT_SUMMARY) &&
           verifier.VerifyString(summary()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct SigAct_FullBuilder {
  typedef SigAct_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SigAct_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SigAct_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_sourceLanguage(::flatbuffers::Offset<::flatbuffers::String> sourceLanguage) {
    fbb_.AddOffset(SigAct_Full::VT_SOURCELANGUAGE, sourceLanguage);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(SigAct_Full::VT_COUNTRYCODE, countryCode);
  }
  void add_city(::flatbuffers::Offset<::flatbuffers::String> city) {
    fbb_.AddOffset(SigAct_Full::VT_CITY, city);
  }
  void add_district(::flatbuffers::Offset<::flatbuffers::String> district) {
    fbb_.AddOffset(SigAct_Full::VT_DISTRICT, district);
  }
  void add_province(::flatbuffers::Offset<::flatbuffers::String> province) {
    fbb_.AddOffset(SigAct_Full::VT_PROVINCE, province);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(SigAct_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(SigAct_Full::VT_LON, lon, 0.0);
  }
  void add_milgrid(::flatbuffers::Offset<::flatbuffers::String> milgrid) {
    fbb_.AddOffset(SigAct_Full::VT_MILGRID, milgrid);
  }
  void add_theater(::flatbuffers::Offset<::flatbuffers::String> theater) {
    fbb_.AddOffset(SigAct_Full::VT_THEATER, theater);
  }
  void add_area(::flatbuffers::Offset<::flatbuffers::String> area) {
    fbb_.AddOffset(SigAct_Full::VT_AREA, area);
  }
  void add_atext(::flatbuffers::Offset<::flatbuffers::String> atext) {
    fbb_.AddOffset(SigAct_Full::VT_ATEXT, atext);
  }
  void add_agjson(::flatbuffers::Offset<::flatbuffers::String> agjson) {
    fbb_.AddOffset(SigAct_Full::VT_AGJSON, agjson);
  }
  void add_atype(::flatbuffers::Offset<::flatbuffers::String> atype) {
    fbb_.AddOffset(SigAct_Full::VT_ATYPE, atype);
  }
  void add_andims(int32_t andims) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ANDIMS, andims, 0);
  }
  void add_asrid(int32_t asrid) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ASRID, asrid, 0);
  }
  void add_eventStart(::flatbuffers::Offset<::flatbuffers::String> eventStart) {
    fbb_.AddOffset(SigAct_Full::VT_EVENTSTART, eventStart);
  }
  void add_eventEnd(::flatbuffers::Offset<::flatbuffers::String> eventEnd) {
    fbb_.AddOffset(SigAct_Full::VT_EVENTEND, eventEnd);
  }
  void add_reportDate(::flatbuffers::Offset<::flatbuffers::String> reportDate) {
    fbb_.AddOffset(SigAct_Full::VT_REPORTDATE, reportDate);
  }
  void add_actors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actors) {
    fbb_.AddOffset(SigAct_Full::VT_ACTORS, actors);
  }
  void add_civAbd(int32_t civAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CIVABD, civAbd, 0);
  }
  void add_civDet(int32_t civDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CIVDET, civDet, 0);
  }
  void add_civKIA(int32_t civKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CIVKIA, civKIA, 0);
  }
  void add_civWound(int32_t civWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CIVWOUND, civWound, 0);
  }
  void add_coalAbd(int32_t coalAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_COALABD, coalAbd, 0);
  }
  void add_coalDet(int32_t coalDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_COALDET, coalDet, 0);
  }
  void add_coalKIA(int32_t coalKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_COALKIA, coalKIA, 0);
  }
  void add_coalWound(int32_t coalWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_COALWOUND, coalWound, 0);
  }
  void add_enemyAbd(int32_t enemyAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ENEMYABD, enemyAbd, 0);
  }
  void add_enemyDet(int32_t enemyDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ENEMYDET, enemyDet, 0);
  }
  void add_enemyKIA(int32_t enemyKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ENEMYKIA, enemyKIA, 0);
  }
  void add_friendlyAbd(int32_t friendlyAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_FRIENDLYABD, friendlyAbd, 0);
  }
  void add_friendlyDet(int32_t friendlyDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_FRIENDLYDET, friendlyDet, 0);
  }
  void add_friendlyKIA(int32_t friendlyKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_FRIENDLYKIA, friendlyKIA, 0);
  }
  void add_friendlyWound(int32_t friendlyWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_FRIENDLYWOUND, friendlyWound, 0);
  }
  void add_hostNatAbd(int32_t hostNatAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_HOSTNATABD, hostNatAbd, 0);
  }
  void add_hostNatDet(int32_t hostNatDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_HOSTNATDET, hostNatDet, 0);
  }
  void add_hostNatKIA(int32_t hostNatKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_HOSTNATKIA, hostNatKIA, 0);
  }
  void add_hostNatWound(int32_t hostNatWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_HOSTNATWOUND, hostNatWound, 0);
  }
  void add_sideAAbd(int32_t sideAAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEAABD, sideAAbd, 0);
  }
  void add_sideADet(int32_t sideADet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEADET, sideADet, 0);
  }
  void add_sideAKIA(int32_t sideAKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEAKIA, sideAKIA, 0);
  }
  void add_sideAWound(int32_t sideAWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEAWOUND, sideAWound, 0);
  }
  void add_sideBAbd(int32_t sideBAbd) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEBABD, sideBAbd, 0);
  }
  void add_sideBDet(int32_t sideBDet) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEBDET, sideBDet, 0);
  }
  void add_sideBKIA(int32_t sideBKIA) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEBKIA, sideBKIA, 0);
  }
  void add_sideBWound(int32_t sideBWound) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_SIDEBWOUND, sideBWound, 0);
  }
  void add_target(::flatbuffers::Offset<::flatbuffers::String> target) {
    fbb_.AddOffset(SigAct_Full::VT_TARGET, target);
  }
  void add_eventDescription(::flatbuffers::Offset<::flatbuffers::String> eventDescription) {
    fbb_.AddOffset(SigAct_Full::VT_EVENTDESCRIPTION, eventDescription);
  }
  void add_eventType(::flatbuffers::Offset<::flatbuffers::String> eventType) {
    fbb_.AddOffset(SigAct_Full::VT_EVENTTYPE, eventType);
  }
  void add_typeOfAttack(::flatbuffers::Offset<::flatbuffers::String> typeOfAttack) {
    fbb_.AddOffset(SigAct_Full::VT_TYPEOFATTACK, typeOfAttack);
  }
  void add_complexAttack(bool complexAttack) {
    fbb_.AddElement<uint8_t>(SigAct_Full::VT_COMPLEXATTACK, static_cast<uint8_t>(complexAttack), 0);
  }
  void add_idNumber(::flatbuffers::Offset<::flatbuffers::String> idNumber) {
    fbb_.AddOffset(SigAct_Full::VT_IDNUMBER, idNumber);
  }
  void add_confidence(int32_t confidence) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CONFIDENCE, confidence, 0);
  }
  void add_accuracy(int32_t accuracy) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_ACCURACY, accuracy, 0);
  }
  void add_clarity(int32_t clarity) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_CLARITY, clarity, 0);
  }
  void add_cameoCode(::flatbuffers::Offset<::flatbuffers::String> cameoCode) {
    fbb_.AddOffset(SigAct_Full::VT_CAMEOCODE, cameoCode);
  }
  void add_cameoBaseCode(::flatbuffers::Offset<::flatbuffers::String> cameoBaseCode) {
    fbb_.AddOffset(SigAct_Full::VT_CAMEOBASECODE, cameoBaseCode);
  }
  void add_cameoRootCode(::flatbuffers::Offset<::flatbuffers::String> cameoRootCode) {
    fbb_.AddOffset(SigAct_Full::VT_CAMEOROOTCODE, cameoRootCode);
  }
  void add_goldstein(double goldstein) {
    fbb_.AddElement<double>(SigAct_Full::VT_GOLDSTEIN, goldstein, 0.0);
  }
  void add_documentSource(::flatbuffers::Offset<::flatbuffers::String> documentSource) {
    fbb_.AddOffset(SigAct_Full::VT_DOCUMENTSOURCE, documentSource);
  }
  void add_documentFilename(::flatbuffers::Offset<::flatbuffers::String> documentFilename) {
    fbb_.AddOffset(SigAct_Full::VT_DOCUMENTFILENAME, documentFilename);
  }
  void add_hasAttachment(bool hasAttachment) {
    fbb_.AddElement<uint8_t>(SigAct_Full::VT_HASATTACHMENT, static_cast<uint8_t>(hasAttachment), 0);
  }
  void add_filesize(int64_t filesize) {
    fbb_.AddElement<int64_t>(SigAct_Full::VT_FILESIZE, filesize, 0);
  }
  void add_checksumValue(::flatbuffers::Offset<::flatbuffers::String> checksumValue) {
    fbb_.AddOffset(SigAct_Full::VT_CHECKSUMVALUE, checksumValue);
  }
  void add_repUnit(::flatbuffers::Offset<::flatbuffers::String> repUnit) {
    fbb_.AddOffset(SigAct_Full::VT_REPUNIT, repUnit);
  }
  void add_repUnitType(::flatbuffers::Offset<::flatbuffers::String> repUnitType) {
    fbb_.AddOffset(SigAct_Full::VT_REPUNITTYPE, repUnitType);
  }
  void add_repUnitActivity(::flatbuffers::Offset<::flatbuffers::String> repUnitActivity) {
    fbb_.AddOffset(SigAct_Full::VT_REPUNITACTIVITY, repUnitActivity);
  }
  void add_numMentions(int32_t numMentions) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_NUMMENTIONS, numMentions, 0);
  }
  void add_numSources(int32_t numSources) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_NUMSOURCES, numSources, 0);
  }
  void add_numArticles(int32_t numArticles) {
    fbb_.AddElement<int32_t>(SigAct_Full::VT_NUMARTICLES, numArticles, 0);
  }
  void add_avgTone(double avgTone) {
    fbb_.AddElement<double>(SigAct_Full::VT_AVGTONE, avgTone, 0.0);
  }
  void add_sourceUrl(::flatbuffers::Offset<::flatbuffers::String> sourceUrl) {
    fbb_.AddOffset(SigAct_Full::VT_SOURCEURL, sourceUrl);
  }
  void add_relatedDocs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> relatedDocs) {
    fbb_.AddOffset(SigAct_Full::VT_RELATEDDOCS, relatedDocs);
  }
  void add_summary(::flatbuffers::Offset<::flatbuffers::String> summary) {
    fbb_.AddOffset(SigAct_Full::VT_SUMMARY, summary);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SigAct_Full::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SigAct_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SigAct_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SigAct_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SigAct_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(SigAct_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SigAct_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SigAct_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit SigAct_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SigAct_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SigAct_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SigAct_Full> CreateSigAct_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceLanguage = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> city = 0,
    ::flatbuffers::Offset<::flatbuffers::String> district = 0,
    ::flatbuffers::Offset<::flatbuffers::String> province = 0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> milgrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> theater = 0,
    ::flatbuffers::Offset<::flatbuffers::String> area = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atext = 0,
    ::flatbuffers::Offset<::flatbuffers::String> agjson = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atype = 0,
    int32_t andims = 0,
    int32_t asrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventStart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventEnd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportDate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actors = 0,
    int32_t civAbd = 0,
    int32_t civDet = 0,
    int32_t civKIA = 0,
    int32_t civWound = 0,
    int32_t coalAbd = 0,
    int32_t coalDet = 0,
    int32_t coalKIA = 0,
    int32_t coalWound = 0,
    int32_t enemyAbd = 0,
    int32_t enemyDet = 0,
    int32_t enemyKIA = 0,
    int32_t friendlyAbd = 0,
    int32_t friendlyDet = 0,
    int32_t friendlyKIA = 0,
    int32_t friendlyWound = 0,
    int32_t hostNatAbd = 0,
    int32_t hostNatDet = 0,
    int32_t hostNatKIA = 0,
    int32_t hostNatWound = 0,
    int32_t sideAAbd = 0,
    int32_t sideADet = 0,
    int32_t sideAKIA = 0,
    int32_t sideAWound = 0,
    int32_t sideBAbd = 0,
    int32_t sideBDet = 0,
    int32_t sideBKIA = 0,
    int32_t sideBWound = 0,
    ::flatbuffers::Offset<::flatbuffers::String> target = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventDescription = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> typeOfAttack = 0,
    bool complexAttack = false,
    ::flatbuffers::Offset<::flatbuffers::String> idNumber = 0,
    int32_t confidence = 0,
    int32_t accuracy = 0,
    int32_t clarity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cameoCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cameoBaseCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cameoRootCode = 0,
    double goldstein = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> documentSource = 0,
    ::flatbuffers::Offset<::flatbuffers::String> documentFilename = 0,
    bool hasAttachment = false,
    int64_t filesize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> checksumValue = 0,
    ::flatbuffers::Offset<::flatbuffers::String> repUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> repUnitType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> repUnitActivity = 0,
    int32_t numMentions = 0,
    int32_t numSources = 0,
    int32_t numArticles = 0,
    double avgTone = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceUrl = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> relatedDocs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> summary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    SigAct_Full_dataMode_Enum dataMode = SigAct_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  SigAct_FullBuilder builder_(_fbb);
  builder_.add_avgTone(avgTone);
  builder_.add_filesize(filesize);
  builder_.add_goldstein(goldstein);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_summary(summary);
  builder_.add_relatedDocs(relatedDocs);
  builder_.add_sourceUrl(sourceUrl);
  builder_.add_numArticles(numArticles);
  builder_.add_numSources(numSources);
  builder_.add_numMentions(numMentions);
  builder_.add_repUnitActivity(repUnitActivity);
  builder_.add_repUnitType(repUnitType);
  builder_.add_repUnit(repUnit);
  builder_.add_checksumValue(checksumValue);
  builder_.add_documentFilename(documentFilename);
  builder_.add_documentSource(documentSource);
  builder_.add_cameoRootCode(cameoRootCode);
  builder_.add_cameoBaseCode(cameoBaseCode);
  builder_.add_cameoCode(cameoCode);
  builder_.add_clarity(clarity);
  builder_.add_accuracy(accuracy);
  builder_.add_confidence(confidence);
  builder_.add_idNumber(idNumber);
  builder_.add_typeOfAttack(typeOfAttack);
  builder_.add_eventType(eventType);
  builder_.add_eventDescription(eventDescription);
  builder_.add_target(target);
  builder_.add_sideBWound(sideBWound);
  builder_.add_sideBKIA(sideBKIA);
  builder_.add_sideBDet(sideBDet);
  builder_.add_sideBAbd(sideBAbd);
  builder_.add_sideAWound(sideAWound);
  builder_.add_sideAKIA(sideAKIA);
  builder_.add_sideADet(sideADet);
  builder_.add_sideAAbd(sideAAbd);
  builder_.add_hostNatWound(hostNatWound);
  builder_.add_hostNatKIA(hostNatKIA);
  builder_.add_hostNatDet(hostNatDet);
  builder_.add_hostNatAbd(hostNatAbd);
  builder_.add_friendlyWound(friendlyWound);
  builder_.add_friendlyKIA(friendlyKIA);
  builder_.add_friendlyDet(friendlyDet);
  builder_.add_friendlyAbd(friendlyAbd);
  builder_.add_enemyKIA(enemyKIA);
  builder_.add_enemyDet(enemyDet);
  builder_.add_enemyAbd(enemyAbd);
  builder_.add_coalWound(coalWound);
  builder_.add_coalKIA(coalKIA);
  builder_.add_coalDet(coalDet);
  builder_.add_coalAbd(coalAbd);
  builder_.add_civWound(civWound);
  builder_.add_civKIA(civKIA);
  builder_.add_civDet(civDet);
  builder_.add_civAbd(civAbd);
  builder_.add_actors(actors);
  builder_.add_reportDate(reportDate);
  builder_.add_eventEnd(eventEnd);
  builder_.add_eventStart(eventStart);
  builder_.add_asrid(asrid);
  builder_.add_andims(andims);
  builder_.add_atype(atype);
  builder_.add_agjson(agjson);
  builder_.add_atext(atext);
  builder_.add_area(area);
  builder_.add_theater(theater);
  builder_.add_milgrid(milgrid);
  builder_.add_province(province);
  builder_.add_district(district);
  builder_.add_city(city);
  builder_.add_countryCode(countryCode);
  builder_.add_sourceLanguage(sourceLanguage);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_hasAttachment(hasAttachment);
  builder_.add_complexAttack(complexAttack);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SigAct_Full> CreateSigAct_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *sourceLanguage = nullptr,
    const char *countryCode = nullptr,
    const char *city = nullptr,
    const char *district = nullptr,
    const char *province = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    const char *milgrid = nullptr,
    const char *theater = nullptr,
    const char *area = nullptr,
    const char *atext = nullptr,
    const char *agjson = nullptr,
    const char *atype = nullptr,
    int32_t andims = 0,
    int32_t asrid = 0,
    const char *eventStart = nullptr,
    const char *eventEnd = nullptr,
    const char *reportDate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *actors = nullptr,
    int32_t civAbd = 0,
    int32_t civDet = 0,
    int32_t civKIA = 0,
    int32_t civWound = 0,
    int32_t coalAbd = 0,
    int32_t coalDet = 0,
    int32_t coalKIA = 0,
    int32_t coalWound = 0,
    int32_t enemyAbd = 0,
    int32_t enemyDet = 0,
    int32_t enemyKIA = 0,
    int32_t friendlyAbd = 0,
    int32_t friendlyDet = 0,
    int32_t friendlyKIA = 0,
    int32_t friendlyWound = 0,
    int32_t hostNatAbd = 0,
    int32_t hostNatDet = 0,
    int32_t hostNatKIA = 0,
    int32_t hostNatWound = 0,
    int32_t sideAAbd = 0,
    int32_t sideADet = 0,
    int32_t sideAKIA = 0,
    int32_t sideAWound = 0,
    int32_t sideBAbd = 0,
    int32_t sideBDet = 0,
    int32_t sideBKIA = 0,
    int32_t sideBWound = 0,
    const char *target = nullptr,
    const char *eventDescription = nullptr,
    const char *eventType = nullptr,
    const char *typeOfAttack = nullptr,
    bool complexAttack = false,
    const char *idNumber = nullptr,
    int32_t confidence = 0,
    int32_t accuracy = 0,
    int32_t clarity = 0,
    const char *cameoCode = nullptr,
    const char *cameoBaseCode = nullptr,
    const char *cameoRootCode = nullptr,
    double goldstein = 0.0,
    const char *documentSource = nullptr,
    const char *documentFilename = nullptr,
    bool hasAttachment = false,
    int64_t filesize = 0,
    const char *checksumValue = nullptr,
    const char *repUnit = nullptr,
    const char *repUnitType = nullptr,
    const char *repUnitActivity = nullptr,
    int32_t numMentions = 0,
    int32_t numSources = 0,
    int32_t numArticles = 0,
    double avgTone = 0.0,
    const char *sourceUrl = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *relatedDocs = nullptr,
    const char *summary = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    SigAct_Full_dataMode_Enum dataMode = SigAct_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto sourceLanguage__ = sourceLanguage ? _fbb.CreateString(sourceLanguage) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto city__ = city ? _fbb.CreateString(city) : 0;
  auto district__ = district ? _fbb.CreateString(district) : 0;
  auto province__ = province ? _fbb.CreateString(province) : 0;
  auto milgrid__ = milgrid ? _fbb.CreateString(milgrid) : 0;
  auto theater__ = theater ? _fbb.CreateString(theater) : 0;
  auto area__ = area ? _fbb.CreateString(area) : 0;
  auto atext__ = atext ? _fbb.CreateString(atext) : 0;
  auto agjson__ = agjson ? _fbb.CreateString(agjson) : 0;
  auto atype__ = atype ? _fbb.CreateString(atype) : 0;
  auto eventStart__ = eventStart ? _fbb.CreateString(eventStart) : 0;
  auto eventEnd__ = eventEnd ? _fbb.CreateString(eventEnd) : 0;
  auto reportDate__ = reportDate ? _fbb.CreateString(reportDate) : 0;
  auto actors__ = actors ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*actors) : 0;
  auto target__ = target ? _fbb.CreateString(target) : 0;
  auto eventDescription__ = eventDescription ? _fbb.CreateString(eventDescription) : 0;
  auto eventType__ = eventType ? _fbb.CreateString(eventType) : 0;
  auto typeOfAttack__ = typeOfAttack ? _fbb.CreateString(typeOfAttack) : 0;
  auto idNumber__ = idNumber ? _fbb.CreateString(idNumber) : 0;
  auto cameoCode__ = cameoCode ? _fbb.CreateString(cameoCode) : 0;
  auto cameoBaseCode__ = cameoBaseCode ? _fbb.CreateString(cameoBaseCode) : 0;
  auto cameoRootCode__ = cameoRootCode ? _fbb.CreateString(cameoRootCode) : 0;
  auto documentSource__ = documentSource ? _fbb.CreateString(documentSource) : 0;
  auto documentFilename__ = documentFilename ? _fbb.CreateString(documentFilename) : 0;
  auto checksumValue__ = checksumValue ? _fbb.CreateString(checksumValue) : 0;
  auto repUnit__ = repUnit ? _fbb.CreateString(repUnit) : 0;
  auto repUnitType__ = repUnitType ? _fbb.CreateString(repUnitType) : 0;
  auto repUnitActivity__ = repUnitActivity ? _fbb.CreateString(repUnitActivity) : 0;
  auto sourceUrl__ = sourceUrl ? _fbb.CreateString(sourceUrl) : 0;
  auto relatedDocs__ = relatedDocs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*relatedDocs) : 0;
  auto summary__ = summary ? _fbb.CreateString(summary) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSigAct_Full(
      _fbb,
      id__,
      classificationMarking__,
      sourceLanguage__,
      countryCode__,
      city__,
      district__,
      province__,
      lat,
      lon,
      milgrid__,
      theater__,
      area__,
      atext__,
      agjson__,
      atype__,
      andims,
      asrid,
      eventStart__,
      eventEnd__,
      reportDate__,
      actors__,
      civAbd,
      civDet,
      civKIA,
      civWound,
      coalAbd,
      coalDet,
      coalKIA,
      coalWound,
      enemyAbd,
      enemyDet,
      enemyKIA,
      friendlyAbd,
      friendlyDet,
      friendlyKIA,
      friendlyWound,
      hostNatAbd,
      hostNatDet,
      hostNatKIA,
      hostNatWound,
      sideAAbd,
      sideADet,
      sideAKIA,
      sideAWound,
      sideBAbd,
      sideBDet,
      sideBKIA,
      sideBWound,
      target__,
      eventDescription__,
      eventType__,
      typeOfAttack__,
      complexAttack,
      idNumber__,
      confidence,
      accuracy,
      clarity,
      cameoCode__,
      cameoBaseCode__,
      cameoRootCode__,
      goldstein,
      documentSource__,
      documentFilename__,
      hasAttachment,
      filesize,
      checksumValue__,
      repUnit__,
      repUnitType__,
      repUnitActivity__,
      numMentions,
      numSources,
      numArticles,
      avgTone,
      sourceUrl__,
      relatedDocs__,
      summary__,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const SigAct_Full *GetSigAct_Full(const void *buf) {
  return ::flatbuffers::GetRoot<SigAct_Full>(buf);
}

inline const SigAct_Full *GetSizePrefixedSigAct_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SigAct_Full>(buf);
}

inline const char *SigAct_FullIdentifier() {
  return "SIGA";
}

inline bool SigAct_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SigAct_FullIdentifier());
}

inline bool SizePrefixedSigAct_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SigAct_FullIdentifier(), true);
}

inline bool VerifySigAct_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SigAct_Full>(SigAct_FullIdentifier());
}

inline bool VerifySizePrefixedSigAct_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SigAct_Full>(SigAct_FullIdentifier());
}

inline void FinishSigAct_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SigAct_Full> root) {
  fbb.Finish(root, SigAct_FullIdentifier());
}

inline void FinishSizePrefixedSigAct_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SigAct_Full> root) {
  fbb.FinishSizePrefixed(root, SigAct_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
