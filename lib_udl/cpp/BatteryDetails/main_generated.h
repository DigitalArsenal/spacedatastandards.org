// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct BatteryDetails;
struct BatteryDetailsBuilder;

enum BatteryDetails_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  BatteryDetails_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  BatteryDetails_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  BatteryDetails_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  BatteryDetails_dataMode_Enum_EXERCISE = 3,
  BatteryDetails_dataMode_Enum_MIN = BatteryDetails_dataMode_Enum_REAL,
  BatteryDetails_dataMode_Enum_MAX = BatteryDetails_dataMode_Enum_EXERCISE
};

inline const BatteryDetails_dataMode_Enum (&EnumValuesBatteryDetails_dataMode_Enum())[4] {
  static const BatteryDetails_dataMode_Enum values[] = {
    BatteryDetails_dataMode_Enum_REAL,
    BatteryDetails_dataMode_Enum_TEST,
    BatteryDetails_dataMode_Enum_SIMULATED,
    BatteryDetails_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesBatteryDetails_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameBatteryDetails_dataMode_Enum(BatteryDetails_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, BatteryDetails_dataMode_Enum_REAL, BatteryDetails_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBatteryDetails_dataMode_Enum()[index];
}

/// /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
struct BatteryDetails FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BatteryDetailsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDBATTERY = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_TECHNOLOGY = 10,
    VT_CAPACITY = 12,
    VT_DISCHARGEDEPTH = 14,
    VT_MODEL = 16,
    VT_DESCRIPTION = 18,
    VT_MANUFACTURERORGID = 20,
    VT_CREATEDAT = 22,
    VT_CREATEDBY = 24,
    VT_UPDATEDAT = 26,
    VT_UPDATEDBY = 28,
    VT_SOURCE = 30,
    VT_ORIGIN = 32,
    VT_ORIGNETWORK = 34,
    VT_DATAMODE = 36,
    VT_TAGS = 38,
    VT_MANUFACTURERORG = 40
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BATTERYDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Identifier of the parent battery type record.
  /// Example: /// Example: BATTERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idBattery() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDBATTERY);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
  /// Example: /// Example: Ni-Cd
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *technology() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TECHNOLOGY);
  }
  /// Battery capacity in Ah.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double capacity() const {
    return GetField<double>(VT_CAPACITY, 0.0);
  }
  /// Depth of discharge as a percentage/fraction.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  double dischargeDepth() const {
    return GetField<double>(VT_DISCHARGEDEPTH, 0.0);
  }
  /// Battery model number or name.
  /// Example: /// Example: 11212
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *model() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODEL);
  }
  /// Battery description/notes.
  /// Example: /// Example: example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// ID of the organization that manufactures the battery.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  BatteryDetails_dataMode_Enum dataMode() const {
    return static_cast<BatteryDetails_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *manufacturerOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDBATTERY) &&
           verifier.VerifyString(idBattery()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TECHNOLOGY) &&
           verifier.VerifyString(technology()) &&
           VerifyField<double>(verifier, VT_CAPACITY, 8) &&
           VerifyField<double>(verifier, VT_DISCHARGEDEPTH, 8) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.VerifyString(model()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORG) &&
           verifier.VerifyString(manufacturerOrg()) &&
           verifier.EndTable();
  }
};

struct BatteryDetailsBuilder {
  typedef BatteryDetails Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(BatteryDetails::VT_ID, id);
  }
  void add_idBattery(::flatbuffers::Offset<::flatbuffers::String> idBattery) {
    fbb_.AddOffset(BatteryDetails::VT_IDBATTERY, idBattery);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(BatteryDetails::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_technology(::flatbuffers::Offset<::flatbuffers::String> technology) {
    fbb_.AddOffset(BatteryDetails::VT_TECHNOLOGY, technology);
  }
  void add_capacity(double capacity) {
    fbb_.AddElement<double>(BatteryDetails::VT_CAPACITY, capacity, 0.0);
  }
  void add_dischargeDepth(double dischargeDepth) {
    fbb_.AddElement<double>(BatteryDetails::VT_DISCHARGEDEPTH, dischargeDepth, 0.0);
  }
  void add_model(::flatbuffers::Offset<::flatbuffers::String> model) {
    fbb_.AddOffset(BatteryDetails::VT_MODEL, model);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(BatteryDetails::VT_DESCRIPTION, description);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(BatteryDetails::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(BatteryDetails::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(BatteryDetails::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(BatteryDetails::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(BatteryDetails::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(BatteryDetails::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(BatteryDetails::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(BatteryDetails::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(BatteryDetails_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(BatteryDetails::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(BatteryDetails::VT_TAGS, tags);
  }
  void add_manufacturerOrg(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg) {
    fbb_.AddOffset(BatteryDetails::VT_MANUFACTURERORG, manufacturerOrg);
  }
  explicit BatteryDetailsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BatteryDetails> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BatteryDetails>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BatteryDetails> CreateBatteryDetails(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idBattery = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> technology = 0,
    double capacity = 0.0,
    double dischargeDepth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> model = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    BatteryDetails_dataMode_Enum dataMode = BatteryDetails_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg = 0) {
  BatteryDetailsBuilder builder_(_fbb);
  builder_.add_dischargeDepth(dischargeDepth);
  builder_.add_capacity(capacity);
  builder_.add_manufacturerOrg(manufacturerOrg);
  builder_.add_tags(tags);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_description(description);
  builder_.add_model(model);
  builder_.add_technology(technology);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idBattery(idBattery);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BatteryDetails> CreateBatteryDetailsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idBattery = nullptr,
    const char *classificationMarking = nullptr,
    const char *technology = nullptr,
    double capacity = 0.0,
    double dischargeDepth = 0.0,
    const char *model = nullptr,
    const char *description = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    BatteryDetails_dataMode_Enum dataMode = BatteryDetails_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *manufacturerOrg = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idBattery__ = idBattery ? _fbb.CreateString(idBattery) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto technology__ = technology ? _fbb.CreateString(technology) : 0;
  auto model__ = model ? _fbb.CreateString(model) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto manufacturerOrg__ = manufacturerOrg ? _fbb.CreateString(manufacturerOrg) : 0;
  return CreateBatteryDetails(
      _fbb,
      id__,
      idBattery__,
      classificationMarking__,
      technology__,
      capacity,
      dischargeDepth,
      model__,
      description__,
      manufacturerOrgId__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      tags__,
      manufacturerOrg__);
}

inline const BatteryDetails *GetBatteryDetails(const void *buf) {
  return ::flatbuffers::GetRoot<BatteryDetails>(buf);
}

inline const BatteryDetails *GetSizePrefixedBatteryDetails(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BatteryDetails>(buf);
}

inline const char *BatteryDetailsIdentifier() {
  return "BATT";
}

inline bool BatteryDetailsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BatteryDetailsIdentifier());
}

inline bool SizePrefixedBatteryDetailsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BatteryDetailsIdentifier(), true);
}

inline bool VerifyBatteryDetailsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BatteryDetails>(BatteryDetailsIdentifier());
}

inline bool VerifySizePrefixedBatteryDetailsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BatteryDetails>(BatteryDetailsIdentifier());
}

inline void FinishBatteryDetailsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BatteryDetails> root) {
  fbb.Finish(root, BatteryDetailsIdentifier());
}

inline void FinishSizePrefixedBatteryDetailsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BatteryDetails> root) {
  fbb.FinishSizePrefixed(root, BatteryDetailsIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
