// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionTransit_Full;
struct ISRCollectionTransit_FullBuilder;

/// /// Object for data dissemination.
struct ISRCollectionTransit_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionTransit_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_BASE = 6,
    VT_DURATION = 8
  };
  /// Transit Unique Identifier.
  /// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Military Base to transmit the dissemination of this data.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *base() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASE);
  }
  /// Length of mission in milliseconds.
  /// Example: /// Example: 200.23
  /// Constraints: No constraints specified.
  double duration() const {
    return GetField<double>(VT_DURATION, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyString(base()) &&
           VerifyField<double>(verifier, VT_DURATION, 8) &&
           verifier.EndTable();
  }
};

struct ISRCollectionTransit_FullBuilder {
  typedef ISRCollectionTransit_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ISRCollectionTransit_Full::VT_ID, id);
  }
  void add_base(::flatbuffers::Offset<::flatbuffers::String> base) {
    fbb_.AddOffset(ISRCollectionTransit_Full::VT_BASE, base);
  }
  void add_duration(double duration) {
    fbb_.AddElement<double>(ISRCollectionTransit_Full::VT_DURATION, duration, 0.0);
  }
  explicit ISRCollectionTransit_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionTransit_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionTransit_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionTransit_Full> CreateISRCollectionTransit_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> base = 0,
    double duration = 0.0) {
  ISRCollectionTransit_FullBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_base(base);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionTransit_Full> CreateISRCollectionTransit_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *base = nullptr,
    double duration = 0.0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto base__ = base ? _fbb.CreateString(base) : 0;
  return CreateISRCollectionTransit_Full(
      _fbb,
      id__,
      base__,
      duration);
}

inline const ISRCollectionTransit_Full *GetISRCollectionTransit_Full(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionTransit_Full>(buf);
}

inline const ISRCollectionTransit_Full *GetSizePrefixedISRCollectionTransit_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionTransit_Full>(buf);
}

inline const char *ISRCollectionTransit_FullIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionTransit_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionTransit_FullIdentifier());
}

inline bool SizePrefixedISRCollectionTransit_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionTransit_FullIdentifier(), true);
}

inline bool VerifyISRCollectionTransit_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionTransit_Full>(ISRCollectionTransit_FullIdentifier());
}

inline bool VerifySizePrefixedISRCollectionTransit_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionTransit_Full>(ISRCollectionTransit_FullIdentifier());
}

inline void FinishISRCollectionTransit_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionTransit_Full> root) {
  fbb.Finish(root, ISRCollectionTransit_FullIdentifier());
}

inline void FinishSizePrefixedISRCollectionTransit_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionTransit_Full> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionTransit_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
