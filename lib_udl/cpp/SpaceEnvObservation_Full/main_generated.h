// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SpaceEnvObservation_Full;
struct SpaceEnvObservation_FullBuilder;

enum SpaceEnvObservation_Full_senReferenceFrame_Enum : int8_t {
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000 = 0,
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_EFG_TDR = 1,
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_ECR_ECEF = 2,
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_TEME = 3,
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_ITRF = 4,
  /// No description available.
  SpaceEnvObservation_Full_senReferenceFrame_Enum_GCRF = 5,
  SpaceEnvObservation_Full_senReferenceFrame_Enum_MIN = SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000,
  SpaceEnvObservation_Full_senReferenceFrame_Enum_MAX = SpaceEnvObservation_Full_senReferenceFrame_Enum_GCRF
};

inline const SpaceEnvObservation_Full_senReferenceFrame_Enum (&EnumValuesSpaceEnvObservation_Full_senReferenceFrame_Enum())[6] {
  static const SpaceEnvObservation_Full_senReferenceFrame_Enum values[] = {
    SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000,
    SpaceEnvObservation_Full_senReferenceFrame_Enum_EFG_TDR,
    SpaceEnvObservation_Full_senReferenceFrame_Enum_ECR_ECEF,
    SpaceEnvObservation_Full_senReferenceFrame_Enum_TEME,
    SpaceEnvObservation_Full_senReferenceFrame_Enum_ITRF,
    SpaceEnvObservation_Full_senReferenceFrame_Enum_GCRF
  };
  return values;
}

inline const char * const *EnumNamesSpaceEnvObservation_Full_senReferenceFrame_Enum() {
  static const char * const names[7] = {
    "J2000",
    "EFG_TDR",
    "ECR_ECEF",
    "TEME",
    "ITRF",
    "GCRF",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpaceEnvObservation_Full_senReferenceFrame_Enum(SpaceEnvObservation_Full_senReferenceFrame_Enum e) {
  if (::flatbuffers::IsOutRange(e, SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000, SpaceEnvObservation_Full_senReferenceFrame_Enum_GCRF)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpaceEnvObservation_Full_senReferenceFrame_Enum()[index];
}

enum SpaceEnvObservation_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SpaceEnvObservation_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SpaceEnvObservation_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SpaceEnvObservation_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SpaceEnvObservation_Full_dataMode_Enum_EXERCISE = 3,
  SpaceEnvObservation_Full_dataMode_Enum_MIN = SpaceEnvObservation_Full_dataMode_Enum_REAL,
  SpaceEnvObservation_Full_dataMode_Enum_MAX = SpaceEnvObservation_Full_dataMode_Enum_EXERCISE
};

inline const SpaceEnvObservation_Full_dataMode_Enum (&EnumValuesSpaceEnvObservation_Full_dataMode_Enum())[4] {
  static const SpaceEnvObservation_Full_dataMode_Enum values[] = {
    SpaceEnvObservation_Full_dataMode_Enum_REAL,
    SpaceEnvObservation_Full_dataMode_Enum_TEST,
    SpaceEnvObservation_Full_dataMode_Enum_SIMULATED,
    SpaceEnvObservation_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSpaceEnvObservation_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSpaceEnvObservation_Full_dataMode_Enum(SpaceEnvObservation_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SpaceEnvObservation_Full_dataMode_Enum_REAL, SpaceEnvObservation_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSpaceEnvObservation_Full_dataMode_Enum()[index];
}

/// /// SpaceEnvObservation data.
struct SpaceEnvObservation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SpaceEnvObservation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_MSGTYPE = 8,
    VT_GENSYSTEM = 10,
    VT_EXTERNALID = 12,
    VT_DATATYPE = 14,
    VT_GENTIME = 16,
    VT_FORECAST = 18,
    VT_DERIVED = 20,
    VT_IDONORBIT = 22,
    VT_SATNO = 24,
    VT_ORIGOBJECTID = 26,
    VT_IDSENSOR = 28,
    VT_ORIGSENSORID = 30,
    VT_OBSERVATORYTYPE = 32,
    VT_OBSERVATORYNAME = 34,
    VT_OBSERVATORYNOTES = 36,
    VT_INSTRUMENTTYPE = 38,
    VT_LAT = 40,
    VT_LON = 42,
    VT_ALT = 44,
    VT_SENREFERENCEFRAME = 46,
    VT_SENPOS = 48,
    VT_SENVEL = 50,
    VT_MEASTYPE = 52,
    VT_SENENERGYLEVEL = 54,
    VT_OBSETID = 56,
    VT_PARTICLETYPE = 58,
    VT_OBTIME = 60,
    VT_SEOLIST = 62,
    VT_QUALITY = 64,
    VT_DESCRIPTION = 66,
    VT_DESCRIPTOR = 68,
    VT_SRCTYPS = 70,
    VT_SRCIDS = 72,
    VT_CREATEDAT = 74,
    VT_CREATEDBY = 76,
    VT_SOURCE = 78,
    VT_ORIGIN = 80,
    VT_DATAMODE = 82,
    VT_ORIGNETWORK = 84
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The type of message associated with this record.
  /// Example: /// Example: SODM
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *msgType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTYPE);
  }
  /// The external system which generated the message, if applicable.
  /// Example: /// Example: System Name
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *genSystem() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENSYSTEM);
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
  /// Example: /// Example: ECP
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *dataType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATATYPE);
  }
  /// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-02-10T19:48:09.934Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *genTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENTIME);
  }
  /// Flag indicating that this record contains forecast data.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool forecast() const {
    return GetField<uint8_t>(VT_FORECAST, 0) != 0;
  }
  /// Flag indicating that this record contains derived data.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool derived() const {
    return GetField<uint8_t>(VT_DERIVED, 0) != 0;
  }
  /// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
  /// Example: /// Example: ONORBIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *observatoryType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSERVATORYTYPE);
  }
  /// The name of the observatory from which this data was collected.
  /// Example: /// Example: GOES-16
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *observatoryName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSERVATORYNAME);
  }
  /// Additional notes concerning the observatory.
  /// Example: /// Example: Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *observatoryNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSERVATORYNOTES);
  }
  /// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
  /// Example: /// Example: MAGNETOMETER
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *instrumentType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENTTYPE);
  }
  /// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.8339
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.8214
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 35785.3732
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame() const {
    return static_cast<SpaceEnvObservation_Full_senReferenceFrame_Enum>(GetField<int8_t>(VT_SENREFERENCEFRAME, 0));
  }
  /// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
  /// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *senPos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENPOS);
  }
  /// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
  /// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *senVel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENVEL);
  }
  /// The sensor measurement type of the observation data contained in this record.
  /// Example: /// Example: ENERGETIC PARTICLES
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *measType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEASTYPE);
  }
  /// The energy level bin of the sensor associated with this measurement.
  /// Example: /// Example: 0500-700 keV
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *senEnergyLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENENERGYLEVEL);
  }
  /// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
  /// Example: /// Example: ECPOBSET-478125
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *obSetId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSETID);
  }
  /// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
  /// Example: /// Example: PROTON
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *particleType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTICLETYPE);
  }
  /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// A collection of individual space environment observations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *seoList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SEOLIST);
  }
  /// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *quality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUALITY);
  }
  /// Descriptive or additional information associated with this observation record.
  /// Example: /// Example: Observation Data Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: energetic charged particle
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SPACEENVOB', 'SGI']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SpaceEnvObservation_Full_dataMode_Enum dataMode() const {
    return static_cast<SpaceEnvObservation_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_MSGTYPE) &&
           verifier.VerifyString(msgType()) &&
           VerifyOffset(verifier, VT_GENSYSTEM) &&
           verifier.VerifyString(genSystem()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_DATATYPE) &&
           verifier.VerifyString(dataType()) &&
           VerifyOffset(verifier, VT_GENTIME) &&
           verifier.VerifyString(genTime()) &&
           VerifyField<uint8_t>(verifier, VT_FORECAST, 1) &&
           VerifyField<uint8_t>(verifier, VT_DERIVED, 1) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_OBSERVATORYTYPE) &&
           verifier.VerifyString(observatoryType()) &&
           VerifyOffset(verifier, VT_OBSERVATORYNAME) &&
           verifier.VerifyString(observatoryName()) &&
           VerifyOffset(verifier, VT_OBSERVATORYNOTES) &&
           verifier.VerifyString(observatoryNotes()) &&
           VerifyOffset(verifier, VT_INSTRUMENTTYPE) &&
           verifier.VerifyString(instrumentType()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyField<int8_t>(verifier, VT_SENREFERENCEFRAME, 1) &&
           VerifyOffset(verifier, VT_SENPOS) &&
           verifier.VerifyVector(senPos()) &&
           verifier.VerifyVectorOfStrings(senPos()) &&
           VerifyOffset(verifier, VT_SENVEL) &&
           verifier.VerifyVector(senVel()) &&
           verifier.VerifyVectorOfStrings(senVel()) &&
           VerifyOffset(verifier, VT_MEASTYPE) &&
           verifier.VerifyString(measType()) &&
           VerifyOffset(verifier, VT_SENENERGYLEVEL) &&
           verifier.VerifyString(senEnergyLevel()) &&
           VerifyOffset(verifier, VT_OBSETID) &&
           verifier.VerifyString(obSetId()) &&
           VerifyOffset(verifier, VT_PARTICLETYPE) &&
           verifier.VerifyString(particleType()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyOffset(verifier, VT_SEOLIST) &&
           verifier.VerifyVector(seoList()) &&
           verifier.VerifyVectorOfStrings(seoList()) &&
           VerifyOffset(verifier, VT_QUALITY) &&
           verifier.VerifyString(quality()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct SpaceEnvObservation_FullBuilder {
  typedef SpaceEnvObservation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_msgType(::flatbuffers::Offset<::flatbuffers::String> msgType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_MSGTYPE, msgType);
  }
  void add_genSystem(::flatbuffers::Offset<::flatbuffers::String> genSystem) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_GENSYSTEM, genSystem);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_EXTERNALID, externalId);
  }
  void add_dataType(::flatbuffers::Offset<::flatbuffers::String> dataType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_DATATYPE, dataType);
  }
  void add_genTime(::flatbuffers::Offset<::flatbuffers::String> genTime) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_GENTIME, genTime);
  }
  void add_forecast(bool forecast) {
    fbb_.AddElement<uint8_t>(SpaceEnvObservation_Full::VT_FORECAST, static_cast<uint8_t>(forecast), 0);
  }
  void add_derived(bool derived) {
    fbb_.AddElement<uint8_t>(SpaceEnvObservation_Full::VT_DERIVED, static_cast<uint8_t>(derived), 0);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(SpaceEnvObservation_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_ORIGSENSORID, origSensorId);
  }
  void add_observatoryType(::flatbuffers::Offset<::flatbuffers::String> observatoryType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_OBSERVATORYTYPE, observatoryType);
  }
  void add_observatoryName(::flatbuffers::Offset<::flatbuffers::String> observatoryName) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_OBSERVATORYNAME, observatoryName);
  }
  void add_observatoryNotes(::flatbuffers::Offset<::flatbuffers::String> observatoryNotes) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_OBSERVATORYNOTES, observatoryNotes);
  }
  void add_instrumentType(::flatbuffers::Offset<::flatbuffers::String> instrumentType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_INSTRUMENTTYPE, instrumentType);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(SpaceEnvObservation_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(SpaceEnvObservation_Full::VT_LON, lon, 0.0);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(SpaceEnvObservation_Full::VT_ALT, alt, 0.0);
  }
  void add_senReferenceFrame(SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame) {
    fbb_.AddElement<int8_t>(SpaceEnvObservation_Full::VT_SENREFERENCEFRAME, static_cast<int8_t>(senReferenceFrame), 0);
  }
  void add_senPos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senPos) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SENPOS, senPos);
  }
  void add_senVel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senVel) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SENVEL, senVel);
  }
  void add_measType(::flatbuffers::Offset<::flatbuffers::String> measType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_MEASTYPE, measType);
  }
  void add_senEnergyLevel(::flatbuffers::Offset<::flatbuffers::String> senEnergyLevel) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SENENERGYLEVEL, senEnergyLevel);
  }
  void add_obSetId(::flatbuffers::Offset<::flatbuffers::String> obSetId) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_OBSETID, obSetId);
  }
  void add_particleType(::flatbuffers::Offset<::flatbuffers::String> particleType) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_PARTICLETYPE, particleType);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_OBTIME, obTime);
  }
  void add_seoList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seoList) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SEOLIST, seoList);
  }
  void add_quality(::flatbuffers::Offset<::flatbuffers::String> quality) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_QUALITY, quality);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_DESCRIPTION, description);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_DESCRIPTOR, descriptor);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SRCIDS, srcIds);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(SpaceEnvObservation_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SpaceEnvObservation_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SpaceEnvObservation_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit SpaceEnvObservation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SpaceEnvObservation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SpaceEnvObservation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SpaceEnvObservation_Full> CreateSpaceEnvObservation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> genSystem = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dataType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> genTime = 0,
    bool forecast = false,
    bool derived = false,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> observatoryType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> observatoryName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> observatoryNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrumentType = 0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame = SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senPos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senVel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> measType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> senEnergyLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obSetId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> particleType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> seoList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> quality = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    SpaceEnvObservation_Full_dataMode_Enum dataMode = SpaceEnvObservation_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  SpaceEnvObservation_FullBuilder builder_(_fbb);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_descriptor(descriptor);
  builder_.add_description(description);
  builder_.add_quality(quality);
  builder_.add_seoList(seoList);
  builder_.add_obTime(obTime);
  builder_.add_particleType(particleType);
  builder_.add_obSetId(obSetId);
  builder_.add_senEnergyLevel(senEnergyLevel);
  builder_.add_measType(measType);
  builder_.add_senVel(senVel);
  builder_.add_senPos(senPos);
  builder_.add_instrumentType(instrumentType);
  builder_.add_observatoryNotes(observatoryNotes);
  builder_.add_observatoryName(observatoryName);
  builder_.add_observatoryType(observatoryType);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_genTime(genTime);
  builder_.add_dataType(dataType);
  builder_.add_externalId(externalId);
  builder_.add_genSystem(genSystem);
  builder_.add_msgType(msgType);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_senReferenceFrame(senReferenceFrame);
  builder_.add_derived(derived);
  builder_.add_forecast(forecast);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SpaceEnvObservation_Full> CreateSpaceEnvObservation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *msgType = nullptr,
    const char *genSystem = nullptr,
    const char *externalId = nullptr,
    const char *dataType = nullptr,
    const char *genTime = nullptr,
    bool forecast = false,
    bool derived = false,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *observatoryType = nullptr,
    const char *observatoryName = nullptr,
    const char *observatoryNotes = nullptr,
    const char *instrumentType = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    SpaceEnvObservation_Full_senReferenceFrame_Enum senReferenceFrame = SpaceEnvObservation_Full_senReferenceFrame_Enum_J2000,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *senPos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *senVel = nullptr,
    const char *measType = nullptr,
    const char *senEnergyLevel = nullptr,
    const char *obSetId = nullptr,
    const char *particleType = nullptr,
    const char *obTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *seoList = nullptr,
    const char *quality = nullptr,
    const char *description = nullptr,
    const char *descriptor = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    SpaceEnvObservation_Full_dataMode_Enum dataMode = SpaceEnvObservation_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto msgType__ = msgType ? _fbb.CreateString(msgType) : 0;
  auto genSystem__ = genSystem ? _fbb.CreateString(genSystem) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto dataType__ = dataType ? _fbb.CreateString(dataType) : 0;
  auto genTime__ = genTime ? _fbb.CreateString(genTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto observatoryType__ = observatoryType ? _fbb.CreateString(observatoryType) : 0;
  auto observatoryName__ = observatoryName ? _fbb.CreateString(observatoryName) : 0;
  auto observatoryNotes__ = observatoryNotes ? _fbb.CreateString(observatoryNotes) : 0;
  auto instrumentType__ = instrumentType ? _fbb.CreateString(instrumentType) : 0;
  auto senPos__ = senPos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*senPos) : 0;
  auto senVel__ = senVel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*senVel) : 0;
  auto measType__ = measType ? _fbb.CreateString(measType) : 0;
  auto senEnergyLevel__ = senEnergyLevel ? _fbb.CreateString(senEnergyLevel) : 0;
  auto obSetId__ = obSetId ? _fbb.CreateString(obSetId) : 0;
  auto particleType__ = particleType ? _fbb.CreateString(particleType) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto seoList__ = seoList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*seoList) : 0;
  auto quality__ = quality ? _fbb.CreateString(quality) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSpaceEnvObservation_Full(
      _fbb,
      id__,
      classificationMarking__,
      msgType__,
      genSystem__,
      externalId__,
      dataType__,
      genTime__,
      forecast,
      derived,
      idOnOrbit__,
      satNo,
      origObjectId__,
      idSensor__,
      origSensorId__,
      observatoryType__,
      observatoryName__,
      observatoryNotes__,
      instrumentType__,
      lat,
      lon,
      alt,
      senReferenceFrame,
      senPos__,
      senVel__,
      measType__,
      senEnergyLevel__,
      obSetId__,
      particleType__,
      obTime__,
      seoList__,
      quality__,
      description__,
      descriptor__,
      srcTyps__,
      srcIds__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const SpaceEnvObservation_Full *GetSpaceEnvObservation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<SpaceEnvObservation_Full>(buf);
}

inline const SpaceEnvObservation_Full *GetSizePrefixedSpaceEnvObservation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SpaceEnvObservation_Full>(buf);
}

inline const char *SpaceEnvObservation_FullIdentifier() {
  return "SPAC";
}

inline bool SpaceEnvObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SpaceEnvObservation_FullIdentifier());
}

inline bool SizePrefixedSpaceEnvObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SpaceEnvObservation_FullIdentifier(), true);
}

inline bool VerifySpaceEnvObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SpaceEnvObservation_Full>(SpaceEnvObservation_FullIdentifier());
}

inline bool VerifySizePrefixedSpaceEnvObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SpaceEnvObservation_Full>(SpaceEnvObservation_FullIdentifier());
}

inline void FinishSpaceEnvObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpaceEnvObservation_Full> root) {
  fbb.Finish(root, SpaceEnvObservation_FullIdentifier());
}

inline void FinishSizePrefixedSpaceEnvObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SpaceEnvObservation_Full> root) {
  fbb.FinishSizePrefixed(root, SpaceEnvObservation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
