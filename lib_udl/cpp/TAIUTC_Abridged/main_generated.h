// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct TAIUTC_Abridged;
struct TAIUTC_AbridgedBuilder;

enum TAIUTC_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  TAIUTC_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  TAIUTC_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  TAIUTC_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  TAIUTC_Abridged_dataMode_Enum_EXERCISE = 3,
  TAIUTC_Abridged_dataMode_Enum_MIN = TAIUTC_Abridged_dataMode_Enum_REAL,
  TAIUTC_Abridged_dataMode_Enum_MAX = TAIUTC_Abridged_dataMode_Enum_EXERCISE
};

inline const TAIUTC_Abridged_dataMode_Enum (&EnumValuesTAIUTC_Abridged_dataMode_Enum())[4] {
  static const TAIUTC_Abridged_dataMode_Enum values[] = {
    TAIUTC_Abridged_dataMode_Enum_REAL,
    TAIUTC_Abridged_dataMode_Enum_TEST,
    TAIUTC_Abridged_dataMode_Enum_SIMULATED,
    TAIUTC_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesTAIUTC_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameTAIUTC_Abridged_dataMode_Enum(TAIUTC_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, TAIUTC_Abridged_dataMode_Enum_REAL, TAIUTC_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTAIUTC_Abridged_dataMode_Enum()[index];
}

/// /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
/// Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
/// The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
struct TAIUTC_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TAIUTC_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ADJUSTMENTDATE = 8,
    VT_TAIUTC = 10,
    VT_MULTIPLICATIONFACTOR = 12,
    VT_RAWFILEURI = 14,
    VT_SOURCE = 16,
    VT_ORIGIN = 18,
    VT_ORIGNETWORK = 20,
    VT_DATAMODE = 22,
    VT_CREATEDAT = 24,
    VT_CREATEDBY = 26
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TAIUTC-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Effective date/time for the leap second adjustment.
  /// Example: /// Example: 2017-01-01T00:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *adjustmentDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADJUSTMENTDATE);
  }
  /// Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
  /// Example: /// Example: 1.422818
  /// Constraints: No constraints specified.
  double taiUTC() const {
    return GetField<double>(VT_TAIUTC, 0.0);
  }
  /// Multiplication factor of the leap second adjustment.
  /// Example: /// Example: 0.001296
  /// Constraints: No constraints specified.
  double multiplicationFactor() const {
    return GetField<double>(VT_MULTIPLICATIONFACTOR, 0.0);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  TAIUTC_Abridged_dataMode_Enum dataMode() const {
    return static_cast<TAIUTC_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ADJUSTMENTDATE) &&
           verifier.VerifyString(adjustmentDate()) &&
           VerifyField<double>(verifier, VT_TAIUTC, 8) &&
           VerifyField<double>(verifier, VT_MULTIPLICATIONFACTOR, 8) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct TAIUTC_AbridgedBuilder {
  typedef TAIUTC_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_adjustmentDate(::flatbuffers::Offset<::flatbuffers::String> adjustmentDate) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_ADJUSTMENTDATE, adjustmentDate);
  }
  void add_taiUTC(double taiUTC) {
    fbb_.AddElement<double>(TAIUTC_Abridged::VT_TAIUTC, taiUTC, 0.0);
  }
  void add_multiplicationFactor(double multiplicationFactor) {
    fbb_.AddElement<double>(TAIUTC_Abridged::VT_MULTIPLICATIONFACTOR, multiplicationFactor, 0.0);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(TAIUTC_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(TAIUTC_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(TAIUTC_Abridged::VT_CREATEDBY, createdBy);
  }
  explicit TAIUTC_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TAIUTC_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TAIUTC_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TAIUTC_Abridged> CreateTAIUTC_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> adjustmentDate = 0,
    double taiUTC = 0.0,
    double multiplicationFactor = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    TAIUTC_Abridged_dataMode_Enum dataMode = TAIUTC_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  TAIUTC_AbridgedBuilder builder_(_fbb);
  builder_.add_multiplicationFactor(multiplicationFactor);
  builder_.add_taiUTC(taiUTC);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_adjustmentDate(adjustmentDate);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TAIUTC_Abridged> CreateTAIUTC_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *adjustmentDate = nullptr,
    double taiUTC = 0.0,
    double multiplicationFactor = 0.0,
    const char *rawFileURI = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    TAIUTC_Abridged_dataMode_Enum dataMode = TAIUTC_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto adjustmentDate__ = adjustmentDate ? _fbb.CreateString(adjustmentDate) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateTAIUTC_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      adjustmentDate__,
      taiUTC,
      multiplicationFactor,
      rawFileURI__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const TAIUTC_Abridged *GetTAIUTC_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<TAIUTC_Abridged>(buf);
}

inline const TAIUTC_Abridged *GetSizePrefixedTAIUTC_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TAIUTC_Abridged>(buf);
}

inline const char *TAIUTC_AbridgedIdentifier() {
  return "TAIU";
}

inline bool TAIUTC_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TAIUTC_AbridgedIdentifier());
}

inline bool SizePrefixedTAIUTC_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TAIUTC_AbridgedIdentifier(), true);
}

inline bool VerifyTAIUTC_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TAIUTC_Abridged>(TAIUTC_AbridgedIdentifier());
}

inline bool VerifySizePrefixedTAIUTC_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TAIUTC_Abridged>(TAIUTC_AbridgedIdentifier());
}

inline void FinishTAIUTC_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TAIUTC_Abridged> root) {
  fbb.Finish(root, TAIUTC_AbridgedIdentifier());
}

inline void FinishSizePrefixedTAIUTC_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TAIUTC_Abridged> root) {
  fbb.FinishSizePrefixed(root, TAIUTC_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
