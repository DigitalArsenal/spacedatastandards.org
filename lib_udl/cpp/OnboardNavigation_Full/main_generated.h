// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnboardNavigation_Full;
struct OnboardNavigation_FullBuilder;

enum OnboardNavigation_Full_referenceFrame_Enum : int8_t {
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_J2000 = 0,
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_EFG_TDR = 1,
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_ECR_ECEF = 2,
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_TEME = 3,
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_ITRF = 4,
  /// No description available.
  OnboardNavigation_Full_referenceFrame_Enum_GCRF = 5,
  OnboardNavigation_Full_referenceFrame_Enum_MIN = OnboardNavigation_Full_referenceFrame_Enum_J2000,
  OnboardNavigation_Full_referenceFrame_Enum_MAX = OnboardNavigation_Full_referenceFrame_Enum_GCRF
};

inline const OnboardNavigation_Full_referenceFrame_Enum (&EnumValuesOnboardNavigation_Full_referenceFrame_Enum())[6] {
  static const OnboardNavigation_Full_referenceFrame_Enum values[] = {
    OnboardNavigation_Full_referenceFrame_Enum_J2000,
    OnboardNavigation_Full_referenceFrame_Enum_EFG_TDR,
    OnboardNavigation_Full_referenceFrame_Enum_ECR_ECEF,
    OnboardNavigation_Full_referenceFrame_Enum_TEME,
    OnboardNavigation_Full_referenceFrame_Enum_ITRF,
    OnboardNavigation_Full_referenceFrame_Enum_GCRF
  };
  return values;
}

inline const char * const *EnumNamesOnboardNavigation_Full_referenceFrame_Enum() {
  static const char * const names[7] = {
    "J2000",
    "EFG_TDR",
    "ECR_ECEF",
    "TEME",
    "ITRF",
    "GCRF",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnboardNavigation_Full_referenceFrame_Enum(OnboardNavigation_Full_referenceFrame_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnboardNavigation_Full_referenceFrame_Enum_J2000, OnboardNavigation_Full_referenceFrame_Enum_GCRF)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnboardNavigation_Full_referenceFrame_Enum()[index];
}

enum OnboardNavigation_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnboardNavigation_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnboardNavigation_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnboardNavigation_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnboardNavigation_Full_dataMode_Enum_EXERCISE = 3,
  OnboardNavigation_Full_dataMode_Enum_MIN = OnboardNavigation_Full_dataMode_Enum_REAL,
  OnboardNavigation_Full_dataMode_Enum_MAX = OnboardNavigation_Full_dataMode_Enum_EXERCISE
};

inline const OnboardNavigation_Full_dataMode_Enum (&EnumValuesOnboardNavigation_Full_dataMode_Enum())[4] {
  static const OnboardNavigation_Full_dataMode_Enum values[] = {
    OnboardNavigation_Full_dataMode_Enum_REAL,
    OnboardNavigation_Full_dataMode_Enum_TEST,
    OnboardNavigation_Full_dataMode_Enum_SIMULATED,
    OnboardNavigation_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnboardNavigation_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnboardNavigation_Full_dataMode_Enum(OnboardNavigation_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnboardNavigation_Full_dataMode_Enum_REAL, OnboardNavigation_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnboardNavigation_Full_dataMode_Enum()[index];
}

/// /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
struct OnboardNavigation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnboardNavigation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_SATNO = 10,
    VT_ONORBIT = 12,
    VT_ORIGOBJECTID = 14,
    VT_STARTTIME = 16,
    VT_ENDTIME = 18,
    VT_ESID = 20,
    VT_STARCATNAME = 22,
    VT_STARCATLOADTIME = 24,
    VT_IDSTATEVECTOR = 26,
    VT_TS = 28,
    VT_REFERENCEFRAME = 30,
    VT_SUNSENSOR = 32,
    VT_MAG = 34,
    VT_STARTRACKER = 36,
    VT_DELTAPOS = 38,
    VT_CREATEDAT = 40,
    VT_CREATEDBY = 42,
    VT_SOURCE = 44,
    VT_ORIGIN = 46,
    VT_ORIGNETWORK = 48,
    VT_DATAMODE = 50
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONBOARD-NAVIGATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Start time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// End time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
  /// Example: /// Example: EPHEMERISSET-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *esId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESID);
  }
  /// The name or identifier the star catalog in use.
  /// Example: /// Example: STAR-CAT-NAME
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *starCatName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARCATNAME);
  }
  /// The last load time of the current star catalog onboard this spacecraft.
  /// Example: /// Example: 2021-07-21T01:02:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *starCatLoadTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARCATLOADTIME);
  }
  /// Unique identifier of the last onboard state vector.
  /// Example: /// Example: STATE-VECTOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSTATEVECTOR);
  }
  /// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
  /// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TS);
  }
  /// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  OnboardNavigation_Full_referenceFrame_Enum referenceFrame() const {
    return static_cast<OnboardNavigation_Full_referenceFrame_Enum>(GetField<int8_t>(VT_REFERENCEFRAME, 0));
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sunSensor() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SUNSENSOR);
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mag() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MAG);
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *starTracker() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_STARTRACKER);
  }
  /// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaPos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DELTAPOS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 36
  OnboardNavigation_Full_dataMode_Enum dataMode() const {
    return static_cast<OnboardNavigation_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_ESID) &&
           verifier.VerifyString(esId()) &&
           VerifyOffset(verifier, VT_STARCATNAME) &&
           verifier.VerifyString(starCatName()) &&
           VerifyOffset(verifier, VT_STARCATLOADTIME) &&
           verifier.VerifyString(starCatLoadTime()) &&
           VerifyOffset(verifier, VT_IDSTATEVECTOR) &&
           verifier.VerifyString(idStateVector()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyVector(ts()) &&
           verifier.VerifyVectorOfStrings(ts()) &&
           VerifyField<int8_t>(verifier, VT_REFERENCEFRAME, 1) &&
           VerifyOffset(verifier, VT_SUNSENSOR) &&
           verifier.VerifyVector(sunSensor()) &&
           verifier.VerifyVectorOfStrings(sunSensor()) &&
           VerifyOffset(verifier, VT_MAG) &&
           verifier.VerifyVector(mag()) &&
           verifier.VerifyVectorOfStrings(mag()) &&
           VerifyOffset(verifier, VT_STARTRACKER) &&
           verifier.VerifyVector(starTracker()) &&
           verifier.VerifyVectorOfStrings(starTracker()) &&
           VerifyOffset(verifier, VT_DELTAPOS) &&
           verifier.VerifyVector(deltaPos()) &&
           verifier.VerifyVectorOfStrings(deltaPos()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct OnboardNavigation_FullBuilder {
  typedef OnboardNavigation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(OnboardNavigation_Full::VT_SATNO, satNo, 0);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ONORBIT, onOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ENDTIME, endTime);
  }
  void add_esId(::flatbuffers::Offset<::flatbuffers::String> esId) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ESID, esId);
  }
  void add_starCatName(::flatbuffers::Offset<::flatbuffers::String> starCatName) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_STARCATNAME, starCatName);
  }
  void add_starCatLoadTime(::flatbuffers::Offset<::flatbuffers::String> starCatLoadTime) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_STARCATLOADTIME, starCatLoadTime);
  }
  void add_idStateVector(::flatbuffers::Offset<::flatbuffers::String> idStateVector) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_IDSTATEVECTOR, idStateVector);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ts) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_TS, ts);
  }
  void add_referenceFrame(OnboardNavigation_Full_referenceFrame_Enum referenceFrame) {
    fbb_.AddElement<int8_t>(OnboardNavigation_Full::VT_REFERENCEFRAME, static_cast<int8_t>(referenceFrame), 0);
  }
  void add_sunSensor(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sunSensor) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_SUNSENSOR, sunSensor);
  }
  void add_mag(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mag) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_MAG, mag);
  }
  void add_starTracker(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> starTracker) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_STARTRACKER, starTracker);
  }
  void add_deltaPos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaPos) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_DELTAPOS, deltaPos);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OnboardNavigation_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(OnboardNavigation_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnboardNavigation_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit OnboardNavigation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnboardNavigation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnboardNavigation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnboardNavigation_Full> CreateOnboardNavigation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> esId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> starCatName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> starCatLoadTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idStateVector = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ts = 0,
    OnboardNavigation_Full_referenceFrame_Enum referenceFrame = OnboardNavigation_Full_referenceFrame_Enum_J2000,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sunSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mag = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> starTracker = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaPos = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    OnboardNavigation_Full_dataMode_Enum dataMode = OnboardNavigation_Full_dataMode_Enum_REAL) {
  OnboardNavigation_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_deltaPos(deltaPos);
  builder_.add_starTracker(starTracker);
  builder_.add_mag(mag);
  builder_.add_sunSensor(sunSensor);
  builder_.add_ts(ts);
  builder_.add_idStateVector(idStateVector);
  builder_.add_starCatLoadTime(starCatLoadTime);
  builder_.add_starCatName(starCatName);
  builder_.add_esId(esId);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_origObjectId(origObjectId);
  builder_.add_onOrbit(onOrbit);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_referenceFrame(referenceFrame);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnboardNavigation_Full> CreateOnboardNavigation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *onOrbit = nullptr,
    const char *origObjectId = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *esId = nullptr,
    const char *starCatName = nullptr,
    const char *starCatLoadTime = nullptr,
    const char *idStateVector = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ts = nullptr,
    OnboardNavigation_Full_referenceFrame_Enum referenceFrame = OnboardNavigation_Full_referenceFrame_Enum_J2000,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sunSensor = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *mag = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *starTracker = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaPos = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    OnboardNavigation_Full_dataMode_Enum dataMode = OnboardNavigation_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto esId__ = esId ? _fbb.CreateString(esId) : 0;
  auto starCatName__ = starCatName ? _fbb.CreateString(starCatName) : 0;
  auto starCatLoadTime__ = starCatLoadTime ? _fbb.CreateString(starCatLoadTime) : 0;
  auto idStateVector__ = idStateVector ? _fbb.CreateString(idStateVector) : 0;
  auto ts__ = ts ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ts) : 0;
  auto sunSensor__ = sunSensor ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sunSensor) : 0;
  auto mag__ = mag ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*mag) : 0;
  auto starTracker__ = starTracker ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*starTracker) : 0;
  auto deltaPos__ = deltaPos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*deltaPos) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOnboardNavigation_Full(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      satNo,
      onOrbit__,
      origObjectId__,
      startTime__,
      endTime__,
      esId__,
      starCatName__,
      starCatLoadTime__,
      idStateVector__,
      ts__,
      referenceFrame,
      sunSensor__,
      mag__,
      starTracker__,
      deltaPos__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const OnboardNavigation_Full *GetOnboardNavigation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<OnboardNavigation_Full>(buf);
}

inline const OnboardNavigation_Full *GetSizePrefixedOnboardNavigation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnboardNavigation_Full>(buf);
}

inline const char *OnboardNavigation_FullIdentifier() {
  return "ONBO";
}

inline bool OnboardNavigation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnboardNavigation_FullIdentifier());
}

inline bool SizePrefixedOnboardNavigation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnboardNavigation_FullIdentifier(), true);
}

inline bool VerifyOnboardNavigation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnboardNavigation_Full>(OnboardNavigation_FullIdentifier());
}

inline bool VerifySizePrefixedOnboardNavigation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnboardNavigation_Full>(OnboardNavigation_FullIdentifier());
}

inline void FinishOnboardNavigation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnboardNavigation_Full> root) {
  fbb.Finish(root, OnboardNavigation_FullIdentifier());
}

inline void FinishSizePrefixedOnboardNavigation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnboardNavigation_Full> root) {
  fbb.FinishSizePrefixed(root, OnboardNavigation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
