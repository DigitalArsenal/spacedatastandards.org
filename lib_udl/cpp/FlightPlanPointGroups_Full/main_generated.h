// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanPointGroups_Full;
struct FlightPlanPointGroups_FullBuilder;

/// /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
struct FlightPlanPointGroups_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanPointGroups_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTGROUPNAME = 4,
    VT_WORSTFUELCASE = 6,
    VT_LSAFNAME = 8,
    VT_LSAFDISTANCE = 10,
    VT_FSAFDISTANCE = 12,
    VT_ETOPSDISTANCE = 14,
    VT_LSAFTIME = 16,
    VT_FSAFTIME = 18,
    VT_ETOPSTIME = 20,
    VT_LSAFAVGWINDFACTOR = 22,
    VT_FSAFAVGWINDFACTOR = 24,
    VT_ETOPSAVGWINDFACTOR = 26,
    VT_LSAFTEMPDEV = 28,
    VT_FSAFTEMPDEV = 30,
    VT_ETOPSTEMPDEV = 32,
    VT_LSAFREQFUEL = 34,
    VT_FSAFREQFUEL = 36,
    VT_ETOPSREQFUEL = 38,
    VT_FROMTAKEOFFTIME = 40,
    VT_PLANNEDFUEL = 42,
    VT_FUELCALCALT = 44,
    VT_FUELCALCSPD = 46,
    VT_AVGFUELFLOW = 48,
    VT_FLIGHTPLANPOINTS = 50
  };
  /// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
  /// Example: /// Example: ETOPS_CF_POINT_1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pointGroupName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POINTGROUPNAME);
  }
  /// Specifies which Point Group case requires the most fuel.
  /// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *worstFuelCase() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WORSTFUELCASE);
  }
  /// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: LPPD
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *lsafName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LSAFNAME);
  }
  /// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  double lsafDistance() const {
    return GetField<double>(VT_LSAFDISTANCE, 0.0);
  }
  /// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  double fsafDistance() const {
    return GetField<double>(VT_FSAFDISTANCE, 0.0);
  }
  /// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
  /// Example: /// Example: 684.1
  /// Constraints: No constraints specified.
  double etopsDistance() const {
    return GetField<double>(VT_ETOPSDISTANCE, 0.0);
  }
  /// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *lsafTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LSAFTIME);
  }
  /// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *fsafTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FSAFTIME);
  }
  /// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
  /// Example: /// Example: 01:23
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *etopsTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETOPSTIME);
  }
  /// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
  /// Example: /// Example: 13.1
  /// Constraints: No constraints specified.
  double lsafAvgWindFactor() const {
    return GetField<double>(VT_LSAFAVGWINDFACTOR, 0.0);
  }
  /// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double fsafAvgWindFactor() const {
    return GetField<double>(VT_FSAFAVGWINDFACTOR, 0.0);
  }
  /// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double etopsAvgWindFactor() const {
    return GetField<double>(VT_ETOPSAVGWINDFACTOR, 0.0);
  }
  /// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  double lsafTempDev() const {
    return GetField<double>(VT_LSAFTEMPDEV, 0.0);
  }
  /// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  double fsafTempDev() const {
    return GetField<double>(VT_FSAFTEMPDEV, 0.0);
  }
  /// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
  /// Example: /// Example: 9.1
  /// Constraints: No constraints specified.
  double etopsTempDev() const {
    return GetField<double>(VT_ETOPSTEMPDEV, 0.0);
  }
  /// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
  /// Example: /// Example: 50787.1
  /// Constraints: No constraints specified.
  double lsafReqFuel() const {
    return GetField<double>(VT_LSAFREQFUEL, 0.0);
  }
  /// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
  /// Example: /// Example: 50380.1
  /// Constraints: No constraints specified.
  double fsafReqFuel() const {
    return GetField<double>(VT_FSAFREQFUEL, 0.0);
  }
  /// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
  /// Example: /// Example: 4412.1
  /// Constraints: No constraints specified.
  double etopsReqFuel() const {
    return GetField<double>(VT_ETOPSREQFUEL, 0.0);
  }
  /// Total time from takeoff when the point is reached expressed in HH:MM format.
  /// Example: /// Example: 07:29
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *fromTakeoffTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FROMTAKEOFFTIME);
  }
  /// Amount of planned fuel on board when the point is reached in pounds.
  /// Example: /// Example: 190319.1
  /// Constraints: No constraints specified.
  double plannedFuel() const {
    return GetField<double>(VT_PLANNEDFUEL, 0.0);
  }
  /// Flight level of the point at which the fuel was calculated in feet.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double fuelCalcAlt() const {
    return GetField<double>(VT_FUELCALCALT, 0.0);
  }
  /// True airspeed at which the fuel was calculated in knots.
  /// Example: /// Example: 365.1
  /// Constraints: No constraints specified.
  double fuelCalcSpd() const {
    return GetField<double>(VT_FUELCALCSPD, 0.0);
  }
  /// Average fuel flow at which the fuel was calculated in pounds per hour.
  /// Example: /// Example: 19693.1
  /// Constraints: No constraints specified.
  double avgFuelFlow() const {
    return GetField<double>(VT_AVGFUELFLOW, 0.0);
  }
  /// Array of point data for this Point Group.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanPoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FLIGHTPLANPOINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTGROUPNAME) &&
           verifier.VerifyString(pointGroupName()) &&
           VerifyOffset(verifier, VT_WORSTFUELCASE) &&
           verifier.VerifyString(worstFuelCase()) &&
           VerifyOffset(verifier, VT_LSAFNAME) &&
           verifier.VerifyString(lsafName()) &&
           VerifyField<double>(verifier, VT_LSAFDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_FSAFDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_ETOPSDISTANCE, 8) &&
           VerifyOffset(verifier, VT_LSAFTIME) &&
           verifier.VerifyString(lsafTime()) &&
           VerifyOffset(verifier, VT_FSAFTIME) &&
           verifier.VerifyString(fsafTime()) &&
           VerifyOffset(verifier, VT_ETOPSTIME) &&
           verifier.VerifyString(etopsTime()) &&
           VerifyField<double>(verifier, VT_LSAFAVGWINDFACTOR, 8) &&
           VerifyField<double>(verifier, VT_FSAFAVGWINDFACTOR, 8) &&
           VerifyField<double>(verifier, VT_ETOPSAVGWINDFACTOR, 8) &&
           VerifyField<double>(verifier, VT_LSAFTEMPDEV, 8) &&
           VerifyField<double>(verifier, VT_FSAFTEMPDEV, 8) &&
           VerifyField<double>(verifier, VT_ETOPSTEMPDEV, 8) &&
           VerifyField<double>(verifier, VT_LSAFREQFUEL, 8) &&
           VerifyField<double>(verifier, VT_FSAFREQFUEL, 8) &&
           VerifyField<double>(verifier, VT_ETOPSREQFUEL, 8) &&
           VerifyOffset(verifier, VT_FROMTAKEOFFTIME) &&
           verifier.VerifyString(fromTakeoffTime()) &&
           VerifyField<double>(verifier, VT_PLANNEDFUEL, 8) &&
           VerifyField<double>(verifier, VT_FUELCALCALT, 8) &&
           VerifyField<double>(verifier, VT_FUELCALCSPD, 8) &&
           VerifyField<double>(verifier, VT_AVGFUELFLOW, 8) &&
           VerifyOffset(verifier, VT_FLIGHTPLANPOINTS) &&
           verifier.VerifyVector(flightPlanPoints()) &&
           verifier.VerifyVectorOfStrings(flightPlanPoints()) &&
           verifier.EndTable();
  }
};

struct FlightPlanPointGroups_FullBuilder {
  typedef FlightPlanPointGroups_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pointGroupName(::flatbuffers::Offset<::flatbuffers::String> pointGroupName) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_POINTGROUPNAME, pointGroupName);
  }
  void add_worstFuelCase(::flatbuffers::Offset<::flatbuffers::String> worstFuelCase) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_WORSTFUELCASE, worstFuelCase);
  }
  void add_lsafName(::flatbuffers::Offset<::flatbuffers::String> lsafName) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_LSAFNAME, lsafName);
  }
  void add_lsafDistance(double lsafDistance) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_LSAFDISTANCE, lsafDistance, 0.0);
  }
  void add_fsafDistance(double fsafDistance) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FSAFDISTANCE, fsafDistance, 0.0);
  }
  void add_etopsDistance(double etopsDistance) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_ETOPSDISTANCE, etopsDistance, 0.0);
  }
  void add_lsafTime(::flatbuffers::Offset<::flatbuffers::String> lsafTime) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_LSAFTIME, lsafTime);
  }
  void add_fsafTime(::flatbuffers::Offset<::flatbuffers::String> fsafTime) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_FSAFTIME, fsafTime);
  }
  void add_etopsTime(::flatbuffers::Offset<::flatbuffers::String> etopsTime) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_ETOPSTIME, etopsTime);
  }
  void add_lsafAvgWindFactor(double lsafAvgWindFactor) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_LSAFAVGWINDFACTOR, lsafAvgWindFactor, 0.0);
  }
  void add_fsafAvgWindFactor(double fsafAvgWindFactor) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FSAFAVGWINDFACTOR, fsafAvgWindFactor, 0.0);
  }
  void add_etopsAvgWindFactor(double etopsAvgWindFactor) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_ETOPSAVGWINDFACTOR, etopsAvgWindFactor, 0.0);
  }
  void add_lsafTempDev(double lsafTempDev) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_LSAFTEMPDEV, lsafTempDev, 0.0);
  }
  void add_fsafTempDev(double fsafTempDev) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FSAFTEMPDEV, fsafTempDev, 0.0);
  }
  void add_etopsTempDev(double etopsTempDev) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_ETOPSTEMPDEV, etopsTempDev, 0.0);
  }
  void add_lsafReqFuel(double lsafReqFuel) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_LSAFREQFUEL, lsafReqFuel, 0.0);
  }
  void add_fsafReqFuel(double fsafReqFuel) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FSAFREQFUEL, fsafReqFuel, 0.0);
  }
  void add_etopsReqFuel(double etopsReqFuel) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_ETOPSREQFUEL, etopsReqFuel, 0.0);
  }
  void add_fromTakeoffTime(::flatbuffers::Offset<::flatbuffers::String> fromTakeoffTime) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_FROMTAKEOFFTIME, fromTakeoffTime);
  }
  void add_plannedFuel(double plannedFuel) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_PLANNEDFUEL, plannedFuel, 0.0);
  }
  void add_fuelCalcAlt(double fuelCalcAlt) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FUELCALCALT, fuelCalcAlt, 0.0);
  }
  void add_fuelCalcSpd(double fuelCalcSpd) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_FUELCALCSPD, fuelCalcSpd, 0.0);
  }
  void add_avgFuelFlow(double avgFuelFlow) {
    fbb_.AddElement<double>(FlightPlanPointGroups_Full::VT_AVGFUELFLOW, avgFuelFlow, 0.0);
  }
  void add_flightPlanPoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanPoints) {
    fbb_.AddOffset(FlightPlanPointGroups_Full::VT_FLIGHTPLANPOINTS, flightPlanPoints);
  }
  explicit FlightPlanPointGroups_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanPointGroups_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanPointGroups_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanPointGroups_Full> CreateFlightPlanPointGroups_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pointGroupName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> worstFuelCase = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lsafName = 0,
    double lsafDistance = 0.0,
    double fsafDistance = 0.0,
    double etopsDistance = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> lsafTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fsafTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> etopsTime = 0,
    double lsafAvgWindFactor = 0.0,
    double fsafAvgWindFactor = 0.0,
    double etopsAvgWindFactor = 0.0,
    double lsafTempDev = 0.0,
    double fsafTempDev = 0.0,
    double etopsTempDev = 0.0,
    double lsafReqFuel = 0.0,
    double fsafReqFuel = 0.0,
    double etopsReqFuel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> fromTakeoffTime = 0,
    double plannedFuel = 0.0,
    double fuelCalcAlt = 0.0,
    double fuelCalcSpd = 0.0,
    double avgFuelFlow = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanPoints = 0) {
  FlightPlanPointGroups_FullBuilder builder_(_fbb);
  builder_.add_avgFuelFlow(avgFuelFlow);
  builder_.add_fuelCalcSpd(fuelCalcSpd);
  builder_.add_fuelCalcAlt(fuelCalcAlt);
  builder_.add_plannedFuel(plannedFuel);
  builder_.add_etopsReqFuel(etopsReqFuel);
  builder_.add_fsafReqFuel(fsafReqFuel);
  builder_.add_lsafReqFuel(lsafReqFuel);
  builder_.add_etopsTempDev(etopsTempDev);
  builder_.add_fsafTempDev(fsafTempDev);
  builder_.add_lsafTempDev(lsafTempDev);
  builder_.add_etopsAvgWindFactor(etopsAvgWindFactor);
  builder_.add_fsafAvgWindFactor(fsafAvgWindFactor);
  builder_.add_lsafAvgWindFactor(lsafAvgWindFactor);
  builder_.add_etopsDistance(etopsDistance);
  builder_.add_fsafDistance(fsafDistance);
  builder_.add_lsafDistance(lsafDistance);
  builder_.add_flightPlanPoints(flightPlanPoints);
  builder_.add_fromTakeoffTime(fromTakeoffTime);
  builder_.add_etopsTime(etopsTime);
  builder_.add_fsafTime(fsafTime);
  builder_.add_lsafTime(lsafTime);
  builder_.add_lsafName(lsafName);
  builder_.add_worstFuelCase(worstFuelCase);
  builder_.add_pointGroupName(pointGroupName);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlanPointGroups_Full> CreateFlightPlanPointGroups_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pointGroupName = nullptr,
    const char *worstFuelCase = nullptr,
    const char *lsafName = nullptr,
    double lsafDistance = 0.0,
    double fsafDistance = 0.0,
    double etopsDistance = 0.0,
    const char *lsafTime = nullptr,
    const char *fsafTime = nullptr,
    const char *etopsTime = nullptr,
    double lsafAvgWindFactor = 0.0,
    double fsafAvgWindFactor = 0.0,
    double etopsAvgWindFactor = 0.0,
    double lsafTempDev = 0.0,
    double fsafTempDev = 0.0,
    double etopsTempDev = 0.0,
    double lsafReqFuel = 0.0,
    double fsafReqFuel = 0.0,
    double etopsReqFuel = 0.0,
    const char *fromTakeoffTime = nullptr,
    double plannedFuel = 0.0,
    double fuelCalcAlt = 0.0,
    double fuelCalcSpd = 0.0,
    double avgFuelFlow = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanPoints = nullptr) {
  auto pointGroupName__ = pointGroupName ? _fbb.CreateString(pointGroupName) : 0;
  auto worstFuelCase__ = worstFuelCase ? _fbb.CreateString(worstFuelCase) : 0;
  auto lsafName__ = lsafName ? _fbb.CreateString(lsafName) : 0;
  auto lsafTime__ = lsafTime ? _fbb.CreateString(lsafTime) : 0;
  auto fsafTime__ = fsafTime ? _fbb.CreateString(fsafTime) : 0;
  auto etopsTime__ = etopsTime ? _fbb.CreateString(etopsTime) : 0;
  auto fromTakeoffTime__ = fromTakeoffTime ? _fbb.CreateString(fromTakeoffTime) : 0;
  auto flightPlanPoints__ = flightPlanPoints ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*flightPlanPoints) : 0;
  return CreateFlightPlanPointGroups_Full(
      _fbb,
      pointGroupName__,
      worstFuelCase__,
      lsafName__,
      lsafDistance,
      fsafDistance,
      etopsDistance,
      lsafTime__,
      fsafTime__,
      etopsTime__,
      lsafAvgWindFactor,
      fsafAvgWindFactor,
      etopsAvgWindFactor,
      lsafTempDev,
      fsafTempDev,
      etopsTempDev,
      lsafReqFuel,
      fsafReqFuel,
      etopsReqFuel,
      fromTakeoffTime__,
      plannedFuel,
      fuelCalcAlt,
      fuelCalcSpd,
      avgFuelFlow,
      flightPlanPoints__);
}

inline const FlightPlanPointGroups_Full *GetFlightPlanPointGroups_Full(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanPointGroups_Full>(buf);
}

inline const FlightPlanPointGroups_Full *GetSizePrefixedFlightPlanPointGroups_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanPointGroups_Full>(buf);
}

inline const char *FlightPlanPointGroups_FullIdentifier() {
  return "FLIG";
}

inline bool FlightPlanPointGroups_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanPointGroups_FullIdentifier());
}

inline bool SizePrefixedFlightPlanPointGroups_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanPointGroups_FullIdentifier(), true);
}

inline bool VerifyFlightPlanPointGroups_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanPointGroups_Full>(FlightPlanPointGroups_FullIdentifier());
}

inline bool VerifySizePrefixedFlightPlanPointGroups_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanPointGroups_Full>(FlightPlanPointGroups_FullIdentifier());
}

inline void FinishFlightPlanPointGroups_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanPointGroups_Full> root) {
  fbb.Finish(root, FlightPlanPointGroups_FullIdentifier());
}

inline void FinishSizePrefixedFlightPlanPointGroups_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanPointGroups_Full> root) {
  fbb.FinishSizePrefixed(root, FlightPlanPointGroups_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
