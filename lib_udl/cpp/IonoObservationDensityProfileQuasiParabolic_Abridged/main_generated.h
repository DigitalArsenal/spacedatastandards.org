// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfileQuasiParabolic_Abridged;
struct IonoObservationDensityProfileQuasiParabolic_AbridgedBuilder;

/// /// Coefficients to describe profile shape as quasi-parabolic segments.
struct IonoObservationDensityProfileQuasiParabolic_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfileQuasiParabolic_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTION = 4,
    VT_EARTHRADIUS = 6,
    VT_QUASIPARABOLICSEGMENTS = 8
  };
  /// General description of the quasi-parabolic computation algorithm.
  /// Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Value of the Earth's radius, in kilometers, used for computations.
  /// Example: /// Example: 6370.1
  /// Constraints: No constraints specified.
  double earthRadius() const {
    return GetField<double>(VT_EARTHRADIUS, 0.0);
  }
  /// Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C‚Äù. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *quasiParabolicSegments() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_QUASIPARABOLICSEGMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<double>(verifier, VT_EARTHRADIUS, 8) &&
           VerifyOffset(verifier, VT_QUASIPARABOLICSEGMENTS) &&
           verifier.VerifyVector(quasiParabolicSegments()) &&
           verifier.VerifyVectorOfStrings(quasiParabolicSegments()) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfileQuasiParabolic_AbridgedBuilder {
  typedef IonoObservationDensityProfileQuasiParabolic_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(IonoObservationDensityProfileQuasiParabolic_Abridged::VT_DESCRIPTION, description);
  }
  void add_earthRadius(double earthRadius) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolic_Abridged::VT_EARTHRADIUS, earthRadius, 0.0);
  }
  void add_quasiParabolicSegments(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quasiParabolicSegments) {
    fbb_.AddOffset(IonoObservationDensityProfileQuasiParabolic_Abridged::VT_QUASIPARABOLICSEGMENTS, quasiParabolicSegments);
  }
  explicit IonoObservationDensityProfileQuasiParabolic_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged> CreateIonoObservationDensityProfileQuasiParabolic_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    double earthRadius = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quasiParabolicSegments = 0) {
  IonoObservationDensityProfileQuasiParabolic_AbridgedBuilder builder_(_fbb);
  builder_.add_earthRadius(earthRadius);
  builder_.add_quasiParabolicSegments(quasiParabolicSegments);
  builder_.add_description(description);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged> CreateIonoObservationDensityProfileQuasiParabolic_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *description = nullptr,
    double earthRadius = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *quasiParabolicSegments = nullptr) {
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto quasiParabolicSegments__ = quasiParabolicSegments ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*quasiParabolicSegments) : 0;
  return CreateIonoObservationDensityProfileQuasiParabolic_Abridged(
      _fbb,
      description__,
      earthRadius,
      quasiParabolicSegments__);
}

inline const IonoObservationDensityProfileQuasiParabolic_Abridged *GetIonoObservationDensityProfileQuasiParabolic_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfileQuasiParabolic_Abridged>(buf);
}

inline const IonoObservationDensityProfileQuasiParabolic_Abridged *GetSizePrefixedIonoObservationDensityProfileQuasiParabolic_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfileQuasiParabolic_Abridged>(buf);
}

inline const char *IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfileQuasiParabolic_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfileQuasiParabolic_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfileQuasiParabolic_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfileQuasiParabolic_Abridged>(IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfileQuasiParabolic_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfileQuasiParabolic_Abridged>(IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier());
}

inline void FinishIonoObservationDensityProfileQuasiParabolic_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged> root) {
  fbb.Finish(root, IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfileQuasiParabolic_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolic_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfileQuasiParabolic_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
