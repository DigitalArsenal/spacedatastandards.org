// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlan_Full;
struct FlightPlan_FullBuilder;

enum FlightPlan_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  FlightPlan_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  FlightPlan_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  FlightPlan_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  FlightPlan_Full_dataMode_Enum_EXERCISE = 3,
  FlightPlan_Full_dataMode_Enum_MIN = FlightPlan_Full_dataMode_Enum_REAL,
  FlightPlan_Full_dataMode_Enum_MAX = FlightPlan_Full_dataMode_Enum_EXERCISE
};

inline const FlightPlan_Full_dataMode_Enum (&EnumValuesFlightPlan_Full_dataMode_Enum())[4] {
  static const FlightPlan_Full_dataMode_Enum values[] = {
    FlightPlan_Full_dataMode_Enum_REAL,
    FlightPlan_Full_dataMode_Enum_TEST,
    FlightPlan_Full_dataMode_Enum_SIMULATED,
    FlightPlan_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesFlightPlan_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameFlightPlan_Full_dataMode_Enum(FlightPlan_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, FlightPlan_Full_dataMode_Enum_REAL, FlightPlan_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFlightPlan_Full_dataMode_Enum()[index];
}

/// /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
struct FlightPlan_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlan_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_AMCMISSIONID = 8,
    VT_IDSORTIE = 10,
    VT_IDAIRCRAFT = 12,
    VT_LEGNUM = 14,
    VT_IDDEPAIRFIELD = 16,
    VT_DEPAIRFIELD = 18,
    VT_IDARRAIRFIELD = 20,
    VT_ARRAIRFIELD = 22,
    VT_EXTERNALID = 24,
    VT_GENTS = 26,
    VT_AIRCRAFTMDS = 28,
    VT_TAILNUMBER = 30,
    VT_CALLSIGN = 32,
    VT_WXVALIDSTART = 34,
    VT_WXVALIDEND = 36,
    VT_ESTDEPTIME = 38,
    VT_DRAGINDEX = 40,
    VT_FUELDEGRADE = 42,
    VT_OPWEIGHT = 44,
    VT_MSNINDEX = 46,
    VT_RAMPFUEL = 48,
    VT_TAXIFUEL = 50,
    VT_TAKEOFFFUEL = 52,
    VT_CLIMBFUEL = 54,
    VT_CLIMBTIME = 56,
    VT_HOLDDOWNFUEL = 58,
    VT_TOCICEFUEL = 60,
    VT_TOCFUEL = 62,
    VT_ENROUTEFUEL = 64,
    VT_ENROUTETIME = 66,
    VT_THUNDERAVOIDFUEL = 68,
    VT_TODICEFUEL = 70,
    VT_OPCONDITIONFUEL = 72,
    VT_TODFUEL = 74,
    VT_EARLYDESCENTFUEL = 76,
    VT_ARRICEFUEL = 78,
    VT_HOLDFUEL = 80,
    VT_HOLDTIME = 82,
    VT_APPLANDINGFUEL = 84,
    VT_BURNEDFUEL = 86,
    VT_LANDINGFUEL = 88,
    VT_MINDIVERTFUEL = 90,
    VT_ARRALTERNATE1FUEL = 92,
    VT_ARRALTERNATE2FUEL = 94,
    VT_CONTINGENCYFUEL = 96,
    VT_RESERVEFUEL = 98,
    VT_DEPRESSFUEL = 100,
    VT_UNUSABLEFUEL = 102,
    VT_UNIDENTEXTRAFUEL = 104,
    VT_IDENTEXTRAFUEL = 106,
    VT_REMALTERNATE1FUEL = 108,
    VT_REMALTERNATE2FUEL = 110,
    VT_ENDURANCETIME = 112,
    VT_SID = 114,
    VT_STAR = 116,
    VT_GPSRAIM = 118,
    VT_DEPRUNWAY = 120,
    VT_ARRRUNWAY = 122,
    VT_ROUTESTRING = 124,
    VT_COUNTRYCODES = 126,
    VT_ETOPSRATING = 128,
    VT_ETOPSAIRFIELDS = 130,
    VT_ETOPSALTAIRFIELDS = 132,
    VT_ETOPSVALWINDOW = 134,
    VT_PLANNERREMARK = 136,
    VT_CARGOREMARK = 138,
    VT_WINDFAC1 = 140,
    VT_WINDFAC2 = 142,
    VT_WINDFACAVG = 144,
    VT_AVGTEMPDEV = 146,
    VT_ATCADDRESSES = 148,
    VT_ORIGINATOR = 150,
    VT_NUMAIRCRAFT = 152,
    VT_FLIGHTRULES = 154,
    VT_FLIGHTTYPE = 156,
    VT_INITIALCRUISESPEED = 158,
    VT_INITIALFLIGHTLEVEL = 160,
    VT_ARRALTERNATE1 = 162,
    VT_ARRALTERNATE2 = 164,
    VT_DEPALTERNATE = 166,
    VT_WAKETURBCAT = 168,
    VT_EQUIPMENT = 170,
    VT_NOTES = 172,
    VT_CREATEDAT = 174,
    VT_CREATEDBY = 176,
    VT_SOURCEDL = 178,
    VT_SOURCE = 180,
    VT_ORIGIN = 182,
    VT_ORIGNETWORK = 184,
    VT_DATAMODE = 186,
    VT_AIRREFUELEVENTS = 188,
    VT_FLIGHTPLANMESSAGES = 190,
    VT_FLIGHTPLANWAYPOINTS = 192,
    VT_FLIGHTPLANPOINTGROUPS = 194
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCMISSIONID);
  }
  /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
  /// Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSORTIE);
  }
  /// The UDL unique identifier of the aircraft associated with this flight plan.
  /// Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAircraft() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRCRAFT);
  }
  /// The leg number of this flight plan.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t legNum() const {
    return GetField<int32_t>(VT_LEGNUM, 0);
  }
  /// The UDL unique identifier of the departure airfield associated with this flight plan.
  /// Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idDepAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDDEPAIRFIELD);
  }
  /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KSLV
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *depAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPAIRFIELD);
  }
  /// The UDL unique identifier of the arrival airfield associated with this flight plan.
  /// Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idArrAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDARRAIRFIELD);
  }
  /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *arrAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRAIRFIELD);
  }
  /// The source ID of the flight plan from the generating system.
  /// Example: /// Example: AFMAPP20322347140001
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *genTS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENTS);
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: KC-130 HERCULES
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *aircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTMDS);
  }
  /// The tail number of the aircraft associated with this flight plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *tailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAILNUMBER);
  }
  /// The call sign assigned to the aircraft for this flight plan.
  /// Example: /// Example: HKY629
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *wxValidStart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WXVALIDSTART);
  }
  /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *wxValidEnd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WXVALIDEND);
  }
  /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTDEPTIME);
  }
  /// The percent degrade due to drag for this aircraft.
  /// Example: /// Example: 16.9
  /// Constraints: No constraints specified.
  double dragIndex() const {
    return GetField<double>(VT_DRAGINDEX, 0.0);
  }
  /// The fuel degrade percentage used for this mission.
  /// Example: /// Example: 10.3
  /// Constraints: No constraints specified.
  double fuelDegrade() const {
    return GetField<double>(VT_FUELDEGRADE, 0.0);
  }
  /// Operating weight of the aircraft in pounds.
  /// Example: /// Example: 251830.5
  /// Constraints: No constraints specified.
  double opWeight() const {
    return GetField<double>(VT_OPWEIGHT, 0.0);
  }
  /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 44.1
  /// Constraints: No constraints specified.
  double msnIndex() const {
    return GetField<double>(VT_MSNINDEX, 0.0);
  }
  /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
  /// Example: /// Example: 180000.1
  /// Constraints: No constraints specified.
  double rampFuel() const {
    return GetField<double>(VT_RAMPFUEL, 0.0);
  }
  /// Fuel required to start engines and taxi to the end of the runway in pounds.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  double taxiFuel() const {
    return GetField<double>(VT_TAXIFUEL, 0.0);
  }
  /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
  /// Example: /// Example: 178500.1
  /// Constraints: No constraints specified.
  double takeoffFuel() const {
    return GetField<double>(VT_TAKEOFFFUEL, 0.0);
  }
  /// Fuel required from brake release to Top of Climb in pounds.
  /// Example: /// Example: 7000.1
  /// Constraints: No constraints specified.
  double climbFuel() const {
    return GetField<double>(VT_CLIMBFUEL, 0.0);
  }
  /// Time required from brake release to Top of Climb expressed as HH:MM.
  /// Example: /// Example: 00:13
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *climbTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLIMBTIME);
  }
  /// Additional fuel burned at Top of Climb in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  double holdDownFuel() const {
    return GetField<double>(VT_HOLDDOWNFUEL, 0.0);
  }
  /// Additional fuel burned at Top of Climb for icing in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  double tocIceFuel() const {
    return GetField<double>(VT_TOCICEFUEL, 0.0);
  }
  /// Fuel remaining at Top of Climb in pounds.
  /// Example: /// Example: 160000.1
  /// Constraints: No constraints specified.
  double tocFuel() const {
    return GetField<double>(VT_TOCFUEL, 0.0);
  }
  /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
  /// Example: /// Example: 155000.1
  /// Constraints: No constraints specified.
  double enrouteFuel() const {
    return GetField<double>(VT_ENROUTEFUEL, 0.0);
  }
  /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
  /// Example: /// Example: 06:30
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *enrouteTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENROUTETIME);
  }
  /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  double thunderAvoidFuel() const {
    return GetField<double>(VT_THUNDERAVOIDFUEL, 0.0);
  }
  /// Additional fuel burned at Top of Descent for icing in pounds.
  /// Example: /// Example: 2000.1
  /// Constraints: No constraints specified.
  double todIceFuel() const {
    return GetField<double>(VT_TODICEFUEL, 0.0);
  }
  /// Additional fuel burned at Top of Descent for the operational condition in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  double opConditionFuel() const {
    return GetField<double>(VT_OPCONDITIONFUEL, 0.0);
  }
  /// Fuel remaining at Top of Descent in pounds.
  /// Example: /// Example: 32000.1
  /// Constraints: No constraints specified.
  double todFuel() const {
    return GetField<double>(VT_TODFUEL, 0.0);
  }
  /// Additional fuel burned at landing/missed approach for an early descent in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  double earlyDescentFuel() const {
    return GetField<double>(VT_EARLYDESCENTFUEL, 0.0);
  }
  /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  double arrIceFuel() const {
    return GetField<double>(VT_ARRICEFUEL, 0.0);
  }
  /// Additional fuel burned at the destination for holding in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  double holdFuel() const {
    return GetField<double>(VT_HOLDFUEL, 0.0);
  }
  /// Additional time for holding at the destination expressed as HH:MM.
  /// Example: /// Example: 01:00
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *holdTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOLDTIME);
  }
  /// Fuel burned from the initial approach point to landing in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  double appLandingFuel() const {
    return GetField<double>(VT_APPLANDINGFUEL, 0.0);
  }
  /// Fuel planned to be burned during the flight in pounds.
  /// Example: /// Example: 145000.1
  /// Constraints: No constraints specified.
  double burnedFuel() const {
    return GetField<double>(VT_BURNEDFUEL, 0.0);
  }
  /// Fuel planned to be remaining on the airplane at landing in pounds.
  /// Example: /// Example: 19000.1
  /// Constraints: No constraints specified.
  double landingFuel() const {
    return GetField<double>(VT_LANDINGFUEL, 0.0);
  }
  /// The minimum fuel on board required to divert in pounds.
  /// Example: /// Example: 25000.1
  /// Constraints: No constraints specified.
  double minDivertFuel() const {
    return GetField<double>(VT_MINDIVERTFUEL, 0.0);
  }
  /// Fuel required to fly to alternate landing site 1 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  double arrAlternate1Fuel() const {
    return GetField<double>(VT_ARRALTERNATE1FUEL, 0.0);
  }
  /// Fuel required to fly to alternate landing site 2 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  double arrAlternate2Fuel() const {
    return GetField<double>(VT_ARRALTERNATE2FUEL, 0.0);
  }
  /// The amount of contingency fuel in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  double contingencyFuel() const {
    return GetField<double>(VT_CONTINGENCYFUEL, 0.0);
  }
  /// The amount of reserve fuel in pounds.
  /// Example: /// Example: 10000.1
  /// Constraints: No constraints specified.
  double reserveFuel() const {
    return GetField<double>(VT_RESERVEFUEL, 0.0);
  }
  /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  double depressFuel() const {
    return GetField<double>(VT_DEPRESSFUEL, 0.0);
  }
  /// The amount of unusable fuel in pounds.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  double unusableFuel() const {
    return GetField<double>(VT_UNUSABLEFUEL, 0.0);
  }
  /// The amount of unidentified extra fuel required to get to min landing in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  double unidentExtraFuel() const {
    return GetField<double>(VT_UNIDENTEXTRAFUEL, 0.0);
  }
  /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  double identExtraFuel() const {
    return GetField<double>(VT_IDENTEXTRAFUEL, 0.0);
  }
  /// Total fuel remaining at alternate landing site 1 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  double remAlternate1Fuel() const {
    return GetField<double>(VT_REMALTERNATE1FUEL, 0.0);
  }
  /// Total fuel remaining at alternate landing site 2 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  double remAlternate2Fuel() const {
    return GetField<double>(VT_REMALTERNATE2FUEL, 0.0);
  }
  /// Total endurance time based on the fuel on board expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *enduranceTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDURANCETIME);
  }
  /// Name of the planned Standard Instrument Departure (SID) procedure.
  /// Example: /// Example: RENV3B
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *sid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SID);
  }
  /// Name of the planned Standard Terminal Arrival (STAR) procedure.
  /// Example: /// Example: ADANA
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *star() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STAR);
  }
  /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
  /// Example: /// Example: Failed by FAA SAPT 184022AUG2022
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *gpsRAIM() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GPSRAIM);
  }
  /// The departure runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *depRunway() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPRUNWAY);
  }
  /// The arrival runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *arrRunway() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRRUNWAY);
  }
  /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  /// Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
  /// GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
  /// ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *routeString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROUTESTRING);
  }
  /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
  /// Example: /// Example: ['US', 'CA', 'UK']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *countryCodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COUNTRYCODES);
  }
  /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
  /// Example: /// Example: 85 MINUTES
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *etopsRating() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETOPSRATING);
  }
  /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *etopsAirfields() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ETOPSAIRFIELDS);
  }
  /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *etopsAltAirfields() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ETOPSALTAIRFIELDS);
  }
  /// The Extended Operations (ETOPS) validity window for the alternate airfield.
  /// Example: /// Example: LPLA: 0317Z-0722Z
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *etopsValWindow() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETOPSVALWINDOW);
  }
  /// Remarks from the planners concerning this flight plan.
  /// Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *plannerRemark() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNERREMARK);
  }
  /// Remarks about the planned cargo associated with this flight plan.
  /// Example: /// Example: Expecting 55,000 lbs. If different, call us.
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *cargoRemark() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CARGOREMARK);
  }
  /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -1.1
  /// Constraints: No constraints specified.
  double windFac1() const {
    return GetField<double>(VT_WINDFAC1, 0.0);
  }
  /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double windFac2() const {
    return GetField<double>(VT_WINDFAC2, 0.0);
  }
  /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  double windFacAvg() const {
    return GetField<double>(VT_WINDFACAVG, 0.0);
  }
  /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
  /// Example: /// Example: 16.1
  /// Constraints: No constraints specified.
  double avgTempDev() const {
    return GetField<double>(VT_AVGTEMPDEV, 0.0);
  }
  /// Array of Air Traffic Control (ATC) addresses.
  /// Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *atcAddresses() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ATCADDRESSES);
  }
  /// Air Traffic Control address filing the flight plan.
  /// Example: /// Example: ETARYXYX
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *originator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINATOR);
  }
  /// The number of aircraft flying this flight plan.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numAircraft() const {
    return GetField<int32_t>(VT_NUMAIRCRAFT, 0);
  }
  /// The flight rules this flight plan is being filed under.
  /// Example: /// Example: l
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *flightRules() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLIGHTRULES);
  }
  /// The type of flight (MILITARY, CIVILIAN, etc).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *flightType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLIGHTTYPE);
  }
  /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
  /// Example: /// Example: N0305
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *initialCruiseSpeed() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INITIALCRUISESPEED);
  }
  /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
  /// Example: /// Example: F270
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *initialFlightLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INITIALFLIGHTLEVEL);
  }
  /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDS
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *arrAlternate1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRALTERNATE1);
  }
  /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDM
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *arrAlternate2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRALTERNATE2);
  }
  /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: LFPO
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *depAlternate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPALTERNATE);
  }
  /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *wakeTurbCat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WAKETURBCAT);
  }
  /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
  /// Example: /// Example: SDFGHIRTUWXYZ/H
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *equipment() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQUIPMENT);
  }
  /// Additional remarks for air traffic control for this flight.
  /// Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  FlightPlan_Full_dataMode_Enum dataMode() const {
    return static_cast<FlightPlan_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Collection of air refueling events occurring on this flight.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *airRefuelEvents() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AIRREFUELEVENTS);
  }
  /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanMessages() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FLIGHTPLANMESSAGES);
  }
  /// Collection of waypoints associated with this flight plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanWaypoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FLIGHTPLANWAYPOINTS);
  }
  /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanPointGroups() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FLIGHTPLANPOINTGROUPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_AMCMISSIONID) &&
           verifier.VerifyString(amcMissionId()) &&
           VerifyOffset(verifier, VT_IDSORTIE) &&
           verifier.VerifyString(idSortie()) &&
           VerifyOffset(verifier, VT_IDAIRCRAFT) &&
           verifier.VerifyString(idAircraft()) &&
           VerifyField<int32_t>(verifier, VT_LEGNUM, 4) &&
           VerifyOffset(verifier, VT_IDDEPAIRFIELD) &&
           verifier.VerifyString(idDepAirfield()) &&
           VerifyOffset(verifier, VT_DEPAIRFIELD) &&
           verifier.VerifyString(depAirfield()) &&
           VerifyOffset(verifier, VT_IDARRAIRFIELD) &&
           verifier.VerifyString(idArrAirfield()) &&
           VerifyOffset(verifier, VT_ARRAIRFIELD) &&
           verifier.VerifyString(arrAirfield()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_GENTS) &&
           verifier.VerifyString(genTS()) &&
           VerifyOffset(verifier, VT_AIRCRAFTMDS) &&
           verifier.VerifyString(aircraftMDS()) &&
           VerifyOffset(verifier, VT_TAILNUMBER) &&
           verifier.VerifyString(tailNumber()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_WXVALIDSTART) &&
           verifier.VerifyString(wxValidStart()) &&
           VerifyOffset(verifier, VT_WXVALIDEND) &&
           verifier.VerifyString(wxValidEnd()) &&
           VerifyOffset(verifier, VT_ESTDEPTIME) &&
           verifier.VerifyString(estDepTime()) &&
           VerifyField<double>(verifier, VT_DRAGINDEX, 8) &&
           VerifyField<double>(verifier, VT_FUELDEGRADE, 8) &&
           VerifyField<double>(verifier, VT_OPWEIGHT, 8) &&
           VerifyField<double>(verifier, VT_MSNINDEX, 8) &&
           VerifyField<double>(verifier, VT_RAMPFUEL, 8) &&
           VerifyField<double>(verifier, VT_TAXIFUEL, 8) &&
           VerifyField<double>(verifier, VT_TAKEOFFFUEL, 8) &&
           VerifyField<double>(verifier, VT_CLIMBFUEL, 8) &&
           VerifyOffset(verifier, VT_CLIMBTIME) &&
           verifier.VerifyString(climbTime()) &&
           VerifyField<double>(verifier, VT_HOLDDOWNFUEL, 8) &&
           VerifyField<double>(verifier, VT_TOCICEFUEL, 8) &&
           VerifyField<double>(verifier, VT_TOCFUEL, 8) &&
           VerifyField<double>(verifier, VT_ENROUTEFUEL, 8) &&
           VerifyOffset(verifier, VT_ENROUTETIME) &&
           verifier.VerifyString(enrouteTime()) &&
           VerifyField<double>(verifier, VT_THUNDERAVOIDFUEL, 8) &&
           VerifyField<double>(verifier, VT_TODICEFUEL, 8) &&
           VerifyField<double>(verifier, VT_OPCONDITIONFUEL, 8) &&
           VerifyField<double>(verifier, VT_TODFUEL, 8) &&
           VerifyField<double>(verifier, VT_EARLYDESCENTFUEL, 8) &&
           VerifyField<double>(verifier, VT_ARRICEFUEL, 8) &&
           VerifyField<double>(verifier, VT_HOLDFUEL, 8) &&
           VerifyOffset(verifier, VT_HOLDTIME) &&
           verifier.VerifyString(holdTime()) &&
           VerifyField<double>(verifier, VT_APPLANDINGFUEL, 8) &&
           VerifyField<double>(verifier, VT_BURNEDFUEL, 8) &&
           VerifyField<double>(verifier, VT_LANDINGFUEL, 8) &&
           VerifyField<double>(verifier, VT_MINDIVERTFUEL, 8) &&
           VerifyField<double>(verifier, VT_ARRALTERNATE1FUEL, 8) &&
           VerifyField<double>(verifier, VT_ARRALTERNATE2FUEL, 8) &&
           VerifyField<double>(verifier, VT_CONTINGENCYFUEL, 8) &&
           VerifyField<double>(verifier, VT_RESERVEFUEL, 8) &&
           VerifyField<double>(verifier, VT_DEPRESSFUEL, 8) &&
           VerifyField<double>(verifier, VT_UNUSABLEFUEL, 8) &&
           VerifyField<double>(verifier, VT_UNIDENTEXTRAFUEL, 8) &&
           VerifyField<double>(verifier, VT_IDENTEXTRAFUEL, 8) &&
           VerifyField<double>(verifier, VT_REMALTERNATE1FUEL, 8) &&
           VerifyField<double>(verifier, VT_REMALTERNATE2FUEL, 8) &&
           VerifyOffset(verifier, VT_ENDURANCETIME) &&
           verifier.VerifyString(enduranceTime()) &&
           VerifyOffset(verifier, VT_SID) &&
           verifier.VerifyString(sid()) &&
           VerifyOffset(verifier, VT_STAR) &&
           verifier.VerifyString(star()) &&
           VerifyOffset(verifier, VT_GPSRAIM) &&
           verifier.VerifyString(gpsRAIM()) &&
           VerifyOffset(verifier, VT_DEPRUNWAY) &&
           verifier.VerifyString(depRunway()) &&
           VerifyOffset(verifier, VT_ARRRUNWAY) &&
           verifier.VerifyString(arrRunway()) &&
           VerifyOffset(verifier, VT_ROUTESTRING) &&
           verifier.VerifyString(routeString()) &&
           VerifyOffset(verifier, VT_COUNTRYCODES) &&
           verifier.VerifyVector(countryCodes()) &&
           verifier.VerifyVectorOfStrings(countryCodes()) &&
           VerifyOffset(verifier, VT_ETOPSRATING) &&
           verifier.VerifyString(etopsRating()) &&
           VerifyOffset(verifier, VT_ETOPSAIRFIELDS) &&
           verifier.VerifyVector(etopsAirfields()) &&
           verifier.VerifyVectorOfStrings(etopsAirfields()) &&
           VerifyOffset(verifier, VT_ETOPSALTAIRFIELDS) &&
           verifier.VerifyVector(etopsAltAirfields()) &&
           verifier.VerifyVectorOfStrings(etopsAltAirfields()) &&
           VerifyOffset(verifier, VT_ETOPSVALWINDOW) &&
           verifier.VerifyString(etopsValWindow()) &&
           VerifyOffset(verifier, VT_PLANNERREMARK) &&
           verifier.VerifyString(plannerRemark()) &&
           VerifyOffset(verifier, VT_CARGOREMARK) &&
           verifier.VerifyString(cargoRemark()) &&
           VerifyField<double>(verifier, VT_WINDFAC1, 8) &&
           VerifyField<double>(verifier, VT_WINDFAC2, 8) &&
           VerifyField<double>(verifier, VT_WINDFACAVG, 8) &&
           VerifyField<double>(verifier, VT_AVGTEMPDEV, 8) &&
           VerifyOffset(verifier, VT_ATCADDRESSES) &&
           verifier.VerifyVector(atcAddresses()) &&
           verifier.VerifyVectorOfStrings(atcAddresses()) &&
           VerifyOffset(verifier, VT_ORIGINATOR) &&
           verifier.VerifyString(originator()) &&
           VerifyField<int32_t>(verifier, VT_NUMAIRCRAFT, 4) &&
           VerifyOffset(verifier, VT_FLIGHTRULES) &&
           verifier.VerifyString(flightRules()) &&
           VerifyOffset(verifier, VT_FLIGHTTYPE) &&
           verifier.VerifyString(flightType()) &&
           VerifyOffset(verifier, VT_INITIALCRUISESPEED) &&
           verifier.VerifyString(initialCruiseSpeed()) &&
           VerifyOffset(verifier, VT_INITIALFLIGHTLEVEL) &&
           verifier.VerifyString(initialFlightLevel()) &&
           VerifyOffset(verifier, VT_ARRALTERNATE1) &&
           verifier.VerifyString(arrAlternate1()) &&
           VerifyOffset(verifier, VT_ARRALTERNATE2) &&
           verifier.VerifyString(arrAlternate2()) &&
           VerifyOffset(verifier, VT_DEPALTERNATE) &&
           verifier.VerifyString(depAlternate()) &&
           VerifyOffset(verifier, VT_WAKETURBCAT) &&
           verifier.VerifyString(wakeTurbCat()) &&
           VerifyOffset(verifier, VT_EQUIPMENT) &&
           verifier.VerifyString(equipment()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_AIRREFUELEVENTS) &&
           verifier.VerifyVector(airRefuelEvents()) &&
           verifier.VerifyVectorOfStrings(airRefuelEvents()) &&
           VerifyOffset(verifier, VT_FLIGHTPLANMESSAGES) &&
           verifier.VerifyVector(flightPlanMessages()) &&
           verifier.VerifyVectorOfStrings(flightPlanMessages()) &&
           VerifyOffset(verifier, VT_FLIGHTPLANWAYPOINTS) &&
           verifier.VerifyVector(flightPlanWaypoints()) &&
           verifier.VerifyVectorOfStrings(flightPlanWaypoints()) &&
           VerifyOffset(verifier, VT_FLIGHTPLANPOINTGROUPS) &&
           verifier.VerifyVector(flightPlanPointGroups()) &&
           verifier.VerifyVectorOfStrings(flightPlanPointGroups()) &&
           verifier.EndTable();
  }
};

struct FlightPlan_FullBuilder {
  typedef FlightPlan_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(FlightPlan_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(FlightPlan_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_amcMissionId(::flatbuffers::Offset<::flatbuffers::String> amcMissionId) {
    fbb_.AddOffset(FlightPlan_Full::VT_AMCMISSIONID, amcMissionId);
  }
  void add_idSortie(::flatbuffers::Offset<::flatbuffers::String> idSortie) {
    fbb_.AddOffset(FlightPlan_Full::VT_IDSORTIE, idSortie);
  }
  void add_idAircraft(::flatbuffers::Offset<::flatbuffers::String> idAircraft) {
    fbb_.AddOffset(FlightPlan_Full::VT_IDAIRCRAFT, idAircraft);
  }
  void add_legNum(int32_t legNum) {
    fbb_.AddElement<int32_t>(FlightPlan_Full::VT_LEGNUM, legNum, 0);
  }
  void add_idDepAirfield(::flatbuffers::Offset<::flatbuffers::String> idDepAirfield) {
    fbb_.AddOffset(FlightPlan_Full::VT_IDDEPAIRFIELD, idDepAirfield);
  }
  void add_depAirfield(::flatbuffers::Offset<::flatbuffers::String> depAirfield) {
    fbb_.AddOffset(FlightPlan_Full::VT_DEPAIRFIELD, depAirfield);
  }
  void add_idArrAirfield(::flatbuffers::Offset<::flatbuffers::String> idArrAirfield) {
    fbb_.AddOffset(FlightPlan_Full::VT_IDARRAIRFIELD, idArrAirfield);
  }
  void add_arrAirfield(::flatbuffers::Offset<::flatbuffers::String> arrAirfield) {
    fbb_.AddOffset(FlightPlan_Full::VT_ARRAIRFIELD, arrAirfield);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(FlightPlan_Full::VT_EXTERNALID, externalId);
  }
  void add_genTS(::flatbuffers::Offset<::flatbuffers::String> genTS) {
    fbb_.AddOffset(FlightPlan_Full::VT_GENTS, genTS);
  }
  void add_aircraftMDS(::flatbuffers::Offset<::flatbuffers::String> aircraftMDS) {
    fbb_.AddOffset(FlightPlan_Full::VT_AIRCRAFTMDS, aircraftMDS);
  }
  void add_tailNumber(::flatbuffers::Offset<::flatbuffers::String> tailNumber) {
    fbb_.AddOffset(FlightPlan_Full::VT_TAILNUMBER, tailNumber);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(FlightPlan_Full::VT_CALLSIGN, callSign);
  }
  void add_wxValidStart(::flatbuffers::Offset<::flatbuffers::String> wxValidStart) {
    fbb_.AddOffset(FlightPlan_Full::VT_WXVALIDSTART, wxValidStart);
  }
  void add_wxValidEnd(::flatbuffers::Offset<::flatbuffers::String> wxValidEnd) {
    fbb_.AddOffset(FlightPlan_Full::VT_WXVALIDEND, wxValidEnd);
  }
  void add_estDepTime(::flatbuffers::Offset<::flatbuffers::String> estDepTime) {
    fbb_.AddOffset(FlightPlan_Full::VT_ESTDEPTIME, estDepTime);
  }
  void add_dragIndex(double dragIndex) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_DRAGINDEX, dragIndex, 0.0);
  }
  void add_fuelDegrade(double fuelDegrade) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_FUELDEGRADE, fuelDegrade, 0.0);
  }
  void add_opWeight(double opWeight) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_OPWEIGHT, opWeight, 0.0);
  }
  void add_msnIndex(double msnIndex) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_MSNINDEX, msnIndex, 0.0);
  }
  void add_rampFuel(double rampFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_RAMPFUEL, rampFuel, 0.0);
  }
  void add_taxiFuel(double taxiFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TAXIFUEL, taxiFuel, 0.0);
  }
  void add_takeoffFuel(double takeoffFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TAKEOFFFUEL, takeoffFuel, 0.0);
  }
  void add_climbFuel(double climbFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_CLIMBFUEL, climbFuel, 0.0);
  }
  void add_climbTime(::flatbuffers::Offset<::flatbuffers::String> climbTime) {
    fbb_.AddOffset(FlightPlan_Full::VT_CLIMBTIME, climbTime);
  }
  void add_holdDownFuel(double holdDownFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_HOLDDOWNFUEL, holdDownFuel, 0.0);
  }
  void add_tocIceFuel(double tocIceFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TOCICEFUEL, tocIceFuel, 0.0);
  }
  void add_tocFuel(double tocFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TOCFUEL, tocFuel, 0.0);
  }
  void add_enrouteFuel(double enrouteFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_ENROUTEFUEL, enrouteFuel, 0.0);
  }
  void add_enrouteTime(::flatbuffers::Offset<::flatbuffers::String> enrouteTime) {
    fbb_.AddOffset(FlightPlan_Full::VT_ENROUTETIME, enrouteTime);
  }
  void add_thunderAvoidFuel(double thunderAvoidFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_THUNDERAVOIDFUEL, thunderAvoidFuel, 0.0);
  }
  void add_todIceFuel(double todIceFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TODICEFUEL, todIceFuel, 0.0);
  }
  void add_opConditionFuel(double opConditionFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_OPCONDITIONFUEL, opConditionFuel, 0.0);
  }
  void add_todFuel(double todFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_TODFUEL, todFuel, 0.0);
  }
  void add_earlyDescentFuel(double earlyDescentFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_EARLYDESCENTFUEL, earlyDescentFuel, 0.0);
  }
  void add_arrIceFuel(double arrIceFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_ARRICEFUEL, arrIceFuel, 0.0);
  }
  void add_holdFuel(double holdFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_HOLDFUEL, holdFuel, 0.0);
  }
  void add_holdTime(::flatbuffers::Offset<::flatbuffers::String> holdTime) {
    fbb_.AddOffset(FlightPlan_Full::VT_HOLDTIME, holdTime);
  }
  void add_appLandingFuel(double appLandingFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_APPLANDINGFUEL, appLandingFuel, 0.0);
  }
  void add_burnedFuel(double burnedFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_BURNEDFUEL, burnedFuel, 0.0);
  }
  void add_landingFuel(double landingFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_LANDINGFUEL, landingFuel, 0.0);
  }
  void add_minDivertFuel(double minDivertFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_MINDIVERTFUEL, minDivertFuel, 0.0);
  }
  void add_arrAlternate1Fuel(double arrAlternate1Fuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_ARRALTERNATE1FUEL, arrAlternate1Fuel, 0.0);
  }
  void add_arrAlternate2Fuel(double arrAlternate2Fuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_ARRALTERNATE2FUEL, arrAlternate2Fuel, 0.0);
  }
  void add_contingencyFuel(double contingencyFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_CONTINGENCYFUEL, contingencyFuel, 0.0);
  }
  void add_reserveFuel(double reserveFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_RESERVEFUEL, reserveFuel, 0.0);
  }
  void add_depressFuel(double depressFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_DEPRESSFUEL, depressFuel, 0.0);
  }
  void add_unusableFuel(double unusableFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_UNUSABLEFUEL, unusableFuel, 0.0);
  }
  void add_unidentExtraFuel(double unidentExtraFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_UNIDENTEXTRAFUEL, unidentExtraFuel, 0.0);
  }
  void add_identExtraFuel(double identExtraFuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_IDENTEXTRAFUEL, identExtraFuel, 0.0);
  }
  void add_remAlternate1Fuel(double remAlternate1Fuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_REMALTERNATE1FUEL, remAlternate1Fuel, 0.0);
  }
  void add_remAlternate2Fuel(double remAlternate2Fuel) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_REMALTERNATE2FUEL, remAlternate2Fuel, 0.0);
  }
  void add_enduranceTime(::flatbuffers::Offset<::flatbuffers::String> enduranceTime) {
    fbb_.AddOffset(FlightPlan_Full::VT_ENDURANCETIME, enduranceTime);
  }
  void add_sid(::flatbuffers::Offset<::flatbuffers::String> sid) {
    fbb_.AddOffset(FlightPlan_Full::VT_SID, sid);
  }
  void add_star(::flatbuffers::Offset<::flatbuffers::String> star) {
    fbb_.AddOffset(FlightPlan_Full::VT_STAR, star);
  }
  void add_gpsRAIM(::flatbuffers::Offset<::flatbuffers::String> gpsRAIM) {
    fbb_.AddOffset(FlightPlan_Full::VT_GPSRAIM, gpsRAIM);
  }
  void add_depRunway(::flatbuffers::Offset<::flatbuffers::String> depRunway) {
    fbb_.AddOffset(FlightPlan_Full::VT_DEPRUNWAY, depRunway);
  }
  void add_arrRunway(::flatbuffers::Offset<::flatbuffers::String> arrRunway) {
    fbb_.AddOffset(FlightPlan_Full::VT_ARRRUNWAY, arrRunway);
  }
  void add_routeString(::flatbuffers::Offset<::flatbuffers::String> routeString) {
    fbb_.AddOffset(FlightPlan_Full::VT_ROUTESTRING, routeString);
  }
  void add_countryCodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> countryCodes) {
    fbb_.AddOffset(FlightPlan_Full::VT_COUNTRYCODES, countryCodes);
  }
  void add_etopsRating(::flatbuffers::Offset<::flatbuffers::String> etopsRating) {
    fbb_.AddOffset(FlightPlan_Full::VT_ETOPSRATING, etopsRating);
  }
  void add_etopsAirfields(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etopsAirfields) {
    fbb_.AddOffset(FlightPlan_Full::VT_ETOPSAIRFIELDS, etopsAirfields);
  }
  void add_etopsAltAirfields(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etopsAltAirfields) {
    fbb_.AddOffset(FlightPlan_Full::VT_ETOPSALTAIRFIELDS, etopsAltAirfields);
  }
  void add_etopsValWindow(::flatbuffers::Offset<::flatbuffers::String> etopsValWindow) {
    fbb_.AddOffset(FlightPlan_Full::VT_ETOPSVALWINDOW, etopsValWindow);
  }
  void add_plannerRemark(::flatbuffers::Offset<::flatbuffers::String> plannerRemark) {
    fbb_.AddOffset(FlightPlan_Full::VT_PLANNERREMARK, plannerRemark);
  }
  void add_cargoRemark(::flatbuffers::Offset<::flatbuffers::String> cargoRemark) {
    fbb_.AddOffset(FlightPlan_Full::VT_CARGOREMARK, cargoRemark);
  }
  void add_windFac1(double windFac1) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_WINDFAC1, windFac1, 0.0);
  }
  void add_windFac2(double windFac2) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_WINDFAC2, windFac2, 0.0);
  }
  void add_windFacAvg(double windFacAvg) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_WINDFACAVG, windFacAvg, 0.0);
  }
  void add_avgTempDev(double avgTempDev) {
    fbb_.AddElement<double>(FlightPlan_Full::VT_AVGTEMPDEV, avgTempDev, 0.0);
  }
  void add_atcAddresses(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> atcAddresses) {
    fbb_.AddOffset(FlightPlan_Full::VT_ATCADDRESSES, atcAddresses);
  }
  void add_originator(::flatbuffers::Offset<::flatbuffers::String> originator) {
    fbb_.AddOffset(FlightPlan_Full::VT_ORIGINATOR, originator);
  }
  void add_numAircraft(int32_t numAircraft) {
    fbb_.AddElement<int32_t>(FlightPlan_Full::VT_NUMAIRCRAFT, numAircraft, 0);
  }
  void add_flightRules(::flatbuffers::Offset<::flatbuffers::String> flightRules) {
    fbb_.AddOffset(FlightPlan_Full::VT_FLIGHTRULES, flightRules);
  }
  void add_flightType(::flatbuffers::Offset<::flatbuffers::String> flightType) {
    fbb_.AddOffset(FlightPlan_Full::VT_FLIGHTTYPE, flightType);
  }
  void add_initialCruiseSpeed(::flatbuffers::Offset<::flatbuffers::String> initialCruiseSpeed) {
    fbb_.AddOffset(FlightPlan_Full::VT_INITIALCRUISESPEED, initialCruiseSpeed);
  }
  void add_initialFlightLevel(::flatbuffers::Offset<::flatbuffers::String> initialFlightLevel) {
    fbb_.AddOffset(FlightPlan_Full::VT_INITIALFLIGHTLEVEL, initialFlightLevel);
  }
  void add_arrAlternate1(::flatbuffers::Offset<::flatbuffers::String> arrAlternate1) {
    fbb_.AddOffset(FlightPlan_Full::VT_ARRALTERNATE1, arrAlternate1);
  }
  void add_arrAlternate2(::flatbuffers::Offset<::flatbuffers::String> arrAlternate2) {
    fbb_.AddOffset(FlightPlan_Full::VT_ARRALTERNATE2, arrAlternate2);
  }
  void add_depAlternate(::flatbuffers::Offset<::flatbuffers::String> depAlternate) {
    fbb_.AddOffset(FlightPlan_Full::VT_DEPALTERNATE, depAlternate);
  }
  void add_wakeTurbCat(::flatbuffers::Offset<::flatbuffers::String> wakeTurbCat) {
    fbb_.AddOffset(FlightPlan_Full::VT_WAKETURBCAT, wakeTurbCat);
  }
  void add_equipment(::flatbuffers::Offset<::flatbuffers::String> equipment) {
    fbb_.AddOffset(FlightPlan_Full::VT_EQUIPMENT, equipment);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(FlightPlan_Full::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(FlightPlan_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(FlightPlan_Full::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(FlightPlan_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(FlightPlan_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(FlightPlan_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(FlightPlan_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(FlightPlan_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(FlightPlan_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_airRefuelEvents(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> airRefuelEvents) {
    fbb_.AddOffset(FlightPlan_Full::VT_AIRREFUELEVENTS, airRefuelEvents);
  }
  void add_flightPlanMessages(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanMessages) {
    fbb_.AddOffset(FlightPlan_Full::VT_FLIGHTPLANMESSAGES, flightPlanMessages);
  }
  void add_flightPlanWaypoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanWaypoints) {
    fbb_.AddOffset(FlightPlan_Full::VT_FLIGHTPLANWAYPOINTS, flightPlanWaypoints);
  }
  void add_flightPlanPointGroups(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanPointGroups) {
    fbb_.AddOffset(FlightPlan_Full::VT_FLIGHTPLANPOINTGROUPS, flightPlanPointGroups);
  }
  explicit FlightPlan_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlan_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlan_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlan_Full> CreateFlightPlan_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAircraft = 0,
    int32_t legNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idDepAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idArrAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> genTS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wxValidStart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wxValidEnd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estDepTime = 0,
    double dragIndex = 0.0,
    double fuelDegrade = 0.0,
    double opWeight = 0.0,
    double msnIndex = 0.0,
    double rampFuel = 0.0,
    double taxiFuel = 0.0,
    double takeoffFuel = 0.0,
    double climbFuel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> climbTime = 0,
    double holdDownFuel = 0.0,
    double tocIceFuel = 0.0,
    double tocFuel = 0.0,
    double enrouteFuel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> enrouteTime = 0,
    double thunderAvoidFuel = 0.0,
    double todIceFuel = 0.0,
    double opConditionFuel = 0.0,
    double todFuel = 0.0,
    double earlyDescentFuel = 0.0,
    double arrIceFuel = 0.0,
    double holdFuel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> holdTime = 0,
    double appLandingFuel = 0.0,
    double burnedFuel = 0.0,
    double landingFuel = 0.0,
    double minDivertFuel = 0.0,
    double arrAlternate1Fuel = 0.0,
    double arrAlternate2Fuel = 0.0,
    double contingencyFuel = 0.0,
    double reserveFuel = 0.0,
    double depressFuel = 0.0,
    double unusableFuel = 0.0,
    double unidentExtraFuel = 0.0,
    double identExtraFuel = 0.0,
    double remAlternate1Fuel = 0.0,
    double remAlternate2Fuel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> enduranceTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> star = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gpsRAIM = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depRunway = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrRunway = 0,
    ::flatbuffers::Offset<::flatbuffers::String> routeString = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> countryCodes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> etopsRating = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etopsAirfields = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etopsAltAirfields = 0,
    ::flatbuffers::Offset<::flatbuffers::String> etopsValWindow = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plannerRemark = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cargoRemark = 0,
    double windFac1 = 0.0,
    double windFac2 = 0.0,
    double windFacAvg = 0.0,
    double avgTempDev = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> atcAddresses = 0,
    ::flatbuffers::Offset<::flatbuffers::String> originator = 0,
    int32_t numAircraft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> flightRules = 0,
    ::flatbuffers::Offset<::flatbuffers::String> flightType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> initialCruiseSpeed = 0,
    ::flatbuffers::Offset<::flatbuffers::String> initialFlightLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrAlternate1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrAlternate2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depAlternate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wakeTurbCat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> equipment = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    FlightPlan_Full_dataMode_Enum dataMode = FlightPlan_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> airRefuelEvents = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanMessages = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanWaypoints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> flightPlanPointGroups = 0) {
  FlightPlan_FullBuilder builder_(_fbb);
  builder_.add_avgTempDev(avgTempDev);
  builder_.add_windFacAvg(windFacAvg);
  builder_.add_windFac2(windFac2);
  builder_.add_windFac1(windFac1);
  builder_.add_remAlternate2Fuel(remAlternate2Fuel);
  builder_.add_remAlternate1Fuel(remAlternate1Fuel);
  builder_.add_identExtraFuel(identExtraFuel);
  builder_.add_unidentExtraFuel(unidentExtraFuel);
  builder_.add_unusableFuel(unusableFuel);
  builder_.add_depressFuel(depressFuel);
  builder_.add_reserveFuel(reserveFuel);
  builder_.add_contingencyFuel(contingencyFuel);
  builder_.add_arrAlternate2Fuel(arrAlternate2Fuel);
  builder_.add_arrAlternate1Fuel(arrAlternate1Fuel);
  builder_.add_minDivertFuel(minDivertFuel);
  builder_.add_landingFuel(landingFuel);
  builder_.add_burnedFuel(burnedFuel);
  builder_.add_appLandingFuel(appLandingFuel);
  builder_.add_holdFuel(holdFuel);
  builder_.add_arrIceFuel(arrIceFuel);
  builder_.add_earlyDescentFuel(earlyDescentFuel);
  builder_.add_todFuel(todFuel);
  builder_.add_opConditionFuel(opConditionFuel);
  builder_.add_todIceFuel(todIceFuel);
  builder_.add_thunderAvoidFuel(thunderAvoidFuel);
  builder_.add_enrouteFuel(enrouteFuel);
  builder_.add_tocFuel(tocFuel);
  builder_.add_tocIceFuel(tocIceFuel);
  builder_.add_holdDownFuel(holdDownFuel);
  builder_.add_climbFuel(climbFuel);
  builder_.add_takeoffFuel(takeoffFuel);
  builder_.add_taxiFuel(taxiFuel);
  builder_.add_rampFuel(rampFuel);
  builder_.add_msnIndex(msnIndex);
  builder_.add_opWeight(opWeight);
  builder_.add_fuelDegrade(fuelDegrade);
  builder_.add_dragIndex(dragIndex);
  builder_.add_flightPlanPointGroups(flightPlanPointGroups);
  builder_.add_flightPlanWaypoints(flightPlanWaypoints);
  builder_.add_flightPlanMessages(flightPlanMessages);
  builder_.add_airRefuelEvents(airRefuelEvents);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_equipment(equipment);
  builder_.add_wakeTurbCat(wakeTurbCat);
  builder_.add_depAlternate(depAlternate);
  builder_.add_arrAlternate2(arrAlternate2);
  builder_.add_arrAlternate1(arrAlternate1);
  builder_.add_initialFlightLevel(initialFlightLevel);
  builder_.add_initialCruiseSpeed(initialCruiseSpeed);
  builder_.add_flightType(flightType);
  builder_.add_flightRules(flightRules);
  builder_.add_numAircraft(numAircraft);
  builder_.add_originator(originator);
  builder_.add_atcAddresses(atcAddresses);
  builder_.add_cargoRemark(cargoRemark);
  builder_.add_plannerRemark(plannerRemark);
  builder_.add_etopsValWindow(etopsValWindow);
  builder_.add_etopsAltAirfields(etopsAltAirfields);
  builder_.add_etopsAirfields(etopsAirfields);
  builder_.add_etopsRating(etopsRating);
  builder_.add_countryCodes(countryCodes);
  builder_.add_routeString(routeString);
  builder_.add_arrRunway(arrRunway);
  builder_.add_depRunway(depRunway);
  builder_.add_gpsRAIM(gpsRAIM);
  builder_.add_star(star);
  builder_.add_sid(sid);
  builder_.add_enduranceTime(enduranceTime);
  builder_.add_holdTime(holdTime);
  builder_.add_enrouteTime(enrouteTime);
  builder_.add_climbTime(climbTime);
  builder_.add_estDepTime(estDepTime);
  builder_.add_wxValidEnd(wxValidEnd);
  builder_.add_wxValidStart(wxValidStart);
  builder_.add_callSign(callSign);
  builder_.add_tailNumber(tailNumber);
  builder_.add_aircraftMDS(aircraftMDS);
  builder_.add_genTS(genTS);
  builder_.add_externalId(externalId);
  builder_.add_arrAirfield(arrAirfield);
  builder_.add_idArrAirfield(idArrAirfield);
  builder_.add_depAirfield(depAirfield);
  builder_.add_idDepAirfield(idDepAirfield);
  builder_.add_legNum(legNum);
  builder_.add_idAircraft(idAircraft);
  builder_.add_idSortie(idSortie);
  builder_.add_amcMissionId(amcMissionId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlan_Full> CreateFlightPlan_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *amcMissionId = nullptr,
    const char *idSortie = nullptr,
    const char *idAircraft = nullptr,
    int32_t legNum = 0,
    const char *idDepAirfield = nullptr,
    const char *depAirfield = nullptr,
    const char *idArrAirfield = nullptr,
    const char *arrAirfield = nullptr,
    const char *externalId = nullptr,
    const char *genTS = nullptr,
    const char *aircraftMDS = nullptr,
    const char *tailNumber = nullptr,
    const char *callSign = nullptr,
    const char *wxValidStart = nullptr,
    const char *wxValidEnd = nullptr,
    const char *estDepTime = nullptr,
    double dragIndex = 0.0,
    double fuelDegrade = 0.0,
    double opWeight = 0.0,
    double msnIndex = 0.0,
    double rampFuel = 0.0,
    double taxiFuel = 0.0,
    double takeoffFuel = 0.0,
    double climbFuel = 0.0,
    const char *climbTime = nullptr,
    double holdDownFuel = 0.0,
    double tocIceFuel = 0.0,
    double tocFuel = 0.0,
    double enrouteFuel = 0.0,
    const char *enrouteTime = nullptr,
    double thunderAvoidFuel = 0.0,
    double todIceFuel = 0.0,
    double opConditionFuel = 0.0,
    double todFuel = 0.0,
    double earlyDescentFuel = 0.0,
    double arrIceFuel = 0.0,
    double holdFuel = 0.0,
    const char *holdTime = nullptr,
    double appLandingFuel = 0.0,
    double burnedFuel = 0.0,
    double landingFuel = 0.0,
    double minDivertFuel = 0.0,
    double arrAlternate1Fuel = 0.0,
    double arrAlternate2Fuel = 0.0,
    double contingencyFuel = 0.0,
    double reserveFuel = 0.0,
    double depressFuel = 0.0,
    double unusableFuel = 0.0,
    double unidentExtraFuel = 0.0,
    double identExtraFuel = 0.0,
    double remAlternate1Fuel = 0.0,
    double remAlternate2Fuel = 0.0,
    const char *enduranceTime = nullptr,
    const char *sid = nullptr,
    const char *star = nullptr,
    const char *gpsRAIM = nullptr,
    const char *depRunway = nullptr,
    const char *arrRunway = nullptr,
    const char *routeString = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *countryCodes = nullptr,
    const char *etopsRating = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *etopsAirfields = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *etopsAltAirfields = nullptr,
    const char *etopsValWindow = nullptr,
    const char *plannerRemark = nullptr,
    const char *cargoRemark = nullptr,
    double windFac1 = 0.0,
    double windFac2 = 0.0,
    double windFacAvg = 0.0,
    double avgTempDev = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *atcAddresses = nullptr,
    const char *originator = nullptr,
    int32_t numAircraft = 0,
    const char *flightRules = nullptr,
    const char *flightType = nullptr,
    const char *initialCruiseSpeed = nullptr,
    const char *initialFlightLevel = nullptr,
    const char *arrAlternate1 = nullptr,
    const char *arrAlternate2 = nullptr,
    const char *depAlternate = nullptr,
    const char *wakeTurbCat = nullptr,
    const char *equipment = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    FlightPlan_Full_dataMode_Enum dataMode = FlightPlan_Full_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *airRefuelEvents = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanMessages = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanWaypoints = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *flightPlanPointGroups = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto amcMissionId__ = amcMissionId ? _fbb.CreateString(amcMissionId) : 0;
  auto idSortie__ = idSortie ? _fbb.CreateString(idSortie) : 0;
  auto idAircraft__ = idAircraft ? _fbb.CreateString(idAircraft) : 0;
  auto idDepAirfield__ = idDepAirfield ? _fbb.CreateString(idDepAirfield) : 0;
  auto depAirfield__ = depAirfield ? _fbb.CreateString(depAirfield) : 0;
  auto idArrAirfield__ = idArrAirfield ? _fbb.CreateString(idArrAirfield) : 0;
  auto arrAirfield__ = arrAirfield ? _fbb.CreateString(arrAirfield) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto genTS__ = genTS ? _fbb.CreateString(genTS) : 0;
  auto aircraftMDS__ = aircraftMDS ? _fbb.CreateString(aircraftMDS) : 0;
  auto tailNumber__ = tailNumber ? _fbb.CreateString(tailNumber) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto wxValidStart__ = wxValidStart ? _fbb.CreateString(wxValidStart) : 0;
  auto wxValidEnd__ = wxValidEnd ? _fbb.CreateString(wxValidEnd) : 0;
  auto estDepTime__ = estDepTime ? _fbb.CreateString(estDepTime) : 0;
  auto climbTime__ = climbTime ? _fbb.CreateString(climbTime) : 0;
  auto enrouteTime__ = enrouteTime ? _fbb.CreateString(enrouteTime) : 0;
  auto holdTime__ = holdTime ? _fbb.CreateString(holdTime) : 0;
  auto enduranceTime__ = enduranceTime ? _fbb.CreateString(enduranceTime) : 0;
  auto sid__ = sid ? _fbb.CreateString(sid) : 0;
  auto star__ = star ? _fbb.CreateString(star) : 0;
  auto gpsRAIM__ = gpsRAIM ? _fbb.CreateString(gpsRAIM) : 0;
  auto depRunway__ = depRunway ? _fbb.CreateString(depRunway) : 0;
  auto arrRunway__ = arrRunway ? _fbb.CreateString(arrRunway) : 0;
  auto routeString__ = routeString ? _fbb.CreateString(routeString) : 0;
  auto countryCodes__ = countryCodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*countryCodes) : 0;
  auto etopsRating__ = etopsRating ? _fbb.CreateString(etopsRating) : 0;
  auto etopsAirfields__ = etopsAirfields ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*etopsAirfields) : 0;
  auto etopsAltAirfields__ = etopsAltAirfields ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*etopsAltAirfields) : 0;
  auto etopsValWindow__ = etopsValWindow ? _fbb.CreateString(etopsValWindow) : 0;
  auto plannerRemark__ = plannerRemark ? _fbb.CreateString(plannerRemark) : 0;
  auto cargoRemark__ = cargoRemark ? _fbb.CreateString(cargoRemark) : 0;
  auto atcAddresses__ = atcAddresses ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*atcAddresses) : 0;
  auto originator__ = originator ? _fbb.CreateString(originator) : 0;
  auto flightRules__ = flightRules ? _fbb.CreateString(flightRules) : 0;
  auto flightType__ = flightType ? _fbb.CreateString(flightType) : 0;
  auto initialCruiseSpeed__ = initialCruiseSpeed ? _fbb.CreateString(initialCruiseSpeed) : 0;
  auto initialFlightLevel__ = initialFlightLevel ? _fbb.CreateString(initialFlightLevel) : 0;
  auto arrAlternate1__ = arrAlternate1 ? _fbb.CreateString(arrAlternate1) : 0;
  auto arrAlternate2__ = arrAlternate2 ? _fbb.CreateString(arrAlternate2) : 0;
  auto depAlternate__ = depAlternate ? _fbb.CreateString(depAlternate) : 0;
  auto wakeTurbCat__ = wakeTurbCat ? _fbb.CreateString(wakeTurbCat) : 0;
  auto equipment__ = equipment ? _fbb.CreateString(equipment) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto airRefuelEvents__ = airRefuelEvents ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*airRefuelEvents) : 0;
  auto flightPlanMessages__ = flightPlanMessages ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*flightPlanMessages) : 0;
  auto flightPlanWaypoints__ = flightPlanWaypoints ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*flightPlanWaypoints) : 0;
  auto flightPlanPointGroups__ = flightPlanPointGroups ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*flightPlanPointGroups) : 0;
  return CreateFlightPlan_Full(
      _fbb,
      id__,
      classificationMarking__,
      amcMissionId__,
      idSortie__,
      idAircraft__,
      legNum,
      idDepAirfield__,
      depAirfield__,
      idArrAirfield__,
      arrAirfield__,
      externalId__,
      genTS__,
      aircraftMDS__,
      tailNumber__,
      callSign__,
      wxValidStart__,
      wxValidEnd__,
      estDepTime__,
      dragIndex,
      fuelDegrade,
      opWeight,
      msnIndex,
      rampFuel,
      taxiFuel,
      takeoffFuel,
      climbFuel,
      climbTime__,
      holdDownFuel,
      tocIceFuel,
      tocFuel,
      enrouteFuel,
      enrouteTime__,
      thunderAvoidFuel,
      todIceFuel,
      opConditionFuel,
      todFuel,
      earlyDescentFuel,
      arrIceFuel,
      holdFuel,
      holdTime__,
      appLandingFuel,
      burnedFuel,
      landingFuel,
      minDivertFuel,
      arrAlternate1Fuel,
      arrAlternate2Fuel,
      contingencyFuel,
      reserveFuel,
      depressFuel,
      unusableFuel,
      unidentExtraFuel,
      identExtraFuel,
      remAlternate1Fuel,
      remAlternate2Fuel,
      enduranceTime__,
      sid__,
      star__,
      gpsRAIM__,
      depRunway__,
      arrRunway__,
      routeString__,
      countryCodes__,
      etopsRating__,
      etopsAirfields__,
      etopsAltAirfields__,
      etopsValWindow__,
      plannerRemark__,
      cargoRemark__,
      windFac1,
      windFac2,
      windFacAvg,
      avgTempDev,
      atcAddresses__,
      originator__,
      numAircraft,
      flightRules__,
      flightType__,
      initialCruiseSpeed__,
      initialFlightLevel__,
      arrAlternate1__,
      arrAlternate2__,
      depAlternate__,
      wakeTurbCat__,
      equipment__,
      notes__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      airRefuelEvents__,
      flightPlanMessages__,
      flightPlanWaypoints__,
      flightPlanPointGroups__);
}

inline const FlightPlan_Full *GetFlightPlan_Full(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlan_Full>(buf);
}

inline const FlightPlan_Full *GetSizePrefixedFlightPlan_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlan_Full>(buf);
}

inline const char *FlightPlan_FullIdentifier() {
  return "FLIG";
}

inline bool FlightPlan_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlan_FullIdentifier());
}

inline bool SizePrefixedFlightPlan_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlan_FullIdentifier(), true);
}

inline bool VerifyFlightPlan_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlan_Full>(FlightPlan_FullIdentifier());
}

inline bool VerifySizePrefixedFlightPlan_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlan_Full>(FlightPlan_FullIdentifier());
}

inline void FinishFlightPlan_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlan_Full> root) {
  fbb.Finish(root, FlightPlan_FullIdentifier());
}

inline void FinishSizePrefixedFlightPlan_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlan_Full> root) {
  fbb.FinishSizePrefixed(root, FlightPlan_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
