// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Maneuver_Abridged;
struct Maneuver_AbridgedBuilder;

enum Maneuver_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Maneuver_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Maneuver_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Maneuver_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Maneuver_Abridged_dataMode_Enum_EXERCISE = 3,
  Maneuver_Abridged_dataMode_Enum_MIN = Maneuver_Abridged_dataMode_Enum_REAL,
  Maneuver_Abridged_dataMode_Enum_MAX = Maneuver_Abridged_dataMode_Enum_EXERCISE
};

inline const Maneuver_Abridged_dataMode_Enum (&EnumValuesManeuver_Abridged_dataMode_Enum())[4] {
  static const Maneuver_Abridged_dataMode_Enum values[] = {
    Maneuver_Abridged_dataMode_Enum_REAL,
    Maneuver_Abridged_dataMode_Enum_TEST,
    Maneuver_Abridged_dataMode_Enum_SIMULATED,
    Maneuver_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesManeuver_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameManeuver_Abridged_dataMode_Enum(Maneuver_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Maneuver_Abridged_dataMode_Enum_REAL, Maneuver_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesManeuver_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
struct Maneuver_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Maneuver_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SATNO = 8,
    VT_REPORTTIME = 10,
    VT_EVENTSTARTTIME = 12,
    VT_EVENTENDTIME = 14,
    VT_TOTALBURNTIME = 16,
    VT_ODFITENDTIME = 18,
    VT_IDONORBIT = 20,
    VT_IDSENSOR = 22,
    VT_UCT = 24,
    VT_MANEUVERUNC = 26,
    VT_CHARACTERIZATION = 28,
    VT_CHARACTERIZATIONUNC = 30,
    VT_EVENTID = 32,
    VT_ORIGOBJECTID = 34,
    VT_ORIGSENSORID = 36,
    VT_STATUS = 38,
    VT_DELTAPOS = 40,
    VT_DELTAPOSU = 42,
    VT_DELTAPOSV = 44,
    VT_DELTAPOSW = 46,
    VT_DELTAVEL = 48,
    VT_DELTAVELU = 50,
    VT_DELTAVELV = 52,
    VT_DELTAVELW = 54,
    VT_DELTAMASS = 56,
    VT_PREEVENTIDELSET = 58,
    VT_PREEVENTELSET = 60,
    VT_PREEVENTIDSTATEVECTOR = 62,
    VT_PREEVENTSTATEVECTOR = 64,
    VT_PREPOSX = 66,
    VT_PREPOSY = 68,
    VT_PREPOSZ = 70,
    VT_PREVELX = 72,
    VT_PREVELY = 74,
    VT_PREVELZ = 76,
    VT_PRERADIATIONPRESSCOEFF = 78,
    VT_PREBALLISTICCOEFF = 80,
    VT_PREAPOGEE = 82,
    VT_PREPERIGEE = 84,
    VT_PREINCLINATION = 86,
    VT_PREECCENTRICITY = 88,
    VT_PREPERIOD = 90,
    VT_PRERAAN = 92,
    VT_PRESMA = 94,
    VT_PREGEOLONGITUDE = 96,
    VT_PREDRIFTRATE = 98,
    VT_PRESIGMAU = 100,
    VT_PRESIGMAV = 102,
    VT_PRESIGMAW = 104,
    VT_POSTEVENTIDELSET = 106,
    VT_POSTEVENTELSET = 108,
    VT_POSTEVENTIDSTATEVECTOR = 110,
    VT_POSTEVENTSTATEVECTOR = 112,
    VT_POSTPOSX = 114,
    VT_POSTPOSY = 116,
    VT_POSTPOSZ = 118,
    VT_POSTVELX = 120,
    VT_POSTVELY = 122,
    VT_POSTVELZ = 124,
    VT_POSTRADIATIONPRESSCOEFF = 126,
    VT_POSTBALLISTICCOEFF = 128,
    VT_POSTAPOGEE = 130,
    VT_POSTPERIGEE = 132,
    VT_POSTINCLINATION = 134,
    VT_POSTECCENTRICITY = 136,
    VT_POSTPERIOD = 138,
    VT_POSTRAAN = 140,
    VT_POSTSMA = 142,
    VT_POSTGEOLONGITUDE = 144,
    VT_POSTDRIFTRATE = 146,
    VT_POSTSIGMAU = 148,
    VT_POSTSIGMAV = 150,
    VT_POSTSIGMAW = 152,
    VT_COV = 154,
    VT_POSTMASS = 156,
    VT_POSTAREA = 158,
    VT_NUMOBS = 160,
    VT_DESCRIPTION = 162,
    VT_DESCRIPTOR = 164,
    VT_STATEMODEL = 166,
    VT_STATEMODELVERSION = 168,
    VT_NUMACCELPOINTS = 170,
    VT_MNVRACCELTIMES = 172,
    VT_MNVRACCELS = 174,
    VT_MNVRACCELUNCS = 176,
    VT_SOURCE = 178,
    VT_ORIGIN = 180,
    VT_DATAMODE = 182,
    VT_CREATEDAT = 184,
    VT_CREATEDBY = 186,
    VT_ALGORITHM = 188,
    VT_TRANSACTIONID = 190,
    VT_ORIGNETWORK = 192
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MANEUVER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-11-16T04:15:00.0001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *reportTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTTIME);
  }
  /// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
  /// Example: /// Example: 2023-11-16T01:05:16.835689Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eventStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTSTARTTIME);
  }
  /// Maneuver event end time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-11-16T01:09:01.350012Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eventEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTENDTIME);
  }
  /// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
  /// Example: /// Example: 600.72
  /// Constraints: No constraints specified.
  double totalBurnTime() const {
    return GetField<double>(VT_TOTALBURNTIME, 0.0);
  }
  /// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-11-16T03:55:51Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *odFitEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ODFITENDTIME);
  }
  /// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: 12
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool uct() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// Uncertainty in the occurrence of this maneuver (0 - 1).
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double maneuverUnc() const {
    return GetField<double>(VT_MANEUVERUNC, 0.0);
  }
  /// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
  /// Example: /// Example: North-South Station Keeping
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *characterization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHARACTERIZATION);
  }
  /// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
  /// Example: /// Example: 0.15
  /// Constraints: No constraints specified.
  double characterizationUnc() const {
    return GetField<double>(VT_CHARACTERIZATIONUNC, 0.0);
  }
  /// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
  /// Example: /// Example: EVENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *eventId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTID);
  }
  /// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
  /// CANCELLED:  A previously planned maneuver whose execution was cancelled.
  /// PLANNED:  A maneuver planned to take place at the eventStartTime.
  /// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
  /// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
  /// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
  /// Example: /// Example: POSSIBLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
  /// Example: /// Example: 0.715998327
  /// Constraints: No constraints specified.
  double deltaPos() const {
    return GetField<double>(VT_DELTAPOS, 0.0);
  }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  /// Example: /// Example: -0.022172844
  /// Constraints: No constraints specified.
  double deltaPosU() const {
    return GetField<double>(VT_DELTAPOSU, 0.0);
  }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  /// Example: /// Example: -0.033700154
  /// Constraints: No constraints specified.
  double deltaPosV() const {
    return GetField<double>(VT_DELTAPOSV, 0.0);
  }
  /// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  /// Example: /// Example: -0.714861014
  /// Constraints: No constraints specified.
  double deltaPosW() const {
    return GetField<double>(VT_DELTAPOSW, 0.0);
  }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
  /// Example: /// Example: 0.000631505
  /// Constraints: No constraints specified.
  double deltaVel() const {
    return GetField<double>(VT_DELTAVEL, 0.0);
  }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
  /// Example: /// Example: 3.50165629389647e-05
  /// Constraints: No constraints specified.
  double deltaVelU() const {
    return GetField<double>(VT_DELTAVELU, 0.0);
  }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
  /// Example: /// Example: 0.000544413
  /// Constraints: No constraints specified.
  double deltaVelV() const {
    return GetField<double>(VT_DELTAVELV, 0.0);
  }
  /// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
  /// Example: /// Example: -0.000318099
  /// Constraints: No constraints specified.
  double deltaVelW() const {
    return GetField<double>(VT_DELTAVELW, 0.0);
  }
  /// Difference in mass before and after the maneuver, in kg.
  /// Example: /// Example: 0.15
  /// Constraints: No constraints specified.
  double deltaMass() const {
    return GetField<double>(VT_DELTAMASS, 0.0);
  }
  /// Optional identifier of the element set for the pre-maneuver orbit.
  /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *preEventIdElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREEVENTIDELSET);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *preEventElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREEVENTELSET);
  }
  /// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
  /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *preEventIdStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREEVENTIDSTATEVECTOR);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *preEventStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREEVENTSTATEVECTOR);
  }
  /// Pre-event X component of position in ECI space, in km.
  /// Example: /// Example: 3584.432545
  /// Constraints: No constraints specified.
  double prePosX() const {
    return GetField<double>(VT_PREPOSX, 0.0);
  }
  /// Pre-event Y component of position in ECI space, in km.
  /// Example: /// Example: 42028.43245
  /// Constraints: No constraints specified.
  double prePosY() const {
    return GetField<double>(VT_PREPOSY, 0.0);
  }
  /// Pre-event Z component of position in ECI space, in km.
  /// Example: /// Example: -1.97765
  /// Constraints: No constraints specified.
  double prePosZ() const {
    return GetField<double>(VT_PREPOSZ, 0.0);
  }
  /// Pre-event X component of velocity in ECI space, in km/sec.
  /// Example: /// Example: -2.543266
  /// Constraints: No constraints specified.
  double preVelX() const {
    return GetField<double>(VT_PREVELX, 0.0);
  }
  /// Pre-event Y component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.24876
  /// Constraints: No constraints specified.
  double preVelY() const {
    return GetField<double>(VT_PREVELY, 0.0);
  }
  /// Pre-event Z component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.0067352
  /// Constraints: No constraints specified.
  double preVelZ() const {
    return GetField<double>(VT_PREVELZ, 0.0);
  }
  /// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  /// Example: /// Example: 4.51e-07
  /// Constraints: No constraints specified.
  double preRadiationPressCoeff() const {
    return GetField<double>(VT_PRERADIATIONPRESSCOEFF, 0.0);
  }
  /// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  /// Example: /// Example: 0.000437116
  /// Constraints: No constraints specified.
  double preBallisticCoeff() const {
    return GetField<double>(VT_PREBALLISTICCOEFF, 0.0);
  }
  /// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35802
  /// Constraints: No constraints specified.
  double preApogee() const {
    return GetField<double>(VT_PREAPOGEE, 0.0);
  }
  /// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35786.5
  /// Constraints: No constraints specified.
  double prePerigee() const {
    return GetField<double>(VT_PREPERIGEE, 0.0);
  }
  /// Pre-event spacecraft orbital inclination, in degrees. 0-180.
  /// Example: /// Example: 0.0336
  /// Constraints: No constraints specified.
  double preInclination() const {
    return GetField<double>(VT_PREINCLINATION, 0.0);
  }
  /// Pre-event spacecraft eccentricity.
  /// Example: /// Example: 0.00017
  /// Constraints: No constraints specified.
  double preEccentricity() const {
    return GetField<double>(VT_PREECCENTRICITY, 0.0);
  }
  /// Pre-event spacecraft orbital period, in minutes.
  /// Example: /// Example: 1436.12
  /// Constraints: No constraints specified.
  double prePeriod() const {
    return GetField<double>(VT_PREPERIOD, 0.0);
  }
  /// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  /// Example: /// Example: 98.3336
  /// Constraints: No constraints specified.
  double preRAAN() const {
    return GetField<double>(VT_PRERAAN, 0.0);
  }
  /// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
  /// Example: /// Example: 42165.1
  /// Constraints: No constraints specified.
  double preSMA() const {
    return GetField<double>(VT_PRESMA, 0.0);
  }
  /// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -93.12
  /// Constraints: No constraints specified.
  double preGeoLongitude() const {
    return GetField<double>(VT_PREGEOLONGITUDE, 0.0);
  }
  /// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  /// Example: /// Example: -0.0125
  /// Constraints: No constraints specified.
  double preDriftRate() const {
    return GetField<double>(VT_PREDRIFTRATE, 0.0);
  }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  /// Example: /// Example: 0.215
  /// Constraints: No constraints specified.
  double preSigmaU() const {
    return GetField<double>(VT_PRESIGMAU, 0.0);
  }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  /// Example: /// Example: 1.97
  /// Constraints: No constraints specified.
  double preSigmaV() const {
    return GetField<double>(VT_PRESIGMAV, 0.0);
  }
  /// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  /// Example: /// Example: 0.208
  /// Constraints: No constraints specified.
  double preSigmaW() const {
    return GetField<double>(VT_PRESIGMAW, 0.0);
  }
  /// Optional identifier of the element set for the post-maneuver orbit.
  /// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *postEventIdElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSTEVENTIDELSET);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *postEventElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSTEVENTELSET);
  }
  /// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
  /// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *postEventIdStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSTEVENTIDSTATEVECTOR);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *postEventStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSTEVENTSTATEVECTOR);
  }
  /// Post-event X component of position in ECI space, in km.
  /// Example: /// Example: 3589.351957
  /// Constraints: No constraints specified.
  double postPosX() const {
    return GetField<double>(VT_POSTPOSX, 0.0);
  }
  /// Post-event Y component of position in ECI space, in km.
  /// Example: /// Example: 42017.26823
  /// Constraints: No constraints specified.
  double postPosY() const {
    return GetField<double>(VT_POSTPOSY, 0.0);
  }
  /// Post-event Z component of position in ECI space, in km.
  /// Example: /// Example: -1.27161796
  /// Constraints: No constraints specified.
  double postPosZ() const {
    return GetField<double>(VT_POSTPOSZ, 0.0);
  }
  /// Post-event X component of velocity in ECI space, in km/sec.
  /// Example: /// Example: -3.063152826
  /// Constraints: No constraints specified.
  double postVelX() const {
    return GetField<double>(VT_POSTVELX, 0.0);
  }
  /// Post-event Y component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.261586769
  /// Constraints: No constraints specified.
  double postVelY() const {
    return GetField<double>(VT_POSTVELY, 0.0);
  }
  /// Post-event Z component of velocity in ECI space, in km/sec.
  /// Example: /// Example: 0.006842148
  /// Constraints: No constraints specified.
  double postVelZ() const {
    return GetField<double>(VT_POSTVELZ, 0.0);
  }
  /// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
  /// Example: /// Example: 4.51e-07
  /// Constraints: No constraints specified.
  double postRadiationPressCoeff() const {
    return GetField<double>(VT_POSTRADIATIONPRESSCOEFF, 0.0);
  }
  /// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
  /// Example: /// Example: 0.000433209
  /// Constraints: No constraints specified.
  double postBallisticCoeff() const {
    return GetField<double>(VT_POSTBALLISTICCOEFF, 0.0);
  }
  /// Post-event spacecraft apogee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35800.1
  /// Constraints: No constraints specified.
  double postApogee() const {
    return GetField<double>(VT_POSTAPOGEE, 0.0);
  }
  /// Post-event spacecraft perigee (measured from Earth center), in kilometers.
  /// Example: /// Example: 35787.9
  /// Constraints: No constraints specified.
  double postPerigee() const {
    return GetField<double>(VT_POSTPERIGEE, 0.0);
  }
  /// Post-event spacecraft orbital inclination, in degrees. 0-180.
  /// Example: /// Example: 0.0327
  /// Constraints: No constraints specified.
  double postInclination() const {
    return GetField<double>(VT_POSTINCLINATION, 0.0);
  }
  /// Post-event spacecraft eccentricity.
  /// Example: /// Example: 0.000164
  /// Constraints: No constraints specified.
  double postEccentricity() const {
    return GetField<double>(VT_POSTECCENTRICITY, 0.0);
  }
  /// Post-event spacecraft orbital period, in minutes.
  /// Example: /// Example: 1436.01
  /// Constraints: No constraints specified.
  double postPeriod() const {
    return GetField<double>(VT_POSTPERIOD, 0.0);
  }
  /// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
  /// Example: /// Example: 98.3335
  /// Constraints: No constraints specified.
  double postRAAN() const {
    return GetField<double>(VT_POSTRAAN, 0.0);
  }
  /// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
  /// Example: /// Example: 42164.87
  /// Constraints: No constraints specified.
  double postSMA() const {
    return GetField<double>(VT_POSTSMA, 0.0);
  }
  /// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -93.15
  /// Constraints: No constraints specified.
  double postGeoLongitude() const {
    return GetField<double>(VT_POSTGEOLONGITUDE, 0.0);
  }
  /// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
  /// Example: /// Example: -0.0125
  /// Constraints: No constraints specified.
  double postDriftRate() const {
    return GetField<double>(VT_POSTDRIFTRATE, 0.0);
  }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
  /// Example: /// Example: 12.285
  /// Constraints: No constraints specified.
  double postSigmaU() const {
    return GetField<double>(VT_POSTSIGMAU, 0.0);
  }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
  /// Example: /// Example: 71.339
  /// Constraints: No constraints specified.
  double postSigmaV() const {
    return GetField<double>(VT_POSTSIGMAV, 0.0);
  }
  /// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
  /// Example: /// Example: 12.77
  /// Constraints: No constraints specified.
  double postSigmaW() const {
    return GetField<double>(VT_POSTSIGMAW, 0.0);
  }
  /// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *cov() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COV);
  }
  ///  Estimated mass of the object following the maneuver, in kg.
  /// Example: /// Example: 1844.5
  /// Constraints: No constraints specified.
  double postMass() const {
    return GetField<double>(VT_POSTMASS, 0.0);
  }
  /// Estimated area of the object following the maneuver, in meters squared.
  /// Example: /// Example: 35.77
  /// Constraints: No constraints specified.
  double postArea() const {
    return GetField<double>(VT_POSTAREA, 0.0);
  }
  /// Number of observations used to generate the maneuver data.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numObs() const {
    return GetField<int32_t>(VT_NUMOBS, 0);
  }
  /// Description and notes of the maneuver.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Name of the state model used to generate the maneuver data.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *stateModel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATEMODEL);
  }
  /// Version of the state model used to generate the maneuver data.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  double stateModelVersion() const {
    return GetField<double>(VT_STATEMODELVERSION, 0.0);
  }
  /// The total number of estimated acceleration points during the maneuver.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t numAccelPoints() const {
    return GetField<int32_t>(VT_NUMACCELPOINTS, 0);
  }
  /// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [10.25, 50.56, 150.78]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccelTimes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MNVRACCELTIMES);
  }
  /// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [0.05, 0.1, 0.05]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccels() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MNVRACCELS);
  }
  /// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
  /// Example: /// Example: [0.0005, 0.001, 0.0005]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccelUncs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MNVRACCELUNCS);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Maneuver_Abridged_dataMode_Enum dataMode() const {
    return static_cast<Maneuver_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Optional algorithm used to produce this record.
  /// Example: /// Example: Example algorithm
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *algorithm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALGORITHM);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_REPORTTIME) &&
           verifier.VerifyString(reportTime()) &&
           VerifyOffset(verifier, VT_EVENTSTARTTIME) &&
           verifier.VerifyString(eventStartTime()) &&
           VerifyOffset(verifier, VT_EVENTENDTIME) &&
           verifier.VerifyString(eventEndTime()) &&
           VerifyField<double>(verifier, VT_TOTALBURNTIME, 8) &&
           VerifyOffset(verifier, VT_ODFITENDTIME) &&
           verifier.VerifyString(odFitEndTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyField<double>(verifier, VT_MANEUVERUNC, 8) &&
           VerifyOffset(verifier, VT_CHARACTERIZATION) &&
           verifier.VerifyString(characterization()) &&
           VerifyField<double>(verifier, VT_CHARACTERIZATIONUNC, 8) &&
           VerifyOffset(verifier, VT_EVENTID) &&
           verifier.VerifyString(eventId()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyField<double>(verifier, VT_DELTAPOS, 8) &&
           VerifyField<double>(verifier, VT_DELTAPOSU, 8) &&
           VerifyField<double>(verifier, VT_DELTAPOSV, 8) &&
           VerifyField<double>(verifier, VT_DELTAPOSW, 8) &&
           VerifyField<double>(verifier, VT_DELTAVEL, 8) &&
           VerifyField<double>(verifier, VT_DELTAVELU, 8) &&
           VerifyField<double>(verifier, VT_DELTAVELV, 8) &&
           VerifyField<double>(verifier, VT_DELTAVELW, 8) &&
           VerifyField<double>(verifier, VT_DELTAMASS, 8) &&
           VerifyOffset(verifier, VT_PREEVENTIDELSET) &&
           verifier.VerifyString(preEventIdElset()) &&
           VerifyOffset(verifier, VT_PREEVENTELSET) &&
           verifier.VerifyString(preEventElset()) &&
           VerifyOffset(verifier, VT_PREEVENTIDSTATEVECTOR) &&
           verifier.VerifyString(preEventIdStateVector()) &&
           VerifyOffset(verifier, VT_PREEVENTSTATEVECTOR) &&
           verifier.VerifyString(preEventStateVector()) &&
           VerifyField<double>(verifier, VT_PREPOSX, 8) &&
           VerifyField<double>(verifier, VT_PREPOSY, 8) &&
           VerifyField<double>(verifier, VT_PREPOSZ, 8) &&
           VerifyField<double>(verifier, VT_PREVELX, 8) &&
           VerifyField<double>(verifier, VT_PREVELY, 8) &&
           VerifyField<double>(verifier, VT_PREVELZ, 8) &&
           VerifyField<double>(verifier, VT_PRERADIATIONPRESSCOEFF, 8) &&
           VerifyField<double>(verifier, VT_PREBALLISTICCOEFF, 8) &&
           VerifyField<double>(verifier, VT_PREAPOGEE, 8) &&
           VerifyField<double>(verifier, VT_PREPERIGEE, 8) &&
           VerifyField<double>(verifier, VT_PREINCLINATION, 8) &&
           VerifyField<double>(verifier, VT_PREECCENTRICITY, 8) &&
           VerifyField<double>(verifier, VT_PREPERIOD, 8) &&
           VerifyField<double>(verifier, VT_PRERAAN, 8) &&
           VerifyField<double>(verifier, VT_PRESMA, 8) &&
           VerifyField<double>(verifier, VT_PREGEOLONGITUDE, 8) &&
           VerifyField<double>(verifier, VT_PREDRIFTRATE, 8) &&
           VerifyField<double>(verifier, VT_PRESIGMAU, 8) &&
           VerifyField<double>(verifier, VT_PRESIGMAV, 8) &&
           VerifyField<double>(verifier, VT_PRESIGMAW, 8) &&
           VerifyOffset(verifier, VT_POSTEVENTIDELSET) &&
           verifier.VerifyString(postEventIdElset()) &&
           VerifyOffset(verifier, VT_POSTEVENTELSET) &&
           verifier.VerifyString(postEventElset()) &&
           VerifyOffset(verifier, VT_POSTEVENTIDSTATEVECTOR) &&
           verifier.VerifyString(postEventIdStateVector()) &&
           VerifyOffset(verifier, VT_POSTEVENTSTATEVECTOR) &&
           verifier.VerifyString(postEventStateVector()) &&
           VerifyField<double>(verifier, VT_POSTPOSX, 8) &&
           VerifyField<double>(verifier, VT_POSTPOSY, 8) &&
           VerifyField<double>(verifier, VT_POSTPOSZ, 8) &&
           VerifyField<double>(verifier, VT_POSTVELX, 8) &&
           VerifyField<double>(verifier, VT_POSTVELY, 8) &&
           VerifyField<double>(verifier, VT_POSTVELZ, 8) &&
           VerifyField<double>(verifier, VT_POSTRADIATIONPRESSCOEFF, 8) &&
           VerifyField<double>(verifier, VT_POSTBALLISTICCOEFF, 8) &&
           VerifyField<double>(verifier, VT_POSTAPOGEE, 8) &&
           VerifyField<double>(verifier, VT_POSTPERIGEE, 8) &&
           VerifyField<double>(verifier, VT_POSTINCLINATION, 8) &&
           VerifyField<double>(verifier, VT_POSTECCENTRICITY, 8) &&
           VerifyField<double>(verifier, VT_POSTPERIOD, 8) &&
           VerifyField<double>(verifier, VT_POSTRAAN, 8) &&
           VerifyField<double>(verifier, VT_POSTSMA, 8) &&
           VerifyField<double>(verifier, VT_POSTGEOLONGITUDE, 8) &&
           VerifyField<double>(verifier, VT_POSTDRIFTRATE, 8) &&
           VerifyField<double>(verifier, VT_POSTSIGMAU, 8) &&
           VerifyField<double>(verifier, VT_POSTSIGMAV, 8) &&
           VerifyField<double>(verifier, VT_POSTSIGMAW, 8) &&
           VerifyOffset(verifier, VT_COV) &&
           verifier.VerifyVector(cov()) &&
           verifier.VerifyVectorOfStrings(cov()) &&
           VerifyField<double>(verifier, VT_POSTMASS, 8) &&
           VerifyField<double>(verifier, VT_POSTAREA, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMOBS, 4) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_STATEMODEL) &&
           verifier.VerifyString(stateModel()) &&
           VerifyField<double>(verifier, VT_STATEMODELVERSION, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMACCELPOINTS, 4) &&
           VerifyOffset(verifier, VT_MNVRACCELTIMES) &&
           verifier.VerifyVector(mnvrAccelTimes()) &&
           verifier.VerifyVectorOfStrings(mnvrAccelTimes()) &&
           VerifyOffset(verifier, VT_MNVRACCELS) &&
           verifier.VerifyVector(mnvrAccels()) &&
           verifier.VerifyVectorOfStrings(mnvrAccels()) &&
           VerifyOffset(verifier, VT_MNVRACCELUNCS) &&
           verifier.VerifyVector(mnvrAccelUncs()) &&
           verifier.VerifyVectorOfStrings(mnvrAccelUncs()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ALGORITHM) &&
           verifier.VerifyString(algorithm()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Maneuver_AbridgedBuilder {
  typedef Maneuver_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Maneuver_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(Maneuver_Abridged::VT_SATNO, satNo, 0);
  }
  void add_reportTime(::flatbuffers::Offset<::flatbuffers::String> reportTime) {
    fbb_.AddOffset(Maneuver_Abridged::VT_REPORTTIME, reportTime);
  }
  void add_eventStartTime(::flatbuffers::Offset<::flatbuffers::String> eventStartTime) {
    fbb_.AddOffset(Maneuver_Abridged::VT_EVENTSTARTTIME, eventStartTime);
  }
  void add_eventEndTime(::flatbuffers::Offset<::flatbuffers::String> eventEndTime) {
    fbb_.AddOffset(Maneuver_Abridged::VT_EVENTENDTIME, eventEndTime);
  }
  void add_totalBurnTime(double totalBurnTime) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_TOTALBURNTIME, totalBurnTime, 0.0);
  }
  void add_odFitEndTime(::flatbuffers::Offset<::flatbuffers::String> odFitEndTime) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ODFITENDTIME, odFitEndTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(Maneuver_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(Maneuver_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_uct(bool uct) {
    fbb_.AddElement<uint8_t>(Maneuver_Abridged::VT_UCT, static_cast<uint8_t>(uct), 0);
  }
  void add_maneuverUnc(double maneuverUnc) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_MANEUVERUNC, maneuverUnc, 0.0);
  }
  void add_characterization(::flatbuffers::Offset<::flatbuffers::String> characterization) {
    fbb_.AddOffset(Maneuver_Abridged::VT_CHARACTERIZATION, characterization);
  }
  void add_characterizationUnc(double characterizationUnc) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_CHARACTERIZATIONUNC, characterizationUnc, 0.0);
  }
  void add_eventId(::flatbuffers::Offset<::flatbuffers::String> eventId) {
    fbb_.AddOffset(Maneuver_Abridged::VT_EVENTID, eventId);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(Maneuver_Abridged::VT_STATUS, status);
  }
  void add_deltaPos(double deltaPos) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAPOS, deltaPos, 0.0);
  }
  void add_deltaPosU(double deltaPosU) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAPOSU, deltaPosU, 0.0);
  }
  void add_deltaPosV(double deltaPosV) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAPOSV, deltaPosV, 0.0);
  }
  void add_deltaPosW(double deltaPosW) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAPOSW, deltaPosW, 0.0);
  }
  void add_deltaVel(double deltaVel) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAVEL, deltaVel, 0.0);
  }
  void add_deltaVelU(double deltaVelU) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAVELU, deltaVelU, 0.0);
  }
  void add_deltaVelV(double deltaVelV) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAVELV, deltaVelV, 0.0);
  }
  void add_deltaVelW(double deltaVelW) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAVELW, deltaVelW, 0.0);
  }
  void add_deltaMass(double deltaMass) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_DELTAMASS, deltaMass, 0.0);
  }
  void add_preEventIdElset(::flatbuffers::Offset<::flatbuffers::String> preEventIdElset) {
    fbb_.AddOffset(Maneuver_Abridged::VT_PREEVENTIDELSET, preEventIdElset);
  }
  void add_preEventElset(::flatbuffers::Offset<::flatbuffers::String> preEventElset) {
    fbb_.AddOffset(Maneuver_Abridged::VT_PREEVENTELSET, preEventElset);
  }
  void add_preEventIdStateVector(::flatbuffers::Offset<::flatbuffers::String> preEventIdStateVector) {
    fbb_.AddOffset(Maneuver_Abridged::VT_PREEVENTIDSTATEVECTOR, preEventIdStateVector);
  }
  void add_preEventStateVector(::flatbuffers::Offset<::flatbuffers::String> preEventStateVector) {
    fbb_.AddOffset(Maneuver_Abridged::VT_PREEVENTSTATEVECTOR, preEventStateVector);
  }
  void add_prePosX(double prePosX) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREPOSX, prePosX, 0.0);
  }
  void add_prePosY(double prePosY) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREPOSY, prePosY, 0.0);
  }
  void add_prePosZ(double prePosZ) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREPOSZ, prePosZ, 0.0);
  }
  void add_preVelX(double preVelX) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREVELX, preVelX, 0.0);
  }
  void add_preVelY(double preVelY) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREVELY, preVelY, 0.0);
  }
  void add_preVelZ(double preVelZ) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREVELZ, preVelZ, 0.0);
  }
  void add_preRadiationPressCoeff(double preRadiationPressCoeff) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRERADIATIONPRESSCOEFF, preRadiationPressCoeff, 0.0);
  }
  void add_preBallisticCoeff(double preBallisticCoeff) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREBALLISTICCOEFF, preBallisticCoeff, 0.0);
  }
  void add_preApogee(double preApogee) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREAPOGEE, preApogee, 0.0);
  }
  void add_prePerigee(double prePerigee) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREPERIGEE, prePerigee, 0.0);
  }
  void add_preInclination(double preInclination) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREINCLINATION, preInclination, 0.0);
  }
  void add_preEccentricity(double preEccentricity) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREECCENTRICITY, preEccentricity, 0.0);
  }
  void add_prePeriod(double prePeriod) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREPERIOD, prePeriod, 0.0);
  }
  void add_preRAAN(double preRAAN) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRERAAN, preRAAN, 0.0);
  }
  void add_preSMA(double preSMA) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRESMA, preSMA, 0.0);
  }
  void add_preGeoLongitude(double preGeoLongitude) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREGEOLONGITUDE, preGeoLongitude, 0.0);
  }
  void add_preDriftRate(double preDriftRate) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PREDRIFTRATE, preDriftRate, 0.0);
  }
  void add_preSigmaU(double preSigmaU) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRESIGMAU, preSigmaU, 0.0);
  }
  void add_preSigmaV(double preSigmaV) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRESIGMAV, preSigmaV, 0.0);
  }
  void add_preSigmaW(double preSigmaW) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_PRESIGMAW, preSigmaW, 0.0);
  }
  void add_postEventIdElset(::flatbuffers::Offset<::flatbuffers::String> postEventIdElset) {
    fbb_.AddOffset(Maneuver_Abridged::VT_POSTEVENTIDELSET, postEventIdElset);
  }
  void add_postEventElset(::flatbuffers::Offset<::flatbuffers::String> postEventElset) {
    fbb_.AddOffset(Maneuver_Abridged::VT_POSTEVENTELSET, postEventElset);
  }
  void add_postEventIdStateVector(::flatbuffers::Offset<::flatbuffers::String> postEventIdStateVector) {
    fbb_.AddOffset(Maneuver_Abridged::VT_POSTEVENTIDSTATEVECTOR, postEventIdStateVector);
  }
  void add_postEventStateVector(::flatbuffers::Offset<::flatbuffers::String> postEventStateVector) {
    fbb_.AddOffset(Maneuver_Abridged::VT_POSTEVENTSTATEVECTOR, postEventStateVector);
  }
  void add_postPosX(double postPosX) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTPOSX, postPosX, 0.0);
  }
  void add_postPosY(double postPosY) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTPOSY, postPosY, 0.0);
  }
  void add_postPosZ(double postPosZ) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTPOSZ, postPosZ, 0.0);
  }
  void add_postVelX(double postVelX) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTVELX, postVelX, 0.0);
  }
  void add_postVelY(double postVelY) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTVELY, postVelY, 0.0);
  }
  void add_postVelZ(double postVelZ) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTVELZ, postVelZ, 0.0);
  }
  void add_postRadiationPressCoeff(double postRadiationPressCoeff) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTRADIATIONPRESSCOEFF, postRadiationPressCoeff, 0.0);
  }
  void add_postBallisticCoeff(double postBallisticCoeff) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTBALLISTICCOEFF, postBallisticCoeff, 0.0);
  }
  void add_postApogee(double postApogee) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTAPOGEE, postApogee, 0.0);
  }
  void add_postPerigee(double postPerigee) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTPERIGEE, postPerigee, 0.0);
  }
  void add_postInclination(double postInclination) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTINCLINATION, postInclination, 0.0);
  }
  void add_postEccentricity(double postEccentricity) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTECCENTRICITY, postEccentricity, 0.0);
  }
  void add_postPeriod(double postPeriod) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTPERIOD, postPeriod, 0.0);
  }
  void add_postRAAN(double postRAAN) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTRAAN, postRAAN, 0.0);
  }
  void add_postSMA(double postSMA) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTSMA, postSMA, 0.0);
  }
  void add_postGeoLongitude(double postGeoLongitude) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTGEOLONGITUDE, postGeoLongitude, 0.0);
  }
  void add_postDriftRate(double postDriftRate) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTDRIFTRATE, postDriftRate, 0.0);
  }
  void add_postSigmaU(double postSigmaU) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTSIGMAU, postSigmaU, 0.0);
  }
  void add_postSigmaV(double postSigmaV) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTSIGMAV, postSigmaV, 0.0);
  }
  void add_postSigmaW(double postSigmaW) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTSIGMAW, postSigmaW, 0.0);
  }
  void add_cov(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov) {
    fbb_.AddOffset(Maneuver_Abridged::VT_COV, cov);
  }
  void add_postMass(double postMass) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTMASS, postMass, 0.0);
  }
  void add_postArea(double postArea) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_POSTAREA, postArea, 0.0);
  }
  void add_numObs(int32_t numObs) {
    fbb_.AddElement<int32_t>(Maneuver_Abridged::VT_NUMOBS, numObs, 0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Maneuver_Abridged::VT_DESCRIPTION, description);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(Maneuver_Abridged::VT_DESCRIPTOR, descriptor);
  }
  void add_stateModel(::flatbuffers::Offset<::flatbuffers::String> stateModel) {
    fbb_.AddOffset(Maneuver_Abridged::VT_STATEMODEL, stateModel);
  }
  void add_stateModelVersion(double stateModelVersion) {
    fbb_.AddElement<double>(Maneuver_Abridged::VT_STATEMODELVERSION, stateModelVersion, 0.0);
  }
  void add_numAccelPoints(int32_t numAccelPoints) {
    fbb_.AddElement<int32_t>(Maneuver_Abridged::VT_NUMACCELPOINTS, numAccelPoints, 0);
  }
  void add_mnvrAccelTimes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccelTimes) {
    fbb_.AddOffset(Maneuver_Abridged::VT_MNVRACCELTIMES, mnvrAccelTimes);
  }
  void add_mnvrAccels(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccels) {
    fbb_.AddOffset(Maneuver_Abridged::VT_MNVRACCELS, mnvrAccels);
  }
  void add_mnvrAccelUncs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccelUncs) {
    fbb_.AddOffset(Maneuver_Abridged::VT_MNVRACCELUNCS, mnvrAccelUncs);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Maneuver_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(Maneuver_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Maneuver_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Maneuver_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Maneuver_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_algorithm(::flatbuffers::Offset<::flatbuffers::String> algorithm) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ALGORITHM, algorithm);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(Maneuver_Abridged::VT_TRANSACTIONID, transactionId);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Maneuver_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit Maneuver_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Maneuver_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Maneuver_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Maneuver_Abridged> CreateManeuver_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventEndTime = 0,
    double totalBurnTime = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> odFitEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    bool uct = false,
    double maneuverUnc = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> characterization = 0,
    double characterizationUnc = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> eventId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    double deltaPos = 0.0,
    double deltaPosU = 0.0,
    double deltaPosV = 0.0,
    double deltaPosW = 0.0,
    double deltaVel = 0.0,
    double deltaVelU = 0.0,
    double deltaVelV = 0.0,
    double deltaVelW = 0.0,
    double deltaMass = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> preEventIdElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> preEventElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> preEventIdStateVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> preEventStateVector = 0,
    double prePosX = 0.0,
    double prePosY = 0.0,
    double prePosZ = 0.0,
    double preVelX = 0.0,
    double preVelY = 0.0,
    double preVelZ = 0.0,
    double preRadiationPressCoeff = 0.0,
    double preBallisticCoeff = 0.0,
    double preApogee = 0.0,
    double prePerigee = 0.0,
    double preInclination = 0.0,
    double preEccentricity = 0.0,
    double prePeriod = 0.0,
    double preRAAN = 0.0,
    double preSMA = 0.0,
    double preGeoLongitude = 0.0,
    double preDriftRate = 0.0,
    double preSigmaU = 0.0,
    double preSigmaV = 0.0,
    double preSigmaW = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> postEventIdElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> postEventElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> postEventIdStateVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> postEventStateVector = 0,
    double postPosX = 0.0,
    double postPosY = 0.0,
    double postPosZ = 0.0,
    double postVelX = 0.0,
    double postVelY = 0.0,
    double postVelZ = 0.0,
    double postRadiationPressCoeff = 0.0,
    double postBallisticCoeff = 0.0,
    double postApogee = 0.0,
    double postPerigee = 0.0,
    double postInclination = 0.0,
    double postEccentricity = 0.0,
    double postPeriod = 0.0,
    double postRAAN = 0.0,
    double postSMA = 0.0,
    double postGeoLongitude = 0.0,
    double postDriftRate = 0.0,
    double postSigmaU = 0.0,
    double postSigmaV = 0.0,
    double postSigmaW = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov = 0,
    double postMass = 0.0,
    double postArea = 0.0,
    int32_t numObs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stateModel = 0,
    double stateModelVersion = 0.0,
    int32_t numAccelPoints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccelTimes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccels = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> mnvrAccelUncs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Maneuver_Abridged_dataMode_Enum dataMode = Maneuver_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> algorithm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Maneuver_AbridgedBuilder builder_(_fbb);
  builder_.add_stateModelVersion(stateModelVersion);
  builder_.add_postArea(postArea);
  builder_.add_postMass(postMass);
  builder_.add_postSigmaW(postSigmaW);
  builder_.add_postSigmaV(postSigmaV);
  builder_.add_postSigmaU(postSigmaU);
  builder_.add_postDriftRate(postDriftRate);
  builder_.add_postGeoLongitude(postGeoLongitude);
  builder_.add_postSMA(postSMA);
  builder_.add_postRAAN(postRAAN);
  builder_.add_postPeriod(postPeriod);
  builder_.add_postEccentricity(postEccentricity);
  builder_.add_postInclination(postInclination);
  builder_.add_postPerigee(postPerigee);
  builder_.add_postApogee(postApogee);
  builder_.add_postBallisticCoeff(postBallisticCoeff);
  builder_.add_postRadiationPressCoeff(postRadiationPressCoeff);
  builder_.add_postVelZ(postVelZ);
  builder_.add_postVelY(postVelY);
  builder_.add_postVelX(postVelX);
  builder_.add_postPosZ(postPosZ);
  builder_.add_postPosY(postPosY);
  builder_.add_postPosX(postPosX);
  builder_.add_preSigmaW(preSigmaW);
  builder_.add_preSigmaV(preSigmaV);
  builder_.add_preSigmaU(preSigmaU);
  builder_.add_preDriftRate(preDriftRate);
  builder_.add_preGeoLongitude(preGeoLongitude);
  builder_.add_preSMA(preSMA);
  builder_.add_preRAAN(preRAAN);
  builder_.add_prePeriod(prePeriod);
  builder_.add_preEccentricity(preEccentricity);
  builder_.add_preInclination(preInclination);
  builder_.add_prePerigee(prePerigee);
  builder_.add_preApogee(preApogee);
  builder_.add_preBallisticCoeff(preBallisticCoeff);
  builder_.add_preRadiationPressCoeff(preRadiationPressCoeff);
  builder_.add_preVelZ(preVelZ);
  builder_.add_preVelY(preVelY);
  builder_.add_preVelX(preVelX);
  builder_.add_prePosZ(prePosZ);
  builder_.add_prePosY(prePosY);
  builder_.add_prePosX(prePosX);
  builder_.add_deltaMass(deltaMass);
  builder_.add_deltaVelW(deltaVelW);
  builder_.add_deltaVelV(deltaVelV);
  builder_.add_deltaVelU(deltaVelU);
  builder_.add_deltaVel(deltaVel);
  builder_.add_deltaPosW(deltaPosW);
  builder_.add_deltaPosV(deltaPosV);
  builder_.add_deltaPosU(deltaPosU);
  builder_.add_deltaPos(deltaPos);
  builder_.add_characterizationUnc(characterizationUnc);
  builder_.add_maneuverUnc(maneuverUnc);
  builder_.add_totalBurnTime(totalBurnTime);
  builder_.add_origNetwork(origNetwork);
  builder_.add_transactionId(transactionId);
  builder_.add_algorithm(algorithm);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_mnvrAccelUncs(mnvrAccelUncs);
  builder_.add_mnvrAccels(mnvrAccels);
  builder_.add_mnvrAccelTimes(mnvrAccelTimes);
  builder_.add_numAccelPoints(numAccelPoints);
  builder_.add_stateModel(stateModel);
  builder_.add_descriptor(descriptor);
  builder_.add_description(description);
  builder_.add_numObs(numObs);
  builder_.add_cov(cov);
  builder_.add_postEventStateVector(postEventStateVector);
  builder_.add_postEventIdStateVector(postEventIdStateVector);
  builder_.add_postEventElset(postEventElset);
  builder_.add_postEventIdElset(postEventIdElset);
  builder_.add_preEventStateVector(preEventStateVector);
  builder_.add_preEventIdStateVector(preEventIdStateVector);
  builder_.add_preEventElset(preEventElset);
  builder_.add_preEventIdElset(preEventIdElset);
  builder_.add_status(status);
  builder_.add_origSensorId(origSensorId);
  builder_.add_origObjectId(origObjectId);
  builder_.add_eventId(eventId);
  builder_.add_characterization(characterization);
  builder_.add_idSensor(idSensor);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_odFitEndTime(odFitEndTime);
  builder_.add_eventEndTime(eventEndTime);
  builder_.add_eventStartTime(eventStartTime);
  builder_.add_reportTime(reportTime);
  builder_.add_satNo(satNo);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_uct(uct);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Maneuver_Abridged> CreateManeuver_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    int32_t satNo = 0,
    const char *reportTime = nullptr,
    const char *eventStartTime = nullptr,
    const char *eventEndTime = nullptr,
    double totalBurnTime = 0.0,
    const char *odFitEndTime = nullptr,
    const char *idOnOrbit = nullptr,
    const char *idSensor = nullptr,
    bool uct = false,
    double maneuverUnc = 0.0,
    const char *characterization = nullptr,
    double characterizationUnc = 0.0,
    const char *eventId = nullptr,
    const char *origObjectId = nullptr,
    const char *origSensorId = nullptr,
    const char *status = nullptr,
    double deltaPos = 0.0,
    double deltaPosU = 0.0,
    double deltaPosV = 0.0,
    double deltaPosW = 0.0,
    double deltaVel = 0.0,
    double deltaVelU = 0.0,
    double deltaVelV = 0.0,
    double deltaVelW = 0.0,
    double deltaMass = 0.0,
    const char *preEventIdElset = nullptr,
    const char *preEventElset = nullptr,
    const char *preEventIdStateVector = nullptr,
    const char *preEventStateVector = nullptr,
    double prePosX = 0.0,
    double prePosY = 0.0,
    double prePosZ = 0.0,
    double preVelX = 0.0,
    double preVelY = 0.0,
    double preVelZ = 0.0,
    double preRadiationPressCoeff = 0.0,
    double preBallisticCoeff = 0.0,
    double preApogee = 0.0,
    double prePerigee = 0.0,
    double preInclination = 0.0,
    double preEccentricity = 0.0,
    double prePeriod = 0.0,
    double preRAAN = 0.0,
    double preSMA = 0.0,
    double preGeoLongitude = 0.0,
    double preDriftRate = 0.0,
    double preSigmaU = 0.0,
    double preSigmaV = 0.0,
    double preSigmaW = 0.0,
    const char *postEventIdElset = nullptr,
    const char *postEventElset = nullptr,
    const char *postEventIdStateVector = nullptr,
    const char *postEventStateVector = nullptr,
    double postPosX = 0.0,
    double postPosY = 0.0,
    double postPosZ = 0.0,
    double postVelX = 0.0,
    double postVelY = 0.0,
    double postVelZ = 0.0,
    double postRadiationPressCoeff = 0.0,
    double postBallisticCoeff = 0.0,
    double postApogee = 0.0,
    double postPerigee = 0.0,
    double postInclination = 0.0,
    double postEccentricity = 0.0,
    double postPeriod = 0.0,
    double postRAAN = 0.0,
    double postSMA = 0.0,
    double postGeoLongitude = 0.0,
    double postDriftRate = 0.0,
    double postSigmaU = 0.0,
    double postSigmaV = 0.0,
    double postSigmaW = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *cov = nullptr,
    double postMass = 0.0,
    double postArea = 0.0,
    int32_t numObs = 0,
    const char *description = nullptr,
    const char *descriptor = nullptr,
    const char *stateModel = nullptr,
    double stateModelVersion = 0.0,
    int32_t numAccelPoints = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccelTimes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccels = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *mnvrAccelUncs = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Maneuver_Abridged_dataMode_Enum dataMode = Maneuver_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *algorithm = nullptr,
    const char *transactionId = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto reportTime__ = reportTime ? _fbb.CreateString(reportTime) : 0;
  auto eventStartTime__ = eventStartTime ? _fbb.CreateString(eventStartTime) : 0;
  auto eventEndTime__ = eventEndTime ? _fbb.CreateString(eventEndTime) : 0;
  auto odFitEndTime__ = odFitEndTime ? _fbb.CreateString(odFitEndTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto characterization__ = characterization ? _fbb.CreateString(characterization) : 0;
  auto eventId__ = eventId ? _fbb.CreateString(eventId) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto preEventIdElset__ = preEventIdElset ? _fbb.CreateString(preEventIdElset) : 0;
  auto preEventElset__ = preEventElset ? _fbb.CreateString(preEventElset) : 0;
  auto preEventIdStateVector__ = preEventIdStateVector ? _fbb.CreateString(preEventIdStateVector) : 0;
  auto preEventStateVector__ = preEventStateVector ? _fbb.CreateString(preEventStateVector) : 0;
  auto postEventIdElset__ = postEventIdElset ? _fbb.CreateString(postEventIdElset) : 0;
  auto postEventElset__ = postEventElset ? _fbb.CreateString(postEventElset) : 0;
  auto postEventIdStateVector__ = postEventIdStateVector ? _fbb.CreateString(postEventIdStateVector) : 0;
  auto postEventStateVector__ = postEventStateVector ? _fbb.CreateString(postEventStateVector) : 0;
  auto cov__ = cov ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*cov) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto stateModel__ = stateModel ? _fbb.CreateString(stateModel) : 0;
  auto mnvrAccelTimes__ = mnvrAccelTimes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*mnvrAccelTimes) : 0;
  auto mnvrAccels__ = mnvrAccels ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*mnvrAccels) : 0;
  auto mnvrAccelUncs__ = mnvrAccelUncs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*mnvrAccelUncs) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto algorithm__ = algorithm ? _fbb.CreateString(algorithm) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateManeuver_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      satNo,
      reportTime__,
      eventStartTime__,
      eventEndTime__,
      totalBurnTime,
      odFitEndTime__,
      idOnOrbit__,
      idSensor__,
      uct,
      maneuverUnc,
      characterization__,
      characterizationUnc,
      eventId__,
      origObjectId__,
      origSensorId__,
      status__,
      deltaPos,
      deltaPosU,
      deltaPosV,
      deltaPosW,
      deltaVel,
      deltaVelU,
      deltaVelV,
      deltaVelW,
      deltaMass,
      preEventIdElset__,
      preEventElset__,
      preEventIdStateVector__,
      preEventStateVector__,
      prePosX,
      prePosY,
      prePosZ,
      preVelX,
      preVelY,
      preVelZ,
      preRadiationPressCoeff,
      preBallisticCoeff,
      preApogee,
      prePerigee,
      preInclination,
      preEccentricity,
      prePeriod,
      preRAAN,
      preSMA,
      preGeoLongitude,
      preDriftRate,
      preSigmaU,
      preSigmaV,
      preSigmaW,
      postEventIdElset__,
      postEventElset__,
      postEventIdStateVector__,
      postEventStateVector__,
      postPosX,
      postPosY,
      postPosZ,
      postVelX,
      postVelY,
      postVelZ,
      postRadiationPressCoeff,
      postBallisticCoeff,
      postApogee,
      postPerigee,
      postInclination,
      postEccentricity,
      postPeriod,
      postRAAN,
      postSMA,
      postGeoLongitude,
      postDriftRate,
      postSigmaU,
      postSigmaV,
      postSigmaW,
      cov__,
      postMass,
      postArea,
      numObs,
      description__,
      descriptor__,
      stateModel__,
      stateModelVersion,
      numAccelPoints,
      mnvrAccelTimes__,
      mnvrAccels__,
      mnvrAccelUncs__,
      source__,
      origin__,
      dataMode,
      createdAt__,
      createdBy__,
      algorithm__,
      transactionId__,
      origNetwork__);
}

inline const Maneuver_Abridged *GetManeuver_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<Maneuver_Abridged>(buf);
}

inline const Maneuver_Abridged *GetSizePrefixedManeuver_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Maneuver_Abridged>(buf);
}

inline const char *Maneuver_AbridgedIdentifier() {
  return "MANE";
}

inline bool Maneuver_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Maneuver_AbridgedIdentifier());
}

inline bool SizePrefixedManeuver_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Maneuver_AbridgedIdentifier(), true);
}

inline bool VerifyManeuver_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Maneuver_Abridged>(Maneuver_AbridgedIdentifier());
}

inline bool VerifySizePrefixedManeuver_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Maneuver_Abridged>(Maneuver_AbridgedIdentifier());
}

inline void FinishManeuver_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Maneuver_Abridged> root) {
  fbb.Finish(root, Maneuver_AbridgedIdentifier());
}

inline void FinishSizePrefixedManeuver_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Maneuver_Abridged> root) {
  fbb.FinishSizePrefixed(root, Maneuver_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
