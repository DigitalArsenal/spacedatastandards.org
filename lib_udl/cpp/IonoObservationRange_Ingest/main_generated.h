// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationRange_Ingest;
struct IonoObservationRange_IngestBuilder;

/// /// The group path from transmitter to receiver.
struct IonoObservationRange_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationRange_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTES = 4,
    VT_DIMENSIONS = 6,
    VT_DIMENSIONNAME = 8,
    VT_DATA = 10
  };
  /// Notes for the range data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array of integers of the range array dimensions.
  /// Example: /// Example: [1, 2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONS);
  }
  /// Array of names for range dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONNAME);
  }
  /// Array of range data.
  /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_DIMENSIONS) &&
           verifier.VerifyVector(dimensions()) &&
           verifier.VerifyVectorOfStrings(dimensions()) &&
           VerifyOffset(verifier, VT_DIMENSIONNAME) &&
           verifier.VerifyVector(dimensionName()) &&
           verifier.VerifyVectorOfStrings(dimensionName()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct IonoObservationRange_IngestBuilder {
  typedef IonoObservationRange_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(IonoObservationRange_Ingest::VT_NOTES, notes);
  }
  void add_dimensions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions) {
    fbb_.AddOffset(IonoObservationRange_Ingest::VT_DIMENSIONS, dimensions);
  }
  void add_dimensionName(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName) {
    fbb_.AddOffset(IonoObservationRange_Ingest::VT_DIMENSIONNAME, dimensionName);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data) {
    fbb_.AddOffset(IonoObservationRange_Ingest::VT_DATA, data);
  }
  explicit IonoObservationRange_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationRange_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationRange_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationRange_Ingest> CreateIonoObservationRange_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data = 0) {
  IonoObservationRange_IngestBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_dimensionName(dimensionName);
  builder_.add_dimensions(dimensions);
  builder_.add_notes(notes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationRange_Ingest> CreateIonoObservationRange_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *data = nullptr) {
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto dimensions__ = dimensions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensions) : 0;
  auto dimensionName__ = dimensionName ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensionName) : 0;
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*data) : 0;
  return CreateIonoObservationRange_Ingest(
      _fbb,
      notes__,
      dimensions__,
      dimensionName__,
      data__);
}

inline const IonoObservationRange_Ingest *GetIonoObservationRange_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationRange_Ingest>(buf);
}

inline const IonoObservationRange_Ingest *GetSizePrefixedIonoObservationRange_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationRange_Ingest>(buf);
}

inline const char *IonoObservationRange_IngestIdentifier() {
  return "IONO";
}

inline bool IonoObservationRange_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationRange_IngestIdentifier());
}

inline bool SizePrefixedIonoObservationRange_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationRange_IngestIdentifier(), true);
}

inline bool VerifyIonoObservationRange_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationRange_Ingest>(IonoObservationRange_IngestIdentifier());
}

inline bool VerifySizePrefixedIonoObservationRange_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationRange_Ingest>(IonoObservationRange_IngestIdentifier());
}

inline void FinishIonoObservationRange_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationRange_Ingest> root) {
  fbb.Finish(root, IonoObservationRange_IngestIdentifier());
}

inline void FinishSizePrefixedIonoObservationRange_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationRange_Ingest> root) {
  fbb.FinishSizePrefixed(root, IonoObservationRange_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
