// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitDetails_Abridged;
struct OnorbitDetails_AbridgedBuilder;

enum OnorbitDetails_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnorbitDetails_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnorbitDetails_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnorbitDetails_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnorbitDetails_Abridged_dataMode_Enum_EXERCISE = 3,
  OnorbitDetails_Abridged_dataMode_Enum_MIN = OnorbitDetails_Abridged_dataMode_Enum_REAL,
  OnorbitDetails_Abridged_dataMode_Enum_MAX = OnorbitDetails_Abridged_dataMode_Enum_EXERCISE
};

inline const OnorbitDetails_Abridged_dataMode_Enum (&EnumValuesOnorbitDetails_Abridged_dataMode_Enum())[4] {
  static const OnorbitDetails_Abridged_dataMode_Enum values[] = {
    OnorbitDetails_Abridged_dataMode_Enum_REAL,
    OnorbitDetails_Abridged_dataMode_Enum_TEST,
    OnorbitDetails_Abridged_dataMode_Enum_SIMULATED,
    OnorbitDetails_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnorbitDetails_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnorbitDetails_Abridged_dataMode_Enum(OnorbitDetails_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnorbitDetails_Abridged_dataMode_Enum_REAL, OnorbitDetails_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnorbitDetails_Abridged_dataMode_Enum()[index];
}

/// /// Contains details of the OnOrbit object.
struct OnorbitDetails_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitDetails_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDONORBIT = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_LASTOBTIME = 10,
    VT_VISMAG = 12,
    VT_VISMAGMIN = 14,
    VT_VISMAGMAX = 16,
    VT_VISMAGMEAN = 18,
    VT_RCS = 20,
    VT_RCSMIN = 22,
    VT_RCSMAX = 24,
    VT_RCSMEAN = 26,
    VT_BOLDELTAV = 28,
    VT_MAXDELTAV = 30,
    VT_DELTAVUNC = 32,
    VT_ESTDELTAVDURATION = 34,
    VT_NUMMISSION = 36,
    VT_MISSIONTYPES = 38,
    VT_BUSTYPE = 40,
    VT_GEOSLOT = 42,
    VT_DRIFTRATE = 44,
    VT_DRYMASS = 46,
    VT_ADDITIONALMASS = 48,
    VT_LAUNCHMASSMIN = 50,
    VT_LAUNCHMASS = 52,
    VT_LAUNCHMASSMAX = 54,
    VT_BOLFUELMASS = 56,
    VT_CURRENTMASS = 58,
    VT_TOTALMASSUNC = 60,
    VT_SOLARARRAYAREA = 62,
    VT_MANEUVERABLE = 64,
    VT_FUELREMAINING = 66,
    VT_CROSSSECTION = 68,
    VT_BUSCROSSSECTION = 70,
    VT_MAXRADIUS = 72,
    VT_COLARADIUS = 74,
    VT_ADEPTRADIUS = 76,
    VT_NUMDEPLOYABLE = 78,
    VT_DEPNAMES = 80,
    VT_DEPESTMASSES = 82,
    VT_DEPMASSUNCS = 84,
    VT_SOURCE = 86,
    VT_ORIGIN = 88,
    VT_LASTOBSOURCE = 90,
    VT_DATAMODE = 92,
    VT_CREATEDAT = 94,
    VT_CREATEDBY = 96,
    VT_ORIGNETWORK = 98
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastObTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBTIME);
  }
  /// Current/latest visual magnitude in M.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double vismag() const {
    return GetField<double>(VT_VISMAG, 0.0);
  }
  /// Minimum visual magnitude in M.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double vismagMin() const {
    return GetField<double>(VT_VISMAGMIN, 0.0);
  }
  /// Maximum visual magnitude in M.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  double vismagMax() const {
    return GetField<double>(VT_VISMAGMAX, 0.0);
  }
  /// Mean visual magnitude in M.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double vismagMean() const {
    return GetField<double>(VT_VISMAGMEAN, 0.0);
  }
  /// Current/latest radar cross section in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double rcs() const {
    return GetField<double>(VT_RCS, 0.0);
  }
  /// Minimum radar cross section in meters squared.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double rcsMin() const {
    return GetField<double>(VT_RCSMIN, 0.0);
  }
  /// Maximum radar cross section in meters squared.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  double rcsMax() const {
    return GetField<double>(VT_RCSMAX, 0.0);
  }
  /// Mean radar cross section in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double rcsMean() const {
    return GetField<double>(VT_RCSMEAN, 0.0);
  }
  /// The total beginning of life delta V of the spacecraft, in meters per second.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  double bolDeltaV() const {
    return GetField<double>(VT_BOLDELTAV, 0.0);
  }
  /// Maximum delta V available for this on-orbit spacecraft, in meters per second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxDeltaV() const {
    return GetField<double>(VT_MAXDELTAV, 0.0);
  }
  /// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  double deltaVUnc() const {
    return GetField<double>(VT_DELTAVUNC, 0.0);
  }
  /// Estimated maximum burn duration for the object, in seconds.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double estDeltaVDuration() const {
    return GetField<double>(VT_ESTDELTAVDURATION, 0.0);
  }
  /// The number of distinct missions the spacecraft performs.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t numMission() const {
    return GetField<int32_t>(VT_NUMMISSION, 0);
  }
  /// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
  /// Example: /// Example: ['Weather', 'Space Weather']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *missionTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MISSIONTYPES);
  }
  /// Type of the bus on the spacecraft.
  /// Example: /// Example: A2100
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *busType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUSTYPE);
  }
  /// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  double geoSlot() const {
    return GetField<double>(VT_GEOSLOT, 0.0);
  }
  /// GEO drift rate, if applicable in degrees per day.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double driftRate() const {
    return GetField<double>(VT_DRIFTRATE, 0.0);
  }
  /// Spacecraft dry mass (without fuel or disposables) in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double dryMass() const {
    return GetField<double>(VT_DRYMASS, 0.0);
  }
  /// Mass of fuel and disposables at launch time in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double additionalMass() const {
    return GetField<double>(VT_ADDITIONALMASS, 0.0);
  }
  /// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double launchMassMin() const {
    return GetField<double>(VT_LAUNCHMASSMIN, 0.0);
  }
  /// Nominal mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double launchMass() const {
    return GetField<double>(VT_LAUNCHMASS, 0.0);
  }
  /// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  double launchMassMax() const {
    return GetField<double>(VT_LAUNCHMASSMAX, 0.0);
  }
  /// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double bolFuelMass() const {
    return GetField<double>(VT_BOLFUELMASS, 0.0);
  }
  /// The estimated total current mass of the spacecraft, in kilograms.
  /// Example: /// Example: 500
  /// Constraints: No constraints specified.
  double currentMass() const {
    return GetField<double>(VT_CURRENTMASS, 0.0);
  }
  /// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  double totalMassUnc() const {
    return GetField<double>(VT_TOTALMASSUNC, 0.0);
  }
  /// Spacecraft deployed area of solar array in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double solarArrayArea() const {
    return GetField<double>(VT_SOLARARRAYAREA, 0.0);
  }
  /// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool maneuverable() const {
    return GetField<uint8_t>(VT_MANEUVERABLE, 0) != 0;
  }
  /// Estimated remaining fuel for the object in kilograms.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double fuelRemaining() const {
    return GetField<double>(VT_FUELREMAINING, 0.0);
  }
  /// Average cross sectional area in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double crossSection() const {
    return GetField<double>(VT_CROSSSECTION, 0.0);
  }
  /// Average cross sectional area of the bus in meters squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double busCrossSection() const {
    return GetField<double>(VT_BUSCROSSSECTION, 0.0);
  }
  /// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double maxRadius() const {
    return GetField<double>(VT_MAXRADIUS, 0.0);
  }
  /// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double colaRadius() const {
    return GetField<double>(VT_COLARADIUS, 0.0);
  }
  /// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double adeptRadius() const {
    return GetField<double>(VT_ADEPTRADIUS, 0.0);
  }
  /// The number of sub-satellites or deployable objects on the spacecraft.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t numDeployable() const {
    return GetField<int32_t>(VT_NUMDEPLOYABLE, 0);
  }
  /// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: ['GOES-18A', 'GOES-18B']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *depNames() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DEPNAMES);
  }
  /// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: [20, 21]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *depEstMasses() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DEPESTMASSES);
  }
  /// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
  /// Example: /// Example: [10, 5]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *depMassUncs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DEPMASSUNCS);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The name of the source who last provided an observation for this idOnOrbit.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *lastObSource() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBSOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OnorbitDetails_Abridged_dataMode_Enum dataMode() const {
    return static_cast<OnorbitDetails_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_LASTOBTIME) &&
           verifier.VerifyString(lastObTime()) &&
           VerifyField<double>(verifier, VT_VISMAG, 8) &&
           VerifyField<double>(verifier, VT_VISMAGMIN, 8) &&
           VerifyField<double>(verifier, VT_VISMAGMAX, 8) &&
           VerifyField<double>(verifier, VT_VISMAGMEAN, 8) &&
           VerifyField<double>(verifier, VT_RCS, 8) &&
           VerifyField<double>(verifier, VT_RCSMIN, 8) &&
           VerifyField<double>(verifier, VT_RCSMAX, 8) &&
           VerifyField<double>(verifier, VT_RCSMEAN, 8) &&
           VerifyField<double>(verifier, VT_BOLDELTAV, 8) &&
           VerifyField<double>(verifier, VT_MAXDELTAV, 8) &&
           VerifyField<double>(verifier, VT_DELTAVUNC, 8) &&
           VerifyField<double>(verifier, VT_ESTDELTAVDURATION, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMMISSION, 4) &&
           VerifyOffset(verifier, VT_MISSIONTYPES) &&
           verifier.VerifyVector(missionTypes()) &&
           verifier.VerifyVectorOfStrings(missionTypes()) &&
           VerifyOffset(verifier, VT_BUSTYPE) &&
           verifier.VerifyString(busType()) &&
           VerifyField<double>(verifier, VT_GEOSLOT, 8) &&
           VerifyField<double>(verifier, VT_DRIFTRATE, 8) &&
           VerifyField<double>(verifier, VT_DRYMASS, 8) &&
           VerifyField<double>(verifier, VT_ADDITIONALMASS, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHMASSMIN, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHMASS, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHMASSMAX, 8) &&
           VerifyField<double>(verifier, VT_BOLFUELMASS, 8) &&
           VerifyField<double>(verifier, VT_CURRENTMASS, 8) &&
           VerifyField<double>(verifier, VT_TOTALMASSUNC, 8) &&
           VerifyField<double>(verifier, VT_SOLARARRAYAREA, 8) &&
           VerifyField<uint8_t>(verifier, VT_MANEUVERABLE, 1) &&
           VerifyField<double>(verifier, VT_FUELREMAINING, 8) &&
           VerifyField<double>(verifier, VT_CROSSSECTION, 8) &&
           VerifyField<double>(verifier, VT_BUSCROSSSECTION, 8) &&
           VerifyField<double>(verifier, VT_MAXRADIUS, 8) &&
           VerifyField<double>(verifier, VT_COLARADIUS, 8) &&
           VerifyField<double>(verifier, VT_ADEPTRADIUS, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMDEPLOYABLE, 4) &&
           VerifyOffset(verifier, VT_DEPNAMES) &&
           verifier.VerifyVector(depNames()) &&
           verifier.VerifyVectorOfStrings(depNames()) &&
           VerifyOffset(verifier, VT_DEPESTMASSES) &&
           verifier.VerifyVector(depEstMasses()) &&
           verifier.VerifyVectorOfStrings(depEstMasses()) &&
           VerifyOffset(verifier, VT_DEPMASSUNCS) &&
           verifier.VerifyVector(depMassUncs()) &&
           verifier.VerifyVectorOfStrings(depMassUncs()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_LASTOBSOURCE) &&
           verifier.VerifyString(lastObSource()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct OnorbitDetails_AbridgedBuilder {
  typedef OnorbitDetails_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_ID, id);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_lastObTime(::flatbuffers::Offset<::flatbuffers::String> lastObTime) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_LASTOBTIME, lastObTime);
  }
  void add_vismag(double vismag) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_VISMAG, vismag, 0.0);
  }
  void add_vismagMin(double vismagMin) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_VISMAGMIN, vismagMin, 0.0);
  }
  void add_vismagMax(double vismagMax) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_VISMAGMAX, vismagMax, 0.0);
  }
  void add_vismagMean(double vismagMean) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_VISMAGMEAN, vismagMean, 0.0);
  }
  void add_rcs(double rcs) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_RCS, rcs, 0.0);
  }
  void add_rcsMin(double rcsMin) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_RCSMIN, rcsMin, 0.0);
  }
  void add_rcsMax(double rcsMax) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_RCSMAX, rcsMax, 0.0);
  }
  void add_rcsMean(double rcsMean) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_RCSMEAN, rcsMean, 0.0);
  }
  void add_bolDeltaV(double bolDeltaV) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_BOLDELTAV, bolDeltaV, 0.0);
  }
  void add_maxDeltaV(double maxDeltaV) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_MAXDELTAV, maxDeltaV, 0.0);
  }
  void add_deltaVUnc(double deltaVUnc) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_DELTAVUNC, deltaVUnc, 0.0);
  }
  void add_estDeltaVDuration(double estDeltaVDuration) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_ESTDELTAVDURATION, estDeltaVDuration, 0.0);
  }
  void add_numMission(int32_t numMission) {
    fbb_.AddElement<int32_t>(OnorbitDetails_Abridged::VT_NUMMISSION, numMission, 0);
  }
  void add_missionTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> missionTypes) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_MISSIONTYPES, missionTypes);
  }
  void add_busType(::flatbuffers::Offset<::flatbuffers::String> busType) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_BUSTYPE, busType);
  }
  void add_geoSlot(double geoSlot) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_GEOSLOT, geoSlot, 0.0);
  }
  void add_driftRate(double driftRate) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_DRIFTRATE, driftRate, 0.0);
  }
  void add_dryMass(double dryMass) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_DRYMASS, dryMass, 0.0);
  }
  void add_additionalMass(double additionalMass) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_ADDITIONALMASS, additionalMass, 0.0);
  }
  void add_launchMassMin(double launchMassMin) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_LAUNCHMASSMIN, launchMassMin, 0.0);
  }
  void add_launchMass(double launchMass) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_LAUNCHMASS, launchMass, 0.0);
  }
  void add_launchMassMax(double launchMassMax) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_LAUNCHMASSMAX, launchMassMax, 0.0);
  }
  void add_bolFuelMass(double bolFuelMass) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_BOLFUELMASS, bolFuelMass, 0.0);
  }
  void add_currentMass(double currentMass) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_CURRENTMASS, currentMass, 0.0);
  }
  void add_totalMassUnc(double totalMassUnc) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_TOTALMASSUNC, totalMassUnc, 0.0);
  }
  void add_solarArrayArea(double solarArrayArea) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_SOLARARRAYAREA, solarArrayArea, 0.0);
  }
  void add_maneuverable(bool maneuverable) {
    fbb_.AddElement<uint8_t>(OnorbitDetails_Abridged::VT_MANEUVERABLE, static_cast<uint8_t>(maneuverable), 0);
  }
  void add_fuelRemaining(double fuelRemaining) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_FUELREMAINING, fuelRemaining, 0.0);
  }
  void add_crossSection(double crossSection) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_CROSSSECTION, crossSection, 0.0);
  }
  void add_busCrossSection(double busCrossSection) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_BUSCROSSSECTION, busCrossSection, 0.0);
  }
  void add_maxRadius(double maxRadius) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_MAXRADIUS, maxRadius, 0.0);
  }
  void add_colaRadius(double colaRadius) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_COLARADIUS, colaRadius, 0.0);
  }
  void add_adeptRadius(double adeptRadius) {
    fbb_.AddElement<double>(OnorbitDetails_Abridged::VT_ADEPTRADIUS, adeptRadius, 0.0);
  }
  void add_numDeployable(int32_t numDeployable) {
    fbb_.AddElement<int32_t>(OnorbitDetails_Abridged::VT_NUMDEPLOYABLE, numDeployable, 0);
  }
  void add_depNames(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depNames) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_DEPNAMES, depNames);
  }
  void add_depEstMasses(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depEstMasses) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_DEPESTMASSES, depEstMasses);
  }
  void add_depMassUncs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depMassUncs) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_DEPMASSUNCS, depMassUncs);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_ORIGIN, origin);
  }
  void add_lastObSource(::flatbuffers::Offset<::flatbuffers::String> lastObSource) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_LASTOBSOURCE, lastObSource);
  }
  void add_dataMode(OnorbitDetails_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnorbitDetails_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OnorbitDetails_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit OnorbitDetails_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitDetails_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitDetails_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitDetails_Abridged> CreateOnorbitDetails_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastObTime = 0,
    double vismag = 0.0,
    double vismagMin = 0.0,
    double vismagMax = 0.0,
    double vismagMean = 0.0,
    double rcs = 0.0,
    double rcsMin = 0.0,
    double rcsMax = 0.0,
    double rcsMean = 0.0,
    double bolDeltaV = 0.0,
    double maxDeltaV = 0.0,
    double deltaVUnc = 0.0,
    double estDeltaVDuration = 0.0,
    int32_t numMission = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> missionTypes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> busType = 0,
    double geoSlot = 0.0,
    double driftRate = 0.0,
    double dryMass = 0.0,
    double additionalMass = 0.0,
    double launchMassMin = 0.0,
    double launchMass = 0.0,
    double launchMassMax = 0.0,
    double bolFuelMass = 0.0,
    double currentMass = 0.0,
    double totalMassUnc = 0.0,
    double solarArrayArea = 0.0,
    bool maneuverable = false,
    double fuelRemaining = 0.0,
    double crossSection = 0.0,
    double busCrossSection = 0.0,
    double maxRadius = 0.0,
    double colaRadius = 0.0,
    double adeptRadius = 0.0,
    int32_t numDeployable = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depNames = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depEstMasses = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> depMassUncs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastObSource = 0,
    OnorbitDetails_Abridged_dataMode_Enum dataMode = OnorbitDetails_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  OnorbitDetails_AbridgedBuilder builder_(_fbb);
  builder_.add_adeptRadius(adeptRadius);
  builder_.add_colaRadius(colaRadius);
  builder_.add_maxRadius(maxRadius);
  builder_.add_busCrossSection(busCrossSection);
  builder_.add_crossSection(crossSection);
  builder_.add_fuelRemaining(fuelRemaining);
  builder_.add_solarArrayArea(solarArrayArea);
  builder_.add_totalMassUnc(totalMassUnc);
  builder_.add_currentMass(currentMass);
  builder_.add_bolFuelMass(bolFuelMass);
  builder_.add_launchMassMax(launchMassMax);
  builder_.add_launchMass(launchMass);
  builder_.add_launchMassMin(launchMassMin);
  builder_.add_additionalMass(additionalMass);
  builder_.add_dryMass(dryMass);
  builder_.add_driftRate(driftRate);
  builder_.add_geoSlot(geoSlot);
  builder_.add_estDeltaVDuration(estDeltaVDuration);
  builder_.add_deltaVUnc(deltaVUnc);
  builder_.add_maxDeltaV(maxDeltaV);
  builder_.add_bolDeltaV(bolDeltaV);
  builder_.add_rcsMean(rcsMean);
  builder_.add_rcsMax(rcsMax);
  builder_.add_rcsMin(rcsMin);
  builder_.add_rcs(rcs);
  builder_.add_vismagMean(vismagMean);
  builder_.add_vismagMax(vismagMax);
  builder_.add_vismagMin(vismagMin);
  builder_.add_vismag(vismag);
  builder_.add_origNetwork(origNetwork);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_lastObSource(lastObSource);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_depMassUncs(depMassUncs);
  builder_.add_depEstMasses(depEstMasses);
  builder_.add_depNames(depNames);
  builder_.add_numDeployable(numDeployable);
  builder_.add_busType(busType);
  builder_.add_missionTypes(missionTypes);
  builder_.add_numMission(numMission);
  builder_.add_lastObTime(lastObTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_maneuverable(maneuverable);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitDetails_Abridged> CreateOnorbitDetails_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOnOrbit = nullptr,
    const char *classificationMarking = nullptr,
    const char *lastObTime = nullptr,
    double vismag = 0.0,
    double vismagMin = 0.0,
    double vismagMax = 0.0,
    double vismagMean = 0.0,
    double rcs = 0.0,
    double rcsMin = 0.0,
    double rcsMax = 0.0,
    double rcsMean = 0.0,
    double bolDeltaV = 0.0,
    double maxDeltaV = 0.0,
    double deltaVUnc = 0.0,
    double estDeltaVDuration = 0.0,
    int32_t numMission = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *missionTypes = nullptr,
    const char *busType = nullptr,
    double geoSlot = 0.0,
    double driftRate = 0.0,
    double dryMass = 0.0,
    double additionalMass = 0.0,
    double launchMassMin = 0.0,
    double launchMass = 0.0,
    double launchMassMax = 0.0,
    double bolFuelMass = 0.0,
    double currentMass = 0.0,
    double totalMassUnc = 0.0,
    double solarArrayArea = 0.0,
    bool maneuverable = false,
    double fuelRemaining = 0.0,
    double crossSection = 0.0,
    double busCrossSection = 0.0,
    double maxRadius = 0.0,
    double colaRadius = 0.0,
    double adeptRadius = 0.0,
    int32_t numDeployable = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *depNames = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *depEstMasses = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *depMassUncs = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *lastObSource = nullptr,
    OnorbitDetails_Abridged_dataMode_Enum dataMode = OnorbitDetails_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto lastObTime__ = lastObTime ? _fbb.CreateString(lastObTime) : 0;
  auto missionTypes__ = missionTypes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*missionTypes) : 0;
  auto busType__ = busType ? _fbb.CreateString(busType) : 0;
  auto depNames__ = depNames ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*depNames) : 0;
  auto depEstMasses__ = depEstMasses ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*depEstMasses) : 0;
  auto depMassUncs__ = depMassUncs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*depMassUncs) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto lastObSource__ = lastObSource ? _fbb.CreateString(lastObSource) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOnorbitDetails_Abridged(
      _fbb,
      id__,
      idOnOrbit__,
      classificationMarking__,
      lastObTime__,
      vismag,
      vismagMin,
      vismagMax,
      vismagMean,
      rcs,
      rcsMin,
      rcsMax,
      rcsMean,
      bolDeltaV,
      maxDeltaV,
      deltaVUnc,
      estDeltaVDuration,
      numMission,
      missionTypes__,
      busType__,
      geoSlot,
      driftRate,
      dryMass,
      additionalMass,
      launchMassMin,
      launchMass,
      launchMassMax,
      bolFuelMass,
      currentMass,
      totalMassUnc,
      solarArrayArea,
      maneuverable,
      fuelRemaining,
      crossSection,
      busCrossSection,
      maxRadius,
      colaRadius,
      adeptRadius,
      numDeployable,
      depNames__,
      depEstMasses__,
      depMassUncs__,
      source__,
      origin__,
      lastObSource__,
      dataMode,
      createdAt__,
      createdBy__,
      origNetwork__);
}

inline const OnorbitDetails_Abridged *GetOnorbitDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitDetails_Abridged>(buf);
}

inline const OnorbitDetails_Abridged *GetSizePrefixedOnorbitDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitDetails_Abridged>(buf);
}

inline const char *OnorbitDetails_AbridgedIdentifier() {
  return "ONOR";
}

inline bool OnorbitDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitDetails_AbridgedIdentifier());
}

inline bool SizePrefixedOnorbitDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitDetails_AbridgedIdentifier(), true);
}

inline bool VerifyOnorbitDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitDetails_Abridged>(OnorbitDetails_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOnorbitDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitDetails_Abridged>(OnorbitDetails_AbridgedIdentifier());
}

inline void FinishOnorbitDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitDetails_Abridged> root) {
  fbb.Finish(root, OnorbitDetails_AbridgedIdentifier());
}

inline void FinishSizePrefixedOnorbitDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitDetails_Abridged> root) {
  fbb.FinishSizePrefixed(root, OnorbitDetails_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
