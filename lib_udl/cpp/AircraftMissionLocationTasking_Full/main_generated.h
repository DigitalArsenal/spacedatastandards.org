// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftMissionLocationTasking_Full;
struct AircraftMissionLocationTasking_FullBuilder;

/// /// Collection of aircraft mission location information for this aircraft mission tasking.
struct AircraftMissionLocationTasking_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftMissionLocationTasking_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STARTTIME = 4,
    VT_ENDTIME = 6,
    VT_MSNLOCNAME = 8,
    VT_ALT = 10,
    VT_AIRMSNPRI = 12,
    VT_AREAGEORAD = 14,
    VT_MSNLOCPTNAME = 16,
    VT_MSNLOCPTLAT = 18,
    VT_MSNLOCPTLON = 20,
    VT_MSNLOCPTBART = 22
  };
  /// The start time of this mission in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The end time of this mission in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
  /// Example: /// Example: KLSV
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *msnLocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNLOCNAME);
  }
  /// The altitude for this mission represented as hundreds of feet above MSL.
  /// Example: /// Example: 210
  /// Constraints: No constraints specified.
  int32_t alt() const {
    return GetField<int32_t>(VT_ALT, 0);
  }
  /// The code for the priority assigned to this mission.
  /// Example: /// Example: 1A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *airMsnPri() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRMSNPRI);
  }
  /// The radius of the circle around the location being reported in feet.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  int32_t areaGeoRad() const {
    return GetField<int32_t>(VT_AREAGEORAD, 0);
  }
  /// The location name for this mission.
  /// Example: /// Example: PT ALFA
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *msnLocPtName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNLOCPTNAME);
  }
  /// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: 35.123
  /// Constraints: No constraints specified.
  double msnLocPtLat() const {
    return GetField<double>(VT_MSNLOCPTLAT, 0.0);
  }
  /// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: 79.01
  /// Constraints: No constraints specified.
  double msnLocPtLon() const {
    return GetField<double>(VT_MSNLOCPTLON, 0.0);
  }
  /// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
  /// Example: /// Example: 330T-PT ALFA-50NM
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *msnLocPtBarT() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNLOCPTBART);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_MSNLOCNAME) &&
           verifier.VerifyString(msnLocName()) &&
           VerifyField<int32_t>(verifier, VT_ALT, 4) &&
           VerifyOffset(verifier, VT_AIRMSNPRI) &&
           verifier.VerifyString(airMsnPri()) &&
           VerifyField<int32_t>(verifier, VT_AREAGEORAD, 4) &&
           VerifyOffset(verifier, VT_MSNLOCPTNAME) &&
           verifier.VerifyString(msnLocPtName()) &&
           VerifyField<double>(verifier, VT_MSNLOCPTLAT, 8) &&
           VerifyField<double>(verifier, VT_MSNLOCPTLON, 8) &&
           VerifyOffset(verifier, VT_MSNLOCPTBART) &&
           verifier.VerifyString(msnLocPtBarT()) &&
           verifier.EndTable();
  }
};

struct AircraftMissionLocationTasking_FullBuilder {
  typedef AircraftMissionLocationTasking_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_ENDTIME, endTime);
  }
  void add_msnLocName(::flatbuffers::Offset<::flatbuffers::String> msnLocName) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_MSNLOCNAME, msnLocName);
  }
  void add_alt(int32_t alt) {
    fbb_.AddElement<int32_t>(AircraftMissionLocationTasking_Full::VT_ALT, alt, 0);
  }
  void add_airMsnPri(::flatbuffers::Offset<::flatbuffers::String> airMsnPri) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_AIRMSNPRI, airMsnPri);
  }
  void add_areaGeoRad(int32_t areaGeoRad) {
    fbb_.AddElement<int32_t>(AircraftMissionLocationTasking_Full::VT_AREAGEORAD, areaGeoRad, 0);
  }
  void add_msnLocPtName(::flatbuffers::Offset<::flatbuffers::String> msnLocPtName) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_MSNLOCPTNAME, msnLocPtName);
  }
  void add_msnLocPtLat(double msnLocPtLat) {
    fbb_.AddElement<double>(AircraftMissionLocationTasking_Full::VT_MSNLOCPTLAT, msnLocPtLat, 0.0);
  }
  void add_msnLocPtLon(double msnLocPtLon) {
    fbb_.AddElement<double>(AircraftMissionLocationTasking_Full::VT_MSNLOCPTLON, msnLocPtLon, 0.0);
  }
  void add_msnLocPtBarT(::flatbuffers::Offset<::flatbuffers::String> msnLocPtBarT) {
    fbb_.AddOffset(AircraftMissionLocationTasking_Full::VT_MSNLOCPTBART, msnLocPtBarT);
  }
  explicit AircraftMissionLocationTasking_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftMissionLocationTasking_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftMissionLocationTasking_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftMissionLocationTasking_Full> CreateAircraftMissionLocationTasking_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnLocName = 0,
    int32_t alt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> airMsnPri = 0,
    int32_t areaGeoRad = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnLocPtName = 0,
    double msnLocPtLat = 0.0,
    double msnLocPtLon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> msnLocPtBarT = 0) {
  AircraftMissionLocationTasking_FullBuilder builder_(_fbb);
  builder_.add_msnLocPtLon(msnLocPtLon);
  builder_.add_msnLocPtLat(msnLocPtLat);
  builder_.add_msnLocPtBarT(msnLocPtBarT);
  builder_.add_msnLocPtName(msnLocPtName);
  builder_.add_areaGeoRad(areaGeoRad);
  builder_.add_airMsnPri(airMsnPri);
  builder_.add_alt(alt);
  builder_.add_msnLocName(msnLocName);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftMissionLocationTasking_Full> CreateAircraftMissionLocationTasking_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *msnLocName = nullptr,
    int32_t alt = 0,
    const char *airMsnPri = nullptr,
    int32_t areaGeoRad = 0,
    const char *msnLocPtName = nullptr,
    double msnLocPtLat = 0.0,
    double msnLocPtLon = 0.0,
    const char *msnLocPtBarT = nullptr) {
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto msnLocName__ = msnLocName ? _fbb.CreateString(msnLocName) : 0;
  auto airMsnPri__ = airMsnPri ? _fbb.CreateString(airMsnPri) : 0;
  auto msnLocPtName__ = msnLocPtName ? _fbb.CreateString(msnLocPtName) : 0;
  auto msnLocPtBarT__ = msnLocPtBarT ? _fbb.CreateString(msnLocPtBarT) : 0;
  return CreateAircraftMissionLocationTasking_Full(
      _fbb,
      startTime__,
      endTime__,
      msnLocName__,
      alt,
      airMsnPri__,
      areaGeoRad,
      msnLocPtName__,
      msnLocPtLat,
      msnLocPtLon,
      msnLocPtBarT__);
}

inline const AircraftMissionLocationTasking_Full *GetAircraftMissionLocationTasking_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftMissionLocationTasking_Full>(buf);
}

inline const AircraftMissionLocationTasking_Full *GetSizePrefixedAircraftMissionLocationTasking_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftMissionLocationTasking_Full>(buf);
}

inline const char *AircraftMissionLocationTasking_FullIdentifier() {
  return "AIRC";
}

inline bool AircraftMissionLocationTasking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionLocationTasking_FullIdentifier());
}

inline bool SizePrefixedAircraftMissionLocationTasking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionLocationTasking_FullIdentifier(), true);
}

inline bool VerifyAircraftMissionLocationTasking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftMissionLocationTasking_Full>(AircraftMissionLocationTasking_FullIdentifier());
}

inline bool VerifySizePrefixedAircraftMissionLocationTasking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftMissionLocationTasking_Full>(AircraftMissionLocationTasking_FullIdentifier());
}

inline void FinishAircraftMissionLocationTasking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionLocationTasking_Full> root) {
  fbb.Finish(root, AircraftMissionLocationTasking_FullIdentifier());
}

inline void FinishSizePrefixedAircraftMissionLocationTasking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionLocationTasking_Full> root) {
  fbb.FinishSizePrefixed(root, AircraftMissionLocationTasking_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
