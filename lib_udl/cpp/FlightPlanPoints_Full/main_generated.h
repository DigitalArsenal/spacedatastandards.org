// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanPoints_Full;
struct FlightPlanPoints_FullBuilder;

/// /// Array of point data for this Point Group.
struct FlightPlanPoints_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanPoints_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINTNAME = 4,
    VT_FPPLAT = 6,
    VT_FPPLON = 8,
    VT_FPPETA = 10,
    VT_FPPREQFUEL = 12
  };
  /// Name of this point.
  /// Example: /// Example: CRUISE ALTITUDE ETP
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pointName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POINTNAME);
  }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double fppLat() const {
    return GetField<double>(VT_FPPLAT, 0.0);
  }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double fppLon() const {
    return GetField<double>(VT_FPPLON, 0.0);
  }
  /// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *fppEta() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FPPETA);
  }
  /// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
  /// Example: /// Example: 4250.1
  /// Constraints: No constraints specified.
  double fppReqFuel() const {
    return GetField<double>(VT_FPPREQFUEL, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POINTNAME) &&
           verifier.VerifyString(pointName()) &&
           VerifyField<double>(verifier, VT_FPPLAT, 8) &&
           VerifyField<double>(verifier, VT_FPPLON, 8) &&
           VerifyOffset(verifier, VT_FPPETA) &&
           verifier.VerifyString(fppEta()) &&
           VerifyField<double>(verifier, VT_FPPREQFUEL, 8) &&
           verifier.EndTable();
  }
};

struct FlightPlanPoints_FullBuilder {
  typedef FlightPlanPoints_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pointName(::flatbuffers::Offset<::flatbuffers::String> pointName) {
    fbb_.AddOffset(FlightPlanPoints_Full::VT_POINTNAME, pointName);
  }
  void add_fppLat(double fppLat) {
    fbb_.AddElement<double>(FlightPlanPoints_Full::VT_FPPLAT, fppLat, 0.0);
  }
  void add_fppLon(double fppLon) {
    fbb_.AddElement<double>(FlightPlanPoints_Full::VT_FPPLON, fppLon, 0.0);
  }
  void add_fppEta(::flatbuffers::Offset<::flatbuffers::String> fppEta) {
    fbb_.AddOffset(FlightPlanPoints_Full::VT_FPPETA, fppEta);
  }
  void add_fppReqFuel(double fppReqFuel) {
    fbb_.AddElement<double>(FlightPlanPoints_Full::VT_FPPREQFUEL, fppReqFuel, 0.0);
  }
  explicit FlightPlanPoints_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanPoints_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanPoints_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanPoints_Full> CreateFlightPlanPoints_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> pointName = 0,
    double fppLat = 0.0,
    double fppLon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> fppEta = 0,
    double fppReqFuel = 0.0) {
  FlightPlanPoints_FullBuilder builder_(_fbb);
  builder_.add_fppReqFuel(fppReqFuel);
  builder_.add_fppLon(fppLon);
  builder_.add_fppLat(fppLat);
  builder_.add_fppEta(fppEta);
  builder_.add_pointName(pointName);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlanPoints_Full> CreateFlightPlanPoints_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *pointName = nullptr,
    double fppLat = 0.0,
    double fppLon = 0.0,
    const char *fppEta = nullptr,
    double fppReqFuel = 0.0) {
  auto pointName__ = pointName ? _fbb.CreateString(pointName) : 0;
  auto fppEta__ = fppEta ? _fbb.CreateString(fppEta) : 0;
  return CreateFlightPlanPoints_Full(
      _fbb,
      pointName__,
      fppLat,
      fppLon,
      fppEta__,
      fppReqFuel);
}

inline const FlightPlanPoints_Full *GetFlightPlanPoints_Full(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanPoints_Full>(buf);
}

inline const FlightPlanPoints_Full *GetSizePrefixedFlightPlanPoints_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanPoints_Full>(buf);
}

inline const char *FlightPlanPoints_FullIdentifier() {
  return "FLIG";
}

inline bool FlightPlanPoints_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanPoints_FullIdentifier());
}

inline bool SizePrefixedFlightPlanPoints_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanPoints_FullIdentifier(), true);
}

inline bool VerifyFlightPlanPoints_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanPoints_Full>(FlightPlanPoints_FullIdentifier());
}

inline bool VerifySizePrefixedFlightPlanPoints_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanPoints_Full>(FlightPlanPoints_FullIdentifier());
}

inline void FinishFlightPlanPoints_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanPoints_Full> root) {
  fbb.Finish(root, FlightPlanPoints_FullIdentifier());
}

inline void FinishSizePrefixedFlightPlanPoints_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanPoints_Full> root) {
  fbb.FinishSizePrefixed(root, FlightPlanPoints_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
