// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Elset_Full;
struct Elset_FullBuilder;

enum Elset_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Elset_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Elset_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Elset_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Elset_Full_dataMode_Enum_EXERCISE = 3,
  Elset_Full_dataMode_Enum_MIN = Elset_Full_dataMode_Enum_REAL,
  Elset_Full_dataMode_Enum_MAX = Elset_Full_dataMode_Enum_EXERCISE
};

inline const Elset_Full_dataMode_Enum (&EnumValuesElset_Full_dataMode_Enum())[4] {
  static const Elset_Full_dataMode_Enum values[] = {
    Elset_Full_dataMode_Enum_REAL,
    Elset_Full_dataMode_Enum_TEST,
    Elset_Full_dataMode_Enum_SIMULATED,
    Elset_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesElset_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameElset_Full_dataMode_Enum(Elset_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Elset_Full_dataMode_Enum_REAL, Elset_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesElset_Full_dataMode_Enum()[index];
}

enum Elset_Full_sourcedDataTypes_Enum : int8_t {
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_EO = 0,
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_RADAR = 1,
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_RF = 2,
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_DOA = 3,
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_ELSET = 4,
  /// No description available.
  Elset_Full_sourcedDataTypes_Enum_SV = 5,
  Elset_Full_sourcedDataTypes_Enum_MIN = Elset_Full_sourcedDataTypes_Enum_EO,
  Elset_Full_sourcedDataTypes_Enum_MAX = Elset_Full_sourcedDataTypes_Enum_SV
};

inline const Elset_Full_sourcedDataTypes_Enum (&EnumValuesElset_Full_sourcedDataTypes_Enum())[6] {
  static const Elset_Full_sourcedDataTypes_Enum values[] = {
    Elset_Full_sourcedDataTypes_Enum_EO,
    Elset_Full_sourcedDataTypes_Enum_RADAR,
    Elset_Full_sourcedDataTypes_Enum_RF,
    Elset_Full_sourcedDataTypes_Enum_DOA,
    Elset_Full_sourcedDataTypes_Enum_ELSET,
    Elset_Full_sourcedDataTypes_Enum_SV
  };
  return values;
}

inline const char * const *EnumNamesElset_Full_sourcedDataTypes_Enum() {
  static const char * const names[7] = {
    "EO",
    "RADAR",
    "RF",
    "DOA",
    "ELSET",
    "SV",
    nullptr
  };
  return names;
}

inline const char *EnumNameElset_Full_sourcedDataTypes_Enum(Elset_Full_sourcedDataTypes_Enum e) {
  if (::flatbuffers::IsOutRange(e, Elset_Full_sourcedDataTypes_Enum_EO, Elset_Full_sourcedDataTypes_Enum_SV)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesElset_Full_sourcedDataTypes_Enum()[index];
}

/// /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
struct Elset_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Elset_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDELSET = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SATNO = 8,
    VT_EPOCH = 10,
    VT_MEANMOTION = 12,
    VT_IDONORBIT = 14,
    VT_UCT = 16,
    VT_ECCENTRICITY = 18,
    VT_INCLINATION = 20,
    VT_RAAN = 22,
    VT_ARGOFPERIGEE = 24,
    VT_MEANANOMALY = 26,
    VT_REVNO = 28,
    VT_BSTAR = 30,
    VT_AGOM = 32,
    VT_BALLISTICCOEFF = 34,
    VT_MEANMOTIONDOT = 36,
    VT_MEANMOTIONDDOT = 38,
    VT_SEMIMAJORAXIS = 40,
    VT_PERIOD = 42,
    VT_APOGEE = 44,
    VT_PERIGEE = 46,
    VT_ORIGOBJECTID = 48,
    VT_IDORBITDETERMINATION = 50,
    VT_EFFECTIVEFROM = 52,
    VT_EFFECTIVEUNTIL = 54,
    VT_LINE1 = 56,
    VT_LINE2 = 58,
    VT_DESCRIPTOR = 60,
    VT_CREATEDAT = 62,
    VT_CREATEDBY = 64,
    VT_RAWFILEURI = 66,
    VT_ORIGIN = 68,
    VT_SOURCEDL = 70,
    VT_SOURCE = 72,
    VT_DATAMODE = 74,
    VT_TAGS = 76,
    VT_ALGORITHM = 78,
    VT_SOURCEDDATA = 80,
    VT_SOURCEDDATATYPES = 82,
    VT_TRANSACTIONID = 84,
    VT_EPHEMTYPE = 86,
    VT_ORIGNETWORK = 88,
    VT_ONORBIT = 90
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDELSET);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *epoch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EPOCH);
  }
  /// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double meanMotion() const {
    return GetField<double>(VT_MEANMOTION, 0.0);
  }
  /// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool uct() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.333
  /// Constraints: No constraints specified.
  double eccentricity() const {
    return GetField<double>(VT_ECCENTRICITY, 0.0);
  }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  double inclination() const {
    return GetField<double>(VT_INCLINATION, 0.0);
  }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double raan() const {
    return GetField<double>(VT_RAAN, 0.0);
  }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double argOfPerigee() const {
    return GetField<double>(VT_ARGOFPERIGEE, 0.0);
  }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double meanAnomaly() const {
    return GetField<double>(VT_MEANANOMALY, 0.0);
  }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 111
  /// Constraints: No constraints specified.
  int32_t revNo() const {
    return GetField<int32_t>(VT_REVNO, 0);
  }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double bStar() const {
    return GetField<double>(VT_BSTAR, 0.0);
  }
  /// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
  /// Example: /// Example: 0.0126
  /// Constraints: No constraints specified.
  double agom() const {
    return GetField<double>(VT_AGOM, 0.0);
  }
  /// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
  /// Example: /// Example: 0.00815
  /// Constraints: No constraints specified.
  double ballisticCoeff() const {
    return GetField<double>(VT_BALLISTICCOEFF, 0.0);
  }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double meanMotionDot() const {
    return GetField<double>(VT_MEANMOTIONDOT, 0.0);
  }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double meanMotionDDot() const {
    return GetField<double>(VT_MEANMOTIONDDOT, 0.0);
  }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double semiMajorAxis() const {
    return GetField<double>(VT_SEMIMAJORAXIS, 0.0);
  }
  /// Period of the orbit equal to inverse of mean motion, in minutes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double period() const {
    return GetField<double>(VT_PERIOD, 0.0);
  }
  /// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double apogee() const {
    return GetField<double>(VT_APOGEE, 0.0);
  }
  /// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double perigee() const {
    return GetField<double>(VT_PERIGEE, 0.0);
  }
  /// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOrbitDetermination() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDORBITDETERMINATION);
  }
  /// Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveFrom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEFROM);
  }
  /// Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveUntil() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEUNTIL);
  }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line1
  /// Constraints: Minimum length = 0, Maximum length = 69
  const ::flatbuffers::String *line1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINE1);
  }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line2
  /// Constraints: Minimum length = 0, Maximum length = 69
  const ::flatbuffers::String *line2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINE2);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Elset_Full_dataMode_Enum dataMode() const {
    return static_cast<Elset_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Optional algorithm used to produce this record.
  /// Example: /// Example: Example algorithm
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *algorithm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALGORITHM);
  }
  /// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sourcedData() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SOURCEDDATA);
  }
  /// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  /// Example: /// Example: ['RADAR', 'RF']
  /// Constraints: No constraints specified.
  Elset_Full_sourcedDataTypes_Enum sourcedDataTypes() const {
    return static_cast<Elset_Full_sourcedDataTypes_Enum>(GetField<int8_t>(VT_SOURCEDDATATYPES, 0));
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// The ephemeris type associated with this TLE:
  /// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
  /// 1:&nbsp;SGP
  /// 2:&nbsp;SGP4
  /// 3:&nbsp;SDP4
  /// 4:&nbsp;SGP8, also referred to as SGP4-XP
  /// 5:&nbsp;SDP8
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t ephemType() const {
    return GetField<int32_t>(VT_EPHEMTYPE, 0);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDELSET) &&
           verifier.VerifyString(idElset()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_EPOCH) &&
           verifier.VerifyString(epoch()) &&
           VerifyField<double>(verifier, VT_MEANMOTION, 8) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyField<double>(verifier, VT_ECCENTRICITY, 8) &&
           VerifyField<double>(verifier, VT_INCLINATION, 8) &&
           VerifyField<double>(verifier, VT_RAAN, 8) &&
           VerifyField<double>(verifier, VT_ARGOFPERIGEE, 8) &&
           VerifyField<double>(verifier, VT_MEANANOMALY, 8) &&
           VerifyField<int32_t>(verifier, VT_REVNO, 4) &&
           VerifyField<double>(verifier, VT_BSTAR, 8) &&
           VerifyField<double>(verifier, VT_AGOM, 8) &&
           VerifyField<double>(verifier, VT_BALLISTICCOEFF, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDOT, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDDOT, 8) &&
           VerifyField<double>(verifier, VT_SEMIMAJORAXIS, 8) &&
           VerifyField<double>(verifier, VT_PERIOD, 8) &&
           VerifyField<double>(verifier, VT_APOGEE, 8) &&
           VerifyField<double>(verifier, VT_PERIGEE, 8) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_IDORBITDETERMINATION) &&
           verifier.VerifyString(idOrbitDetermination()) &&
           VerifyOffset(verifier, VT_EFFECTIVEFROM) &&
           verifier.VerifyString(effectiveFrom()) &&
           VerifyOffset(verifier, VT_EFFECTIVEUNTIL) &&
           verifier.VerifyString(effectiveUntil()) &&
           VerifyOffset(verifier, VT_LINE1) &&
           verifier.VerifyString(line1()) &&
           VerifyOffset(verifier, VT_LINE2) &&
           verifier.VerifyString(line2()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_ALGORITHM) &&
           verifier.VerifyString(algorithm()) &&
           VerifyOffset(verifier, VT_SOURCEDDATA) &&
           verifier.VerifyVector(sourcedData()) &&
           verifier.VerifyVectorOfStrings(sourcedData()) &&
           VerifyField<int8_t>(verifier, VT_SOURCEDDATATYPES, 1) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyField<int32_t>(verifier, VT_EPHEMTYPE, 4) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           verifier.EndTable();
  }
};

struct Elset_FullBuilder {
  typedef Elset_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idElset(::flatbuffers::Offset<::flatbuffers::String> idElset) {
    fbb_.AddOffset(Elset_Full::VT_IDELSET, idElset);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Elset_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(Elset_Full::VT_SATNO, satNo, 0);
  }
  void add_epoch(::flatbuffers::Offset<::flatbuffers::String> epoch) {
    fbb_.AddOffset(Elset_Full::VT_EPOCH, epoch);
  }
  void add_meanMotion(double meanMotion) {
    fbb_.AddElement<double>(Elset_Full::VT_MEANMOTION, meanMotion, 0.0);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(Elset_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_uct(bool uct) {
    fbb_.AddElement<uint8_t>(Elset_Full::VT_UCT, static_cast<uint8_t>(uct), 0);
  }
  void add_eccentricity(double eccentricity) {
    fbb_.AddElement<double>(Elset_Full::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  void add_inclination(double inclination) {
    fbb_.AddElement<double>(Elset_Full::VT_INCLINATION, inclination, 0.0);
  }
  void add_raan(double raan) {
    fbb_.AddElement<double>(Elset_Full::VT_RAAN, raan, 0.0);
  }
  void add_argOfPerigee(double argOfPerigee) {
    fbb_.AddElement<double>(Elset_Full::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  void add_meanAnomaly(double meanAnomaly) {
    fbb_.AddElement<double>(Elset_Full::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  void add_revNo(int32_t revNo) {
    fbb_.AddElement<int32_t>(Elset_Full::VT_REVNO, revNo, 0);
  }
  void add_bStar(double bStar) {
    fbb_.AddElement<double>(Elset_Full::VT_BSTAR, bStar, 0.0);
  }
  void add_agom(double agom) {
    fbb_.AddElement<double>(Elset_Full::VT_AGOM, agom, 0.0);
  }
  void add_ballisticCoeff(double ballisticCoeff) {
    fbb_.AddElement<double>(Elset_Full::VT_BALLISTICCOEFF, ballisticCoeff, 0.0);
  }
  void add_meanMotionDot(double meanMotionDot) {
    fbb_.AddElement<double>(Elset_Full::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  void add_meanMotionDDot(double meanMotionDDot) {
    fbb_.AddElement<double>(Elset_Full::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  void add_semiMajorAxis(double semiMajorAxis) {
    fbb_.AddElement<double>(Elset_Full::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  void add_period(double period) {
    fbb_.AddElement<double>(Elset_Full::VT_PERIOD, period, 0.0);
  }
  void add_apogee(double apogee) {
    fbb_.AddElement<double>(Elset_Full::VT_APOGEE, apogee, 0.0);
  }
  void add_perigee(double perigee) {
    fbb_.AddElement<double>(Elset_Full::VT_PERIGEE, perigee, 0.0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(Elset_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_idOrbitDetermination(::flatbuffers::Offset<::flatbuffers::String> idOrbitDetermination) {
    fbb_.AddOffset(Elset_Full::VT_IDORBITDETERMINATION, idOrbitDetermination);
  }
  void add_effectiveFrom(::flatbuffers::Offset<::flatbuffers::String> effectiveFrom) {
    fbb_.AddOffset(Elset_Full::VT_EFFECTIVEFROM, effectiveFrom);
  }
  void add_effectiveUntil(::flatbuffers::Offset<::flatbuffers::String> effectiveUntil) {
    fbb_.AddOffset(Elset_Full::VT_EFFECTIVEUNTIL, effectiveUntil);
  }
  void add_line1(::flatbuffers::Offset<::flatbuffers::String> line1) {
    fbb_.AddOffset(Elset_Full::VT_LINE1, line1);
  }
  void add_line2(::flatbuffers::Offset<::flatbuffers::String> line2) {
    fbb_.AddOffset(Elset_Full::VT_LINE2, line2);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(Elset_Full::VT_DESCRIPTOR, descriptor);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Elset_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Elset_Full::VT_CREATEDBY, createdBy);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(Elset_Full::VT_RAWFILEURI, rawFileURI);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Elset_Full::VT_ORIGIN, origin);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Elset_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Elset_Full::VT_SOURCE, source);
  }
  void add_dataMode(Elset_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Elset_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Elset_Full::VT_TAGS, tags);
  }
  void add_algorithm(::flatbuffers::Offset<::flatbuffers::String> algorithm) {
    fbb_.AddOffset(Elset_Full::VT_ALGORITHM, algorithm);
  }
  void add_sourcedData(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sourcedData) {
    fbb_.AddOffset(Elset_Full::VT_SOURCEDDATA, sourcedData);
  }
  void add_sourcedDataTypes(Elset_Full_sourcedDataTypes_Enum sourcedDataTypes) {
    fbb_.AddElement<int8_t>(Elset_Full::VT_SOURCEDDATATYPES, static_cast<int8_t>(sourcedDataTypes), 0);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(Elset_Full::VT_TRANSACTIONID, transactionId);
  }
  void add_ephemType(int32_t ephemType) {
    fbb_.AddElement<int32_t>(Elset_Full::VT_EPHEMTYPE, ephemType, 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Elset_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(Elset_Full::VT_ONORBIT, onOrbit);
  }
  explicit Elset_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Elset_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Elset_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Elset_Full> CreateElset_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> epoch = 0,
    double meanMotion = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    bool uct = false,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double agom = 0.0,
    double ballisticCoeff = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOrbitDetermination = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveFrom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveUntil = 0,
    ::flatbuffers::Offset<::flatbuffers::String> line1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> line2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    Elset_Full_dataMode_Enum dataMode = Elset_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> algorithm = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sourcedData = 0,
    Elset_Full_sourcedDataTypes_Enum sourcedDataTypes = Elset_Full_sourcedDataTypes_Enum_EO,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    int32_t ephemType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0) {
  Elset_FullBuilder builder_(_fbb);
  builder_.add_perigee(perigee);
  builder_.add_apogee(apogee);
  builder_.add_period(period);
  builder_.add_semiMajorAxis(semiMajorAxis);
  builder_.add_meanMotionDDot(meanMotionDDot);
  builder_.add_meanMotionDot(meanMotionDot);
  builder_.add_ballisticCoeff(ballisticCoeff);
  builder_.add_agom(agom);
  builder_.add_bStar(bStar);
  builder_.add_meanAnomaly(meanAnomaly);
  builder_.add_argOfPerigee(argOfPerigee);
  builder_.add_raan(raan);
  builder_.add_inclination(inclination);
  builder_.add_eccentricity(eccentricity);
  builder_.add_meanMotion(meanMotion);
  builder_.add_onOrbit(onOrbit);
  builder_.add_origNetwork(origNetwork);
  builder_.add_ephemType(ephemType);
  builder_.add_transactionId(transactionId);
  builder_.add_sourcedData(sourcedData);
  builder_.add_algorithm(algorithm);
  builder_.add_tags(tags);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origin(origin);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_descriptor(descriptor);
  builder_.add_line2(line2);
  builder_.add_line1(line1);
  builder_.add_effectiveUntil(effectiveUntil);
  builder_.add_effectiveFrom(effectiveFrom);
  builder_.add_idOrbitDetermination(idOrbitDetermination);
  builder_.add_origObjectId(origObjectId);
  builder_.add_revNo(revNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_epoch(epoch);
  builder_.add_satNo(satNo);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idElset(idElset);
  builder_.add_sourcedDataTypes(sourcedDataTypes);
  builder_.add_dataMode(dataMode);
  builder_.add_uct(uct);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Elset_Full> CreateElset_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idElset = nullptr,
    const char *classificationMarking = nullptr,
    int32_t satNo = 0,
    const char *epoch = nullptr,
    double meanMotion = 0.0,
    const char *idOnOrbit = nullptr,
    bool uct = false,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double agom = 0.0,
    double ballisticCoeff = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    const char *origObjectId = nullptr,
    const char *idOrbitDetermination = nullptr,
    const char *effectiveFrom = nullptr,
    const char *effectiveUntil = nullptr,
    const char *line1 = nullptr,
    const char *line2 = nullptr,
    const char *descriptor = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *rawFileURI = nullptr,
    const char *origin = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    Elset_Full_dataMode_Enum dataMode = Elset_Full_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *algorithm = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sourcedData = nullptr,
    Elset_Full_sourcedDataTypes_Enum sourcedDataTypes = Elset_Full_sourcedDataTypes_Enum_EO,
    const char *transactionId = nullptr,
    int32_t ephemType = 0,
    const char *origNetwork = nullptr,
    const char *onOrbit = nullptr) {
  auto idElset__ = idElset ? _fbb.CreateString(idElset) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto epoch__ = epoch ? _fbb.CreateString(epoch) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto idOrbitDetermination__ = idOrbitDetermination ? _fbb.CreateString(idOrbitDetermination) : 0;
  auto effectiveFrom__ = effectiveFrom ? _fbb.CreateString(effectiveFrom) : 0;
  auto effectiveUntil__ = effectiveUntil ? _fbb.CreateString(effectiveUntil) : 0;
  auto line1__ = line1 ? _fbb.CreateString(line1) : 0;
  auto line2__ = line2 ? _fbb.CreateString(line2) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto algorithm__ = algorithm ? _fbb.CreateString(algorithm) : 0;
  auto sourcedData__ = sourcedData ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sourcedData) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  return CreateElset_Full(
      _fbb,
      idElset__,
      classificationMarking__,
      satNo,
      epoch__,
      meanMotion,
      idOnOrbit__,
      uct,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      agom,
      ballisticCoeff,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      origObjectId__,
      idOrbitDetermination__,
      effectiveFrom__,
      effectiveUntil__,
      line1__,
      line2__,
      descriptor__,
      createdAt__,
      createdBy__,
      rawFileURI__,
      origin__,
      sourceDL__,
      source__,
      dataMode,
      tags__,
      algorithm__,
      sourcedData__,
      sourcedDataTypes,
      transactionId__,
      ephemType,
      origNetwork__,
      onOrbit__);
}

inline const Elset_Full *GetElset_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Elset_Full>(buf);
}

inline const Elset_Full *GetSizePrefixedElset_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Elset_Full>(buf);
}

inline const char *Elset_FullIdentifier() {
  return "ELSE";
}

inline bool Elset_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Elset_FullIdentifier());
}

inline bool SizePrefixedElset_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Elset_FullIdentifier(), true);
}

inline bool VerifyElset_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Elset_Full>(Elset_FullIdentifier());
}

inline bool VerifySizePrefixedElset_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Elset_Full>(Elset_FullIdentifier());
}

inline void FinishElset_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Elset_Full> root) {
  fbb.Finish(root, Elset_FullIdentifier());
}

inline void FinishSizePrefixedElset_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Elset_Full> root) {
  fbb.FinishSizePrefixed(root, Elset_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
