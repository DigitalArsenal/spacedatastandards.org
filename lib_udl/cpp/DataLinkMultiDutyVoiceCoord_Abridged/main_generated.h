// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkMultiDutyVoiceCoord_Abridged;
struct DataLinkMultiDutyVoiceCoord_AbridgedBuilder;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
struct DataLinkMultiDutyVoiceCoord_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkMultiDutyVoiceCoord_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MULTIVOICENETDES = 4,
    VT_MULTIFREQDES = 6,
    VT_MULTICOMMPRI = 8,
    VT_MULTITELEFREQNUMS = 10
  };
  /// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *multiVoiceNetDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MULTIVOICENETDES);
  }
  /// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *multiFreqDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MULTIFREQDES);
  }
  /// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *multiCommPri() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MULTICOMMPRI);
  }
  /// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *multiTeleFreqNums() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MULTITELEFREQNUMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MULTIVOICENETDES) &&
           verifier.VerifyString(multiVoiceNetDes()) &&
           VerifyOffset(verifier, VT_MULTIFREQDES) &&
           verifier.VerifyString(multiFreqDes()) &&
           VerifyOffset(verifier, VT_MULTICOMMPRI) &&
           verifier.VerifyString(multiCommPri()) &&
           VerifyOffset(verifier, VT_MULTITELEFREQNUMS) &&
           verifier.VerifyVector(multiTeleFreqNums()) &&
           verifier.VerifyVectorOfStrings(multiTeleFreqNums()) &&
           verifier.EndTable();
  }
};

struct DataLinkMultiDutyVoiceCoord_AbridgedBuilder {
  typedef DataLinkMultiDutyVoiceCoord_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_multiVoiceNetDes(::flatbuffers::Offset<::flatbuffers::String> multiVoiceNetDes) {
    fbb_.AddOffset(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIVOICENETDES, multiVoiceNetDes);
  }
  void add_multiFreqDes(::flatbuffers::Offset<::flatbuffers::String> multiFreqDes) {
    fbb_.AddOffset(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIFREQDES, multiFreqDes);
  }
  void add_multiCommPri(::flatbuffers::Offset<::flatbuffers::String> multiCommPri) {
    fbb_.AddOffset(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTICOMMPRI, multiCommPri);
  }
  void add_multiTeleFreqNums(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiTeleFreqNums) {
    fbb_.AddOffset(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTITELEFREQNUMS, multiTeleFreqNums);
  }
  explicit DataLinkMultiDutyVoiceCoord_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged> CreateDataLinkMultiDutyVoiceCoord_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> multiVoiceNetDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> multiFreqDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> multiCommPri = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiTeleFreqNums = 0) {
  DataLinkMultiDutyVoiceCoord_AbridgedBuilder builder_(_fbb);
  builder_.add_multiTeleFreqNums(multiTeleFreqNums);
  builder_.add_multiCommPri(multiCommPri);
  builder_.add_multiFreqDes(multiFreqDes);
  builder_.add_multiVoiceNetDes(multiVoiceNetDes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged> CreateDataLinkMultiDutyVoiceCoord_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *multiVoiceNetDes = nullptr,
    const char *multiFreqDes = nullptr,
    const char *multiCommPri = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *multiTeleFreqNums = nullptr) {
  auto multiVoiceNetDes__ = multiVoiceNetDes ? _fbb.CreateString(multiVoiceNetDes) : 0;
  auto multiFreqDes__ = multiFreqDes ? _fbb.CreateString(multiFreqDes) : 0;
  auto multiCommPri__ = multiCommPri ? _fbb.CreateString(multiCommPri) : 0;
  auto multiTeleFreqNums__ = multiTeleFreqNums ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*multiTeleFreqNums) : 0;
  return CreateDataLinkMultiDutyVoiceCoord_Abridged(
      _fbb,
      multiVoiceNetDes__,
      multiFreqDes__,
      multiCommPri__,
      multiTeleFreqNums__);
}

inline const DataLinkMultiDutyVoiceCoord_Abridged *GetDataLinkMultiDutyVoiceCoord_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkMultiDutyVoiceCoord_Abridged>(buf);
}

inline const DataLinkMultiDutyVoiceCoord_Abridged *GetSizePrefixedDataLinkMultiDutyVoiceCoord_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkMultiDutyVoiceCoord_Abridged>(buf);
}

inline const char *DataLinkMultiDutyVoiceCoord_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLinkMultiDutyVoiceCoord_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkMultiDutyVoiceCoord_AbridgedIdentifier());
}

inline bool SizePrefixedDataLinkMultiDutyVoiceCoord_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkMultiDutyVoiceCoord_AbridgedIdentifier(), true);
}

inline bool VerifyDataLinkMultiDutyVoiceCoord_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkMultiDutyVoiceCoord_Abridged>(DataLinkMultiDutyVoiceCoord_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLinkMultiDutyVoiceCoord_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkMultiDutyVoiceCoord_Abridged>(DataLinkMultiDutyVoiceCoord_AbridgedIdentifier());
}

inline void FinishDataLinkMultiDutyVoiceCoord_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged> root) {
  fbb.Finish(root, DataLinkMultiDutyVoiceCoord_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLinkMultiDutyVoiceCoord_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkMultiDutyVoiceCoord_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLinkMultiDutyVoiceCoord_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
