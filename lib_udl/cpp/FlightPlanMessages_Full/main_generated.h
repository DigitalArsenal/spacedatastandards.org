// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanMessages_Full;
struct FlightPlanMessages_FullBuilder;

/// /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
struct FlightPlanMessages_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanMessages_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEVERITY = 4,
    VT_WPNUM = 6,
    VT_ROUTEPATH = 8,
    VT_MSGTEXT = 10
  };
  /// The severity of the message.
  /// Example: /// Example: SEVERE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *severity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEVERITY);
  }
  /// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
  /// Example: /// Example: 20
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *wpNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WPNUM);
  }
  /// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
  /// Example: /// Example: PRIMARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *routePath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROUTEPATH);
  }
  /// The text of the message.
  /// Example: /// Example: Message text
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *msgText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SEVERITY) &&
           verifier.VerifyString(severity()) &&
           VerifyOffset(verifier, VT_WPNUM) &&
           verifier.VerifyString(wpNum()) &&
           VerifyOffset(verifier, VT_ROUTEPATH) &&
           verifier.VerifyString(routePath()) &&
           VerifyOffset(verifier, VT_MSGTEXT) &&
           verifier.VerifyString(msgText()) &&
           verifier.EndTable();
  }
};

struct FlightPlanMessages_FullBuilder {
  typedef FlightPlanMessages_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_severity(::flatbuffers::Offset<::flatbuffers::String> severity) {
    fbb_.AddOffset(FlightPlanMessages_Full::VT_SEVERITY, severity);
  }
  void add_wpNum(::flatbuffers::Offset<::flatbuffers::String> wpNum) {
    fbb_.AddOffset(FlightPlanMessages_Full::VT_WPNUM, wpNum);
  }
  void add_routePath(::flatbuffers::Offset<::flatbuffers::String> routePath) {
    fbb_.AddOffset(FlightPlanMessages_Full::VT_ROUTEPATH, routePath);
  }
  void add_msgText(::flatbuffers::Offset<::flatbuffers::String> msgText) {
    fbb_.AddOffset(FlightPlanMessages_Full::VT_MSGTEXT, msgText);
  }
  explicit FlightPlanMessages_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanMessages_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanMessages_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanMessages_Full> CreateFlightPlanMessages_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> severity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wpNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> routePath = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgText = 0) {
  FlightPlanMessages_FullBuilder builder_(_fbb);
  builder_.add_msgText(msgText);
  builder_.add_routePath(routePath);
  builder_.add_wpNum(wpNum);
  builder_.add_severity(severity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlanMessages_Full> CreateFlightPlanMessages_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *severity = nullptr,
    const char *wpNum = nullptr,
    const char *routePath = nullptr,
    const char *msgText = nullptr) {
  auto severity__ = severity ? _fbb.CreateString(severity) : 0;
  auto wpNum__ = wpNum ? _fbb.CreateString(wpNum) : 0;
  auto routePath__ = routePath ? _fbb.CreateString(routePath) : 0;
  auto msgText__ = msgText ? _fbb.CreateString(msgText) : 0;
  return CreateFlightPlanMessages_Full(
      _fbb,
      severity__,
      wpNum__,
      routePath__,
      msgText__);
}

inline const FlightPlanMessages_Full *GetFlightPlanMessages_Full(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanMessages_Full>(buf);
}

inline const FlightPlanMessages_Full *GetSizePrefixedFlightPlanMessages_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanMessages_Full>(buf);
}

inline const char *FlightPlanMessages_FullIdentifier() {
  return "FLIG";
}

inline bool FlightPlanMessages_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanMessages_FullIdentifier());
}

inline bool SizePrefixedFlightPlanMessages_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanMessages_FullIdentifier(), true);
}

inline bool VerifyFlightPlanMessages_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanMessages_Full>(FlightPlanMessages_FullIdentifier());
}

inline bool VerifySizePrefixedFlightPlanMessages_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanMessages_Full>(FlightPlanMessages_FullIdentifier());
}

inline void FinishFlightPlanMessages_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanMessages_Full> root) {
  fbb.Finish(root, FlightPlanMessages_FullIdentifier());
}

inline void FinishSizePrefixedFlightPlanMessages_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanMessages_Full> root) {
  fbb.FinishSizePrefixed(root, FlightPlanMessages_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
