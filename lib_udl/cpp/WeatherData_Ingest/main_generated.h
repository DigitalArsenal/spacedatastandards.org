// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct WeatherData_Ingest;
struct WeatherData_IngestBuilder;

enum WeatherData_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  WeatherData_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  WeatherData_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  WeatherData_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  WeatherData_Ingest_dataMode_Enum_EXERCISE = 3,
  WeatherData_Ingest_dataMode_Enum_MIN = WeatherData_Ingest_dataMode_Enum_REAL,
  WeatherData_Ingest_dataMode_Enum_MAX = WeatherData_Ingest_dataMode_Enum_EXERCISE
};

inline const WeatherData_Ingest_dataMode_Enum (&EnumValuesWeatherData_Ingest_dataMode_Enum())[4] {
  static const WeatherData_Ingest_dataMode_Enum values[] = {
    WeatherData_Ingest_dataMode_Enum_REAL,
    WeatherData_Ingest_dataMode_Enum_TEST,
    WeatherData_Ingest_dataMode_Enum_SIMULATED,
    WeatherData_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesWeatherData_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameWeatherData_Ingest_dataMode_Enum(WeatherData_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, WeatherData_Ingest_dataMode_Enum_REAL, WeatherData_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesWeatherData_Ingest_dataMode_Enum()[index];
}

/// /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
struct WeatherData_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WeatherData_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDSENSOR = 8,
    VT_ORIGSENSORID = 10,
    VT_OBTIME = 12,
    VT_SIGPWRS = 14,
    VT_NOISELVLS = 16,
    VT_SPECWIDTHS = 18,
    VT_FIRSTGUESSAVGS = 20,
    VT_QCVALUE = 22,
    VT_FILECREATION = 24,
    VT_TERMALT = 26,
    VT_AVGTXPWR = 28,
    VT_AVGREFPWR = 30,
    VT_SECTORNUM = 32,
    VT_NUMELEMENTS = 34,
    VT_TDAVGSAMPLENUMS = 36,
    VT_CHECKSUM = 38,
    VT_COINTEGS = 40,
    VT_SPECAVGS = 42,
    VT_INTERPULSEPERIODS = 44,
    VT_DOPPVELS = 46,
    VT_CONSRECS = 48,
    VT_SNRS = 50,
    VT_SIGSTRENGTH = 52,
    VT_SEMIMAJORAXIS = 54,
    VT_SEMIMINORAXIS = 56,
    VT_ANGLEORIENTATION = 58,
    VT_LIGHTEVENTNUM = 60,
    VT_LIGHTDETSENSORS = 62,
    VT_POSCONFIDENCE = 64,
    VT_SRCTYPS = 66,
    VT_SRCIDS = 68,
    VT_ORIGNETWORK = 70,
    VT_CREATEDAT = 72,
    VT_CREATEDBY = 74,
    VT_SOURCE = 76,
    VT_ORIGIN = 78,
    VT_DATAMODE = 80
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: WEATHER-DATA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the sensor making the weather measurement.
  /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
  /// Example: /// Example: [116.5, 121.6]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sigPwrs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SIGPWRS);
  }
  /// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
  /// Example: /// Example: [58.2, 58.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *noiseLvls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NOISELVLS);
  }
  /// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
  /// Example: /// Example: [0.3, 0.6]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *specWidths() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECWIDTHS);
  }
  /// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
  /// Example: /// Example: [16, 1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *firstGuessAvgs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FIRSTGUESSAVGS);
  }
  /// Quality control flag value, as defined by the data provider.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t qcValue() const {
    return GetField<int32_t>(VT_QCVALUE, 0);
  }
  /// Datetime the system files were created.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *fileCreation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILECREATION);
  }
  /// Last altitude with recorded measurements in this record, in meters.
  /// Example: /// Example: 19505.1
  /// Constraints: No constraints specified.
  double termAlt() const {
    return GetField<double>(VT_TERMALT, 0.0);
  }
  /// Average transmitted power of the radar, in kilowatts.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  double avgTxPwr() const {
    return GetField<double>(VT_AVGTXPWR, 0.0);
  }
  /// Average power of the reflected signal received by the radar, in Watts.
  /// Example: /// Example: 714.9
  /// Constraints: No constraints specified.
  double avgRefPwr() const {
    return GetField<double>(VT_AVGREFPWR, 0.0);
  }
  /// Number of sectors within the radar coverage area, each containing a number of antennas.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t sectorNum() const {
    return GetField<int32_t>(VT_SECTORNUM, 0);
  }
  /// Number of antennas across all sectors within the radar coverage area.
  /// Example: /// Example: 640
  /// Constraints: No constraints specified.
  int32_t numElements() const {
    return GetField<int32_t>(VT_NUMELEMENTS, 0);
  }
  /// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
  /// Example: /// Example: [32, 30]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tdAvgSampleNums() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TDAVGSAMPLENUMS);
  }
  /// Checksum value for the data.
  /// Example: /// Example: 133
  /// Constraints: No constraints specified.
  int32_t checksum() const {
    return GetField<int32_t>(VT_CHECKSUM, 0);
  }
  /// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *coIntegs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COINTEGS);
  }
  /// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *specAvgs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECAVGS);
  }
  /// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
  /// Example: /// Example: [1000.3, 1000.2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *interpulsePeriods() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTERPULSEPERIODS);
  }
  /// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
  /// Example: /// Example: [44.4, 467.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *doppVels() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DOPPVELS);
  }
  /// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
  /// Example: /// Example: [5, 2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *consRecs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CONSRECS);
  }
  /// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
  /// Example: /// Example: [14.5, -16.2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *snrs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SNRS);
  }
  /// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
  /// Example: /// Example: 163.7
  /// Constraints: No constraints specified.
  double sigStrength() const {
    return GetField<double>(VT_SIGSTRENGTH, 0.0);
  }
  /// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 3.4
  /// Constraints: No constraints specified.
  double semiMajorAxis() const {
    return GetField<double>(VT_SEMIMAJORAXIS, 0.0);
  }
  /// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 0.3
  /// Constraints: No constraints specified.
  double semiMinorAxis() const {
    return GetField<double>(VT_SEMIMINORAXIS, 0.0);
  }
  /// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
  /// Example: /// Example: 75.7
  /// Constraints: No constraints specified.
  double angleOrientation() const {
    return GetField<double>(VT_ANGLEORIENTATION, 0.0);
  }
  /// Number of sensors used in the lightning event location solution.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  int32_t lightEventNum() const {
    return GetField<int32_t>(VT_LIGHTEVENTNUM, 0);
  }
  /// Array of sensor(s) that participated in the lightning event location determination.
  /// Example: /// Example: [11, 28, 190]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lightDetSensors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LIGHTDETSENSORS);
  }
  /// The positional confidence of the calculated lightning event location using the chi-square statistical method.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double posConfidence() const {
    return GetField<double>(VT_POSCONFIDENCE, 0.0);
  }
  /// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  WeatherData_Ingest_dataMode_Enum dataMode() const {
    return static_cast<WeatherData_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyOffset(verifier, VT_SIGPWRS) &&
           verifier.VerifyVector(sigPwrs()) &&
           verifier.VerifyVectorOfStrings(sigPwrs()) &&
           VerifyOffset(verifier, VT_NOISELVLS) &&
           verifier.VerifyVector(noiseLvls()) &&
           verifier.VerifyVectorOfStrings(noiseLvls()) &&
           VerifyOffset(verifier, VT_SPECWIDTHS) &&
           verifier.VerifyVector(specWidths()) &&
           verifier.VerifyVectorOfStrings(specWidths()) &&
           VerifyOffset(verifier, VT_FIRSTGUESSAVGS) &&
           verifier.VerifyVector(firstGuessAvgs()) &&
           verifier.VerifyVectorOfStrings(firstGuessAvgs()) &&
           VerifyField<int32_t>(verifier, VT_QCVALUE, 4) &&
           VerifyOffset(verifier, VT_FILECREATION) &&
           verifier.VerifyString(fileCreation()) &&
           VerifyField<double>(verifier, VT_TERMALT, 8) &&
           VerifyField<double>(verifier, VT_AVGTXPWR, 8) &&
           VerifyField<double>(verifier, VT_AVGREFPWR, 8) &&
           VerifyField<int32_t>(verifier, VT_SECTORNUM, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMELEMENTS, 4) &&
           VerifyOffset(verifier, VT_TDAVGSAMPLENUMS) &&
           verifier.VerifyVector(tdAvgSampleNums()) &&
           verifier.VerifyVectorOfStrings(tdAvgSampleNums()) &&
           VerifyField<int32_t>(verifier, VT_CHECKSUM, 4) &&
           VerifyOffset(verifier, VT_COINTEGS) &&
           verifier.VerifyVector(coIntegs()) &&
           verifier.VerifyVectorOfStrings(coIntegs()) &&
           VerifyOffset(verifier, VT_SPECAVGS) &&
           verifier.VerifyVector(specAvgs()) &&
           verifier.VerifyVectorOfStrings(specAvgs()) &&
           VerifyOffset(verifier, VT_INTERPULSEPERIODS) &&
           verifier.VerifyVector(interpulsePeriods()) &&
           verifier.VerifyVectorOfStrings(interpulsePeriods()) &&
           VerifyOffset(verifier, VT_DOPPVELS) &&
           verifier.VerifyVector(doppVels()) &&
           verifier.VerifyVectorOfStrings(doppVels()) &&
           VerifyOffset(verifier, VT_CONSRECS) &&
           verifier.VerifyVector(consRecs()) &&
           verifier.VerifyVectorOfStrings(consRecs()) &&
           VerifyOffset(verifier, VT_SNRS) &&
           verifier.VerifyVector(snrs()) &&
           verifier.VerifyVectorOfStrings(snrs()) &&
           VerifyField<double>(verifier, VT_SIGSTRENGTH, 8) &&
           VerifyField<double>(verifier, VT_SEMIMAJORAXIS, 8) &&
           VerifyField<double>(verifier, VT_SEMIMINORAXIS, 8) &&
           VerifyField<double>(verifier, VT_ANGLEORIENTATION, 8) &&
           VerifyField<int32_t>(verifier, VT_LIGHTEVENTNUM, 4) &&
           VerifyOffset(verifier, VT_LIGHTDETSENSORS) &&
           verifier.VerifyVector(lightDetSensors()) &&
           verifier.VerifyVectorOfStrings(lightDetSensors()) &&
           VerifyField<double>(verifier, VT_POSCONFIDENCE, 8) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct WeatherData_IngestBuilder {
  typedef WeatherData_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(WeatherData_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(WeatherData_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(WeatherData_Ingest::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(WeatherData_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(WeatherData_Ingest::VT_OBTIME, obTime);
  }
  void add_sigPwrs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sigPwrs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SIGPWRS, sigPwrs);
  }
  void add_noiseLvls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> noiseLvls) {
    fbb_.AddOffset(WeatherData_Ingest::VT_NOISELVLS, noiseLvls);
  }
  void add_specWidths(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specWidths) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SPECWIDTHS, specWidths);
  }
  void add_firstGuessAvgs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> firstGuessAvgs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_FIRSTGUESSAVGS, firstGuessAvgs);
  }
  void add_qcValue(int32_t qcValue) {
    fbb_.AddElement<int32_t>(WeatherData_Ingest::VT_QCVALUE, qcValue, 0);
  }
  void add_fileCreation(::flatbuffers::Offset<::flatbuffers::String> fileCreation) {
    fbb_.AddOffset(WeatherData_Ingest::VT_FILECREATION, fileCreation);
  }
  void add_termAlt(double termAlt) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_TERMALT, termAlt, 0.0);
  }
  void add_avgTxPwr(double avgTxPwr) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_AVGTXPWR, avgTxPwr, 0.0);
  }
  void add_avgRefPwr(double avgRefPwr) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_AVGREFPWR, avgRefPwr, 0.0);
  }
  void add_sectorNum(int32_t sectorNum) {
    fbb_.AddElement<int32_t>(WeatherData_Ingest::VT_SECTORNUM, sectorNum, 0);
  }
  void add_numElements(int32_t numElements) {
    fbb_.AddElement<int32_t>(WeatherData_Ingest::VT_NUMELEMENTS, numElements, 0);
  }
  void add_tdAvgSampleNums(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tdAvgSampleNums) {
    fbb_.AddOffset(WeatherData_Ingest::VT_TDAVGSAMPLENUMS, tdAvgSampleNums);
  }
  void add_checksum(int32_t checksum) {
    fbb_.AddElement<int32_t>(WeatherData_Ingest::VT_CHECKSUM, checksum, 0);
  }
  void add_coIntegs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coIntegs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_COINTEGS, coIntegs);
  }
  void add_specAvgs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specAvgs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SPECAVGS, specAvgs);
  }
  void add_interpulsePeriods(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> interpulsePeriods) {
    fbb_.AddOffset(WeatherData_Ingest::VT_INTERPULSEPERIODS, interpulsePeriods);
  }
  void add_doppVels(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> doppVels) {
    fbb_.AddOffset(WeatherData_Ingest::VT_DOPPVELS, doppVels);
  }
  void add_consRecs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> consRecs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_CONSRECS, consRecs);
  }
  void add_snrs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> snrs) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SNRS, snrs);
  }
  void add_sigStrength(double sigStrength) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_SIGSTRENGTH, sigStrength, 0.0);
  }
  void add_semiMajorAxis(double semiMajorAxis) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  void add_semiMinorAxis(double semiMinorAxis) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_SEMIMINORAXIS, semiMinorAxis, 0.0);
  }
  void add_angleOrientation(double angleOrientation) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_ANGLEORIENTATION, angleOrientation, 0.0);
  }
  void add_lightEventNum(int32_t lightEventNum) {
    fbb_.AddElement<int32_t>(WeatherData_Ingest::VT_LIGHTEVENTNUM, lightEventNum, 0);
  }
  void add_lightDetSensors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lightDetSensors) {
    fbb_.AddOffset(WeatherData_Ingest::VT_LIGHTDETSENSORS, lightDetSensors);
  }
  void add_posConfidence(double posConfidence) {
    fbb_.AddElement<double>(WeatherData_Ingest::VT_POSCONFIDENCE, posConfidence, 0.0);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SRCIDS, srcIds);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(WeatherData_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(WeatherData_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(WeatherData_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(WeatherData_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(WeatherData_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(WeatherData_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(WeatherData_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit WeatherData_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WeatherData_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WeatherData_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WeatherData_Ingest> CreateWeatherData_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sigPwrs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> noiseLvls = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specWidths = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> firstGuessAvgs = 0,
    int32_t qcValue = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fileCreation = 0,
    double termAlt = 0.0,
    double avgTxPwr = 0.0,
    double avgRefPwr = 0.0,
    int32_t sectorNum = 0,
    int32_t numElements = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tdAvgSampleNums = 0,
    int32_t checksum = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coIntegs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specAvgs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> interpulsePeriods = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> doppVels = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> consRecs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> snrs = 0,
    double sigStrength = 0.0,
    double semiMajorAxis = 0.0,
    double semiMinorAxis = 0.0,
    double angleOrientation = 0.0,
    int32_t lightEventNum = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lightDetSensors = 0,
    double posConfidence = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    WeatherData_Ingest_dataMode_Enum dataMode = WeatherData_Ingest_dataMode_Enum_REAL) {
  WeatherData_IngestBuilder builder_(_fbb);
  builder_.add_posConfidence(posConfidence);
  builder_.add_angleOrientation(angleOrientation);
  builder_.add_semiMinorAxis(semiMinorAxis);
  builder_.add_semiMajorAxis(semiMajorAxis);
  builder_.add_sigStrength(sigStrength);
  builder_.add_avgRefPwr(avgRefPwr);
  builder_.add_avgTxPwr(avgTxPwr);
  builder_.add_termAlt(termAlt);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_lightDetSensors(lightDetSensors);
  builder_.add_lightEventNum(lightEventNum);
  builder_.add_snrs(snrs);
  builder_.add_consRecs(consRecs);
  builder_.add_doppVels(doppVels);
  builder_.add_interpulsePeriods(interpulsePeriods);
  builder_.add_specAvgs(specAvgs);
  builder_.add_coIntegs(coIntegs);
  builder_.add_checksum(checksum);
  builder_.add_tdAvgSampleNums(tdAvgSampleNums);
  builder_.add_numElements(numElements);
  builder_.add_sectorNum(sectorNum);
  builder_.add_fileCreation(fileCreation);
  builder_.add_qcValue(qcValue);
  builder_.add_firstGuessAvgs(firstGuessAvgs);
  builder_.add_specWidths(specWidths);
  builder_.add_noiseLvls(noiseLvls);
  builder_.add_sigPwrs(sigPwrs);
  builder_.add_obTime(obTime);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<WeatherData_Ingest> CreateWeatherData_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *obTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sigPwrs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *noiseLvls = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *specWidths = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *firstGuessAvgs = nullptr,
    int32_t qcValue = 0,
    const char *fileCreation = nullptr,
    double termAlt = 0.0,
    double avgTxPwr = 0.0,
    double avgRefPwr = 0.0,
    int32_t sectorNum = 0,
    int32_t numElements = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tdAvgSampleNums = nullptr,
    int32_t checksum = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *coIntegs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *specAvgs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *interpulsePeriods = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *doppVels = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *consRecs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *snrs = nullptr,
    double sigStrength = 0.0,
    double semiMajorAxis = 0.0,
    double semiMinorAxis = 0.0,
    double angleOrientation = 0.0,
    int32_t lightEventNum = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lightDetSensors = nullptr,
    double posConfidence = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *origNetwork = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    WeatherData_Ingest_dataMode_Enum dataMode = WeatherData_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto sigPwrs__ = sigPwrs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sigPwrs) : 0;
  auto noiseLvls__ = noiseLvls ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*noiseLvls) : 0;
  auto specWidths__ = specWidths ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*specWidths) : 0;
  auto firstGuessAvgs__ = firstGuessAvgs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*firstGuessAvgs) : 0;
  auto fileCreation__ = fileCreation ? _fbb.CreateString(fileCreation) : 0;
  auto tdAvgSampleNums__ = tdAvgSampleNums ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tdAvgSampleNums) : 0;
  auto coIntegs__ = coIntegs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*coIntegs) : 0;
  auto specAvgs__ = specAvgs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*specAvgs) : 0;
  auto interpulsePeriods__ = interpulsePeriods ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*interpulsePeriods) : 0;
  auto doppVels__ = doppVels ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*doppVels) : 0;
  auto consRecs__ = consRecs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*consRecs) : 0;
  auto snrs__ = snrs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*snrs) : 0;
  auto lightDetSensors__ = lightDetSensors ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lightDetSensors) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateWeatherData_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idSensor__,
      origSensorId__,
      obTime__,
      sigPwrs__,
      noiseLvls__,
      specWidths__,
      firstGuessAvgs__,
      qcValue,
      fileCreation__,
      termAlt,
      avgTxPwr,
      avgRefPwr,
      sectorNum,
      numElements,
      tdAvgSampleNums__,
      checksum,
      coIntegs__,
      specAvgs__,
      interpulsePeriods__,
      doppVels__,
      consRecs__,
      snrs__,
      sigStrength,
      semiMajorAxis,
      semiMinorAxis,
      angleOrientation,
      lightEventNum,
      lightDetSensors__,
      posConfidence,
      srcTyps__,
      srcIds__,
      origNetwork__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode);
}

inline const WeatherData_Ingest *GetWeatherData_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<WeatherData_Ingest>(buf);
}

inline const WeatherData_Ingest *GetSizePrefixedWeatherData_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<WeatherData_Ingest>(buf);
}

inline const char *WeatherData_IngestIdentifier() {
  return "WEAT";
}

inline bool WeatherData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, WeatherData_IngestIdentifier());
}

inline bool SizePrefixedWeatherData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, WeatherData_IngestIdentifier(), true);
}

inline bool VerifyWeatherData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<WeatherData_Ingest>(WeatherData_IngestIdentifier());
}

inline bool VerifySizePrefixedWeatherData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<WeatherData_Ingest>(WeatherData_IngestIdentifier());
}

inline void FinishWeatherData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WeatherData_Ingest> root) {
  fbb.Finish(root, WeatherData_IngestIdentifier());
}

inline void FinishSizePrefixedWeatherData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<WeatherData_Ingest> root) {
  fbb.FinishSizePrefixed(root, WeatherData_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
