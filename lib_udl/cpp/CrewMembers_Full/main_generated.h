// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct CrewMembers_Full;
struct CrewMembers_FullBuilder;

/// /// Schema for Crew Member data.
struct CrewMembers_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CrewMembers_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LASTNAME = 4,
    VT_FIRSTNAME = 6,
    VT_MIDDLEINITIAL = 8,
    VT_MEMBERID = 10,
    VT_CIVILIAN = 12,
    VT_COMMANDER = 14,
    VT_LAST4SSN = 16,
    VT_DODID = 18,
    VT_DUTYPOSITION = 20,
    VT_CREWPOSITION = 22,
    VT_MEMBERTYPE = 24,
    VT_BRANCH = 26,
    VT_RANK = 28,
    VT_WING = 30,
    VT_SQUADRON = 32,
    VT_MEMBERREMARKS = 34,
    VT_USERNAME = 36
  };
  /// The last name of the crew member.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *lastName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTNAME);
  }
  /// The first name of the crew member.
  /// Example: /// Example: Freddie
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *firstName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTNAME);
  }
  /// The middle initial of the crew member.
  /// Example: /// Example: G
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *middleInitial() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MIDDLEINITIAL);
  }
  /// Unique identifier of the crew member assigned by the originating source.
  /// Example: /// Example: 12345678abc
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *memberId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEMBERID);
  }
  /// Flag indicating this crew member is a civilian or non-military person.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool civilian() const {
    return GetField<uint8_t>(VT_CIVILIAN, 0) != 0;
  }
  /// Flag indicating this person is the aircraft commander.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool commander() const {
    return GetField<uint8_t>(VT_COMMANDER, 0) != 0;
  }
  /// Last four digits of the crew member's social security number.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *last4SSN() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST4SSN);
  }
  /// The crew member's 10-digit DoD ID number.
  /// Example: /// Example: 0123456789
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *dodID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DODID);
  }
  /// The duty position of the crew member.
  /// Example: /// Example: IP
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *dutyPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DUTYPOSITION);
  }
  /// The crew position of the crew member.
  /// Example: /// Example: EP A
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *crewPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREWPOSITION);
  }
  /// Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
  /// Example: /// Example: AIRCREW
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *memberType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEMBERTYPE);
  }
  /// The military branch assignment of the crew member.
  /// Example: /// Example: Air Force
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *branch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BRANCH);
  }
  /// The rank of the crew member.
  /// Example: /// Example: Capt
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *rank() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANK);
  }
  /// The wing the crew member serves.
  /// Example: /// Example: 60AMW
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *wing() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WING);
  }
  /// The squadron the crew member serves.
  /// Example: /// Example: 21AS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *squadron() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SQUADRON);
  }
  /// Remarks concerning the crew member.
  /// Example: /// Example: Crew member remark
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *memberRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MEMBERREMARKS);
  }
  /// The Mattermost username of this crew member.
  /// Example: /// Example: fgsmith
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LASTNAME) &&
           verifier.VerifyString(lastName()) &&
           VerifyOffset(verifier, VT_FIRSTNAME) &&
           verifier.VerifyString(firstName()) &&
           VerifyOffset(verifier, VT_MIDDLEINITIAL) &&
           verifier.VerifyString(middleInitial()) &&
           VerifyOffset(verifier, VT_MEMBERID) &&
           verifier.VerifyString(memberId()) &&
           VerifyField<uint8_t>(verifier, VT_CIVILIAN, 1) &&
           VerifyField<uint8_t>(verifier, VT_COMMANDER, 1) &&
           VerifyOffset(verifier, VT_LAST4SSN) &&
           verifier.VerifyString(last4SSN()) &&
           VerifyOffset(verifier, VT_DODID) &&
           verifier.VerifyString(dodID()) &&
           VerifyOffset(verifier, VT_DUTYPOSITION) &&
           verifier.VerifyString(dutyPosition()) &&
           VerifyOffset(verifier, VT_CREWPOSITION) &&
           verifier.VerifyString(crewPosition()) &&
           VerifyOffset(verifier, VT_MEMBERTYPE) &&
           verifier.VerifyString(memberType()) &&
           VerifyOffset(verifier, VT_BRANCH) &&
           verifier.VerifyString(branch()) &&
           VerifyOffset(verifier, VT_RANK) &&
           verifier.VerifyString(rank()) &&
           VerifyOffset(verifier, VT_WING) &&
           verifier.VerifyString(wing()) &&
           VerifyOffset(verifier, VT_SQUADRON) &&
           verifier.VerifyString(squadron()) &&
           VerifyOffset(verifier, VT_MEMBERREMARKS) &&
           verifier.VerifyString(memberRemarks()) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           verifier.EndTable();
  }
};

struct CrewMembers_FullBuilder {
  typedef CrewMembers_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lastName(::flatbuffers::Offset<::flatbuffers::String> lastName) {
    fbb_.AddOffset(CrewMembers_Full::VT_LASTNAME, lastName);
  }
  void add_firstName(::flatbuffers::Offset<::flatbuffers::String> firstName) {
    fbb_.AddOffset(CrewMembers_Full::VT_FIRSTNAME, firstName);
  }
  void add_middleInitial(::flatbuffers::Offset<::flatbuffers::String> middleInitial) {
    fbb_.AddOffset(CrewMembers_Full::VT_MIDDLEINITIAL, middleInitial);
  }
  void add_memberId(::flatbuffers::Offset<::flatbuffers::String> memberId) {
    fbb_.AddOffset(CrewMembers_Full::VT_MEMBERID, memberId);
  }
  void add_civilian(bool civilian) {
    fbb_.AddElement<uint8_t>(CrewMembers_Full::VT_CIVILIAN, static_cast<uint8_t>(civilian), 0);
  }
  void add_commander(bool commander) {
    fbb_.AddElement<uint8_t>(CrewMembers_Full::VT_COMMANDER, static_cast<uint8_t>(commander), 0);
  }
  void add_last4SSN(::flatbuffers::Offset<::flatbuffers::String> last4SSN) {
    fbb_.AddOffset(CrewMembers_Full::VT_LAST4SSN, last4SSN);
  }
  void add_dodID(::flatbuffers::Offset<::flatbuffers::String> dodID) {
    fbb_.AddOffset(CrewMembers_Full::VT_DODID, dodID);
  }
  void add_dutyPosition(::flatbuffers::Offset<::flatbuffers::String> dutyPosition) {
    fbb_.AddOffset(CrewMembers_Full::VT_DUTYPOSITION, dutyPosition);
  }
  void add_crewPosition(::flatbuffers::Offset<::flatbuffers::String> crewPosition) {
    fbb_.AddOffset(CrewMembers_Full::VT_CREWPOSITION, crewPosition);
  }
  void add_memberType(::flatbuffers::Offset<::flatbuffers::String> memberType) {
    fbb_.AddOffset(CrewMembers_Full::VT_MEMBERTYPE, memberType);
  }
  void add_branch(::flatbuffers::Offset<::flatbuffers::String> branch) {
    fbb_.AddOffset(CrewMembers_Full::VT_BRANCH, branch);
  }
  void add_rank(::flatbuffers::Offset<::flatbuffers::String> rank) {
    fbb_.AddOffset(CrewMembers_Full::VT_RANK, rank);
  }
  void add_wing(::flatbuffers::Offset<::flatbuffers::String> wing) {
    fbb_.AddOffset(CrewMembers_Full::VT_WING, wing);
  }
  void add_squadron(::flatbuffers::Offset<::flatbuffers::String> squadron) {
    fbb_.AddOffset(CrewMembers_Full::VT_SQUADRON, squadron);
  }
  void add_memberRemarks(::flatbuffers::Offset<::flatbuffers::String> memberRemarks) {
    fbb_.AddOffset(CrewMembers_Full::VT_MEMBERREMARKS, memberRemarks);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(CrewMembers_Full::VT_USERNAME, username);
  }
  explicit CrewMembers_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CrewMembers_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CrewMembers_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CrewMembers_Full> CreateCrewMembers_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lastName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> firstName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> middleInitial = 0,
    ::flatbuffers::Offset<::flatbuffers::String> memberId = 0,
    bool civilian = false,
    bool commander = false,
    ::flatbuffers::Offset<::flatbuffers::String> last4SSN = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dodID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dutyPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> crewPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> memberType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> branch = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rank = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wing = 0,
    ::flatbuffers::Offset<::flatbuffers::String> squadron = 0,
    ::flatbuffers::Offset<::flatbuffers::String> memberRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0) {
  CrewMembers_FullBuilder builder_(_fbb);
  builder_.add_username(username);
  builder_.add_memberRemarks(memberRemarks);
  builder_.add_squadron(squadron);
  builder_.add_wing(wing);
  builder_.add_rank(rank);
  builder_.add_branch(branch);
  builder_.add_memberType(memberType);
  builder_.add_crewPosition(crewPosition);
  builder_.add_dutyPosition(dutyPosition);
  builder_.add_dodID(dodID);
  builder_.add_last4SSN(last4SSN);
  builder_.add_memberId(memberId);
  builder_.add_middleInitial(middleInitial);
  builder_.add_firstName(firstName);
  builder_.add_lastName(lastName);
  builder_.add_commander(commander);
  builder_.add_civilian(civilian);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CrewMembers_Full> CreateCrewMembers_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lastName = nullptr,
    const char *firstName = nullptr,
    const char *middleInitial = nullptr,
    const char *memberId = nullptr,
    bool civilian = false,
    bool commander = false,
    const char *last4SSN = nullptr,
    const char *dodID = nullptr,
    const char *dutyPosition = nullptr,
    const char *crewPosition = nullptr,
    const char *memberType = nullptr,
    const char *branch = nullptr,
    const char *rank = nullptr,
    const char *wing = nullptr,
    const char *squadron = nullptr,
    const char *memberRemarks = nullptr,
    const char *username = nullptr) {
  auto lastName__ = lastName ? _fbb.CreateString(lastName) : 0;
  auto firstName__ = firstName ? _fbb.CreateString(firstName) : 0;
  auto middleInitial__ = middleInitial ? _fbb.CreateString(middleInitial) : 0;
  auto memberId__ = memberId ? _fbb.CreateString(memberId) : 0;
  auto last4SSN__ = last4SSN ? _fbb.CreateString(last4SSN) : 0;
  auto dodID__ = dodID ? _fbb.CreateString(dodID) : 0;
  auto dutyPosition__ = dutyPosition ? _fbb.CreateString(dutyPosition) : 0;
  auto crewPosition__ = crewPosition ? _fbb.CreateString(crewPosition) : 0;
  auto memberType__ = memberType ? _fbb.CreateString(memberType) : 0;
  auto branch__ = branch ? _fbb.CreateString(branch) : 0;
  auto rank__ = rank ? _fbb.CreateString(rank) : 0;
  auto wing__ = wing ? _fbb.CreateString(wing) : 0;
  auto squadron__ = squadron ? _fbb.CreateString(squadron) : 0;
  auto memberRemarks__ = memberRemarks ? _fbb.CreateString(memberRemarks) : 0;
  auto username__ = username ? _fbb.CreateString(username) : 0;
  return CreateCrewMembers_Full(
      _fbb,
      lastName__,
      firstName__,
      middleInitial__,
      memberId__,
      civilian,
      commander,
      last4SSN__,
      dodID__,
      dutyPosition__,
      crewPosition__,
      memberType__,
      branch__,
      rank__,
      wing__,
      squadron__,
      memberRemarks__,
      username__);
}

inline const CrewMembers_Full *GetCrewMembers_Full(const void *buf) {
  return ::flatbuffers::GetRoot<CrewMembers_Full>(buf);
}

inline const CrewMembers_Full *GetSizePrefixedCrewMembers_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CrewMembers_Full>(buf);
}

inline const char *CrewMembers_FullIdentifier() {
  return "CREW";
}

inline bool CrewMembers_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CrewMembers_FullIdentifier());
}

inline bool SizePrefixedCrewMembers_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CrewMembers_FullIdentifier(), true);
}

inline bool VerifyCrewMembers_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CrewMembers_Full>(CrewMembers_FullIdentifier());
}

inline bool VerifySizePrefixedCrewMembers_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CrewMembers_Full>(CrewMembers_FullIdentifier());
}

inline void FinishCrewMembers_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CrewMembers_Full> root) {
  fbb.Finish(root, CrewMembers_FullIdentifier());
}

inline void FinishSizePrefixedCrewMembers_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CrewMembers_Full> root) {
  fbb.FinishSizePrefixed(root, CrewMembers_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
