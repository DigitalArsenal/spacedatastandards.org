// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkOps_Abridged;
struct DataLinkOps_AbridgedBuilder;

/// /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
struct DataLinkOps_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkOps_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LINKNAME = 4,
    VT_LINKSTARTTIME = 6,
    VT_LINKSTOPTIME = 8,
    VT_LINKSTOPTIMEMOD = 10,
    VT_LINKDETAILS = 12
  };
  /// Name of the data link.
  /// Example: /// Example: Link-16
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *linkName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKNAME);
  }
  /// The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *linkStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTARTTIME);
  }
  /// The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *linkStopTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTOPTIME);
  }
  /// A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
  /// Example: /// Example: AFTER
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *linkStopTimeMod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTOPTIMEMOD);
  }
  /// Detailed characteristics of the data link.
  /// Example: /// Example: Link details
  /// Constraints: Minimum length = 0, Maximum length = 3000
  const ::flatbuffers::String *linkDetails() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKDETAILS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LINKNAME) &&
           verifier.VerifyString(linkName()) &&
           VerifyOffset(verifier, VT_LINKSTARTTIME) &&
           verifier.VerifyString(linkStartTime()) &&
           VerifyOffset(verifier, VT_LINKSTOPTIME) &&
           verifier.VerifyString(linkStopTime()) &&
           VerifyOffset(verifier, VT_LINKSTOPTIMEMOD) &&
           verifier.VerifyString(linkStopTimeMod()) &&
           VerifyOffset(verifier, VT_LINKDETAILS) &&
           verifier.VerifyString(linkDetails()) &&
           verifier.EndTable();
  }
};

struct DataLinkOps_AbridgedBuilder {
  typedef DataLinkOps_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_linkName(::flatbuffers::Offset<::flatbuffers::String> linkName) {
    fbb_.AddOffset(DataLinkOps_Abridged::VT_LINKNAME, linkName);
  }
  void add_linkStartTime(::flatbuffers::Offset<::flatbuffers::String> linkStartTime) {
    fbb_.AddOffset(DataLinkOps_Abridged::VT_LINKSTARTTIME, linkStartTime);
  }
  void add_linkStopTime(::flatbuffers::Offset<::flatbuffers::String> linkStopTime) {
    fbb_.AddOffset(DataLinkOps_Abridged::VT_LINKSTOPTIME, linkStopTime);
  }
  void add_linkStopTimeMod(::flatbuffers::Offset<::flatbuffers::String> linkStopTimeMod) {
    fbb_.AddOffset(DataLinkOps_Abridged::VT_LINKSTOPTIMEMOD, linkStopTimeMod);
  }
  void add_linkDetails(::flatbuffers::Offset<::flatbuffers::String> linkDetails) {
    fbb_.AddOffset(DataLinkOps_Abridged::VT_LINKDETAILS, linkDetails);
  }
  explicit DataLinkOps_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkOps_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkOps_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkOps_Abridged> CreateDataLinkOps_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> linkName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkStopTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkStopTimeMod = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkDetails = 0) {
  DataLinkOps_AbridgedBuilder builder_(_fbb);
  builder_.add_linkDetails(linkDetails);
  builder_.add_linkStopTimeMod(linkStopTimeMod);
  builder_.add_linkStopTime(linkStopTime);
  builder_.add_linkStartTime(linkStartTime);
  builder_.add_linkName(linkName);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkOps_Abridged> CreateDataLinkOps_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *linkName = nullptr,
    const char *linkStartTime = nullptr,
    const char *linkStopTime = nullptr,
    const char *linkStopTimeMod = nullptr,
    const char *linkDetails = nullptr) {
  auto linkName__ = linkName ? _fbb.CreateString(linkName) : 0;
  auto linkStartTime__ = linkStartTime ? _fbb.CreateString(linkStartTime) : 0;
  auto linkStopTime__ = linkStopTime ? _fbb.CreateString(linkStopTime) : 0;
  auto linkStopTimeMod__ = linkStopTimeMod ? _fbb.CreateString(linkStopTimeMod) : 0;
  auto linkDetails__ = linkDetails ? _fbb.CreateString(linkDetails) : 0;
  return CreateDataLinkOps_Abridged(
      _fbb,
      linkName__,
      linkStartTime__,
      linkStopTime__,
      linkStopTimeMod__,
      linkDetails__);
}

inline const DataLinkOps_Abridged *GetDataLinkOps_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkOps_Abridged>(buf);
}

inline const DataLinkOps_Abridged *GetSizePrefixedDataLinkOps_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkOps_Abridged>(buf);
}

inline const char *DataLinkOps_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLinkOps_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkOps_AbridgedIdentifier());
}

inline bool SizePrefixedDataLinkOps_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkOps_AbridgedIdentifier(), true);
}

inline bool VerifyDataLinkOps_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkOps_Abridged>(DataLinkOps_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLinkOps_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkOps_Abridged>(DataLinkOps_AbridgedIdentifier());
}

inline void FinishDataLinkOps_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkOps_Abridged> root) {
  fbb.Finish(root, DataLinkOps_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLinkOps_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkOps_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLinkOps_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
