// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirEventTankers_Full;
struct AirEventTankers_FullBuilder;

/// /// Collection of tanker aircraft associated with this Air Event.
struct AirEventTankers_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirEventTankers_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDTANKERSORTIE = 4,
    VT_IDTANKERMISSION = 6,
    VT_IDTANKERAIRFIELD = 8,
    VT_EXTERNALTANKERID = 10,
    VT_TANKERCOORD = 12,
    VT_TANKERMDS = 14,
    VT_AMCTANKERMISSIONID = 16,
    VT_ALTTANKERMISSIONID = 18,
    VT_TANKERCALLSIGN = 20,
    VT_TANKEROWNER = 22,
    VT_TANKERPOC = 24,
    VT_TANKERLEGNUM = 26,
    VT_TANKERDEPLOYEDICAO = 28,
    VT_TANKERDELIVERYMETHOD = 30,
    VT_FUELOFF = 32,
    VT_TANKERCELLPOSITION = 34,
    VT_TANKERFUELTYPE = 36,
    VT_DUALROLE = 38
  };
  /// The UDL ID of the aircraft sortie this tanker is associated with for this event.
  /// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idTankerSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDTANKERSORTIE);
  }
  /// The UDL ID of the mission this tanker is associated with for this event.
  /// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idTankerMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDTANKERMISSION);
  }
  /// The UDL ID of the airfield this tanker is associated with for this event.
  /// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idTankerAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDTANKERAIRFIELD);
  }
  /// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalTankerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALTANKERID);
  }
  /// Coordination record identifier of this tanker.
  /// Example: /// Example: TTC601
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *tankerCoord() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERCOORD);
  }
  /// The Model Design Series designation of this tanker.
  /// Example: /// Example: KC135R
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *tankerMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERMDS);
  }
  /// The Air Mobility Command (AMC) mission identifier of this tanker.
  /// Example: /// Example: 8PH000B1S052
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcTankerMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCTANKERMISSIONID);
  }
  /// Alternate mission identifier of this tanker provided by source.
  /// Example: /// Example: 1UN05201L121
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *altTankerMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTTANKERMISSIONID);
  }
  /// The call sign assigned to this tanker.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *tankerCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERCALLSIGN);
  }
  /// The wing or unit that owns this tanker.
  /// Example: /// Example: 117ARW
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *tankerOwner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKEROWNER);
  }
  /// The name and/or number of the point of contact for this tanker.
  /// Example: /// Example: JOHN SMITH (555)555-5555
  /// Constraints: Minimum length = 0, Maximum length = 68
  const ::flatbuffers::String *tankerPOC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERPOC);
  }
  /// Identifies the itinerary point of a mission that this tanker is linked to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  int32_t tankerLegNum() const {
    return GetField<int32_t>(VT_TANKERLEGNUM, 0);
  }
  /// Location the tanker has been deployed to in preparation for an air refueling event.
  /// Example: /// Example: KOFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *tankerDeployedICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERDEPLOYEDICAO);
  }
  /// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
  /// Example: /// Example: DROGUE
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *tankerDeliveryMethod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERDELIVERYMETHOD);
  }
  /// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
  /// Example: /// Example: 15000000.1
  /// Constraints: No constraints specified.
  double fuelOff() const {
    return GetField<double>(VT_FUELOFF, 0.0);
  }
  /// Position of this tanker within a group of tankers in an air refueling event.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t tankerCellPosition() const {
    return GetField<int32_t>(VT_TANKERCELLPOSITION, 0);
  }
  /// Type of fuel being transferred from the tanker in an air refueling event.
  /// Example: /// Example: JP8
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *tankerFuelType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TANKERFUELTYPE);
  }
  /// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool dualRole() const {
    return GetField<uint8_t>(VT_DUALROLE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDTANKERSORTIE) &&
           verifier.VerifyString(idTankerSortie()) &&
           VerifyOffset(verifier, VT_IDTANKERMISSION) &&
           verifier.VerifyString(idTankerMission()) &&
           VerifyOffset(verifier, VT_IDTANKERAIRFIELD) &&
           verifier.VerifyString(idTankerAirfield()) &&
           VerifyOffset(verifier, VT_EXTERNALTANKERID) &&
           verifier.VerifyString(externalTankerId()) &&
           VerifyOffset(verifier, VT_TANKERCOORD) &&
           verifier.VerifyString(tankerCoord()) &&
           VerifyOffset(verifier, VT_TANKERMDS) &&
           verifier.VerifyString(tankerMDS()) &&
           VerifyOffset(verifier, VT_AMCTANKERMISSIONID) &&
           verifier.VerifyString(amcTankerMissionId()) &&
           VerifyOffset(verifier, VT_ALTTANKERMISSIONID) &&
           verifier.VerifyString(altTankerMissionId()) &&
           VerifyOffset(verifier, VT_TANKERCALLSIGN) &&
           verifier.VerifyString(tankerCallSign()) &&
           VerifyOffset(verifier, VT_TANKEROWNER) &&
           verifier.VerifyString(tankerOwner()) &&
           VerifyOffset(verifier, VT_TANKERPOC) &&
           verifier.VerifyString(tankerPOC()) &&
           VerifyField<int32_t>(verifier, VT_TANKERLEGNUM, 4) &&
           VerifyOffset(verifier, VT_TANKERDEPLOYEDICAO) &&
           verifier.VerifyString(tankerDeployedICAO()) &&
           VerifyOffset(verifier, VT_TANKERDELIVERYMETHOD) &&
           verifier.VerifyString(tankerDeliveryMethod()) &&
           VerifyField<double>(verifier, VT_FUELOFF, 8) &&
           VerifyField<int32_t>(verifier, VT_TANKERCELLPOSITION, 4) &&
           VerifyOffset(verifier, VT_TANKERFUELTYPE) &&
           verifier.VerifyString(tankerFuelType()) &&
           VerifyField<uint8_t>(verifier, VT_DUALROLE, 1) &&
           verifier.EndTable();
  }
};

struct AirEventTankers_FullBuilder {
  typedef AirEventTankers_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idTankerSortie(::flatbuffers::Offset<::flatbuffers::String> idTankerSortie) {
    fbb_.AddOffset(AirEventTankers_Full::VT_IDTANKERSORTIE, idTankerSortie);
  }
  void add_idTankerMission(::flatbuffers::Offset<::flatbuffers::String> idTankerMission) {
    fbb_.AddOffset(AirEventTankers_Full::VT_IDTANKERMISSION, idTankerMission);
  }
  void add_idTankerAirfield(::flatbuffers::Offset<::flatbuffers::String> idTankerAirfield) {
    fbb_.AddOffset(AirEventTankers_Full::VT_IDTANKERAIRFIELD, idTankerAirfield);
  }
  void add_externalTankerId(::flatbuffers::Offset<::flatbuffers::String> externalTankerId) {
    fbb_.AddOffset(AirEventTankers_Full::VT_EXTERNALTANKERID, externalTankerId);
  }
  void add_tankerCoord(::flatbuffers::Offset<::flatbuffers::String> tankerCoord) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERCOORD, tankerCoord);
  }
  void add_tankerMDS(::flatbuffers::Offset<::flatbuffers::String> tankerMDS) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERMDS, tankerMDS);
  }
  void add_amcTankerMissionId(::flatbuffers::Offset<::flatbuffers::String> amcTankerMissionId) {
    fbb_.AddOffset(AirEventTankers_Full::VT_AMCTANKERMISSIONID, amcTankerMissionId);
  }
  void add_altTankerMissionId(::flatbuffers::Offset<::flatbuffers::String> altTankerMissionId) {
    fbb_.AddOffset(AirEventTankers_Full::VT_ALTTANKERMISSIONID, altTankerMissionId);
  }
  void add_tankerCallSign(::flatbuffers::Offset<::flatbuffers::String> tankerCallSign) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERCALLSIGN, tankerCallSign);
  }
  void add_tankerOwner(::flatbuffers::Offset<::flatbuffers::String> tankerOwner) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKEROWNER, tankerOwner);
  }
  void add_tankerPOC(::flatbuffers::Offset<::flatbuffers::String> tankerPOC) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERPOC, tankerPOC);
  }
  void add_tankerLegNum(int32_t tankerLegNum) {
    fbb_.AddElement<int32_t>(AirEventTankers_Full::VT_TANKERLEGNUM, tankerLegNum, 0);
  }
  void add_tankerDeployedICAO(::flatbuffers::Offset<::flatbuffers::String> tankerDeployedICAO) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERDEPLOYEDICAO, tankerDeployedICAO);
  }
  void add_tankerDeliveryMethod(::flatbuffers::Offset<::flatbuffers::String> tankerDeliveryMethod) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERDELIVERYMETHOD, tankerDeliveryMethod);
  }
  void add_fuelOff(double fuelOff) {
    fbb_.AddElement<double>(AirEventTankers_Full::VT_FUELOFF, fuelOff, 0.0);
  }
  void add_tankerCellPosition(int32_t tankerCellPosition) {
    fbb_.AddElement<int32_t>(AirEventTankers_Full::VT_TANKERCELLPOSITION, tankerCellPosition, 0);
  }
  void add_tankerFuelType(::flatbuffers::Offset<::flatbuffers::String> tankerFuelType) {
    fbb_.AddOffset(AirEventTankers_Full::VT_TANKERFUELTYPE, tankerFuelType);
  }
  void add_dualRole(bool dualRole) {
    fbb_.AddElement<uint8_t>(AirEventTankers_Full::VT_DUALROLE, static_cast<uint8_t>(dualRole), 0);
  }
  explicit AirEventTankers_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirEventTankers_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirEventTankers_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirEventTankers_Full> CreateAirEventTankers_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idTankerSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idTankerMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idTankerAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalTankerId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerCoord = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcTankerMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altTankerMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerCallSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerOwner = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerPOC = 0,
    int32_t tankerLegNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerDeployedICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerDeliveryMethod = 0,
    double fuelOff = 0.0,
    int32_t tankerCellPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tankerFuelType = 0,
    bool dualRole = false) {
  AirEventTankers_FullBuilder builder_(_fbb);
  builder_.add_fuelOff(fuelOff);
  builder_.add_tankerFuelType(tankerFuelType);
  builder_.add_tankerCellPosition(tankerCellPosition);
  builder_.add_tankerDeliveryMethod(tankerDeliveryMethod);
  builder_.add_tankerDeployedICAO(tankerDeployedICAO);
  builder_.add_tankerLegNum(tankerLegNum);
  builder_.add_tankerPOC(tankerPOC);
  builder_.add_tankerOwner(tankerOwner);
  builder_.add_tankerCallSign(tankerCallSign);
  builder_.add_altTankerMissionId(altTankerMissionId);
  builder_.add_amcTankerMissionId(amcTankerMissionId);
  builder_.add_tankerMDS(tankerMDS);
  builder_.add_tankerCoord(tankerCoord);
  builder_.add_externalTankerId(externalTankerId);
  builder_.add_idTankerAirfield(idTankerAirfield);
  builder_.add_idTankerMission(idTankerMission);
  builder_.add_idTankerSortie(idTankerSortie);
  builder_.add_dualRole(dualRole);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirEventTankers_Full> CreateAirEventTankers_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idTankerSortie = nullptr,
    const char *idTankerMission = nullptr,
    const char *idTankerAirfield = nullptr,
    const char *externalTankerId = nullptr,
    const char *tankerCoord = nullptr,
    const char *tankerMDS = nullptr,
    const char *amcTankerMissionId = nullptr,
    const char *altTankerMissionId = nullptr,
    const char *tankerCallSign = nullptr,
    const char *tankerOwner = nullptr,
    const char *tankerPOC = nullptr,
    int32_t tankerLegNum = 0,
    const char *tankerDeployedICAO = nullptr,
    const char *tankerDeliveryMethod = nullptr,
    double fuelOff = 0.0,
    int32_t tankerCellPosition = 0,
    const char *tankerFuelType = nullptr,
    bool dualRole = false) {
  auto idTankerSortie__ = idTankerSortie ? _fbb.CreateString(idTankerSortie) : 0;
  auto idTankerMission__ = idTankerMission ? _fbb.CreateString(idTankerMission) : 0;
  auto idTankerAirfield__ = idTankerAirfield ? _fbb.CreateString(idTankerAirfield) : 0;
  auto externalTankerId__ = externalTankerId ? _fbb.CreateString(externalTankerId) : 0;
  auto tankerCoord__ = tankerCoord ? _fbb.CreateString(tankerCoord) : 0;
  auto tankerMDS__ = tankerMDS ? _fbb.CreateString(tankerMDS) : 0;
  auto amcTankerMissionId__ = amcTankerMissionId ? _fbb.CreateString(amcTankerMissionId) : 0;
  auto altTankerMissionId__ = altTankerMissionId ? _fbb.CreateString(altTankerMissionId) : 0;
  auto tankerCallSign__ = tankerCallSign ? _fbb.CreateString(tankerCallSign) : 0;
  auto tankerOwner__ = tankerOwner ? _fbb.CreateString(tankerOwner) : 0;
  auto tankerPOC__ = tankerPOC ? _fbb.CreateString(tankerPOC) : 0;
  auto tankerDeployedICAO__ = tankerDeployedICAO ? _fbb.CreateString(tankerDeployedICAO) : 0;
  auto tankerDeliveryMethod__ = tankerDeliveryMethod ? _fbb.CreateString(tankerDeliveryMethod) : 0;
  auto tankerFuelType__ = tankerFuelType ? _fbb.CreateString(tankerFuelType) : 0;
  return CreateAirEventTankers_Full(
      _fbb,
      idTankerSortie__,
      idTankerMission__,
      idTankerAirfield__,
      externalTankerId__,
      tankerCoord__,
      tankerMDS__,
      amcTankerMissionId__,
      altTankerMissionId__,
      tankerCallSign__,
      tankerOwner__,
      tankerPOC__,
      tankerLegNum,
      tankerDeployedICAO__,
      tankerDeliveryMethod__,
      fuelOff,
      tankerCellPosition,
      tankerFuelType__,
      dualRole);
}

inline const AirEventTankers_Full *GetAirEventTankers_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AirEventTankers_Full>(buf);
}

inline const AirEventTankers_Full *GetSizePrefixedAirEventTankers_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirEventTankers_Full>(buf);
}

inline const char *AirEventTankers_FullIdentifier() {
  return "AIRE";
}

inline bool AirEventTankers_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEventTankers_FullIdentifier());
}

inline bool SizePrefixedAirEventTankers_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEventTankers_FullIdentifier(), true);
}

inline bool VerifyAirEventTankers_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirEventTankers_Full>(AirEventTankers_FullIdentifier());
}

inline bool VerifySizePrefixedAirEventTankers_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirEventTankers_Full>(AirEventTankers_FullIdentifier());
}

inline void FinishAirEventTankers_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEventTankers_Full> root) {
  fbb.Finish(root, AirEventTankers_FullIdentifier());
}

inline void FinishSizePrefixedAirEventTankers_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEventTankers_Full> root) {
  fbb.FinishSizePrefixed(root, AirEventTankers_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
