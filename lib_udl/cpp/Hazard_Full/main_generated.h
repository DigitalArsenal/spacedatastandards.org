// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Hazard_Full;
struct Hazard_FullBuilder;

enum Hazard_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Hazard_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Hazard_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Hazard_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Hazard_Full_dataMode_Enum_EXERCISE = 3,
  Hazard_Full_dataMode_Enum_MIN = Hazard_Full_dataMode_Enum_REAL,
  Hazard_Full_dataMode_Enum_MAX = Hazard_Full_dataMode_Enum_EXERCISE
};

inline const Hazard_Full_dataMode_Enum (&EnumValuesHazard_Full_dataMode_Enum())[4] {
  static const Hazard_Full_dataMode_Enum values[] = {
    Hazard_Full_dataMode_Enum_REAL,
    Hazard_Full_dataMode_Enum_TEST,
    Hazard_Full_dataMode_Enum_SIMULATED,
    Hazard_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesHazard_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameHazard_Full_dataMode_Enum(Hazard_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Hazard_Full_dataMode_Enum_REAL, Hazard_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesHazard_Full_dataMode_Enum()[index];
}

/// /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
struct Hazard_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Hazard_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_DETECTTYPE = 8,
    VT_DETECTTIME = 10,
    VT_HARMFUL = 12,
    VT_ALARMS = 14,
    VT_ALARMVALUES = 16,
    VT_READINGS = 18,
    VT_READINGUNITS = 20,
    VT_READINGVALUES = 22,
    VT_MATTYPE = 24,
    VT_MATCLASS = 26,
    VT_MATNAME = 28,
    VT_MATCAT = 30,
    VT_CASRN = 32,
    VT_PPM = 34,
    VT_DENSITY = 36,
    VT_RADCTRN = 38,
    VT_GBAR = 40,
    VT_HBAR = 42,
    VT_Z = 44,
    VT_A = 46,
    VT_BOTTLEID = 48,
    VT_CHANNEL = 50,
    VT_DURATION = 52,
    VT_ACTIVITY = 54,
    VT_DEP = 56,
    VT_DEPCTRN = 58,
    VT_MASSFRAC = 60,
    VT_DOSE = 62,
    VT_CTRNTIME = 64,
    VT_DOSERATE = 66,
    VT_IDPOI = 68,
    VT_IDTRACK = 70,
    VT_CREATEDAT = 72,
    VT_CREATEDBY = 74,
    VT_SOURCE = 76,
    VT_ORIGIN = 78,
    VT_ORIGNETWORK = 80,
    VT_DATAMODE = 82
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: HAZARD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
  /// Example: /// Example: Chemical
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *detectType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DETECTTYPE);
  }
  /// The detect time, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-03-07T14:51:39.653Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *detectTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DETECTTIME);
  }
  /// Flag indicating whether this detection is harmful to humans.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool harmful() const {
    return GetField<uint8_t>(VT_HARMFUL, 0) != 0;
  }
  /// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Alarm1', 'Alarm2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *alarms() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ALARMS);
  }
  /// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
  /// Example: /// Example: [2.7, 2.9]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *alarmValues() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ALARMVALUES);
  }
  /// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Rad1', 'Rad2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *readings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_READINGS);
  }
  /// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: ['Gray', 'Gray']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *readingUnits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_READINGUNITS);
  }
  /// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
  /// Example: /// Example: [107.2, 124.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *readingValues() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_READINGVALUES);
  }
  /// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
  /// Example: /// Example: 21
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *matType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MATTYPE);
  }
  /// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
  /// Example: /// Example: Nerve Agent
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *matClass() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MATCLASS);
  }
  /// The material common name associated with this detection.
  /// Example: /// Example: VX
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *matName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MATNAME);
  }
  /// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
  /// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
  /// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
  /// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
  /// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
  /// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t matCat() const {
    return GetField<int32_t>(VT_MATCAT, 0);
  }
  /// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
  /// Example: /// Example: 64-17-5
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *casRN() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CASRN);
  }
  /// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
  /// Example: /// Example: 27129
  /// Constraints: No constraints specified.
  int32_t ppm() const {
    return GetField<int32_t>(VT_PPM, 0);
  }
  /// Measure of density of the material associated with this detection, in kg/m^3.
  /// Example: /// Example: 18900.2
  /// Constraints: No constraints specified.
  double density() const {
    return GetField<double>(VT_DENSITY, 0.0);
  }
  /// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
  /// Example: /// Example: 1.31
  /// Constraints: No constraints specified.
  double radCtrn() const {
    return GetField<double>(VT_RADCTRN, 0.0);
  }
  /// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  double gBar() const {
    return GetField<double>(VT_GBAR, 0.0);
  }
  /// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  double hBar() const {
    return GetField<double>(VT_HBAR, 0.0);
  }
  /// The Atomic Number of the material associated with this detection.
  /// Example: /// Example: 92
  /// Constraints: No constraints specified.
  int32_t z() const {
    return GetField<int32_t>(VT_Z, 0);
  }
  /// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
  /// Example: /// Example: 238
  /// Constraints: No constraints specified.
  int32_t a() const {
    return GetField<int32_t>(VT_A, 0);
  }
  /// The specific bottle ID associated with this detection.
  /// Example: /// Example: 6264
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *bottleId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BOTTLEID);
  }
  /// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
  /// Example: /// Example: Skin
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *channel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHANNEL);
  }
  /// The known or projected hazard duration, in seconds, associated with this material detection.
  /// Example: /// Example: 14400
  /// Constraints: No constraints specified.
  int32_t duration() const {
    return GetField<int32_t>(VT_DURATION, 0);
  }
  /// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
  /// Example: /// Example: 120.1
  /// Constraints: No constraints specified.
  double activity() const {
    return GetField<double>(VT_ACTIVITY, 0.0);
  }
  /// The deposition measurement of the contaminant to surface area, in kg/m^2.
  /// Example: /// Example: 1.084
  /// Constraints: No constraints specified.
  double dep() const {
    return GetField<double>(VT_DEP, 0.0);
  }
  /// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
  /// Example: /// Example: 86.1
  /// Constraints: No constraints specified.
  double depCtrn() const {
    return GetField<double>(VT_DEPCTRN, 0.0);
  }
  /// Ratio of the chemical substance mass to the total mass of the mixture.
  /// Example: /// Example: 0.029
  /// Constraints: No constraints specified.
  double massFrac() const {
    return GetField<double>(VT_MASSFRAC, 0.0);
  }
  /// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  /// Example: /// Example: 1.12
  /// Constraints: No constraints specified.
  double dose() const {
    return GetField<double>(VT_DOSE, 0.0);
  }
  /// The concentration time, in (kg/sec)/m^3, associated with this material detection.
  /// Example: /// Example: 1.077
  /// Constraints: No constraints specified.
  double ctrnTime() const {
    return GetField<double>(VT_CTRNTIME, 0.0);
  }
  /// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
  /// Example: /// Example: 1.0000001865
  /// Constraints: No constraints specified.
  double doseRate() const {
    return GetField<double>(VT_DOSERATE, 0.0);
  }
  /// ID of the Point of Interest (POI) record related to this hazard record.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idPOI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDPOI);
  }
  /// ID of the Track record related to this hazard record.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idTrack() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDTRACK);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Hazard_Full_dataMode_Enum dataMode() const {
    return static_cast<Hazard_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_DETECTTYPE) &&
           verifier.VerifyString(detectType()) &&
           VerifyOffset(verifier, VT_DETECTTIME) &&
           verifier.VerifyString(detectTime()) &&
           VerifyField<uint8_t>(verifier, VT_HARMFUL, 1) &&
           VerifyOffset(verifier, VT_ALARMS) &&
           verifier.VerifyVector(alarms()) &&
           verifier.VerifyVectorOfStrings(alarms()) &&
           VerifyOffset(verifier, VT_ALARMVALUES) &&
           verifier.VerifyVector(alarmValues()) &&
           verifier.VerifyVectorOfStrings(alarmValues()) &&
           VerifyOffset(verifier, VT_READINGS) &&
           verifier.VerifyVector(readings()) &&
           verifier.VerifyVectorOfStrings(readings()) &&
           VerifyOffset(verifier, VT_READINGUNITS) &&
           verifier.VerifyVector(readingUnits()) &&
           verifier.VerifyVectorOfStrings(readingUnits()) &&
           VerifyOffset(verifier, VT_READINGVALUES) &&
           verifier.VerifyVector(readingValues()) &&
           verifier.VerifyVectorOfStrings(readingValues()) &&
           VerifyOffset(verifier, VT_MATTYPE) &&
           verifier.VerifyString(matType()) &&
           VerifyOffset(verifier, VT_MATCLASS) &&
           verifier.VerifyString(matClass()) &&
           VerifyOffset(verifier, VT_MATNAME) &&
           verifier.VerifyString(matName()) &&
           VerifyField<int32_t>(verifier, VT_MATCAT, 4) &&
           VerifyOffset(verifier, VT_CASRN) &&
           verifier.VerifyString(casRN()) &&
           VerifyField<int32_t>(verifier, VT_PPM, 4) &&
           VerifyField<double>(verifier, VT_DENSITY, 8) &&
           VerifyField<double>(verifier, VT_RADCTRN, 8) &&
           VerifyField<double>(verifier, VT_GBAR, 8) &&
           VerifyField<double>(verifier, VT_HBAR, 8) &&
           VerifyField<int32_t>(verifier, VT_Z, 4) &&
           VerifyField<int32_t>(verifier, VT_A, 4) &&
           VerifyOffset(verifier, VT_BOTTLEID) &&
           verifier.VerifyString(bottleId()) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.VerifyString(channel()) &&
           VerifyField<int32_t>(verifier, VT_DURATION, 4) &&
           VerifyField<double>(verifier, VT_ACTIVITY, 8) &&
           VerifyField<double>(verifier, VT_DEP, 8) &&
           VerifyField<double>(verifier, VT_DEPCTRN, 8) &&
           VerifyField<double>(verifier, VT_MASSFRAC, 8) &&
           VerifyField<double>(verifier, VT_DOSE, 8) &&
           VerifyField<double>(verifier, VT_CTRNTIME, 8) &&
           VerifyField<double>(verifier, VT_DOSERATE, 8) &&
           VerifyOffset(verifier, VT_IDPOI) &&
           verifier.VerifyString(idPOI()) &&
           VerifyOffset(verifier, VT_IDTRACK) &&
           verifier.VerifyString(idTrack()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Hazard_FullBuilder {
  typedef Hazard_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Hazard_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Hazard_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_detectType(::flatbuffers::Offset<::flatbuffers::String> detectType) {
    fbb_.AddOffset(Hazard_Full::VT_DETECTTYPE, detectType);
  }
  void add_detectTime(::flatbuffers::Offset<::flatbuffers::String> detectTime) {
    fbb_.AddOffset(Hazard_Full::VT_DETECTTIME, detectTime);
  }
  void add_harmful(bool harmful) {
    fbb_.AddElement<uint8_t>(Hazard_Full::VT_HARMFUL, static_cast<uint8_t>(harmful), 0);
  }
  void add_alarms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> alarms) {
    fbb_.AddOffset(Hazard_Full::VT_ALARMS, alarms);
  }
  void add_alarmValues(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> alarmValues) {
    fbb_.AddOffset(Hazard_Full::VT_ALARMVALUES, alarmValues);
  }
  void add_readings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readings) {
    fbb_.AddOffset(Hazard_Full::VT_READINGS, readings);
  }
  void add_readingUnits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readingUnits) {
    fbb_.AddOffset(Hazard_Full::VT_READINGUNITS, readingUnits);
  }
  void add_readingValues(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readingValues) {
    fbb_.AddOffset(Hazard_Full::VT_READINGVALUES, readingValues);
  }
  void add_matType(::flatbuffers::Offset<::flatbuffers::String> matType) {
    fbb_.AddOffset(Hazard_Full::VT_MATTYPE, matType);
  }
  void add_matClass(::flatbuffers::Offset<::flatbuffers::String> matClass) {
    fbb_.AddOffset(Hazard_Full::VT_MATCLASS, matClass);
  }
  void add_matName(::flatbuffers::Offset<::flatbuffers::String> matName) {
    fbb_.AddOffset(Hazard_Full::VT_MATNAME, matName);
  }
  void add_matCat(int32_t matCat) {
    fbb_.AddElement<int32_t>(Hazard_Full::VT_MATCAT, matCat, 0);
  }
  void add_casRN(::flatbuffers::Offset<::flatbuffers::String> casRN) {
    fbb_.AddOffset(Hazard_Full::VT_CASRN, casRN);
  }
  void add_ppm(int32_t ppm) {
    fbb_.AddElement<int32_t>(Hazard_Full::VT_PPM, ppm, 0);
  }
  void add_density(double density) {
    fbb_.AddElement<double>(Hazard_Full::VT_DENSITY, density, 0.0);
  }
  void add_radCtrn(double radCtrn) {
    fbb_.AddElement<double>(Hazard_Full::VT_RADCTRN, radCtrn, 0.0);
  }
  void add_gBar(double gBar) {
    fbb_.AddElement<double>(Hazard_Full::VT_GBAR, gBar, 0.0);
  }
  void add_hBar(double hBar) {
    fbb_.AddElement<double>(Hazard_Full::VT_HBAR, hBar, 0.0);
  }
  void add_z(int32_t z) {
    fbb_.AddElement<int32_t>(Hazard_Full::VT_Z, z, 0);
  }
  void add_a(int32_t a) {
    fbb_.AddElement<int32_t>(Hazard_Full::VT_A, a, 0);
  }
  void add_bottleId(::flatbuffers::Offset<::flatbuffers::String> bottleId) {
    fbb_.AddOffset(Hazard_Full::VT_BOTTLEID, bottleId);
  }
  void add_channel(::flatbuffers::Offset<::flatbuffers::String> channel) {
    fbb_.AddOffset(Hazard_Full::VT_CHANNEL, channel);
  }
  void add_duration(int32_t duration) {
    fbb_.AddElement<int32_t>(Hazard_Full::VT_DURATION, duration, 0);
  }
  void add_activity(double activity) {
    fbb_.AddElement<double>(Hazard_Full::VT_ACTIVITY, activity, 0.0);
  }
  void add_dep(double dep) {
    fbb_.AddElement<double>(Hazard_Full::VT_DEP, dep, 0.0);
  }
  void add_depCtrn(double depCtrn) {
    fbb_.AddElement<double>(Hazard_Full::VT_DEPCTRN, depCtrn, 0.0);
  }
  void add_massFrac(double massFrac) {
    fbb_.AddElement<double>(Hazard_Full::VT_MASSFRAC, massFrac, 0.0);
  }
  void add_dose(double dose) {
    fbb_.AddElement<double>(Hazard_Full::VT_DOSE, dose, 0.0);
  }
  void add_ctrnTime(double ctrnTime) {
    fbb_.AddElement<double>(Hazard_Full::VT_CTRNTIME, ctrnTime, 0.0);
  }
  void add_doseRate(double doseRate) {
    fbb_.AddElement<double>(Hazard_Full::VT_DOSERATE, doseRate, 0.0);
  }
  void add_idPOI(::flatbuffers::Offset<::flatbuffers::String> idPOI) {
    fbb_.AddOffset(Hazard_Full::VT_IDPOI, idPOI);
  }
  void add_idTrack(::flatbuffers::Offset<::flatbuffers::String> idTrack) {
    fbb_.AddOffset(Hazard_Full::VT_IDTRACK, idTrack);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Hazard_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Hazard_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Hazard_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Hazard_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Hazard_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Hazard_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Hazard_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Hazard_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Hazard_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Hazard_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Hazard_Full> CreateHazard_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> detectType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> detectTime = 0,
    bool harmful = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> alarms = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> alarmValues = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readings = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readingUnits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> readingValues = 0,
    ::flatbuffers::Offset<::flatbuffers::String> matType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> matClass = 0,
    ::flatbuffers::Offset<::flatbuffers::String> matName = 0,
    int32_t matCat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> casRN = 0,
    int32_t ppm = 0,
    double density = 0.0,
    double radCtrn = 0.0,
    double gBar = 0.0,
    double hBar = 0.0,
    int32_t z = 0,
    int32_t a = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bottleId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> channel = 0,
    int32_t duration = 0,
    double activity = 0.0,
    double dep = 0.0,
    double depCtrn = 0.0,
    double massFrac = 0.0,
    double dose = 0.0,
    double ctrnTime = 0.0,
    double doseRate = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> idPOI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idTrack = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Hazard_Full_dataMode_Enum dataMode = Hazard_Full_dataMode_Enum_REAL) {
  Hazard_FullBuilder builder_(_fbb);
  builder_.add_doseRate(doseRate);
  builder_.add_ctrnTime(ctrnTime);
  builder_.add_dose(dose);
  builder_.add_massFrac(massFrac);
  builder_.add_depCtrn(depCtrn);
  builder_.add_dep(dep);
  builder_.add_activity(activity);
  builder_.add_hBar(hBar);
  builder_.add_gBar(gBar);
  builder_.add_radCtrn(radCtrn);
  builder_.add_density(density);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_idTrack(idTrack);
  builder_.add_idPOI(idPOI);
  builder_.add_duration(duration);
  builder_.add_channel(channel);
  builder_.add_bottleId(bottleId);
  builder_.add_a(a);
  builder_.add_z(z);
  builder_.add_ppm(ppm);
  builder_.add_casRN(casRN);
  builder_.add_matCat(matCat);
  builder_.add_matName(matName);
  builder_.add_matClass(matClass);
  builder_.add_matType(matType);
  builder_.add_readingValues(readingValues);
  builder_.add_readingUnits(readingUnits);
  builder_.add_readings(readings);
  builder_.add_alarmValues(alarmValues);
  builder_.add_alarms(alarms);
  builder_.add_detectTime(detectTime);
  builder_.add_detectType(detectType);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_harmful(harmful);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Hazard_Full> CreateHazard_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *detectType = nullptr,
    const char *detectTime = nullptr,
    bool harmful = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *alarms = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *alarmValues = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *readings = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *readingUnits = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *readingValues = nullptr,
    const char *matType = nullptr,
    const char *matClass = nullptr,
    const char *matName = nullptr,
    int32_t matCat = 0,
    const char *casRN = nullptr,
    int32_t ppm = 0,
    double density = 0.0,
    double radCtrn = 0.0,
    double gBar = 0.0,
    double hBar = 0.0,
    int32_t z = 0,
    int32_t a = 0,
    const char *bottleId = nullptr,
    const char *channel = nullptr,
    int32_t duration = 0,
    double activity = 0.0,
    double dep = 0.0,
    double depCtrn = 0.0,
    double massFrac = 0.0,
    double dose = 0.0,
    double ctrnTime = 0.0,
    double doseRate = 0.0,
    const char *idPOI = nullptr,
    const char *idTrack = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Hazard_Full_dataMode_Enum dataMode = Hazard_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto detectType__ = detectType ? _fbb.CreateString(detectType) : 0;
  auto detectTime__ = detectTime ? _fbb.CreateString(detectTime) : 0;
  auto alarms__ = alarms ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*alarms) : 0;
  auto alarmValues__ = alarmValues ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*alarmValues) : 0;
  auto readings__ = readings ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*readings) : 0;
  auto readingUnits__ = readingUnits ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*readingUnits) : 0;
  auto readingValues__ = readingValues ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*readingValues) : 0;
  auto matType__ = matType ? _fbb.CreateString(matType) : 0;
  auto matClass__ = matClass ? _fbb.CreateString(matClass) : 0;
  auto matName__ = matName ? _fbb.CreateString(matName) : 0;
  auto casRN__ = casRN ? _fbb.CreateString(casRN) : 0;
  auto bottleId__ = bottleId ? _fbb.CreateString(bottleId) : 0;
  auto channel__ = channel ? _fbb.CreateString(channel) : 0;
  auto idPOI__ = idPOI ? _fbb.CreateString(idPOI) : 0;
  auto idTrack__ = idTrack ? _fbb.CreateString(idTrack) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateHazard_Full(
      _fbb,
      id__,
      classificationMarking__,
      detectType__,
      detectTime__,
      harmful,
      alarms__,
      alarmValues__,
      readings__,
      readingUnits__,
      readingValues__,
      matType__,
      matClass__,
      matName__,
      matCat,
      casRN__,
      ppm,
      density,
      radCtrn,
      gBar,
      hBar,
      z,
      a,
      bottleId__,
      channel__,
      duration,
      activity,
      dep,
      depCtrn,
      massFrac,
      dose,
      ctrnTime,
      doseRate,
      idPOI__,
      idTrack__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const Hazard_Full *GetHazard_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Hazard_Full>(buf);
}

inline const Hazard_Full *GetSizePrefixedHazard_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Hazard_Full>(buf);
}

inline const char *Hazard_FullIdentifier() {
  return "HAZA";
}

inline bool Hazard_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Hazard_FullIdentifier());
}

inline bool SizePrefixedHazard_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Hazard_FullIdentifier(), true);
}

inline bool VerifyHazard_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Hazard_Full>(Hazard_FullIdentifier());
}

inline bool VerifySizePrefixedHazard_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Hazard_Full>(Hazard_FullIdentifier());
}

inline void FinishHazard_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hazard_Full> root) {
  fbb.Finish(root, Hazard_FullIdentifier());
}

inline void FinishSizePrefixedHazard_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Hazard_Full> root) {
  fbb.FinishSizePrefixed(root, Hazard_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
