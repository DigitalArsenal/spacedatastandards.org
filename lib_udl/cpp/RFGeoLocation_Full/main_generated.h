// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RFGeoLocation_Full;
struct RFGeoLocation_FullBuilder;

enum RFGeoLocation_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  RFGeoLocation_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  RFGeoLocation_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  RFGeoLocation_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  RFGeoLocation_Full_dataMode_Enum_EXERCISE = 3,
  RFGeoLocation_Full_dataMode_Enum_MIN = RFGeoLocation_Full_dataMode_Enum_REAL,
  RFGeoLocation_Full_dataMode_Enum_MAX = RFGeoLocation_Full_dataMode_Enum_EXERCISE
};

inline const RFGeoLocation_Full_dataMode_Enum (&EnumValuesRFGeoLocation_Full_dataMode_Enum())[4] {
  static const RFGeoLocation_Full_dataMode_Enum values[] = {
    RFGeoLocation_Full_dataMode_Enum_REAL,
    RFGeoLocation_Full_dataMode_Enum_TEST,
    RFGeoLocation_Full_dataMode_Enum_SIMULATED,
    RFGeoLocation_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesRFGeoLocation_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRFGeoLocation_Full_dataMode_Enum(RFGeoLocation_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, RFGeoLocation_Full_dataMode_Enum_REAL, RFGeoLocation_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRFGeoLocation_Full_dataMode_Enum()[index];
}

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
struct RFGeoLocation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RFGeoLocation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ORDERID = 8,
    VT_CREATEDTS = 10,
    VT_RECEIVEDTS = 12,
    VT_STARTTIME = 14,
    VT_ENDTIME = 16,
    VT_IDONORBIT = 18,
    VT_SATNO = 20,
    VT_ORIGOBJECTID = 22,
    VT_CONSTELLATION = 24,
    VT_SIGNALOFINTEREST = 26,
    VT_IDRFEMITTER = 28,
    VT_ORIGRFEMITTERID = 30,
    VT_NUMBURSTS = 32,
    VT_MINFREQ = 34,
    VT_MAXFREQ = 36,
    VT_CENTERFREQ = 38,
    VT_DETECTLAT = 40,
    VT_DETECTLON = 42,
    VT_DETECTALT = 44,
    VT_CONFSEMIMAJOR = 46,
    VT_CONFSEMIMINOR = 48,
    VT_CONFORIENTATION = 50,
    VT_CONFAREA = 52,
    VT_ATYPE = 54,
    VT_AGJSON = 56,
    VT_ATEXT = 58,
    VT_AREA = 60,
    VT_ANDIMS = 62,
    VT_ASRID = 64,
    VT_PASSGROUPID = 66,
    VT_ALGVERSION = 68,
    VT_EXTERNALID = 70,
    VT_TAGS = 72,
    VT_CREATEDAT = 74,
    VT_CREATEDBY = 76,
    VT_SOURCE = 78,
    VT_ORIGIN = 80,
    VT_ORIGNETWORK = 82,
    VT_SOURCEDL = 84,
    VT_DATAMODE = 86,
    VT_ONORBIT = 88
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The order identifier for this RF Geo Location data set.
  /// Example: /// Example: 155240
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *orderId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORDERID);
  }
  /// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T23:06:18.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDTS);
  }
  /// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:58.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *receivedTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVEDTS);
  }
  /// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:12:12.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:15.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
  /// Example: /// Example: HawkEye360-7
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// The name of the satellite constellation.
  /// Example: /// Example: HawkEye360
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *constellation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSTELLATION);
  }
  /// The name of the signal of interest.
  /// Example: /// Example: GPS
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *signalOfInterest() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SIGNALOFINTEREST);
  }
  /// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idRFEmitter() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRFEMITTER);
  }
  /// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
  /// Example: /// Example: ORIGRFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origRFEmitterId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGRFEMITTERID);
  }
  /// The count of single-burst observations used for this geolocation observation.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  int32_t numBursts() const {
    return GetField<int32_t>(VT_NUMBURSTS, 0);
  }
  /// The minimum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  double minFreq() const {
    return GetField<double>(VT_MINFREQ, 0.0);
  }
  /// The maximum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  double maxFreq() const {
    return GetField<double>(VT_MAXFREQ, 0.0);
  }
  /// The detected signal frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  double centerFreq() const {
    return GetField<double>(VT_CENTERFREQ, 0.0);
  }
  /// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 41.172
  /// Constraints: No constraints specified.
  double detectLat() const {
    return GetField<double>(VT_DETECTLAT, 0.0);
  }
  /// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 37.019
  /// Constraints: No constraints specified.
  double detectLon() const {
    return GetField<double>(VT_DETECTLON, 0.0);
  }
  /// The altitude relative to WGS-84 ellipsoid, in meters.
  /// Example: /// Example: 123.456
  /// Constraints: No constraints specified.
  double detectAlt() const {
    return GetField<double>(VT_DETECTALT, 0.0);
  }
  /// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 9435.896
  /// Constraints: No constraints specified.
  double confSemiMajor() const {
    return GetField<double>(VT_CONFSEMIMAJOR, 0.0);
  }
  /// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 2751.929
  /// Constraints: No constraints specified.
  double confSemiMinor() const {
    return GetField<double>(VT_CONFSEMIMINOR, 0.0);
  }
  /// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
  /// Example: /// Example: 89.852
  /// Constraints: No constraints specified.
  double confOrientation() const {
    return GetField<double>(VT_CONFORIENTATION, 0.0);
  }
  /// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
  /// Example: /// Example: 81577480.056
  /// Constraints: No constraints specified.
  double confArea() const {
    return GetField<double>(VT_CONFAREA, 0.0);
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: MultiPolygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *atype() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATYPE);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *agjson() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AGJSON);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *atext() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATEXT);
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *area() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREA);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t andims() const {
    return GetField<int32_t>(VT_ANDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t asrid() const {
    return GetField<int32_t>(VT_ASRID, 0);
  }
  /// Optional external identifier referencing the entity used in the calculation of the geolocation.
  /// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *passGroupId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PASSGROUPID);
  }
  /// The RFGeo algorithm type and version used in geolocation calculations.
  /// Example: /// Example: v1.0-3-gps_nb_3ball
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *algVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALGVERSION);
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 780180925
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  RFGeoLocation_Full_dataMode_Enum dataMode() const {
    return static_cast<RFGeoLocation_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ORDERID) &&
           verifier.VerifyString(orderId()) &&
           VerifyOffset(verifier, VT_CREATEDTS) &&
           verifier.VerifyString(createdTs()) &&
           VerifyOffset(verifier, VT_RECEIVEDTS) &&
           verifier.VerifyString(receivedTs()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_CONSTELLATION) &&
           verifier.VerifyString(constellation()) &&
           VerifyOffset(verifier, VT_SIGNALOFINTEREST) &&
           verifier.VerifyString(signalOfInterest()) &&
           VerifyOffset(verifier, VT_IDRFEMITTER) &&
           verifier.VerifyString(idRFEmitter()) &&
           VerifyOffset(verifier, VT_ORIGRFEMITTERID) &&
           verifier.VerifyString(origRFEmitterId()) &&
           VerifyField<int32_t>(verifier, VT_NUMBURSTS, 4) &&
           VerifyField<double>(verifier, VT_MINFREQ, 8) &&
           VerifyField<double>(verifier, VT_MAXFREQ, 8) &&
           VerifyField<double>(verifier, VT_CENTERFREQ, 8) &&
           VerifyField<double>(verifier, VT_DETECTLAT, 8) &&
           VerifyField<double>(verifier, VT_DETECTLON, 8) &&
           VerifyField<double>(verifier, VT_DETECTALT, 8) &&
           VerifyField<double>(verifier, VT_CONFSEMIMAJOR, 8) &&
           VerifyField<double>(verifier, VT_CONFSEMIMINOR, 8) &&
           VerifyField<double>(verifier, VT_CONFORIENTATION, 8) &&
           VerifyField<double>(verifier, VT_CONFAREA, 8) &&
           VerifyOffset(verifier, VT_ATYPE) &&
           verifier.VerifyString(atype()) &&
           VerifyOffset(verifier, VT_AGJSON) &&
           verifier.VerifyString(agjson()) &&
           VerifyOffset(verifier, VT_ATEXT) &&
           verifier.VerifyString(atext()) &&
           VerifyOffset(verifier, VT_AREA) &&
           verifier.VerifyString(area()) &&
           VerifyField<int32_t>(verifier, VT_ANDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_ASRID, 4) &&
           VerifyOffset(verifier, VT_PASSGROUPID) &&
           verifier.VerifyString(passGroupId()) &&
           VerifyOffset(verifier, VT_ALGVERSION) &&
           verifier.VerifyString(algVersion()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           verifier.EndTable();
  }
};

struct RFGeoLocation_FullBuilder {
  typedef RFGeoLocation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_orderId(::flatbuffers::Offset<::flatbuffers::String> orderId) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ORDERID, orderId);
  }
  void add_createdTs(::flatbuffers::Offset<::flatbuffers::String> createdTs) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_CREATEDTS, createdTs);
  }
  void add_receivedTs(::flatbuffers::Offset<::flatbuffers::String> receivedTs) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_RECEIVEDTS, receivedTs);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ENDTIME, endTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(RFGeoLocation_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_constellation(::flatbuffers::Offset<::flatbuffers::String> constellation) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_CONSTELLATION, constellation);
  }
  void add_signalOfInterest(::flatbuffers::Offset<::flatbuffers::String> signalOfInterest) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_SIGNALOFINTEREST, signalOfInterest);
  }
  void add_idRFEmitter(::flatbuffers::Offset<::flatbuffers::String> idRFEmitter) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  void add_origRFEmitterId(::flatbuffers::Offset<::flatbuffers::String> origRFEmitterId) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ORIGRFEMITTERID, origRFEmitterId);
  }
  void add_numBursts(int32_t numBursts) {
    fbb_.AddElement<int32_t>(RFGeoLocation_Full::VT_NUMBURSTS, numBursts, 0);
  }
  void add_minFreq(double minFreq) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_MINFREQ, minFreq, 0.0);
  }
  void add_maxFreq(double maxFreq) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_MAXFREQ, maxFreq, 0.0);
  }
  void add_centerFreq(double centerFreq) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_CENTERFREQ, centerFreq, 0.0);
  }
  void add_detectLat(double detectLat) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_DETECTLAT, detectLat, 0.0);
  }
  void add_detectLon(double detectLon) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_DETECTLON, detectLon, 0.0);
  }
  void add_detectAlt(double detectAlt) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_DETECTALT, detectAlt, 0.0);
  }
  void add_confSemiMajor(double confSemiMajor) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_CONFSEMIMAJOR, confSemiMajor, 0.0);
  }
  void add_confSemiMinor(double confSemiMinor) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_CONFSEMIMINOR, confSemiMinor, 0.0);
  }
  void add_confOrientation(double confOrientation) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_CONFORIENTATION, confOrientation, 0.0);
  }
  void add_confArea(double confArea) {
    fbb_.AddElement<double>(RFGeoLocation_Full::VT_CONFAREA, confArea, 0.0);
  }
  void add_atype(::flatbuffers::Offset<::flatbuffers::String> atype) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ATYPE, atype);
  }
  void add_agjson(::flatbuffers::Offset<::flatbuffers::String> agjson) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_AGJSON, agjson);
  }
  void add_atext(::flatbuffers::Offset<::flatbuffers::String> atext) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ATEXT, atext);
  }
  void add_area(::flatbuffers::Offset<::flatbuffers::String> area) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_AREA, area);
  }
  void add_andims(int32_t andims) {
    fbb_.AddElement<int32_t>(RFGeoLocation_Full::VT_ANDIMS, andims, 0);
  }
  void add_asrid(int32_t asrid) {
    fbb_.AddElement<int32_t>(RFGeoLocation_Full::VT_ASRID, asrid, 0);
  }
  void add_passGroupId(::flatbuffers::Offset<::flatbuffers::String> passGroupId) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_PASSGROUPID, passGroupId);
  }
  void add_algVersion(::flatbuffers::Offset<::flatbuffers::String> algVersion) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ALGVERSION, algVersion);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_EXTERNALID, externalId);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_SOURCEDL, sourceDL);
  }
  void add_dataMode(RFGeoLocation_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(RFGeoLocation_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(RFGeoLocation_Full::VT_ONORBIT, onOrbit);
  }
  explicit RFGeoLocation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RFGeoLocation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RFGeoLocation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RFGeoLocation_Full> CreateRFGeoLocation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> orderId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receivedTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> constellation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> signalOfInterest = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idRFEmitter = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origRFEmitterId = 0,
    int32_t numBursts = 0,
    double minFreq = 0.0,
    double maxFreq = 0.0,
    double centerFreq = 0.0,
    double detectLat = 0.0,
    double detectLon = 0.0,
    double detectAlt = 0.0,
    double confSemiMajor = 0.0,
    double confSemiMinor = 0.0,
    double confOrientation = 0.0,
    double confArea = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> atype = 0,
    ::flatbuffers::Offset<::flatbuffers::String> agjson = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atext = 0,
    ::flatbuffers::Offset<::flatbuffers::String> area = 0,
    int32_t andims = 0,
    int32_t asrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> passGroupId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> algVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    RFGeoLocation_Full_dataMode_Enum dataMode = RFGeoLocation_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0) {
  RFGeoLocation_FullBuilder builder_(_fbb);
  builder_.add_confArea(confArea);
  builder_.add_confOrientation(confOrientation);
  builder_.add_confSemiMinor(confSemiMinor);
  builder_.add_confSemiMajor(confSemiMajor);
  builder_.add_detectAlt(detectAlt);
  builder_.add_detectLon(detectLon);
  builder_.add_detectLat(detectLat);
  builder_.add_centerFreq(centerFreq);
  builder_.add_maxFreq(maxFreq);
  builder_.add_minFreq(minFreq);
  builder_.add_onOrbit(onOrbit);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_externalId(externalId);
  builder_.add_algVersion(algVersion);
  builder_.add_passGroupId(passGroupId);
  builder_.add_asrid(asrid);
  builder_.add_andims(andims);
  builder_.add_area(area);
  builder_.add_atext(atext);
  builder_.add_agjson(agjson);
  builder_.add_atype(atype);
  builder_.add_numBursts(numBursts);
  builder_.add_origRFEmitterId(origRFEmitterId);
  builder_.add_idRFEmitter(idRFEmitter);
  builder_.add_signalOfInterest(signalOfInterest);
  builder_.add_constellation(constellation);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_receivedTs(receivedTs);
  builder_.add_createdTs(createdTs);
  builder_.add_orderId(orderId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RFGeoLocation_Full> CreateRFGeoLocation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *orderId = nullptr,
    const char *createdTs = nullptr,
    const char *receivedTs = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *constellation = nullptr,
    const char *signalOfInterest = nullptr,
    const char *idRFEmitter = nullptr,
    const char *origRFEmitterId = nullptr,
    int32_t numBursts = 0,
    double minFreq = 0.0,
    double maxFreq = 0.0,
    double centerFreq = 0.0,
    double detectLat = 0.0,
    double detectLon = 0.0,
    double detectAlt = 0.0,
    double confSemiMajor = 0.0,
    double confSemiMinor = 0.0,
    double confOrientation = 0.0,
    double confArea = 0.0,
    const char *atype = nullptr,
    const char *agjson = nullptr,
    const char *atext = nullptr,
    const char *area = nullptr,
    int32_t andims = 0,
    int32_t asrid = 0,
    const char *passGroupId = nullptr,
    const char *algVersion = nullptr,
    const char *externalId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    RFGeoLocation_Full_dataMode_Enum dataMode = RFGeoLocation_Full_dataMode_Enum_REAL,
    const char *onOrbit = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto orderId__ = orderId ? _fbb.CreateString(orderId) : 0;
  auto createdTs__ = createdTs ? _fbb.CreateString(createdTs) : 0;
  auto receivedTs__ = receivedTs ? _fbb.CreateString(receivedTs) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto constellation__ = constellation ? _fbb.CreateString(constellation) : 0;
  auto signalOfInterest__ = signalOfInterest ? _fbb.CreateString(signalOfInterest) : 0;
  auto idRFEmitter__ = idRFEmitter ? _fbb.CreateString(idRFEmitter) : 0;
  auto origRFEmitterId__ = origRFEmitterId ? _fbb.CreateString(origRFEmitterId) : 0;
  auto atype__ = atype ? _fbb.CreateString(atype) : 0;
  auto agjson__ = agjson ? _fbb.CreateString(agjson) : 0;
  auto atext__ = atext ? _fbb.CreateString(atext) : 0;
  auto area__ = area ? _fbb.CreateString(area) : 0;
  auto passGroupId__ = passGroupId ? _fbb.CreateString(passGroupId) : 0;
  auto algVersion__ = algVersion ? _fbb.CreateString(algVersion) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  return CreateRFGeoLocation_Full(
      _fbb,
      id__,
      classificationMarking__,
      orderId__,
      createdTs__,
      receivedTs__,
      startTime__,
      endTime__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      constellation__,
      signalOfInterest__,
      idRFEmitter__,
      origRFEmitterId__,
      numBursts,
      minFreq,
      maxFreq,
      centerFreq,
      detectLat,
      detectLon,
      detectAlt,
      confSemiMajor,
      confSemiMinor,
      confOrientation,
      confArea,
      atype__,
      agjson__,
      atext__,
      area__,
      andims,
      asrid,
      passGroupId__,
      algVersion__,
      externalId__,
      tags__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      sourceDL__,
      dataMode,
      onOrbit__);
}

inline const RFGeoLocation_Full *GetRFGeoLocation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<RFGeoLocation_Full>(buf);
}

inline const RFGeoLocation_Full *GetSizePrefixedRFGeoLocation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RFGeoLocation_Full>(buf);
}

inline const char *RFGeoLocation_FullIdentifier() {
  return "RFGE";
}

inline bool RFGeoLocation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFGeoLocation_FullIdentifier());
}

inline bool SizePrefixedRFGeoLocation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFGeoLocation_FullIdentifier(), true);
}

inline bool VerifyRFGeoLocation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RFGeoLocation_Full>(RFGeoLocation_FullIdentifier());
}

inline bool VerifySizePrefixedRFGeoLocation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RFGeoLocation_Full>(RFGeoLocation_FullIdentifier());
}

inline void FinishRFGeoLocation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFGeoLocation_Full> root) {
  fbb.Finish(root, RFGeoLocation_FullIdentifier());
}

inline void FinishSizePrefixedRFGeoLocation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFGeoLocation_Full> root) {
  fbb.FinishSizePrefixed(root, RFGeoLocation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
