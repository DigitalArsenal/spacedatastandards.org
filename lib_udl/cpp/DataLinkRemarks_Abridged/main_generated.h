// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkRemarks_Abridged;
struct DataLinkRemarks_AbridgedBuilder;

/// /// Collection of remarks associated with this data link message.
struct DataLinkRemarks_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkRemarks_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TEXT = 6
  };
  /// Indicates the subject matter of the remark.
  /// Example: /// Example: CONTINGENCY PROCEDURES
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Text of the remark.
  /// Example: /// Example: Example data link remarks
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct DataLinkRemarks_AbridgedBuilder {
  typedef DataLinkRemarks_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(DataLinkRemarks_Abridged::VT_TYPE, type);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(DataLinkRemarks_Abridged::VT_TEXT, text);
  }
  explicit DataLinkRemarks_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkRemarks_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkRemarks_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkRemarks_Abridged> CreateDataLinkRemarks_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  DataLinkRemarks_AbridgedBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkRemarks_Abridged> CreateDataLinkRemarks_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *text = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return CreateDataLinkRemarks_Abridged(
      _fbb,
      type__,
      text__);
}

inline const DataLinkRemarks_Abridged *GetDataLinkRemarks_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkRemarks_Abridged>(buf);
}

inline const DataLinkRemarks_Abridged *GetSizePrefixedDataLinkRemarks_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkRemarks_Abridged>(buf);
}

inline const char *DataLinkRemarks_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLinkRemarks_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkRemarks_AbridgedIdentifier());
}

inline bool SizePrefixedDataLinkRemarks_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkRemarks_AbridgedIdentifier(), true);
}

inline bool VerifyDataLinkRemarks_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkRemarks_Abridged>(DataLinkRemarks_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLinkRemarks_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkRemarks_Abridged>(DataLinkRemarks_AbridgedIdentifier());
}

inline void FinishDataLinkRemarks_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkRemarks_Abridged> root) {
  fbb.Finish(root, DataLinkRemarks_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLinkRemarks_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkRemarks_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLinkRemarks_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
