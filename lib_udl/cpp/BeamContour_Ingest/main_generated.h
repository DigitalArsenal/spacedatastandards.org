// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct BeamContour_Ingest;
struct BeamContour_IngestBuilder;

enum BeamContour_Ingest_type_Enum : int8_t {
  /// No description available.
  BeamContour_Ingest_type_Enum_BORESIGHT = 0,
  /// No description available.
  BeamContour_Ingest_type_Enum_CONTOUR = 1,
  /// No description available.
  BeamContour_Ingest_type_Enum_SVC_AREA = 2,
  BeamContour_Ingest_type_Enum_MIN = BeamContour_Ingest_type_Enum_BORESIGHT,
  BeamContour_Ingest_type_Enum_MAX = BeamContour_Ingest_type_Enum_SVC_AREA
};

inline const BeamContour_Ingest_type_Enum (&EnumValuesBeamContour_Ingest_type_Enum())[3] {
  static const BeamContour_Ingest_type_Enum values[] = {
    BeamContour_Ingest_type_Enum_BORESIGHT,
    BeamContour_Ingest_type_Enum_CONTOUR,
    BeamContour_Ingest_type_Enum_SVC_AREA
  };
  return values;
}

inline const char * const *EnumNamesBeamContour_Ingest_type_Enum() {
  static const char * const names[4] = {
    "BORESIGHT",
    "CONTOUR",
    "SVC_AREA",
    nullptr
  };
  return names;
}

inline const char *EnumNameBeamContour_Ingest_type_Enum(BeamContour_Ingest_type_Enum e) {
  if (::flatbuffers::IsOutRange(e, BeamContour_Ingest_type_Enum_BORESIGHT, BeamContour_Ingest_type_Enum_SVC_AREA)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBeamContour_Ingest_type_Enum()[index];
}

enum BeamContour_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  BeamContour_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  BeamContour_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  BeamContour_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  BeamContour_Ingest_dataMode_Enum_EXERCISE = 3,
  BeamContour_Ingest_dataMode_Enum_MIN = BeamContour_Ingest_dataMode_Enum_REAL,
  BeamContour_Ingest_dataMode_Enum_MAX = BeamContour_Ingest_dataMode_Enum_EXERCISE
};

inline const BeamContour_Ingest_dataMode_Enum (&EnumValuesBeamContour_Ingest_dataMode_Enum())[4] {
  static const BeamContour_Ingest_dataMode_Enum values[] = {
    BeamContour_Ingest_dataMode_Enum_REAL,
    BeamContour_Ingest_dataMode_Enum_TEST,
    BeamContour_Ingest_dataMode_Enum_SIMULATED,
    BeamContour_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesBeamContour_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameBeamContour_Ingest_dataMode_Enum(BeamContour_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, BeamContour_Ingest_dataMode_Enum_REAL, BeamContour_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBeamContour_Ingest_dataMode_Enum()[index];
}

/// /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
struct BeamContour_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BeamContour_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDBEAM = 8,
    VT_TYPE = 10,
    VT_CONTOURIDX = 12,
    VT_GAIN = 14,
    VT_REGIONNAME = 16,
    VT_GEOGRAPHY = 18,
    VT_GEOGRAPHYTEXT = 20,
    VT_GEOGRAPHYJSON = 22,
    VT_GEOGRAPHYTYPE = 24,
    VT_GEOGRAPHYNDIMS = 26,
    VT_GEOGRAPHYSRID = 28,
    VT_CREATEDAT = 30,
    VT_CREATEDBY = 32,
    VT_SOURCE = 34,
    VT_ORIGIN = 36,
    VT_ORIGNETWORK = 38,
    VT_DATAMODE = 40
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BEAMCONTOUR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// ID of the beam.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idBeam() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDBEAM);
  }
  /// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
  /// Example: /// Example: BORESIGHT
  /// Constraints: Minimum length = 1, Maximum length = 16
  BeamContour_Ingest_type_Enum type() const {
    return static_cast<BeamContour_Ingest_type_Enum>(GetField<int8_t>(VT_TYPE, 0));
  }
  /// The index number of this contour. The value is required if type = CONTOUR.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  int32_t contourIdx() const {
    return GetField<int32_t>(VT_CONTOURIDX, 0);
  }
  /// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  double gain() const {
    return GetField<double>(VT_GAIN, 0.0);
  }
  /// The region name within the service area.
  /// Example: /// Example: Example region name
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *regionName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGIONNAME);
  }
  /// GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
  /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *geography() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOGRAPHY);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *geographyText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOGRAPHYTEXT);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *geographyJson() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOGRAPHYJSON);
  }
  /// Type of region as projected.
  /// Example: /// Example: ST_Polygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *geographyType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOGRAPHYTYPE);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  int32_t geographyNdims() const {
    return GetField<int32_t>(VT_GEOGRAPHYNDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  int32_t geographySrid() const {
    return GetField<int32_t>(VT_GEOGRAPHYSRID, 0);
  }
  /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  BeamContour_Ingest_dataMode_Enum dataMode() const {
    return static_cast<BeamContour_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDBEAM) &&
           verifier.VerifyString(idBeam()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_CONTOURIDX, 4) &&
           VerifyField<double>(verifier, VT_GAIN, 8) &&
           VerifyOffset(verifier, VT_REGIONNAME) &&
           verifier.VerifyString(regionName()) &&
           VerifyOffset(verifier, VT_GEOGRAPHY) &&
           verifier.VerifyString(geography()) &&
           VerifyOffset(verifier, VT_GEOGRAPHYTEXT) &&
           verifier.VerifyString(geographyText()) &&
           VerifyOffset(verifier, VT_GEOGRAPHYJSON) &&
           verifier.VerifyString(geographyJson()) &&
           VerifyOffset(verifier, VT_GEOGRAPHYTYPE) &&
           verifier.VerifyString(geographyType()) &&
           VerifyField<int32_t>(verifier, VT_GEOGRAPHYNDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_GEOGRAPHYSRID, 4) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct BeamContour_IngestBuilder {
  typedef BeamContour_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(BeamContour_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(BeamContour_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idBeam(::flatbuffers::Offset<::flatbuffers::String> idBeam) {
    fbb_.AddOffset(BeamContour_Ingest::VT_IDBEAM, idBeam);
  }
  void add_type(BeamContour_Ingest_type_Enum type) {
    fbb_.AddElement<int8_t>(BeamContour_Ingest::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_contourIdx(int32_t contourIdx) {
    fbb_.AddElement<int32_t>(BeamContour_Ingest::VT_CONTOURIDX, contourIdx, 0);
  }
  void add_gain(double gain) {
    fbb_.AddElement<double>(BeamContour_Ingest::VT_GAIN, gain, 0.0);
  }
  void add_regionName(::flatbuffers::Offset<::flatbuffers::String> regionName) {
    fbb_.AddOffset(BeamContour_Ingest::VT_REGIONNAME, regionName);
  }
  void add_geography(::flatbuffers::Offset<::flatbuffers::String> geography) {
    fbb_.AddOffset(BeamContour_Ingest::VT_GEOGRAPHY, geography);
  }
  void add_geographyText(::flatbuffers::Offset<::flatbuffers::String> geographyText) {
    fbb_.AddOffset(BeamContour_Ingest::VT_GEOGRAPHYTEXT, geographyText);
  }
  void add_geographyJson(::flatbuffers::Offset<::flatbuffers::String> geographyJson) {
    fbb_.AddOffset(BeamContour_Ingest::VT_GEOGRAPHYJSON, geographyJson);
  }
  void add_geographyType(::flatbuffers::Offset<::flatbuffers::String> geographyType) {
    fbb_.AddOffset(BeamContour_Ingest::VT_GEOGRAPHYTYPE, geographyType);
  }
  void add_geographyNdims(int32_t geographyNdims) {
    fbb_.AddElement<int32_t>(BeamContour_Ingest::VT_GEOGRAPHYNDIMS, geographyNdims, 0);
  }
  void add_geographySrid(int32_t geographySrid) {
    fbb_.AddElement<int32_t>(BeamContour_Ingest::VT_GEOGRAPHYSRID, geographySrid, 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(BeamContour_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(BeamContour_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(BeamContour_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(BeamContour_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(BeamContour_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(BeamContour_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(BeamContour_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit BeamContour_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BeamContour_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BeamContour_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BeamContour_Ingest> CreateBeamContour_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idBeam = 0,
    BeamContour_Ingest_type_Enum type = BeamContour_Ingest_type_Enum_BORESIGHT,
    int32_t contourIdx = 0,
    double gain = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> regionName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geography = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geographyText = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geographyJson = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geographyType = 0,
    int32_t geographyNdims = 0,
    int32_t geographySrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    BeamContour_Ingest_dataMode_Enum dataMode = BeamContour_Ingest_dataMode_Enum_REAL) {
  BeamContour_IngestBuilder builder_(_fbb);
  builder_.add_gain(gain);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_geographySrid(geographySrid);
  builder_.add_geographyNdims(geographyNdims);
  builder_.add_geographyType(geographyType);
  builder_.add_geographyJson(geographyJson);
  builder_.add_geographyText(geographyText);
  builder_.add_geography(geography);
  builder_.add_regionName(regionName);
  builder_.add_contourIdx(contourIdx);
  builder_.add_idBeam(idBeam);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BeamContour_Ingest> CreateBeamContour_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idBeam = nullptr,
    BeamContour_Ingest_type_Enum type = BeamContour_Ingest_type_Enum_BORESIGHT,
    int32_t contourIdx = 0,
    double gain = 0.0,
    const char *regionName = nullptr,
    const char *geography = nullptr,
    const char *geographyText = nullptr,
    const char *geographyJson = nullptr,
    const char *geographyType = nullptr,
    int32_t geographyNdims = 0,
    int32_t geographySrid = 0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    BeamContour_Ingest_dataMode_Enum dataMode = BeamContour_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idBeam__ = idBeam ? _fbb.CreateString(idBeam) : 0;
  auto regionName__ = regionName ? _fbb.CreateString(regionName) : 0;
  auto geography__ = geography ? _fbb.CreateString(geography) : 0;
  auto geographyText__ = geographyText ? _fbb.CreateString(geographyText) : 0;
  auto geographyJson__ = geographyJson ? _fbb.CreateString(geographyJson) : 0;
  auto geographyType__ = geographyType ? _fbb.CreateString(geographyType) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateBeamContour_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idBeam__,
      type,
      contourIdx,
      gain,
      regionName__,
      geography__,
      geographyText__,
      geographyJson__,
      geographyType__,
      geographyNdims,
      geographySrid,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const BeamContour_Ingest *GetBeamContour_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<BeamContour_Ingest>(buf);
}

inline const BeamContour_Ingest *GetSizePrefixedBeamContour_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BeamContour_Ingest>(buf);
}

inline const char *BeamContour_IngestIdentifier() {
  return "BEAM";
}

inline bool BeamContour_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BeamContour_IngestIdentifier());
}

inline bool SizePrefixedBeamContour_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, BeamContour_IngestIdentifier(), true);
}

inline bool VerifyBeamContour_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BeamContour_Ingest>(BeamContour_IngestIdentifier());
}

inline bool VerifySizePrefixedBeamContour_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BeamContour_Ingest>(BeamContour_IngestIdentifier());
}

inline void FinishBeamContour_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BeamContour_Ingest> root) {
  fbb.Finish(root, BeamContour_IngestIdentifier());
}

inline void FinishSizePrefixedBeamContour_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BeamContour_Ingest> root) {
  fbb.FinishSizePrefixed(root, BeamContour_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
