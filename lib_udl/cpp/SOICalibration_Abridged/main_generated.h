// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SOICalibration_Abridged;
struct SOICalibration_AbridgedBuilder;

/// /// Schema for SOI Calibration data.
struct SOICalibration_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SOICalibration_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CALEXTINCTIONCOEFF = 4,
    VT_CALSKYBG = 6,
    VT_CALBGINTENSITY = 8,
    VT_CALSPECTRALFILTERSOLARMAG = 10,
    VT_CALZEROPOINT = 12,
    VT_CALNUMDETECTEDSTARS = 14,
    VT_CALNUMCORRELATEDSTARS = 16,
    VT_CALEXTINCTIONCOEFFUNC = 18,
    VT_CALEXTINCTIONCOEFFMAXUNC = 20,
    VT_CALTIME = 22,
    VT_CALTYPE = 24
  };
  /// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  double calExtinctionCoeff() const {
    return GetField<double>(VT_CALEXTINCTIONCOEFF, 0.0);
  }
  /// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: 30086.25
  /// Constraints: No constraints specified.
  double calSkyBg() const {
    return GetField<double>(VT_CALSKYBG, 0.0);
  }
  /// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double calBgIntensity() const {
    return GetField<double>(VT_CALBGINTENSITY, 0.0);
  }
  /// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 19.23664587
  /// Constraints: No constraints specified.
  double calSpectralFilterSolarMag() const {
    return GetField<double>(VT_CALSPECTRALFILTERSOLARMAG, 0.0);
  }
  /// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 25.15682157
  /// Constraints: No constraints specified.
  double calZeroPoint() const {
    return GetField<double>(VT_CALZEROPOINT, 0.0);
  }
  /// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t calNumDetectedStars() const {
    return GetField<int32_t>(VT_CALNUMDETECTEDSTARS, 0);
  }
  /// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t calNumCorrelatedStars() const {
    return GetField<int32_t>(VT_CALNUMCORRELATEDSTARS, 0);
  }
  /// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.06474939
  /// Constraints: No constraints specified.
  double calExtinctionCoeffUnc() const {
    return GetField<double>(VT_CALEXTINCTIONCOEFFUNC, 0.0);
  }
  /// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.19708838
  /// Constraints: No constraints specified.
  double calExtinctionCoeffMaxUnc() const {
    return GetField<double>(VT_CALEXTINCTIONCOEFFMAXUNC, 0.0);
  }
  /// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
  /// Example: /// Example: 2023-01-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *calTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALTIME);
  }
  /// Type of calibration (e.g. PRE, MID, POST).
  /// Example: /// Example: PRE
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *calType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALTYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_CALEXTINCTIONCOEFF, 8) &&
           VerifyField<double>(verifier, VT_CALSKYBG, 8) &&
           VerifyField<double>(verifier, VT_CALBGINTENSITY, 8) &&
           VerifyField<double>(verifier, VT_CALSPECTRALFILTERSOLARMAG, 8) &&
           VerifyField<double>(verifier, VT_CALZEROPOINT, 8) &&
           VerifyField<int32_t>(verifier, VT_CALNUMDETECTEDSTARS, 4) &&
           VerifyField<int32_t>(verifier, VT_CALNUMCORRELATEDSTARS, 4) &&
           VerifyField<double>(verifier, VT_CALEXTINCTIONCOEFFUNC, 8) &&
           VerifyField<double>(verifier, VT_CALEXTINCTIONCOEFFMAXUNC, 8) &&
           VerifyOffset(verifier, VT_CALTIME) &&
           verifier.VerifyString(calTime()) &&
           VerifyOffset(verifier, VT_CALTYPE) &&
           verifier.VerifyString(calType()) &&
           verifier.EndTable();
  }
};

struct SOICalibration_AbridgedBuilder {
  typedef SOICalibration_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_calExtinctionCoeff(double calExtinctionCoeff) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALEXTINCTIONCOEFF, calExtinctionCoeff, 0.0);
  }
  void add_calSkyBg(double calSkyBg) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALSKYBG, calSkyBg, 0.0);
  }
  void add_calBgIntensity(double calBgIntensity) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALBGINTENSITY, calBgIntensity, 0.0);
  }
  void add_calSpectralFilterSolarMag(double calSpectralFilterSolarMag) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALSPECTRALFILTERSOLARMAG, calSpectralFilterSolarMag, 0.0);
  }
  void add_calZeroPoint(double calZeroPoint) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALZEROPOINT, calZeroPoint, 0.0);
  }
  void add_calNumDetectedStars(int32_t calNumDetectedStars) {
    fbb_.AddElement<int32_t>(SOICalibration_Abridged::VT_CALNUMDETECTEDSTARS, calNumDetectedStars, 0);
  }
  void add_calNumCorrelatedStars(int32_t calNumCorrelatedStars) {
    fbb_.AddElement<int32_t>(SOICalibration_Abridged::VT_CALNUMCORRELATEDSTARS, calNumCorrelatedStars, 0);
  }
  void add_calExtinctionCoeffUnc(double calExtinctionCoeffUnc) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALEXTINCTIONCOEFFUNC, calExtinctionCoeffUnc, 0.0);
  }
  void add_calExtinctionCoeffMaxUnc(double calExtinctionCoeffMaxUnc) {
    fbb_.AddElement<double>(SOICalibration_Abridged::VT_CALEXTINCTIONCOEFFMAXUNC, calExtinctionCoeffMaxUnc, 0.0);
  }
  void add_calTime(::flatbuffers::Offset<::flatbuffers::String> calTime) {
    fbb_.AddOffset(SOICalibration_Abridged::VT_CALTIME, calTime);
  }
  void add_calType(::flatbuffers::Offset<::flatbuffers::String> calType) {
    fbb_.AddOffset(SOICalibration_Abridged::VT_CALTYPE, calType);
  }
  explicit SOICalibration_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SOICalibration_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SOICalibration_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SOICalibration_Abridged> CreateSOICalibration_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double calExtinctionCoeff = 0.0,
    double calSkyBg = 0.0,
    double calBgIntensity = 0.0,
    double calSpectralFilterSolarMag = 0.0,
    double calZeroPoint = 0.0,
    int32_t calNumDetectedStars = 0,
    int32_t calNumCorrelatedStars = 0,
    double calExtinctionCoeffUnc = 0.0,
    double calExtinctionCoeffMaxUnc = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> calTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> calType = 0) {
  SOICalibration_AbridgedBuilder builder_(_fbb);
  builder_.add_calExtinctionCoeffMaxUnc(calExtinctionCoeffMaxUnc);
  builder_.add_calExtinctionCoeffUnc(calExtinctionCoeffUnc);
  builder_.add_calZeroPoint(calZeroPoint);
  builder_.add_calSpectralFilterSolarMag(calSpectralFilterSolarMag);
  builder_.add_calBgIntensity(calBgIntensity);
  builder_.add_calSkyBg(calSkyBg);
  builder_.add_calExtinctionCoeff(calExtinctionCoeff);
  builder_.add_calType(calType);
  builder_.add_calTime(calTime);
  builder_.add_calNumCorrelatedStars(calNumCorrelatedStars);
  builder_.add_calNumDetectedStars(calNumDetectedStars);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SOICalibration_Abridged> CreateSOICalibration_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double calExtinctionCoeff = 0.0,
    double calSkyBg = 0.0,
    double calBgIntensity = 0.0,
    double calSpectralFilterSolarMag = 0.0,
    double calZeroPoint = 0.0,
    int32_t calNumDetectedStars = 0,
    int32_t calNumCorrelatedStars = 0,
    double calExtinctionCoeffUnc = 0.0,
    double calExtinctionCoeffMaxUnc = 0.0,
    const char *calTime = nullptr,
    const char *calType = nullptr) {
  auto calTime__ = calTime ? _fbb.CreateString(calTime) : 0;
  auto calType__ = calType ? _fbb.CreateString(calType) : 0;
  return CreateSOICalibration_Abridged(
      _fbb,
      calExtinctionCoeff,
      calSkyBg,
      calBgIntensity,
      calSpectralFilterSolarMag,
      calZeroPoint,
      calNumDetectedStars,
      calNumCorrelatedStars,
      calExtinctionCoeffUnc,
      calExtinctionCoeffMaxUnc,
      calTime__,
      calType__);
}

inline const SOICalibration_Abridged *GetSOICalibration_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SOICalibration_Abridged>(buf);
}

inline const SOICalibration_Abridged *GetSizePrefixedSOICalibration_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SOICalibration_Abridged>(buf);
}

inline const char *SOICalibration_AbridgedIdentifier() {
  return "SOIC";
}

inline bool SOICalibration_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SOICalibration_AbridgedIdentifier());
}

inline bool SizePrefixedSOICalibration_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SOICalibration_AbridgedIdentifier(), true);
}

inline bool VerifySOICalibration_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SOICalibration_Abridged>(SOICalibration_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSOICalibration_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SOICalibration_Abridged>(SOICalibration_AbridgedIdentifier());
}

inline void FinishSOICalibration_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SOICalibration_Abridged> root) {
  fbb.Finish(root, SOICalibration_AbridgedIdentifier());
}

inline void FinishSizePrefixedSOICalibration_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SOICalibration_Abridged> root) {
  fbb.FinishSizePrefixed(root, SOICalibration_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
