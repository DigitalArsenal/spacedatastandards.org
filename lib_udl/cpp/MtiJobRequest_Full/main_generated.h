// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiJobRequest_Full;
struct MtiJobRequest_FullBuilder;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
struct MtiJobRequest_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiJobRequest_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_R1 = 4,
    VT_R2 = 6,
    VT_R3 = 8,
    VT_R4 = 10,
    VT_R5 = 12,
    VT_R6 = 14,
    VT_R7 = 16,
    VT_R8 = 18,
    VT_R9 = 20,
    VT_R10 = 22,
    VT_R11 = 24,
    VT_R12 = 26,
    VT_R13 = 28,
    VT_R14 = 30,
    VT_JOBREQEST = 32,
    VT_R21 = 34,
    VT_R22 = 36,
    VT_R23 = 38,
    VT_R24 = 40,
    VT_R25 = 42,
    VT_R26 = 44
  };
  /// The requestor of the sensor service.
  /// Example: /// Example: REQUESTER
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *r1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_R1);
  }
  /// Identifier for the tasking message sent by the requesting station.
  /// Example: /// Example: IDENTIFIER
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *r2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_R2);
  }
  /// The priority of the request relative to other requests originated by the requesting station.
  /// Example: /// Example: 15
  /// Constraints: No constraints specified.
  int32_t r3() const {
    return GetField<int32_t>(VT_R3, 0);
  }
  /// North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r4() const {
    return GetField<double>(VT_R4, 0.0);
  }
  /// East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r5() const {
    return GetField<double>(VT_R5, 0.0);
  }
  /// North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r6() const {
    return GetField<double>(VT_R6, 0.0);
  }
  /// East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r7() const {
    return GetField<double>(VT_R7, 0.0);
  }
  /// North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r8() const {
    return GetField<double>(VT_R8, 0.0);
  }
  /// East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r9() const {
    return GetField<double>(VT_R9, 0.0);
  }
  /// North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r10() const {
    return GetField<double>(VT_R10, 0.0);
  }
  /// East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double r11() const {
    return GetField<double>(VT_R11, 0.0);
  }
  /// Identifies the radar mode requested by the requestor.
  /// Example: /// Example: MODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *r12() const {
    return GetPointer<const ::flatbuffers::String *>(VT_R12);
  }
  /// Specifies the radar range resolution requested by the requestor, expressed in centimeters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t r13() const {
    return GetField<int32_t>(VT_R13, 0);
  }
  /// Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t r14() const {
    return GetField<int32_t>(VT_R14, 0);
  }
  /// Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *jobReqEst() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOBREQEST);
  }
  /// Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t r21() const {
    return GetField<int32_t>(VT_R21, 0);
  }
  /// Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t r22() const {
    return GetField<int32_t>(VT_R22, 0);
  }
  /// Specifies the revisit interval for the radar job, expressed in deciseconds.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t r23() const {
    return GetField<int32_t>(VT_R23, 0);
  }
  /// the type of sensor or the platform.
  /// Example: /// Example: TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *r24() const {
    return GetPointer<const ::flatbuffers::String *>(VT_R24);
  }
  /// The particular variant of the sensor type.
  /// Example: /// Example: VARIANT
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *r25() const {
    return GetPointer<const ::flatbuffers::String *>(VT_R25);
  }
  /// Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool r26() const {
    return GetField<uint8_t>(VT_R26, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_R1) &&
           verifier.VerifyString(r1()) &&
           VerifyOffset(verifier, VT_R2) &&
           verifier.VerifyString(r2()) &&
           VerifyField<int32_t>(verifier, VT_R3, 4) &&
           VerifyField<double>(verifier, VT_R4, 8) &&
           VerifyField<double>(verifier, VT_R5, 8) &&
           VerifyField<double>(verifier, VT_R6, 8) &&
           VerifyField<double>(verifier, VT_R7, 8) &&
           VerifyField<double>(verifier, VT_R8, 8) &&
           VerifyField<double>(verifier, VT_R9, 8) &&
           VerifyField<double>(verifier, VT_R10, 8) &&
           VerifyField<double>(verifier, VT_R11, 8) &&
           VerifyOffset(verifier, VT_R12) &&
           verifier.VerifyString(r12()) &&
           VerifyField<int32_t>(verifier, VT_R13, 4) &&
           VerifyField<int32_t>(verifier, VT_R14, 4) &&
           VerifyOffset(verifier, VT_JOBREQEST) &&
           verifier.VerifyString(jobReqEst()) &&
           VerifyField<int32_t>(verifier, VT_R21, 4) &&
           VerifyField<int32_t>(verifier, VT_R22, 4) &&
           VerifyField<int32_t>(verifier, VT_R23, 4) &&
           VerifyOffset(verifier, VT_R24) &&
           verifier.VerifyString(r24()) &&
           VerifyOffset(verifier, VT_R25) &&
           verifier.VerifyString(r25()) &&
           VerifyField<uint8_t>(verifier, VT_R26, 1) &&
           verifier.EndTable();
  }
};

struct MtiJobRequest_FullBuilder {
  typedef MtiJobRequest_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_r1(::flatbuffers::Offset<::flatbuffers::String> r1) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_R1, r1);
  }
  void add_r2(::flatbuffers::Offset<::flatbuffers::String> r2) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_R2, r2);
  }
  void add_r3(int32_t r3) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R3, r3, 0);
  }
  void add_r4(double r4) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R4, r4, 0.0);
  }
  void add_r5(double r5) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R5, r5, 0.0);
  }
  void add_r6(double r6) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R6, r6, 0.0);
  }
  void add_r7(double r7) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R7, r7, 0.0);
  }
  void add_r8(double r8) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R8, r8, 0.0);
  }
  void add_r9(double r9) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R9, r9, 0.0);
  }
  void add_r10(double r10) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R10, r10, 0.0);
  }
  void add_r11(double r11) {
    fbb_.AddElement<double>(MtiJobRequest_Full::VT_R11, r11, 0.0);
  }
  void add_r12(::flatbuffers::Offset<::flatbuffers::String> r12) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_R12, r12);
  }
  void add_r13(int32_t r13) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R13, r13, 0);
  }
  void add_r14(int32_t r14) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R14, r14, 0);
  }
  void add_jobReqEst(::flatbuffers::Offset<::flatbuffers::String> jobReqEst) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_JOBREQEST, jobReqEst);
  }
  void add_r21(int32_t r21) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R21, r21, 0);
  }
  void add_r22(int32_t r22) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R22, r22, 0);
  }
  void add_r23(int32_t r23) {
    fbb_.AddElement<int32_t>(MtiJobRequest_Full::VT_R23, r23, 0);
  }
  void add_r24(::flatbuffers::Offset<::flatbuffers::String> r24) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_R24, r24);
  }
  void add_r25(::flatbuffers::Offset<::flatbuffers::String> r25) {
    fbb_.AddOffset(MtiJobRequest_Full::VT_R25, r25);
  }
  void add_r26(bool r26) {
    fbb_.AddElement<uint8_t>(MtiJobRequest_Full::VT_R26, static_cast<uint8_t>(r26), 0);
  }
  explicit MtiJobRequest_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiJobRequest_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiJobRequest_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiJobRequest_Full> CreateMtiJobRequest_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> r1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> r2 = 0,
    int32_t r3 = 0,
    double r4 = 0.0,
    double r5 = 0.0,
    double r6 = 0.0,
    double r7 = 0.0,
    double r8 = 0.0,
    double r9 = 0.0,
    double r10 = 0.0,
    double r11 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> r12 = 0,
    int32_t r13 = 0,
    int32_t r14 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jobReqEst = 0,
    int32_t r21 = 0,
    int32_t r22 = 0,
    int32_t r23 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> r24 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> r25 = 0,
    bool r26 = false) {
  MtiJobRequest_FullBuilder builder_(_fbb);
  builder_.add_r11(r11);
  builder_.add_r10(r10);
  builder_.add_r9(r9);
  builder_.add_r8(r8);
  builder_.add_r7(r7);
  builder_.add_r6(r6);
  builder_.add_r5(r5);
  builder_.add_r4(r4);
  builder_.add_r25(r25);
  builder_.add_r24(r24);
  builder_.add_r23(r23);
  builder_.add_r22(r22);
  builder_.add_r21(r21);
  builder_.add_jobReqEst(jobReqEst);
  builder_.add_r14(r14);
  builder_.add_r13(r13);
  builder_.add_r12(r12);
  builder_.add_r3(r3);
  builder_.add_r2(r2);
  builder_.add_r1(r1);
  builder_.add_r26(r26);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiJobRequest_Full> CreateMtiJobRequest_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *r1 = nullptr,
    const char *r2 = nullptr,
    int32_t r3 = 0,
    double r4 = 0.0,
    double r5 = 0.0,
    double r6 = 0.0,
    double r7 = 0.0,
    double r8 = 0.0,
    double r9 = 0.0,
    double r10 = 0.0,
    double r11 = 0.0,
    const char *r12 = nullptr,
    int32_t r13 = 0,
    int32_t r14 = 0,
    const char *jobReqEst = nullptr,
    int32_t r21 = 0,
    int32_t r22 = 0,
    int32_t r23 = 0,
    const char *r24 = nullptr,
    const char *r25 = nullptr,
    bool r26 = false) {
  auto r1__ = r1 ? _fbb.CreateString(r1) : 0;
  auto r2__ = r2 ? _fbb.CreateString(r2) : 0;
  auto r12__ = r12 ? _fbb.CreateString(r12) : 0;
  auto jobReqEst__ = jobReqEst ? _fbb.CreateString(jobReqEst) : 0;
  auto r24__ = r24 ? _fbb.CreateString(r24) : 0;
  auto r25__ = r25 ? _fbb.CreateString(r25) : 0;
  return CreateMtiJobRequest_Full(
      _fbb,
      r1__,
      r2__,
      r3,
      r4,
      r5,
      r6,
      r7,
      r8,
      r9,
      r10,
      r11,
      r12__,
      r13,
      r14,
      jobReqEst__,
      r21,
      r22,
      r23,
      r24__,
      r25__,
      r26);
}

inline const MtiJobRequest_Full *GetMtiJobRequest_Full(const void *buf) {
  return ::flatbuffers::GetRoot<MtiJobRequest_Full>(buf);
}

inline const MtiJobRequest_Full *GetSizePrefixedMtiJobRequest_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiJobRequest_Full>(buf);
}

inline const char *MtiJobRequest_FullIdentifier() {
  return "MTIJ";
}

inline bool MtiJobRequest_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiJobRequest_FullIdentifier());
}

inline bool SizePrefixedMtiJobRequest_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiJobRequest_FullIdentifier(), true);
}

inline bool VerifyMtiJobRequest_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiJobRequest_Full>(MtiJobRequest_FullIdentifier());
}

inline bool VerifySizePrefixedMtiJobRequest_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiJobRequest_Full>(MtiJobRequest_FullIdentifier());
}

inline void FinishMtiJobRequest_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiJobRequest_Full> root) {
  fbb.Finish(root, MtiJobRequest_FullIdentifier());
}

inline void FinishSizePrefixedMtiJobRequest_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiJobRequest_Full> root) {
  fbb.FinishSizePrefixed(root, MtiJobRequest_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
