// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataSigIntPayload_Abridged;
struct SeradataSigIntPayload_AbridgedBuilder;

enum SeradataSigIntPayload_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataSigIntPayload_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataSigIntPayload_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataSigIntPayload_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataSigIntPayload_Abridged_dataMode_Enum_EXERCISE = 3,
  SeradataSigIntPayload_Abridged_dataMode_Enum_MIN = SeradataSigIntPayload_Abridged_dataMode_Enum_REAL,
  SeradataSigIntPayload_Abridged_dataMode_Enum_MAX = SeradataSigIntPayload_Abridged_dataMode_Enum_EXERCISE
};

inline const SeradataSigIntPayload_Abridged_dataMode_Enum (&EnumValuesSeradataSigIntPayload_Abridged_dataMode_Enum())[4] {
  static const SeradataSigIntPayload_Abridged_dataMode_Enum values[] = {
    SeradataSigIntPayload_Abridged_dataMode_Enum_REAL,
    SeradataSigIntPayload_Abridged_dataMode_Enum_TEST,
    SeradataSigIntPayload_Abridged_dataMode_Enum_SIMULATED,
    SeradataSigIntPayload_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataSigIntPayload_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataSigIntPayload_Abridged_dataMode_Enum(SeradataSigIntPayload_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataSigIntPayload_Abridged_dataMode_Enum_REAL, SeradataSigIntPayload_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataSigIntPayload_Abridged_dataMode_Enum()[index];
}

/// /// Details for an sigint payload from  Seradata.
struct SeradataSigIntPayload_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataSigIntPayload_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SPACECRAFTID = 8,
    VT_IDSENSOR = 10,
    VT_HOSTEDFORCOMPANYORGID = 12,
    VT_MANUFACTURERORGID = 14,
    VT_TYPE = 16,
    VT_SWATHWIDTH = 18,
    VT_GROUNDSTATIONS = 20,
    VT_GROUNDSTATIONLOCATIONS = 22,
    VT_FREQUENCYCOVERAGE = 24,
    VT_POSITIONALACCURACY = 26,
    VT_INTERCEPTPARAMETERS = 28,
    VT_NAME = 30,
    VT_NOTES = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_SOURCE = 38,
    VT_ORIGIN = 40,
    VT_ORIGNETWORK = 42,
    VT_DATAMODE = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATASIGINTPAYLOAD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *spacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPACECRAFTID);
  }
  /// UUID of the Sensor record.
  /// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *hostedForCompanyOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTEDFORCOMPANYORGID);
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// SIGINT Payload type, e.g. Comint, Elint, etc.
  /// Example: /// Example: Comint
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Swath Width in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double swathWidth() const {
    return GetField<double>(VT_SWATHWIDTH, 0.0);
  }
  /// Ground Station info for this payload.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *groundStations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONS);
  }
  /// Ground Station Locations for this payload.
  /// Example: /// Example: groundStationLocations
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *groundStationLocations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONLOCATIONS);
  }
  /// Frequency coverage for this payload.
  /// Example: /// Example: 1.1 to 3.3
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *frequencyCoverage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREQUENCYCOVERAGE);
  }
  /// Positional Accuracy for this payload.
  /// Example: /// Example: positionalAccuracy
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *positionalAccuracy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSITIONALACCURACY);
  }
  /// Intercept parameters.
  /// Example: /// Example: interceptParameters
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *interceptParameters() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTERCEPTPARAMETERS);
  }
  /// Sensor name from Seradata.
  /// Example: /// Example: Sensor Name
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataSigIntPayload_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SeradataSigIntPayload_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SPACECRAFTID) &&
           verifier.VerifyString(spacecraftId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_HOSTEDFORCOMPANYORGID) &&
           verifier.VerifyString(hostedForCompanyOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_SWATHWIDTH, 8) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONS) &&
           verifier.VerifyString(groundStations()) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONLOCATIONS) &&
           verifier.VerifyString(groundStationLocations()) &&
           VerifyOffset(verifier, VT_FREQUENCYCOVERAGE) &&
           verifier.VerifyString(frequencyCoverage()) &&
           VerifyOffset(verifier, VT_POSITIONALACCURACY) &&
           verifier.VerifyString(positionalAccuracy()) &&
           VerifyOffset(verifier, VT_INTERCEPTPARAMETERS) &&
           verifier.VerifyString(interceptParameters()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SeradataSigIntPayload_AbridgedBuilder {
  typedef SeradataSigIntPayload_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_spacecraftId(::flatbuffers::Offset<::flatbuffers::String> spacecraftId) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_SPACECRAFTID, spacecraftId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_hostedForCompanyOrgId(::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_TYPE, type);
  }
  void add_swathWidth(double swathWidth) {
    fbb_.AddElement<double>(SeradataSigIntPayload_Abridged::VT_SWATHWIDTH, swathWidth, 0.0);
  }
  void add_groundStations(::flatbuffers::Offset<::flatbuffers::String> groundStations) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_GROUNDSTATIONS, groundStations);
  }
  void add_groundStationLocations(::flatbuffers::Offset<::flatbuffers::String> groundStationLocations) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_GROUNDSTATIONLOCATIONS, groundStationLocations);
  }
  void add_frequencyCoverage(::flatbuffers::Offset<::flatbuffers::String> frequencyCoverage) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_FREQUENCYCOVERAGE, frequencyCoverage);
  }
  void add_positionalAccuracy(::flatbuffers::Offset<::flatbuffers::String> positionalAccuracy) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_POSITIONALACCURACY, positionalAccuracy);
  }
  void add_interceptParameters(::flatbuffers::Offset<::flatbuffers::String> interceptParameters) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_INTERCEPTPARAMETERS, interceptParameters);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_NAME, name);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataSigIntPayload_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataSigIntPayload_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataSigIntPayload_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SeradataSigIntPayload_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataSigIntPayload_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataSigIntPayload_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataSigIntPayload_Abridged> CreateSeradataSigIntPayload_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double swathWidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStationLocations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frequencyCoverage = 0,
    ::flatbuffers::Offset<::flatbuffers::String> positionalAccuracy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> interceptParameters = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataSigIntPayload_Abridged_dataMode_Enum dataMode = SeradataSigIntPayload_Abridged_dataMode_Enum_REAL) {
  SeradataSigIntPayload_AbridgedBuilder builder_(_fbb);
  builder_.add_swathWidth(swathWidth);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_name(name);
  builder_.add_interceptParameters(interceptParameters);
  builder_.add_positionalAccuracy(positionalAccuracy);
  builder_.add_frequencyCoverage(frequencyCoverage);
  builder_.add_groundStationLocations(groundStationLocations);
  builder_.add_groundStations(groundStations);
  builder_.add_type(type);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_hostedForCompanyOrgId(hostedForCompanyOrgId);
  builder_.add_idSensor(idSensor);
  builder_.add_spacecraftId(spacecraftId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataSigIntPayload_Abridged> CreateSeradataSigIntPayload_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *spacecraftId = nullptr,
    const char *idSensor = nullptr,
    const char *hostedForCompanyOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *type = nullptr,
    double swathWidth = 0.0,
    const char *groundStations = nullptr,
    const char *groundStationLocations = nullptr,
    const char *frequencyCoverage = nullptr,
    const char *positionalAccuracy = nullptr,
    const char *interceptParameters = nullptr,
    const char *name = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataSigIntPayload_Abridged_dataMode_Enum dataMode = SeradataSigIntPayload_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto spacecraftId__ = spacecraftId ? _fbb.CreateString(spacecraftId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto hostedForCompanyOrgId__ = hostedForCompanyOrgId ? _fbb.CreateString(hostedForCompanyOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto groundStations__ = groundStations ? _fbb.CreateString(groundStations) : 0;
  auto groundStationLocations__ = groundStationLocations ? _fbb.CreateString(groundStationLocations) : 0;
  auto frequencyCoverage__ = frequencyCoverage ? _fbb.CreateString(frequencyCoverage) : 0;
  auto positionalAccuracy__ = positionalAccuracy ? _fbb.CreateString(positionalAccuracy) : 0;
  auto interceptParameters__ = interceptParameters ? _fbb.CreateString(interceptParameters) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSeradataSigIntPayload_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      spacecraftId__,
      idSensor__,
      hostedForCompanyOrgId__,
      manufacturerOrgId__,
      type__,
      swathWidth,
      groundStations__,
      groundStationLocations__,
      frequencyCoverage__,
      positionalAccuracy__,
      interceptParameters__,
      name__,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const SeradataSigIntPayload_Abridged *GetSeradataSigIntPayload_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataSigIntPayload_Abridged>(buf);
}

inline const SeradataSigIntPayload_Abridged *GetSizePrefixedSeradataSigIntPayload_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataSigIntPayload_Abridged>(buf);
}

inline const char *SeradataSigIntPayload_AbridgedIdentifier() {
  return "SERA";
}

inline bool SeradataSigIntPayload_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataSigIntPayload_AbridgedIdentifier());
}

inline bool SizePrefixedSeradataSigIntPayload_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataSigIntPayload_AbridgedIdentifier(), true);
}

inline bool VerifySeradataSigIntPayload_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataSigIntPayload_Abridged>(SeradataSigIntPayload_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSeradataSigIntPayload_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataSigIntPayload_Abridged>(SeradataSigIntPayload_AbridgedIdentifier());
}

inline void FinishSeradataSigIntPayload_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataSigIntPayload_Abridged> root) {
  fbb.Finish(root, SeradataSigIntPayload_AbridgedIdentifier());
}

inline void FinishSizePrefixedSeradataSigIntPayload_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataSigIntPayload_Abridged> root) {
  fbb.FinishSizePrefixed(root, SeradataSigIntPayload_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
