// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationCharAtts_Ingest;
struct IonoObservationCharAtts_IngestBuilder;

/// /// Characteristic attributes of a IonoObservation.
struct IonoObservationCharAtts_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationCharAtts_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URSIID = 4,
    VT_CHARNAME = 6,
    VT_LOWERBOUND = 8,
    VT_UPPERBOUND = 10,
    VT_Q = 12,
    VT_D = 14,
    VT_CLIMATEMODELNAME = 16,
    VT_CLIMATEMODELOPTIONS = 18,
    VT_CLIMATEMODELINPUTPARAMS = 20,
    VT_UNCERTAINTYBOUNDTYPE = 22
  };
  /// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
  /// Example: /// Example: 04
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *ursiID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_URSIID);
  }
  /// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
  /// Example: /// Example: hprimeF2
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *charName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHARNAME);
  }
  /// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
  /// Example: /// Example: 1.26
  /// Constraints: No constraints specified.
  double lowerBound() const {
    return GetField<double>(VT_LOWERBOUND, 0.0);
  }
  /// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
  /// Example: /// Example: 2.57
  /// Constraints: No constraints specified.
  double upperBound() const {
    return GetField<double>(VT_UPPERBOUND, 0.0);
  }
  /// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  /// Example: /// Example: T
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *q() const {
    return GetPointer<const ::flatbuffers::String *>(VT_Q);
  }
  /// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
  /// Example: /// Example: K
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *d() const {
    return GetPointer<const ::flatbuffers::String *>(VT_D);
  }
  /// Name of the climate model.
  /// Example: /// Example: IRI
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *climateModelName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLIMATEMODELNAME);
  }
  /// List of options for the climate model.
  /// Example: /// Example: ['URSI-88', 'No storm']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *climateModelOptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CLIMATEMODELOPTIONS);
  }
  /// Input parameters for the climate model.
  /// Example: /// Example: ['ISSN1 88.1', 'Option 2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *climateModelInputParams() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CLIMATEMODELINPUTPARAMS);
  }
  /// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
  /// Example: /// Example: 1sigma
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *uncertaintyBoundType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNCERTAINTYBOUNDTYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URSIID) &&
           verifier.VerifyString(ursiID()) &&
           VerifyOffset(verifier, VT_CHARNAME) &&
           verifier.VerifyString(charName()) &&
           VerifyField<double>(verifier, VT_LOWERBOUND, 8) &&
           VerifyField<double>(verifier, VT_UPPERBOUND, 8) &&
           VerifyOffset(verifier, VT_Q) &&
           verifier.VerifyString(q()) &&
           VerifyOffset(verifier, VT_D) &&
           verifier.VerifyString(d()) &&
           VerifyOffset(verifier, VT_CLIMATEMODELNAME) &&
           verifier.VerifyString(climateModelName()) &&
           VerifyOffset(verifier, VT_CLIMATEMODELOPTIONS) &&
           verifier.VerifyVector(climateModelOptions()) &&
           verifier.VerifyVectorOfStrings(climateModelOptions()) &&
           VerifyOffset(verifier, VT_CLIMATEMODELINPUTPARAMS) &&
           verifier.VerifyVector(climateModelInputParams()) &&
           verifier.VerifyVectorOfStrings(climateModelInputParams()) &&
           VerifyOffset(verifier, VT_UNCERTAINTYBOUNDTYPE) &&
           verifier.VerifyString(uncertaintyBoundType()) &&
           verifier.EndTable();
  }
};

struct IonoObservationCharAtts_IngestBuilder {
  typedef IonoObservationCharAtts_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ursiID(::flatbuffers::Offset<::flatbuffers::String> ursiID) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_URSIID, ursiID);
  }
  void add_charName(::flatbuffers::Offset<::flatbuffers::String> charName) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_CHARNAME, charName);
  }
  void add_lowerBound(double lowerBound) {
    fbb_.AddElement<double>(IonoObservationCharAtts_Ingest::VT_LOWERBOUND, lowerBound, 0.0);
  }
  void add_upperBound(double upperBound) {
    fbb_.AddElement<double>(IonoObservationCharAtts_Ingest::VT_UPPERBOUND, upperBound, 0.0);
  }
  void add_q(::flatbuffers::Offset<::flatbuffers::String> q) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_Q, q);
  }
  void add_d(::flatbuffers::Offset<::flatbuffers::String> d) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_D, d);
  }
  void add_climateModelName(::flatbuffers::Offset<::flatbuffers::String> climateModelName) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_CLIMATEMODELNAME, climateModelName);
  }
  void add_climateModelOptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> climateModelOptions) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_CLIMATEMODELOPTIONS, climateModelOptions);
  }
  void add_climateModelInputParams(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> climateModelInputParams) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_CLIMATEMODELINPUTPARAMS, climateModelInputParams);
  }
  void add_uncertaintyBoundType(::flatbuffers::Offset<::flatbuffers::String> uncertaintyBoundType) {
    fbb_.AddOffset(IonoObservationCharAtts_Ingest::VT_UNCERTAINTYBOUNDTYPE, uncertaintyBoundType);
  }
  explicit IonoObservationCharAtts_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationCharAtts_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationCharAtts_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationCharAtts_Ingest> CreateIonoObservationCharAtts_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ursiID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> charName = 0,
    double lowerBound = 0.0,
    double upperBound = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> q = 0,
    ::flatbuffers::Offset<::flatbuffers::String> d = 0,
    ::flatbuffers::Offset<::flatbuffers::String> climateModelName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> climateModelOptions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> climateModelInputParams = 0,
    ::flatbuffers::Offset<::flatbuffers::String> uncertaintyBoundType = 0) {
  IonoObservationCharAtts_IngestBuilder builder_(_fbb);
  builder_.add_upperBound(upperBound);
  builder_.add_lowerBound(lowerBound);
  builder_.add_uncertaintyBoundType(uncertaintyBoundType);
  builder_.add_climateModelInputParams(climateModelInputParams);
  builder_.add_climateModelOptions(climateModelOptions);
  builder_.add_climateModelName(climateModelName);
  builder_.add_d(d);
  builder_.add_q(q);
  builder_.add_charName(charName);
  builder_.add_ursiID(ursiID);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationCharAtts_Ingest> CreateIonoObservationCharAtts_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ursiID = nullptr,
    const char *charName = nullptr,
    double lowerBound = 0.0,
    double upperBound = 0.0,
    const char *q = nullptr,
    const char *d = nullptr,
    const char *climateModelName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *climateModelOptions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *climateModelInputParams = nullptr,
    const char *uncertaintyBoundType = nullptr) {
  auto ursiID__ = ursiID ? _fbb.CreateString(ursiID) : 0;
  auto charName__ = charName ? _fbb.CreateString(charName) : 0;
  auto q__ = q ? _fbb.CreateString(q) : 0;
  auto d__ = d ? _fbb.CreateString(d) : 0;
  auto climateModelName__ = climateModelName ? _fbb.CreateString(climateModelName) : 0;
  auto climateModelOptions__ = climateModelOptions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*climateModelOptions) : 0;
  auto climateModelInputParams__ = climateModelInputParams ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*climateModelInputParams) : 0;
  auto uncertaintyBoundType__ = uncertaintyBoundType ? _fbb.CreateString(uncertaintyBoundType) : 0;
  return CreateIonoObservationCharAtts_Ingest(
      _fbb,
      ursiID__,
      charName__,
      lowerBound,
      upperBound,
      q__,
      d__,
      climateModelName__,
      climateModelOptions__,
      climateModelInputParams__,
      uncertaintyBoundType__);
}

inline const IonoObservationCharAtts_Ingest *GetIonoObservationCharAtts_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationCharAtts_Ingest>(buf);
}

inline const IonoObservationCharAtts_Ingest *GetSizePrefixedIonoObservationCharAtts_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationCharAtts_Ingest>(buf);
}

inline const char *IonoObservationCharAtts_IngestIdentifier() {
  return "IONO";
}

inline bool IonoObservationCharAtts_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationCharAtts_IngestIdentifier());
}

inline bool SizePrefixedIonoObservationCharAtts_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationCharAtts_IngestIdentifier(), true);
}

inline bool VerifyIonoObservationCharAtts_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationCharAtts_Ingest>(IonoObservationCharAtts_IngestIdentifier());
}

inline bool VerifySizePrefixedIonoObservationCharAtts_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationCharAtts_Ingest>(IonoObservationCharAtts_IngestIdentifier());
}

inline void FinishIonoObservationCharAtts_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationCharAtts_Ingest> root) {
  fbb.Finish(root, IonoObservationCharAtts_IngestIdentifier());
}

inline void FinishSizePrefixedIonoObservationCharAtts_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationCharAtts_Ingest> root) {
  fbb.FinishSizePrefixed(root, IonoObservationCharAtts_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
