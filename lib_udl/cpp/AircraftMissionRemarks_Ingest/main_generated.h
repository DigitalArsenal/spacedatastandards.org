// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftMissionRemarks_Ingest;
struct AircraftMissionRemarks_IngestBuilder;

/// /// Collection of Remarks associated with this Air Transport Mission.
struct AircraftMissionRemarks_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftMissionRemarks_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GDSSREMARKID = 4,
    VT_TYPE = 6,
    VT_TEXT = 8,
    VT_DATE = 10,
    VT_USER = 12,
    VT_ITINERARYNUM = 14
  };
  /// Global Decision Support System (GDSS) remark identifier.
  /// Example: /// Example: GDSSREMARK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *gdssRemarkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GDSSREMARKID);
  }
  /// Remark type.
  /// Example: /// Example: MP
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Text of the remark.
  /// Example: /// Example: Example mission remarks.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *date() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATE);
  }
  /// User who published the remark.
  /// Example: /// Example: John Doe
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *user() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER);
  }
  /// If the remark is sortie specific, this is the number of the sortie it applies to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  int32_t itineraryNum() const {
    return GetField<int32_t>(VT_ITINERARYNUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GDSSREMARKID) &&
           verifier.VerifyString(gdssRemarkId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyField<int32_t>(verifier, VT_ITINERARYNUM, 4) &&
           verifier.EndTable();
  }
};

struct AircraftMissionRemarks_IngestBuilder {
  typedef AircraftMissionRemarks_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gdssRemarkId(::flatbuffers::Offset<::flatbuffers::String> gdssRemarkId) {
    fbb_.AddOffset(AircraftMissionRemarks_Ingest::VT_GDSSREMARKID, gdssRemarkId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(AircraftMissionRemarks_Ingest::VT_TYPE, type);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(AircraftMissionRemarks_Ingest::VT_TEXT, text);
  }
  void add_date(::flatbuffers::Offset<::flatbuffers::String> date) {
    fbb_.AddOffset(AircraftMissionRemarks_Ingest::VT_DATE, date);
  }
  void add_user(::flatbuffers::Offset<::flatbuffers::String> user) {
    fbb_.AddOffset(AircraftMissionRemarks_Ingest::VT_USER, user);
  }
  void add_itineraryNum(int32_t itineraryNum) {
    fbb_.AddElement<int32_t>(AircraftMissionRemarks_Ingest::VT_ITINERARYNUM, itineraryNum, 0);
  }
  explicit AircraftMissionRemarks_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftMissionRemarks_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftMissionRemarks_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftMissionRemarks_Ingest> CreateAircraftMissionRemarks_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> gdssRemarkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> date = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user = 0,
    int32_t itineraryNum = 0) {
  AircraftMissionRemarks_IngestBuilder builder_(_fbb);
  builder_.add_itineraryNum(itineraryNum);
  builder_.add_user(user);
  builder_.add_date(date);
  builder_.add_text(text);
  builder_.add_type(type);
  builder_.add_gdssRemarkId(gdssRemarkId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftMissionRemarks_Ingest> CreateAircraftMissionRemarks_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *gdssRemarkId = nullptr,
    const char *type = nullptr,
    const char *text = nullptr,
    const char *date = nullptr,
    const char *user = nullptr,
    int32_t itineraryNum = 0) {
  auto gdssRemarkId__ = gdssRemarkId ? _fbb.CreateString(gdssRemarkId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  return CreateAircraftMissionRemarks_Ingest(
      _fbb,
      gdssRemarkId__,
      type__,
      text__,
      date__,
      user__,
      itineraryNum);
}

inline const AircraftMissionRemarks_Ingest *GetAircraftMissionRemarks_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftMissionRemarks_Ingest>(buf);
}

inline const AircraftMissionRemarks_Ingest *GetSizePrefixedAircraftMissionRemarks_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftMissionRemarks_Ingest>(buf);
}

inline const char *AircraftMissionRemarks_IngestIdentifier() {
  return "AIRC";
}

inline bool AircraftMissionRemarks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionRemarks_IngestIdentifier());
}

inline bool SizePrefixedAircraftMissionRemarks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionRemarks_IngestIdentifier(), true);
}

inline bool VerifyAircraftMissionRemarks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftMissionRemarks_Ingest>(AircraftMissionRemarks_IngestIdentifier());
}

inline bool VerifySizePrefixedAircraftMissionRemarks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftMissionRemarks_Ingest>(AircraftMissionRemarks_IngestIdentifier());
}

inline void FinishAircraftMissionRemarks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionRemarks_Ingest> root) {
  fbb.Finish(root, AircraftMissionRemarks_IngestIdentifier());
}

inline void FinishSizePrefixedAircraftMissionRemarks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionRemarks_Ingest> root) {
  fbb.FinishSizePrefixed(root, AircraftMissionRemarks_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
