// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct NavalFlightOperations_Abridged;
struct NavalFlightOperations_AbridgedBuilder;

/// /// Collection that specifies the naval flight operations for this ATO.
struct NavalFlightOperations_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NavalFlightOperations_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHIPNAME = 4,
    VT_FLTOPSTART = 6,
    VT_FLTOPSTOP = 8,
    VT_SCHDLAUNCHRCVYTIME = 10
  };
  /// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
  /// Example: /// Example: USS WASP
  /// Constraints: Minimum length = 1, Maximum length = 48
  const ::flatbuffers::String *shipName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHIPNAME);
  }
  /// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *fltOpStart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLTOPSTART);
  }
  /// The time when flight operations end in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *fltOpStop() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FLTOPSTOP);
  }
  /// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-02-25T12:00:00.123Z']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *schdLaunchRcvyTime() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SCHDLAUNCHRCVYTIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SHIPNAME) &&
           verifier.VerifyString(shipName()) &&
           VerifyOffset(verifier, VT_FLTOPSTART) &&
           verifier.VerifyString(fltOpStart()) &&
           VerifyOffset(verifier, VT_FLTOPSTOP) &&
           verifier.VerifyString(fltOpStop()) &&
           VerifyOffset(verifier, VT_SCHDLAUNCHRCVYTIME) &&
           verifier.VerifyVector(schdLaunchRcvyTime()) &&
           verifier.VerifyVectorOfStrings(schdLaunchRcvyTime()) &&
           verifier.EndTable();
  }
};

struct NavalFlightOperations_AbridgedBuilder {
  typedef NavalFlightOperations_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shipName(::flatbuffers::Offset<::flatbuffers::String> shipName) {
    fbb_.AddOffset(NavalFlightOperations_Abridged::VT_SHIPNAME, shipName);
  }
  void add_fltOpStart(::flatbuffers::Offset<::flatbuffers::String> fltOpStart) {
    fbb_.AddOffset(NavalFlightOperations_Abridged::VT_FLTOPSTART, fltOpStart);
  }
  void add_fltOpStop(::flatbuffers::Offset<::flatbuffers::String> fltOpStop) {
    fbb_.AddOffset(NavalFlightOperations_Abridged::VT_FLTOPSTOP, fltOpStop);
  }
  void add_schdLaunchRcvyTime(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> schdLaunchRcvyTime) {
    fbb_.AddOffset(NavalFlightOperations_Abridged::VT_SCHDLAUNCHRCVYTIME, schdLaunchRcvyTime);
  }
  explicit NavalFlightOperations_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NavalFlightOperations_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NavalFlightOperations_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NavalFlightOperations_Abridged> CreateNavalFlightOperations_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> shipName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fltOpStart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fltOpStop = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> schdLaunchRcvyTime = 0) {
  NavalFlightOperations_AbridgedBuilder builder_(_fbb);
  builder_.add_schdLaunchRcvyTime(schdLaunchRcvyTime);
  builder_.add_fltOpStop(fltOpStop);
  builder_.add_fltOpStart(fltOpStart);
  builder_.add_shipName(shipName);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NavalFlightOperations_Abridged> CreateNavalFlightOperations_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *shipName = nullptr,
    const char *fltOpStart = nullptr,
    const char *fltOpStop = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *schdLaunchRcvyTime = nullptr) {
  auto shipName__ = shipName ? _fbb.CreateString(shipName) : 0;
  auto fltOpStart__ = fltOpStart ? _fbb.CreateString(fltOpStart) : 0;
  auto fltOpStop__ = fltOpStop ? _fbb.CreateString(fltOpStop) : 0;
  auto schdLaunchRcvyTime__ = schdLaunchRcvyTime ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*schdLaunchRcvyTime) : 0;
  return CreateNavalFlightOperations_Abridged(
      _fbb,
      shipName__,
      fltOpStart__,
      fltOpStop__,
      schdLaunchRcvyTime__);
}

inline const NavalFlightOperations_Abridged *GetNavalFlightOperations_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<NavalFlightOperations_Abridged>(buf);
}

inline const NavalFlightOperations_Abridged *GetSizePrefixedNavalFlightOperations_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NavalFlightOperations_Abridged>(buf);
}

inline const char *NavalFlightOperations_AbridgedIdentifier() {
  return "NAVA";
}

inline bool NavalFlightOperations_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, NavalFlightOperations_AbridgedIdentifier());
}

inline bool SizePrefixedNavalFlightOperations_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, NavalFlightOperations_AbridgedIdentifier(), true);
}

inline bool VerifyNavalFlightOperations_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NavalFlightOperations_Abridged>(NavalFlightOperations_AbridgedIdentifier());
}

inline bool VerifySizePrefixedNavalFlightOperations_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NavalFlightOperations_Abridged>(NavalFlightOperations_AbridgedIdentifier());
}

inline void FinishNavalFlightOperations_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NavalFlightOperations_Abridged> root) {
  fbb.Finish(root, NavalFlightOperations_AbridgedIdentifier());
}

inline void FinishSizePrefixedNavalFlightOperations_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NavalFlightOperations_Abridged> root) {
  fbb.FinishSizePrefixed(root, NavalFlightOperations_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
