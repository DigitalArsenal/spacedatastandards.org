// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DriftHistory_Full;
struct DriftHistory_FullBuilder;

enum DriftHistory_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  DriftHistory_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  DriftHistory_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  DriftHistory_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  DriftHistory_Full_dataMode_Enum_EXERCISE = 3,
  DriftHistory_Full_dataMode_Enum_MIN = DriftHistory_Full_dataMode_Enum_REAL,
  DriftHistory_Full_dataMode_Enum_MAX = DriftHistory_Full_dataMode_Enum_EXERCISE
};

inline const DriftHistory_Full_dataMode_Enum (&EnumValuesDriftHistory_Full_dataMode_Enum())[4] {
  static const DriftHistory_Full_dataMode_Enum values[] = {
    DriftHistory_Full_dataMode_Enum_REAL,
    DriftHistory_Full_dataMode_Enum_TEST,
    DriftHistory_Full_dataMode_Enum_SIMULATED,
    DriftHistory_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesDriftHistory_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameDriftHistory_Full_dataMode_Enum(DriftHistory_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, DriftHistory_Full_dataMode_Enum_REAL, DriftHistory_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDriftHistory_Full_dataMode_Enum()[index];
}

/// /// Historical drift rates for GEO Onorbit objects resulting from updates to OnorbitDetails driftRate values.
struct DriftHistory_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DriftHistory_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDONORBIT = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_EFFECTIVEUNTIL = 10,
    VT_DRIFTRATE = 12,
    VT_CREATEDBY = 14,
    VT_SOURCE = 16,
    VT_ORIGIN = 18,
    VT_DATAMODE = 20
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: DRIFTHISTORY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Time the drift rate was replaced with another value and no longer the current value.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveUntil() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEUNTIL);
  }
  /// GEO drift rate, if applicable in degrees per day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double driftRate() const {
    return GetField<double>(VT_DRIFTRATE, 0.0);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  DriftHistory_Full_dataMode_Enum dataMode() const {
    return static_cast<DriftHistory_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EFFECTIVEUNTIL) &&
           verifier.VerifyString(effectiveUntil()) &&
           VerifyField<double>(verifier, VT_DRIFTRATE, 8) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct DriftHistory_FullBuilder {
  typedef DriftHistory_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DriftHistory_Full::VT_ID, id);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(DriftHistory_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(DriftHistory_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_effectiveUntil(::flatbuffers::Offset<::flatbuffers::String> effectiveUntil) {
    fbb_.AddOffset(DriftHistory_Full::VT_EFFECTIVEUNTIL, effectiveUntil);
  }
  void add_driftRate(double driftRate) {
    fbb_.AddElement<double>(DriftHistory_Full::VT_DRIFTRATE, driftRate, 0.0);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(DriftHistory_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(DriftHistory_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(DriftHistory_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(DriftHistory_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(DriftHistory_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit DriftHistory_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DriftHistory_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DriftHistory_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DriftHistory_Full> CreateDriftHistory_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveUntil = 0,
    double driftRate = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    DriftHistory_Full_dataMode_Enum dataMode = DriftHistory_Full_dataMode_Enum_REAL) {
  DriftHistory_FullBuilder builder_(_fbb);
  builder_.add_driftRate(driftRate);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_effectiveUntil(effectiveUntil);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DriftHistory_Full> CreateDriftHistory_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOnOrbit = nullptr,
    const char *classificationMarking = nullptr,
    const char *effectiveUntil = nullptr,
    double driftRate = 0.0,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    DriftHistory_Full_dataMode_Enum dataMode = DriftHistory_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto effectiveUntil__ = effectiveUntil ? _fbb.CreateString(effectiveUntil) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateDriftHistory_Full(
      _fbb,
      id__,
      idOnOrbit__,
      classificationMarking__,
      effectiveUntil__,
      driftRate,
      createdBy__,
      source__,
      origin__,
      dataMode);
}

inline const DriftHistory_Full *GetDriftHistory_Full(const void *buf) {
  return ::flatbuffers::GetRoot<DriftHistory_Full>(buf);
}

inline const DriftHistory_Full *GetSizePrefixedDriftHistory_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DriftHistory_Full>(buf);
}

inline const char *DriftHistory_FullIdentifier() {
  return "DRIF";
}

inline bool DriftHistory_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DriftHistory_FullIdentifier());
}

inline bool SizePrefixedDriftHistory_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DriftHistory_FullIdentifier(), true);
}

inline bool VerifyDriftHistory_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DriftHistory_Full>(DriftHistory_FullIdentifier());
}

inline bool VerifySizePrefixedDriftHistory_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DriftHistory_Full>(DriftHistory_FullIdentifier());
}

inline void FinishDriftHistory_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DriftHistory_Full> root) {
  fbb.Finish(root, DriftHistory_FullIdentifier());
}

inline void FinishSizePrefixedDriftHistory_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DriftHistory_Full> root) {
  fbb.FinishSizePrefixed(root, DriftHistory_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
