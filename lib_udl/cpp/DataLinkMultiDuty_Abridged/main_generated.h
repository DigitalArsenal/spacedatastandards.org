// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkMultiDuty_Abridged;
struct DataLinkMultiDuty_AbridgedBuilder;

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
struct DataLinkMultiDuty_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkMultiDuty_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UNITDES = 4,
    VT_NAME = 6,
    VT_RANK = 8,
    VT_DUTY = 10,
    VT_DUTYTELEFREQNUMS = 12,
    VT_MULTIDUTYVOICECOORD = 14
  };
  /// Designated force of unit specified by ship name, unit call sign, or unit designator.
  /// Example: /// Example: SHIP:STENNIS
  /// Constraints: Minimum length = 0, Maximum length = 38
  const ::flatbuffers::String *unitDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNITDES);
  }
  /// The name of the person to be contacted for multilink coordination.
  /// Example: /// Example: POPOVICH
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The rank or position of the person to be contacted for multilink coordination.
  /// Example: /// Example: LCDR
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *rank() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANK);
  }
  /// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
  /// Example: /// Example: SICO
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *duty() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DUTY);
  }
  /// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dutyTeleFreqNums() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DUTYTELEFREQNUMS);
  }
  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *multiDutyVoiceCoord() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MULTIDUTYVOICECOORD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UNITDES) &&
           verifier.VerifyString(unitDes()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_RANK) &&
           verifier.VerifyString(rank()) &&
           VerifyOffset(verifier, VT_DUTY) &&
           verifier.VerifyString(duty()) &&
           VerifyOffset(verifier, VT_DUTYTELEFREQNUMS) &&
           verifier.VerifyVector(dutyTeleFreqNums()) &&
           verifier.VerifyVectorOfStrings(dutyTeleFreqNums()) &&
           VerifyOffset(verifier, VT_MULTIDUTYVOICECOORD) &&
           verifier.VerifyVector(multiDutyVoiceCoord()) &&
           verifier.VerifyVectorOfStrings(multiDutyVoiceCoord()) &&
           verifier.EndTable();
  }
};

struct DataLinkMultiDuty_AbridgedBuilder {
  typedef DataLinkMultiDuty_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_unitDes(::flatbuffers::Offset<::flatbuffers::String> unitDes) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_UNITDES, unitDes);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_NAME, name);
  }
  void add_rank(::flatbuffers::Offset<::flatbuffers::String> rank) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_RANK, rank);
  }
  void add_duty(::flatbuffers::Offset<::flatbuffers::String> duty) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_DUTY, duty);
  }
  void add_dutyTeleFreqNums(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dutyTeleFreqNums) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_DUTYTELEFREQNUMS, dutyTeleFreqNums);
  }
  void add_multiDutyVoiceCoord(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiDutyVoiceCoord) {
    fbb_.AddOffset(DataLinkMultiDuty_Abridged::VT_MULTIDUTYVOICECOORD, multiDutyVoiceCoord);
  }
  explicit DataLinkMultiDuty_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkMultiDuty_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkMultiDuty_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkMultiDuty_Abridged> CreateDataLinkMultiDuty_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> unitDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rank = 0,
    ::flatbuffers::Offset<::flatbuffers::String> duty = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dutyTeleFreqNums = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiDutyVoiceCoord = 0) {
  DataLinkMultiDuty_AbridgedBuilder builder_(_fbb);
  builder_.add_multiDutyVoiceCoord(multiDutyVoiceCoord);
  builder_.add_dutyTeleFreqNums(dutyTeleFreqNums);
  builder_.add_duty(duty);
  builder_.add_rank(rank);
  builder_.add_name(name);
  builder_.add_unitDes(unitDes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkMultiDuty_Abridged> CreateDataLinkMultiDuty_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *unitDes = nullptr,
    const char *name = nullptr,
    const char *rank = nullptr,
    const char *duty = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dutyTeleFreqNums = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *multiDutyVoiceCoord = nullptr) {
  auto unitDes__ = unitDes ? _fbb.CreateString(unitDes) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto rank__ = rank ? _fbb.CreateString(rank) : 0;
  auto duty__ = duty ? _fbb.CreateString(duty) : 0;
  auto dutyTeleFreqNums__ = dutyTeleFreqNums ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dutyTeleFreqNums) : 0;
  auto multiDutyVoiceCoord__ = multiDutyVoiceCoord ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*multiDutyVoiceCoord) : 0;
  return CreateDataLinkMultiDuty_Abridged(
      _fbb,
      unitDes__,
      name__,
      rank__,
      duty__,
      dutyTeleFreqNums__,
      multiDutyVoiceCoord__);
}

inline const DataLinkMultiDuty_Abridged *GetDataLinkMultiDuty_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkMultiDuty_Abridged>(buf);
}

inline const DataLinkMultiDuty_Abridged *GetSizePrefixedDataLinkMultiDuty_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkMultiDuty_Abridged>(buf);
}

inline const char *DataLinkMultiDuty_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLinkMultiDuty_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkMultiDuty_AbridgedIdentifier());
}

inline bool SizePrefixedDataLinkMultiDuty_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkMultiDuty_AbridgedIdentifier(), true);
}

inline bool VerifyDataLinkMultiDuty_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkMultiDuty_Abridged>(DataLinkMultiDuty_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLinkMultiDuty_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkMultiDuty_Abridged>(DataLinkMultiDuty_AbridgedIdentifier());
}

inline void FinishDataLinkMultiDuty_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkMultiDuty_Abridged> root) {
  fbb.Finish(root, DataLinkMultiDuty_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLinkMultiDuty_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkMultiDuty_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLinkMultiDuty_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
