// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PersonnelRecoveryEnemyData_Abridged;
struct PersonnelRecoveryEnemyData_AbridgedBuilder;

/// /// Information detailing knowledge of enemies in the area.
struct PersonnelRecoveryEnemyData_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonnelRecoveryEnemyData_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIRTOENEMY = 4,
    VT_HOSTILEFIRETYPE = 6,
    VT_FRIENDLIESREMARKS = 8,
    VT_HLZREMARKS = 10
  };
  /// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
  /// Example: /// Example: NORTHWEST
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *dirToEnemy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DIRTOENEMY);
  }
  /// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
  /// Example: /// Example: SMALL ARMS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *hostileFireType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTILEFIRETYPE);
  }
  /// Comments provided by friendlies about the evac zone.
  /// Example: /// Example: Comments from friendlies.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *friendliesRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FRIENDLIESREMARKS);
  }
  /// Hot Landing Zone remarks.
  /// Example: /// Example: Hot Landing Zone remarks.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *hlzRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HLZREMARKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DIRTOENEMY) &&
           verifier.VerifyString(dirToEnemy()) &&
           VerifyOffset(verifier, VT_HOSTILEFIRETYPE) &&
           verifier.VerifyString(hostileFireType()) &&
           VerifyOffset(verifier, VT_FRIENDLIESREMARKS) &&
           verifier.VerifyString(friendliesRemarks()) &&
           VerifyOffset(verifier, VT_HLZREMARKS) &&
           verifier.VerifyString(hlzRemarks()) &&
           verifier.EndTable();
  }
};

struct PersonnelRecoveryEnemyData_AbridgedBuilder {
  typedef PersonnelRecoveryEnemyData_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dirToEnemy(::flatbuffers::Offset<::flatbuffers::String> dirToEnemy) {
    fbb_.AddOffset(PersonnelRecoveryEnemyData_Abridged::VT_DIRTOENEMY, dirToEnemy);
  }
  void add_hostileFireType(::flatbuffers::Offset<::flatbuffers::String> hostileFireType) {
    fbb_.AddOffset(PersonnelRecoveryEnemyData_Abridged::VT_HOSTILEFIRETYPE, hostileFireType);
  }
  void add_friendliesRemarks(::flatbuffers::Offset<::flatbuffers::String> friendliesRemarks) {
    fbb_.AddOffset(PersonnelRecoveryEnemyData_Abridged::VT_FRIENDLIESREMARKS, friendliesRemarks);
  }
  void add_hlzRemarks(::flatbuffers::Offset<::flatbuffers::String> hlzRemarks) {
    fbb_.AddOffset(PersonnelRecoveryEnemyData_Abridged::VT_HLZREMARKS, hlzRemarks);
  }
  explicit PersonnelRecoveryEnemyData_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged> CreatePersonnelRecoveryEnemyData_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> dirToEnemy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostileFireType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> friendliesRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hlzRemarks = 0) {
  PersonnelRecoveryEnemyData_AbridgedBuilder builder_(_fbb);
  builder_.add_hlzRemarks(hlzRemarks);
  builder_.add_friendliesRemarks(friendliesRemarks);
  builder_.add_hostileFireType(hostileFireType);
  builder_.add_dirToEnemy(dirToEnemy);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged> CreatePersonnelRecoveryEnemyData_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *dirToEnemy = nullptr,
    const char *hostileFireType = nullptr,
    const char *friendliesRemarks = nullptr,
    const char *hlzRemarks = nullptr) {
  auto dirToEnemy__ = dirToEnemy ? _fbb.CreateString(dirToEnemy) : 0;
  auto hostileFireType__ = hostileFireType ? _fbb.CreateString(hostileFireType) : 0;
  auto friendliesRemarks__ = friendliesRemarks ? _fbb.CreateString(friendliesRemarks) : 0;
  auto hlzRemarks__ = hlzRemarks ? _fbb.CreateString(hlzRemarks) : 0;
  return CreatePersonnelRecoveryEnemyData_Abridged(
      _fbb,
      dirToEnemy__,
      hostileFireType__,
      friendliesRemarks__,
      hlzRemarks__);
}

inline const PersonnelRecoveryEnemyData_Abridged *GetPersonnelRecoveryEnemyData_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<PersonnelRecoveryEnemyData_Abridged>(buf);
}

inline const PersonnelRecoveryEnemyData_Abridged *GetSizePrefixedPersonnelRecoveryEnemyData_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonnelRecoveryEnemyData_Abridged>(buf);
}

inline const char *PersonnelRecoveryEnemyData_AbridgedIdentifier() {
  return "PERS";
}

inline bool PersonnelRecoveryEnemyData_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryEnemyData_AbridgedIdentifier());
}

inline bool SizePrefixedPersonnelRecoveryEnemyData_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryEnemyData_AbridgedIdentifier(), true);
}

inline bool VerifyPersonnelRecoveryEnemyData_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonnelRecoveryEnemyData_Abridged>(PersonnelRecoveryEnemyData_AbridgedIdentifier());
}

inline bool VerifySizePrefixedPersonnelRecoveryEnemyData_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonnelRecoveryEnemyData_Abridged>(PersonnelRecoveryEnemyData_AbridgedIdentifier());
}

inline void FinishPersonnelRecoveryEnemyData_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged> root) {
  fbb.Finish(root, PersonnelRecoveryEnemyData_AbridgedIdentifier());
}

inline void FinishSizePrefixedPersonnelRecoveryEnemyData_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryEnemyData_Abridged> root) {
  fbb.FinishSizePrefixed(root, PersonnelRecoveryEnemyData_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
