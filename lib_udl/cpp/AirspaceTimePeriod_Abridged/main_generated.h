// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirspaceTimePeriod_Abridged;
struct AirspaceTimePeriod_AbridgedBuilder;

/// /// The timePeriod set describes the effective datetime for a given airspace control means.
struct AirspaceTimePeriod_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirspaceTimePeriod_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMEMODE = 4,
    VT_TIMESTART = 6,
    VT_TIMEEND = 8,
    VT_INTFREQ = 10,
    VT_INTDUR = 12
  };
  /// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
  /// Example: /// Example: DISCRETE
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *timeMode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMEMODE);
  }
  /// The start time designating that the airspace control order is active.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *timeStart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMESTART);
  }
  /// The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *timeEnd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMEEND);
  }
  /// Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
  /// Example: /// Example: ['WEEKLY']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *intFreq() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTFREQ);
  }
  /// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
  /// Example: /// Example: ['65WK']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *intDur() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTDUR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TIMEMODE) &&
           verifier.VerifyString(timeMode()) &&
           VerifyOffset(verifier, VT_TIMESTART) &&
           verifier.VerifyString(timeStart()) &&
           VerifyOffset(verifier, VT_TIMEEND) &&
           verifier.VerifyString(timeEnd()) &&
           VerifyOffset(verifier, VT_INTFREQ) &&
           verifier.VerifyVector(intFreq()) &&
           verifier.VerifyVectorOfStrings(intFreq()) &&
           VerifyOffset(verifier, VT_INTDUR) &&
           verifier.VerifyVector(intDur()) &&
           verifier.VerifyVectorOfStrings(intDur()) &&
           verifier.EndTable();
  }
};

struct AirspaceTimePeriod_AbridgedBuilder {
  typedef AirspaceTimePeriod_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timeMode(::flatbuffers::Offset<::flatbuffers::String> timeMode) {
    fbb_.AddOffset(AirspaceTimePeriod_Abridged::VT_TIMEMODE, timeMode);
  }
  void add_timeStart(::flatbuffers::Offset<::flatbuffers::String> timeStart) {
    fbb_.AddOffset(AirspaceTimePeriod_Abridged::VT_TIMESTART, timeStart);
  }
  void add_timeEnd(::flatbuffers::Offset<::flatbuffers::String> timeEnd) {
    fbb_.AddOffset(AirspaceTimePeriod_Abridged::VT_TIMEEND, timeEnd);
  }
  void add_intFreq(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intFreq) {
    fbb_.AddOffset(AirspaceTimePeriod_Abridged::VT_INTFREQ, intFreq);
  }
  void add_intDur(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intDur) {
    fbb_.AddOffset(AirspaceTimePeriod_Abridged::VT_INTDUR, intDur);
  }
  explicit AirspaceTimePeriod_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirspaceTimePeriod_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirspaceTimePeriod_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirspaceTimePeriod_Abridged> CreateAirspaceTimePeriod_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> timeMode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> timeStart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> timeEnd = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intFreq = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> intDur = 0) {
  AirspaceTimePeriod_AbridgedBuilder builder_(_fbb);
  builder_.add_intDur(intDur);
  builder_.add_intFreq(intFreq);
  builder_.add_timeEnd(timeEnd);
  builder_.add_timeStart(timeStart);
  builder_.add_timeMode(timeMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirspaceTimePeriod_Abridged> CreateAirspaceTimePeriod_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *timeMode = nullptr,
    const char *timeStart = nullptr,
    const char *timeEnd = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *intFreq = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *intDur = nullptr) {
  auto timeMode__ = timeMode ? _fbb.CreateString(timeMode) : 0;
  auto timeStart__ = timeStart ? _fbb.CreateString(timeStart) : 0;
  auto timeEnd__ = timeEnd ? _fbb.CreateString(timeEnd) : 0;
  auto intFreq__ = intFreq ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*intFreq) : 0;
  auto intDur__ = intDur ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*intDur) : 0;
  return CreateAirspaceTimePeriod_Abridged(
      _fbb,
      timeMode__,
      timeStart__,
      timeEnd__,
      intFreq__,
      intDur__);
}

inline const AirspaceTimePeriod_Abridged *GetAirspaceTimePeriod_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AirspaceTimePeriod_Abridged>(buf);
}

inline const AirspaceTimePeriod_Abridged *GetSizePrefixedAirspaceTimePeriod_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirspaceTimePeriod_Abridged>(buf);
}

inline const char *AirspaceTimePeriod_AbridgedIdentifier() {
  return "AIRS";
}

inline bool AirspaceTimePeriod_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceTimePeriod_AbridgedIdentifier());
}

inline bool SizePrefixedAirspaceTimePeriod_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceTimePeriod_AbridgedIdentifier(), true);
}

inline bool VerifyAirspaceTimePeriod_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirspaceTimePeriod_Abridged>(AirspaceTimePeriod_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAirspaceTimePeriod_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirspaceTimePeriod_Abridged>(AirspaceTimePeriod_AbridgedIdentifier());
}

inline void FinishAirspaceTimePeriod_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceTimePeriod_Abridged> root) {
  fbb.Finish(root, AirspaceTimePeriod_AbridgedIdentifier());
}

inline void FinishSizePrefixedAirspaceTimePeriod_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceTimePeriod_Abridged> root) {
  fbb.FinishSizePrefixed(root, AirspaceTimePeriod_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
