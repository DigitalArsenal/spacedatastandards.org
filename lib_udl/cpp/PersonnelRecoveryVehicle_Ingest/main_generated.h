// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PersonnelRecoveryVehicle_Ingest;
struct PersonnelRecoveryVehicle_IngestBuilder;

/// /// Information regarding the recovery vehicle.
struct PersonnelRecoveryVehicle_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonnelRecoveryVehicle_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CALLSIGN = 4,
    VT_TYPE = 6,
    VT_PRIMARYFREQ = 8,
    VT_STRENGTH = 10
  };
  /// The call sign of the recovery vehicle.
  /// Example: /// Example: FALCO
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The particular type of recovery vehicle to be used.
  /// Example: /// Example: C17
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Primary contact frequency of the recovery vehicle.
  /// Example: /// Example: 34.55
  /// Constraints: No constraints specified.
  double primaryFreq() const {
    return GetField<double>(VT_PRIMARYFREQ, 0.0);
  }
  /// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t strength() const {
    return GetField<int32_t>(VT_STRENGTH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_PRIMARYFREQ, 8) &&
           VerifyField<int32_t>(verifier, VT_STRENGTH, 4) &&
           verifier.EndTable();
  }
};

struct PersonnelRecoveryVehicle_IngestBuilder {
  typedef PersonnelRecoveryVehicle_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(PersonnelRecoveryVehicle_Ingest::VT_CALLSIGN, callSign);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(PersonnelRecoveryVehicle_Ingest::VT_TYPE, type);
  }
  void add_primaryFreq(double primaryFreq) {
    fbb_.AddElement<double>(PersonnelRecoveryVehicle_Ingest::VT_PRIMARYFREQ, primaryFreq, 0.0);
  }
  void add_strength(int32_t strength) {
    fbb_.AddElement<int32_t>(PersonnelRecoveryVehicle_Ingest::VT_STRENGTH, strength, 0);
  }
  explicit PersonnelRecoveryVehicle_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest> CreatePersonnelRecoveryVehicle_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double primaryFreq = 0.0,
    int32_t strength = 0) {
  PersonnelRecoveryVehicle_IngestBuilder builder_(_fbb);
  builder_.add_primaryFreq(primaryFreq);
  builder_.add_strength(strength);
  builder_.add_type(type);
  builder_.add_callSign(callSign);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest> CreatePersonnelRecoveryVehicle_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *callSign = nullptr,
    const char *type = nullptr,
    double primaryFreq = 0.0,
    int32_t strength = 0) {
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return CreatePersonnelRecoveryVehicle_Ingest(
      _fbb,
      callSign__,
      type__,
      primaryFreq,
      strength);
}

inline const PersonnelRecoveryVehicle_Ingest *GetPersonnelRecoveryVehicle_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<PersonnelRecoveryVehicle_Ingest>(buf);
}

inline const PersonnelRecoveryVehicle_Ingest *GetSizePrefixedPersonnelRecoveryVehicle_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonnelRecoveryVehicle_Ingest>(buf);
}

inline const char *PersonnelRecoveryVehicle_IngestIdentifier() {
  return "PERS";
}

inline bool PersonnelRecoveryVehicle_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryVehicle_IngestIdentifier());
}

inline bool SizePrefixedPersonnelRecoveryVehicle_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecoveryVehicle_IngestIdentifier(), true);
}

inline bool VerifyPersonnelRecoveryVehicle_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonnelRecoveryVehicle_Ingest>(PersonnelRecoveryVehicle_IngestIdentifier());
}

inline bool VerifySizePrefixedPersonnelRecoveryVehicle_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonnelRecoveryVehicle_Ingest>(PersonnelRecoveryVehicle_IngestIdentifier());
}

inline void FinishPersonnelRecoveryVehicle_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest> root) {
  fbb.Finish(root, PersonnelRecoveryVehicle_IngestIdentifier());
}

inline void FinishSizePrefixedPersonnelRecoveryVehicle_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecoveryVehicle_Ingest> root) {
  fbb.FinishSizePrefixed(root, PersonnelRecoveryVehicle_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
