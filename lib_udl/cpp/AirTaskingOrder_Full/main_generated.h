// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirTaskingOrder_Full;
struct AirTaskingOrder_FullBuilder;

enum AirTaskingOrder_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirTaskingOrder_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirTaskingOrder_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirTaskingOrder_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirTaskingOrder_Full_dataMode_Enum_EXERCISE = 3,
  AirTaskingOrder_Full_dataMode_Enum_MIN = AirTaskingOrder_Full_dataMode_Enum_REAL,
  AirTaskingOrder_Full_dataMode_Enum_MAX = AirTaskingOrder_Full_dataMode_Enum_EXERCISE
};

inline const AirTaskingOrder_Full_dataMode_Enum (&EnumValuesAirTaskingOrder_Full_dataMode_Enum())[4] {
  static const AirTaskingOrder_Full_dataMode_Enum values[] = {
    AirTaskingOrder_Full_dataMode_Enum_REAL,
    AirTaskingOrder_Full_dataMode_Enum_TEST,
    AirTaskingOrder_Full_dataMode_Enum_SIMULATED,
    AirTaskingOrder_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirTaskingOrder_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirTaskingOrder_Full_dataMode_Enum(AirTaskingOrder_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirTaskingOrder_Full_dataMode_Enum_REAL, AirTaskingOrder_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirTaskingOrder_Full_dataMode_Enum()[index];
}

/// /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
struct AirTaskingOrder_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirTaskingOrder_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_RAWFILEURI = 8,
    VT_OPEXERNAME = 10,
    VT_MSGORIGINATOR = 12,
    VT_MSGSN = 14,
    VT_MSGMONTH = 16,
    VT_MSGQUALIFIER = 18,
    VT_ACKREQIND = 20,
    VT_ACKUNITINSTRUCTIONS = 22,
    VT_BEGINTS = 24,
    VT_ENDTS = 26,
    VT_GENTEXT = 28,
    VT_ACMSNTASKING = 30,
    VT_NAVALFLTOPS = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_SOURCE = 38,
    VT_SOURCEDL = 40,
    VT_ORIGIN = 42,
    VT_ORIGNETWORK = 44,
    VT_DATAMODE = 46
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *opExerName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPEXERNAME);
  }
  /// The identifier of the originator of the message.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *msgOriginator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGORIGINATOR);
  }
  /// The unique message identifier sequentially assigned by the originator.
  /// Example: /// Example: ATO A
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *msgSN() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGSN);
  }
  /// The month in which the message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *msgMonth() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGMONTH);
  }
  /// The qualifier which caveats the message status.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *msgQualifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGQUALIFIER);
  }
  /// The indicator specifying an affirmative or a negatice condition for this message.
  /// Example: /// Example: YES
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *ackReqInd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACKREQIND);
  }
  /// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
  /// Example: /// Example: INST:45TS
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *ackUnitInstructions() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACKUNITINSTRUCTIONS);
  }
  /// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *beginTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BEGINTS);
  }
  /// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-27T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTS);
  }
  /// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *genText() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_GENTEXT);
  }
  /// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *acMsnTasking() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACMSNTASKING);
  }
  /// A collection that specifies the naval flight operations for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *navalFltOps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NAVALFLTOPS);
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirTaskingOrder_Full_dataMode_Enum dataMode() const {
    return static_cast<AirTaskingOrder_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_OPEXERNAME) &&
           verifier.VerifyString(opExerName()) &&
           VerifyOffset(verifier, VT_MSGORIGINATOR) &&
           verifier.VerifyString(msgOriginator()) &&
           VerifyOffset(verifier, VT_MSGSN) &&
           verifier.VerifyString(msgSN()) &&
           VerifyOffset(verifier, VT_MSGMONTH) &&
           verifier.VerifyString(msgMonth()) &&
           VerifyOffset(verifier, VT_MSGQUALIFIER) &&
           verifier.VerifyString(msgQualifier()) &&
           VerifyOffset(verifier, VT_ACKREQIND) &&
           verifier.VerifyString(ackReqInd()) &&
           VerifyOffset(verifier, VT_ACKUNITINSTRUCTIONS) &&
           verifier.VerifyString(ackUnitInstructions()) &&
           VerifyOffset(verifier, VT_BEGINTS) &&
           verifier.VerifyString(beginTs()) &&
           VerifyOffset(verifier, VT_ENDTS) &&
           verifier.VerifyString(endTs()) &&
           VerifyOffset(verifier, VT_GENTEXT) &&
           verifier.VerifyVector(genText()) &&
           verifier.VerifyVectorOfStrings(genText()) &&
           VerifyOffset(verifier, VT_ACMSNTASKING) &&
           verifier.VerifyVector(acMsnTasking()) &&
           verifier.VerifyVectorOfStrings(acMsnTasking()) &&
           VerifyOffset(verifier, VT_NAVALFLTOPS) &&
           verifier.VerifyVector(navalFltOps()) &&
           verifier.VerifyVectorOfStrings(navalFltOps()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AirTaskingOrder_FullBuilder {
  typedef AirTaskingOrder_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_RAWFILEURI, rawFileURI);
  }
  void add_opExerName(::flatbuffers::Offset<::flatbuffers::String> opExerName) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_OPEXERNAME, opExerName);
  }
  void add_msgOriginator(::flatbuffers::Offset<::flatbuffers::String> msgOriginator) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_MSGORIGINATOR, msgOriginator);
  }
  void add_msgSN(::flatbuffers::Offset<::flatbuffers::String> msgSN) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_MSGSN, msgSN);
  }
  void add_msgMonth(::flatbuffers::Offset<::flatbuffers::String> msgMonth) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_MSGMONTH, msgMonth);
  }
  void add_msgQualifier(::flatbuffers::Offset<::flatbuffers::String> msgQualifier) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_MSGQUALIFIER, msgQualifier);
  }
  void add_ackReqInd(::flatbuffers::Offset<::flatbuffers::String> ackReqInd) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ACKREQIND, ackReqInd);
  }
  void add_ackUnitInstructions(::flatbuffers::Offset<::flatbuffers::String> ackUnitInstructions) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ACKUNITINSTRUCTIONS, ackUnitInstructions);
  }
  void add_beginTs(::flatbuffers::Offset<::flatbuffers::String> beginTs) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_BEGINTS, beginTs);
  }
  void add_endTs(::flatbuffers::Offset<::flatbuffers::String> endTs) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ENDTS, endTs);
  }
  void add_genText(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> genText) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_GENTEXT, genText);
  }
  void add_acMsnTasking(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acMsnTasking) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ACMSNTASKING, acMsnTasking);
  }
  void add_navalFltOps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> navalFltOps) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_NAVALFLTOPS, navalFltOps);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_SOURCE, source);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_SOURCEDL, sourceDL);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirTaskingOrder_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AirTaskingOrder_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirTaskingOrder_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AirTaskingOrder_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirTaskingOrder_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirTaskingOrder_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirTaskingOrder_Full> CreateAirTaskingOrder_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> opExerName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgOriginator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgSN = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgMonth = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgQualifier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ackReqInd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ackUnitInstructions = 0,
    ::flatbuffers::Offset<::flatbuffers::String> beginTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> genText = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acMsnTasking = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> navalFltOps = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AirTaskingOrder_Full_dataMode_Enum dataMode = AirTaskingOrder_Full_dataMode_Enum_REAL) {
  AirTaskingOrder_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_sourceDL(sourceDL);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_navalFltOps(navalFltOps);
  builder_.add_acMsnTasking(acMsnTasking);
  builder_.add_genText(genText);
  builder_.add_endTs(endTs);
  builder_.add_beginTs(beginTs);
  builder_.add_ackUnitInstructions(ackUnitInstructions);
  builder_.add_ackReqInd(ackReqInd);
  builder_.add_msgQualifier(msgQualifier);
  builder_.add_msgMonth(msgMonth);
  builder_.add_msgSN(msgSN);
  builder_.add_msgOriginator(msgOriginator);
  builder_.add_opExerName(opExerName);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirTaskingOrder_Full> CreateAirTaskingOrder_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *rawFileURI = nullptr,
    const char *opExerName = nullptr,
    const char *msgOriginator = nullptr,
    const char *msgSN = nullptr,
    const char *msgMonth = nullptr,
    const char *msgQualifier = nullptr,
    const char *ackReqInd = nullptr,
    const char *ackUnitInstructions = nullptr,
    const char *beginTs = nullptr,
    const char *endTs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *genText = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *acMsnTasking = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *navalFltOps = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *sourceDL = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AirTaskingOrder_Full_dataMode_Enum dataMode = AirTaskingOrder_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto opExerName__ = opExerName ? _fbb.CreateString(opExerName) : 0;
  auto msgOriginator__ = msgOriginator ? _fbb.CreateString(msgOriginator) : 0;
  auto msgSN__ = msgSN ? _fbb.CreateString(msgSN) : 0;
  auto msgMonth__ = msgMonth ? _fbb.CreateString(msgMonth) : 0;
  auto msgQualifier__ = msgQualifier ? _fbb.CreateString(msgQualifier) : 0;
  auto ackReqInd__ = ackReqInd ? _fbb.CreateString(ackReqInd) : 0;
  auto ackUnitInstructions__ = ackUnitInstructions ? _fbb.CreateString(ackUnitInstructions) : 0;
  auto beginTs__ = beginTs ? _fbb.CreateString(beginTs) : 0;
  auto endTs__ = endTs ? _fbb.CreateString(endTs) : 0;
  auto genText__ = genText ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*genText) : 0;
  auto acMsnTasking__ = acMsnTasking ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*acMsnTasking) : 0;
  auto navalFltOps__ = navalFltOps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*navalFltOps) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirTaskingOrder_Full(
      _fbb,
      id__,
      classificationMarking__,
      rawFileURI__,
      opExerName__,
      msgOriginator__,
      msgSN__,
      msgMonth__,
      msgQualifier__,
      ackReqInd__,
      ackUnitInstructions__,
      beginTs__,
      endTs__,
      genText__,
      acMsnTasking__,
      navalFltOps__,
      createdAt__,
      createdBy__,
      source__,
      sourceDL__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AirTaskingOrder_Full *GetAirTaskingOrder_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AirTaskingOrder_Full>(buf);
}

inline const AirTaskingOrder_Full *GetSizePrefixedAirTaskingOrder_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirTaskingOrder_Full>(buf);
}

inline const char *AirTaskingOrder_FullIdentifier() {
  return "AIRT";
}

inline bool AirTaskingOrder_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirTaskingOrder_FullIdentifier());
}

inline bool SizePrefixedAirTaskingOrder_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirTaskingOrder_FullIdentifier(), true);
}

inline bool VerifyAirTaskingOrder_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirTaskingOrder_Full>(AirTaskingOrder_FullIdentifier());
}

inline bool VerifySizePrefixedAirTaskingOrder_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirTaskingOrder_Full>(AirTaskingOrder_FullIdentifier());
}

inline void FinishAirTaskingOrder_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirTaskingOrder_Full> root) {
  fbb.Finish(root, AirTaskingOrder_FullIdentifier());
}

inline void FinishSizePrefixedAirTaskingOrder_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirTaskingOrder_Full> root) {
  fbb.FinishSizePrefixed(root, AirTaskingOrder_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
