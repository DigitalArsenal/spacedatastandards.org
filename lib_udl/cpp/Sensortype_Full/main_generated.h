// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Sensortype_Full;
struct Sensortype_FullBuilder;

enum Sensortype_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Sensortype_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Sensortype_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Sensortype_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Sensortype_Full_dataMode_Enum_EXERCISE = 3,
  Sensortype_Full_dataMode_Enum_MIN = Sensortype_Full_dataMode_Enum_REAL,
  Sensortype_Full_dataMode_Enum_MAX = Sensortype_Full_dataMode_Enum_EXERCISE
};

inline const Sensortype_Full_dataMode_Enum (&EnumValuesSensortype_Full_dataMode_Enum())[4] {
  static const Sensortype_Full_dataMode_Enum values[] = {
    Sensortype_Full_dataMode_Enum_REAL,
    Sensortype_Full_dataMode_Enum_TEST,
    Sensortype_Full_dataMode_Enum_SIMULATED,
    Sensortype_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSensortype_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSensortype_Full_dataMode_Enum(Sensortype_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Sensortype_Full_dataMode_Enum_REAL, Sensortype_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSensortype_Full_dataMode_Enum()[index];
}

/// /// No description available.
struct Sensortype_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Sensortype_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_SOURCE = 8,
    VT_DATAMODE = 10,
    VT_CREATEDAT = 12,
    VT_CREATEDBY = 14,
    VT_UPDATEDAT = 16,
    VT_UPDATEDBY = 18,
    VT_ORIGNETWORK = 20
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 12344411
  /// Constraints: No constraints specified.
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  /// The specific sensor type and/or surveillance capability of this sensor.
  /// Example: /// Example: Space Borne
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Source of the data.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Sensortype_Full_dataMode_Enum dataMode() const {
    return static_cast<Sensortype_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Sensortype_FullBuilder {
  typedef Sensortype_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(Sensortype_Full::VT_ID, id, 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Sensortype_Full::VT_TYPE, type);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Sensortype_Full::VT_SOURCE, source);
  }
  void add_dataMode(Sensortype_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Sensortype_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Sensortype_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Sensortype_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Sensortype_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Sensortype_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Sensortype_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit Sensortype_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sensortype_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sensortype_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sensortype_Full> CreateSensortype_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    Sensortype_Full_dataMode_Enum dataMode = Sensortype_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Sensortype_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_source(source);
  builder_.add_type(type);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Sensortype_Full> CreateSensortype_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *type = nullptr,
    const char *source = nullptr,
    Sensortype_Full_dataMode_Enum dataMode = Sensortype_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *origNetwork = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSensortype_Full(
      _fbb,
      id,
      type__,
      source__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      origNetwork__);
}

inline const Sensortype_Full *GetSensortype_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Sensortype_Full>(buf);
}

inline const Sensortype_Full *GetSizePrefixedSensortype_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Sensortype_Full>(buf);
}

inline const char *Sensortype_FullIdentifier() {
  return "SENS";
}

inline bool Sensortype_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensortype_FullIdentifier());
}

inline bool SizePrefixedSensortype_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensortype_FullIdentifier(), true);
}

inline bool VerifySensortype_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensortype_Full>(Sensortype_FullIdentifier());
}

inline bool VerifySizePrefixedSensortype_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensortype_Full>(Sensortype_FullIdentifier());
}

inline void FinishSensortype_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensortype_Full> root) {
  fbb.Finish(root, Sensortype_FullIdentifier());
}

inline void FinishSizePrefixedSensortype_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensortype_Full> root) {
  fbb.FinishSizePrefixed(root, Sensortype_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
