// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Track_Abridged;
struct Track_AbridgedBuilder;

enum Track_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Track_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Track_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Track_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Track_Abridged_dataMode_Enum_EXERCISE = 3,
  Track_Abridged_dataMode_Enum_MIN = Track_Abridged_dataMode_Enum_REAL,
  Track_Abridged_dataMode_Enum_MAX = Track_Abridged_dataMode_Enum_EXERCISE
};

inline const Track_Abridged_dataMode_Enum (&EnumValuesTrack_Abridged_dataMode_Enum())[4] {
  static const Track_Abridged_dataMode_Enum values[] = {
    Track_Abridged_dataMode_Enum_REAL,
    Track_Abridged_dataMode_Enum_TEST,
    Track_Abridged_dataMode_Enum_SIMULATED,
    Track_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesTrack_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameTrack_Abridged_dataMode_Enum(Track_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Track_Abridged_dataMode_Enum_REAL, Track_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTrack_Abridged_dataMode_Enum()[index];
}

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
struct Track_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Track_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_CNTCT = 8,
    VT_CREATEDAT = 10,
    VT_CREATEDBY = 12,
    VT_MSGTS = 14,
    VT_MSNID = 16,
    VT_ASSETNAT = 18,
    VT_ASSET = 20,
    VT_SEN = 22,
    VT_SENQUAL = 24,
    VT_TRKID = 26,
    VT_TRKNUM = 28,
    VT_TRKSTAT = 30,
    VT_OBJNAT = 32,
    VT_OBJID = 34,
    VT_OBJTYPE = 36,
    VT_OBJSPEC = 38,
    VT_OBJPLAT = 40,
    VT_OBJACT = 42,
    VT_MODTYPE = 44,
    VT_TRKITMID = 46,
    VT_TS = 48,
    VT_TRKQUAL = 50,
    VT_TRKPTTYPE = 52,
    VT_OBJIDENT = 54,
    VT_IDENTCRED = 56,
    VT_IDENTREL = 58,
    VT_IDENTAMP = 60,
    VT_ENV = 62,
    VT_ENVCONF = 64,
    VT_TRKCONF = 66,
    VT_ECEFPOS = 68,
    VT_ECEFVEL = 70,
    VT_ECEFACC = 72,
    VT_LAT = 74,
    VT_LON = 76,
    VT_ALT = 78,
    VT_SPD = 80,
    VT_HDNG = 82,
    VT_COURSE = 84,
    VT_LCO = 86,
    VT_LCS = 88,
    VT_LCPOS = 90,
    VT_LCVEL = 92,
    VT_LCACC = 94,
    VT_ENUVEL = 96,
    VT_ENUPOS = 98,
    VT_COV = 100,
    VT_ERRELLP = 102,
    VT_SRCTYPS = 104,
    VT_SRCIDS = 106,
    VT_CALLSIGN = 108,
    VT_MULTISOURCE = 110,
    VT_JSERIES = 112,
    VT_STRENGTH = 114,
    VT_M1 = 116,
    VT_M1V = 118,
    VT_M2 = 120,
    VT_M2V = 122,
    VT_M3A = 124,
    VT_M3AV = 126,
    VT_TAGS = 128,
    VT_SOURCEDL = 130,
    VT_SOURCE = 132,
    VT_ORIGIN = 134,
    VT_DATAMODE = 136,
    VT_ORIGNETWORK = 138
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *cntct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CNTCT);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Message Timestamp.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *msgTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTS);
  }
  /// Mission ID related to the track.
  /// Example: /// Example: msnId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *msnId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNID);
  }
  /// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *assetNat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSETNAT);
  }
  /// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
  /// Example: /// Example: asset
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *asset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSET);
  }
  /// Id/name of sensor providing the track data.
  /// Example: /// Example: sen
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *sen() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEN);
  }
  /// Sensor quality.
  /// Example: /// Example: senQual
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *senQual() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENQUAL);
  }
  /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  /// Example: /// Example: trkId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKID);
  }
  /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  /// Example: /// Example: trkNum
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *trkNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKNUM);
  }
  /// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
  /// Example: /// Example: INITIATING
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *trkStat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKSTAT);
  }
  /// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: NATO
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *objNat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJNAT);
  }
  /// The UID or designation of the tracked object.
  /// Example: /// Example: objId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *objId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJID);
  }
  /// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  /// Example: /// Example: WATERCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJTYPE);
  }
  /// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objSpec() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJSPEC);
  }
  /// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objPlat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJPLAT);
  }
  /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  /// Example: /// Example: HOLDING
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objAct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJACT);
  }
  /// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
  /// AIS: Derived from an automated identification system source.
  /// BFT: Derived from a blue force tracking source.
  /// BIOMETRICS: Derived from a biometrics source.
  /// COMINT: Derived from a communications intelligence source.
  /// DOPPLER: Derived from a radar doppler source.
  /// ELINT: Derived from an electronics intelligence source.
  /// HRR: Derived from a radar high range resolution source.
  /// HUMINT: Derived from a human intelligence source.
  /// IMAGE: Derived from a still or motion imagery source.
  /// MASINT: Derived from a measurement and signals intelligence source.
  /// MIXED: Derived from a combination of two or more sources.
  /// OSINT: Derived from an open source intelligence source.
  /// OTHER: Derived from other types of unspecified sources.
  /// Example: /// Example: MASINT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *modType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODTYPE);
  }
  /// UUID of the track item object, applies to STANAG-4676 messages.
  /// Example: /// Example: trkItmId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trkItmId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKITMID);
  }
  /// Track timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2021-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// Value indicating track quality (not standardized).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t trkQual() const {
    return GetField<int32_t>(VT_TRKQUAL, 0);
  }
  /// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
  /// Example: /// Example: MEASURED
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *trkPtType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKPTTYPE);
  }
  /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objIdent() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJIDENT);
  }
  /// Track object identity credibility.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t identCred() const {
    return GetField<int32_t>(VT_IDENTCRED, 0);
  }
  /// Track object identity reliability.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t identRel() const {
    return GetField<int32_t>(VT_IDENTREL, 0);
  }
  /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// KILO: Friendly high-value object.
  /// TRAVELLER: Suspect land or surface track following a recognized traffic route.
  /// ZOMBIE: Suspect track, object, or entity of special interest.
  /// Example: /// Example: ZOMBIE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *identAmp() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTAMP);
  }
  /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  /// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// LAND: On the surface of dry land.
  /// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// SURFACE: On the surface of a body of water.
  /// SUBSURFACE: Below the surface of a body of water.
  /// UNKNOWN: Environment is not known.
  /// Example: /// Example: LAND
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *env() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENV);
  }
  /// Track environment confidence estimate (not standardized).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double envConf() const {
    return GetField<double>(VT_ENVCONF, 0.0);
  }
  /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double trkConf() const {
    return GetField<double>(VT_TRKCONF, 0.0);
  }
  /// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefPos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ECEFPOS);
  }
  /// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefVel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ECEFVEL);
  }
  /// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefAcc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ECEFACC);
  }
  /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// Track object spd, in meters/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double spd() const {
    return GetField<double>(VT_SPD, 0.0);
  }
  /// The track object heading, in degrees clockwise from true North at the object location.
  /// Example: /// Example: 19.7
  /// Constraints: No constraints specified.
  double hdng() const {
    return GetField<double>(VT_HDNG, 0.0);
  }
  /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  /// Example: /// Example: 88.37
  /// Constraints: No constraints specified.
  double course() const {
    return GetField<double>(VT_COURSE, 0.0);
  }
  /// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lco() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LCO);
  }
  /// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lcs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LCS);
  }
  /// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lcPos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LCPOS);
  }
  /// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lcVel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LCVEL);
  }
  /// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *lcAcc() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LCACC);
  }
  /// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *eNUVel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ENUVEL);
  }
  /// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *eNUPos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ENUPOS);
  }
  /// Covariance matrix, in meter and second based units, for the defined cartesian system.
  /// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  /// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *cov() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COV);
  }
  /// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *errEllp() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ERRELLP);
  }
  /// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['MTI', 'POI']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
  /// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// The call sign currently assigned to this track object.
  /// Example: /// Example: callSign
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// Flag indicating that this track is fused from multiple sensor sources.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool multiSource() const {
    return GetField<uint8_t>(VT_MULTISOURCE, 0) != 0;
  }
  /// The J-series message type, if this track is derived from a J-series message.
  /// Example: /// Example: J12.5
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *jSeries() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JSERIES);
  }
  /// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  int32_t strength() const {
    return GetField<int32_t>(VT_STRENGTH, 0);
  }
  /// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  int32_t m1() const {
    return GetField<int32_t>(VT_M1, 0);
  }
  /// Mode-1 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t m1v() const {
    return GetField<int32_t>(VT_M1V, 0);
  }
  /// Mode-2 interrogation response (military identification code).
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  int32_t m2() const {
    return GetField<int32_t>(VT_M2, 0);
  }
  /// Mode-2 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t m2v() const {
    return GetField<int32_t>(VT_M2V, 0);
  }
  /// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
  /// Example: /// Example: 2636
  /// Constraints: No constraints specified.
  int32_t m3a() const {
    return GetField<int32_t>(VT_M3A, 0);
  }
  /// Mode-3/A validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t m3av() const {
    return GetField<int32_t>(VT_M3AV, 0);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Track_Abridged_dataMode_Enum dataMode() const {
    return static_cast<Track_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_CNTCT) &&
           verifier.VerifyString(cntct()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_MSGTS) &&
           verifier.VerifyString(msgTs()) &&
           VerifyOffset(verifier, VT_MSNID) &&
           verifier.VerifyString(msnId()) &&
           VerifyOffset(verifier, VT_ASSETNAT) &&
           verifier.VerifyString(assetNat()) &&
           VerifyOffset(verifier, VT_ASSET) &&
           verifier.VerifyString(asset()) &&
           VerifyOffset(verifier, VT_SEN) &&
           verifier.VerifyString(sen()) &&
           VerifyOffset(verifier, VT_SENQUAL) &&
           verifier.VerifyString(senQual()) &&
           VerifyOffset(verifier, VT_TRKID) &&
           verifier.VerifyString(trkId()) &&
           VerifyOffset(verifier, VT_TRKNUM) &&
           verifier.VerifyString(trkNum()) &&
           VerifyOffset(verifier, VT_TRKSTAT) &&
           verifier.VerifyString(trkStat()) &&
           VerifyOffset(verifier, VT_OBJNAT) &&
           verifier.VerifyString(objNat()) &&
           VerifyOffset(verifier, VT_OBJID) &&
           verifier.VerifyString(objId()) &&
           VerifyOffset(verifier, VT_OBJTYPE) &&
           verifier.VerifyString(objType()) &&
           VerifyOffset(verifier, VT_OBJSPEC) &&
           verifier.VerifyString(objSpec()) &&
           VerifyOffset(verifier, VT_OBJPLAT) &&
           verifier.VerifyString(objPlat()) &&
           VerifyOffset(verifier, VT_OBJACT) &&
           verifier.VerifyString(objAct()) &&
           VerifyOffset(verifier, VT_MODTYPE) &&
           verifier.VerifyString(modType()) &&
           VerifyOffset(verifier, VT_TRKITMID) &&
           verifier.VerifyString(trkItmId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyField<int32_t>(verifier, VT_TRKQUAL, 4) &&
           VerifyOffset(verifier, VT_TRKPTTYPE) &&
           verifier.VerifyString(trkPtType()) &&
           VerifyOffset(verifier, VT_OBJIDENT) &&
           verifier.VerifyString(objIdent()) &&
           VerifyField<int32_t>(verifier, VT_IDENTCRED, 4) &&
           VerifyField<int32_t>(verifier, VT_IDENTREL, 4) &&
           VerifyOffset(verifier, VT_IDENTAMP) &&
           verifier.VerifyString(identAmp()) &&
           VerifyOffset(verifier, VT_ENV) &&
           verifier.VerifyString(env()) &&
           VerifyField<double>(verifier, VT_ENVCONF, 8) &&
           VerifyField<double>(verifier, VT_TRKCONF, 8) &&
           VerifyOffset(verifier, VT_ECEFPOS) &&
           verifier.VerifyVector(ecefPos()) &&
           verifier.VerifyVectorOfStrings(ecefPos()) &&
           VerifyOffset(verifier, VT_ECEFVEL) &&
           verifier.VerifyVector(ecefVel()) &&
           verifier.VerifyVectorOfStrings(ecefVel()) &&
           VerifyOffset(verifier, VT_ECEFACC) &&
           verifier.VerifyVector(ecefAcc()) &&
           verifier.VerifyVectorOfStrings(ecefAcc()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyField<double>(verifier, VT_SPD, 8) &&
           VerifyField<double>(verifier, VT_HDNG, 8) &&
           VerifyField<double>(verifier, VT_COURSE, 8) &&
           VerifyOffset(verifier, VT_LCO) &&
           verifier.VerifyVector(lco()) &&
           verifier.VerifyVectorOfStrings(lco()) &&
           VerifyOffset(verifier, VT_LCS) &&
           verifier.VerifyVector(lcs()) &&
           verifier.VerifyVectorOfStrings(lcs()) &&
           VerifyOffset(verifier, VT_LCPOS) &&
           verifier.VerifyVector(lcPos()) &&
           verifier.VerifyVectorOfStrings(lcPos()) &&
           VerifyOffset(verifier, VT_LCVEL) &&
           verifier.VerifyVector(lcVel()) &&
           verifier.VerifyVectorOfStrings(lcVel()) &&
           VerifyOffset(verifier, VT_LCACC) &&
           verifier.VerifyVector(lcAcc()) &&
           verifier.VerifyVectorOfStrings(lcAcc()) &&
           VerifyOffset(verifier, VT_ENUVEL) &&
           verifier.VerifyVector(eNUVel()) &&
           verifier.VerifyVectorOfStrings(eNUVel()) &&
           VerifyOffset(verifier, VT_ENUPOS) &&
           verifier.VerifyVector(eNUPos()) &&
           verifier.VerifyVectorOfStrings(eNUPos()) &&
           VerifyOffset(verifier, VT_COV) &&
           verifier.VerifyVector(cov()) &&
           verifier.VerifyVectorOfStrings(cov()) &&
           VerifyOffset(verifier, VT_ERRELLP) &&
           verifier.VerifyVector(errEllp()) &&
           verifier.VerifyVectorOfStrings(errEllp()) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyField<uint8_t>(verifier, VT_MULTISOURCE, 1) &&
           VerifyOffset(verifier, VT_JSERIES) &&
           verifier.VerifyString(jSeries()) &&
           VerifyField<int32_t>(verifier, VT_STRENGTH, 4) &&
           VerifyField<int32_t>(verifier, VT_M1, 4) &&
           VerifyField<int32_t>(verifier, VT_M1V, 4) &&
           VerifyField<int32_t>(verifier, VT_M2, 4) &&
           VerifyField<int32_t>(verifier, VT_M2V, 4) &&
           VerifyField<int32_t>(verifier, VT_M3A, 4) &&
           VerifyField<int32_t>(verifier, VT_M3AV, 4) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Track_AbridgedBuilder {
  typedef Track_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Track_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Track_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_cntct(::flatbuffers::Offset<::flatbuffers::String> cntct) {
    fbb_.AddOffset(Track_Abridged::VT_CNTCT, cntct);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Track_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Track_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_msgTs(::flatbuffers::Offset<::flatbuffers::String> msgTs) {
    fbb_.AddOffset(Track_Abridged::VT_MSGTS, msgTs);
  }
  void add_msnId(::flatbuffers::Offset<::flatbuffers::String> msnId) {
    fbb_.AddOffset(Track_Abridged::VT_MSNID, msnId);
  }
  void add_assetNat(::flatbuffers::Offset<::flatbuffers::String> assetNat) {
    fbb_.AddOffset(Track_Abridged::VT_ASSETNAT, assetNat);
  }
  void add_asset(::flatbuffers::Offset<::flatbuffers::String> asset) {
    fbb_.AddOffset(Track_Abridged::VT_ASSET, asset);
  }
  void add_sen(::flatbuffers::Offset<::flatbuffers::String> sen) {
    fbb_.AddOffset(Track_Abridged::VT_SEN, sen);
  }
  void add_senQual(::flatbuffers::Offset<::flatbuffers::String> senQual) {
    fbb_.AddOffset(Track_Abridged::VT_SENQUAL, senQual);
  }
  void add_trkId(::flatbuffers::Offset<::flatbuffers::String> trkId) {
    fbb_.AddOffset(Track_Abridged::VT_TRKID, trkId);
  }
  void add_trkNum(::flatbuffers::Offset<::flatbuffers::String> trkNum) {
    fbb_.AddOffset(Track_Abridged::VT_TRKNUM, trkNum);
  }
  void add_trkStat(::flatbuffers::Offset<::flatbuffers::String> trkStat) {
    fbb_.AddOffset(Track_Abridged::VT_TRKSTAT, trkStat);
  }
  void add_objNat(::flatbuffers::Offset<::flatbuffers::String> objNat) {
    fbb_.AddOffset(Track_Abridged::VT_OBJNAT, objNat);
  }
  void add_objId(::flatbuffers::Offset<::flatbuffers::String> objId) {
    fbb_.AddOffset(Track_Abridged::VT_OBJID, objId);
  }
  void add_objType(::flatbuffers::Offset<::flatbuffers::String> objType) {
    fbb_.AddOffset(Track_Abridged::VT_OBJTYPE, objType);
  }
  void add_objSpec(::flatbuffers::Offset<::flatbuffers::String> objSpec) {
    fbb_.AddOffset(Track_Abridged::VT_OBJSPEC, objSpec);
  }
  void add_objPlat(::flatbuffers::Offset<::flatbuffers::String> objPlat) {
    fbb_.AddOffset(Track_Abridged::VT_OBJPLAT, objPlat);
  }
  void add_objAct(::flatbuffers::Offset<::flatbuffers::String> objAct) {
    fbb_.AddOffset(Track_Abridged::VT_OBJACT, objAct);
  }
  void add_modType(::flatbuffers::Offset<::flatbuffers::String> modType) {
    fbb_.AddOffset(Track_Abridged::VT_MODTYPE, modType);
  }
  void add_trkItmId(::flatbuffers::Offset<::flatbuffers::String> trkItmId) {
    fbb_.AddOffset(Track_Abridged::VT_TRKITMID, trkItmId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(Track_Abridged::VT_TS, ts);
  }
  void add_trkQual(int32_t trkQual) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_TRKQUAL, trkQual, 0);
  }
  void add_trkPtType(::flatbuffers::Offset<::flatbuffers::String> trkPtType) {
    fbb_.AddOffset(Track_Abridged::VT_TRKPTTYPE, trkPtType);
  }
  void add_objIdent(::flatbuffers::Offset<::flatbuffers::String> objIdent) {
    fbb_.AddOffset(Track_Abridged::VT_OBJIDENT, objIdent);
  }
  void add_identCred(int32_t identCred) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_IDENTCRED, identCred, 0);
  }
  void add_identRel(int32_t identRel) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_IDENTREL, identRel, 0);
  }
  void add_identAmp(::flatbuffers::Offset<::flatbuffers::String> identAmp) {
    fbb_.AddOffset(Track_Abridged::VT_IDENTAMP, identAmp);
  }
  void add_env(::flatbuffers::Offset<::flatbuffers::String> env) {
    fbb_.AddOffset(Track_Abridged::VT_ENV, env);
  }
  void add_envConf(double envConf) {
    fbb_.AddElement<double>(Track_Abridged::VT_ENVCONF, envConf, 0.0);
  }
  void add_trkConf(double trkConf) {
    fbb_.AddElement<double>(Track_Abridged::VT_TRKCONF, trkConf, 0.0);
  }
  void add_ecefPos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefPos) {
    fbb_.AddOffset(Track_Abridged::VT_ECEFPOS, ecefPos);
  }
  void add_ecefVel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefVel) {
    fbb_.AddOffset(Track_Abridged::VT_ECEFVEL, ecefVel);
  }
  void add_ecefAcc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefAcc) {
    fbb_.AddOffset(Track_Abridged::VT_ECEFACC, ecefAcc);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(Track_Abridged::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(Track_Abridged::VT_LON, lon, 0.0);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(Track_Abridged::VT_ALT, alt, 0.0);
  }
  void add_spd(double spd) {
    fbb_.AddElement<double>(Track_Abridged::VT_SPD, spd, 0.0);
  }
  void add_hdng(double hdng) {
    fbb_.AddElement<double>(Track_Abridged::VT_HDNG, hdng, 0.0);
  }
  void add_course(double course) {
    fbb_.AddElement<double>(Track_Abridged::VT_COURSE, course, 0.0);
  }
  void add_lco(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lco) {
    fbb_.AddOffset(Track_Abridged::VT_LCO, lco);
  }
  void add_lcs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcs) {
    fbb_.AddOffset(Track_Abridged::VT_LCS, lcs);
  }
  void add_lcPos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcPos) {
    fbb_.AddOffset(Track_Abridged::VT_LCPOS, lcPos);
  }
  void add_lcVel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcVel) {
    fbb_.AddOffset(Track_Abridged::VT_LCVEL, lcVel);
  }
  void add_lcAcc(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcAcc) {
    fbb_.AddOffset(Track_Abridged::VT_LCACC, lcAcc);
  }
  void add_eNUVel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> eNUVel) {
    fbb_.AddOffset(Track_Abridged::VT_ENUVEL, eNUVel);
  }
  void add_eNUPos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> eNUPos) {
    fbb_.AddOffset(Track_Abridged::VT_ENUPOS, eNUPos);
  }
  void add_cov(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov) {
    fbb_.AddOffset(Track_Abridged::VT_COV, cov);
  }
  void add_errEllp(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> errEllp) {
    fbb_.AddOffset(Track_Abridged::VT_ERRELLP, errEllp);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(Track_Abridged::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(Track_Abridged::VT_SRCIDS, srcIds);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(Track_Abridged::VT_CALLSIGN, callSign);
  }
  void add_multiSource(bool multiSource) {
    fbb_.AddElement<uint8_t>(Track_Abridged::VT_MULTISOURCE, static_cast<uint8_t>(multiSource), 0);
  }
  void add_jSeries(::flatbuffers::Offset<::flatbuffers::String> jSeries) {
    fbb_.AddOffset(Track_Abridged::VT_JSERIES, jSeries);
  }
  void add_strength(int32_t strength) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_STRENGTH, strength, 0);
  }
  void add_m1(int32_t m1) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M1, m1, 0);
  }
  void add_m1v(int32_t m1v) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M1V, m1v, 0);
  }
  void add_m2(int32_t m2) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M2, m2, 0);
  }
  void add_m2v(int32_t m2v) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M2V, m2v, 0);
  }
  void add_m3a(int32_t m3a) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M3A, m3a, 0);
  }
  void add_m3av(int32_t m3av) {
    fbb_.AddElement<int32_t>(Track_Abridged::VT_M3AV, m3av, 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Track_Abridged::VT_TAGS, tags);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Track_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Track_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Track_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(Track_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Track_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Track_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit Track_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Track_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Track_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Track_Abridged> CreateTrack_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cntct = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> assetNat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> asset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sen = 0,
    ::flatbuffers::Offset<::flatbuffers::String> senQual = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkStat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objNat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objSpec = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objPlat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objAct = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkItmId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    int32_t trkQual = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkPtType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objIdent = 0,
    int32_t identCred = 0,
    int32_t identRel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> identAmp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> env = 0,
    double envConf = 0.0,
    double trkConf = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefPos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefVel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ecefAcc = 0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double spd = 0.0,
    double hdng = 0.0,
    double course = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lco = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcPos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcVel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> lcAcc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> eNUVel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> eNUPos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> errEllp = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    bool multiSource = false,
    ::flatbuffers::Offset<::flatbuffers::String> jSeries = 0,
    int32_t strength = 0,
    int32_t m1 = 0,
    int32_t m1v = 0,
    int32_t m2 = 0,
    int32_t m2v = 0,
    int32_t m3a = 0,
    int32_t m3av = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Track_Abridged_dataMode_Enum dataMode = Track_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Track_AbridgedBuilder builder_(_fbb);
  builder_.add_course(course);
  builder_.add_hdng(hdng);
  builder_.add_spd(spd);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_trkConf(trkConf);
  builder_.add_envConf(envConf);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_tags(tags);
  builder_.add_m3av(m3av);
  builder_.add_m3a(m3a);
  builder_.add_m2v(m2v);
  builder_.add_m2(m2);
  builder_.add_m1v(m1v);
  builder_.add_m1(m1);
  builder_.add_strength(strength);
  builder_.add_jSeries(jSeries);
  builder_.add_callSign(callSign);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_errEllp(errEllp);
  builder_.add_cov(cov);
  builder_.add_eNUPos(eNUPos);
  builder_.add_eNUVel(eNUVel);
  builder_.add_lcAcc(lcAcc);
  builder_.add_lcVel(lcVel);
  builder_.add_lcPos(lcPos);
  builder_.add_lcs(lcs);
  builder_.add_lco(lco);
  builder_.add_ecefAcc(ecefAcc);
  builder_.add_ecefVel(ecefVel);
  builder_.add_ecefPos(ecefPos);
  builder_.add_env(env);
  builder_.add_identAmp(identAmp);
  builder_.add_identRel(identRel);
  builder_.add_identCred(identCred);
  builder_.add_objIdent(objIdent);
  builder_.add_trkPtType(trkPtType);
  builder_.add_trkQual(trkQual);
  builder_.add_ts(ts);
  builder_.add_trkItmId(trkItmId);
  builder_.add_modType(modType);
  builder_.add_objAct(objAct);
  builder_.add_objPlat(objPlat);
  builder_.add_objSpec(objSpec);
  builder_.add_objType(objType);
  builder_.add_objId(objId);
  builder_.add_objNat(objNat);
  builder_.add_trkStat(trkStat);
  builder_.add_trkNum(trkNum);
  builder_.add_trkId(trkId);
  builder_.add_senQual(senQual);
  builder_.add_sen(sen);
  builder_.add_asset(asset);
  builder_.add_assetNat(assetNat);
  builder_.add_msnId(msnId);
  builder_.add_msgTs(msgTs);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_cntct(cntct);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_multiSource(multiSource);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Track_Abridged> CreateTrack_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *cntct = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *msgTs = nullptr,
    const char *msnId = nullptr,
    const char *assetNat = nullptr,
    const char *asset = nullptr,
    const char *sen = nullptr,
    const char *senQual = nullptr,
    const char *trkId = nullptr,
    const char *trkNum = nullptr,
    const char *trkStat = nullptr,
    const char *objNat = nullptr,
    const char *objId = nullptr,
    const char *objType = nullptr,
    const char *objSpec = nullptr,
    const char *objPlat = nullptr,
    const char *objAct = nullptr,
    const char *modType = nullptr,
    const char *trkItmId = nullptr,
    const char *ts = nullptr,
    int32_t trkQual = 0,
    const char *trkPtType = nullptr,
    const char *objIdent = nullptr,
    int32_t identCred = 0,
    int32_t identRel = 0,
    const char *identAmp = nullptr,
    const char *env = nullptr,
    double envConf = 0.0,
    double trkConf = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefPos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefVel = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ecefAcc = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double spd = 0.0,
    double hdng = 0.0,
    double course = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lco = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lcs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lcPos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lcVel = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *lcAcc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *eNUVel = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *eNUPos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *cov = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *errEllp = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *callSign = nullptr,
    bool multiSource = false,
    const char *jSeries = nullptr,
    int32_t strength = 0,
    int32_t m1 = 0,
    int32_t m1v = 0,
    int32_t m2 = 0,
    int32_t m2v = 0,
    int32_t m3a = 0,
    int32_t m3av = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Track_Abridged_dataMode_Enum dataMode = Track_Abridged_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto cntct__ = cntct ? _fbb.CreateString(cntct) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto msgTs__ = msgTs ? _fbb.CreateString(msgTs) : 0;
  auto msnId__ = msnId ? _fbb.CreateString(msnId) : 0;
  auto assetNat__ = assetNat ? _fbb.CreateString(assetNat) : 0;
  auto asset__ = asset ? _fbb.CreateString(asset) : 0;
  auto sen__ = sen ? _fbb.CreateString(sen) : 0;
  auto senQual__ = senQual ? _fbb.CreateString(senQual) : 0;
  auto trkId__ = trkId ? _fbb.CreateString(trkId) : 0;
  auto trkNum__ = trkNum ? _fbb.CreateString(trkNum) : 0;
  auto trkStat__ = trkStat ? _fbb.CreateString(trkStat) : 0;
  auto objNat__ = objNat ? _fbb.CreateString(objNat) : 0;
  auto objId__ = objId ? _fbb.CreateString(objId) : 0;
  auto objType__ = objType ? _fbb.CreateString(objType) : 0;
  auto objSpec__ = objSpec ? _fbb.CreateString(objSpec) : 0;
  auto objPlat__ = objPlat ? _fbb.CreateString(objPlat) : 0;
  auto objAct__ = objAct ? _fbb.CreateString(objAct) : 0;
  auto modType__ = modType ? _fbb.CreateString(modType) : 0;
  auto trkItmId__ = trkItmId ? _fbb.CreateString(trkItmId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto trkPtType__ = trkPtType ? _fbb.CreateString(trkPtType) : 0;
  auto objIdent__ = objIdent ? _fbb.CreateString(objIdent) : 0;
  auto identAmp__ = identAmp ? _fbb.CreateString(identAmp) : 0;
  auto env__ = env ? _fbb.CreateString(env) : 0;
  auto ecefPos__ = ecefPos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ecefPos) : 0;
  auto ecefVel__ = ecefVel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ecefVel) : 0;
  auto ecefAcc__ = ecefAcc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ecefAcc) : 0;
  auto lco__ = lco ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lco) : 0;
  auto lcs__ = lcs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lcs) : 0;
  auto lcPos__ = lcPos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lcPos) : 0;
  auto lcVel__ = lcVel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lcVel) : 0;
  auto lcAcc__ = lcAcc ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*lcAcc) : 0;
  auto eNUVel__ = eNUVel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*eNUVel) : 0;
  auto eNUPos__ = eNUPos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*eNUPos) : 0;
  auto cov__ = cov ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*cov) : 0;
  auto errEllp__ = errEllp ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*errEllp) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto jSeries__ = jSeries ? _fbb.CreateString(jSeries) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateTrack_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      cntct__,
      createdAt__,
      createdBy__,
      msgTs__,
      msnId__,
      assetNat__,
      asset__,
      sen__,
      senQual__,
      trkId__,
      trkNum__,
      trkStat__,
      objNat__,
      objId__,
      objType__,
      objSpec__,
      objPlat__,
      objAct__,
      modType__,
      trkItmId__,
      ts__,
      trkQual,
      trkPtType__,
      objIdent__,
      identCred,
      identRel,
      identAmp__,
      env__,
      envConf,
      trkConf,
      ecefPos__,
      ecefVel__,
      ecefAcc__,
      lat,
      lon,
      alt,
      spd,
      hdng,
      course,
      lco__,
      lcs__,
      lcPos__,
      lcVel__,
      lcAcc__,
      eNUVel__,
      eNUPos__,
      cov__,
      errEllp__,
      srcTyps__,
      srcIds__,
      callSign__,
      multiSource,
      jSeries__,
      strength,
      m1,
      m1v,
      m2,
      m2v,
      m3a,
      m3av,
      tags__,
      sourceDL__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const Track_Abridged *GetTrack_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<Track_Abridged>(buf);
}

inline const Track_Abridged *GetSizePrefixedTrack_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Track_Abridged>(buf);
}

inline const char *Track_AbridgedIdentifier() {
  return "TRAC";
}

inline bool Track_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Track_AbridgedIdentifier());
}

inline bool SizePrefixedTrack_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Track_AbridgedIdentifier(), true);
}

inline bool VerifyTrack_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Track_Abridged>(Track_AbridgedIdentifier());
}

inline bool VerifySizePrefixedTrack_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Track_Abridged>(Track_AbridgedIdentifier());
}

inline void FinishTrack_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Track_Abridged> root) {
  fbb.Finish(root, Track_AbridgedIdentifier());
}

inline void FinishSizePrefixedTrack_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Track_Abridged> root) {
  fbb.FinishSizePrefixed(root, Track_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
