// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanWaypoints_Full;
struct FlightPlanWaypoints_FullBuilder;

/// /// Collection of waypoints associated with this flight plan.
struct FlightPlanWaypoints_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanWaypoints_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_WAYPOINTNAME = 6,
    VT_WAYPOINTNUM = 8,
    VT_AIRWAY = 10,
    VT_ARPT = 12,
    VT_LAT = 14,
    VT_LON = 16,
    VT_ARID = 18,
    VT_NAVAID = 20,
    VT_TACANCHANNEL = 22,
    VT_VORFREQ = 24,
    VT_TURBCAT = 26,
    VT_ICECAT = 28,
    VT_THUNDERCAT = 30,
    VT_ALT = 32,
    VT_TEMPDEV = 34,
    VT_LEGFUELDEGRADE = 36,
    VT_LEGMACH = 38,
    VT_LEGMSNINDEX = 40,
    VT_LEGDRAGINDEX = 42,
    VT_AVGCALAIRSPEED = 44,
    VT_AVGTRUEAIRSPEED = 46,
    VT_AVGGROUNDSPEED = 48,
    VT_PRIFREQ = 50,
    VT_POINTWINDDIR = 52,
    VT_POINTWINDSPEED = 54,
    VT_AVGWINDDIR = 56,
    VT_AVGWINDSPEED = 58,
    VT_LEGWINDFAC = 60,
    VT_AVGDRIFTANG = 62,
    VT_SECFREQ = 64,
    VT_MAGCOURSE = 66,
    VT_TRUECOURSE = 68,
    VT_MAGHEADING = 70,
    VT_AATACANCHANNEL = 72,
    VT_ZONEDISTANCE = 74,
    VT_TOTALFLOWNDISTANCE = 76,
    VT_TOTALREMDISTANCE = 78,
    VT_ZONETIME = 80,
    VT_TOTALTIME = 82,
    VT_TOTALTIMEREM = 84,
    VT_ZONEFUEL = 86,
    VT_TOTALUSEDFUEL = 88,
    VT_TOTALREMFUEL = 90,
    VT_EXCHANGEDFUEL = 92,
    VT_AIRDISTANCE = 94,
    VT_TOTALAIRDISTANCE = 96,
    VT_TOTALWEIGHT = 98,
    VT_ETA = 100,
    VT_ATA = 102,
    VT_FUELFLOW = 104,
    VT_LEGALTERNATE = 106,
    VT_MAGVAR = 108,
    VT_DAYLOWALT = 110,
    VT_NIGHTLOWALT = 112,
    VT_NVGLOWALT = 114
  };
  /// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
  /// Example: /// Example: COMMENT
  /// Constraints: Minimum length = 1, Maximum length = 16
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *waypointName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WAYPOINTNAME);
  }
  /// The waypoint number on the route. Comment points do not get a waypoint number.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t waypointNum() const {
    return GetField<int32_t>(VT_WAYPOINTNUM, 0);
  }
  /// The flight path flown for this leg.
  /// Example: /// Example: W15
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *airway() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRWAY);
  }
  /// Point identifying an air refueling track/anchor or fixed track.
  /// Example: /// Example: ARIP
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *arpt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARPT);
  }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// The ID of the air refueling track/anchor or fixed track.
  /// Example: /// Example: AR202
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *arId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARID);
  }
  /// Navigational Aid (NAVAID) identification code.
  /// Example: /// Example: HTO
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *navaid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAVAID);
  }
  /// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
  /// Example: /// Example: 83X
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *tacanChannel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TACANCHANNEL);
  }
  /// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
  /// Example: /// Example: 113.6
  /// Constraints: No constraints specified.
  double vorFreq() const {
    return GetField<double>(VT_VORFREQ, 0.0);
  }
  /// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: EXTREME
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *turbCat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TURBCAT);
  }
  /// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *iceCat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICECAT);
  }
  /// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *thunderCat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_THUNDERCAT);
  }
  /// Altitude of a level, point, or object measured in feet above mean sea level.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// Average temperature deviation from standard day profile for this leg in degrees Celsius.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  double tempDev() const {
    return GetField<double>(VT_TEMPDEV, 0.0);
  }
  /// The fuel degrade percentage used for this leg.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double legFuelDegrade() const {
    return GetField<double>(VT_LEGFUELDEGRADE, 0.0);
  }
  /// The average Mach speed for this leg.
  /// Example: /// Example: 0.74
  /// Constraints: No constraints specified.
  double legMach() const {
    return GetField<double>(VT_LEGMACH, 0.0);
  }
  /// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 65
  /// Constraints: No constraints specified.
  double legMsnIndex() const {
    return GetField<double>(VT_LEGMSNINDEX, 0.0);
  }
  /// The percent degrade due to drag for this aircraft for this leg.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double legDragIndex() const {
    return GetField<double>(VT_LEGDRAGINDEX, 0.0);
  }
  /// The average calibrated airspeed (CAS) for this leg in knots.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  double avgCalAirspeed() const {
    return GetField<double>(VT_AVGCALAIRSPEED, 0.0);
  }
  /// The average true airspeed (TAS) for this leg in knots.
  /// Example: /// Example: 210.1
  /// Constraints: No constraints specified.
  double avgTrueAirspeed() const {
    return GetField<double>(VT_AVGTRUEAIRSPEED, 0.0);
  }
  /// The average ground speed for this leg in knots.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  double avgGroundSpeed() const {
    return GetField<double>(VT_AVGGROUNDSPEED, 0.0);
  }
  /// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  double priFreq() const {
    return GetField<double>(VT_PRIFREQ, 0.0);
  }
  /// The wind direction at this specific point in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  double pointWindDir() const {
    return GetField<double>(VT_POINTWINDDIR, 0.0);
  }
  /// The wind velocity at this specific point in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  double pointWindSpeed() const {
    return GetField<double>(VT_POINTWINDSPEED, 0.0);
  }
  /// The average wind direction for this leg in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  double avgWindDir() const {
    return GetField<double>(VT_AVGWINDDIR, 0.0);
  }
  /// The average wind speed for this leg in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  double avgWindSpeed() const {
    return GetField<double>(VT_AVGWINDSPEED, 0.0);
  }
  /// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -32.1
  /// Constraints: No constraints specified.
  double legWindFac() const {
    return GetField<double>(VT_LEGWINDFAC, 0.0);
  }
  /// The average drift angle for this leg in degrees from true north.
  /// Example: /// Example: -3.2
  /// Constraints: No constraints specified.
  double avgDriftAng() const {
    return GetField<double>(VT_AVGDRIFTANG, 0.0);
  }
  /// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  double secFreq() const {
    return GetField<double>(VT_SECFREQ, 0.0);
  }
  /// The magnetic course at leg midpoint in degrees from true north.
  /// Example: /// Example: 338.1
  /// Constraints: No constraints specified.
  double magCourse() const {
    return GetField<double>(VT_MAGCOURSE, 0.0);
  }
  /// The true course at leg midpoint in degrees from true north.
  /// Example: /// Example: 328.1
  /// Constraints: No constraints specified.
  double trueCourse() const {
    return GetField<double>(VT_TRUECOURSE, 0.0);
  }
  /// The magnetic heading at leg midpoint in degrees from true north.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  double magHeading() const {
    return GetField<double>(VT_MAGHEADING, 0.0);
  }
  /// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
  /// Example: /// Example: 31/94
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *aaTacanChannel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AATACANCHANNEL);
  }
  /// The zone/leg distance flown in nautical miles.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  double zoneDistance() const {
    return GetField<double>(VT_ZONEDISTANCE, 0.0);
  }
  /// The total distance flown to this waypoint calculated from point of departure in nautical miles.
  /// Example: /// Example: 688.1
  /// Constraints: No constraints specified.
  double totalFlownDistance() const {
    return GetField<double>(VT_TOTALFLOWNDISTANCE, 0.0);
  }
  /// The total distance remaining from this waypoint to the point of arrival in nautical miles.
  /// Example: /// Example: 1288.1
  /// Constraints: No constraints specified.
  double totalRemDistance() const {
    return GetField<double>(VT_TOTALREMDISTANCE, 0.0);
  }
  /// The time to fly this zone/leg in minutes.
  /// Example: /// Example: 36.1
  /// Constraints: No constraints specified.
  double zoneTime() const {
    return GetField<double>(VT_ZONETIME, 0.0);
  }
  /// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *totalTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOTALTIME);
  }
  /// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
  /// Example: /// Example: 01:43
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *totalTimeRem() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOTALTIMEREM);
  }
  /// The amount of fuel used on this zone/leg in pounds.
  /// Example: /// Example: 1120.1
  /// Constraints: No constraints specified.
  double zoneFuel() const {
    return GetField<double>(VT_ZONEFUEL, 0.0);
  }
  /// The total fuel used to this waypoint from point of departure in pounds.
  /// Example: /// Example: 70431.1
  /// Constraints: No constraints specified.
  double totalUsedFuel() const {
    return GetField<double>(VT_TOTALUSEDFUEL, 0.0);
  }
  /// The total fuel remaining at this waypoint in pounds.
  /// Example: /// Example: 30453.1
  /// Constraints: No constraints specified.
  double totalRemFuel() const {
    return GetField<double>(VT_TOTALREMFUEL, 0.0);
  }
  /// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
  /// Example: /// Example: -30400.1
  /// Constraints: No constraints specified.
  double exchangedFuel() const {
    return GetField<double>(VT_EXCHANGEDFUEL, 0.0);
  }
  /// The air distance of this leg in nautical miles.
  /// Example: /// Example: 321.1
  /// Constraints: No constraints specified.
  double airDistance() const {
    return GetField<double>(VT_AIRDISTANCE, 0.0);
  }
  /// The total air distance to this waypoint in nautical miles.
  /// Example: /// Example: 3251.1
  /// Constraints: No constraints specified.
  double totalAirDistance() const {
    return GetField<double>(VT_TOTALAIRDISTANCE, 0.0);
  }
  /// The total weight of the aircraft at this waypoint in pounds.
  /// Example: /// Example: 207123.1
  /// Constraints: No constraints specified.
  double totalWeight() const {
    return GetField<double>(VT_TOTALWEIGHT, 0.0);
  }
  /// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eta() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETA);
  }
  /// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATA);
  }
  /// The leg fuel flow in pounds per hour.
  /// Example: /// Example: 17654.1
  /// Constraints: No constraints specified.
  double fuelFlow() const {
    return GetField<double>(VT_FUELFLOW, 0.0);
  }
  /// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *legAlternate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEGALTERNATE);
  }
  /// The magnetic variation for this leg in degrees.
  /// Example: /// Example: -13.2
  /// Constraints: No constraints specified.
  double magVar() const {
    return GetField<double>(VT_MAGVAR, 0.0);
  }
  /// The day low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  double dayLowAlt() const {
    return GetField<double>(VT_DAYLOWALT, 0.0);
  }
  /// The night low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  double nightLowAlt() const {
    return GetField<double>(VT_NIGHTLOWALT, 0.0);
  }
  /// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2450.1
  /// Constraints: No constraints specified.
  double nvgLowAlt() const {
    return GetField<double>(VT_NVGLOWALT, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_WAYPOINTNAME) &&
           verifier.VerifyString(waypointName()) &&
           VerifyField<int32_t>(verifier, VT_WAYPOINTNUM, 4) &&
           VerifyOffset(verifier, VT_AIRWAY) &&
           verifier.VerifyString(airway()) &&
           VerifyOffset(verifier, VT_ARPT) &&
           verifier.VerifyString(arpt()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_ARID) &&
           verifier.VerifyString(arId()) &&
           VerifyOffset(verifier, VT_NAVAID) &&
           verifier.VerifyString(navaid()) &&
           VerifyOffset(verifier, VT_TACANCHANNEL) &&
           verifier.VerifyString(tacanChannel()) &&
           VerifyField<double>(verifier, VT_VORFREQ, 8) &&
           VerifyOffset(verifier, VT_TURBCAT) &&
           verifier.VerifyString(turbCat()) &&
           VerifyOffset(verifier, VT_ICECAT) &&
           verifier.VerifyString(iceCat()) &&
           VerifyOffset(verifier, VT_THUNDERCAT) &&
           verifier.VerifyString(thunderCat()) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyField<double>(verifier, VT_TEMPDEV, 8) &&
           VerifyField<double>(verifier, VT_LEGFUELDEGRADE, 8) &&
           VerifyField<double>(verifier, VT_LEGMACH, 8) &&
           VerifyField<double>(verifier, VT_LEGMSNINDEX, 8) &&
           VerifyField<double>(verifier, VT_LEGDRAGINDEX, 8) &&
           VerifyField<double>(verifier, VT_AVGCALAIRSPEED, 8) &&
           VerifyField<double>(verifier, VT_AVGTRUEAIRSPEED, 8) &&
           VerifyField<double>(verifier, VT_AVGGROUNDSPEED, 8) &&
           VerifyField<double>(verifier, VT_PRIFREQ, 8) &&
           VerifyField<double>(verifier, VT_POINTWINDDIR, 8) &&
           VerifyField<double>(verifier, VT_POINTWINDSPEED, 8) &&
           VerifyField<double>(verifier, VT_AVGWINDDIR, 8) &&
           VerifyField<double>(verifier, VT_AVGWINDSPEED, 8) &&
           VerifyField<double>(verifier, VT_LEGWINDFAC, 8) &&
           VerifyField<double>(verifier, VT_AVGDRIFTANG, 8) &&
           VerifyField<double>(verifier, VT_SECFREQ, 8) &&
           VerifyField<double>(verifier, VT_MAGCOURSE, 8) &&
           VerifyField<double>(verifier, VT_TRUECOURSE, 8) &&
           VerifyField<double>(verifier, VT_MAGHEADING, 8) &&
           VerifyOffset(verifier, VT_AATACANCHANNEL) &&
           verifier.VerifyString(aaTacanChannel()) &&
           VerifyField<double>(verifier, VT_ZONEDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_TOTALFLOWNDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_TOTALREMDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_ZONETIME, 8) &&
           VerifyOffset(verifier, VT_TOTALTIME) &&
           verifier.VerifyString(totalTime()) &&
           VerifyOffset(verifier, VT_TOTALTIMEREM) &&
           verifier.VerifyString(totalTimeRem()) &&
           VerifyField<double>(verifier, VT_ZONEFUEL, 8) &&
           VerifyField<double>(verifier, VT_TOTALUSEDFUEL, 8) &&
           VerifyField<double>(verifier, VT_TOTALREMFUEL, 8) &&
           VerifyField<double>(verifier, VT_EXCHANGEDFUEL, 8) &&
           VerifyField<double>(verifier, VT_AIRDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_TOTALAIRDISTANCE, 8) &&
           VerifyField<double>(verifier, VT_TOTALWEIGHT, 8) &&
           VerifyOffset(verifier, VT_ETA) &&
           verifier.VerifyString(eta()) &&
           VerifyOffset(verifier, VT_ATA) &&
           verifier.VerifyString(ata()) &&
           VerifyField<double>(verifier, VT_FUELFLOW, 8) &&
           VerifyOffset(verifier, VT_LEGALTERNATE) &&
           verifier.VerifyString(legAlternate()) &&
           VerifyField<double>(verifier, VT_MAGVAR, 8) &&
           VerifyField<double>(verifier, VT_DAYLOWALT, 8) &&
           VerifyField<double>(verifier, VT_NIGHTLOWALT, 8) &&
           VerifyField<double>(verifier, VT_NVGLOWALT, 8) &&
           verifier.EndTable();
  }
};

struct FlightPlanWaypoints_FullBuilder {
  typedef FlightPlanWaypoints_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_TYPE, type);
  }
  void add_waypointName(::flatbuffers::Offset<::flatbuffers::String> waypointName) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_WAYPOINTNAME, waypointName);
  }
  void add_waypointNum(int32_t waypointNum) {
    fbb_.AddElement<int32_t>(FlightPlanWaypoints_Full::VT_WAYPOINTNUM, waypointNum, 0);
  }
  void add_airway(::flatbuffers::Offset<::flatbuffers::String> airway) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_AIRWAY, airway);
  }
  void add_arpt(::flatbuffers::Offset<::flatbuffers::String> arpt) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_ARPT, arpt);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LON, lon, 0.0);
  }
  void add_arId(::flatbuffers::Offset<::flatbuffers::String> arId) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_ARID, arId);
  }
  void add_navaid(::flatbuffers::Offset<::flatbuffers::String> navaid) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_NAVAID, navaid);
  }
  void add_tacanChannel(::flatbuffers::Offset<::flatbuffers::String> tacanChannel) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_TACANCHANNEL, tacanChannel);
  }
  void add_vorFreq(double vorFreq) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_VORFREQ, vorFreq, 0.0);
  }
  void add_turbCat(::flatbuffers::Offset<::flatbuffers::String> turbCat) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_TURBCAT, turbCat);
  }
  void add_iceCat(::flatbuffers::Offset<::flatbuffers::String> iceCat) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_ICECAT, iceCat);
  }
  void add_thunderCat(::flatbuffers::Offset<::flatbuffers::String> thunderCat) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_THUNDERCAT, thunderCat);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_ALT, alt, 0.0);
  }
  void add_tempDev(double tempDev) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TEMPDEV, tempDev, 0.0);
  }
  void add_legFuelDegrade(double legFuelDegrade) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LEGFUELDEGRADE, legFuelDegrade, 0.0);
  }
  void add_legMach(double legMach) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LEGMACH, legMach, 0.0);
  }
  void add_legMsnIndex(double legMsnIndex) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LEGMSNINDEX, legMsnIndex, 0.0);
  }
  void add_legDragIndex(double legDragIndex) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LEGDRAGINDEX, legDragIndex, 0.0);
  }
  void add_avgCalAirspeed(double avgCalAirspeed) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGCALAIRSPEED, avgCalAirspeed, 0.0);
  }
  void add_avgTrueAirspeed(double avgTrueAirspeed) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGTRUEAIRSPEED, avgTrueAirspeed, 0.0);
  }
  void add_avgGroundSpeed(double avgGroundSpeed) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGGROUNDSPEED, avgGroundSpeed, 0.0);
  }
  void add_priFreq(double priFreq) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_PRIFREQ, priFreq, 0.0);
  }
  void add_pointWindDir(double pointWindDir) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_POINTWINDDIR, pointWindDir, 0.0);
  }
  void add_pointWindSpeed(double pointWindSpeed) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_POINTWINDSPEED, pointWindSpeed, 0.0);
  }
  void add_avgWindDir(double avgWindDir) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGWINDDIR, avgWindDir, 0.0);
  }
  void add_avgWindSpeed(double avgWindSpeed) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGWINDSPEED, avgWindSpeed, 0.0);
  }
  void add_legWindFac(double legWindFac) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_LEGWINDFAC, legWindFac, 0.0);
  }
  void add_avgDriftAng(double avgDriftAng) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AVGDRIFTANG, avgDriftAng, 0.0);
  }
  void add_secFreq(double secFreq) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_SECFREQ, secFreq, 0.0);
  }
  void add_magCourse(double magCourse) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_MAGCOURSE, magCourse, 0.0);
  }
  void add_trueCourse(double trueCourse) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TRUECOURSE, trueCourse, 0.0);
  }
  void add_magHeading(double magHeading) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_MAGHEADING, magHeading, 0.0);
  }
  void add_aaTacanChannel(::flatbuffers::Offset<::flatbuffers::String> aaTacanChannel) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_AATACANCHANNEL, aaTacanChannel);
  }
  void add_zoneDistance(double zoneDistance) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_ZONEDISTANCE, zoneDistance, 0.0);
  }
  void add_totalFlownDistance(double totalFlownDistance) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALFLOWNDISTANCE, totalFlownDistance, 0.0);
  }
  void add_totalRemDistance(double totalRemDistance) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALREMDISTANCE, totalRemDistance, 0.0);
  }
  void add_zoneTime(double zoneTime) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_ZONETIME, zoneTime, 0.0);
  }
  void add_totalTime(::flatbuffers::Offset<::flatbuffers::String> totalTime) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_TOTALTIME, totalTime);
  }
  void add_totalTimeRem(::flatbuffers::Offset<::flatbuffers::String> totalTimeRem) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_TOTALTIMEREM, totalTimeRem);
  }
  void add_zoneFuel(double zoneFuel) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_ZONEFUEL, zoneFuel, 0.0);
  }
  void add_totalUsedFuel(double totalUsedFuel) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALUSEDFUEL, totalUsedFuel, 0.0);
  }
  void add_totalRemFuel(double totalRemFuel) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALREMFUEL, totalRemFuel, 0.0);
  }
  void add_exchangedFuel(double exchangedFuel) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_EXCHANGEDFUEL, exchangedFuel, 0.0);
  }
  void add_airDistance(double airDistance) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_AIRDISTANCE, airDistance, 0.0);
  }
  void add_totalAirDistance(double totalAirDistance) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALAIRDISTANCE, totalAirDistance, 0.0);
  }
  void add_totalWeight(double totalWeight) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_TOTALWEIGHT, totalWeight, 0.0);
  }
  void add_eta(::flatbuffers::Offset<::flatbuffers::String> eta) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_ETA, eta);
  }
  void add_ata(::flatbuffers::Offset<::flatbuffers::String> ata) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_ATA, ata);
  }
  void add_fuelFlow(double fuelFlow) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_FUELFLOW, fuelFlow, 0.0);
  }
  void add_legAlternate(::flatbuffers::Offset<::flatbuffers::String> legAlternate) {
    fbb_.AddOffset(FlightPlanWaypoints_Full::VT_LEGALTERNATE, legAlternate);
  }
  void add_magVar(double magVar) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_MAGVAR, magVar, 0.0);
  }
  void add_dayLowAlt(double dayLowAlt) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_DAYLOWALT, dayLowAlt, 0.0);
  }
  void add_nightLowAlt(double nightLowAlt) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_NIGHTLOWALT, nightLowAlt, 0.0);
  }
  void add_nvgLowAlt(double nvgLowAlt) {
    fbb_.AddElement<double>(FlightPlanWaypoints_Full::VT_NVGLOWALT, nvgLowAlt, 0.0);
  }
  explicit FlightPlanWaypoints_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanWaypoints_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanWaypoints_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanWaypoints_Full> CreateFlightPlanWaypoints_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> waypointName = 0,
    int32_t waypointNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> airway = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arpt = 0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> arId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> navaid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tacanChannel = 0,
    double vorFreq = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> turbCat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iceCat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> thunderCat = 0,
    double alt = 0.0,
    double tempDev = 0.0,
    double legFuelDegrade = 0.0,
    double legMach = 0.0,
    double legMsnIndex = 0.0,
    double legDragIndex = 0.0,
    double avgCalAirspeed = 0.0,
    double avgTrueAirspeed = 0.0,
    double avgGroundSpeed = 0.0,
    double priFreq = 0.0,
    double pointWindDir = 0.0,
    double pointWindSpeed = 0.0,
    double avgWindDir = 0.0,
    double avgWindSpeed = 0.0,
    double legWindFac = 0.0,
    double avgDriftAng = 0.0,
    double secFreq = 0.0,
    double magCourse = 0.0,
    double trueCourse = 0.0,
    double magHeading = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> aaTacanChannel = 0,
    double zoneDistance = 0.0,
    double totalFlownDistance = 0.0,
    double totalRemDistance = 0.0,
    double zoneTime = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> totalTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> totalTimeRem = 0,
    double zoneFuel = 0.0,
    double totalUsedFuel = 0.0,
    double totalRemFuel = 0.0,
    double exchangedFuel = 0.0,
    double airDistance = 0.0,
    double totalAirDistance = 0.0,
    double totalWeight = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> eta = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ata = 0,
    double fuelFlow = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> legAlternate = 0,
    double magVar = 0.0,
    double dayLowAlt = 0.0,
    double nightLowAlt = 0.0,
    double nvgLowAlt = 0.0) {
  FlightPlanWaypoints_FullBuilder builder_(_fbb);
  builder_.add_nvgLowAlt(nvgLowAlt);
  builder_.add_nightLowAlt(nightLowAlt);
  builder_.add_dayLowAlt(dayLowAlt);
  builder_.add_magVar(magVar);
  builder_.add_fuelFlow(fuelFlow);
  builder_.add_totalWeight(totalWeight);
  builder_.add_totalAirDistance(totalAirDistance);
  builder_.add_airDistance(airDistance);
  builder_.add_exchangedFuel(exchangedFuel);
  builder_.add_totalRemFuel(totalRemFuel);
  builder_.add_totalUsedFuel(totalUsedFuel);
  builder_.add_zoneFuel(zoneFuel);
  builder_.add_zoneTime(zoneTime);
  builder_.add_totalRemDistance(totalRemDistance);
  builder_.add_totalFlownDistance(totalFlownDistance);
  builder_.add_zoneDistance(zoneDistance);
  builder_.add_magHeading(magHeading);
  builder_.add_trueCourse(trueCourse);
  builder_.add_magCourse(magCourse);
  builder_.add_secFreq(secFreq);
  builder_.add_avgDriftAng(avgDriftAng);
  builder_.add_legWindFac(legWindFac);
  builder_.add_avgWindSpeed(avgWindSpeed);
  builder_.add_avgWindDir(avgWindDir);
  builder_.add_pointWindSpeed(pointWindSpeed);
  builder_.add_pointWindDir(pointWindDir);
  builder_.add_priFreq(priFreq);
  builder_.add_avgGroundSpeed(avgGroundSpeed);
  builder_.add_avgTrueAirspeed(avgTrueAirspeed);
  builder_.add_avgCalAirspeed(avgCalAirspeed);
  builder_.add_legDragIndex(legDragIndex);
  builder_.add_legMsnIndex(legMsnIndex);
  builder_.add_legMach(legMach);
  builder_.add_legFuelDegrade(legFuelDegrade);
  builder_.add_tempDev(tempDev);
  builder_.add_alt(alt);
  builder_.add_vorFreq(vorFreq);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_legAlternate(legAlternate);
  builder_.add_ata(ata);
  builder_.add_eta(eta);
  builder_.add_totalTimeRem(totalTimeRem);
  builder_.add_totalTime(totalTime);
  builder_.add_aaTacanChannel(aaTacanChannel);
  builder_.add_thunderCat(thunderCat);
  builder_.add_iceCat(iceCat);
  builder_.add_turbCat(turbCat);
  builder_.add_tacanChannel(tacanChannel);
  builder_.add_navaid(navaid);
  builder_.add_arId(arId);
  builder_.add_arpt(arpt);
  builder_.add_airway(airway);
  builder_.add_waypointNum(waypointNum);
  builder_.add_waypointName(waypointName);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlanWaypoints_Full> CreateFlightPlanWaypoints_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *waypointName = nullptr,
    int32_t waypointNum = 0,
    const char *airway = nullptr,
    const char *arpt = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    const char *arId = nullptr,
    const char *navaid = nullptr,
    const char *tacanChannel = nullptr,
    double vorFreq = 0.0,
    const char *turbCat = nullptr,
    const char *iceCat = nullptr,
    const char *thunderCat = nullptr,
    double alt = 0.0,
    double tempDev = 0.0,
    double legFuelDegrade = 0.0,
    double legMach = 0.0,
    double legMsnIndex = 0.0,
    double legDragIndex = 0.0,
    double avgCalAirspeed = 0.0,
    double avgTrueAirspeed = 0.0,
    double avgGroundSpeed = 0.0,
    double priFreq = 0.0,
    double pointWindDir = 0.0,
    double pointWindSpeed = 0.0,
    double avgWindDir = 0.0,
    double avgWindSpeed = 0.0,
    double legWindFac = 0.0,
    double avgDriftAng = 0.0,
    double secFreq = 0.0,
    double magCourse = 0.0,
    double trueCourse = 0.0,
    double magHeading = 0.0,
    const char *aaTacanChannel = nullptr,
    double zoneDistance = 0.0,
    double totalFlownDistance = 0.0,
    double totalRemDistance = 0.0,
    double zoneTime = 0.0,
    const char *totalTime = nullptr,
    const char *totalTimeRem = nullptr,
    double zoneFuel = 0.0,
    double totalUsedFuel = 0.0,
    double totalRemFuel = 0.0,
    double exchangedFuel = 0.0,
    double airDistance = 0.0,
    double totalAirDistance = 0.0,
    double totalWeight = 0.0,
    const char *eta = nullptr,
    const char *ata = nullptr,
    double fuelFlow = 0.0,
    const char *legAlternate = nullptr,
    double magVar = 0.0,
    double dayLowAlt = 0.0,
    double nightLowAlt = 0.0,
    double nvgLowAlt = 0.0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto waypointName__ = waypointName ? _fbb.CreateString(waypointName) : 0;
  auto airway__ = airway ? _fbb.CreateString(airway) : 0;
  auto arpt__ = arpt ? _fbb.CreateString(arpt) : 0;
  auto arId__ = arId ? _fbb.CreateString(arId) : 0;
  auto navaid__ = navaid ? _fbb.CreateString(navaid) : 0;
  auto tacanChannel__ = tacanChannel ? _fbb.CreateString(tacanChannel) : 0;
  auto turbCat__ = turbCat ? _fbb.CreateString(turbCat) : 0;
  auto iceCat__ = iceCat ? _fbb.CreateString(iceCat) : 0;
  auto thunderCat__ = thunderCat ? _fbb.CreateString(thunderCat) : 0;
  auto aaTacanChannel__ = aaTacanChannel ? _fbb.CreateString(aaTacanChannel) : 0;
  auto totalTime__ = totalTime ? _fbb.CreateString(totalTime) : 0;
  auto totalTimeRem__ = totalTimeRem ? _fbb.CreateString(totalTimeRem) : 0;
  auto eta__ = eta ? _fbb.CreateString(eta) : 0;
  auto ata__ = ata ? _fbb.CreateString(ata) : 0;
  auto legAlternate__ = legAlternate ? _fbb.CreateString(legAlternate) : 0;
  return CreateFlightPlanWaypoints_Full(
      _fbb,
      type__,
      waypointName__,
      waypointNum,
      airway__,
      arpt__,
      lat,
      lon,
      arId__,
      navaid__,
      tacanChannel__,
      vorFreq,
      turbCat__,
      iceCat__,
      thunderCat__,
      alt,
      tempDev,
      legFuelDegrade,
      legMach,
      legMsnIndex,
      legDragIndex,
      avgCalAirspeed,
      avgTrueAirspeed,
      avgGroundSpeed,
      priFreq,
      pointWindDir,
      pointWindSpeed,
      avgWindDir,
      avgWindSpeed,
      legWindFac,
      avgDriftAng,
      secFreq,
      magCourse,
      trueCourse,
      magHeading,
      aaTacanChannel__,
      zoneDistance,
      totalFlownDistance,
      totalRemDistance,
      zoneTime,
      totalTime__,
      totalTimeRem__,
      zoneFuel,
      totalUsedFuel,
      totalRemFuel,
      exchangedFuel,
      airDistance,
      totalAirDistance,
      totalWeight,
      eta__,
      ata__,
      fuelFlow,
      legAlternate__,
      magVar,
      dayLowAlt,
      nightLowAlt,
      nvgLowAlt);
}

inline const FlightPlanWaypoints_Full *GetFlightPlanWaypoints_Full(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanWaypoints_Full>(buf);
}

inline const FlightPlanWaypoints_Full *GetSizePrefixedFlightPlanWaypoints_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanWaypoints_Full>(buf);
}

inline const char *FlightPlanWaypoints_FullIdentifier() {
  return "FLIG";
}

inline bool FlightPlanWaypoints_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanWaypoints_FullIdentifier());
}

inline bool SizePrefixedFlightPlanWaypoints_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanWaypoints_FullIdentifier(), true);
}

inline bool VerifyFlightPlanWaypoints_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanWaypoints_Full>(FlightPlanWaypoints_FullIdentifier());
}

inline bool VerifySizePrefixedFlightPlanWaypoints_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanWaypoints_Full>(FlightPlanWaypoints_FullIdentifier());
}

inline void FinishFlightPlanWaypoints_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanWaypoints_Full> root) {
  fbb.Finish(root, FlightPlanWaypoints_FullIdentifier());
}

inline void FinishSizePrefixedFlightPlanWaypoints_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanWaypoints_Full> root) {
  fbb.FinishSizePrefixed(root, FlightPlanWaypoints_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
