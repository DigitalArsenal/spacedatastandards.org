// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct CotChatData_Ingest;
struct CotChatData_IngestBuilder;

/// /// Schema for the CotChatData to post.
struct CotChatData_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CotChatData_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHATROOM = 4,
    VT_CHATSENDERCALLSIGN = 6,
    VT_CHATMSG = 8
  };
  /// Chat room name to send chat message to.
  /// Example: /// Example: All Chat Rooms
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *chatRoom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHATROOM);
  }
  /// Callsign of chat sender.
  /// Example: /// Example: Pebble
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *chatSenderCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHATSENDERCALLSIGN);
  }
  /// Contents of a chat message.
  /// Example: /// Example: Mission is go
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *chatMsg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHATMSG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHATROOM) &&
           verifier.VerifyString(chatRoom()) &&
           VerifyOffset(verifier, VT_CHATSENDERCALLSIGN) &&
           verifier.VerifyString(chatSenderCallSign()) &&
           VerifyOffset(verifier, VT_CHATMSG) &&
           verifier.VerifyString(chatMsg()) &&
           verifier.EndTable();
  }
};

struct CotChatData_IngestBuilder {
  typedef CotChatData_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_chatRoom(::flatbuffers::Offset<::flatbuffers::String> chatRoom) {
    fbb_.AddOffset(CotChatData_Ingest::VT_CHATROOM, chatRoom);
  }
  void add_chatSenderCallSign(::flatbuffers::Offset<::flatbuffers::String> chatSenderCallSign) {
    fbb_.AddOffset(CotChatData_Ingest::VT_CHATSENDERCALLSIGN, chatSenderCallSign);
  }
  void add_chatMsg(::flatbuffers::Offset<::flatbuffers::String> chatMsg) {
    fbb_.AddOffset(CotChatData_Ingest::VT_CHATMSG, chatMsg);
  }
  explicit CotChatData_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CotChatData_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CotChatData_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CotChatData_Ingest> CreateCotChatData_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> chatRoom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> chatSenderCallSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> chatMsg = 0) {
  CotChatData_IngestBuilder builder_(_fbb);
  builder_.add_chatMsg(chatMsg);
  builder_.add_chatSenderCallSign(chatSenderCallSign);
  builder_.add_chatRoom(chatRoom);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CotChatData_Ingest> CreateCotChatData_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *chatRoom = nullptr,
    const char *chatSenderCallSign = nullptr,
    const char *chatMsg = nullptr) {
  auto chatRoom__ = chatRoom ? _fbb.CreateString(chatRoom) : 0;
  auto chatSenderCallSign__ = chatSenderCallSign ? _fbb.CreateString(chatSenderCallSign) : 0;
  auto chatMsg__ = chatMsg ? _fbb.CreateString(chatMsg) : 0;
  return CreateCotChatData_Ingest(
      _fbb,
      chatRoom__,
      chatSenderCallSign__,
      chatMsg__);
}

inline const CotChatData_Ingest *GetCotChatData_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<CotChatData_Ingest>(buf);
}

inline const CotChatData_Ingest *GetSizePrefixedCotChatData_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CotChatData_Ingest>(buf);
}

inline const char *CotChatData_IngestIdentifier() {
  return "COTC";
}

inline bool CotChatData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotChatData_IngestIdentifier());
}

inline bool SizePrefixedCotChatData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotChatData_IngestIdentifier(), true);
}

inline bool VerifyCotChatData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CotChatData_Ingest>(CotChatData_IngestIdentifier());
}

inline bool VerifySizePrefixedCotChatData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CotChatData_Ingest>(CotChatData_IngestIdentifier());
}

inline void FinishCotChatData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotChatData_Ingest> root) {
  fbb.Finish(root, CotChatData_IngestIdentifier());
}

inline void FinishSizePrefixedCotChatData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotChatData_Ingest> root) {
  fbb.FinishSizePrefixed(root, CotChatData_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
