// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Port_Full;
struct Port_FullBuilder;

enum Port_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Port_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Port_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Port_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Port_Full_dataMode_Enum_EXERCISE = 3,
  Port_Full_dataMode_Enum_MIN = Port_Full_dataMode_Enum_REAL,
  Port_Full_dataMode_Enum_MAX = Port_Full_dataMode_Enum_EXERCISE
};

inline const Port_Full_dataMode_Enum (&EnumValuesPort_Full_dataMode_Enum())[4] {
  static const Port_Full_dataMode_Enum values[] = {
    Port_Full_dataMode_Enum_REAL,
    Port_Full_dataMode_Enum_TEST,
    Port_Full_dataMode_Enum_SIMULATED,
    Port_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesPort_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNamePort_Full_dataMode_Enum(Port_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Port_Full_dataMode_Enum_REAL, Port_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPort_Full_dataMode_Enum()[index];
}

/// /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
struct Port_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Port_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDSITE = 8,
    VT_EXTERNALID = 10,
    VT_LOCODE = 12,
    VT_PORTNAME = 14,
    VT_HARBORTYPE = 16,
    VT_HARBORSIZE = 18,
    VT_MAXDRAUGHT = 20,
    VT_AVGDURATION = 22,
    VT_TIDERANGE = 24,
    VT_SHELTER = 26,
    VT_PILOTREQD = 28,
    VT_LAT = 30,
    VT_LON = 32,
    VT_COUNTRYCODE = 34,
    VT_CREATEDAT = 36,
    VT_CREATEDBY = 38,
    VT_UPDATEDAT = 40,
    VT_UPDATEDBY = 42,
    VT_SOURCE = 44,
    VT_SOURCEDL = 46,
    VT_ORIGIN = 48,
    VT_DATAMODE = 50,
    VT_ORIGNETWORK = 52
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the Site Entity associated with the Port record.
  /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSite() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSITE);
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
  /// Example: /// Example: CAVAN
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *locode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCODE);
  }
  /// The name of this port.
  /// Example: /// Example: Vancouver
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *portName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PORTNAME);
  }
  /// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
  /// COASTAL BREAKWATER (CB)
  /// COASTAL NATURAL (CN)
  /// COASTAL TIDE GATE  (CT)
  /// LAKE OR CANAL (LC)
  /// OPEN ROADSTEAD (OR)
  /// RIVER BASIN (RB)
  /// RIVER NATURAL (RN)
  /// RIVER TIDE GATE (RT)
  /// TYPHOON HARBOR  (TH).
  /// Example: /// Example: COASTAL NATURAL
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *harborType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HARBORTYPE);
  }
  /// The size of the harbor for this port measured in square kilometers.
  /// Example: /// Example: 160.1
  /// Constraints: No constraints specified.
  double harborSize() const {
    return GetField<double>(VT_HARBORSIZE, 0.0);
  }
  /// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
  /// Example: /// Example: 18.1
  /// Constraints: No constraints specified.
  double maxDraught() const {
    return GetField<double>(VT_MAXDRAUGHT, 0.0);
  }
  /// Average time for a vessel at this port in hours.
  /// Example: /// Example: 41.1
  /// Constraints: No constraints specified.
  double avgDuration() const {
    return GetField<double>(VT_AVGDURATION, 0.0);
  }
  /// The tide range of this port in meters.
  /// Example: /// Example: 4.1
  /// Constraints: No constraints specified.
  double tideRange() const {
    return GetField<double>(VT_TIDERANGE, 0.0);
  }
  /// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
  /// Example: /// Example: EXCELLENT
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *shelter() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHELTER);
  }
  /// Flag indicating whether a pilot is required at this port.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool pilotReqd() const {
    return GetField<uint8_t>(VT_PILOTREQD, 0) != 0;
  }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// The country where this port is located.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  Port_Full_dataMode_Enum dataMode() const {
    return static_cast<Port_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDSITE) &&
           verifier.VerifyString(idSite()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_LOCODE) &&
           verifier.VerifyString(locode()) &&
           VerifyOffset(verifier, VT_PORTNAME) &&
           verifier.VerifyString(portName()) &&
           VerifyOffset(verifier, VT_HARBORTYPE) &&
           verifier.VerifyString(harborType()) &&
           VerifyField<double>(verifier, VT_HARBORSIZE, 8) &&
           VerifyField<double>(verifier, VT_MAXDRAUGHT, 8) &&
           VerifyField<double>(verifier, VT_AVGDURATION, 8) &&
           VerifyField<double>(verifier, VT_TIDERANGE, 8) &&
           VerifyOffset(verifier, VT_SHELTER) &&
           verifier.VerifyString(shelter()) &&
           VerifyField<uint8_t>(verifier, VT_PILOTREQD, 1) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Port_FullBuilder {
  typedef Port_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Port_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Port_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idSite(::flatbuffers::Offset<::flatbuffers::String> idSite) {
    fbb_.AddOffset(Port_Full::VT_IDSITE, idSite);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(Port_Full::VT_EXTERNALID, externalId);
  }
  void add_locode(::flatbuffers::Offset<::flatbuffers::String> locode) {
    fbb_.AddOffset(Port_Full::VT_LOCODE, locode);
  }
  void add_portName(::flatbuffers::Offset<::flatbuffers::String> portName) {
    fbb_.AddOffset(Port_Full::VT_PORTNAME, portName);
  }
  void add_harborType(::flatbuffers::Offset<::flatbuffers::String> harborType) {
    fbb_.AddOffset(Port_Full::VT_HARBORTYPE, harborType);
  }
  void add_harborSize(double harborSize) {
    fbb_.AddElement<double>(Port_Full::VT_HARBORSIZE, harborSize, 0.0);
  }
  void add_maxDraught(double maxDraught) {
    fbb_.AddElement<double>(Port_Full::VT_MAXDRAUGHT, maxDraught, 0.0);
  }
  void add_avgDuration(double avgDuration) {
    fbb_.AddElement<double>(Port_Full::VT_AVGDURATION, avgDuration, 0.0);
  }
  void add_tideRange(double tideRange) {
    fbb_.AddElement<double>(Port_Full::VT_TIDERANGE, tideRange, 0.0);
  }
  void add_shelter(::flatbuffers::Offset<::flatbuffers::String> shelter) {
    fbb_.AddOffset(Port_Full::VT_SHELTER, shelter);
  }
  void add_pilotReqd(bool pilotReqd) {
    fbb_.AddElement<uint8_t>(Port_Full::VT_PILOTREQD, static_cast<uint8_t>(pilotReqd), 0);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(Port_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(Port_Full::VT_LON, lon, 0.0);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Port_Full::VT_COUNTRYCODE, countryCode);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Port_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Port_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Port_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Port_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Port_Full::VT_SOURCE, source);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Port_Full::VT_SOURCEDL, sourceDL);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Port_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(Port_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Port_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Port_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit Port_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Port_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Port_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Port_Full> CreatePort_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSite = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> locode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> portName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> harborType = 0,
    double harborSize = 0.0,
    double maxDraught = 0.0,
    double avgDuration = 0.0,
    double tideRange = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> shelter = 0,
    bool pilotReqd = false,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Port_Full_dataMode_Enum dataMode = Port_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Port_FullBuilder builder_(_fbb);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_tideRange(tideRange);
  builder_.add_avgDuration(avgDuration);
  builder_.add_maxDraught(maxDraught);
  builder_.add_harborSize(harborSize);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_sourceDL(sourceDL);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_countryCode(countryCode);
  builder_.add_shelter(shelter);
  builder_.add_harborType(harborType);
  builder_.add_portName(portName);
  builder_.add_locode(locode);
  builder_.add_externalId(externalId);
  builder_.add_idSite(idSite);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_pilotReqd(pilotReqd);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Port_Full> CreatePort_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idSite = nullptr,
    const char *externalId = nullptr,
    const char *locode = nullptr,
    const char *portName = nullptr,
    const char *harborType = nullptr,
    double harborSize = 0.0,
    double maxDraught = 0.0,
    double avgDuration = 0.0,
    double tideRange = 0.0,
    const char *shelter = nullptr,
    bool pilotReqd = false,
    double lat = 0.0,
    double lon = 0.0,
    const char *countryCode = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *sourceDL = nullptr,
    const char *origin = nullptr,
    Port_Full_dataMode_Enum dataMode = Port_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idSite__ = idSite ? _fbb.CreateString(idSite) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto locode__ = locode ? _fbb.CreateString(locode) : 0;
  auto portName__ = portName ? _fbb.CreateString(portName) : 0;
  auto harborType__ = harborType ? _fbb.CreateString(harborType) : 0;
  auto shelter__ = shelter ? _fbb.CreateString(shelter) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreatePort_Full(
      _fbb,
      id__,
      classificationMarking__,
      idSite__,
      externalId__,
      locode__,
      portName__,
      harborType__,
      harborSize,
      maxDraught,
      avgDuration,
      tideRange,
      shelter__,
      pilotReqd,
      lat,
      lon,
      countryCode__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      sourceDL__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const Port_Full *GetPort_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Port_Full>(buf);
}

inline const Port_Full *GetSizePrefixedPort_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Port_Full>(buf);
}

inline const char *Port_FullIdentifier() {
  return "PORT";
}

inline bool Port_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Port_FullIdentifier());
}

inline bool SizePrefixedPort_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Port_FullIdentifier(), true);
}

inline bool VerifyPort_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Port_Full>(Port_FullIdentifier());
}

inline bool VerifySizePrefixedPort_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Port_Full>(Port_FullIdentifier());
}

inline void FinishPort_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Port_Full> root) {
  fbb.Finish(root, Port_FullIdentifier());
}

inline void FinishSizePrefixedPort_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Port_Full> root) {
  fbb.FinishSizePrefixed(root, Port_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
