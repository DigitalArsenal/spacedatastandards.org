// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SensorPlan_Abridged;
struct SensorPlan_AbridgedBuilder;

enum SensorPlan_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SensorPlan_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SensorPlan_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SensorPlan_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SensorPlan_Abridged_dataMode_Enum_EXERCISE = 3,
  SensorPlan_Abridged_dataMode_Enum_MIN = SensorPlan_Abridged_dataMode_Enum_REAL,
  SensorPlan_Abridged_dataMode_Enum_MAX = SensorPlan_Abridged_dataMode_Enum_EXERCISE
};

inline const SensorPlan_Abridged_dataMode_Enum (&EnumValuesSensorPlan_Abridged_dataMode_Enum())[4] {
  static const SensorPlan_Abridged_dataMode_Enum values[] = {
    SensorPlan_Abridged_dataMode_Enum_REAL,
    SensorPlan_Abridged_dataMode_Enum_TEST,
    SensorPlan_Abridged_dataMode_Enum_SIMULATED,
    SensorPlan_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSensorPlan_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSensorPlan_Abridged_dataMode_Enum(SensorPlan_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SensorPlan_Abridged_dataMode_Enum_REAL, SensorPlan_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSensorPlan_Abridged_dataMode_Enum()[index];
}

/// /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
struct SensorPlan_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SensorPlan_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_TYPE = 8,
    VT_RECTYPE = 10,
    VT_STARTTIME = 12,
    VT_ENDTIME = 14,
    VT_NAME = 16,
    VT_IDSENSOR = 18,
    VT_ORIGSENSORID = 20,
    VT_PURPOSE = 22,
    VT_SENNETWORK = 24,
    VT_REQTOTAL = 26,
    VT_CUSTOMER = 28,
    VT_STATUS = 30,
    VT_CREATEDAT = 32,
    VT_CREATEDBY = 34,
    VT_SOURCE = 36,
    VT_ORIGIN = 38,
    VT_DATAMODE = 40,
    VT_ORIGNETWORK = 42
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORPLAN-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
  /// Example: /// Example: PLAN
  /// Constraints: Minimum length = 1, Maximum length = 12
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The type of records that comprise this parent set (COLLECT, CONTACT).
  /// Example: /// Example: COLLECT
  /// Constraints: Minimum length = 1, Maximum length = 12
  const ::flatbuffers::String *recType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECTYPE);
  }
  /// The start time of the plan or schedule, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The end time of the plan or schedule, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Name associated with this plan or schedule.
  /// Example: /// Example: EXAMPLE NAME
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Unique identifier of the requested/schedule/planned sensor associated with this request.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// The purpose/description of this plan or schedule.
  /// Example: /// Example: Example purpose
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *purpose() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PURPOSE);
  }
  /// The sensor or ground network associated with this plan or schedule.
  /// Example: /// Example: NETWORK
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *senNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENNETWORK);
  }
  /// The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t reqTotal() const {
    return GetField<int32_t>(VT_REQTOTAL, 0);
  }
  /// The customer for this plan or schedule.
  /// Example: /// Example: CUSTOMER
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *customer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CUSTOMER);
  }
  /// The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
  /// Example: /// Example: ACCEPTED
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SensorPlan_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SensorPlan_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_RECTYPE) &&
           verifier.VerifyString(recType()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_PURPOSE) &&
           verifier.VerifyString(purpose()) &&
           VerifyOffset(verifier, VT_SENNETWORK) &&
           verifier.VerifyString(senNetwork()) &&
           VerifyField<int32_t>(verifier, VT_REQTOTAL, 4) &&
           VerifyOffset(verifier, VT_CUSTOMER) &&
           verifier.VerifyString(customer()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct SensorPlan_AbridgedBuilder {
  typedef SensorPlan_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_TYPE, type);
  }
  void add_recType(::flatbuffers::Offset<::flatbuffers::String> recType) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_RECTYPE, recType);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_ENDTIME, endTime);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_NAME, name);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_purpose(::flatbuffers::Offset<::flatbuffers::String> purpose) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_PURPOSE, purpose);
  }
  void add_senNetwork(::flatbuffers::Offset<::flatbuffers::String> senNetwork) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_SENNETWORK, senNetwork);
  }
  void add_reqTotal(int32_t reqTotal) {
    fbb_.AddElement<int32_t>(SensorPlan_Abridged::VT_REQTOTAL, reqTotal, 0);
  }
  void add_customer(::flatbuffers::Offset<::flatbuffers::String> customer) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_CUSTOMER, customer);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_STATUS, status);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(SensorPlan_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SensorPlan_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SensorPlan_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit SensorPlan_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SensorPlan_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SensorPlan_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SensorPlan_Abridged> CreateSensorPlan_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> recType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> purpose = 0,
    ::flatbuffers::Offset<::flatbuffers::String> senNetwork = 0,
    int32_t reqTotal = 0,
    ::flatbuffers::Offset<::flatbuffers::String> customer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    SensorPlan_Abridged_dataMode_Enum dataMode = SensorPlan_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  SensorPlan_AbridgedBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_status(status);
  builder_.add_customer(customer);
  builder_.add_reqTotal(reqTotal);
  builder_.add_senNetwork(senNetwork);
  builder_.add_purpose(purpose);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_name(name);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_recType(recType);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SensorPlan_Abridged> CreateSensorPlan_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    const char *recType = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *name = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *purpose = nullptr,
    const char *senNetwork = nullptr,
    int32_t reqTotal = 0,
    const char *customer = nullptr,
    const char *status = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    SensorPlan_Abridged_dataMode_Enum dataMode = SensorPlan_Abridged_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto recType__ = recType ? _fbb.CreateString(recType) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto purpose__ = purpose ? _fbb.CreateString(purpose) : 0;
  auto senNetwork__ = senNetwork ? _fbb.CreateString(senNetwork) : 0;
  auto customer__ = customer ? _fbb.CreateString(customer) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSensorPlan_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      type__,
      recType__,
      startTime__,
      endTime__,
      name__,
      idSensor__,
      origSensorId__,
      purpose__,
      senNetwork__,
      reqTotal,
      customer__,
      status__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const SensorPlan_Abridged *GetSensorPlan_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SensorPlan_Abridged>(buf);
}

inline const SensorPlan_Abridged *GetSizePrefixedSensorPlan_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SensorPlan_Abridged>(buf);
}

inline const char *SensorPlan_AbridgedIdentifier() {
  return "SENS";
}

inline bool SensorPlan_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SensorPlan_AbridgedIdentifier());
}

inline bool SizePrefixedSensorPlan_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SensorPlan_AbridgedIdentifier(), true);
}

inline bool VerifySensorPlan_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SensorPlan_Abridged>(SensorPlan_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSensorPlan_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SensorPlan_Abridged>(SensorPlan_AbridgedIdentifier());
}

inline void FinishSensorPlan_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SensorPlan_Abridged> root) {
  fbb.Finish(root, SensorPlan_AbridgedIdentifier());
}

inline void FinishSizePrefixedSensorPlan_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SensorPlan_Abridged> root) {
  fbb.FinishSizePrefixed(root, SensorPlan_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
