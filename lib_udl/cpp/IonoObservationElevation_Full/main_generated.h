// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationElevation_Full;
struct IonoObservationElevation_FullBuilder;

/// /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
struct IonoObservationElevation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationElevation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTES = 4,
    VT_DIMENSIONS = 6,
    VT_DIMENSIONNAME = 8,
    VT_DATA = 10
  };
  /// Notes for the elevation data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array of integers of the elevation array dimensions.
  /// Example: /// Example: [2, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONS);
  }
  /// Array of names for dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONNAME);
  }
  /// Array of incoming elevation at the receiver.
  /// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_DIMENSIONS) &&
           verifier.VerifyVector(dimensions()) &&
           verifier.VerifyVectorOfStrings(dimensions()) &&
           VerifyOffset(verifier, VT_DIMENSIONNAME) &&
           verifier.VerifyVector(dimensionName()) &&
           verifier.VerifyVectorOfStrings(dimensionName()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct IonoObservationElevation_FullBuilder {
  typedef IonoObservationElevation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(IonoObservationElevation_Full::VT_NOTES, notes);
  }
  void add_dimensions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions) {
    fbb_.AddOffset(IonoObservationElevation_Full::VT_DIMENSIONS, dimensions);
  }
  void add_dimensionName(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName) {
    fbb_.AddOffset(IonoObservationElevation_Full::VT_DIMENSIONNAME, dimensionName);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data) {
    fbb_.AddOffset(IonoObservationElevation_Full::VT_DATA, data);
  }
  explicit IonoObservationElevation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationElevation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationElevation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationElevation_Full> CreateIonoObservationElevation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data = 0) {
  IonoObservationElevation_FullBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_dimensionName(dimensionName);
  builder_.add_dimensions(dimensions);
  builder_.add_notes(notes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationElevation_Full> CreateIonoObservationElevation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *data = nullptr) {
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto dimensions__ = dimensions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensions) : 0;
  auto dimensionName__ = dimensionName ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensionName) : 0;
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*data) : 0;
  return CreateIonoObservationElevation_Full(
      _fbb,
      notes__,
      dimensions__,
      dimensionName__,
      data__);
}

inline const IonoObservationElevation_Full *GetIonoObservationElevation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationElevation_Full>(buf);
}

inline const IonoObservationElevation_Full *GetSizePrefixedIonoObservationElevation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationElevation_Full>(buf);
}

inline const char *IonoObservationElevation_FullIdentifier() {
  return "IONO";
}

inline bool IonoObservationElevation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationElevation_FullIdentifier());
}

inline bool SizePrefixedIonoObservationElevation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationElevation_FullIdentifier(), true);
}

inline bool VerifyIonoObservationElevation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationElevation_Full>(IonoObservationElevation_FullIdentifier());
}

inline bool VerifySizePrefixedIonoObservationElevation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationElevation_Full>(IonoObservationElevation_FullIdentifier());
}

inline void FinishIonoObservationElevation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationElevation_Full> root) {
  fbb.Finish(root, IonoObservationElevation_FullIdentifier());
}

inline void FinishSizePrefixedIonoObservationElevation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationElevation_Full> root) {
  fbb.FinishSizePrefixed(root, IonoObservationElevation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
