// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GenText_Abridged;
struct GenText_AbridgedBuilder;

/// /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
struct GenText_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GenText_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXTIND = 4,
    VT_TEXT = 6
  };
  /// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
  /// Example: /// Example: OPENING REMARKS
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *textInd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXTIND);
  }
  /// The free text that describes the information specific to the text indicator.
  /// Example: /// Example: FREE-TEXT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTIND) &&
           verifier.VerifyString(textInd()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct GenText_AbridgedBuilder {
  typedef GenText_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_textInd(::flatbuffers::Offset<::flatbuffers::String> textInd) {
    fbb_.AddOffset(GenText_Abridged::VT_TEXTIND, textInd);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(GenText_Abridged::VT_TEXT, text);
  }
  explicit GenText_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GenText_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GenText_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GenText_Abridged> CreateGenText_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> textInd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  GenText_AbridgedBuilder builder_(_fbb);
  builder_.add_text(text);
  builder_.add_textInd(textInd);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GenText_Abridged> CreateGenText_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *textInd = nullptr,
    const char *text = nullptr) {
  auto textInd__ = textInd ? _fbb.CreateString(textInd) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return CreateGenText_Abridged(
      _fbb,
      textInd__,
      text__);
}

inline const GenText_Abridged *GetGenText_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<GenText_Abridged>(buf);
}

inline const GenText_Abridged *GetSizePrefixedGenText_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GenText_Abridged>(buf);
}

inline const char *GenText_AbridgedIdentifier() {
  return "GENT";
}

inline bool GenText_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GenText_AbridgedIdentifier());
}

inline bool SizePrefixedGenText_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GenText_AbridgedIdentifier(), true);
}

inline bool VerifyGenText_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GenText_Abridged>(GenText_AbridgedIdentifier());
}

inline bool VerifySizePrefixedGenText_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GenText_Abridged>(GenText_AbridgedIdentifier());
}

inline void FinishGenText_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenText_Abridged> root) {
  fbb.Finish(root, GenText_AbridgedIdentifier());
}

inline void FinishSizePrefixedGenText_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GenText_Abridged> root) {
  fbb.FinishSizePrefixed(root, GenText_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
