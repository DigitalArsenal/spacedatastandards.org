// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacEtiology_Ingest;
struct EvacEtiology_IngestBuilder;

/// /// Medical condition causation information.
struct EvacEtiology_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacEtiology_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODYPART = 6,
    VT_TIME = 8,
    VT_COMMENTS = 10
  };
  /// The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
  /// Example: /// Example: BURN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: ARM LEFT FRONT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// Datetime of the discovery of the etiology state in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-16T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// Additional comments on the patient's etiology information.
  /// Example: /// Example: Comments on the etiology info.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacEtiology_IngestBuilder {
  typedef EvacEtiology_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacEtiology_Ingest::VT_TYPE, type);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacEtiology_Ingest::VT_BODYPART, bodyPart);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacEtiology_Ingest::VT_TIME, time);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacEtiology_Ingest::VT_COMMENTS, comments);
  }
  explicit EvacEtiology_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacEtiology_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacEtiology_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacEtiology_Ingest> CreateEvacEtiology_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacEtiology_IngestBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_time(time);
  builder_.add_bodyPart(bodyPart);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacEtiology_Ingest> CreateEvacEtiology_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *bodyPart = nullptr,
    const char *time = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacEtiology_Ingest(
      _fbb,
      type__,
      bodyPart__,
      time__,
      comments__);
}

inline const EvacEtiology_Ingest *GetEvacEtiology_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<EvacEtiology_Ingest>(buf);
}

inline const EvacEtiology_Ingest *GetSizePrefixedEvacEtiology_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacEtiology_Ingest>(buf);
}

inline const char *EvacEtiology_IngestIdentifier() {
  return "EVAC";
}

inline bool EvacEtiology_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacEtiology_IngestIdentifier());
}

inline bool SizePrefixedEvacEtiology_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacEtiology_IngestIdentifier(), true);
}

inline bool VerifyEvacEtiology_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacEtiology_Ingest>(EvacEtiology_IngestIdentifier());
}

inline bool VerifySizePrefixedEvacEtiology_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacEtiology_Ingest>(EvacEtiology_IngestIdentifier());
}

inline void FinishEvacEtiology_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacEtiology_Ingest> root) {
  fbb.Finish(root, EvacEtiology_IngestIdentifier());
}

inline void FinishSizePrefixedEvacEtiology_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacEtiology_Ingest> root) {
  fbb.FinishSizePrefixed(root, EvacEtiology_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
