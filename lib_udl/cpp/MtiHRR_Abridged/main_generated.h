// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiHRR_Abridged;
struct MtiHRR_AbridgedBuilder;

/// /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
struct MtiHRR_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiHRR_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_H2 = 4,
    VT_H3 = 6,
    VT_H4 = 8,
    VT_H5 = 10,
    VT_H6 = 12,
    VT_H7 = 14,
    VT_H8 = 16,
    VT_H9 = 18,
    VT_H10 = 20,
    VT_H11 = 22,
    VT_H12 = 24,
    VT_H13 = 26,
    VT_H14 = 28,
    VT_H15 = 30,
    VT_H16 = 32,
    VT_H17 = 34,
    VT_H18 = 36,
    VT_H19 = 38,
    VT_H20 = 40,
    VT_H21 = 42,
    VT_H22 = 44,
    VT_H23 = 46,
    VT_H24 = 48,
    VT_H27 = 50,
    VT_H28 = 52,
    VT_H29 = 54,
    VT_H30 = 56,
    VT_H31 = 58,
    VT_H32 = 60
  };
  /// Sequential count of a revisit of the bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h2() const {
    return GetField<int32_t>(VT_H2, 0);
  }
  /// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h3() const {
    return GetField<int32_t>(VT_H3, 0);
  }
  /// Flag to indicate the last dwell of the revisit.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool h4() const {
    return GetField<uint8_t>(VT_H4, 0) != 0;
  }
  /// Sequential index of the associated MTI Report.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h5() const {
    return GetField<int32_t>(VT_H5, 0);
  }
  /// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h6() const {
    return GetField<int32_t>(VT_H6, 0);
  }
  /// Number of Range Bins/Samples in a Range Doppler Chip.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h7() const {
    return GetField<int32_t>(VT_H7, 0);
  }
  /// Number of Doppler bins in a Range-Doppler chip.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t h8() const {
    return GetField<int32_t>(VT_H8, 0);
  }
  /// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h9() const {
    return GetField<int32_t>(VT_H9, 0);
  }
  /// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h10() const {
    return GetField<int32_t>(VT_H10, 0);
  }
  /// 3dB range impulse response of the radar, expressed in centimeters.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h11() const {
    return GetField<double>(VT_H11, 0.0);
  }
  /// Slant Range pixel spacing after over sampling, expressed in centimeters.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h12() const {
    return GetField<double>(VT_H12, 0.0);
  }
  /// 3dB Doppler resolution of the radar, expressed in Hertz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h13() const {
    return GetField<double>(VT_H13, 0.0);
  }
  /// Doppler pixel spacing after over sampling, expressed in Hertz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h14() const {
    return GetField<double>(VT_H14, 0.0);
  }
  /// Center Frequency of the radar in GHz.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h15() const {
    return GetField<double>(VT_H15, 0.0);
  }
  /// Enumeration table denoting the compression technique used.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *h16() const {
    return GetPointer<const ::flatbuffers::String *>(VT_H16);
  }
  /// Enumeration table indicating the spectral weighting used in the range compression process.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *h17() const {
    return GetPointer<const ::flatbuffers::String *>(VT_H17);
  }
  /// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
  /// Example: /// Example: TABLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *h18() const {
    return GetPointer<const ::flatbuffers::String *>(VT_H18);
  }
  /// Initial power of the peak scatterer, expressed in dB.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double h19() const {
    return GetField<double>(VT_H19, 0.0);
  }
  /// RCS of the peak scatterer, expressed in half-decibels (dB/2).
  /// Example: /// Example: 117
  /// Constraints: No constraints specified.
  int32_t h20() const {
    return GetField<int32_t>(VT_H20, 0);
  }
  /// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h21() const {
    return GetField<int32_t>(VT_H21, 0);
  }
  /// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h22() const {
    return GetField<int32_t>(VT_H22, 0);
  }
  /// Enumeration field which designates the type of data being delivered.
  /// Example: /// Example: FIELD
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *h23() const {
    return GetPointer<const ::flatbuffers::String *>(VT_H23);
  }
  /// Flag field to indicate the additional signal processing techniques applied to the data.
  /// Example: /// Example: FLAG
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *h24() const {
    return GetPointer<const ::flatbuffers::String *>(VT_H24);
  }
  /// Number of pixels in the range dimension of the chip.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h27() const {
    return GetField<int32_t>(VT_H27, 0);
  }
  /// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  int64_t h28() const {
    return GetField<int64_t>(VT_H28, 0);
  }
  /// Relative velocity to skin line.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h29() const {
    return GetField<int32_t>(VT_H29, 0);
  }
  /// Computed object length based upon HRR profile, in meters.
  /// Example: /// Example: 22
  /// Constraints: No constraints specified.
  int32_t h30() const {
    return GetField<int32_t>(VT_H30, 0);
  }
  /// Standard deviation of estimate of the object length, expressed in meters.
  /// Example: /// Example: 55
  /// Constraints: No constraints specified.
  int32_t h31() const {
    return GetField<int32_t>(VT_H31, 0);
  }
  /// Standard deviation of estimate of the object length, expressed in meters.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *h32() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_H32);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_H2, 4) &&
           VerifyField<int32_t>(verifier, VT_H3, 4) &&
           VerifyField<uint8_t>(verifier, VT_H4, 1) &&
           VerifyField<int32_t>(verifier, VT_H5, 4) &&
           VerifyField<int32_t>(verifier, VT_H6, 4) &&
           VerifyField<int32_t>(verifier, VT_H7, 4) &&
           VerifyField<int32_t>(verifier, VT_H8, 4) &&
           VerifyField<int32_t>(verifier, VT_H9, 4) &&
           VerifyField<int32_t>(verifier, VT_H10, 4) &&
           VerifyField<double>(verifier, VT_H11, 8) &&
           VerifyField<double>(verifier, VT_H12, 8) &&
           VerifyField<double>(verifier, VT_H13, 8) &&
           VerifyField<double>(verifier, VT_H14, 8) &&
           VerifyField<double>(verifier, VT_H15, 8) &&
           VerifyOffset(verifier, VT_H16) &&
           verifier.VerifyString(h16()) &&
           VerifyOffset(verifier, VT_H17) &&
           verifier.VerifyString(h17()) &&
           VerifyOffset(verifier, VT_H18) &&
           verifier.VerifyString(h18()) &&
           VerifyField<double>(verifier, VT_H19, 8) &&
           VerifyField<int32_t>(verifier, VT_H20, 4) &&
           VerifyField<int32_t>(verifier, VT_H21, 4) &&
           VerifyField<int32_t>(verifier, VT_H22, 4) &&
           VerifyOffset(verifier, VT_H23) &&
           verifier.VerifyString(h23()) &&
           VerifyOffset(verifier, VT_H24) &&
           verifier.VerifyString(h24()) &&
           VerifyField<int32_t>(verifier, VT_H27, 4) &&
           VerifyField<int64_t>(verifier, VT_H28, 8) &&
           VerifyField<int32_t>(verifier, VT_H29, 4) &&
           VerifyField<int32_t>(verifier, VT_H30, 4) &&
           VerifyField<int32_t>(verifier, VT_H31, 4) &&
           VerifyOffset(verifier, VT_H32) &&
           verifier.VerifyVector(h32()) &&
           verifier.VerifyVectorOfStrings(h32()) &&
           verifier.EndTable();
  }
};

struct MtiHRR_AbridgedBuilder {
  typedef MtiHRR_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_h2(int32_t h2) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H2, h2, 0);
  }
  void add_h3(int32_t h3) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H3, h3, 0);
  }
  void add_h4(bool h4) {
    fbb_.AddElement<uint8_t>(MtiHRR_Abridged::VT_H4, static_cast<uint8_t>(h4), 0);
  }
  void add_h5(int32_t h5) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H5, h5, 0);
  }
  void add_h6(int32_t h6) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H6, h6, 0);
  }
  void add_h7(int32_t h7) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H7, h7, 0);
  }
  void add_h8(int32_t h8) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H8, h8, 0);
  }
  void add_h9(int32_t h9) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H9, h9, 0);
  }
  void add_h10(int32_t h10) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H10, h10, 0);
  }
  void add_h11(double h11) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H11, h11, 0.0);
  }
  void add_h12(double h12) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H12, h12, 0.0);
  }
  void add_h13(double h13) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H13, h13, 0.0);
  }
  void add_h14(double h14) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H14, h14, 0.0);
  }
  void add_h15(double h15) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H15, h15, 0.0);
  }
  void add_h16(::flatbuffers::Offset<::flatbuffers::String> h16) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H16, h16);
  }
  void add_h17(::flatbuffers::Offset<::flatbuffers::String> h17) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H17, h17);
  }
  void add_h18(::flatbuffers::Offset<::flatbuffers::String> h18) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H18, h18);
  }
  void add_h19(double h19) {
    fbb_.AddElement<double>(MtiHRR_Abridged::VT_H19, h19, 0.0);
  }
  void add_h20(int32_t h20) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H20, h20, 0);
  }
  void add_h21(int32_t h21) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H21, h21, 0);
  }
  void add_h22(int32_t h22) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H22, h22, 0);
  }
  void add_h23(::flatbuffers::Offset<::flatbuffers::String> h23) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H23, h23);
  }
  void add_h24(::flatbuffers::Offset<::flatbuffers::String> h24) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H24, h24);
  }
  void add_h27(int32_t h27) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H27, h27, 0);
  }
  void add_h28(int64_t h28) {
    fbb_.AddElement<int64_t>(MtiHRR_Abridged::VT_H28, h28, 0);
  }
  void add_h29(int32_t h29) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H29, h29, 0);
  }
  void add_h30(int32_t h30) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H30, h30, 0);
  }
  void add_h31(int32_t h31) {
    fbb_.AddElement<int32_t>(MtiHRR_Abridged::VT_H31, h31, 0);
  }
  void add_h32(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> h32) {
    fbb_.AddOffset(MtiHRR_Abridged::VT_H32, h32);
  }
  explicit MtiHRR_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiHRR_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiHRR_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiHRR_Abridged> CreateMtiHRR_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t h2 = 0,
    int32_t h3 = 0,
    bool h4 = false,
    int32_t h5 = 0,
    int32_t h6 = 0,
    int32_t h7 = 0,
    int32_t h8 = 0,
    int32_t h9 = 0,
    int32_t h10 = 0,
    double h11 = 0.0,
    double h12 = 0.0,
    double h13 = 0.0,
    double h14 = 0.0,
    double h15 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> h16 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> h17 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> h18 = 0,
    double h19 = 0.0,
    int32_t h20 = 0,
    int32_t h21 = 0,
    int32_t h22 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> h23 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> h24 = 0,
    int32_t h27 = 0,
    int64_t h28 = 0,
    int32_t h29 = 0,
    int32_t h30 = 0,
    int32_t h31 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> h32 = 0) {
  MtiHRR_AbridgedBuilder builder_(_fbb);
  builder_.add_h28(h28);
  builder_.add_h19(h19);
  builder_.add_h15(h15);
  builder_.add_h14(h14);
  builder_.add_h13(h13);
  builder_.add_h12(h12);
  builder_.add_h11(h11);
  builder_.add_h32(h32);
  builder_.add_h31(h31);
  builder_.add_h30(h30);
  builder_.add_h29(h29);
  builder_.add_h27(h27);
  builder_.add_h24(h24);
  builder_.add_h23(h23);
  builder_.add_h22(h22);
  builder_.add_h21(h21);
  builder_.add_h20(h20);
  builder_.add_h18(h18);
  builder_.add_h17(h17);
  builder_.add_h16(h16);
  builder_.add_h10(h10);
  builder_.add_h9(h9);
  builder_.add_h8(h8);
  builder_.add_h7(h7);
  builder_.add_h6(h6);
  builder_.add_h5(h5);
  builder_.add_h3(h3);
  builder_.add_h2(h2);
  builder_.add_h4(h4);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiHRR_Abridged> CreateMtiHRR_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t h2 = 0,
    int32_t h3 = 0,
    bool h4 = false,
    int32_t h5 = 0,
    int32_t h6 = 0,
    int32_t h7 = 0,
    int32_t h8 = 0,
    int32_t h9 = 0,
    int32_t h10 = 0,
    double h11 = 0.0,
    double h12 = 0.0,
    double h13 = 0.0,
    double h14 = 0.0,
    double h15 = 0.0,
    const char *h16 = nullptr,
    const char *h17 = nullptr,
    const char *h18 = nullptr,
    double h19 = 0.0,
    int32_t h20 = 0,
    int32_t h21 = 0,
    int32_t h22 = 0,
    const char *h23 = nullptr,
    const char *h24 = nullptr,
    int32_t h27 = 0,
    int64_t h28 = 0,
    int32_t h29 = 0,
    int32_t h30 = 0,
    int32_t h31 = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *h32 = nullptr) {
  auto h16__ = h16 ? _fbb.CreateString(h16) : 0;
  auto h17__ = h17 ? _fbb.CreateString(h17) : 0;
  auto h18__ = h18 ? _fbb.CreateString(h18) : 0;
  auto h23__ = h23 ? _fbb.CreateString(h23) : 0;
  auto h24__ = h24 ? _fbb.CreateString(h24) : 0;
  auto h32__ = h32 ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*h32) : 0;
  return CreateMtiHRR_Abridged(
      _fbb,
      h2,
      h3,
      h4,
      h5,
      h6,
      h7,
      h8,
      h9,
      h10,
      h11,
      h12,
      h13,
      h14,
      h15,
      h16__,
      h17__,
      h18__,
      h19,
      h20,
      h21,
      h22,
      h23__,
      h24__,
      h27,
      h28,
      h29,
      h30,
      h31,
      h32__);
}

inline const MtiHRR_Abridged *GetMtiHRR_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<MtiHRR_Abridged>(buf);
}

inline const MtiHRR_Abridged *GetSizePrefixedMtiHRR_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiHRR_Abridged>(buf);
}

inline const char *MtiHRR_AbridgedIdentifier() {
  return "MTIH";
}

inline bool MtiHRR_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiHRR_AbridgedIdentifier());
}

inline bool SizePrefixedMtiHRR_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiHRR_AbridgedIdentifier(), true);
}

inline bool VerifyMtiHRR_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiHRR_Abridged>(MtiHRR_AbridgedIdentifier());
}

inline bool VerifySizePrefixedMtiHRR_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiHRR_Abridged>(MtiHRR_AbridgedIdentifier());
}

inline void FinishMtiHRR_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiHRR_Abridged> root) {
  fbb.Finish(root, MtiHRR_AbridgedIdentifier());
}

inline void FinishSizePrefixedMtiHRR_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiHRR_Abridged> root) {
  fbb.FinishSizePrefixed(root, MtiHRR_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
