// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirspaceControlPoint_Abridged;
struct AirspaceControlPoint_AbridgedBuilder;

/// /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
struct AirspaceControlPoint_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirspaceControlPoint_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CTRLPTTYPE = 4,
    VT_CTRLPTNAME = 6,
    VT_CTRLPTLOCATION = 8,
    VT_CTRLPTALTITUDE = 10
  };
  /// One of possible control point type codes, such as CP, ER, OT, etc.
  /// Example: /// Example: CP
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *ctrlPtType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTRLPTTYPE);
  }
  /// The name applied to the control point, used as a reference.
  /// Example: /// Example: APPLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *ctrlPtName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTRLPTNAME);
  }
  /// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
  /// Example: /// Example: 203632N0594256E
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *ctrlPtLocation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTRLPTLOCATION);
  }
  /// The altitude of the control point.
  /// Example: /// Example: BRFL:MSL-FL230
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *ctrlPtAltitude() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CTRLPTALTITUDE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CTRLPTTYPE) &&
           verifier.VerifyString(ctrlPtType()) &&
           VerifyOffset(verifier, VT_CTRLPTNAME) &&
           verifier.VerifyString(ctrlPtName()) &&
           VerifyOffset(verifier, VT_CTRLPTLOCATION) &&
           verifier.VerifyString(ctrlPtLocation()) &&
           VerifyOffset(verifier, VT_CTRLPTALTITUDE) &&
           verifier.VerifyString(ctrlPtAltitude()) &&
           verifier.EndTable();
  }
};

struct AirspaceControlPoint_AbridgedBuilder {
  typedef AirspaceControlPoint_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ctrlPtType(::flatbuffers::Offset<::flatbuffers::String> ctrlPtType) {
    fbb_.AddOffset(AirspaceControlPoint_Abridged::VT_CTRLPTTYPE, ctrlPtType);
  }
  void add_ctrlPtName(::flatbuffers::Offset<::flatbuffers::String> ctrlPtName) {
    fbb_.AddOffset(AirspaceControlPoint_Abridged::VT_CTRLPTNAME, ctrlPtName);
  }
  void add_ctrlPtLocation(::flatbuffers::Offset<::flatbuffers::String> ctrlPtLocation) {
    fbb_.AddOffset(AirspaceControlPoint_Abridged::VT_CTRLPTLOCATION, ctrlPtLocation);
  }
  void add_ctrlPtAltitude(::flatbuffers::Offset<::flatbuffers::String> ctrlPtAltitude) {
    fbb_.AddOffset(AirspaceControlPoint_Abridged::VT_CTRLPTALTITUDE, ctrlPtAltitude);
  }
  explicit AirspaceControlPoint_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirspaceControlPoint_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirspaceControlPoint_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirspaceControlPoint_Abridged> CreateAirspaceControlPoint_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> ctrlPtType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ctrlPtName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ctrlPtLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ctrlPtAltitude = 0) {
  AirspaceControlPoint_AbridgedBuilder builder_(_fbb);
  builder_.add_ctrlPtAltitude(ctrlPtAltitude);
  builder_.add_ctrlPtLocation(ctrlPtLocation);
  builder_.add_ctrlPtName(ctrlPtName);
  builder_.add_ctrlPtType(ctrlPtType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirspaceControlPoint_Abridged> CreateAirspaceControlPoint_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *ctrlPtType = nullptr,
    const char *ctrlPtName = nullptr,
    const char *ctrlPtLocation = nullptr,
    const char *ctrlPtAltitude = nullptr) {
  auto ctrlPtType__ = ctrlPtType ? _fbb.CreateString(ctrlPtType) : 0;
  auto ctrlPtName__ = ctrlPtName ? _fbb.CreateString(ctrlPtName) : 0;
  auto ctrlPtLocation__ = ctrlPtLocation ? _fbb.CreateString(ctrlPtLocation) : 0;
  auto ctrlPtAltitude__ = ctrlPtAltitude ? _fbb.CreateString(ctrlPtAltitude) : 0;
  return CreateAirspaceControlPoint_Abridged(
      _fbb,
      ctrlPtType__,
      ctrlPtName__,
      ctrlPtLocation__,
      ctrlPtAltitude__);
}

inline const AirspaceControlPoint_Abridged *GetAirspaceControlPoint_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AirspaceControlPoint_Abridged>(buf);
}

inline const AirspaceControlPoint_Abridged *GetSizePrefixedAirspaceControlPoint_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirspaceControlPoint_Abridged>(buf);
}

inline const char *AirspaceControlPoint_AbridgedIdentifier() {
  return "AIRS";
}

inline bool AirspaceControlPoint_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlPoint_AbridgedIdentifier());
}

inline bool SizePrefixedAirspaceControlPoint_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlPoint_AbridgedIdentifier(), true);
}

inline bool VerifyAirspaceControlPoint_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirspaceControlPoint_Abridged>(AirspaceControlPoint_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAirspaceControlPoint_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirspaceControlPoint_Abridged>(AirspaceControlPoint_AbridgedIdentifier());
}

inline void FinishAirspaceControlPoint_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlPoint_Abridged> root) {
  fbb.Finish(root, AirspaceControlPoint_AbridgedIdentifier());
}

inline void FinishSizePrefixedAirspaceControlPoint_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlPoint_Abridged> root) {
  fbb.FinishSizePrefixed(root, AirspaceControlPoint_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
