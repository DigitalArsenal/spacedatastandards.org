// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiJobDefinition_Ingest;
struct MtiJobDefinition_IngestBuilder;

/// /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
struct MtiJobDefinition_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiJobDefinition_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_J1 = 4,
    VT_J2 = 6,
    VT_J3 = 8,
    VT_J4 = 10,
    VT_J5 = 12,
    VT_J6 = 14,
    VT_J7 = 16,
    VT_J8 = 18,
    VT_J9 = 20,
    VT_J10 = 22,
    VT_J11 = 24,
    VT_J12 = 26,
    VT_J13 = 28,
    VT_J14 = 30,
    VT_J15 = 32,
    VT_J16 = 34,
    VT_J17 = 36,
    VT_J18 = 38,
    VT_J19 = 40,
    VT_J20 = 42,
    VT_J21 = 44,
    VT_J22 = 46,
    VT_J23 = 48,
    VT_J24 = 50,
    VT_J25 = 52,
    VT_J26 = 54,
    VT_J27 = 56,
    VT_J28 = 58
  };
  /// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  int64_t j1() const {
    return GetField<int64_t>(VT_J1, 0);
  }
  /// The type of sensor or the platform.
  /// Example: /// Example: TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *j2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_J2);
  }
  /// Identifier of the particular variant of the sensor type.
  /// Example: /// Example: J3-ID
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *j3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_J3);
  }
  /// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t j4() const {
    return GetField<int32_t>(VT_J4, 0);
  }
  /// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t j5() const {
    return GetField<int32_t>(VT_J5, 0);
  }
  /// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j6() const {
    return GetField<double>(VT_J6, 0.0);
  }
  ///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j7() const {
    return GetField<double>(VT_J7, 0.0);
  }
  ///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j8() const {
    return GetField<double>(VT_J8, 0.0);
  }
  /// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j9() const {
    return GetField<double>(VT_J9, 0.0);
  }
  /// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j10() const {
    return GetField<double>(VT_J10, 0.0);
  }
  /// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j11() const {
    return GetField<double>(VT_J11, 0.0);
  }
  /// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j12() const {
    return GetField<double>(VT_J12, 0.0);
  }
  /// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j13() const {
    return GetField<double>(VT_J13, 0.0);
  }
  /// Mode in which the radar will operate for the given job ID.
  /// Example: /// Example: MODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *j14() const {
    return GetPointer<const ::flatbuffers::String *>(VT_J14);
  }
  /// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t j15() const {
    return GetField<int32_t>(VT_J15, 0);
  }
  /// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t j16() const {
    return GetField<int32_t>(VT_J16, 0);
  }
  /// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t j17() const {
    return GetField<int32_t>(VT_J17, 0);
  }
  /// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t j18() const {
    return GetField<int32_t>(VT_J18, 0);
  }
  /// Standard deviation of the estimate of sensor track heading, expressed in degrees.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j19() const {
    return GetField<int32_t>(VT_J19, 0);
  }
  /// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j20() const {
    return GetField<int32_t>(VT_J20, 0);
  }
  /// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j21() const {
    return GetField<int32_t>(VT_J21, 0);
  }
  /// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double j22() const {
    return GetField<double>(VT_J22, 0.0);
  }
  /// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j23() const {
    return GetField<int32_t>(VT_J23, 0);
  }
  /// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j24() const {
    return GetField<int32_t>(VT_J24, 0);
  }
  /// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j25() const {
    return GetField<int32_t>(VT_J25, 0);
  }
  /// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t j26() const {
    return GetField<int32_t>(VT_J26, 0);
  }
  /// The terrain elevation model used for developing the target reports.
  /// Example: /// Example: MODEL
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *j27() const {
    return GetPointer<const ::flatbuffers::String *>(VT_J27);
  }
  /// The geoid model used for developing the target reports.
  /// Example: /// Example: MODEL
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *j28() const {
    return GetPointer<const ::flatbuffers::String *>(VT_J28);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_J1, 8) &&
           VerifyOffset(verifier, VT_J2) &&
           verifier.VerifyString(j2()) &&
           VerifyOffset(verifier, VT_J3) &&
           verifier.VerifyString(j3()) &&
           VerifyField<int32_t>(verifier, VT_J4, 4) &&
           VerifyField<int32_t>(verifier, VT_J5, 4) &&
           VerifyField<double>(verifier, VT_J6, 8) &&
           VerifyField<double>(verifier, VT_J7, 8) &&
           VerifyField<double>(verifier, VT_J8, 8) &&
           VerifyField<double>(verifier, VT_J9, 8) &&
           VerifyField<double>(verifier, VT_J10, 8) &&
           VerifyField<double>(verifier, VT_J11, 8) &&
           VerifyField<double>(verifier, VT_J12, 8) &&
           VerifyField<double>(verifier, VT_J13, 8) &&
           VerifyOffset(verifier, VT_J14) &&
           verifier.VerifyString(j14()) &&
           VerifyField<int32_t>(verifier, VT_J15, 4) &&
           VerifyField<int32_t>(verifier, VT_J16, 4) &&
           VerifyField<int32_t>(verifier, VT_J17, 4) &&
           VerifyField<int32_t>(verifier, VT_J18, 4) &&
           VerifyField<int32_t>(verifier, VT_J19, 4) &&
           VerifyField<int32_t>(verifier, VT_J20, 4) &&
           VerifyField<int32_t>(verifier, VT_J21, 4) &&
           VerifyField<double>(verifier, VT_J22, 8) &&
           VerifyField<int32_t>(verifier, VT_J23, 4) &&
           VerifyField<int32_t>(verifier, VT_J24, 4) &&
           VerifyField<int32_t>(verifier, VT_J25, 4) &&
           VerifyField<int32_t>(verifier, VT_J26, 4) &&
           VerifyOffset(verifier, VT_J27) &&
           verifier.VerifyString(j27()) &&
           VerifyOffset(verifier, VT_J28) &&
           verifier.VerifyString(j28()) &&
           verifier.EndTable();
  }
};

struct MtiJobDefinition_IngestBuilder {
  typedef MtiJobDefinition_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_j1(int64_t j1) {
    fbb_.AddElement<int64_t>(MtiJobDefinition_Ingest::VT_J1, j1, 0);
  }
  void add_j2(::flatbuffers::Offset<::flatbuffers::String> j2) {
    fbb_.AddOffset(MtiJobDefinition_Ingest::VT_J2, j2);
  }
  void add_j3(::flatbuffers::Offset<::flatbuffers::String> j3) {
    fbb_.AddOffset(MtiJobDefinition_Ingest::VT_J3, j3);
  }
  void add_j4(int32_t j4) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J4, j4, 0);
  }
  void add_j5(int32_t j5) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J5, j5, 0);
  }
  void add_j6(double j6) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J6, j6, 0.0);
  }
  void add_j7(double j7) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J7, j7, 0.0);
  }
  void add_j8(double j8) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J8, j8, 0.0);
  }
  void add_j9(double j9) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J9, j9, 0.0);
  }
  void add_j10(double j10) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J10, j10, 0.0);
  }
  void add_j11(double j11) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J11, j11, 0.0);
  }
  void add_j12(double j12) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J12, j12, 0.0);
  }
  void add_j13(double j13) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J13, j13, 0.0);
  }
  void add_j14(::flatbuffers::Offset<::flatbuffers::String> j14) {
    fbb_.AddOffset(MtiJobDefinition_Ingest::VT_J14, j14);
  }
  void add_j15(int32_t j15) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J15, j15, 0);
  }
  void add_j16(int32_t j16) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J16, j16, 0);
  }
  void add_j17(int32_t j17) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J17, j17, 0);
  }
  void add_j18(int32_t j18) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J18, j18, 0);
  }
  void add_j19(int32_t j19) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J19, j19, 0);
  }
  void add_j20(int32_t j20) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J20, j20, 0);
  }
  void add_j21(int32_t j21) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J21, j21, 0);
  }
  void add_j22(double j22) {
    fbb_.AddElement<double>(MtiJobDefinition_Ingest::VT_J22, j22, 0.0);
  }
  void add_j23(int32_t j23) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J23, j23, 0);
  }
  void add_j24(int32_t j24) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J24, j24, 0);
  }
  void add_j25(int32_t j25) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J25, j25, 0);
  }
  void add_j26(int32_t j26) {
    fbb_.AddElement<int32_t>(MtiJobDefinition_Ingest::VT_J26, j26, 0);
  }
  void add_j27(::flatbuffers::Offset<::flatbuffers::String> j27) {
    fbb_.AddOffset(MtiJobDefinition_Ingest::VT_J27, j27);
  }
  void add_j28(::flatbuffers::Offset<::flatbuffers::String> j28) {
    fbb_.AddOffset(MtiJobDefinition_Ingest::VT_J28, j28);
  }
  explicit MtiJobDefinition_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiJobDefinition_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiJobDefinition_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiJobDefinition_Ingest> CreateMtiJobDefinition_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t j1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> j2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> j3 = 0,
    int32_t j4 = 0,
    int32_t j5 = 0,
    double j6 = 0.0,
    double j7 = 0.0,
    double j8 = 0.0,
    double j9 = 0.0,
    double j10 = 0.0,
    double j11 = 0.0,
    double j12 = 0.0,
    double j13 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> j14 = 0,
    int32_t j15 = 0,
    int32_t j16 = 0,
    int32_t j17 = 0,
    int32_t j18 = 0,
    int32_t j19 = 0,
    int32_t j20 = 0,
    int32_t j21 = 0,
    double j22 = 0.0,
    int32_t j23 = 0,
    int32_t j24 = 0,
    int32_t j25 = 0,
    int32_t j26 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> j27 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> j28 = 0) {
  MtiJobDefinition_IngestBuilder builder_(_fbb);
  builder_.add_j22(j22);
  builder_.add_j13(j13);
  builder_.add_j12(j12);
  builder_.add_j11(j11);
  builder_.add_j10(j10);
  builder_.add_j9(j9);
  builder_.add_j8(j8);
  builder_.add_j7(j7);
  builder_.add_j6(j6);
  builder_.add_j1(j1);
  builder_.add_j28(j28);
  builder_.add_j27(j27);
  builder_.add_j26(j26);
  builder_.add_j25(j25);
  builder_.add_j24(j24);
  builder_.add_j23(j23);
  builder_.add_j21(j21);
  builder_.add_j20(j20);
  builder_.add_j19(j19);
  builder_.add_j18(j18);
  builder_.add_j17(j17);
  builder_.add_j16(j16);
  builder_.add_j15(j15);
  builder_.add_j14(j14);
  builder_.add_j5(j5);
  builder_.add_j4(j4);
  builder_.add_j3(j3);
  builder_.add_j2(j2);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiJobDefinition_Ingest> CreateMtiJobDefinition_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t j1 = 0,
    const char *j2 = nullptr,
    const char *j3 = nullptr,
    int32_t j4 = 0,
    int32_t j5 = 0,
    double j6 = 0.0,
    double j7 = 0.0,
    double j8 = 0.0,
    double j9 = 0.0,
    double j10 = 0.0,
    double j11 = 0.0,
    double j12 = 0.0,
    double j13 = 0.0,
    const char *j14 = nullptr,
    int32_t j15 = 0,
    int32_t j16 = 0,
    int32_t j17 = 0,
    int32_t j18 = 0,
    int32_t j19 = 0,
    int32_t j20 = 0,
    int32_t j21 = 0,
    double j22 = 0.0,
    int32_t j23 = 0,
    int32_t j24 = 0,
    int32_t j25 = 0,
    int32_t j26 = 0,
    const char *j27 = nullptr,
    const char *j28 = nullptr) {
  auto j2__ = j2 ? _fbb.CreateString(j2) : 0;
  auto j3__ = j3 ? _fbb.CreateString(j3) : 0;
  auto j14__ = j14 ? _fbb.CreateString(j14) : 0;
  auto j27__ = j27 ? _fbb.CreateString(j27) : 0;
  auto j28__ = j28 ? _fbb.CreateString(j28) : 0;
  return CreateMtiJobDefinition_Ingest(
      _fbb,
      j1,
      j2__,
      j3__,
      j4,
      j5,
      j6,
      j7,
      j8,
      j9,
      j10,
      j11,
      j12,
      j13,
      j14__,
      j15,
      j16,
      j17,
      j18,
      j19,
      j20,
      j21,
      j22,
      j23,
      j24,
      j25,
      j26,
      j27__,
      j28__);
}

inline const MtiJobDefinition_Ingest *GetMtiJobDefinition_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<MtiJobDefinition_Ingest>(buf);
}

inline const MtiJobDefinition_Ingest *GetSizePrefixedMtiJobDefinition_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiJobDefinition_Ingest>(buf);
}

inline const char *MtiJobDefinition_IngestIdentifier() {
  return "MTIJ";
}

inline bool MtiJobDefinition_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiJobDefinition_IngestIdentifier());
}

inline bool SizePrefixedMtiJobDefinition_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiJobDefinition_IngestIdentifier(), true);
}

inline bool VerifyMtiJobDefinition_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiJobDefinition_Ingest>(MtiJobDefinition_IngestIdentifier());
}

inline bool VerifySizePrefixedMtiJobDefinition_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiJobDefinition_Ingest>(MtiJobDefinition_IngestIdentifier());
}

inline void FinishMtiJobDefinition_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiJobDefinition_Ingest> root) {
  fbb.Finish(root, MtiJobDefinition_IngestIdentifier());
}

inline void FinishSizePrefixedMtiJobDefinition_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiJobDefinition_Ingest> root) {
  fbb.FinishSizePrefixed(root, MtiJobDefinition_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
