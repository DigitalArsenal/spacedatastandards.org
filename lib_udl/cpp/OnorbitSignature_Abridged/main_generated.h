// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitSignature_Abridged;
struct OnorbitSignature_AbridgedBuilder;

/// /// Contains a list of common information across both Radar and EO observations.
struct OnorbitSignature_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitSignature_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EOOBSERVATION = 4,
    VT_RADAROBSERVATION = 6,
    VT_RFOBSERVATION = 8
  };
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *eoObservation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EOOBSERVATION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *radarObservation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RADAROBSERVATION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *rfObservation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RFOBSERVATION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EOOBSERVATION) &&
           verifier.VerifyString(eoObservation()) &&
           VerifyOffset(verifier, VT_RADAROBSERVATION) &&
           verifier.VerifyString(radarObservation()) &&
           VerifyOffset(verifier, VT_RFOBSERVATION) &&
           verifier.VerifyString(rfObservation()) &&
           verifier.EndTable();
  }
};

struct OnorbitSignature_AbridgedBuilder {
  typedef OnorbitSignature_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_eoObservation(::flatbuffers::Offset<::flatbuffers::String> eoObservation) {
    fbb_.AddOffset(OnorbitSignature_Abridged::VT_EOOBSERVATION, eoObservation);
  }
  void add_radarObservation(::flatbuffers::Offset<::flatbuffers::String> radarObservation) {
    fbb_.AddOffset(OnorbitSignature_Abridged::VT_RADAROBSERVATION, radarObservation);
  }
  void add_rfObservation(::flatbuffers::Offset<::flatbuffers::String> rfObservation) {
    fbb_.AddOffset(OnorbitSignature_Abridged::VT_RFOBSERVATION, rfObservation);
  }
  explicit OnorbitSignature_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitSignature_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitSignature_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitSignature_Abridged> CreateOnorbitSignature_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> eoObservation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> radarObservation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rfObservation = 0) {
  OnorbitSignature_AbridgedBuilder builder_(_fbb);
  builder_.add_rfObservation(rfObservation);
  builder_.add_radarObservation(radarObservation);
  builder_.add_eoObservation(eoObservation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitSignature_Abridged> CreateOnorbitSignature_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *eoObservation = nullptr,
    const char *radarObservation = nullptr,
    const char *rfObservation = nullptr) {
  auto eoObservation__ = eoObservation ? _fbb.CreateString(eoObservation) : 0;
  auto radarObservation__ = radarObservation ? _fbb.CreateString(radarObservation) : 0;
  auto rfObservation__ = rfObservation ? _fbb.CreateString(rfObservation) : 0;
  return CreateOnorbitSignature_Abridged(
      _fbb,
      eoObservation__,
      radarObservation__,
      rfObservation__);
}

inline const OnorbitSignature_Abridged *GetOnorbitSignature_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitSignature_Abridged>(buf);
}

inline const OnorbitSignature_Abridged *GetSizePrefixedOnorbitSignature_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitSignature_Abridged>(buf);
}

inline const char *OnorbitSignature_AbridgedIdentifier() {
  return "ONOR";
}

inline bool OnorbitSignature_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitSignature_AbridgedIdentifier());
}

inline bool SizePrefixedOnorbitSignature_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitSignature_AbridgedIdentifier(), true);
}

inline bool VerifyOnorbitSignature_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitSignature_Abridged>(OnorbitSignature_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOnorbitSignature_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitSignature_Abridged>(OnorbitSignature_AbridgedIdentifier());
}

inline void FinishOnorbitSignature_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitSignature_Abridged> root) {
  fbb.Finish(root, OnorbitSignature_AbridgedIdentifier());
}

inline void FinishSizePrefixedOnorbitSignature_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitSignature_Abridged> root) {
  fbb.FinishSizePrefixed(root, OnorbitSignature_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
