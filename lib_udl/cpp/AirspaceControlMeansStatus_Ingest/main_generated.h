// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirspaceControlMeansStatus_Ingest;
struct AirspaceControlMeansStatus_IngestBuilder;

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
struct AirspaceControlMeansStatus_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirspaceControlMeansStatus_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CMSTAT = 4,
    VT_CMSTATID = 6,
    VT_AIRSPACECONTROLMEANS = 8
  };
  /// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
  /// Example: /// Example: ADD
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *cmStat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CMSTAT);
  }
  /// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
  /// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *cmStatId() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CMSTATID);
  }
  /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *airspaceControlMeans() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AIRSPACECONTROLMEANS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CMSTAT) &&
           verifier.VerifyString(cmStat()) &&
           VerifyOffset(verifier, VT_CMSTATID) &&
           verifier.VerifyVector(cmStatId()) &&
           verifier.VerifyVectorOfStrings(cmStatId()) &&
           VerifyOffset(verifier, VT_AIRSPACECONTROLMEANS) &&
           verifier.VerifyVector(airspaceControlMeans()) &&
           verifier.VerifyVectorOfStrings(airspaceControlMeans()) &&
           verifier.EndTable();
  }
};

struct AirspaceControlMeansStatus_IngestBuilder {
  typedef AirspaceControlMeansStatus_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cmStat(::flatbuffers::Offset<::flatbuffers::String> cmStat) {
    fbb_.AddOffset(AirspaceControlMeansStatus_Ingest::VT_CMSTAT, cmStat);
  }
  void add_cmStatId(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cmStatId) {
    fbb_.AddOffset(AirspaceControlMeansStatus_Ingest::VT_CMSTATID, cmStatId);
  }
  void add_airspaceControlMeans(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> airspaceControlMeans) {
    fbb_.AddOffset(AirspaceControlMeansStatus_Ingest::VT_AIRSPACECONTROLMEANS, airspaceControlMeans);
  }
  explicit AirspaceControlMeansStatus_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest> CreateAirspaceControlMeansStatus_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> cmStat = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cmStatId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> airspaceControlMeans = 0) {
  AirspaceControlMeansStatus_IngestBuilder builder_(_fbb);
  builder_.add_airspaceControlMeans(airspaceControlMeans);
  builder_.add_cmStatId(cmStatId);
  builder_.add_cmStat(cmStat);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest> CreateAirspaceControlMeansStatus_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *cmStat = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *cmStatId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *airspaceControlMeans = nullptr) {
  auto cmStat__ = cmStat ? _fbb.CreateString(cmStat) : 0;
  auto cmStatId__ = cmStatId ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*cmStatId) : 0;
  auto airspaceControlMeans__ = airspaceControlMeans ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*airspaceControlMeans) : 0;
  return CreateAirspaceControlMeansStatus_Ingest(
      _fbb,
      cmStat__,
      cmStatId__,
      airspaceControlMeans__);
}

inline const AirspaceControlMeansStatus_Ingest *GetAirspaceControlMeansStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AirspaceControlMeansStatus_Ingest>(buf);
}

inline const AirspaceControlMeansStatus_Ingest *GetSizePrefixedAirspaceControlMeansStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirspaceControlMeansStatus_Ingest>(buf);
}

inline const char *AirspaceControlMeansStatus_IngestIdentifier() {
  return "AIRS";
}

inline bool AirspaceControlMeansStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlMeansStatus_IngestIdentifier());
}

inline bool SizePrefixedAirspaceControlMeansStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlMeansStatus_IngestIdentifier(), true);
}

inline bool VerifyAirspaceControlMeansStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirspaceControlMeansStatus_Ingest>(AirspaceControlMeansStatus_IngestIdentifier());
}

inline bool VerifySizePrefixedAirspaceControlMeansStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirspaceControlMeansStatus_Ingest>(AirspaceControlMeansStatus_IngestIdentifier());
}

inline void FinishAirspaceControlMeansStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest> root) {
  fbb.Finish(root, AirspaceControlMeansStatus_IngestIdentifier());
}

inline void FinishSizePrefixedAirspaceControlMeansStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlMeansStatus_Ingest> root) {
  fbb.FinishSizePrefixed(root, AirspaceControlMeansStatus_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
