// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ItemTracking_Full;
struct ItemTracking_FullBuilder;

enum ItemTracking_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  ItemTracking_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ItemTracking_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  ItemTracking_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ItemTracking_Full_dataMode_Enum_EXERCISE = 3,
  ItemTracking_Full_dataMode_Enum_MIN = ItemTracking_Full_dataMode_Enum_REAL,
  ItemTracking_Full_dataMode_Enum_MAX = ItemTracking_Full_dataMode_Enum_EXERCISE
};

inline const ItemTracking_Full_dataMode_Enum (&EnumValuesItemTracking_Full_dataMode_Enum())[4] {
  static const ItemTracking_Full_dataMode_Enum values[] = {
    ItemTracking_Full_dataMode_Enum_REAL,
    ItemTracking_Full_dataMode_Enum_TEST,
    ItemTracking_Full_dataMode_Enum_SIMULATED,
    ItemTracking_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesItemTracking_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameItemTracking_Full_dataMode_Enum(ItemTracking_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, ItemTracking_Full_dataMode_Enum_REAL, ItemTracking_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItemTracking_Full_dataMode_Enum()[index];
}

/// /// No description available.
struct ItemTracking_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemTracking_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SCANCODE = 8,
    VT_SCGENTOOL = 10,
    VT_SCANNERID = 12,
    VT_TS = 14,
    VT_IDITEM = 16,
    VT_TYPE = 18,
    VT_LAT = 20,
    VT_LON = 22,
    VT_SCANTYPE = 24,
    VT_DVCODE = 26,
    VT_NOTES = 28,
    VT_KEYS = 30,
    VT_VALUES = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_SOURCEDL = 38,
    VT_SOURCE = 40,
    VT_ORIGIN = 42,
    VT_ORIGNETWORK = 44,
    VT_DATAMODE = 46
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
  /// Example: /// Example: ABC1234
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *scanCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCANCODE);
  }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *scGenTool() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCGENTOOL);
  }
  /// The ID of the scanner or input device.
  /// Example: /// Example: 2051M
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *scannerId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCANNERID);
  }
  /// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-21T14:22:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// The UDL ID of the item this record is associated with.
  /// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idItem() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDITEM);
  }
  /// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// WGS84 latitude where the item was scanned, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude where the item was scanned, in degrees.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
  /// Example: /// Example: TRANSIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *scanType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCANTYPE);
  }
  /// The United States distinguished visitor code of the person scanned, only applicable to people.
  /// Example: /// Example: DV-4
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *dvCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DVCODE);
  }
  /// Optional notes or comments about the tracking data.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array of keys that may be associated with this tracked item.
  /// Example: /// Example: ['tapeColor', 'hazmat']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYS);
  }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['yellow', 'false']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *values() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VALUES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  ItemTracking_Full_dataMode_Enum dataMode() const {
    return static_cast<ItemTracking_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SCANCODE) &&
           verifier.VerifyString(scanCode()) &&
           VerifyOffset(verifier, VT_SCGENTOOL) &&
           verifier.VerifyString(scGenTool()) &&
           VerifyOffset(verifier, VT_SCANNERID) &&
           verifier.VerifyString(scannerId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyOffset(verifier, VT_IDITEM) &&
           verifier.VerifyString(idItem()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_SCANTYPE) &&
           verifier.VerifyString(scanType()) &&
           VerifyOffset(verifier, VT_DVCODE) &&
           verifier.VerifyString(dvCode()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfStrings(values()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct ItemTracking_FullBuilder {
  typedef ItemTracking_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ItemTracking_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(ItemTracking_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_scanCode(::flatbuffers::Offset<::flatbuffers::String> scanCode) {
    fbb_.AddOffset(ItemTracking_Full::VT_SCANCODE, scanCode);
  }
  void add_scGenTool(::flatbuffers::Offset<::flatbuffers::String> scGenTool) {
    fbb_.AddOffset(ItemTracking_Full::VT_SCGENTOOL, scGenTool);
  }
  void add_scannerId(::flatbuffers::Offset<::flatbuffers::String> scannerId) {
    fbb_.AddOffset(ItemTracking_Full::VT_SCANNERID, scannerId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(ItemTracking_Full::VT_TS, ts);
  }
  void add_idItem(::flatbuffers::Offset<::flatbuffers::String> idItem) {
    fbb_.AddOffset(ItemTracking_Full::VT_IDITEM, idItem);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(ItemTracking_Full::VT_TYPE, type);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(ItemTracking_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(ItemTracking_Full::VT_LON, lon, 0.0);
  }
  void add_scanType(::flatbuffers::Offset<::flatbuffers::String> scanType) {
    fbb_.AddOffset(ItemTracking_Full::VT_SCANTYPE, scanType);
  }
  void add_dvCode(::flatbuffers::Offset<::flatbuffers::String> dvCode) {
    fbb_.AddOffset(ItemTracking_Full::VT_DVCODE, dvCode);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(ItemTracking_Full::VT_NOTES, notes);
  }
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys) {
    fbb_.AddOffset(ItemTracking_Full::VT_KEYS, keys);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values) {
    fbb_.AddOffset(ItemTracking_Full::VT_VALUES, values);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(ItemTracking_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(ItemTracking_Full::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(ItemTracking_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(ItemTracking_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(ItemTracking_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(ItemTracking_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(ItemTracking_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(ItemTracking_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit ItemTracking_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemTracking_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemTracking_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemTracking_Full> CreateItemTracking_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scanCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scGenTool = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scannerId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idItem = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> scanType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dvCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ItemTracking_Full_dataMode_Enum dataMode = ItemTracking_Full_dataMode_Enum_REAL) {
  ItemTracking_FullBuilder builder_(_fbb);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_values(values);
  builder_.add_keys(keys);
  builder_.add_notes(notes);
  builder_.add_dvCode(dvCode);
  builder_.add_scanType(scanType);
  builder_.add_type(type);
  builder_.add_idItem(idItem);
  builder_.add_ts(ts);
  builder_.add_scannerId(scannerId);
  builder_.add_scGenTool(scGenTool);
  builder_.add_scanCode(scanCode);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemTracking_Full> CreateItemTracking_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *scanCode = nullptr,
    const char *scGenTool = nullptr,
    const char *scannerId = nullptr,
    const char *ts = nullptr,
    const char *idItem = nullptr,
    const char *type = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    const char *scanType = nullptr,
    const char *dvCode = nullptr,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keys = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *values = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    ItemTracking_Full_dataMode_Enum dataMode = ItemTracking_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto scanCode__ = scanCode ? _fbb.CreateString(scanCode) : 0;
  auto scGenTool__ = scGenTool ? _fbb.CreateString(scGenTool) : 0;
  auto scannerId__ = scannerId ? _fbb.CreateString(scannerId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto idItem__ = idItem ? _fbb.CreateString(idItem) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto scanType__ = scanType ? _fbb.CreateString(scanType) : 0;
  auto dvCode__ = dvCode ? _fbb.CreateString(dvCode) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto keys__ = keys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keys) : 0;
  auto values__ = values ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*values) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateItemTracking_Full(
      _fbb,
      id__,
      classificationMarking__,
      scanCode__,
      scGenTool__,
      scannerId__,
      ts__,
      idItem__,
      type__,
      lat,
      lon,
      scanType__,
      dvCode__,
      notes__,
      keys__,
      values__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const ItemTracking_Full *GetItemTracking_Full(const void *buf) {
  return ::flatbuffers::GetRoot<ItemTracking_Full>(buf);
}

inline const ItemTracking_Full *GetSizePrefixedItemTracking_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ItemTracking_Full>(buf);
}

inline const char *ItemTracking_FullIdentifier() {
  return "ITEM";
}

inline bool ItemTracking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ItemTracking_FullIdentifier());
}

inline bool SizePrefixedItemTracking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ItemTracking_FullIdentifier(), true);
}

inline bool VerifyItemTracking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ItemTracking_Full>(ItemTracking_FullIdentifier());
}

inline bool VerifySizePrefixedItemTracking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ItemTracking_Full>(ItemTracking_FullIdentifier());
}

inline void FinishItemTracking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ItemTracking_Full> root) {
  fbb.Finish(root, ItemTracking_FullIdentifier());
}

inline void FinishSizePrefixedItemTracking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ItemTracking_Full> root) {
  fbb.FinishSizePrefixed(root, ItemTracking_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
