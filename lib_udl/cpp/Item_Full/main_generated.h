// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Item_Full;
struct Item_FullBuilder;

enum Item_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Item_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Item_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Item_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Item_Full_dataMode_Enum_EXERCISE = 3,
  Item_Full_dataMode_Enum_MIN = Item_Full_dataMode_Enum_REAL,
  Item_Full_dataMode_Enum_MAX = Item_Full_dataMode_Enum_EXERCISE
};

inline const Item_Full_dataMode_Enum (&EnumValuesItem_Full_dataMode_Enum())[4] {
  static const Item_Full_dataMode_Enum values[] = {
    Item_Full_dataMode_Enum_REAL,
    Item_Full_dataMode_Enum_TEST,
    Item_Full_dataMode_Enum_SIMULATED,
    Item_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesItem_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameItem_Full_dataMode_Enum(Item_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Item_Full_dataMode_Enum_REAL, Item_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesItem_Full_dataMode_Enum()[index];
}

/// /// No description available.
struct Item_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Item_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDAIRLOADPLAN = 8,
    VT_SCANCODE = 10,
    VT_SCGENTOOL = 12,
    VT_TYPE = 14,
    VT_CARGOTYPE = 16,
    VT_NAME = 18,
    VT_DESTINATION = 20,
    VT_DEPARTURE = 22,
    VT_RECEIVINGUNIT = 24,
    VT_RECEIVINGBRANCH = 26,
    VT_LASTARRDATE = 28,
    VT_ULN = 30,
    VT_WEIGHT = 32,
    VT_WEIGHTTS = 34,
    VT_COMMODITYCODE = 36,
    VT_COMMODITYSYS = 38,
    VT_PRODUCTCODE = 40,
    VT_PRODUCTSYS = 42,
    VT_WIDTH = 44,
    VT_LENGTH = 46,
    VT_HEIGHT = 48,
    VT_VOLUME = 50,
    VT_CG = 52,
    VT_FS = 54,
    VT_CENTERLINEOFFSET = 56,
    VT_MOMENT = 58,
    VT_AIRDROP = 60,
    VT_TCN = 62,
    VT_HAZCODES = 64,
    VT_NETEXPWT = 66,
    VT_CONTAINER = 68,
    VT_ITEMCONTAINS = 70,
    VT_NUMPALLETPOS = 72,
    VT_DVCODE = 74,
    VT_NOTES = 76,
    VT_KEYS = 78,
    VT_VALUES = 80,
    VT_ALTDATAFORMAT = 82,
    VT_ACCSYSTEM = 84,
    VT_ACCSYSNOTES = 86,
    VT_ACCSYSKEYS = 88,
    VT_ACCSYSVALUES = 90,
    VT_CREATEDAT = 92,
    VT_CREATEDBY = 94,
    VT_UPDATEDAT = 96,
    VT_UPDATEDBY = 98,
    VT_SOURCEDL = 100,
    VT_SOURCE = 102,
    VT_ORIGIN = 104,
    VT_ORIGNETWORK = 106,
    VT_DATAMODE = 108
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The UDL ID of the air load plan this item is associated with.
  /// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAirLoadPlan() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRLOADPLAN);
  }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
  /// Example: /// Example: 12345ABCD
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *scanCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCANCODE);
  }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *scGenTool() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCGENTOOL);
  }
  /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
  /// Example: /// Example: PALLET
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *cargoType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CARGOTYPE);
  }
  /// Name of the item. Applicable for equipment and cargo item types only.
  /// Example: /// Example: Product Name
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
  /// Example: /// Example: RMS
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *destination() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESTINATION);
  }
  /// The departure code or location where this item has left or is leaving.
  /// Example: /// Example: CHS
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *departure() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPARTURE);
  }
  /// The name of the unit receiving this item.
  /// Example: /// Example: 50 SBN
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *receivingUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVINGUNIT);
  }
  /// The military branch receiving this item.
  /// Example: /// Example: Air Force
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *receivingBranch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVINGBRANCH);
  }
  /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2023-03-13
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastArrDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTARRDATE);
  }
  /// The unit line number of this item.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *uln() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ULN);
  }
  /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
  /// Example: /// Example: 5443.335
  /// Constraints: No constraints specified.
  double weight() const {
    return GetField<double>(VT_WEIGHT, 0.0);
  }
  /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-13T16:06:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *weightTS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WEIGHTTS);
  }
  /// The classification code of the commodity or group of commodities.
  /// Example: /// Example: 2304116
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *commodityCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMODITYCODE);
  }
  /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
  /// Example: /// Example: STCC
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *commoditySys() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMODITYSYS);
  }
  /// The code denoting the type of material item.
  /// Example: /// Example: 530500234
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *productCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCTCODE);
  }
  /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
  /// Example: /// Example: NSN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *productSys() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCTSYS);
  }
  /// Width of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double width() const {
    return GetField<double>(VT_WIDTH, 0.0);
  }
  /// Length of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double length() const {
    return GetField<double>(VT_LENGTH, 0.0);
  }
  /// Height of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double height() const {
    return GetField<double>(VT_HEIGHT, 0.0);
  }
  /// The volume of the item, in cubic meters. Applicable for cargo item types only.
  /// Example: /// Example: 7.8902
  /// Constraints: No constraints specified.
  double volume() const {
    return GetField<double>(VT_VOLUME, 0.0);
  }
  /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
  /// Example: /// Example: 112.014
  /// Constraints: No constraints specified.
  double cg() const {
    return GetField<double>(VT_CG, 0.0);
  }
  /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 412.1
  /// Constraints: No constraints specified.
  double fs() const {
    return GetField<double>(VT_FS, 0.0);
  }
  /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  double centerlineOffset() const {
    return GetField<double>(VT_CENTERLINEOFFSET, 0.0);
  }
  /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
  /// Example: /// Example: 4000.1
  /// Constraints: No constraints specified.
  double moment() const {
    return GetField<double>(VT_MOMENT, 0.0);
  }
  /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool airdrop() const {
    return GetField<uint8_t>(VT_AIRDROP, 0) != 0;
  }
  /// Transportation Control Number of the cargo. Applicable for cargo item types only.
  /// Example: /// Example: M1358232245912XXX
  /// Constraints: Minimum length = 0, Maximum length = 17
  const ::flatbuffers::String *tcn() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TCN);
  }
  /// Array of UN hazard classes or division codes that apply to this item.
  /// Example: /// Example: [1.1, 1.2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *hazCodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HAZCODES);
  }
  /// Net explosive weight of the item, in kilograms.
  /// Example: /// Example: 51.437
  /// Constraints: No constraints specified.
  double netExpWt() const {
    return GetField<double>(VT_NETEXPWT, 0.0);
  }
  /// Flag indicating this item acts as a container and contains additional items.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool container() const {
    return GetField<uint8_t>(VT_CONTAINER, 0) != 0;
  }
  /// Array of tracking identifiers that are contained within this item.
  /// Example: /// Example: ['2UJ8843K', '745YV1T65']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *itemContains() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ITEMCONTAINS);
  }
  /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t numPalletPos() const {
    return GetField<int32_t>(VT_NUMPALLETPOS, 0);
  }
  /// United States Distinguished Visitor Code, only applicable to people.
  /// Example: /// Example: DV-2
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *dvCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DVCODE);
  }
  /// Optional notes or comments about this item.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYS);
  }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *values() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VALUES);
  }
  /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
  /// Example: /// Example: Alt Data Format
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *altDataFormat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTDATAFORMAT);
  }
  /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
  /// Example: /// Example: Accepting System
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *accSystem() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCSYSTEM);
  }
  /// Additional data required to find this item in the accepting system.
  /// Example: /// Example: Accepting System Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *accSysNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCSYSNOTES);
  }
  /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
  /// Example: /// Example: ['System key1', 'System key2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *accSysKeys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACCSYSKEYS);
  }
  /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
  /// Example: /// Example: ['System value1', 'System value2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *accSysValues() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACCSYSVALUES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Item_Full_dataMode_Enum dataMode() const {
    return static_cast<Item_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDAIRLOADPLAN) &&
           verifier.VerifyString(idAirLoadPlan()) &&
           VerifyOffset(verifier, VT_SCANCODE) &&
           verifier.VerifyString(scanCode()) &&
           VerifyOffset(verifier, VT_SCGENTOOL) &&
           verifier.VerifyString(scGenTool()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_CARGOTYPE) &&
           verifier.VerifyString(cargoType()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESTINATION) &&
           verifier.VerifyString(destination()) &&
           VerifyOffset(verifier, VT_DEPARTURE) &&
           verifier.VerifyString(departure()) &&
           VerifyOffset(verifier, VT_RECEIVINGUNIT) &&
           verifier.VerifyString(receivingUnit()) &&
           VerifyOffset(verifier, VT_RECEIVINGBRANCH) &&
           verifier.VerifyString(receivingBranch()) &&
           VerifyOffset(verifier, VT_LASTARRDATE) &&
           verifier.VerifyString(lastArrDate()) &&
           VerifyOffset(verifier, VT_ULN) &&
           verifier.VerifyString(uln()) &&
           VerifyField<double>(verifier, VT_WEIGHT, 8) &&
           VerifyOffset(verifier, VT_WEIGHTTS) &&
           verifier.VerifyString(weightTS()) &&
           VerifyOffset(verifier, VT_COMMODITYCODE) &&
           verifier.VerifyString(commodityCode()) &&
           VerifyOffset(verifier, VT_COMMODITYSYS) &&
           verifier.VerifyString(commoditySys()) &&
           VerifyOffset(verifier, VT_PRODUCTCODE) &&
           verifier.VerifyString(productCode()) &&
           VerifyOffset(verifier, VT_PRODUCTSYS) &&
           verifier.VerifyString(productSys()) &&
           VerifyField<double>(verifier, VT_WIDTH, 8) &&
           VerifyField<double>(verifier, VT_LENGTH, 8) &&
           VerifyField<double>(verifier, VT_HEIGHT, 8) &&
           VerifyField<double>(verifier, VT_VOLUME, 8) &&
           VerifyField<double>(verifier, VT_CG, 8) &&
           VerifyField<double>(verifier, VT_FS, 8) &&
           VerifyField<double>(verifier, VT_CENTERLINEOFFSET, 8) &&
           VerifyField<double>(verifier, VT_MOMENT, 8) &&
           VerifyField<uint8_t>(verifier, VT_AIRDROP, 1) &&
           VerifyOffset(verifier, VT_TCN) &&
           verifier.VerifyString(tcn()) &&
           VerifyOffset(verifier, VT_HAZCODES) &&
           verifier.VerifyVector(hazCodes()) &&
           verifier.VerifyVectorOfStrings(hazCodes()) &&
           VerifyField<double>(verifier, VT_NETEXPWT, 8) &&
           VerifyField<uint8_t>(verifier, VT_CONTAINER, 1) &&
           VerifyOffset(verifier, VT_ITEMCONTAINS) &&
           verifier.VerifyVector(itemContains()) &&
           verifier.VerifyVectorOfStrings(itemContains()) &&
           VerifyField<int32_t>(verifier, VT_NUMPALLETPOS, 4) &&
           VerifyOffset(verifier, VT_DVCODE) &&
           verifier.VerifyString(dvCode()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_KEYS) &&
           verifier.VerifyVector(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfStrings(values()) &&
           VerifyOffset(verifier, VT_ALTDATAFORMAT) &&
           verifier.VerifyString(altDataFormat()) &&
           VerifyOffset(verifier, VT_ACCSYSTEM) &&
           verifier.VerifyString(accSystem()) &&
           VerifyOffset(verifier, VT_ACCSYSNOTES) &&
           verifier.VerifyString(accSysNotes()) &&
           VerifyOffset(verifier, VT_ACCSYSKEYS) &&
           verifier.VerifyVector(accSysKeys()) &&
           verifier.VerifyVectorOfStrings(accSysKeys()) &&
           VerifyOffset(verifier, VT_ACCSYSVALUES) &&
           verifier.VerifyVector(accSysValues()) &&
           verifier.VerifyVectorOfStrings(accSysValues()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Item_FullBuilder {
  typedef Item_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Item_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Item_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idAirLoadPlan(::flatbuffers::Offset<::flatbuffers::String> idAirLoadPlan) {
    fbb_.AddOffset(Item_Full::VT_IDAIRLOADPLAN, idAirLoadPlan);
  }
  void add_scanCode(::flatbuffers::Offset<::flatbuffers::String> scanCode) {
    fbb_.AddOffset(Item_Full::VT_SCANCODE, scanCode);
  }
  void add_scGenTool(::flatbuffers::Offset<::flatbuffers::String> scGenTool) {
    fbb_.AddOffset(Item_Full::VT_SCGENTOOL, scGenTool);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Item_Full::VT_TYPE, type);
  }
  void add_cargoType(::flatbuffers::Offset<::flatbuffers::String> cargoType) {
    fbb_.AddOffset(Item_Full::VT_CARGOTYPE, cargoType);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Item_Full::VT_NAME, name);
  }
  void add_destination(::flatbuffers::Offset<::flatbuffers::String> destination) {
    fbb_.AddOffset(Item_Full::VT_DESTINATION, destination);
  }
  void add_departure(::flatbuffers::Offset<::flatbuffers::String> departure) {
    fbb_.AddOffset(Item_Full::VT_DEPARTURE, departure);
  }
  void add_receivingUnit(::flatbuffers::Offset<::flatbuffers::String> receivingUnit) {
    fbb_.AddOffset(Item_Full::VT_RECEIVINGUNIT, receivingUnit);
  }
  void add_receivingBranch(::flatbuffers::Offset<::flatbuffers::String> receivingBranch) {
    fbb_.AddOffset(Item_Full::VT_RECEIVINGBRANCH, receivingBranch);
  }
  void add_lastArrDate(::flatbuffers::Offset<::flatbuffers::String> lastArrDate) {
    fbb_.AddOffset(Item_Full::VT_LASTARRDATE, lastArrDate);
  }
  void add_uln(::flatbuffers::Offset<::flatbuffers::String> uln) {
    fbb_.AddOffset(Item_Full::VT_ULN, uln);
  }
  void add_weight(double weight) {
    fbb_.AddElement<double>(Item_Full::VT_WEIGHT, weight, 0.0);
  }
  void add_weightTS(::flatbuffers::Offset<::flatbuffers::String> weightTS) {
    fbb_.AddOffset(Item_Full::VT_WEIGHTTS, weightTS);
  }
  void add_commodityCode(::flatbuffers::Offset<::flatbuffers::String> commodityCode) {
    fbb_.AddOffset(Item_Full::VT_COMMODITYCODE, commodityCode);
  }
  void add_commoditySys(::flatbuffers::Offset<::flatbuffers::String> commoditySys) {
    fbb_.AddOffset(Item_Full::VT_COMMODITYSYS, commoditySys);
  }
  void add_productCode(::flatbuffers::Offset<::flatbuffers::String> productCode) {
    fbb_.AddOffset(Item_Full::VT_PRODUCTCODE, productCode);
  }
  void add_productSys(::flatbuffers::Offset<::flatbuffers::String> productSys) {
    fbb_.AddOffset(Item_Full::VT_PRODUCTSYS, productSys);
  }
  void add_width(double width) {
    fbb_.AddElement<double>(Item_Full::VT_WIDTH, width, 0.0);
  }
  void add_length(double length) {
    fbb_.AddElement<double>(Item_Full::VT_LENGTH, length, 0.0);
  }
  void add_height(double height) {
    fbb_.AddElement<double>(Item_Full::VT_HEIGHT, height, 0.0);
  }
  void add_volume(double volume) {
    fbb_.AddElement<double>(Item_Full::VT_VOLUME, volume, 0.0);
  }
  void add_cg(double cg) {
    fbb_.AddElement<double>(Item_Full::VT_CG, cg, 0.0);
  }
  void add_fs(double fs) {
    fbb_.AddElement<double>(Item_Full::VT_FS, fs, 0.0);
  }
  void add_centerlineOffset(double centerlineOffset) {
    fbb_.AddElement<double>(Item_Full::VT_CENTERLINEOFFSET, centerlineOffset, 0.0);
  }
  void add_moment(double moment) {
    fbb_.AddElement<double>(Item_Full::VT_MOMENT, moment, 0.0);
  }
  void add_airdrop(bool airdrop) {
    fbb_.AddElement<uint8_t>(Item_Full::VT_AIRDROP, static_cast<uint8_t>(airdrop), 0);
  }
  void add_tcn(::flatbuffers::Offset<::flatbuffers::String> tcn) {
    fbb_.AddOffset(Item_Full::VT_TCN, tcn);
  }
  void add_hazCodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hazCodes) {
    fbb_.AddOffset(Item_Full::VT_HAZCODES, hazCodes);
  }
  void add_netExpWt(double netExpWt) {
    fbb_.AddElement<double>(Item_Full::VT_NETEXPWT, netExpWt, 0.0);
  }
  void add_container(bool container) {
    fbb_.AddElement<uint8_t>(Item_Full::VT_CONTAINER, static_cast<uint8_t>(container), 0);
  }
  void add_itemContains(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemContains) {
    fbb_.AddOffset(Item_Full::VT_ITEMCONTAINS, itemContains);
  }
  void add_numPalletPos(int32_t numPalletPos) {
    fbb_.AddElement<int32_t>(Item_Full::VT_NUMPALLETPOS, numPalletPos, 0);
  }
  void add_dvCode(::flatbuffers::Offset<::flatbuffers::String> dvCode) {
    fbb_.AddOffset(Item_Full::VT_DVCODE, dvCode);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(Item_Full::VT_NOTES, notes);
  }
  void add_keys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys) {
    fbb_.AddOffset(Item_Full::VT_KEYS, keys);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values) {
    fbb_.AddOffset(Item_Full::VT_VALUES, values);
  }
  void add_altDataFormat(::flatbuffers::Offset<::flatbuffers::String> altDataFormat) {
    fbb_.AddOffset(Item_Full::VT_ALTDATAFORMAT, altDataFormat);
  }
  void add_accSystem(::flatbuffers::Offset<::flatbuffers::String> accSystem) {
    fbb_.AddOffset(Item_Full::VT_ACCSYSTEM, accSystem);
  }
  void add_accSysNotes(::flatbuffers::Offset<::flatbuffers::String> accSysNotes) {
    fbb_.AddOffset(Item_Full::VT_ACCSYSNOTES, accSysNotes);
  }
  void add_accSysKeys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> accSysKeys) {
    fbb_.AddOffset(Item_Full::VT_ACCSYSKEYS, accSysKeys);
  }
  void add_accSysValues(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> accSysValues) {
    fbb_.AddOffset(Item_Full::VT_ACCSYSVALUES, accSysValues);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Item_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Item_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Item_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Item_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Item_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Item_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Item_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Item_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Item_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Item_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Item_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Item_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Item_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Item_Full> CreateItem_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAirLoadPlan = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scanCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scGenTool = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cargoType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> destination = 0,
    ::flatbuffers::Offset<::flatbuffers::String> departure = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receivingUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receivingBranch = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastArrDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> uln = 0,
    double weight = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> weightTS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commodityCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commoditySys = 0,
    ::flatbuffers::Offset<::flatbuffers::String> productCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> productSys = 0,
    double width = 0.0,
    double length = 0.0,
    double height = 0.0,
    double volume = 0.0,
    double cg = 0.0,
    double fs = 0.0,
    double centerlineOffset = 0.0,
    double moment = 0.0,
    bool airdrop = false,
    ::flatbuffers::Offset<::flatbuffers::String> tcn = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hazCodes = 0,
    double netExpWt = 0.0,
    bool container = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> itemContains = 0,
    int32_t numPalletPos = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dvCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keys = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altDataFormat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> accSystem = 0,
    ::flatbuffers::Offset<::flatbuffers::String> accSysNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> accSysKeys = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> accSysValues = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Item_Full_dataMode_Enum dataMode = Item_Full_dataMode_Enum_REAL) {
  Item_FullBuilder builder_(_fbb);
  builder_.add_netExpWt(netExpWt);
  builder_.add_moment(moment);
  builder_.add_centerlineOffset(centerlineOffset);
  builder_.add_fs(fs);
  builder_.add_cg(cg);
  builder_.add_volume(volume);
  builder_.add_height(height);
  builder_.add_length(length);
  builder_.add_width(width);
  builder_.add_weight(weight);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_accSysValues(accSysValues);
  builder_.add_accSysKeys(accSysKeys);
  builder_.add_accSysNotes(accSysNotes);
  builder_.add_accSystem(accSystem);
  builder_.add_altDataFormat(altDataFormat);
  builder_.add_values(values);
  builder_.add_keys(keys);
  builder_.add_notes(notes);
  builder_.add_dvCode(dvCode);
  builder_.add_numPalletPos(numPalletPos);
  builder_.add_itemContains(itemContains);
  builder_.add_hazCodes(hazCodes);
  builder_.add_tcn(tcn);
  builder_.add_productSys(productSys);
  builder_.add_productCode(productCode);
  builder_.add_commoditySys(commoditySys);
  builder_.add_commodityCode(commodityCode);
  builder_.add_weightTS(weightTS);
  builder_.add_uln(uln);
  builder_.add_lastArrDate(lastArrDate);
  builder_.add_receivingBranch(receivingBranch);
  builder_.add_receivingUnit(receivingUnit);
  builder_.add_departure(departure);
  builder_.add_destination(destination);
  builder_.add_name(name);
  builder_.add_cargoType(cargoType);
  builder_.add_type(type);
  builder_.add_scGenTool(scGenTool);
  builder_.add_scanCode(scanCode);
  builder_.add_idAirLoadPlan(idAirLoadPlan);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_container(container);
  builder_.add_airdrop(airdrop);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Item_Full> CreateItem_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idAirLoadPlan = nullptr,
    const char *scanCode = nullptr,
    const char *scGenTool = nullptr,
    const char *type = nullptr,
    const char *cargoType = nullptr,
    const char *name = nullptr,
    const char *destination = nullptr,
    const char *departure = nullptr,
    const char *receivingUnit = nullptr,
    const char *receivingBranch = nullptr,
    const char *lastArrDate = nullptr,
    const char *uln = nullptr,
    double weight = 0.0,
    const char *weightTS = nullptr,
    const char *commodityCode = nullptr,
    const char *commoditySys = nullptr,
    const char *productCode = nullptr,
    const char *productSys = nullptr,
    double width = 0.0,
    double length = 0.0,
    double height = 0.0,
    double volume = 0.0,
    double cg = 0.0,
    double fs = 0.0,
    double centerlineOffset = 0.0,
    double moment = 0.0,
    bool airdrop = false,
    const char *tcn = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *hazCodes = nullptr,
    double netExpWt = 0.0,
    bool container = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *itemContains = nullptr,
    int32_t numPalletPos = 0,
    const char *dvCode = nullptr,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keys = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *values = nullptr,
    const char *altDataFormat = nullptr,
    const char *accSystem = nullptr,
    const char *accSysNotes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *accSysKeys = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *accSysValues = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Item_Full_dataMode_Enum dataMode = Item_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idAirLoadPlan__ = idAirLoadPlan ? _fbb.CreateString(idAirLoadPlan) : 0;
  auto scanCode__ = scanCode ? _fbb.CreateString(scanCode) : 0;
  auto scGenTool__ = scGenTool ? _fbb.CreateString(scGenTool) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto cargoType__ = cargoType ? _fbb.CreateString(cargoType) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto destination__ = destination ? _fbb.CreateString(destination) : 0;
  auto departure__ = departure ? _fbb.CreateString(departure) : 0;
  auto receivingUnit__ = receivingUnit ? _fbb.CreateString(receivingUnit) : 0;
  auto receivingBranch__ = receivingBranch ? _fbb.CreateString(receivingBranch) : 0;
  auto lastArrDate__ = lastArrDate ? _fbb.CreateString(lastArrDate) : 0;
  auto uln__ = uln ? _fbb.CreateString(uln) : 0;
  auto weightTS__ = weightTS ? _fbb.CreateString(weightTS) : 0;
  auto commodityCode__ = commodityCode ? _fbb.CreateString(commodityCode) : 0;
  auto commoditySys__ = commoditySys ? _fbb.CreateString(commoditySys) : 0;
  auto productCode__ = productCode ? _fbb.CreateString(productCode) : 0;
  auto productSys__ = productSys ? _fbb.CreateString(productSys) : 0;
  auto tcn__ = tcn ? _fbb.CreateString(tcn) : 0;
  auto hazCodes__ = hazCodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*hazCodes) : 0;
  auto itemContains__ = itemContains ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*itemContains) : 0;
  auto dvCode__ = dvCode ? _fbb.CreateString(dvCode) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto keys__ = keys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keys) : 0;
  auto values__ = values ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*values) : 0;
  auto altDataFormat__ = altDataFormat ? _fbb.CreateString(altDataFormat) : 0;
  auto accSystem__ = accSystem ? _fbb.CreateString(accSystem) : 0;
  auto accSysNotes__ = accSysNotes ? _fbb.CreateString(accSysNotes) : 0;
  auto accSysKeys__ = accSysKeys ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*accSysKeys) : 0;
  auto accSysValues__ = accSysValues ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*accSysValues) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateItem_Full(
      _fbb,
      id__,
      classificationMarking__,
      idAirLoadPlan__,
      scanCode__,
      scGenTool__,
      type__,
      cargoType__,
      name__,
      destination__,
      departure__,
      receivingUnit__,
      receivingBranch__,
      lastArrDate__,
      uln__,
      weight,
      weightTS__,
      commodityCode__,
      commoditySys__,
      productCode__,
      productSys__,
      width,
      length,
      height,
      volume,
      cg,
      fs,
      centerlineOffset,
      moment,
      airdrop,
      tcn__,
      hazCodes__,
      netExpWt,
      container,
      itemContains__,
      numPalletPos,
      dvCode__,
      notes__,
      keys__,
      values__,
      altDataFormat__,
      accSystem__,
      accSysNotes__,
      accSysKeys__,
      accSysValues__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const Item_Full *GetItem_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Item_Full>(buf);
}

inline const Item_Full *GetSizePrefixedItem_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Item_Full>(buf);
}

inline const char *Item_FullIdentifier() {
  return "ITEM";
}

inline bool Item_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Item_FullIdentifier());
}

inline bool SizePrefixedItem_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Item_FullIdentifier(), true);
}

inline bool VerifyItem_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Item_Full>(Item_FullIdentifier());
}

inline bool VerifySizePrefixedItem_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Item_Full>(Item_FullIdentifier());
}

inline void FinishItem_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Item_Full> root) {
  fbb.Finish(root, Item_FullIdentifier());
}

inline void FinishSizePrefixedItem_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Item_Full> root) {
  fbb.FinishSizePrefixed(root, Item_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
