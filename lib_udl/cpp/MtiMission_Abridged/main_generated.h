// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiMission_Abridged;
struct MtiMission_AbridgedBuilder;

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
struct MtiMission_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiMission_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_M1 = 4,
    VT_M2 = 6,
    VT_M3 = 8,
    VT_M4 = 10,
    VT_MSNREFTS = 12
  };
  /// The mission plan id.
  /// Example: /// Example: M1-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *m1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_M1);
  }
  /// Unique identification of the flight plan.
  /// Example: /// Example: M2-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *m2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_M2);
  }
  /// Platform type that originated the data.
  /// Example: /// Example: PLATFORM
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *m3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_M3);
  }
  /// Identification of the platform variant, modifications, etc.
  /// Example: /// Example: IDENT
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *m4() const {
    return GetPointer<const ::flatbuffers::String *>(VT_M4);
  }
  /// Mission origination date.
  /// Example: /// Example: 2018-01-01
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *msnRefTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNREFTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_M1) &&
           verifier.VerifyString(m1()) &&
           VerifyOffset(verifier, VT_M2) &&
           verifier.VerifyString(m2()) &&
           VerifyOffset(verifier, VT_M3) &&
           verifier.VerifyString(m3()) &&
           VerifyOffset(verifier, VT_M4) &&
           verifier.VerifyString(m4()) &&
           VerifyOffset(verifier, VT_MSNREFTS) &&
           verifier.VerifyString(msnRefTs()) &&
           verifier.EndTable();
  }
};

struct MtiMission_AbridgedBuilder {
  typedef MtiMission_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_m1(::flatbuffers::Offset<::flatbuffers::String> m1) {
    fbb_.AddOffset(MtiMission_Abridged::VT_M1, m1);
  }
  void add_m2(::flatbuffers::Offset<::flatbuffers::String> m2) {
    fbb_.AddOffset(MtiMission_Abridged::VT_M2, m2);
  }
  void add_m3(::flatbuffers::Offset<::flatbuffers::String> m3) {
    fbb_.AddOffset(MtiMission_Abridged::VT_M3, m3);
  }
  void add_m4(::flatbuffers::Offset<::flatbuffers::String> m4) {
    fbb_.AddOffset(MtiMission_Abridged::VT_M4, m4);
  }
  void add_msnRefTs(::flatbuffers::Offset<::flatbuffers::String> msnRefTs) {
    fbb_.AddOffset(MtiMission_Abridged::VT_MSNREFTS, msnRefTs);
  }
  explicit MtiMission_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiMission_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiMission_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiMission_Abridged> CreateMtiMission_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> m1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> m2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> m3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> m4 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnRefTs = 0) {
  MtiMission_AbridgedBuilder builder_(_fbb);
  builder_.add_msnRefTs(msnRefTs);
  builder_.add_m4(m4);
  builder_.add_m3(m3);
  builder_.add_m2(m2);
  builder_.add_m1(m1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiMission_Abridged> CreateMtiMission_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *m1 = nullptr,
    const char *m2 = nullptr,
    const char *m3 = nullptr,
    const char *m4 = nullptr,
    const char *msnRefTs = nullptr) {
  auto m1__ = m1 ? _fbb.CreateString(m1) : 0;
  auto m2__ = m2 ? _fbb.CreateString(m2) : 0;
  auto m3__ = m3 ? _fbb.CreateString(m3) : 0;
  auto m4__ = m4 ? _fbb.CreateString(m4) : 0;
  auto msnRefTs__ = msnRefTs ? _fbb.CreateString(msnRefTs) : 0;
  return CreateMtiMission_Abridged(
      _fbb,
      m1__,
      m2__,
      m3__,
      m4__,
      msnRefTs__);
}

inline const MtiMission_Abridged *GetMtiMission_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<MtiMission_Abridged>(buf);
}

inline const MtiMission_Abridged *GetSizePrefixedMtiMission_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiMission_Abridged>(buf);
}

inline const char *MtiMission_AbridgedIdentifier() {
  return "MTIM";
}

inline bool MtiMission_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiMission_AbridgedIdentifier());
}

inline bool SizePrefixedMtiMission_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiMission_AbridgedIdentifier(), true);
}

inline bool VerifyMtiMission_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiMission_Abridged>(MtiMission_AbridgedIdentifier());
}

inline bool VerifySizePrefixedMtiMission_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiMission_Abridged>(MtiMission_AbridgedIdentifier());
}

inline void FinishMtiMission_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiMission_Abridged> root) {
  fbb.Finish(root, MtiMission_AbridgedIdentifier());
}

inline void FinishSizePrefixedMtiMission_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiMission_Abridged> root) {
  fbb.FinishSizePrefixed(root, MtiMission_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
