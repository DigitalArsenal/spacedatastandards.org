// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftStatusRemark_Ingest;
struct AircraftStatusRemark_IngestBuilder;

enum AircraftStatusRemark_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AircraftStatusRemark_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AircraftStatusRemark_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AircraftStatusRemark_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AircraftStatusRemark_Ingest_dataMode_Enum_EXERCISE = 3,
  AircraftStatusRemark_Ingest_dataMode_Enum_MIN = AircraftStatusRemark_Ingest_dataMode_Enum_REAL,
  AircraftStatusRemark_Ingest_dataMode_Enum_MAX = AircraftStatusRemark_Ingest_dataMode_Enum_EXERCISE
};

inline const AircraftStatusRemark_Ingest_dataMode_Enum (&EnumValuesAircraftStatusRemark_Ingest_dataMode_Enum())[4] {
  static const AircraftStatusRemark_Ingest_dataMode_Enum values[] = {
    AircraftStatusRemark_Ingest_dataMode_Enum_REAL,
    AircraftStatusRemark_Ingest_dataMode_Enum_TEST,
    AircraftStatusRemark_Ingest_dataMode_Enum_SIMULATED,
    AircraftStatusRemark_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAircraftStatusRemark_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraftStatusRemark_Ingest_dataMode_Enum(AircraftStatusRemark_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AircraftStatusRemark_Ingest_dataMode_Enum_REAL, AircraftStatusRemark_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraftStatusRemark_Ingest_dataMode_Enum()[index];
}

/// /// Properties and characteristics of a remark that is associated with an aircraft status.
struct AircraftStatusRemark_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftStatusRemark_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDAIRCRAFTSTATUS = 8,
    VT_ALTRMKID = 10,
    VT_NAME = 12,
    VT_TEXT = 14,
    VT_TIMESTAMP = 16,
    VT_LASTUPDATEDBY = 18,
    VT_LASTUPDATEDAT = 20,
    VT_CREATEDAT = 22,
    VT_CREATEDBY = 24,
    VT_SOURCEDL = 26,
    VT_SOURCE = 28,
    VT_ORIGIN = 30,
    VT_ORIGNETWORK = 32,
    VT_DATAMODE = 34
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The ID of the Aircraft Status to which this remark applies.
  /// Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idAircraftStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRCRAFTSTATUS);
  }
  /// Unique identifier of the Aircraft Status Remark record from the originating system.
  /// Example: /// Example: GDSSBL022307131714250077
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altRmkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTRMKID);
  }
  /// The name of the remark.
  /// Example: /// Example: DISCREPANCY - 202297501
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The text of the remark.
  /// Example: /// Example: Remark text
  /// Constraints: Minimum length = 1, Maximum length = 1024
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  /// Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T15:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *timestamp() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIMESTAMP);
  }
  /// The name or ID of the external user that updated this remark in the originating system.
  /// Example: /// Example: JOHN SMITH
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *lastUpdatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTUPDATEDBY);
  }
  /// Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastUpdatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTUPDATEDAT);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AircraftStatusRemark_Ingest_dataMode_Enum dataMode() const {
    return static_cast<AircraftStatusRemark_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDAIRCRAFTSTATUS) &&
           verifier.VerifyString(idAircraftStatus()) &&
           VerifyOffset(verifier, VT_ALTRMKID) &&
           verifier.VerifyString(altRmkId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_TIMESTAMP) &&
           verifier.VerifyString(timestamp()) &&
           VerifyOffset(verifier, VT_LASTUPDATEDBY) &&
           verifier.VerifyString(lastUpdatedBy()) &&
           VerifyOffset(verifier, VT_LASTUPDATEDAT) &&
           verifier.VerifyString(lastUpdatedAt()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AircraftStatusRemark_IngestBuilder {
  typedef AircraftStatusRemark_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idAircraftStatus(::flatbuffers::Offset<::flatbuffers::String> idAircraftStatus) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_IDAIRCRAFTSTATUS, idAircraftStatus);
  }
  void add_altRmkId(::flatbuffers::Offset<::flatbuffers::String> altRmkId) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_ALTRMKID, altRmkId);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_NAME, name);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_TEXT, text);
  }
  void add_timestamp(::flatbuffers::Offset<::flatbuffers::String> timestamp) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_TIMESTAMP, timestamp);
  }
  void add_lastUpdatedBy(::flatbuffers::Offset<::flatbuffers::String> lastUpdatedBy) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_LASTUPDATEDBY, lastUpdatedBy);
  }
  void add_lastUpdatedAt(::flatbuffers::Offset<::flatbuffers::String> lastUpdatedAt) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_LASTUPDATEDAT, lastUpdatedAt);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AircraftStatusRemark_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AircraftStatusRemark_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AircraftStatusRemark_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AircraftStatusRemark_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftStatusRemark_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftStatusRemark_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftStatusRemark_Ingest> CreateAircraftStatusRemark_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAircraftStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altRmkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> timestamp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastUpdatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastUpdatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AircraftStatusRemark_Ingest_dataMode_Enum dataMode = AircraftStatusRemark_Ingest_dataMode_Enum_REAL) {
  AircraftStatusRemark_IngestBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_lastUpdatedAt(lastUpdatedAt);
  builder_.add_lastUpdatedBy(lastUpdatedBy);
  builder_.add_timestamp(timestamp);
  builder_.add_text(text);
  builder_.add_name(name);
  builder_.add_altRmkId(altRmkId);
  builder_.add_idAircraftStatus(idAircraftStatus);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftStatusRemark_Ingest> CreateAircraftStatusRemark_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idAircraftStatus = nullptr,
    const char *altRmkId = nullptr,
    const char *name = nullptr,
    const char *text = nullptr,
    const char *timestamp = nullptr,
    const char *lastUpdatedBy = nullptr,
    const char *lastUpdatedAt = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AircraftStatusRemark_Ingest_dataMode_Enum dataMode = AircraftStatusRemark_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idAircraftStatus__ = idAircraftStatus ? _fbb.CreateString(idAircraftStatus) : 0;
  auto altRmkId__ = altRmkId ? _fbb.CreateString(altRmkId) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto timestamp__ = timestamp ? _fbb.CreateString(timestamp) : 0;
  auto lastUpdatedBy__ = lastUpdatedBy ? _fbb.CreateString(lastUpdatedBy) : 0;
  auto lastUpdatedAt__ = lastUpdatedAt ? _fbb.CreateString(lastUpdatedAt) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAircraftStatusRemark_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idAircraftStatus__,
      altRmkId__,
      name__,
      text__,
      timestamp__,
      lastUpdatedBy__,
      lastUpdatedAt__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AircraftStatusRemark_Ingest *GetAircraftStatusRemark_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftStatusRemark_Ingest>(buf);
}

inline const AircraftStatusRemark_Ingest *GetSizePrefixedAircraftStatusRemark_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftStatusRemark_Ingest>(buf);
}

inline const char *AircraftStatusRemark_IngestIdentifier() {
  return "AIRC";
}

inline bool AircraftStatusRemark_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftStatusRemark_IngestIdentifier());
}

inline bool SizePrefixedAircraftStatusRemark_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftStatusRemark_IngestIdentifier(), true);
}

inline bool VerifyAircraftStatusRemark_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftStatusRemark_Ingest>(AircraftStatusRemark_IngestIdentifier());
}

inline bool VerifySizePrefixedAircraftStatusRemark_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftStatusRemark_Ingest>(AircraftStatusRemark_IngestIdentifier());
}

inline void FinishAircraftStatusRemark_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftStatusRemark_Ingest> root) {
  fbb.Finish(root, AircraftStatusRemark_IngestIdentifier());
}

inline void FinishSizePrefixedAircraftStatusRemark_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftStatusRemark_Ingest> root) {
  fbb.FinishSizePrefixed(root, AircraftStatusRemark_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
