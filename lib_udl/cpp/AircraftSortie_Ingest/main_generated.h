// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftSortie_Ingest;
struct AircraftSortie_IngestBuilder;

enum AircraftSortie_Ingest_paperStatus_Enum : int8_t {
  /// No description available.
  AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED = 0,
  /// No description available.
  AircraftSortie_Ingest_paperStatus_Enum_DELETED = 1,
  /// No description available.
  AircraftSortie_Ingest_paperStatus_Enum_UPDATED = 2,
  /// No description available.
  AircraftSortie_Ingest_paperStatus_Enum_READ = 3,
  AircraftSortie_Ingest_paperStatus_Enum_MIN = AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED,
  AircraftSortie_Ingest_paperStatus_Enum_MAX = AircraftSortie_Ingest_paperStatus_Enum_READ
};

inline const AircraftSortie_Ingest_paperStatus_Enum (&EnumValuesAircraftSortie_Ingest_paperStatus_Enum())[4] {
  static const AircraftSortie_Ingest_paperStatus_Enum values[] = {
    AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED,
    AircraftSortie_Ingest_paperStatus_Enum_DELETED,
    AircraftSortie_Ingest_paperStatus_Enum_UPDATED,
    AircraftSortie_Ingest_paperStatus_Enum_READ
  };
  return values;
}

inline const char * const *EnumNamesAircraftSortie_Ingest_paperStatus_Enum() {
  static const char * const names[5] = {
    "PUBLISHED",
    "DELETED",
    "UPDATED",
    "READ",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraftSortie_Ingest_paperStatus_Enum(AircraftSortie_Ingest_paperStatus_Enum e) {
  if (::flatbuffers::IsOutRange(e, AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED, AircraftSortie_Ingest_paperStatus_Enum_READ)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraftSortie_Ingest_paperStatus_Enum()[index];
}

enum AircraftSortie_Ingest_pprStatus_Enum : int8_t {
  /// No description available.
  AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED = 0,
  /// No description available.
  AircraftSortie_Ingest_pprStatus_Enum_REQUIRED_NOT_REQUESTED = 1,
  /// No description available.
  AircraftSortie_Ingest_pprStatus_Enum_GRANTED = 2,
  /// No description available.
  AircraftSortie_Ingest_pprStatus_Enum_PENDING = 3,
  AircraftSortie_Ingest_pprStatus_Enum_MIN = AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED,
  AircraftSortie_Ingest_pprStatus_Enum_MAX = AircraftSortie_Ingest_pprStatus_Enum_PENDING
};

inline const AircraftSortie_Ingest_pprStatus_Enum (&EnumValuesAircraftSortie_Ingest_pprStatus_Enum())[4] {
  static const AircraftSortie_Ingest_pprStatus_Enum values[] = {
    AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED,
    AircraftSortie_Ingest_pprStatus_Enum_REQUIRED_NOT_REQUESTED,
    AircraftSortie_Ingest_pprStatus_Enum_GRANTED,
    AircraftSortie_Ingest_pprStatus_Enum_PENDING
  };
  return values;
}

inline const char * const *EnumNamesAircraftSortie_Ingest_pprStatus_Enum() {
  static const char * const names[5] = {
    "NOT_REQUIRED",
    "REQUIRED_NOT_REQUESTED",
    "GRANTED",
    "PENDING",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraftSortie_Ingest_pprStatus_Enum(AircraftSortie_Ingest_pprStatus_Enum e) {
  if (::flatbuffers::IsOutRange(e, AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED, AircraftSortie_Ingest_pprStatus_Enum_PENDING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraftSortie_Ingest_pprStatus_Enum()[index];
}

enum AircraftSortie_Ingest_rvnReq_Enum : int8_t {
  /// No description available.
  AircraftSortie_Ingest_rvnReq_Enum_N = 0,
  /// No description available.
  AircraftSortie_Ingest_rvnReq_Enum_R = 1,
  /// No description available.
  AircraftSortie_Ingest_rvnReq_Enum_C6 = 2,
  /// No description available.
  AircraftSortie_Ingest_rvnReq_Enum_R6 = 3,
  AircraftSortie_Ingest_rvnReq_Enum_MIN = AircraftSortie_Ingest_rvnReq_Enum_N,
  AircraftSortie_Ingest_rvnReq_Enum_MAX = AircraftSortie_Ingest_rvnReq_Enum_R6
};

inline const AircraftSortie_Ingest_rvnReq_Enum (&EnumValuesAircraftSortie_Ingest_rvnReq_Enum())[4] {
  static const AircraftSortie_Ingest_rvnReq_Enum values[] = {
    AircraftSortie_Ingest_rvnReq_Enum_N,
    AircraftSortie_Ingest_rvnReq_Enum_R,
    AircraftSortie_Ingest_rvnReq_Enum_C6,
    AircraftSortie_Ingest_rvnReq_Enum_R6
  };
  return values;
}

inline const char * const *EnumNamesAircraftSortie_Ingest_rvnReq_Enum() {
  static const char * const names[5] = {
    "N",
    "R",
    "C6",
    "R6",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraftSortie_Ingest_rvnReq_Enum(AircraftSortie_Ingest_rvnReq_Enum e) {
  if (::flatbuffers::IsOutRange(e, AircraftSortie_Ingest_rvnReq_Enum_N, AircraftSortie_Ingest_rvnReq_Enum_R6)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraftSortie_Ingest_rvnReq_Enum()[index];
}

enum AircraftSortie_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AircraftSortie_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AircraftSortie_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AircraftSortie_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AircraftSortie_Ingest_dataMode_Enum_EXERCISE = 3,
  AircraftSortie_Ingest_dataMode_Enum_MIN = AircraftSortie_Ingest_dataMode_Enum_REAL,
  AircraftSortie_Ingest_dataMode_Enum_MAX = AircraftSortie_Ingest_dataMode_Enum_EXERCISE
};

inline const AircraftSortie_Ingest_dataMode_Enum (&EnumValuesAircraftSortie_Ingest_dataMode_Enum())[4] {
  static const AircraftSortie_Ingest_dataMode_Enum values[] = {
    AircraftSortie_Ingest_dataMode_Enum_REAL,
    AircraftSortie_Ingest_dataMode_Enum_TEST,
    AircraftSortie_Ingest_dataMode_Enum_SIMULATED,
    AircraftSortie_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAircraftSortie_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraftSortie_Ingest_dataMode_Enum(AircraftSortie_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AircraftSortie_Ingest_dataMode_Enum_REAL, AircraftSortie_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraftSortie_Ingest_dataMode_Enum()[index];
}

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
struct AircraftSortie_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftSortie_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ORIGSORTIEID = 8,
    VT_IDAIRCRAFT = 10,
    VT_AIRCRAFTALTID = 12,
    VT_TAILNUMBER = 14,
    VT_AIRCRAFTMDS = 16,
    VT_AIRCRAFTADSB = 18,
    VT_SORTIEDATE = 20,
    VT_LINENUMBER = 22,
    VT_IDMISSION = 24,
    VT_MISSIONID = 26,
    VT_AMCMSNNUM = 28,
    VT_AMCMSNTYPE = 30,
    VT_CALLSIGN = 32,
    VT_JCSPRIORITY = 34,
    VT_PRIMARYSCL = 36,
    VT_SECONDARYSCL = 38,
    VT_REQCONFIG = 40,
    VT_CARGOCONFIG = 42,
    VT_FUELREQ = 44,
    VT_OXYREQCREW = 46,
    VT_OXYONCREW = 48,
    VT_OXYREQPAX = 50,
    VT_OXYONPAX = 52,
    VT_ALERTSTATUSCODE = 54,
    VT_ALERTSTATUS = 56,
    VT_CURRENTSTATE = 58,
    VT_DEPITINERARY = 60,
    VT_DEPICAO = 62,
    VT_DEPIATA = 64,
    VT_DEPFAA = 66,
    VT_PLANNEDDEPTIME = 68,
    VT_ESTDEPTIME = 70,
    VT_ACTUALDEPTIME = 72,
    VT_ESTBLOCKOUTTIME = 74,
    VT_ACTUALBLOCKOUTTIME = 76,
    VT_DEPPURPOSECODE = 78,
    VT_ARRITINERARY = 80,
    VT_ARRICAO = 82,
    VT_ARRIATA = 84,
    VT_ARRFAA = 86,
    VT_PLANNEDARRTIME = 88,
    VT_ESTARRTIME = 90,
    VT_ACTUALARRTIME = 92,
    VT_ESTBLOCKINTIME = 94,
    VT_ACTUALBLOCKINTIME = 96,
    VT_ARRPURPOSECODE = 98,
    VT_DHD = 100,
    VT_DHDREASON = 102,
    VT_AIRCRAFTEVENT = 104,
    VT_SOE = 106,
    VT_LEGNUM = 108,
    VT_FLIGHTTIME = 110,
    VT_GNDTIME = 112,
    VT_RAWFILEURI = 114,
    VT_PAPERSVERSION = 116,
    VT_FILENAME = 118,
    VT_FILESIZE = 120,
    VT_PAPERSTATUS = 122,
    VT_PPRSTATUS = 124,
    VT_MISSIONUPDATE = 126,
    VT_DELAYCODE = 128,
    VT_COMMANDERNAME = 130,
    VT_FMDESKNUM = 132,
    VT_FMNAME = 134,
    VT_RVNREQ = 136,
    VT_PASSENGERS = 138,
    VT_PARKINGLOC = 140,
    VT_OBJECTIVEREMARKS = 142,
    VT_AIRCRAFTREMARKS = 144,
    VT_SCHEDULEREMARKS = 146,
    VT_RESULTREMARKS = 148,
    VT_CREATEDAT = 150,
    VT_CREATEDBY = 152,
    VT_SOURCEDL = 154,
    VT_SOURCE = 156,
    VT_ORIGIN = 158,
    VT_DATAMODE = 160,
    VT_ORIGNETWORK = 162
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: AIRCRAFTSORTIE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The sortie identifier provided by the originating source.
  /// Example: /// Example: A0640
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origSortieId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSORTIEID);
  }
  /// Unique identifier of the aircraft.
  /// Example: /// Example: REF-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAircraft() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRCRAFT);
  }
  /// Alternate Aircraft Identifier provided by source.
  /// Example: /// Example: ALT-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *aircraftAltId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTALTID);
  }
  /// The tail number of the aircraft assigned to this sortie.
  /// Example: /// Example: Tail_1
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *tailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAILNUMBER);
  }
  /// The aircraft Model Design Series designation assigned to this sortie.
  /// Example: /// Example: C017A
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *aircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTMDS);
  }
  /// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
  /// Example: /// Example: AE123C
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *aircraftADSB() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTADSB);
  }
  /// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2021-01-01
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sortieDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SORTIEDATE);
  }
  /// The external system line number of this sortie.
  /// Example: /// Example: 99
  /// Constraints: No constraints specified.
  int32_t lineNumber() const {
    return GetField<int32_t>(VT_LINENUMBER, 0);
  }
  /// The unique identifier of the mission to which this sortie is assigned.
  /// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDMISSION);
  }
  /// The mission ID according to the source system.
  /// Example: /// Example: ABLE
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *missionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONID);
  }
  /// The Air Mobility Command (AMC) mission number of the sortie.
  /// Example: /// Example: AJM512571333
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcMsnNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCMSNNUM);
  }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcMsnType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCMSNTYPE);
  }
  /// The call sign assigned to the aircraft on this sortie.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// Joint Chiefs of Staff priority of this sortie.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *jcsPriority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JCSPRIORITY);
  }
  /// The planned primary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *primarySCL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIMARYSCL);
  }
  /// The planned secondary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *secondarySCL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDARYSCL);
  }
  /// Aircraft configuration required for the mission.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *reqConfig() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQCONFIG);
  }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *cargoConfig() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CARGOCONFIG);
  }
  /// Mass of fuel required for this leg of the sortie, in kilograms.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  double fuelReq() const {
    return GetField<double>(VT_FUELREQ, 0.0);
  }
  /// Liquid oxygen required on the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  double oxyReqCrew() const {
    return GetField<double>(VT_OXYREQCREW, 0.0);
  }
  /// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  double oxyOnCrew() const {
    return GetField<double>(VT_OXYONCREW, 0.0);
  }
  /// Liquid oxygen required on the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  double oxyReqPax() const {
    return GetField<double>(VT_OXYREQPAX, 0.0);
  }
  /// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  double oxyOnPax() const {
    return GetField<double>(VT_OXYONPAX, 0.0);
  }
  /// The Alert Status code.
  /// Example: /// Example: C1
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *alertStatusCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALERTSTATUSCODE);
  }
  /// The amount of time allowed between launch order and takeoff, in seconds.
  /// Example: /// Example: 22
  /// Constraints: No constraints specified.
  int32_t alertStatus() const {
    return GetField<int32_t>(VT_ALERTSTATUS, 0);
  }
  /// The current state of this sortie.
  /// Example: /// Example: Park
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *currentState() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CURRENTSTATE);
  }
  /// The itinerary identifier of the departure location.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  int32_t depItinerary() const {
    return GetField<int32_t>(VT_DEPITINERARY, 0);
  }
  /// The departure International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *depICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPICAO);
  }
  /// The departure International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *depIATA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPIATA);
  }
  /// The departure Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *depFAA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPFAA);
  }
  /// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *plannedDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNEDDEPTIME);
  }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTDEPTIME);
  }
  /// The actual departure time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALDEPTIME);
  }
  /// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estBlockOutTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTBLOCKOUTTIME);
  }
  /// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualBlockOutTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALBLOCKOUTTIME);
  }
  /// Purpose code at the departure location of this sortie.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *depPurposeCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPPURPOSECODE);
  }
  /// The itinerary identifier of the arrival location.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  int32_t arrItinerary() const {
    return GetField<int32_t>(VT_ARRITINERARY, 0);
  }
  /// The arrival International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *arrICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRICAO);
  }
  /// The arrival International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *arrIATA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRIATA);
  }
  /// The arrival Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *arrFAA() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRFAA);
  }
  /// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *plannedArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANNEDARRTIME);
  }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTARRTIME);
  }
  /// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALARRTIME);
  }
  /// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estBlockInTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTBLOCKINTIME);
  }
  /// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualBlockInTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALBLOCKINTIME);
  }
  /// Purpose code at the arrival location of this sortie.
  /// Example: /// Example: O
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *arrPurposeCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARRPURPOSECODE);
  }
  /// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-03T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *dhd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DHD);
  }
  /// Reason the aircraft must return to home station by its due home date.
  /// Example: /// Example: Due for maintenance
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *dhdReason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DHDREASON);
  }
  /// Aircraft event text.
  /// Example: /// Example: Example event
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *aircraftEvent() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTEVENT);
  }
  /// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
  /// Example: /// Example: OPS
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *soe() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOE);
  }
  /// The leg number of this sortie.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  int32_t legNum() const {
    return GetField<int32_t>(VT_LEGNUM, 0);
  }
  /// The planned flight time for this sortie, in minutes.
  /// Example: /// Example: 104.5
  /// Constraints: No constraints specified.
  double flightTime() const {
    return GetField<double>(VT_FLIGHTTIME, 0.0);
  }
  /// Scheduled ground time, in minutes.
  /// Example: /// Example: 387.8
  /// Constraints: No constraints specified.
  double gndTime() const {
    return GetField<double>(VT_GNDTIME, 0.0);
  }
  /// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// The version number of the crew paper.
  /// Example: /// Example: 1.1
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *papersVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAPERSVERSION);
  }
  /// Name of the uploaded PDF.
  /// Example: /// Example: ExampleFileName
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  /// Size of the supporting PDF, in bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t filesize() const {
    return GetField<int32_t>(VT_FILESIZE, 0);
  }
  /// The status of the supporting document.
  /// Example: /// Example: PUBLISHED
  /// Constraints: Minimum length = 0, Maximum length = 9
  AircraftSortie_Ingest_paperStatus_Enum paperStatus() const {
    return static_cast<AircraftSortie_Ingest_paperStatus_Enum>(GetField<int8_t>(VT_PAPERSTATUS, 0));
  }
  /// The prior permission required (PPR) status.
  /// Example: /// Example: PENDING
  /// Constraints: Minimum length = 0, Maximum length = 22
  AircraftSortie_Ingest_pprStatus_Enum pprStatus() const {
    return static_cast<AircraftSortie_Ingest_pprStatus_Enum>(GetField<int8_t>(VT_PPRSTATUS, 0));
  }
  /// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
  /// Example: /// Example: 2024-09-09T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *missionUpdate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONUPDATE);
  }
  /// The primary delay code.
  /// Example: /// Example: 500
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *delayCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DELAYCODE);
  }
  /// The last name of the aircraft commander.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *commanderName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMANDERNAME);
  }
  /// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: 7198675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *fmDeskNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FMDESKNUM);
  }
  /// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *fmName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FMNAME);
  }
  /// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  AircraftSortie_Ingest_rvnReq_Enum rvnReq() const {
    return static_cast<AircraftSortie_Ingest_rvnReq_Enum>(GetField<int8_t>(VT_RVNREQ, 0));
  }
  /// The number of passengers tasked for this sortie.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  int32_t passengers() const {
    return GetField<int32_t>(VT_PASSENGERS, 0);
  }
  /// The POI parking location.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *parkingLoc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARKINGLOC);
  }
  /// Remarks concerning the sortie objective.
  /// Example: /// Example: Some objective remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *objectiveRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJECTIVEREMARKS);
  }
  /// Remarks concerning the aircraft.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *aircraftRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTREMARKS);
  }
  /// Remarks concerning the schedule.
  /// Example: /// Example: Some schedule remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *scheduleRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCHEDULEREMARKS);
  }
  /// Remarks concerning the results of this sortie.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *resultRemarks() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESULTREMARKS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AircraftSortie_Ingest_dataMode_Enum dataMode() const {
    return static_cast<AircraftSortie_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ORIGSORTIEID) &&
           verifier.VerifyString(origSortieId()) &&
           VerifyOffset(verifier, VT_IDAIRCRAFT) &&
           verifier.VerifyString(idAircraft()) &&
           VerifyOffset(verifier, VT_AIRCRAFTALTID) &&
           verifier.VerifyString(aircraftAltId()) &&
           VerifyOffset(verifier, VT_TAILNUMBER) &&
           verifier.VerifyString(tailNumber()) &&
           VerifyOffset(verifier, VT_AIRCRAFTMDS) &&
           verifier.VerifyString(aircraftMDS()) &&
           VerifyOffset(verifier, VT_AIRCRAFTADSB) &&
           verifier.VerifyString(aircraftADSB()) &&
           VerifyOffset(verifier, VT_SORTIEDATE) &&
           verifier.VerifyString(sortieDate()) &&
           VerifyField<int32_t>(verifier, VT_LINENUMBER, 4) &&
           VerifyOffset(verifier, VT_IDMISSION) &&
           verifier.VerifyString(idMission()) &&
           VerifyOffset(verifier, VT_MISSIONID) &&
           verifier.VerifyString(missionId()) &&
           VerifyOffset(verifier, VT_AMCMSNNUM) &&
           verifier.VerifyString(amcMsnNum()) &&
           VerifyOffset(verifier, VT_AMCMSNTYPE) &&
           verifier.VerifyString(amcMsnType()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_JCSPRIORITY) &&
           verifier.VerifyString(jcsPriority()) &&
           VerifyOffset(verifier, VT_PRIMARYSCL) &&
           verifier.VerifyString(primarySCL()) &&
           VerifyOffset(verifier, VT_SECONDARYSCL) &&
           verifier.VerifyString(secondarySCL()) &&
           VerifyOffset(verifier, VT_REQCONFIG) &&
           verifier.VerifyString(reqConfig()) &&
           VerifyOffset(verifier, VT_CARGOCONFIG) &&
           verifier.VerifyString(cargoConfig()) &&
           VerifyField<double>(verifier, VT_FUELREQ, 8) &&
           VerifyField<double>(verifier, VT_OXYREQCREW, 8) &&
           VerifyField<double>(verifier, VT_OXYONCREW, 8) &&
           VerifyField<double>(verifier, VT_OXYREQPAX, 8) &&
           VerifyField<double>(verifier, VT_OXYONPAX, 8) &&
           VerifyOffset(verifier, VT_ALERTSTATUSCODE) &&
           verifier.VerifyString(alertStatusCode()) &&
           VerifyField<int32_t>(verifier, VT_ALERTSTATUS, 4) &&
           VerifyOffset(verifier, VT_CURRENTSTATE) &&
           verifier.VerifyString(currentState()) &&
           VerifyField<int32_t>(verifier, VT_DEPITINERARY, 4) &&
           VerifyOffset(verifier, VT_DEPICAO) &&
           verifier.VerifyString(depICAO()) &&
           VerifyOffset(verifier, VT_DEPIATA) &&
           verifier.VerifyString(depIATA()) &&
           VerifyOffset(verifier, VT_DEPFAA) &&
           verifier.VerifyString(depFAA()) &&
           VerifyOffset(verifier, VT_PLANNEDDEPTIME) &&
           verifier.VerifyString(plannedDepTime()) &&
           VerifyOffset(verifier, VT_ESTDEPTIME) &&
           verifier.VerifyString(estDepTime()) &&
           VerifyOffset(verifier, VT_ACTUALDEPTIME) &&
           verifier.VerifyString(actualDepTime()) &&
           VerifyOffset(verifier, VT_ESTBLOCKOUTTIME) &&
           verifier.VerifyString(estBlockOutTime()) &&
           VerifyOffset(verifier, VT_ACTUALBLOCKOUTTIME) &&
           verifier.VerifyString(actualBlockOutTime()) &&
           VerifyOffset(verifier, VT_DEPPURPOSECODE) &&
           verifier.VerifyString(depPurposeCode()) &&
           VerifyField<int32_t>(verifier, VT_ARRITINERARY, 4) &&
           VerifyOffset(verifier, VT_ARRICAO) &&
           verifier.VerifyString(arrICAO()) &&
           VerifyOffset(verifier, VT_ARRIATA) &&
           verifier.VerifyString(arrIATA()) &&
           VerifyOffset(verifier, VT_ARRFAA) &&
           verifier.VerifyString(arrFAA()) &&
           VerifyOffset(verifier, VT_PLANNEDARRTIME) &&
           verifier.VerifyString(plannedArrTime()) &&
           VerifyOffset(verifier, VT_ESTARRTIME) &&
           verifier.VerifyString(estArrTime()) &&
           VerifyOffset(verifier, VT_ACTUALARRTIME) &&
           verifier.VerifyString(actualArrTime()) &&
           VerifyOffset(verifier, VT_ESTBLOCKINTIME) &&
           verifier.VerifyString(estBlockInTime()) &&
           VerifyOffset(verifier, VT_ACTUALBLOCKINTIME) &&
           verifier.VerifyString(actualBlockInTime()) &&
           VerifyOffset(verifier, VT_ARRPURPOSECODE) &&
           verifier.VerifyString(arrPurposeCode()) &&
           VerifyOffset(verifier, VT_DHD) &&
           verifier.VerifyString(dhd()) &&
           VerifyOffset(verifier, VT_DHDREASON) &&
           verifier.VerifyString(dhdReason()) &&
           VerifyOffset(verifier, VT_AIRCRAFTEVENT) &&
           verifier.VerifyString(aircraftEvent()) &&
           VerifyOffset(verifier, VT_SOE) &&
           verifier.VerifyString(soe()) &&
           VerifyField<int32_t>(verifier, VT_LEGNUM, 4) &&
           VerifyField<double>(verifier, VT_FLIGHTTIME, 8) &&
           VerifyField<double>(verifier, VT_GNDTIME, 8) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_PAPERSVERSION) &&
           verifier.VerifyString(papersVersion()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<int32_t>(verifier, VT_FILESIZE, 4) &&
           VerifyField<int8_t>(verifier, VT_PAPERSTATUS, 1) &&
           VerifyField<int8_t>(verifier, VT_PPRSTATUS, 1) &&
           VerifyOffset(verifier, VT_MISSIONUPDATE) &&
           verifier.VerifyString(missionUpdate()) &&
           VerifyOffset(verifier, VT_DELAYCODE) &&
           verifier.VerifyString(delayCode()) &&
           VerifyOffset(verifier, VT_COMMANDERNAME) &&
           verifier.VerifyString(commanderName()) &&
           VerifyOffset(verifier, VT_FMDESKNUM) &&
           verifier.VerifyString(fmDeskNum()) &&
           VerifyOffset(verifier, VT_FMNAME) &&
           verifier.VerifyString(fmName()) &&
           VerifyField<int8_t>(verifier, VT_RVNREQ, 1) &&
           VerifyField<int32_t>(verifier, VT_PASSENGERS, 4) &&
           VerifyOffset(verifier, VT_PARKINGLOC) &&
           verifier.VerifyString(parkingLoc()) &&
           VerifyOffset(verifier, VT_OBJECTIVEREMARKS) &&
           verifier.VerifyString(objectiveRemarks()) &&
           VerifyOffset(verifier, VT_AIRCRAFTREMARKS) &&
           verifier.VerifyString(aircraftRemarks()) &&
           VerifyOffset(verifier, VT_SCHEDULEREMARKS) &&
           verifier.VerifyString(scheduleRemarks()) &&
           VerifyOffset(verifier, VT_RESULTREMARKS) &&
           verifier.VerifyString(resultRemarks()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct AircraftSortie_IngestBuilder {
  typedef AircraftSortie_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_origSortieId(::flatbuffers::Offset<::flatbuffers::String> origSortieId) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ORIGSORTIEID, origSortieId);
  }
  void add_idAircraft(::flatbuffers::Offset<::flatbuffers::String> idAircraft) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_IDAIRCRAFT, idAircraft);
  }
  void add_aircraftAltId(::flatbuffers::Offset<::flatbuffers::String> aircraftAltId) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AIRCRAFTALTID, aircraftAltId);
  }
  void add_tailNumber(::flatbuffers::Offset<::flatbuffers::String> tailNumber) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_TAILNUMBER, tailNumber);
  }
  void add_aircraftMDS(::flatbuffers::Offset<::flatbuffers::String> aircraftMDS) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AIRCRAFTMDS, aircraftMDS);
  }
  void add_aircraftADSB(::flatbuffers::Offset<::flatbuffers::String> aircraftADSB) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AIRCRAFTADSB, aircraftADSB);
  }
  void add_sortieDate(::flatbuffers::Offset<::flatbuffers::String> sortieDate) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SORTIEDATE, sortieDate);
  }
  void add_lineNumber(int32_t lineNumber) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_LINENUMBER, lineNumber, 0);
  }
  void add_idMission(::flatbuffers::Offset<::flatbuffers::String> idMission) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_IDMISSION, idMission);
  }
  void add_missionId(::flatbuffers::Offset<::flatbuffers::String> missionId) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_MISSIONID, missionId);
  }
  void add_amcMsnNum(::flatbuffers::Offset<::flatbuffers::String> amcMsnNum) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AMCMSNNUM, amcMsnNum);
  }
  void add_amcMsnType(::flatbuffers::Offset<::flatbuffers::String> amcMsnType) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AMCMSNTYPE, amcMsnType);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CALLSIGN, callSign);
  }
  void add_jcsPriority(::flatbuffers::Offset<::flatbuffers::String> jcsPriority) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_JCSPRIORITY, jcsPriority);
  }
  void add_primarySCL(::flatbuffers::Offset<::flatbuffers::String> primarySCL) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_PRIMARYSCL, primarySCL);
  }
  void add_secondarySCL(::flatbuffers::Offset<::flatbuffers::String> secondarySCL) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SECONDARYSCL, secondarySCL);
  }
  void add_reqConfig(::flatbuffers::Offset<::flatbuffers::String> reqConfig) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_REQCONFIG, reqConfig);
  }
  void add_cargoConfig(::flatbuffers::Offset<::flatbuffers::String> cargoConfig) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CARGOCONFIG, cargoConfig);
  }
  void add_fuelReq(double fuelReq) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_FUELREQ, fuelReq, 0.0);
  }
  void add_oxyReqCrew(double oxyReqCrew) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_OXYREQCREW, oxyReqCrew, 0.0);
  }
  void add_oxyOnCrew(double oxyOnCrew) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_OXYONCREW, oxyOnCrew, 0.0);
  }
  void add_oxyReqPax(double oxyReqPax) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_OXYREQPAX, oxyReqPax, 0.0);
  }
  void add_oxyOnPax(double oxyOnPax) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_OXYONPAX, oxyOnPax, 0.0);
  }
  void add_alertStatusCode(::flatbuffers::Offset<::flatbuffers::String> alertStatusCode) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ALERTSTATUSCODE, alertStatusCode);
  }
  void add_alertStatus(int32_t alertStatus) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_ALERTSTATUS, alertStatus, 0);
  }
  void add_currentState(::flatbuffers::Offset<::flatbuffers::String> currentState) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CURRENTSTATE, currentState);
  }
  void add_depItinerary(int32_t depItinerary) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_DEPITINERARY, depItinerary, 0);
  }
  void add_depICAO(::flatbuffers::Offset<::flatbuffers::String> depICAO) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DEPICAO, depICAO);
  }
  void add_depIATA(::flatbuffers::Offset<::flatbuffers::String> depIATA) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DEPIATA, depIATA);
  }
  void add_depFAA(::flatbuffers::Offset<::flatbuffers::String> depFAA) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DEPFAA, depFAA);
  }
  void add_plannedDepTime(::flatbuffers::Offset<::flatbuffers::String> plannedDepTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_PLANNEDDEPTIME, plannedDepTime);
  }
  void add_estDepTime(::flatbuffers::Offset<::flatbuffers::String> estDepTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ESTDEPTIME, estDepTime);
  }
  void add_actualDepTime(::flatbuffers::Offset<::flatbuffers::String> actualDepTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ACTUALDEPTIME, actualDepTime);
  }
  void add_estBlockOutTime(::flatbuffers::Offset<::flatbuffers::String> estBlockOutTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ESTBLOCKOUTTIME, estBlockOutTime);
  }
  void add_actualBlockOutTime(::flatbuffers::Offset<::flatbuffers::String> actualBlockOutTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ACTUALBLOCKOUTTIME, actualBlockOutTime);
  }
  void add_depPurposeCode(::flatbuffers::Offset<::flatbuffers::String> depPurposeCode) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DEPPURPOSECODE, depPurposeCode);
  }
  void add_arrItinerary(int32_t arrItinerary) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_ARRITINERARY, arrItinerary, 0);
  }
  void add_arrICAO(::flatbuffers::Offset<::flatbuffers::String> arrICAO) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ARRICAO, arrICAO);
  }
  void add_arrIATA(::flatbuffers::Offset<::flatbuffers::String> arrIATA) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ARRIATA, arrIATA);
  }
  void add_arrFAA(::flatbuffers::Offset<::flatbuffers::String> arrFAA) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ARRFAA, arrFAA);
  }
  void add_plannedArrTime(::flatbuffers::Offset<::flatbuffers::String> plannedArrTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_PLANNEDARRTIME, plannedArrTime);
  }
  void add_estArrTime(::flatbuffers::Offset<::flatbuffers::String> estArrTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ESTARRTIME, estArrTime);
  }
  void add_actualArrTime(::flatbuffers::Offset<::flatbuffers::String> actualArrTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ACTUALARRTIME, actualArrTime);
  }
  void add_estBlockInTime(::flatbuffers::Offset<::flatbuffers::String> estBlockInTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ESTBLOCKINTIME, estBlockInTime);
  }
  void add_actualBlockInTime(::flatbuffers::Offset<::flatbuffers::String> actualBlockInTime) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ACTUALBLOCKINTIME, actualBlockInTime);
  }
  void add_arrPurposeCode(::flatbuffers::Offset<::flatbuffers::String> arrPurposeCode) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ARRPURPOSECODE, arrPurposeCode);
  }
  void add_dhd(::flatbuffers::Offset<::flatbuffers::String> dhd) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DHD, dhd);
  }
  void add_dhdReason(::flatbuffers::Offset<::flatbuffers::String> dhdReason) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DHDREASON, dhdReason);
  }
  void add_aircraftEvent(::flatbuffers::Offset<::flatbuffers::String> aircraftEvent) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AIRCRAFTEVENT, aircraftEvent);
  }
  void add_soe(::flatbuffers::Offset<::flatbuffers::String> soe) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SOE, soe);
  }
  void add_legNum(int32_t legNum) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_LEGNUM, legNum, 0);
  }
  void add_flightTime(double flightTime) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_FLIGHTTIME, flightTime, 0.0);
  }
  void add_gndTime(double gndTime) {
    fbb_.AddElement<double>(AircraftSortie_Ingest::VT_GNDTIME, gndTime, 0.0);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  void add_papersVersion(::flatbuffers::Offset<::flatbuffers::String> papersVersion) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_PAPERSVERSION, papersVersion);
  }
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_FILENAME, filename);
  }
  void add_filesize(int32_t filesize) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_FILESIZE, filesize, 0);
  }
  void add_paperStatus(AircraftSortie_Ingest_paperStatus_Enum paperStatus) {
    fbb_.AddElement<int8_t>(AircraftSortie_Ingest::VT_PAPERSTATUS, static_cast<int8_t>(paperStatus), 0);
  }
  void add_pprStatus(AircraftSortie_Ingest_pprStatus_Enum pprStatus) {
    fbb_.AddElement<int8_t>(AircraftSortie_Ingest::VT_PPRSTATUS, static_cast<int8_t>(pprStatus), 0);
  }
  void add_missionUpdate(::flatbuffers::Offset<::flatbuffers::String> missionUpdate) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_MISSIONUPDATE, missionUpdate);
  }
  void add_delayCode(::flatbuffers::Offset<::flatbuffers::String> delayCode) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_DELAYCODE, delayCode);
  }
  void add_commanderName(::flatbuffers::Offset<::flatbuffers::String> commanderName) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_COMMANDERNAME, commanderName);
  }
  void add_fmDeskNum(::flatbuffers::Offset<::flatbuffers::String> fmDeskNum) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_FMDESKNUM, fmDeskNum);
  }
  void add_fmName(::flatbuffers::Offset<::flatbuffers::String> fmName) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_FMNAME, fmName);
  }
  void add_rvnReq(AircraftSortie_Ingest_rvnReq_Enum rvnReq) {
    fbb_.AddElement<int8_t>(AircraftSortie_Ingest::VT_RVNREQ, static_cast<int8_t>(rvnReq), 0);
  }
  void add_passengers(int32_t passengers) {
    fbb_.AddElement<int32_t>(AircraftSortie_Ingest::VT_PASSENGERS, passengers, 0);
  }
  void add_parkingLoc(::flatbuffers::Offset<::flatbuffers::String> parkingLoc) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_PARKINGLOC, parkingLoc);
  }
  void add_objectiveRemarks(::flatbuffers::Offset<::flatbuffers::String> objectiveRemarks) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_OBJECTIVEREMARKS, objectiveRemarks);
  }
  void add_aircraftRemarks(::flatbuffers::Offset<::flatbuffers::String> aircraftRemarks) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_AIRCRAFTREMARKS, aircraftRemarks);
  }
  void add_scheduleRemarks(::flatbuffers::Offset<::flatbuffers::String> scheduleRemarks) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SCHEDULEREMARKS, scheduleRemarks);
  }
  void add_resultRemarks(::flatbuffers::Offset<::flatbuffers::String> resultRemarks) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_RESULTREMARKS, resultRemarks);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(AircraftSortie_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AircraftSortie_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AircraftSortie_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit AircraftSortie_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftSortie_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftSortie_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftSortie_Ingest> CreateAircraftSortie_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSortieId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAircraft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftAltId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftADSB = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sortieDate = 0,
    int32_t lineNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcMsnNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcMsnType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jcsPriority = 0,
    ::flatbuffers::Offset<::flatbuffers::String> primarySCL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> secondarySCL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reqConfig = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cargoConfig = 0,
    double fuelReq = 0.0,
    double oxyReqCrew = 0.0,
    double oxyOnCrew = 0.0,
    double oxyReqPax = 0.0,
    double oxyOnPax = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> alertStatusCode = 0,
    int32_t alertStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> currentState = 0,
    int32_t depItinerary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depIATA = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depFAA = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plannedDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estBlockOutTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualBlockOutTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depPurposeCode = 0,
    int32_t arrItinerary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrIATA = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrFAA = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plannedArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estBlockInTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualBlockInTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> arrPurposeCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dhd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dhdReason = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftEvent = 0,
    ::flatbuffers::Offset<::flatbuffers::String> soe = 0,
    int32_t legNum = 0,
    double flightTime = 0.0,
    double gndTime = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> papersVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    int32_t filesize = 0,
    AircraftSortie_Ingest_paperStatus_Enum paperStatus = AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED,
    AircraftSortie_Ingest_pprStatus_Enum pprStatus = AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED,
    ::flatbuffers::Offset<::flatbuffers::String> missionUpdate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> delayCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commanderName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fmDeskNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fmName = 0,
    AircraftSortie_Ingest_rvnReq_Enum rvnReq = AircraftSortie_Ingest_rvnReq_Enum_N,
    int32_t passengers = 0,
    ::flatbuffers::Offset<::flatbuffers::String> parkingLoc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objectiveRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scheduleRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resultRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    AircraftSortie_Ingest_dataMode_Enum dataMode = AircraftSortie_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  AircraftSortie_IngestBuilder builder_(_fbb);
  builder_.add_gndTime(gndTime);
  builder_.add_flightTime(flightTime);
  builder_.add_oxyOnPax(oxyOnPax);
  builder_.add_oxyReqPax(oxyReqPax);
  builder_.add_oxyOnCrew(oxyOnCrew);
  builder_.add_oxyReqCrew(oxyReqCrew);
  builder_.add_fuelReq(fuelReq);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_resultRemarks(resultRemarks);
  builder_.add_scheduleRemarks(scheduleRemarks);
  builder_.add_aircraftRemarks(aircraftRemarks);
  builder_.add_objectiveRemarks(objectiveRemarks);
  builder_.add_parkingLoc(parkingLoc);
  builder_.add_passengers(passengers);
  builder_.add_fmName(fmName);
  builder_.add_fmDeskNum(fmDeskNum);
  builder_.add_commanderName(commanderName);
  builder_.add_delayCode(delayCode);
  builder_.add_missionUpdate(missionUpdate);
  builder_.add_filesize(filesize);
  builder_.add_filename(filename);
  builder_.add_papersVersion(papersVersion);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_legNum(legNum);
  builder_.add_soe(soe);
  builder_.add_aircraftEvent(aircraftEvent);
  builder_.add_dhdReason(dhdReason);
  builder_.add_dhd(dhd);
  builder_.add_arrPurposeCode(arrPurposeCode);
  builder_.add_actualBlockInTime(actualBlockInTime);
  builder_.add_estBlockInTime(estBlockInTime);
  builder_.add_actualArrTime(actualArrTime);
  builder_.add_estArrTime(estArrTime);
  builder_.add_plannedArrTime(plannedArrTime);
  builder_.add_arrFAA(arrFAA);
  builder_.add_arrIATA(arrIATA);
  builder_.add_arrICAO(arrICAO);
  builder_.add_arrItinerary(arrItinerary);
  builder_.add_depPurposeCode(depPurposeCode);
  builder_.add_actualBlockOutTime(actualBlockOutTime);
  builder_.add_estBlockOutTime(estBlockOutTime);
  builder_.add_actualDepTime(actualDepTime);
  builder_.add_estDepTime(estDepTime);
  builder_.add_plannedDepTime(plannedDepTime);
  builder_.add_depFAA(depFAA);
  builder_.add_depIATA(depIATA);
  builder_.add_depICAO(depICAO);
  builder_.add_depItinerary(depItinerary);
  builder_.add_currentState(currentState);
  builder_.add_alertStatus(alertStatus);
  builder_.add_alertStatusCode(alertStatusCode);
  builder_.add_cargoConfig(cargoConfig);
  builder_.add_reqConfig(reqConfig);
  builder_.add_secondarySCL(secondarySCL);
  builder_.add_primarySCL(primarySCL);
  builder_.add_jcsPriority(jcsPriority);
  builder_.add_callSign(callSign);
  builder_.add_amcMsnType(amcMsnType);
  builder_.add_amcMsnNum(amcMsnNum);
  builder_.add_missionId(missionId);
  builder_.add_idMission(idMission);
  builder_.add_lineNumber(lineNumber);
  builder_.add_sortieDate(sortieDate);
  builder_.add_aircraftADSB(aircraftADSB);
  builder_.add_aircraftMDS(aircraftMDS);
  builder_.add_tailNumber(tailNumber);
  builder_.add_aircraftAltId(aircraftAltId);
  builder_.add_idAircraft(idAircraft);
  builder_.add_origSortieId(origSortieId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_rvnReq(rvnReq);
  builder_.add_pprStatus(pprStatus);
  builder_.add_paperStatus(paperStatus);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftSortie_Ingest> CreateAircraftSortie_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *origSortieId = nullptr,
    const char *idAircraft = nullptr,
    const char *aircraftAltId = nullptr,
    const char *tailNumber = nullptr,
    const char *aircraftMDS = nullptr,
    const char *aircraftADSB = nullptr,
    const char *sortieDate = nullptr,
    int32_t lineNumber = 0,
    const char *idMission = nullptr,
    const char *missionId = nullptr,
    const char *amcMsnNum = nullptr,
    const char *amcMsnType = nullptr,
    const char *callSign = nullptr,
    const char *jcsPriority = nullptr,
    const char *primarySCL = nullptr,
    const char *secondarySCL = nullptr,
    const char *reqConfig = nullptr,
    const char *cargoConfig = nullptr,
    double fuelReq = 0.0,
    double oxyReqCrew = 0.0,
    double oxyOnCrew = 0.0,
    double oxyReqPax = 0.0,
    double oxyOnPax = 0.0,
    const char *alertStatusCode = nullptr,
    int32_t alertStatus = 0,
    const char *currentState = nullptr,
    int32_t depItinerary = 0,
    const char *depICAO = nullptr,
    const char *depIATA = nullptr,
    const char *depFAA = nullptr,
    const char *plannedDepTime = nullptr,
    const char *estDepTime = nullptr,
    const char *actualDepTime = nullptr,
    const char *estBlockOutTime = nullptr,
    const char *actualBlockOutTime = nullptr,
    const char *depPurposeCode = nullptr,
    int32_t arrItinerary = 0,
    const char *arrICAO = nullptr,
    const char *arrIATA = nullptr,
    const char *arrFAA = nullptr,
    const char *plannedArrTime = nullptr,
    const char *estArrTime = nullptr,
    const char *actualArrTime = nullptr,
    const char *estBlockInTime = nullptr,
    const char *actualBlockInTime = nullptr,
    const char *arrPurposeCode = nullptr,
    const char *dhd = nullptr,
    const char *dhdReason = nullptr,
    const char *aircraftEvent = nullptr,
    const char *soe = nullptr,
    int32_t legNum = 0,
    double flightTime = 0.0,
    double gndTime = 0.0,
    const char *rawFileURI = nullptr,
    const char *papersVersion = nullptr,
    const char *filename = nullptr,
    int32_t filesize = 0,
    AircraftSortie_Ingest_paperStatus_Enum paperStatus = AircraftSortie_Ingest_paperStatus_Enum_PUBLISHED,
    AircraftSortie_Ingest_pprStatus_Enum pprStatus = AircraftSortie_Ingest_pprStatus_Enum_NOT_REQUIRED,
    const char *missionUpdate = nullptr,
    const char *delayCode = nullptr,
    const char *commanderName = nullptr,
    const char *fmDeskNum = nullptr,
    const char *fmName = nullptr,
    AircraftSortie_Ingest_rvnReq_Enum rvnReq = AircraftSortie_Ingest_rvnReq_Enum_N,
    int32_t passengers = 0,
    const char *parkingLoc = nullptr,
    const char *objectiveRemarks = nullptr,
    const char *aircraftRemarks = nullptr,
    const char *scheduleRemarks = nullptr,
    const char *resultRemarks = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    AircraftSortie_Ingest_dataMode_Enum dataMode = AircraftSortie_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto origSortieId__ = origSortieId ? _fbb.CreateString(origSortieId) : 0;
  auto idAircraft__ = idAircraft ? _fbb.CreateString(idAircraft) : 0;
  auto aircraftAltId__ = aircraftAltId ? _fbb.CreateString(aircraftAltId) : 0;
  auto tailNumber__ = tailNumber ? _fbb.CreateString(tailNumber) : 0;
  auto aircraftMDS__ = aircraftMDS ? _fbb.CreateString(aircraftMDS) : 0;
  auto aircraftADSB__ = aircraftADSB ? _fbb.CreateString(aircraftADSB) : 0;
  auto sortieDate__ = sortieDate ? _fbb.CreateString(sortieDate) : 0;
  auto idMission__ = idMission ? _fbb.CreateString(idMission) : 0;
  auto missionId__ = missionId ? _fbb.CreateString(missionId) : 0;
  auto amcMsnNum__ = amcMsnNum ? _fbb.CreateString(amcMsnNum) : 0;
  auto amcMsnType__ = amcMsnType ? _fbb.CreateString(amcMsnType) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto jcsPriority__ = jcsPriority ? _fbb.CreateString(jcsPriority) : 0;
  auto primarySCL__ = primarySCL ? _fbb.CreateString(primarySCL) : 0;
  auto secondarySCL__ = secondarySCL ? _fbb.CreateString(secondarySCL) : 0;
  auto reqConfig__ = reqConfig ? _fbb.CreateString(reqConfig) : 0;
  auto cargoConfig__ = cargoConfig ? _fbb.CreateString(cargoConfig) : 0;
  auto alertStatusCode__ = alertStatusCode ? _fbb.CreateString(alertStatusCode) : 0;
  auto currentState__ = currentState ? _fbb.CreateString(currentState) : 0;
  auto depICAO__ = depICAO ? _fbb.CreateString(depICAO) : 0;
  auto depIATA__ = depIATA ? _fbb.CreateString(depIATA) : 0;
  auto depFAA__ = depFAA ? _fbb.CreateString(depFAA) : 0;
  auto plannedDepTime__ = plannedDepTime ? _fbb.CreateString(plannedDepTime) : 0;
  auto estDepTime__ = estDepTime ? _fbb.CreateString(estDepTime) : 0;
  auto actualDepTime__ = actualDepTime ? _fbb.CreateString(actualDepTime) : 0;
  auto estBlockOutTime__ = estBlockOutTime ? _fbb.CreateString(estBlockOutTime) : 0;
  auto actualBlockOutTime__ = actualBlockOutTime ? _fbb.CreateString(actualBlockOutTime) : 0;
  auto depPurposeCode__ = depPurposeCode ? _fbb.CreateString(depPurposeCode) : 0;
  auto arrICAO__ = arrICAO ? _fbb.CreateString(arrICAO) : 0;
  auto arrIATA__ = arrIATA ? _fbb.CreateString(arrIATA) : 0;
  auto arrFAA__ = arrFAA ? _fbb.CreateString(arrFAA) : 0;
  auto plannedArrTime__ = plannedArrTime ? _fbb.CreateString(plannedArrTime) : 0;
  auto estArrTime__ = estArrTime ? _fbb.CreateString(estArrTime) : 0;
  auto actualArrTime__ = actualArrTime ? _fbb.CreateString(actualArrTime) : 0;
  auto estBlockInTime__ = estBlockInTime ? _fbb.CreateString(estBlockInTime) : 0;
  auto actualBlockInTime__ = actualBlockInTime ? _fbb.CreateString(actualBlockInTime) : 0;
  auto arrPurposeCode__ = arrPurposeCode ? _fbb.CreateString(arrPurposeCode) : 0;
  auto dhd__ = dhd ? _fbb.CreateString(dhd) : 0;
  auto dhdReason__ = dhdReason ? _fbb.CreateString(dhdReason) : 0;
  auto aircraftEvent__ = aircraftEvent ? _fbb.CreateString(aircraftEvent) : 0;
  auto soe__ = soe ? _fbb.CreateString(soe) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto papersVersion__ = papersVersion ? _fbb.CreateString(papersVersion) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto missionUpdate__ = missionUpdate ? _fbb.CreateString(missionUpdate) : 0;
  auto delayCode__ = delayCode ? _fbb.CreateString(delayCode) : 0;
  auto commanderName__ = commanderName ? _fbb.CreateString(commanderName) : 0;
  auto fmDeskNum__ = fmDeskNum ? _fbb.CreateString(fmDeskNum) : 0;
  auto fmName__ = fmName ? _fbb.CreateString(fmName) : 0;
  auto parkingLoc__ = parkingLoc ? _fbb.CreateString(parkingLoc) : 0;
  auto objectiveRemarks__ = objectiveRemarks ? _fbb.CreateString(objectiveRemarks) : 0;
  auto aircraftRemarks__ = aircraftRemarks ? _fbb.CreateString(aircraftRemarks) : 0;
  auto scheduleRemarks__ = scheduleRemarks ? _fbb.CreateString(scheduleRemarks) : 0;
  auto resultRemarks__ = resultRemarks ? _fbb.CreateString(resultRemarks) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAircraftSortie_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      origSortieId__,
      idAircraft__,
      aircraftAltId__,
      tailNumber__,
      aircraftMDS__,
      aircraftADSB__,
      sortieDate__,
      lineNumber,
      idMission__,
      missionId__,
      amcMsnNum__,
      amcMsnType__,
      callSign__,
      jcsPriority__,
      primarySCL__,
      secondarySCL__,
      reqConfig__,
      cargoConfig__,
      fuelReq,
      oxyReqCrew,
      oxyOnCrew,
      oxyReqPax,
      oxyOnPax,
      alertStatusCode__,
      alertStatus,
      currentState__,
      depItinerary,
      depICAO__,
      depIATA__,
      depFAA__,
      plannedDepTime__,
      estDepTime__,
      actualDepTime__,
      estBlockOutTime__,
      actualBlockOutTime__,
      depPurposeCode__,
      arrItinerary,
      arrICAO__,
      arrIATA__,
      arrFAA__,
      plannedArrTime__,
      estArrTime__,
      actualArrTime__,
      estBlockInTime__,
      actualBlockInTime__,
      arrPurposeCode__,
      dhd__,
      dhdReason__,
      aircraftEvent__,
      soe__,
      legNum,
      flightTime,
      gndTime,
      rawFileURI__,
      papersVersion__,
      filename__,
      filesize,
      paperStatus,
      pprStatus,
      missionUpdate__,
      delayCode__,
      commanderName__,
      fmDeskNum__,
      fmName__,
      rvnReq,
      passengers,
      parkingLoc__,
      objectiveRemarks__,
      aircraftRemarks__,
      scheduleRemarks__,
      resultRemarks__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const AircraftSortie_Ingest *GetAircraftSortie_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftSortie_Ingest>(buf);
}

inline const AircraftSortie_Ingest *GetSizePrefixedAircraftSortie_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftSortie_Ingest>(buf);
}

inline const char *AircraftSortie_IngestIdentifier() {
  return "AIRC";
}

inline bool AircraftSortie_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftSortie_IngestIdentifier());
}

inline bool SizePrefixedAircraftSortie_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftSortie_IngestIdentifier(), true);
}

inline bool VerifyAircraftSortie_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftSortie_Ingest>(AircraftSortie_IngestIdentifier());
}

inline bool VerifySizePrefixedAircraftSortie_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftSortie_Ingest>(AircraftSortie_IngestIdentifier());
}

inline void FinishAircraftSortie_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftSortie_Ingest> root) {
  fbb.Finish(root, AircraftSortie_IngestIdentifier());
}

inline void FinishSizePrefixedAircraftSortie_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftSortie_Ingest> root) {
  fbb.FinishSizePrefixed(root, AircraftSortie_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
