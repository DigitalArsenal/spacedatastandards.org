// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GNSSRawIF_Full;
struct GNSSRawIF_FullBuilder;

enum GNSSRawIF_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  GNSSRawIF_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  GNSSRawIF_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  GNSSRawIF_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  GNSSRawIF_Full_dataMode_Enum_EXERCISE = 3,
  GNSSRawIF_Full_dataMode_Enum_MIN = GNSSRawIF_Full_dataMode_Enum_REAL,
  GNSSRawIF_Full_dataMode_Enum_MAX = GNSSRawIF_Full_dataMode_Enum_EXERCISE
};

inline const GNSSRawIF_Full_dataMode_Enum (&EnumValuesGNSSRawIF_Full_dataMode_Enum())[4] {
  static const GNSSRawIF_Full_dataMode_Enum values[] = {
    GNSSRawIF_Full_dataMode_Enum_REAL,
    GNSSRawIF_Full_dataMode_Enum_TEST,
    GNSSRawIF_Full_dataMode_Enum_SIMULATED,
    GNSSRawIF_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesGNSSRawIF_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameGNSSRawIF_Full_dataMode_Enum(GNSSRawIF_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, GNSSRawIF_Full_dataMode_Enum_REAL, GNSSRawIF_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGNSSRawIF_Full_dataMode_Enum()[index];
}

/// /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
struct GNSSRawIF_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GNSSRawIF_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_SATNO = 10,
    VT_ORIGOBJECTID = 12,
    VT_ESID = 14,
    VT_RECEIVER = 16,
    VT_BORESIGHT = 18,
    VT_QUAT = 20,
    VT_STARTINDEX = 22,
    VT_STARTTIME = 24,
    VT_ENDTIME = 26,
    VT_STARTLAT = 28,
    VT_STARTLON = 30,
    VT_STARTALT = 32,
    VT_ENDLAT = 34,
    VT_ENDLON = 36,
    VT_ENDALT = 38,
    VT_CENTERFREQ = 40,
    VT_IFFREQ = 42,
    VT_SAMPLERATE = 44,
    VT_POSTFOURIER = 46,
    VT_SAMPLETYPE = 48,
    VT_BITDEPTH = 50,
    VT_DIFFCODEBIAS = 52,
    VT_DATARATE = 54,
    VT_SETID = 56,
    VT_SETLENGTH = 58,
    VT_SEQUENCEID = 60,
    VT_FILENAME = 62,
    VT_SRCTYPS = 64,
    VT_SRCIDS = 66,
    VT_FILESIZE = 68,
    VT_TAGS = 70,
    VT_CREATEDAT = 72,
    VT_CREATEDBY = 74,
    VT_SOURCE = 76,
    VT_ORIGIN = 78,
    VT_DATAMODE = 80,
    VT_ORIGNETWORK = 82
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GNSSRawIF-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: L2045
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *esId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESID);
  }
  /// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
  /// Example: /// Example: GPS1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *receiver() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVER);
  }
  /// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  /// Example: /// Example: [0, 1, 0]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *boresight() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_BORESIGHT);
  }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
  /// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *quat() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_QUAT);
  }
  /// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t startIndex() const {
    return GetField<int32_t>(VT_STARTINDEX, 0);
  }
  /// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:11:28.919768Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:12:28.919768Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.834
  /// Constraints: No constraints specified.
  double startLat() const {
    return GetField<double>(VT_STARTLAT, 0.0);
  }
  /// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.821
  /// Constraints: No constraints specified.
  double startLon() const {
    return GetField<double>(VT_STARTLON, 0.0);
  }
  /// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.664
  /// Constraints: No constraints specified.
  double startAlt() const {
    return GetField<double>(VT_STARTALT, 0.0);
  }
  /// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.922
  /// Constraints: No constraints specified.
  double endLat() const {
    return GetField<double>(VT_ENDLAT, 0.0);
  }
  /// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.67
  /// Constraints: No constraints specified.
  double endLon() const {
    return GetField<double>(VT_ENDLON, 0.0);
  }
  /// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.626
  /// Constraints: No constraints specified.
  double endAlt() const {
    return GetField<double>(VT_ENDALT, 0.0);
  }
  /// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
  /// Example: /// Example: [1227.6, 1575.4]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *centerFreq() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CENTERFREQ);
  }
  /// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
  /// Example: /// Example: [4.09, 5.87]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ifFreq() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_IFFREQ);
  }
  /// The number of samples taken per second.
  /// Example: /// Example: [8000, 9000]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sampleRate() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SAMPLERATE);
  }
  /// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
  /// Example: /// Example: ['NONE', 'NONE']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *postFourier() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_POSTFOURIER);
  }
  /// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
  /// Example: /// Example: COMPLEX
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *sampleType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SAMPLETYPE);
  }
  /// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  int32_t bitDepth() const {
    return GetField<int32_t>(VT_BITDEPTH, 0);
  }
  /// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
  /// Example: /// Example: [0.0271, 0.0016]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *diffCodeBias() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIFFCODEBIAS);
  }
  /// The amount of data generated per unit time, expressed in Megabytes/minute.
  /// Example: /// Example: 0.205
  /// Constraints: No constraints specified.
  double dataRate() const {
    return GetField<double>(VT_DATARATE, 0.0);
  }
  /// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
  /// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *setId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SETID);
  }
  /// The number of raw IF records/files in a set.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t setLength() const {
    return GetField<int32_t>(VT_SETLENGTH, 0);
  }
  /// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t sequenceID() const {
    return GetField<int32_t>(VT_SEQUENCEID, 0);
  }
  /// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
  /// Example: /// Example: somefile.hdf5
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *fileName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  /// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['GNSSSET']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
  /// Example: /// Example: ['GNSSSET_ID']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: 3168895
  /// Constraints: No constraints specified.
  int64_t fileSize() const {
    return GetField<int64_t>(VT_FILESIZE, 0);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  GNSSRawIF_Full_dataMode_Enum dataMode() const {
    return static_cast<GNSSRawIF_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_ESID) &&
           verifier.VerifyString(esId()) &&
           VerifyOffset(verifier, VT_RECEIVER) &&
           verifier.VerifyString(receiver()) &&
           VerifyOffset(verifier, VT_BORESIGHT) &&
           verifier.VerifyVector(boresight()) &&
           verifier.VerifyVectorOfStrings(boresight()) &&
           VerifyOffset(verifier, VT_QUAT) &&
           verifier.VerifyVector(quat()) &&
           verifier.VerifyVectorOfStrings(quat()) &&
           VerifyField<int32_t>(verifier, VT_STARTINDEX, 4) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyField<double>(verifier, VT_STARTLAT, 8) &&
           VerifyField<double>(verifier, VT_STARTLON, 8) &&
           VerifyField<double>(verifier, VT_STARTALT, 8) &&
           VerifyField<double>(verifier, VT_ENDLAT, 8) &&
           VerifyField<double>(verifier, VT_ENDLON, 8) &&
           VerifyField<double>(verifier, VT_ENDALT, 8) &&
           VerifyOffset(verifier, VT_CENTERFREQ) &&
           verifier.VerifyVector(centerFreq()) &&
           verifier.VerifyVectorOfStrings(centerFreq()) &&
           VerifyOffset(verifier, VT_IFFREQ) &&
           verifier.VerifyVector(ifFreq()) &&
           verifier.VerifyVectorOfStrings(ifFreq()) &&
           VerifyOffset(verifier, VT_SAMPLERATE) &&
           verifier.VerifyVector(sampleRate()) &&
           verifier.VerifyVectorOfStrings(sampleRate()) &&
           VerifyOffset(verifier, VT_POSTFOURIER) &&
           verifier.VerifyVector(postFourier()) &&
           verifier.VerifyVectorOfStrings(postFourier()) &&
           VerifyOffset(verifier, VT_SAMPLETYPE) &&
           verifier.VerifyString(sampleType()) &&
           VerifyField<int32_t>(verifier, VT_BITDEPTH, 4) &&
           VerifyOffset(verifier, VT_DIFFCODEBIAS) &&
           verifier.VerifyVector(diffCodeBias()) &&
           verifier.VerifyVectorOfStrings(diffCodeBias()) &&
           VerifyField<double>(verifier, VT_DATARATE, 8) &&
           VerifyOffset(verifier, VT_SETID) &&
           verifier.VerifyString(setId()) &&
           VerifyField<int32_t>(verifier, VT_SETLENGTH, 4) &&
           VerifyField<int32_t>(verifier, VT_SEQUENCEID, 4) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(fileName()) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyField<int64_t>(verifier, VT_FILESIZE, 8) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct GNSSRawIF_FullBuilder {
  typedef GNSSRawIF_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(GNSSRawIF_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_esId(::flatbuffers::Offset<::flatbuffers::String> esId) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ESID, esId);
  }
  void add_receiver(::flatbuffers::Offset<::flatbuffers::String> receiver) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_RECEIVER, receiver);
  }
  void add_boresight(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> boresight) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_BORESIGHT, boresight);
  }
  void add_quat(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quat) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_QUAT, quat);
  }
  void add_startIndex(int32_t startIndex) {
    fbb_.AddElement<int32_t>(GNSSRawIF_Full::VT_STARTINDEX, startIndex, 0);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ENDTIME, endTime);
  }
  void add_startLat(double startLat) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_STARTLAT, startLat, 0.0);
  }
  void add_startLon(double startLon) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_STARTLON, startLon, 0.0);
  }
  void add_startAlt(double startAlt) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_STARTALT, startAlt, 0.0);
  }
  void add_endLat(double endLat) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_ENDLAT, endLat, 0.0);
  }
  void add_endLon(double endLon) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_ENDLON, endLon, 0.0);
  }
  void add_endAlt(double endAlt) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_ENDALT, endAlt, 0.0);
  }
  void add_centerFreq(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> centerFreq) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_CENTERFREQ, centerFreq);
  }
  void add_ifFreq(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ifFreq) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_IFFREQ, ifFreq);
  }
  void add_sampleRate(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sampleRate) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SAMPLERATE, sampleRate);
  }
  void add_postFourier(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> postFourier) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_POSTFOURIER, postFourier);
  }
  void add_sampleType(::flatbuffers::Offset<::flatbuffers::String> sampleType) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SAMPLETYPE, sampleType);
  }
  void add_bitDepth(int32_t bitDepth) {
    fbb_.AddElement<int32_t>(GNSSRawIF_Full::VT_BITDEPTH, bitDepth, 0);
  }
  void add_diffCodeBias(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diffCodeBias) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_DIFFCODEBIAS, diffCodeBias);
  }
  void add_dataRate(double dataRate) {
    fbb_.AddElement<double>(GNSSRawIF_Full::VT_DATARATE, dataRate, 0.0);
  }
  void add_setId(::flatbuffers::Offset<::flatbuffers::String> setId) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SETID, setId);
  }
  void add_setLength(int32_t setLength) {
    fbb_.AddElement<int32_t>(GNSSRawIF_Full::VT_SETLENGTH, setLength, 0);
  }
  void add_sequenceID(int32_t sequenceID) {
    fbb_.AddElement<int32_t>(GNSSRawIF_Full::VT_SEQUENCEID, sequenceID, 0);
  }
  void add_fileName(::flatbuffers::Offset<::flatbuffers::String> fileName) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_FILENAME, fileName);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SRCIDS, srcIds);
  }
  void add_fileSize(int64_t fileSize) {
    fbb_.AddElement<int64_t>(GNSSRawIF_Full::VT_FILESIZE, fileSize, 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_TAGS, tags);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(GNSSRawIF_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(GNSSRawIF_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(GNSSRawIF_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit GNSSRawIF_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GNSSRawIF_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GNSSRawIF_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GNSSRawIF_Full> CreateGNSSRawIF_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> esId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiver = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> boresight = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quat = 0,
    int32_t startIndex = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    double startLat = 0.0,
    double startLon = 0.0,
    double startAlt = 0.0,
    double endLat = 0.0,
    double endLon = 0.0,
    double endAlt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> centerFreq = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ifFreq = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sampleRate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> postFourier = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sampleType = 0,
    int32_t bitDepth = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> diffCodeBias = 0,
    double dataRate = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> setId = 0,
    int32_t setLength = 0,
    int32_t sequenceID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fileName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    int64_t fileSize = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    GNSSRawIF_Full_dataMode_Enum dataMode = GNSSRawIF_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  GNSSRawIF_FullBuilder builder_(_fbb);
  builder_.add_fileSize(fileSize);
  builder_.add_dataRate(dataRate);
  builder_.add_endAlt(endAlt);
  builder_.add_endLon(endLon);
  builder_.add_endLat(endLat);
  builder_.add_startAlt(startAlt);
  builder_.add_startLon(startLon);
  builder_.add_startLat(startLat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_tags(tags);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_fileName(fileName);
  builder_.add_sequenceID(sequenceID);
  builder_.add_setLength(setLength);
  builder_.add_setId(setId);
  builder_.add_diffCodeBias(diffCodeBias);
  builder_.add_bitDepth(bitDepth);
  builder_.add_sampleType(sampleType);
  builder_.add_postFourier(postFourier);
  builder_.add_sampleRate(sampleRate);
  builder_.add_ifFreq(ifFreq);
  builder_.add_centerFreq(centerFreq);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_startIndex(startIndex);
  builder_.add_quat(quat);
  builder_.add_boresight(boresight);
  builder_.add_receiver(receiver);
  builder_.add_esId(esId);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GNSSRawIF_Full> CreateGNSSRawIF_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *esId = nullptr,
    const char *receiver = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *boresight = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *quat = nullptr,
    int32_t startIndex = 0,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    double startLat = 0.0,
    double startLon = 0.0,
    double startAlt = 0.0,
    double endLat = 0.0,
    double endLon = 0.0,
    double endAlt = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *centerFreq = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ifFreq = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sampleRate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *postFourier = nullptr,
    const char *sampleType = nullptr,
    int32_t bitDepth = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *diffCodeBias = nullptr,
    double dataRate = 0.0,
    const char *setId = nullptr,
    int32_t setLength = 0,
    int32_t sequenceID = 0,
    const char *fileName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    int64_t fileSize = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    GNSSRawIF_Full_dataMode_Enum dataMode = GNSSRawIF_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto esId__ = esId ? _fbb.CreateString(esId) : 0;
  auto receiver__ = receiver ? _fbb.CreateString(receiver) : 0;
  auto boresight__ = boresight ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*boresight) : 0;
  auto quat__ = quat ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*quat) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto centerFreq__ = centerFreq ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*centerFreq) : 0;
  auto ifFreq__ = ifFreq ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ifFreq) : 0;
  auto sampleRate__ = sampleRate ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sampleRate) : 0;
  auto postFourier__ = postFourier ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*postFourier) : 0;
  auto sampleType__ = sampleType ? _fbb.CreateString(sampleType) : 0;
  auto diffCodeBias__ = diffCodeBias ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*diffCodeBias) : 0;
  auto setId__ = setId ? _fbb.CreateString(setId) : 0;
  auto fileName__ = fileName ? _fbb.CreateString(fileName) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateGNSSRawIF_Full(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      esId__,
      receiver__,
      boresight__,
      quat__,
      startIndex,
      startTime__,
      endTime__,
      startLat,
      startLon,
      startAlt,
      endLat,
      endLon,
      endAlt,
      centerFreq__,
      ifFreq__,
      sampleRate__,
      postFourier__,
      sampleType__,
      bitDepth,
      diffCodeBias__,
      dataRate,
      setId__,
      setLength,
      sequenceID,
      fileName__,
      srcTyps__,
      srcIds__,
      fileSize,
      tags__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const GNSSRawIF_Full *GetGNSSRawIF_Full(const void *buf) {
  return ::flatbuffers::GetRoot<GNSSRawIF_Full>(buf);
}

inline const GNSSRawIF_Full *GetSizePrefixedGNSSRawIF_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GNSSRawIF_Full>(buf);
}

inline const char *GNSSRawIF_FullIdentifier() {
  return "GNSS";
}

inline bool GNSSRawIF_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSRawIF_FullIdentifier());
}

inline bool SizePrefixedGNSSRawIF_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSRawIF_FullIdentifier(), true);
}

inline bool VerifyGNSSRawIF_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GNSSRawIF_Full>(GNSSRawIF_FullIdentifier());
}

inline bool VerifySizePrefixedGNSSRawIF_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GNSSRawIF_Full>(GNSSRawIF_FullIdentifier());
}

inline void FinishGNSSRawIF_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSRawIF_Full> root) {
  fbb.Finish(root, GNSSRawIF_FullIdentifier());
}

inline void FinishSizePrefixedGNSSRawIF_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSRawIF_Full> root) {
  fbb.FinishSizePrefixed(root, GNSSRawIF_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
