// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkVoiceCoord_Abridged;
struct DataLinkVoiceCoord_AbridgedBuilder;

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
struct DataLinkVoiceCoord_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkVoiceCoord_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VOICENETDES = 4,
    VT_FREQDES = 6,
    VT_COMMPRI = 8,
    VT_TELEFREQNUMS = 10
  };
  /// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *voiceNetDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VOICENETDES);
  }
  /// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *freqDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREQDES);
  }
  /// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *commPri() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMPRI);
  }
  /// Array of telephone numbers or contact frequencies used for interface control for this data link message.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *teleFreqNums() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TELEFREQNUMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VOICENETDES) &&
           verifier.VerifyString(voiceNetDes()) &&
           VerifyOffset(verifier, VT_FREQDES) &&
           verifier.VerifyString(freqDes()) &&
           VerifyOffset(verifier, VT_COMMPRI) &&
           verifier.VerifyString(commPri()) &&
           VerifyOffset(verifier, VT_TELEFREQNUMS) &&
           verifier.VerifyVector(teleFreqNums()) &&
           verifier.VerifyVectorOfStrings(teleFreqNums()) &&
           verifier.EndTable();
  }
};

struct DataLinkVoiceCoord_AbridgedBuilder {
  typedef DataLinkVoiceCoord_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_voiceNetDes(::flatbuffers::Offset<::flatbuffers::String> voiceNetDes) {
    fbb_.AddOffset(DataLinkVoiceCoord_Abridged::VT_VOICENETDES, voiceNetDes);
  }
  void add_freqDes(::flatbuffers::Offset<::flatbuffers::String> freqDes) {
    fbb_.AddOffset(DataLinkVoiceCoord_Abridged::VT_FREQDES, freqDes);
  }
  void add_commPri(::flatbuffers::Offset<::flatbuffers::String> commPri) {
    fbb_.AddOffset(DataLinkVoiceCoord_Abridged::VT_COMMPRI, commPri);
  }
  void add_teleFreqNums(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> teleFreqNums) {
    fbb_.AddOffset(DataLinkVoiceCoord_Abridged::VT_TELEFREQNUMS, teleFreqNums);
  }
  explicit DataLinkVoiceCoord_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged> CreateDataLinkVoiceCoord_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> voiceNetDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> freqDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commPri = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> teleFreqNums = 0) {
  DataLinkVoiceCoord_AbridgedBuilder builder_(_fbb);
  builder_.add_teleFreqNums(teleFreqNums);
  builder_.add_commPri(commPri);
  builder_.add_freqDes(freqDes);
  builder_.add_voiceNetDes(voiceNetDes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged> CreateDataLinkVoiceCoord_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *voiceNetDes = nullptr,
    const char *freqDes = nullptr,
    const char *commPri = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *teleFreqNums = nullptr) {
  auto voiceNetDes__ = voiceNetDes ? _fbb.CreateString(voiceNetDes) : 0;
  auto freqDes__ = freqDes ? _fbb.CreateString(freqDes) : 0;
  auto commPri__ = commPri ? _fbb.CreateString(commPri) : 0;
  auto teleFreqNums__ = teleFreqNums ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*teleFreqNums) : 0;
  return CreateDataLinkVoiceCoord_Abridged(
      _fbb,
      voiceNetDes__,
      freqDes__,
      commPri__,
      teleFreqNums__);
}

inline const DataLinkVoiceCoord_Abridged *GetDataLinkVoiceCoord_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkVoiceCoord_Abridged>(buf);
}

inline const DataLinkVoiceCoord_Abridged *GetSizePrefixedDataLinkVoiceCoord_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkVoiceCoord_Abridged>(buf);
}

inline const char *DataLinkVoiceCoord_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLinkVoiceCoord_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkVoiceCoord_AbridgedIdentifier());
}

inline bool SizePrefixedDataLinkVoiceCoord_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkVoiceCoord_AbridgedIdentifier(), true);
}

inline bool VerifyDataLinkVoiceCoord_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkVoiceCoord_Abridged>(DataLinkVoiceCoord_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLinkVoiceCoord_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkVoiceCoord_Abridged>(DataLinkVoiceCoord_AbridgedIdentifier());
}

inline void FinishDataLinkVoiceCoord_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged> root) {
  fbb.Finish(root, DataLinkVoiceCoord_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLinkVoiceCoord_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkVoiceCoord_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLinkVoiceCoord_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
