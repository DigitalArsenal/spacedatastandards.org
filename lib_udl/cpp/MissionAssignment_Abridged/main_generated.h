// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MissionAssignment_Abridged;
struct MissionAssignment_AbridgedBuilder;

enum MissionAssignment_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  MissionAssignment_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  MissionAssignment_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  MissionAssignment_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  MissionAssignment_Abridged_dataMode_Enum_EXERCISE = 3,
  MissionAssignment_Abridged_dataMode_Enum_MIN = MissionAssignment_Abridged_dataMode_Enum_REAL,
  MissionAssignment_Abridged_dataMode_Enum_MAX = MissionAssignment_Abridged_dataMode_Enum_EXERCISE
};

inline const MissionAssignment_Abridged_dataMode_Enum (&EnumValuesMissionAssignment_Abridged_dataMode_Enum())[4] {
  static const MissionAssignment_Abridged_dataMode_Enum values[] = {
    MissionAssignment_Abridged_dataMode_Enum_REAL,
    MissionAssignment_Abridged_dataMode_Enum_TEST,
    MissionAssignment_Abridged_dataMode_Enum_SIMULATED,
    MissionAssignment_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesMissionAssignment_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameMissionAssignment_Abridged_dataMode_Enum(MissionAssignment_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, MissionAssignment_Abridged_dataMode_Enum_REAL, MissionAssignment_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMissionAssignment_Abridged_dataMode_Enum()[index];
}

/// /// Platform mission assignment data.
struct MissionAssignment_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MissionAssignment_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_TRKID = 8,
    VT_TS = 10,
    VT_MAD = 12,
    VT_RC = 14,
    VT_RR = 16,
    VT_TNO = 18,
    VT_TWENV = 20,
    VT_LAT = 22,
    VT_LON = 24,
    VT_ORGINX = 26,
    VT_ENV = 28,
    VT_SZ = 30,
    VT_INDEX = 32,
    VT_C1ASSOCIATEDDMPIS = 34,
    VT_C2SPC = 36,
    VT_C2AIR = 38,
    VT_C2SUR = 40,
    VT_C2LND = 42,
    VT_C2ID = 44,
    VT_C2IDAMPLIFYINGDESCRIPTOR = 46,
    VT_C2ALT = 48,
    VT_C2CRS = 50,
    VT_C2SPD = 52,
    VT_C2SPECIALINTERESTINDICATOR = 54,
    VT_C2EXERCISEINDICATOR = 56,
    VT_C2EXERCISEMOF = 58,
    VT_C3LAT = 60,
    VT_C3LON = 62,
    VT_C3ELV = 64,
    VT_C3PTL = 66,
    VT_C3PTNUM = 68,
    VT_C4TGT = 70,
    VT_C4DEF = 72,
    VT_C4RUNIN = 74,
    VT_C4EGRESS = 76,
    VT_C4NUMBEROFSTORES = 78,
    VT_C4TYPEOFSTORES = 80,
    VT_C4TIMEDISCRETE = 82,
    VT_C4TM = 84,
    VT_C4COLON = 86,
    VT_C4MOD = 88,
    VT_C5HAEADJ = 90,
    VT_C5TW = 92,
    VT_C5TGTBRNG = 94,
    VT_C5LATLSB = 96,
    VT_C5LONLSB = 98,
    VT_C5ELEVATIONLSBS = 100,
    VT_C5COLON = 102,
    VT_C6LASER = 104,
    VT_C6INTEL = 106,
    VT_C6TNR3 = 108,
    VT_C6DSPCT = 110,
    VT_C6DSPC = 112,
    VT_C6FPLPM = 114,
    VT_C6LONGPM = 116,
    VT_C7TNOR = 118,
    VT_C7IN3P = 120,
    VT_C7ELANG2 = 122,
    VT_CREATEDAT = 124,
    VT_CREATEDBY = 126,
    VT_SOURCE = 128,
    VT_ORIGIN = 130,
    VT_DATAMODE = 132,
    VT_ORIGNETWORK = 134
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MISSIONASSIGNMENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The track ID that the status is referencing, addressee.
  /// Example: /// Example: TRK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKID);
  }
  /// The timestamp of the mission data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// The mission assignment discrete value.
  /// Example: /// Example: MAD
  /// Constraints: Minimum length = 1, Maximum length = 16
  const ::flatbuffers::String *mad() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAD);
  }
  /// Receipt/Compliance, values from TABLE B-9.
  /// Example: /// Example: RC-123
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *rc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RC);
  }
  /// Recurrence rate, receipt/compliance.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t rr() const {
    return GetField<int32_t>(VT_RR, 0);
  }
  /// Track number objective.
  /// Example: /// Example: TRACK_NUMBER
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *tno() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TNO);
  }
  /// Threat warning environment.
  /// Example: /// Example: THREAT_WARNING
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *twenv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TWENV);
  }
  /// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Origin of index number.
  /// Example: /// Example: ORIGIN
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *orginx() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORGINX);
  }
  /// Environment.
  /// Example: /// Example: ENV
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *env() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENV);
  }
  /// Strength.
  /// Example: /// Example: STRENGTH
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *sz() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SZ);
  }
  /// Index number.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t index() const {
    return GetField<int32_t>(VT_INDEX, 0);
  }
  /// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c1associateddmpis() const {
    return GetField<int32_t>(VT_C1ASSOCIATEDDMPIS, 0);
  }
  /// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
  /// Example: /// Example: C2SPC
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *c2spc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2SPC);
  }
  /// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
  /// Example: /// Example: C2AIR
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *c2air() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2AIR);
  }
  /// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
  /// Example: /// Example: C2SUR
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *c2sur() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2SUR);
  }
  /// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
  /// Example: /// Example: C2LND
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *c2lnd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2LND);
  }
  /// TARGET DATA CONTINUATION WORD - identity.
  /// Example: /// Example: C2ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c2id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2ID);
  }
  /// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
  /// Example: /// Example: C2IDAMP
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c2idamplifyingdescriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2IDAMPLIFYINGDESCRIPTOR);
  }
  /// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c2alt() const {
    return GetField<int32_t>(VT_C2ALT, 0);
  }
  /// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c2crs() const {
    return GetField<int32_t>(VT_C2CRS, 0);
  }
  /// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c2spd() const {
    return GetField<int32_t>(VT_C2SPD, 0);
  }
  /// TARGET DATA CONTINUATION WORD - special interest indicator.
  /// Example: /// Example: C2SPECIAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c2specialinterestindicator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2SPECIALINTERESTINDICATOR);
  }
  /// TARGET DATA CONTINUATION WORD - exercise indicator.
  /// Example: /// Example: C2EXERCISE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c2exerciseindicator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2EXERCISEINDICATOR);
  }
  /// TARGET DATA CONTINUATION WORD - method of fire.
  /// Example: /// Example: MOF
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c2exercisemof() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C2EXERCISEMOF);
  }
  /// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double c3lat() const {
    return GetField<double>(VT_C3LAT, 0.0);
  }
  /// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double c3lon() const {
    return GetField<double>(VT_C3LON, 0.0);
  }
  /// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double c3elv() const {
    return GetField<double>(VT_C3ELV, 0.0);
  }
  /// TARGET DATA CONTINUATION WORD - point type 1.
  /// Example: /// Example: C3PTL
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c3ptl() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C3PTL);
  }
  /// TARGET DATA CONTINUATION WORD - point number.
  /// Example: /// Example: C3PTNUM
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c3ptnum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C3PTNUM);
  }
  /// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
  /// Example: /// Example: C4TGT
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c4tgt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C4TGT);
  }
  /// SURFACE ATTACK CONTINUATION WORD - target defenses.
  /// Example: /// Example: C4DEF
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c4def() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C4DEF);
  }
  /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c4runin() const {
    return GetField<int32_t>(VT_C4RUNIN, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t c4egress() const {
    return GetField<int32_t>(VT_C4EGRESS, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c4numberofstores() const {
    return GetField<int32_t>(VT_C4NUMBEROFSTORES, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - type of stores.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t c4typeofstores() const {
    return GetField<int32_t>(VT_C4TYPEOFSTORES, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - time discrete.
  /// Example: /// Example: C4TIMED
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c4timediscrete() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C4TIMEDISCRETE);
  }
  /// SURFACE ATTACK CONTINUATION WORD - hour.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t c4tm() const {
    return GetField<int32_t>(VT_C4TM, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - minute.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c4colon() const {
    return GetField<int32_t>(VT_C4COLON, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c4mod() const {
    return GetField<int32_t>(VT_C4MOD, 0);
  }
  /// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5haeadj() const {
    return GetField<int32_t>(VT_C5HAEADJ, 0);
  }
  /// CONTINUATION WORD - time window.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5tw() const {
    return GetField<int32_t>(VT_C5TW, 0);
  }
  /// CONTINUATION WORD - target bearing.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5tgtbrng() const {
    return GetField<int32_t>(VT_C5TGTBRNG, 0);
  }
  /// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5latlsb() const {
    return GetField<int32_t>(VT_C5LATLSB, 0);
  }
  /// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5lonlsb() const {
    return GetField<int32_t>(VT_C5LONLSB, 0);
  }
  /// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5elevationlsbs() const {
    return GetField<int32_t>(VT_C5ELEVATIONLSBS, 0);
  }
  /// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c5colon() const {
    return GetField<int32_t>(VT_C5COLON, 0);
  }
  /// TARGETING CONTINUATION WORD - laser illuminator code.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c6laser() const {
    return GetField<int32_t>(VT_C6LASER, 0);
  }
  /// TARGETING CONTINUATION WORD - index number, related, 0=NS.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c6intel() const {
    return GetField<int32_t>(VT_C6INTEL, 0);
  }
  /// TARGETING CONTINUATION WORD - track number, related to 3.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t c6tnr3() const {
    return GetField<int32_t>(VT_C6TNR3, 0);
  }
  /// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
  /// Example: /// Example: C6DSPCT
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c6dspct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C6DSPCT);
  }
  /// TARGETING CONTINUATION WORD - designator/seeker pulse code.
  /// Example: /// Example: C6DSPC
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c6dspc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C6DSPC);
  }
  /// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
  /// Example: /// Example: C6FPLPM
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c6fplpm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C6FPLPM);
  }
  /// TARGETING CONTINUATION WORD - long pulse mode.
  /// Example: /// Example: C6LONGPM
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *c6longpm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C6LONGPM);
  }
  /// THIRD PARTY CONTINUATION WORD  - track number, index originator.
  /// Example: /// Example: C7TNOR
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *c7tnor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_C7TNOR);
  }
  /// THIRD PARTY CONTINUATION WORD  - index number, third party.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t c7in3p() const {
    return GetField<int32_t>(VT_C7IN3P, 0);
  }
  /// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double c7elang2() const {
    return GetField<double>(VT_C7ELANG2, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  MissionAssignment_Abridged_dataMode_Enum dataMode() const {
    return static_cast<MissionAssignment_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TRKID) &&
           verifier.VerifyString(trkId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyOffset(verifier, VT_MAD) &&
           verifier.VerifyString(mad()) &&
           VerifyOffset(verifier, VT_RC) &&
           verifier.VerifyString(rc()) &&
           VerifyField<int32_t>(verifier, VT_RR, 4) &&
           VerifyOffset(verifier, VT_TNO) &&
           verifier.VerifyString(tno()) &&
           VerifyOffset(verifier, VT_TWENV) &&
           verifier.VerifyString(twenv()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_ORGINX) &&
           verifier.VerifyString(orginx()) &&
           VerifyOffset(verifier, VT_ENV) &&
           verifier.VerifyString(env()) &&
           VerifyOffset(verifier, VT_SZ) &&
           verifier.VerifyString(sz()) &&
           VerifyField<int32_t>(verifier, VT_INDEX, 4) &&
           VerifyField<int32_t>(verifier, VT_C1ASSOCIATEDDMPIS, 4) &&
           VerifyOffset(verifier, VT_C2SPC) &&
           verifier.VerifyString(c2spc()) &&
           VerifyOffset(verifier, VT_C2AIR) &&
           verifier.VerifyString(c2air()) &&
           VerifyOffset(verifier, VT_C2SUR) &&
           verifier.VerifyString(c2sur()) &&
           VerifyOffset(verifier, VT_C2LND) &&
           verifier.VerifyString(c2lnd()) &&
           VerifyOffset(verifier, VT_C2ID) &&
           verifier.VerifyString(c2id()) &&
           VerifyOffset(verifier, VT_C2IDAMPLIFYINGDESCRIPTOR) &&
           verifier.VerifyString(c2idamplifyingdescriptor()) &&
           VerifyField<int32_t>(verifier, VT_C2ALT, 4) &&
           VerifyField<int32_t>(verifier, VT_C2CRS, 4) &&
           VerifyField<int32_t>(verifier, VT_C2SPD, 4) &&
           VerifyOffset(verifier, VT_C2SPECIALINTERESTINDICATOR) &&
           verifier.VerifyString(c2specialinterestindicator()) &&
           VerifyOffset(verifier, VT_C2EXERCISEINDICATOR) &&
           verifier.VerifyString(c2exerciseindicator()) &&
           VerifyOffset(verifier, VT_C2EXERCISEMOF) &&
           verifier.VerifyString(c2exercisemof()) &&
           VerifyField<double>(verifier, VT_C3LAT, 8) &&
           VerifyField<double>(verifier, VT_C3LON, 8) &&
           VerifyField<double>(verifier, VT_C3ELV, 8) &&
           VerifyOffset(verifier, VT_C3PTL) &&
           verifier.VerifyString(c3ptl()) &&
           VerifyOffset(verifier, VT_C3PTNUM) &&
           verifier.VerifyString(c3ptnum()) &&
           VerifyOffset(verifier, VT_C4TGT) &&
           verifier.VerifyString(c4tgt()) &&
           VerifyOffset(verifier, VT_C4DEF) &&
           verifier.VerifyString(c4def()) &&
           VerifyField<int32_t>(verifier, VT_C4RUNIN, 4) &&
           VerifyField<int32_t>(verifier, VT_C4EGRESS, 4) &&
           VerifyField<int32_t>(verifier, VT_C4NUMBEROFSTORES, 4) &&
           VerifyField<int32_t>(verifier, VT_C4TYPEOFSTORES, 4) &&
           VerifyOffset(verifier, VT_C4TIMEDISCRETE) &&
           verifier.VerifyString(c4timediscrete()) &&
           VerifyField<int32_t>(verifier, VT_C4TM, 4) &&
           VerifyField<int32_t>(verifier, VT_C4COLON, 4) &&
           VerifyField<int32_t>(verifier, VT_C4MOD, 4) &&
           VerifyField<int32_t>(verifier, VT_C5HAEADJ, 4) &&
           VerifyField<int32_t>(verifier, VT_C5TW, 4) &&
           VerifyField<int32_t>(verifier, VT_C5TGTBRNG, 4) &&
           VerifyField<int32_t>(verifier, VT_C5LATLSB, 4) &&
           VerifyField<int32_t>(verifier, VT_C5LONLSB, 4) &&
           VerifyField<int32_t>(verifier, VT_C5ELEVATIONLSBS, 4) &&
           VerifyField<int32_t>(verifier, VT_C5COLON, 4) &&
           VerifyField<int32_t>(verifier, VT_C6LASER, 4) &&
           VerifyField<int32_t>(verifier, VT_C6INTEL, 4) &&
           VerifyField<int32_t>(verifier, VT_C6TNR3, 4) &&
           VerifyOffset(verifier, VT_C6DSPCT) &&
           verifier.VerifyString(c6dspct()) &&
           VerifyOffset(verifier, VT_C6DSPC) &&
           verifier.VerifyString(c6dspc()) &&
           VerifyOffset(verifier, VT_C6FPLPM) &&
           verifier.VerifyString(c6fplpm()) &&
           VerifyOffset(verifier, VT_C6LONGPM) &&
           verifier.VerifyString(c6longpm()) &&
           VerifyOffset(verifier, VT_C7TNOR) &&
           verifier.VerifyString(c7tnor()) &&
           VerifyField<int32_t>(verifier, VT_C7IN3P, 4) &&
           VerifyField<double>(verifier, VT_C7ELANG2, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct MissionAssignment_AbridgedBuilder {
  typedef MissionAssignment_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_trkId(::flatbuffers::Offset<::flatbuffers::String> trkId) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_TRKID, trkId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_TS, ts);
  }
  void add_mad(::flatbuffers::Offset<::flatbuffers::String> mad) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_MAD, mad);
  }
  void add_rc(::flatbuffers::Offset<::flatbuffers::String> rc) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_RC, rc);
  }
  void add_rr(int32_t rr) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_RR, rr, 0);
  }
  void add_tno(::flatbuffers::Offset<::flatbuffers::String> tno) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_TNO, tno);
  }
  void add_twenv(::flatbuffers::Offset<::flatbuffers::String> twenv) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_TWENV, twenv);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_LON, lon, 0.0);
  }
  void add_orginx(::flatbuffers::Offset<::flatbuffers::String> orginx) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_ORGINX, orginx);
  }
  void add_env(::flatbuffers::Offset<::flatbuffers::String> env) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_ENV, env);
  }
  void add_sz(::flatbuffers::Offset<::flatbuffers::String> sz) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_SZ, sz);
  }
  void add_index(int32_t index) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_INDEX, index, 0);
  }
  void add_c1associateddmpis(int32_t c1associateddmpis) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C1ASSOCIATEDDMPIS, c1associateddmpis, 0);
  }
  void add_c2spc(::flatbuffers::Offset<::flatbuffers::String> c2spc) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2SPC, c2spc);
  }
  void add_c2air(::flatbuffers::Offset<::flatbuffers::String> c2air) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2AIR, c2air);
  }
  void add_c2sur(::flatbuffers::Offset<::flatbuffers::String> c2sur) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2SUR, c2sur);
  }
  void add_c2lnd(::flatbuffers::Offset<::flatbuffers::String> c2lnd) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2LND, c2lnd);
  }
  void add_c2id(::flatbuffers::Offset<::flatbuffers::String> c2id) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2ID, c2id);
  }
  void add_c2idamplifyingdescriptor(::flatbuffers::Offset<::flatbuffers::String> c2idamplifyingdescriptor) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2IDAMPLIFYINGDESCRIPTOR, c2idamplifyingdescriptor);
  }
  void add_c2alt(int32_t c2alt) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C2ALT, c2alt, 0);
  }
  void add_c2crs(int32_t c2crs) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C2CRS, c2crs, 0);
  }
  void add_c2spd(int32_t c2spd) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C2SPD, c2spd, 0);
  }
  void add_c2specialinterestindicator(::flatbuffers::Offset<::flatbuffers::String> c2specialinterestindicator) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2SPECIALINTERESTINDICATOR, c2specialinterestindicator);
  }
  void add_c2exerciseindicator(::flatbuffers::Offset<::flatbuffers::String> c2exerciseindicator) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2EXERCISEINDICATOR, c2exerciseindicator);
  }
  void add_c2exercisemof(::flatbuffers::Offset<::flatbuffers::String> c2exercisemof) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C2EXERCISEMOF, c2exercisemof);
  }
  void add_c3lat(double c3lat) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_C3LAT, c3lat, 0.0);
  }
  void add_c3lon(double c3lon) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_C3LON, c3lon, 0.0);
  }
  void add_c3elv(double c3elv) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_C3ELV, c3elv, 0.0);
  }
  void add_c3ptl(::flatbuffers::Offset<::flatbuffers::String> c3ptl) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C3PTL, c3ptl);
  }
  void add_c3ptnum(::flatbuffers::Offset<::flatbuffers::String> c3ptnum) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C3PTNUM, c3ptnum);
  }
  void add_c4tgt(::flatbuffers::Offset<::flatbuffers::String> c4tgt) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C4TGT, c4tgt);
  }
  void add_c4def(::flatbuffers::Offset<::flatbuffers::String> c4def) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C4DEF, c4def);
  }
  void add_c4runin(int32_t c4runin) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4RUNIN, c4runin, 0);
  }
  void add_c4egress(int32_t c4egress) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4EGRESS, c4egress, 0);
  }
  void add_c4numberofstores(int32_t c4numberofstores) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4NUMBEROFSTORES, c4numberofstores, 0);
  }
  void add_c4typeofstores(int32_t c4typeofstores) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4TYPEOFSTORES, c4typeofstores, 0);
  }
  void add_c4timediscrete(::flatbuffers::Offset<::flatbuffers::String> c4timediscrete) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C4TIMEDISCRETE, c4timediscrete);
  }
  void add_c4tm(int32_t c4tm) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4TM, c4tm, 0);
  }
  void add_c4colon(int32_t c4colon) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4COLON, c4colon, 0);
  }
  void add_c4mod(int32_t c4mod) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C4MOD, c4mod, 0);
  }
  void add_c5haeadj(int32_t c5haeadj) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5HAEADJ, c5haeadj, 0);
  }
  void add_c5tw(int32_t c5tw) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5TW, c5tw, 0);
  }
  void add_c5tgtbrng(int32_t c5tgtbrng) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5TGTBRNG, c5tgtbrng, 0);
  }
  void add_c5latlsb(int32_t c5latlsb) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5LATLSB, c5latlsb, 0);
  }
  void add_c5lonlsb(int32_t c5lonlsb) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5LONLSB, c5lonlsb, 0);
  }
  void add_c5elevationlsbs(int32_t c5elevationlsbs) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5ELEVATIONLSBS, c5elevationlsbs, 0);
  }
  void add_c5colon(int32_t c5colon) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C5COLON, c5colon, 0);
  }
  void add_c6laser(int32_t c6laser) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C6LASER, c6laser, 0);
  }
  void add_c6intel(int32_t c6intel) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C6INTEL, c6intel, 0);
  }
  void add_c6tnr3(int32_t c6tnr3) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C6TNR3, c6tnr3, 0);
  }
  void add_c6dspct(::flatbuffers::Offset<::flatbuffers::String> c6dspct) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C6DSPCT, c6dspct);
  }
  void add_c6dspc(::flatbuffers::Offset<::flatbuffers::String> c6dspc) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C6DSPC, c6dspc);
  }
  void add_c6fplpm(::flatbuffers::Offset<::flatbuffers::String> c6fplpm) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C6FPLPM, c6fplpm);
  }
  void add_c6longpm(::flatbuffers::Offset<::flatbuffers::String> c6longpm) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C6LONGPM, c6longpm);
  }
  void add_c7tnor(::flatbuffers::Offset<::flatbuffers::String> c7tnor) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_C7TNOR, c7tnor);
  }
  void add_c7in3p(int32_t c7in3p) {
    fbb_.AddElement<int32_t>(MissionAssignment_Abridged::VT_C7IN3P, c7in3p, 0);
  }
  void add_c7elang2(double c7elang2) {
    fbb_.AddElement<double>(MissionAssignment_Abridged::VT_C7ELANG2, c7elang2, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(MissionAssignment_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(MissionAssignment_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(MissionAssignment_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit MissionAssignment_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MissionAssignment_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MissionAssignment_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MissionAssignment_Abridged> CreateMissionAssignment_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mad = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rc = 0,
    int32_t rr = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tno = 0,
    ::flatbuffers::Offset<::flatbuffers::String> twenv = 0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> orginx = 0,
    ::flatbuffers::Offset<::flatbuffers::String> env = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sz = 0,
    int32_t index = 0,
    int32_t c1associateddmpis = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2spc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2air = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2sur = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2lnd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2idamplifyingdescriptor = 0,
    int32_t c2alt = 0,
    int32_t c2crs = 0,
    int32_t c2spd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2specialinterestindicator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2exerciseindicator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c2exercisemof = 0,
    double c3lat = 0.0,
    double c3lon = 0.0,
    double c3elv = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> c3ptl = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c3ptnum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c4tgt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c4def = 0,
    int32_t c4runin = 0,
    int32_t c4egress = 0,
    int32_t c4numberofstores = 0,
    int32_t c4typeofstores = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c4timediscrete = 0,
    int32_t c4tm = 0,
    int32_t c4colon = 0,
    int32_t c4mod = 0,
    int32_t c5haeadj = 0,
    int32_t c5tw = 0,
    int32_t c5tgtbrng = 0,
    int32_t c5latlsb = 0,
    int32_t c5lonlsb = 0,
    int32_t c5elevationlsbs = 0,
    int32_t c5colon = 0,
    int32_t c6laser = 0,
    int32_t c6intel = 0,
    int32_t c6tnr3 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c6dspct = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c6dspc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c6fplpm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c6longpm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> c7tnor = 0,
    int32_t c7in3p = 0,
    double c7elang2 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    MissionAssignment_Abridged_dataMode_Enum dataMode = MissionAssignment_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  MissionAssignment_AbridgedBuilder builder_(_fbb);
  builder_.add_c7elang2(c7elang2);
  builder_.add_c3elv(c3elv);
  builder_.add_c3lon(c3lon);
  builder_.add_c3lat(c3lat);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_c7in3p(c7in3p);
  builder_.add_c7tnor(c7tnor);
  builder_.add_c6longpm(c6longpm);
  builder_.add_c6fplpm(c6fplpm);
  builder_.add_c6dspc(c6dspc);
  builder_.add_c6dspct(c6dspct);
  builder_.add_c6tnr3(c6tnr3);
  builder_.add_c6intel(c6intel);
  builder_.add_c6laser(c6laser);
  builder_.add_c5colon(c5colon);
  builder_.add_c5elevationlsbs(c5elevationlsbs);
  builder_.add_c5lonlsb(c5lonlsb);
  builder_.add_c5latlsb(c5latlsb);
  builder_.add_c5tgtbrng(c5tgtbrng);
  builder_.add_c5tw(c5tw);
  builder_.add_c5haeadj(c5haeadj);
  builder_.add_c4mod(c4mod);
  builder_.add_c4colon(c4colon);
  builder_.add_c4tm(c4tm);
  builder_.add_c4timediscrete(c4timediscrete);
  builder_.add_c4typeofstores(c4typeofstores);
  builder_.add_c4numberofstores(c4numberofstores);
  builder_.add_c4egress(c4egress);
  builder_.add_c4runin(c4runin);
  builder_.add_c4def(c4def);
  builder_.add_c4tgt(c4tgt);
  builder_.add_c3ptnum(c3ptnum);
  builder_.add_c3ptl(c3ptl);
  builder_.add_c2exercisemof(c2exercisemof);
  builder_.add_c2exerciseindicator(c2exerciseindicator);
  builder_.add_c2specialinterestindicator(c2specialinterestindicator);
  builder_.add_c2spd(c2spd);
  builder_.add_c2crs(c2crs);
  builder_.add_c2alt(c2alt);
  builder_.add_c2idamplifyingdescriptor(c2idamplifyingdescriptor);
  builder_.add_c2id(c2id);
  builder_.add_c2lnd(c2lnd);
  builder_.add_c2sur(c2sur);
  builder_.add_c2air(c2air);
  builder_.add_c2spc(c2spc);
  builder_.add_c1associateddmpis(c1associateddmpis);
  builder_.add_index(index);
  builder_.add_sz(sz);
  builder_.add_env(env);
  builder_.add_orginx(orginx);
  builder_.add_twenv(twenv);
  builder_.add_tno(tno);
  builder_.add_rr(rr);
  builder_.add_rc(rc);
  builder_.add_mad(mad);
  builder_.add_ts(ts);
  builder_.add_trkId(trkId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MissionAssignment_Abridged> CreateMissionAssignment_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *trkId = nullptr,
    const char *ts = nullptr,
    const char *mad = nullptr,
    const char *rc = nullptr,
    int32_t rr = 0,
    const char *tno = nullptr,
    const char *twenv = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    const char *orginx = nullptr,
    const char *env = nullptr,
    const char *sz = nullptr,
    int32_t index = 0,
    int32_t c1associateddmpis = 0,
    const char *c2spc = nullptr,
    const char *c2air = nullptr,
    const char *c2sur = nullptr,
    const char *c2lnd = nullptr,
    const char *c2id = nullptr,
    const char *c2idamplifyingdescriptor = nullptr,
    int32_t c2alt = 0,
    int32_t c2crs = 0,
    int32_t c2spd = 0,
    const char *c2specialinterestindicator = nullptr,
    const char *c2exerciseindicator = nullptr,
    const char *c2exercisemof = nullptr,
    double c3lat = 0.0,
    double c3lon = 0.0,
    double c3elv = 0.0,
    const char *c3ptl = nullptr,
    const char *c3ptnum = nullptr,
    const char *c4tgt = nullptr,
    const char *c4def = nullptr,
    int32_t c4runin = 0,
    int32_t c4egress = 0,
    int32_t c4numberofstores = 0,
    int32_t c4typeofstores = 0,
    const char *c4timediscrete = nullptr,
    int32_t c4tm = 0,
    int32_t c4colon = 0,
    int32_t c4mod = 0,
    int32_t c5haeadj = 0,
    int32_t c5tw = 0,
    int32_t c5tgtbrng = 0,
    int32_t c5latlsb = 0,
    int32_t c5lonlsb = 0,
    int32_t c5elevationlsbs = 0,
    int32_t c5colon = 0,
    int32_t c6laser = 0,
    int32_t c6intel = 0,
    int32_t c6tnr3 = 0,
    const char *c6dspct = nullptr,
    const char *c6dspc = nullptr,
    const char *c6fplpm = nullptr,
    const char *c6longpm = nullptr,
    const char *c7tnor = nullptr,
    int32_t c7in3p = 0,
    double c7elang2 = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    MissionAssignment_Abridged_dataMode_Enum dataMode = MissionAssignment_Abridged_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto trkId__ = trkId ? _fbb.CreateString(trkId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto mad__ = mad ? _fbb.CreateString(mad) : 0;
  auto rc__ = rc ? _fbb.CreateString(rc) : 0;
  auto tno__ = tno ? _fbb.CreateString(tno) : 0;
  auto twenv__ = twenv ? _fbb.CreateString(twenv) : 0;
  auto orginx__ = orginx ? _fbb.CreateString(orginx) : 0;
  auto env__ = env ? _fbb.CreateString(env) : 0;
  auto sz__ = sz ? _fbb.CreateString(sz) : 0;
  auto c2spc__ = c2spc ? _fbb.CreateString(c2spc) : 0;
  auto c2air__ = c2air ? _fbb.CreateString(c2air) : 0;
  auto c2sur__ = c2sur ? _fbb.CreateString(c2sur) : 0;
  auto c2lnd__ = c2lnd ? _fbb.CreateString(c2lnd) : 0;
  auto c2id__ = c2id ? _fbb.CreateString(c2id) : 0;
  auto c2idamplifyingdescriptor__ = c2idamplifyingdescriptor ? _fbb.CreateString(c2idamplifyingdescriptor) : 0;
  auto c2specialinterestindicator__ = c2specialinterestindicator ? _fbb.CreateString(c2specialinterestindicator) : 0;
  auto c2exerciseindicator__ = c2exerciseindicator ? _fbb.CreateString(c2exerciseindicator) : 0;
  auto c2exercisemof__ = c2exercisemof ? _fbb.CreateString(c2exercisemof) : 0;
  auto c3ptl__ = c3ptl ? _fbb.CreateString(c3ptl) : 0;
  auto c3ptnum__ = c3ptnum ? _fbb.CreateString(c3ptnum) : 0;
  auto c4tgt__ = c4tgt ? _fbb.CreateString(c4tgt) : 0;
  auto c4def__ = c4def ? _fbb.CreateString(c4def) : 0;
  auto c4timediscrete__ = c4timediscrete ? _fbb.CreateString(c4timediscrete) : 0;
  auto c6dspct__ = c6dspct ? _fbb.CreateString(c6dspct) : 0;
  auto c6dspc__ = c6dspc ? _fbb.CreateString(c6dspc) : 0;
  auto c6fplpm__ = c6fplpm ? _fbb.CreateString(c6fplpm) : 0;
  auto c6longpm__ = c6longpm ? _fbb.CreateString(c6longpm) : 0;
  auto c7tnor__ = c7tnor ? _fbb.CreateString(c7tnor) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateMissionAssignment_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      trkId__,
      ts__,
      mad__,
      rc__,
      rr,
      tno__,
      twenv__,
      lat,
      lon,
      orginx__,
      env__,
      sz__,
      index,
      c1associateddmpis,
      c2spc__,
      c2air__,
      c2sur__,
      c2lnd__,
      c2id__,
      c2idamplifyingdescriptor__,
      c2alt,
      c2crs,
      c2spd,
      c2specialinterestindicator__,
      c2exerciseindicator__,
      c2exercisemof__,
      c3lat,
      c3lon,
      c3elv,
      c3ptl__,
      c3ptnum__,
      c4tgt__,
      c4def__,
      c4runin,
      c4egress,
      c4numberofstores,
      c4typeofstores,
      c4timediscrete__,
      c4tm,
      c4colon,
      c4mod,
      c5haeadj,
      c5tw,
      c5tgtbrng,
      c5latlsb,
      c5lonlsb,
      c5elevationlsbs,
      c5colon,
      c6laser,
      c6intel,
      c6tnr3,
      c6dspct__,
      c6dspc__,
      c6fplpm__,
      c6longpm__,
      c7tnor__,
      c7in3p,
      c7elang2,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const MissionAssignment_Abridged *GetMissionAssignment_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<MissionAssignment_Abridged>(buf);
}

inline const MissionAssignment_Abridged *GetSizePrefixedMissionAssignment_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MissionAssignment_Abridged>(buf);
}

inline const char *MissionAssignment_AbridgedIdentifier() {
  return "MISS";
}

inline bool MissionAssignment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MissionAssignment_AbridgedIdentifier());
}

inline bool SizePrefixedMissionAssignment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MissionAssignment_AbridgedIdentifier(), true);
}

inline bool VerifyMissionAssignment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MissionAssignment_Abridged>(MissionAssignment_AbridgedIdentifier());
}

inline bool VerifySizePrefixedMissionAssignment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MissionAssignment_Abridged>(MissionAssignment_AbridgedIdentifier());
}

inline void FinishMissionAssignment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MissionAssignment_Abridged> root) {
  fbb.Finish(root, MissionAssignment_AbridgedIdentifier());
}

inline void FinishSizePrefixedMissionAssignment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MissionAssignment_Abridged> root) {
  fbb.FinishSizePrefixed(root, MissionAssignment_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
