// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EffectResponse_Full;
struct EffectResponse_FullBuilder;

enum EffectResponse_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EffectResponse_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EffectResponse_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EffectResponse_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EffectResponse_Full_dataMode_Enum_EXERCISE = 3,
  EffectResponse_Full_dataMode_Enum_MIN = EffectResponse_Full_dataMode_Enum_REAL,
  EffectResponse_Full_dataMode_Enum_MAX = EffectResponse_Full_dataMode_Enum_EXERCISE
};

inline const EffectResponse_Full_dataMode_Enum (&EnumValuesEffectResponse_Full_dataMode_Enum())[4] {
  static const EffectResponse_Full_dataMode_Enum values[] = {
    EffectResponse_Full_dataMode_Enum_REAL,
    EffectResponse_Full_dataMode_Enum_TEST,
    EffectResponse_Full_dataMode_Enum_SIMULATED,
    EffectResponse_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEffectResponse_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEffectResponse_Full_dataMode_Enum(EffectResponse_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EffectResponse_Full_dataMode_Enum_REAL, EffectResponse_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEffectResponse_Full_dataMode_Enum()[index];
}

/// /// A response for various effects on a target.
struct EffectResponse_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EffectResponse_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDEFFECTREQUEST = 8,
    VT_EXTERNALREQUESTID = 10,
    VT_TYPE = 12,
    VT_ACTORSRCTYPE = 14,
    VT_ACTORSRCID = 16,
    VT_MUNITIONTYPE = 18,
    VT_MUNITIONID = 20,
    VT_SHOTSREQUIRED = 22,
    VT_PROBABILITYOFKILL = 24,
    VT_COLLATERALDAMAGEEST = 26,
    VT_ACTIONSLIST = 28,
    VT_EXTERNALACTIONS = 30,
    VT_COAMETRICS = 32,
    VT_REDTIMETOOVERHEAD = 34,
    VT_DECISIONDEADLINE = 36,
    VT_REDTARGETSRCTYPE = 38,
    VT_REDTARGETSRCID = 40,
    VT_CREATEDAT = 42,
    VT_CREATEDBY = 44,
    VT_SOURCE = 46,
    VT_ORIGIN = 48,
    VT_DATAMODE = 50,
    VT_ORIGNETWORK = 52
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EFFECTRESPONSE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the EffectRequest associated with this response.
  /// Example: /// Example: EFFECTREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEffectRequest() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDEFFECTREQUEST);
  }
  /// The external system identifier of the associated effect request. A human readable unique id.
  /// Example: /// Example: EXTERNALREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *externalRequestId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALREQUESTID);
  }
  /// The type of response in this record (e.g. COA, SCORECARD, etc.).
  /// Example: /// Example: COA
  /// Constraints: Minimum length = 1, Maximum length = 24
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  /// Example: /// Example: AIRCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *actorSrcType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTORSRCTYPE);
  }
  /// The record ID, depending on the type identified in actorSrcType, of the requested asset.
  /// Example: /// Example: RC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *actorSrcId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTORSRCID);
  }
  /// The type of munition being fired.
  /// Example: /// Example: Dummy
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *munitionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MUNITIONTYPE);
  }
  /// Unique identifier of the munition.
  /// Example: /// Example: MUNITION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *munitionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MUNITIONID);
  }
  /// The number of shots required to destroy target.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t shotsRequired() const {
    return GetField<int32_t>(VT_SHOTSREQUIRED, 0);
  }
  /// The probability of kill (0-1) of the target being destroyed.
  /// Example: /// Example: 0.7
  /// Constraints: No constraints specified.
  double probabilityOfKill() const {
    return GetField<double>(VT_PROBABILITYOFKILL, 0.0);
  }
  /// The collateral damage estimate (CDE) of the munition being fired.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double collateralDamageEst() const {
    return GetField<double>(VT_COLLATERALDAMAGEEST, 0.0);
  }
  /// List of actions associated with this effect response.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *actionsList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACTIONSLIST);
  }
  /// List of external actions to be executed as part of this task.
  /// Example: /// Example: ['ACTION1', 'ACTION2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *externalActions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXTERNALACTIONS);
  }
  /// List of COA metrics associated with this effect response.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *coaMetrics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COAMETRICS);
  }
  /// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *redTimeToOverhead() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REDTIMETOOVERHEAD);
  }
  /// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *decisionDeadline() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DECISIONDEADLINE);
  }
  /// The source type of the targetId identifier (POI, SITE, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *redTargetSrcType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REDTARGETSRCTYPE);
  }
  /// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: REDTARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *redTargetSrcId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REDTARGETSRCID);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EffectResponse_Full_dataMode_Enum dataMode() const {
    return static_cast<EffectResponse_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDEFFECTREQUEST) &&
           verifier.VerifyString(idEffectRequest()) &&
           VerifyOffset(verifier, VT_EXTERNALREQUESTID) &&
           verifier.VerifyString(externalRequestId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_ACTORSRCTYPE) &&
           verifier.VerifyString(actorSrcType()) &&
           VerifyOffset(verifier, VT_ACTORSRCID) &&
           verifier.VerifyString(actorSrcId()) &&
           VerifyOffset(verifier, VT_MUNITIONTYPE) &&
           verifier.VerifyString(munitionType()) &&
           VerifyOffset(verifier, VT_MUNITIONID) &&
           verifier.VerifyString(munitionId()) &&
           VerifyField<int32_t>(verifier, VT_SHOTSREQUIRED, 4) &&
           VerifyField<double>(verifier, VT_PROBABILITYOFKILL, 8) &&
           VerifyField<double>(verifier, VT_COLLATERALDAMAGEEST, 8) &&
           VerifyOffset(verifier, VT_ACTIONSLIST) &&
           verifier.VerifyVector(actionsList()) &&
           verifier.VerifyVectorOfStrings(actionsList()) &&
           VerifyOffset(verifier, VT_EXTERNALACTIONS) &&
           verifier.VerifyVector(externalActions()) &&
           verifier.VerifyVectorOfStrings(externalActions()) &&
           VerifyOffset(verifier, VT_COAMETRICS) &&
           verifier.VerifyVector(coaMetrics()) &&
           verifier.VerifyVectorOfStrings(coaMetrics()) &&
           VerifyOffset(verifier, VT_REDTIMETOOVERHEAD) &&
           verifier.VerifyString(redTimeToOverhead()) &&
           VerifyOffset(verifier, VT_DECISIONDEADLINE) &&
           verifier.VerifyString(decisionDeadline()) &&
           VerifyOffset(verifier, VT_REDTARGETSRCTYPE) &&
           verifier.VerifyString(redTargetSrcType()) &&
           VerifyOffset(verifier, VT_REDTARGETSRCID) &&
           verifier.VerifyString(redTargetSrcId()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct EffectResponse_FullBuilder {
  typedef EffectResponse_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(EffectResponse_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EffectResponse_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idEffectRequest(::flatbuffers::Offset<::flatbuffers::String> idEffectRequest) {
    fbb_.AddOffset(EffectResponse_Full::VT_IDEFFECTREQUEST, idEffectRequest);
  }
  void add_externalRequestId(::flatbuffers::Offset<::flatbuffers::String> externalRequestId) {
    fbb_.AddOffset(EffectResponse_Full::VT_EXTERNALREQUESTID, externalRequestId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EffectResponse_Full::VT_TYPE, type);
  }
  void add_actorSrcType(::flatbuffers::Offset<::flatbuffers::String> actorSrcType) {
    fbb_.AddOffset(EffectResponse_Full::VT_ACTORSRCTYPE, actorSrcType);
  }
  void add_actorSrcId(::flatbuffers::Offset<::flatbuffers::String> actorSrcId) {
    fbb_.AddOffset(EffectResponse_Full::VT_ACTORSRCID, actorSrcId);
  }
  void add_munitionType(::flatbuffers::Offset<::flatbuffers::String> munitionType) {
    fbb_.AddOffset(EffectResponse_Full::VT_MUNITIONTYPE, munitionType);
  }
  void add_munitionId(::flatbuffers::Offset<::flatbuffers::String> munitionId) {
    fbb_.AddOffset(EffectResponse_Full::VT_MUNITIONID, munitionId);
  }
  void add_shotsRequired(int32_t shotsRequired) {
    fbb_.AddElement<int32_t>(EffectResponse_Full::VT_SHOTSREQUIRED, shotsRequired, 0);
  }
  void add_probabilityOfKill(double probabilityOfKill) {
    fbb_.AddElement<double>(EffectResponse_Full::VT_PROBABILITYOFKILL, probabilityOfKill, 0.0);
  }
  void add_collateralDamageEst(double collateralDamageEst) {
    fbb_.AddElement<double>(EffectResponse_Full::VT_COLLATERALDAMAGEEST, collateralDamageEst, 0.0);
  }
  void add_actionsList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actionsList) {
    fbb_.AddOffset(EffectResponse_Full::VT_ACTIONSLIST, actionsList);
  }
  void add_externalActions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> externalActions) {
    fbb_.AddOffset(EffectResponse_Full::VT_EXTERNALACTIONS, externalActions);
  }
  void add_coaMetrics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coaMetrics) {
    fbb_.AddOffset(EffectResponse_Full::VT_COAMETRICS, coaMetrics);
  }
  void add_redTimeToOverhead(::flatbuffers::Offset<::flatbuffers::String> redTimeToOverhead) {
    fbb_.AddOffset(EffectResponse_Full::VT_REDTIMETOOVERHEAD, redTimeToOverhead);
  }
  void add_decisionDeadline(::flatbuffers::Offset<::flatbuffers::String> decisionDeadline) {
    fbb_.AddOffset(EffectResponse_Full::VT_DECISIONDEADLINE, decisionDeadline);
  }
  void add_redTargetSrcType(::flatbuffers::Offset<::flatbuffers::String> redTargetSrcType) {
    fbb_.AddOffset(EffectResponse_Full::VT_REDTARGETSRCTYPE, redTargetSrcType);
  }
  void add_redTargetSrcId(::flatbuffers::Offset<::flatbuffers::String> redTargetSrcId) {
    fbb_.AddOffset(EffectResponse_Full::VT_REDTARGETSRCID, redTargetSrcId);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EffectResponse_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EffectResponse_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EffectResponse_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(EffectResponse_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(EffectResponse_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EffectResponse_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(EffectResponse_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit EffectResponse_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EffectResponse_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EffectResponse_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EffectResponse_Full> CreateEffectResponse_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEffectRequest = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalRequestId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actorSrcType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actorSrcId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> munitionType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> munitionId = 0,
    int32_t shotsRequired = 0,
    double probabilityOfKill = 0.0,
    double collateralDamageEst = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actionsList = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> externalActions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coaMetrics = 0,
    ::flatbuffers::Offset<::flatbuffers::String> redTimeToOverhead = 0,
    ::flatbuffers::Offset<::flatbuffers::String> decisionDeadline = 0,
    ::flatbuffers::Offset<::flatbuffers::String> redTargetSrcType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> redTargetSrcId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    EffectResponse_Full_dataMode_Enum dataMode = EffectResponse_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  EffectResponse_FullBuilder builder_(_fbb);
  builder_.add_collateralDamageEst(collateralDamageEst);
  builder_.add_probabilityOfKill(probabilityOfKill);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_redTargetSrcId(redTargetSrcId);
  builder_.add_redTargetSrcType(redTargetSrcType);
  builder_.add_decisionDeadline(decisionDeadline);
  builder_.add_redTimeToOverhead(redTimeToOverhead);
  builder_.add_coaMetrics(coaMetrics);
  builder_.add_externalActions(externalActions);
  builder_.add_actionsList(actionsList);
  builder_.add_shotsRequired(shotsRequired);
  builder_.add_munitionId(munitionId);
  builder_.add_munitionType(munitionType);
  builder_.add_actorSrcId(actorSrcId);
  builder_.add_actorSrcType(actorSrcType);
  builder_.add_type(type);
  builder_.add_externalRequestId(externalRequestId);
  builder_.add_idEffectRequest(idEffectRequest);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EffectResponse_Full> CreateEffectResponse_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idEffectRequest = nullptr,
    const char *externalRequestId = nullptr,
    const char *type = nullptr,
    const char *actorSrcType = nullptr,
    const char *actorSrcId = nullptr,
    const char *munitionType = nullptr,
    const char *munitionId = nullptr,
    int32_t shotsRequired = 0,
    double probabilityOfKill = 0.0,
    double collateralDamageEst = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *actionsList = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *externalActions = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *coaMetrics = nullptr,
    const char *redTimeToOverhead = nullptr,
    const char *decisionDeadline = nullptr,
    const char *redTargetSrcType = nullptr,
    const char *redTargetSrcId = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    EffectResponse_Full_dataMode_Enum dataMode = EffectResponse_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idEffectRequest__ = idEffectRequest ? _fbb.CreateString(idEffectRequest) : 0;
  auto externalRequestId__ = externalRequestId ? _fbb.CreateString(externalRequestId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto actorSrcType__ = actorSrcType ? _fbb.CreateString(actorSrcType) : 0;
  auto actorSrcId__ = actorSrcId ? _fbb.CreateString(actorSrcId) : 0;
  auto munitionType__ = munitionType ? _fbb.CreateString(munitionType) : 0;
  auto munitionId__ = munitionId ? _fbb.CreateString(munitionId) : 0;
  auto actionsList__ = actionsList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*actionsList) : 0;
  auto externalActions__ = externalActions ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*externalActions) : 0;
  auto coaMetrics__ = coaMetrics ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*coaMetrics) : 0;
  auto redTimeToOverhead__ = redTimeToOverhead ? _fbb.CreateString(redTimeToOverhead) : 0;
  auto decisionDeadline__ = decisionDeadline ? _fbb.CreateString(decisionDeadline) : 0;
  auto redTargetSrcType__ = redTargetSrcType ? _fbb.CreateString(redTargetSrcType) : 0;
  auto redTargetSrcId__ = redTargetSrcId ? _fbb.CreateString(redTargetSrcId) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateEffectResponse_Full(
      _fbb,
      id__,
      classificationMarking__,
      idEffectRequest__,
      externalRequestId__,
      type__,
      actorSrcType__,
      actorSrcId__,
      munitionType__,
      munitionId__,
      shotsRequired,
      probabilityOfKill,
      collateralDamageEst,
      actionsList__,
      externalActions__,
      coaMetrics__,
      redTimeToOverhead__,
      decisionDeadline__,
      redTargetSrcType__,
      redTargetSrcId__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const EffectResponse_Full *GetEffectResponse_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EffectResponse_Full>(buf);
}

inline const EffectResponse_Full *GetSizePrefixedEffectResponse_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EffectResponse_Full>(buf);
}

inline const char *EffectResponse_FullIdentifier() {
  return "EFFE";
}

inline bool EffectResponse_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponse_FullIdentifier());
}

inline bool SizePrefixedEffectResponse_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponse_FullIdentifier(), true);
}

inline bool VerifyEffectResponse_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EffectResponse_Full>(EffectResponse_FullIdentifier());
}

inline bool VerifySizePrefixedEffectResponse_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EffectResponse_Full>(EffectResponse_FullIdentifier());
}

inline void FinishEffectResponse_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponse_Full> root) {
  fbb.Finish(root, EffectResponse_FullIdentifier());
}

inline void FinishSizePrefixedEffectResponse_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponse_Full> root) {
  fbb.FinishSizePrefixed(root, EffectResponse_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
