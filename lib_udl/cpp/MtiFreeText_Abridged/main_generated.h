// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiFreeText_Abridged;
struct MtiFreeText_AbridgedBuilder;

/// /// Provides a means of sending Basic Character Set alphanumeric text messages.
struct MtiFreeText_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiFreeText_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_F1 = 4,
    VT_F2 = 6,
    VT_F3 = 8
  };
  /// The originator of the Free Text message.
  /// Example: /// Example: ORIGINATOR
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *f1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_F1);
  }
  /// The recipient for which the Free Text message is intended.
  /// Example: /// Example: RECIPIENT
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *f2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_F2);
  }
  /// Free text data message.
  /// Example: /// Example: TEXT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *f3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_F3);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_F1) &&
           verifier.VerifyString(f1()) &&
           VerifyOffset(verifier, VT_F2) &&
           verifier.VerifyString(f2()) &&
           VerifyOffset(verifier, VT_F3) &&
           verifier.VerifyString(f3()) &&
           verifier.EndTable();
  }
};

struct MtiFreeText_AbridgedBuilder {
  typedef MtiFreeText_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_f1(::flatbuffers::Offset<::flatbuffers::String> f1) {
    fbb_.AddOffset(MtiFreeText_Abridged::VT_F1, f1);
  }
  void add_f2(::flatbuffers::Offset<::flatbuffers::String> f2) {
    fbb_.AddOffset(MtiFreeText_Abridged::VT_F2, f2);
  }
  void add_f3(::flatbuffers::Offset<::flatbuffers::String> f3) {
    fbb_.AddOffset(MtiFreeText_Abridged::VT_F3, f3);
  }
  explicit MtiFreeText_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiFreeText_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiFreeText_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiFreeText_Abridged> CreateMtiFreeText_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> f1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> f2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> f3 = 0) {
  MtiFreeText_AbridgedBuilder builder_(_fbb);
  builder_.add_f3(f3);
  builder_.add_f2(f2);
  builder_.add_f1(f1);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiFreeText_Abridged> CreateMtiFreeText_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *f1 = nullptr,
    const char *f2 = nullptr,
    const char *f3 = nullptr) {
  auto f1__ = f1 ? _fbb.CreateString(f1) : 0;
  auto f2__ = f2 ? _fbb.CreateString(f2) : 0;
  auto f3__ = f3 ? _fbb.CreateString(f3) : 0;
  return CreateMtiFreeText_Abridged(
      _fbb,
      f1__,
      f2__,
      f3__);
}

inline const MtiFreeText_Abridged *GetMtiFreeText_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<MtiFreeText_Abridged>(buf);
}

inline const MtiFreeText_Abridged *GetSizePrefixedMtiFreeText_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiFreeText_Abridged>(buf);
}

inline const char *MtiFreeText_AbridgedIdentifier() {
  return "MTIF";
}

inline bool MtiFreeText_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiFreeText_AbridgedIdentifier());
}

inline bool SizePrefixedMtiFreeText_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiFreeText_AbridgedIdentifier(), true);
}

inline bool VerifyMtiFreeText_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiFreeText_Abridged>(MtiFreeText_AbridgedIdentifier());
}

inline bool VerifySizePrefixedMtiFreeText_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiFreeText_Abridged>(MtiFreeText_AbridgedIdentifier());
}

inline void FinishMtiFreeText_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiFreeText_Abridged> root) {
  fbb.Finish(root, MtiFreeText_AbridgedIdentifier());
}

inline void FinishSizePrefixedMtiFreeText_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiFreeText_Abridged> root) {
  fbb.FinishSizePrefixed(root, MtiFreeText_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
