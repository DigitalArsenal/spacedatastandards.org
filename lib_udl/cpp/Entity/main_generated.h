// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Entity;
struct EntityBuilder;

enum Entity_type_Enum : int8_t {
  /// No description available.
  Entity_type_Enum_AIRCRAFT = 0,
  /// No description available.
  Entity_type_Enum_BUS = 1,
  /// No description available.
  Entity_type_Enum_COMM = 2,
  /// No description available.
  Entity_type_Enum_IR = 3,
  /// No description available.
  Entity_type_Enum_NAVIGATION = 4,
  /// No description available.
  Entity_type_Enum_ONORBIT = 5,
  /// No description available.
  Entity_type_Enum_RFEMITTER = 6,
  /// No description available.
  Entity_type_Enum_SCIENTIFIC = 7,
  /// No description available.
  Entity_type_Enum_SENSOR = 8,
  /// No description available.
  Entity_type_Enum_SITE = 9,
  /// No description available.
  Entity_type_Enum_VESSEL = 10,
  Entity_type_Enum_MIN = Entity_type_Enum_AIRCRAFT,
  Entity_type_Enum_MAX = Entity_type_Enum_VESSEL
};

inline const Entity_type_Enum (&EnumValuesEntity_type_Enum())[11] {
  static const Entity_type_Enum values[] = {
    Entity_type_Enum_AIRCRAFT,
    Entity_type_Enum_BUS,
    Entity_type_Enum_COMM,
    Entity_type_Enum_IR,
    Entity_type_Enum_NAVIGATION,
    Entity_type_Enum_ONORBIT,
    Entity_type_Enum_RFEMITTER,
    Entity_type_Enum_SCIENTIFIC,
    Entity_type_Enum_SENSOR,
    Entity_type_Enum_SITE,
    Entity_type_Enum_VESSEL
  };
  return values;
}

inline const char * const *EnumNamesEntity_type_Enum() {
  static const char * const names[12] = {
    "AIRCRAFT",
    "BUS",
    "COMM",
    "IR",
    "NAVIGATION",
    "ONORBIT",
    "RFEMITTER",
    "SCIENTIFIC",
    "SENSOR",
    "SITE",
    "VESSEL",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntity_type_Enum(Entity_type_Enum e) {
  if (::flatbuffers::IsOutRange(e, Entity_type_Enum_AIRCRAFT, Entity_type_Enum_VESSEL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntity_type_Enum()[index];
}

enum Entity_ownerType_Enum : int8_t {
  /// No description available.
  Entity_ownerType_Enum_COMMERCIAL = 0,
  /// No description available.
  Entity_ownerType_Enum_GOVERNMENT = 1,
  /// No description available.
  Entity_ownerType_Enum_ACADEMIC = 2,
  /// No description available.
  Entity_ownerType_Enum_CONSORTIUM = 3,
  /// No description available.
  Entity_ownerType_Enum_OTHER = 4,
  Entity_ownerType_Enum_MIN = Entity_ownerType_Enum_COMMERCIAL,
  Entity_ownerType_Enum_MAX = Entity_ownerType_Enum_OTHER
};

inline const Entity_ownerType_Enum (&EnumValuesEntity_ownerType_Enum())[5] {
  static const Entity_ownerType_Enum values[] = {
    Entity_ownerType_Enum_COMMERCIAL,
    Entity_ownerType_Enum_GOVERNMENT,
    Entity_ownerType_Enum_ACADEMIC,
    Entity_ownerType_Enum_CONSORTIUM,
    Entity_ownerType_Enum_OTHER
  };
  return values;
}

inline const char * const *EnumNamesEntity_ownerType_Enum() {
  static const char * const names[6] = {
    "COMMERCIAL",
    "GOVERNMENT",
    "ACADEMIC",
    "CONSORTIUM",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntity_ownerType_Enum(Entity_ownerType_Enum e) {
  if (::flatbuffers::IsOutRange(e, Entity_ownerType_Enum_COMMERCIAL, Entity_ownerType_Enum_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntity_ownerType_Enum()[index];
}

enum Entity_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Entity_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Entity_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Entity_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Entity_dataMode_Enum_EXERCISE = 3,
  Entity_dataMode_Enum_MIN = Entity_dataMode_Enum_REAL,
  Entity_dataMode_Enum_MAX = Entity_dataMode_Enum_EXERCISE
};

inline const Entity_dataMode_Enum (&EnumValuesEntity_dataMode_Enum())[4] {
  static const Entity_dataMode_Enum values[] = {
    Entity_dataMode_Enum_REAL,
    Entity_dataMode_Enum_TEST,
    Entity_dataMode_Enum_SIMULATED,
    Entity_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEntity_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEntity_dataMode_Enum(Entity_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Entity_dataMode_Enum_REAL, Entity_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEntity_dataMode_Enum()[index];
}

/// /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENTITY = 4,
    VT_NAME = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_TYPE = 10,
    VT_IDLOCATION = 12,
    VT_COUNTRYCODE = 14,
    VT_OWNERTYPE = 16,
    VT_TASKABLE = 18,
    VT_URLS = 20,
    VT_CREATEDAT = 22,
    VT_CREATEDBY = 24,
    VT_UPDATEDAT = 26,
    VT_UPDATEDBY = 28,
    VT_SOURCE = 30,
    VT_ORIGIN = 32,
    VT_DATAMODE = 34,
    VT_LOCATION = 36,
    VT_ONORBIT = 38,
    VT_IDONORBIT = 40,
    VT_OPERATINGUNIT = 42,
    VT_IDOPERATINGUNIT = 44,
    VT_ORIGNETWORK = 46,
    VT_STATUSCOLLECTION = 48,
    VT_RFBANDS = 50
  };
  /// Unique identifier of the record.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// Unique entity name.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
  /// Example: /// Example: ONORBIT
  /// Constraints: Minimum length = 1, Maximum length = 45
  Entity_type_Enum type() const {
    return static_cast<Entity_type_Enum>(GetField<int8_t>(VT_TYPE, 0));
  }
  /// Unique identifier of the entity location, if terrestrial/fixed.
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idLocation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDLOCATION);
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 0, Maximum length = 32
  Entity_ownerType_Enum ownerType() const {
    return static_cast<Entity_ownerType_Enum>(GetField<int8_t>(VT_OWNERTYPE, 0));
  }
  /// Boolean indicating if this entity is taskable.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool taskable() const {
    return GetField<uint8_t>(VT_TASKABLE, 0) != 0;
  }
  /// List of URLs to additional details/documents for this entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *urls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_URLS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Entity_dataMode_Enum dataMode() const {
    return static_cast<Entity_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *location() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCATION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  /// Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *operatingUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATINGUNIT);
  }
  /// Unique identifier of the associated operating unit object.
  /// Example: /// Example: OPERATINGUNIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOperatingUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDOPERATINGUNIT);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Read-only collection of statuses which can be collected by multiple sources.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *statusCollection() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_STATUSCOLLECTION);
  }
  /// Read-only collection of RF bands utilized by this entity for communication and/or operation.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rfBands() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RFBANDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_IDLOCATION) &&
           verifier.VerifyString(idLocation()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyField<int8_t>(verifier, VT_OWNERTYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_TASKABLE, 1) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfStrings(urls()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyString(location()) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_OPERATINGUNIT) &&
           verifier.VerifyString(operatingUnit()) &&
           VerifyOffset(verifier, VT_IDOPERATINGUNIT) &&
           verifier.VerifyString(idOperatingUnit()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_STATUSCOLLECTION) &&
           verifier.VerifyVector(statusCollection()) &&
           verifier.VerifyVectorOfStrings(statusCollection()) &&
           VerifyOffset(verifier, VT_RFBANDS) &&
           verifier.VerifyVector(rfBands()) &&
           verifier.VerifyVectorOfStrings(rfBands()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Entity::VT_IDENTITY, idEntity);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Entity::VT_NAME, name);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Entity::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(Entity_type_Enum type) {
    fbb_.AddElement<int8_t>(Entity::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_idLocation(::flatbuffers::Offset<::flatbuffers::String> idLocation) {
    fbb_.AddOffset(Entity::VT_IDLOCATION, idLocation);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Entity::VT_COUNTRYCODE, countryCode);
  }
  void add_ownerType(Entity_ownerType_Enum ownerType) {
    fbb_.AddElement<int8_t>(Entity::VT_OWNERTYPE, static_cast<int8_t>(ownerType), 0);
  }
  void add_taskable(bool taskable) {
    fbb_.AddElement<uint8_t>(Entity::VT_TASKABLE, static_cast<uint8_t>(taskable), 0);
  }
  void add_urls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls) {
    fbb_.AddOffset(Entity::VT_URLS, urls);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Entity::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Entity::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Entity::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Entity::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Entity::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Entity::VT_ORIGIN, origin);
  }
  void add_dataMode(Entity_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Entity::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_location(::flatbuffers::Offset<::flatbuffers::String> location) {
    fbb_.AddOffset(Entity::VT_LOCATION, location);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(Entity::VT_ONORBIT, onOrbit);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(Entity::VT_IDONORBIT, idOnOrbit);
  }
  void add_operatingUnit(::flatbuffers::Offset<::flatbuffers::String> operatingUnit) {
    fbb_.AddOffset(Entity::VT_OPERATINGUNIT, operatingUnit);
  }
  void add_idOperatingUnit(::flatbuffers::Offset<::flatbuffers::String> idOperatingUnit) {
    fbb_.AddOffset(Entity::VT_IDOPERATINGUNIT, idOperatingUnit);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Entity::VT_ORIGNETWORK, origNetwork);
  }
  void add_statusCollection(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> statusCollection) {
    fbb_.AddOffset(Entity::VT_STATUSCOLLECTION, statusCollection);
  }
  void add_rfBands(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rfBands) {
    fbb_.AddOffset(Entity::VT_RFBANDS, rfBands);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    Entity_type_Enum type = Entity_type_Enum_AIRCRAFT,
    ::flatbuffers::Offset<::flatbuffers::String> idLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    Entity_ownerType_Enum ownerType = Entity_ownerType_Enum_COMMERCIAL,
    bool taskable = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Entity_dataMode_Enum dataMode = Entity_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> location = 0,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operatingUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOperatingUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> statusCollection = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rfBands = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_rfBands(rfBands);
  builder_.add_statusCollection(statusCollection);
  builder_.add_origNetwork(origNetwork);
  builder_.add_idOperatingUnit(idOperatingUnit);
  builder_.add_operatingUnit(operatingUnit);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_onOrbit(onOrbit);
  builder_.add_location(location);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_urls(urls);
  builder_.add_countryCode(countryCode);
  builder_.add_idLocation(idLocation);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_name(name);
  builder_.add_idEntity(idEntity);
  builder_.add_dataMode(dataMode);
  builder_.add_taskable(taskable);
  builder_.add_ownerType(ownerType);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idEntity = nullptr,
    const char *name = nullptr,
    const char *classificationMarking = nullptr,
    Entity_type_Enum type = Entity_type_Enum_AIRCRAFT,
    const char *idLocation = nullptr,
    const char *countryCode = nullptr,
    Entity_ownerType_Enum ownerType = Entity_ownerType_Enum_COMMERCIAL,
    bool taskable = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *urls = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Entity_dataMode_Enum dataMode = Entity_dataMode_Enum_REAL,
    const char *location = nullptr,
    const char *onOrbit = nullptr,
    const char *idOnOrbit = nullptr,
    const char *operatingUnit = nullptr,
    const char *idOperatingUnit = nullptr,
    const char *origNetwork = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *statusCollection = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rfBands = nullptr) {
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idLocation__ = idLocation ? _fbb.CreateString(idLocation) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto urls__ = urls ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*urls) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto location__ = location ? _fbb.CreateString(location) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto operatingUnit__ = operatingUnit ? _fbb.CreateString(operatingUnit) : 0;
  auto idOperatingUnit__ = idOperatingUnit ? _fbb.CreateString(idOperatingUnit) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto statusCollection__ = statusCollection ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*statusCollection) : 0;
  auto rfBands__ = rfBands ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rfBands) : 0;
  return CreateEntity(
      _fbb,
      idEntity__,
      name__,
      classificationMarking__,
      type,
      idLocation__,
      countryCode__,
      ownerType,
      taskable,
      urls__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      dataMode,
      location__,
      onOrbit__,
      idOnOrbit__,
      operatingUnit__,
      idOperatingUnit__,
      origNetwork__,
      statusCollection__,
      rfBands__);
}

inline const Entity *GetEntity(const void *buf) {
  return ::flatbuffers::GetRoot<Entity>(buf);
}

inline const Entity *GetSizePrefixedEntity(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Entity>(buf);
}

inline const char *EntityIdentifier() {
  return "ENTI";
}

inline bool EntityBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EntityIdentifier());
}

inline bool SizePrefixedEntityBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EntityIdentifier(), true);
}

inline bool VerifyEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Entity>(EntityIdentifier());
}

inline bool VerifySizePrefixedEntityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Entity>(EntityIdentifier());
}

inline void FinishEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Entity> root) {
  fbb.Finish(root, EntityIdentifier());
}

inline void FinishSizePrefixedEntityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Entity> root) {
  fbb.FinishSizePrefixed(root, EntityIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
