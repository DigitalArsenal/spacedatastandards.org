// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsStocks_Ingest;
struct LogisticsStocks_IngestBuilder;

/// /// The supply stocks for this support item.
struct LogisticsStocks_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsStocks_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCEICAO = 4,
    VT_QUANTITY = 6,
    VT_STOCKCHECKTIME = 8,
    VT_STOCKPOC = 10
  };
  /// The ICAO code for the primary location with available parts.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *sourceICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEICAO);
  }
  /// The quantity of available parts needed from sourceICAO.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t quantity() const {
    return GetField<int32_t>(VT_QUANTITY, 0);
  }
  /// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stockCheckTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOCKCHECKTIME);
  }
  /// The point of contact at the sourced location.
  /// Example: /// Example: SMITH, JOHN J
  /// Constraints: Minimum length = 0, Maximum length = 68
  const ::flatbuffers::String *stockPOC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOCKPOC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCEICAO) &&
           verifier.VerifyString(sourceICAO()) &&
           VerifyField<int32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyOffset(verifier, VT_STOCKCHECKTIME) &&
           verifier.VerifyString(stockCheckTime()) &&
           VerifyOffset(verifier, VT_STOCKPOC) &&
           verifier.VerifyString(stockPOC()) &&
           verifier.EndTable();
  }
};

struct LogisticsStocks_IngestBuilder {
  typedef LogisticsStocks_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sourceICAO(::flatbuffers::Offset<::flatbuffers::String> sourceICAO) {
    fbb_.AddOffset(LogisticsStocks_Ingest::VT_SOURCEICAO, sourceICAO);
  }
  void add_quantity(int32_t quantity) {
    fbb_.AddElement<int32_t>(LogisticsStocks_Ingest::VT_QUANTITY, quantity, 0);
  }
  void add_stockCheckTime(::flatbuffers::Offset<::flatbuffers::String> stockCheckTime) {
    fbb_.AddOffset(LogisticsStocks_Ingest::VT_STOCKCHECKTIME, stockCheckTime);
  }
  void add_stockPOC(::flatbuffers::Offset<::flatbuffers::String> stockPOC) {
    fbb_.AddOffset(LogisticsStocks_Ingest::VT_STOCKPOC, stockPOC);
  }
  explicit LogisticsStocks_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsStocks_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsStocks_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsStocks_Ingest> CreateLogisticsStocks_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> sourceICAO = 0,
    int32_t quantity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stockCheckTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stockPOC = 0) {
  LogisticsStocks_IngestBuilder builder_(_fbb);
  builder_.add_stockPOC(stockPOC);
  builder_.add_stockCheckTime(stockCheckTime);
  builder_.add_quantity(quantity);
  builder_.add_sourceICAO(sourceICAO);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsStocks_Ingest> CreateLogisticsStocks_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *sourceICAO = nullptr,
    int32_t quantity = 0,
    const char *stockCheckTime = nullptr,
    const char *stockPOC = nullptr) {
  auto sourceICAO__ = sourceICAO ? _fbb.CreateString(sourceICAO) : 0;
  auto stockCheckTime__ = stockCheckTime ? _fbb.CreateString(stockCheckTime) : 0;
  auto stockPOC__ = stockPOC ? _fbb.CreateString(stockPOC) : 0;
  return CreateLogisticsStocks_Ingest(
      _fbb,
      sourceICAO__,
      quantity,
      stockCheckTime__,
      stockPOC__);
}

inline const LogisticsStocks_Ingest *GetLogisticsStocks_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsStocks_Ingest>(buf);
}

inline const LogisticsStocks_Ingest *GetSizePrefixedLogisticsStocks_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsStocks_Ingest>(buf);
}

inline const char *LogisticsStocks_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsStocks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsStocks_IngestIdentifier());
}

inline bool SizePrefixedLogisticsStocks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsStocks_IngestIdentifier(), true);
}

inline bool VerifyLogisticsStocks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsStocks_Ingest>(LogisticsStocks_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsStocks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsStocks_Ingest>(LogisticsStocks_IngestIdentifier());
}

inline void FinishLogisticsStocks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsStocks_Ingest> root) {
  fbb.Finish(root, LogisticsStocks_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsStocks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsStocks_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsStocks_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
