// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct StarCatalog_Full;
struct StarCatalog_FullBuilder;

enum StarCatalog_Full_astrometryOrigin_Enum : int8_t {
  /// No description available.
  StarCatalog_Full_astrometryOrigin_Enum_GAIADR3 = 0,
  /// No description available.
  StarCatalog_Full_astrometryOrigin_Enum_HIPPARCOS = 1,
  /// No description available.
  StarCatalog_Full_astrometryOrigin_Enum_USNOBSC = 2,
  StarCatalog_Full_astrometryOrigin_Enum_MIN = StarCatalog_Full_astrometryOrigin_Enum_GAIADR3,
  StarCatalog_Full_astrometryOrigin_Enum_MAX = StarCatalog_Full_astrometryOrigin_Enum_USNOBSC
};

inline const StarCatalog_Full_astrometryOrigin_Enum (&EnumValuesStarCatalog_Full_astrometryOrigin_Enum())[3] {
  static const StarCatalog_Full_astrometryOrigin_Enum values[] = {
    StarCatalog_Full_astrometryOrigin_Enum_GAIADR3,
    StarCatalog_Full_astrometryOrigin_Enum_HIPPARCOS,
    StarCatalog_Full_astrometryOrigin_Enum_USNOBSC
  };
  return values;
}

inline const char * const *EnumNamesStarCatalog_Full_astrometryOrigin_Enum() {
  static const char * const names[4] = {
    "GAIADR3",
    "HIPPARCOS",
    "USNOBSC",
    nullptr
  };
  return names;
}

inline const char *EnumNameStarCatalog_Full_astrometryOrigin_Enum(StarCatalog_Full_astrometryOrigin_Enum e) {
  if (::flatbuffers::IsOutRange(e, StarCatalog_Full_astrometryOrigin_Enum_GAIADR3, StarCatalog_Full_astrometryOrigin_Enum_USNOBSC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStarCatalog_Full_astrometryOrigin_Enum()[index];
}

enum StarCatalog_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  StarCatalog_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  StarCatalog_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  StarCatalog_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  StarCatalog_Full_dataMode_Enum_EXERCISE = 3,
  StarCatalog_Full_dataMode_Enum_MIN = StarCatalog_Full_dataMode_Enum_REAL,
  StarCatalog_Full_dataMode_Enum_MAX = StarCatalog_Full_dataMode_Enum_EXERCISE
};

inline const StarCatalog_Full_dataMode_Enum (&EnumValuesStarCatalog_Full_dataMode_Enum())[4] {
  static const StarCatalog_Full_dataMode_Enum values[] = {
    StarCatalog_Full_dataMode_Enum_REAL,
    StarCatalog_Full_dataMode_Enum_TEST,
    StarCatalog_Full_dataMode_Enum_SIMULATED,
    StarCatalog_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesStarCatalog_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameStarCatalog_Full_dataMode_Enum(StarCatalog_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, StarCatalog_Full_dataMode_Enum_REAL, StarCatalog_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStarCatalog_Full_dataMode_Enum()[index];
}

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
struct StarCatalog_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StarCatalog_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_CSID = 8,
    VT_GNCCATID = 10,
    VT_GAIADR3CATID = 12,
    VT_HIPCATID = 14,
    VT_CATVERSION = 16,
    VT_RA = 18,
    VT_RAUNC = 20,
    VT_DEC = 22,
    VT_DECUNC = 24,
    VT_POSUNCFLAG = 26,
    VT_PARALLAX = 28,
    VT_PARALLAXUNC = 30,
    VT_PMRA = 32,
    VT_PMRAUNC = 34,
    VT_PMDEC = 36,
    VT_PMDECUNC = 38,
    VT_PMUNCFLAG = 40,
    VT_ASTROMETRYORIGIN = 42,
    VT_STAREPOCH = 44,
    VT_GMAG = 46,
    VT_GMAGUNC = 48,
    VT_BPMAG = 50,
    VT_BPMAGUNC = 52,
    VT_RPMAG = 54,
    VT_RPMAGUNC = 56,
    VT_JMAG = 58,
    VT_JMAGUNC = 60,
    VT_KMAG = 62,
    VT_KMAGUNC = 64,
    VT_HMAG = 66,
    VT_HMAGUNC = 68,
    VT_VARFLAG = 70,
    VT_MULTFLAG = 72,
    VT_NEIGHBORID = 74,
    VT_NEIGHBORFLAG = 76,
    VT_NEIGHBORDISTANCE = 78,
    VT_SHIFTFLAG = 80,
    VT_SHIFT = 82,
    VT_CREATEDAT = 84,
    VT_CREATEDBY = 86,
    VT_UPDATEDAT = 88,
    VT_UPDATEDBY = 90,
    VT_SOURCE = 92,
    VT_ORIGIN = 94,
    VT_ORIGNETWORK = 96,
    VT_DATAMODE = 98
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: STAR-CAT-DATASET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The ID of this object in the specific catalog associated with this record.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  int64_t csId() const {
    return GetField<int64_t>(VT_CSID, 0);
  }
  /// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  int32_t gncCatId() const {
    return GetField<int32_t>(VT_GNCCATID, 0);
  }
  /// The ID of this object in the Gaia DR3 Catalog.
  /// Example: /// Example: 89012345678901
  /// Constraints: No constraints specified.
  int64_t gaiadr3CatId() const {
    return GetField<int64_t>(VT_GAIADR3CATID, 0);
  }
  /// The ID of this object in the Hipparcos Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  int32_t hipCatId() const {
    return GetField<int32_t>(VT_HIPCATID, 0);
  }
  /// The version of the catalog associated with this object.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *catVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATVERSION);
  }
  /// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
  /// Example: /// Example: 14.43
  /// Constraints: No constraints specified.
  double ra() const {
    return GetField<double>(VT_RA, 0.0);
  }
  /// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 509.466
  /// Constraints: No constraints specified.
  double raUnc() const {
    return GetField<double>(VT_RAUNC, 0.0);
  }
  /// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
  /// Example: /// Example: 21.8
  /// Constraints: No constraints specified.
  double dec() const {
    return GetField<double>(VT_DEC, 0.0);
  }
  /// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 40.996
  /// Constraints: No constraints specified.
  double decUnc() const {
    return GetField<double>(VT_DECUNC, 0.0);
  }
  /// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool posUncFlag() const {
    return GetField<uint8_t>(VT_POSUNCFLAG, 0) != 0;
  }
  /// Absolute stellar parallax of the source, in milliarcseconds.
  /// Example: /// Example: -6.8
  /// Constraints: No constraints specified.
  double parallax() const {
    return GetField<double>(VT_PARALLAX, 0.0);
  }
  /// Uncertainty of the stellar parallax, in milliarcseconds.
  /// Example: /// Example: 82.35
  /// Constraints: No constraints specified.
  double parallaxUnc() const {
    return GetField<double>(VT_PARALLAXUNC, 0.0);
  }
  /// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: 1000.45
  /// Constraints: No constraints specified.
  double pmra() const {
    return GetField<double>(VT_PMRA, 0.0);
  }
  /// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
  /// Example: /// Example: 5.6
  /// Constraints: No constraints specified.
  double pmraUnc() const {
    return GetField<double>(VT_PMRAUNC, 0.0);
  }
  /// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: -970.1003
  /// Constraints: No constraints specified.
  double pmdec() const {
    return GetField<double>(VT_PMDEC, 0.0);
  }
  /// Uncertainty of proper motion in declination, in milliarcseconds/year.
  /// Example: /// Example: 1.22
  /// Constraints: No constraints specified.
  double pmdecUnc() const {
    return GetField<double>(VT_PMDECUNC, 0.0);
  }
  /// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool pmUncFlag() const {
    return GetField<uint8_t>(VT_PMUNCFLAG, 0) != 0;
  }
  /// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
  /// Example: /// Example: GAIADR3
  /// Constraints: Minimum length = 1, Maximum length = 16
  StarCatalog_Full_astrometryOrigin_Enum astrometryOrigin() const {
    return static_cast<StarCatalog_Full_astrometryOrigin_Enum>(GetField<int8_t>(VT_ASTROMETRYORIGIN, 0));
  }
  /// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
  /// Example: /// Example: 2016
  /// Constraints: No constraints specified.
  double starEpoch() const {
    return GetField<double>(VT_STAREPOCH, 0.0);
  }
  /// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
  /// Example: /// Example: 0.0046
  /// Constraints: No constraints specified.
  double gmag() const {
    return GetField<double>(VT_GMAG, 0.0);
  }
  /// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.00292
  /// Constraints: No constraints specified.
  double gmagUnc() const {
    return GetField<double>(VT_GMAGUNC, 0.0);
  }
  /// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
  /// Example: /// Example: 0.04559
  /// Constraints: No constraints specified.
  double bpmag() const {
    return GetField<double>(VT_BPMAG, 0.0);
  }
  /// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.2227
  /// Constraints: No constraints specified.
  double bpmagUnc() const {
    return GetField<double>(VT_BPMAGUNC, 0.0);
  }
  /// Gaia DR3 optical Rp-band magnitude in the Vega scale.
  /// Example: /// Example: 8.0047
  /// Constraints: No constraints specified.
  double rpmag() const {
    return GetField<double>(VT_RPMAG, 0.0);
  }
  /// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 1.233
  /// Constraints: No constraints specified.
  double rpmagUnc() const {
    return GetField<double>(VT_RPMAGUNC, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
  /// Example: /// Example: 9.515
  /// Constraints: No constraints specified.
  double jmag() const {
    return GetField<double>(VT_JMAG, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 7.559
  /// Constraints: No constraints specified.
  double jmagUnc() const {
    return GetField<double>(VT_JMAGUNC, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
  /// Example: /// Example: 13.545
  /// Constraints: No constraints specified.
  double kmag() const {
    return GetField<double>(VT_KMAG, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.052
  /// Constraints: No constraints specified.
  double kmagUnc() const {
    return GetField<double>(VT_KMAGUNC, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
  /// Example: /// Example: 12.126
  /// Constraints: No constraints specified.
  double hmag() const {
    return GetField<double>(VT_HMAG, 0.0);
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 5.722
  /// Constraints: No constraints specified.
  double hmagUnc() const {
    return GetField<double>(VT_HMAGUNC, 0.0);
  }
  /// Flag indicating that the source exhibits variable magnitude.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool varFlag() const {
    return GetField<uint8_t>(VT_VARFLAG, 0) != 0;
  }
  /// Flag indicating that this is a multiple object source.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool multFlag() const {
    return GetField<uint8_t>(VT_MULTFLAG, 0) != 0;
  }
  /// The catalog ID of the nearest neighbor to this source.
  /// Example: /// Example: 2456
  /// Constraints: No constraints specified.
  int32_t neighborId() const {
    return GetField<int32_t>(VT_NEIGHBORID, 0);
  }
  /// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool neighborFlag() const {
    return GetField<uint8_t>(VT_NEIGHBORFLAG, 0) != 0;
  }
  /// Distance between source and nearest neighbor, in arcseconds.
  /// Example: /// Example: 201.406
  /// Constraints: No constraints specified.
  double neighborDistance() const {
    return GetField<double>(VT_NEIGHBORDISTANCE, 0.0);
  }
  /// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool shiftFlag() const {
    return GetField<uint8_t>(VT_SHIFTFLAG, 0) != 0;
  }
  /// Photocentric shift caused by neighbors, in arcseconds.
  /// Example: /// Example: 4.548
  /// Constraints: No constraints specified.
  double shift() const {
    return GetField<double>(VT_SHIFT, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  StarCatalog_Full_dataMode_Enum dataMode() const {
    return static_cast<StarCatalog_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int64_t>(verifier, VT_CSID, 8) &&
           VerifyField<int32_t>(verifier, VT_GNCCATID, 4) &&
           VerifyField<int64_t>(verifier, VT_GAIADR3CATID, 8) &&
           VerifyField<int32_t>(verifier, VT_HIPCATID, 4) &&
           VerifyOffset(verifier, VT_CATVERSION) &&
           verifier.VerifyString(catVersion()) &&
           VerifyField<double>(verifier, VT_RA, 8) &&
           VerifyField<double>(verifier, VT_RAUNC, 8) &&
           VerifyField<double>(verifier, VT_DEC, 8) &&
           VerifyField<double>(verifier, VT_DECUNC, 8) &&
           VerifyField<uint8_t>(verifier, VT_POSUNCFLAG, 1) &&
           VerifyField<double>(verifier, VT_PARALLAX, 8) &&
           VerifyField<double>(verifier, VT_PARALLAXUNC, 8) &&
           VerifyField<double>(verifier, VT_PMRA, 8) &&
           VerifyField<double>(verifier, VT_PMRAUNC, 8) &&
           VerifyField<double>(verifier, VT_PMDEC, 8) &&
           VerifyField<double>(verifier, VT_PMDECUNC, 8) &&
           VerifyField<uint8_t>(verifier, VT_PMUNCFLAG, 1) &&
           VerifyField<int8_t>(verifier, VT_ASTROMETRYORIGIN, 1) &&
           VerifyField<double>(verifier, VT_STAREPOCH, 8) &&
           VerifyField<double>(verifier, VT_GMAG, 8) &&
           VerifyField<double>(verifier, VT_GMAGUNC, 8) &&
           VerifyField<double>(verifier, VT_BPMAG, 8) &&
           VerifyField<double>(verifier, VT_BPMAGUNC, 8) &&
           VerifyField<double>(verifier, VT_RPMAG, 8) &&
           VerifyField<double>(verifier, VT_RPMAGUNC, 8) &&
           VerifyField<double>(verifier, VT_JMAG, 8) &&
           VerifyField<double>(verifier, VT_JMAGUNC, 8) &&
           VerifyField<double>(verifier, VT_KMAG, 8) &&
           VerifyField<double>(verifier, VT_KMAGUNC, 8) &&
           VerifyField<double>(verifier, VT_HMAG, 8) &&
           VerifyField<double>(verifier, VT_HMAGUNC, 8) &&
           VerifyField<uint8_t>(verifier, VT_VARFLAG, 1) &&
           VerifyField<uint8_t>(verifier, VT_MULTFLAG, 1) &&
           VerifyField<int32_t>(verifier, VT_NEIGHBORID, 4) &&
           VerifyField<uint8_t>(verifier, VT_NEIGHBORFLAG, 1) &&
           VerifyField<double>(verifier, VT_NEIGHBORDISTANCE, 8) &&
           VerifyField<uint8_t>(verifier, VT_SHIFTFLAG, 1) &&
           VerifyField<double>(verifier, VT_SHIFT, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct StarCatalog_FullBuilder {
  typedef StarCatalog_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(StarCatalog_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(StarCatalog_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_csId(int64_t csId) {
    fbb_.AddElement<int64_t>(StarCatalog_Full::VT_CSID, csId, 0);
  }
  void add_gncCatId(int32_t gncCatId) {
    fbb_.AddElement<int32_t>(StarCatalog_Full::VT_GNCCATID, gncCatId, 0);
  }
  void add_gaiadr3CatId(int64_t gaiadr3CatId) {
    fbb_.AddElement<int64_t>(StarCatalog_Full::VT_GAIADR3CATID, gaiadr3CatId, 0);
  }
  void add_hipCatId(int32_t hipCatId) {
    fbb_.AddElement<int32_t>(StarCatalog_Full::VT_HIPCATID, hipCatId, 0);
  }
  void add_catVersion(::flatbuffers::Offset<::flatbuffers::String> catVersion) {
    fbb_.AddOffset(StarCatalog_Full::VT_CATVERSION, catVersion);
  }
  void add_ra(double ra) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_RA, ra, 0.0);
  }
  void add_raUnc(double raUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_RAUNC, raUnc, 0.0);
  }
  void add_dec(double dec) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_DEC, dec, 0.0);
  }
  void add_decUnc(double decUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_DECUNC, decUnc, 0.0);
  }
  void add_posUncFlag(bool posUncFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_POSUNCFLAG, static_cast<uint8_t>(posUncFlag), 0);
  }
  void add_parallax(double parallax) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PARALLAX, parallax, 0.0);
  }
  void add_parallaxUnc(double parallaxUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PARALLAXUNC, parallaxUnc, 0.0);
  }
  void add_pmra(double pmra) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PMRA, pmra, 0.0);
  }
  void add_pmraUnc(double pmraUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PMRAUNC, pmraUnc, 0.0);
  }
  void add_pmdec(double pmdec) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PMDEC, pmdec, 0.0);
  }
  void add_pmdecUnc(double pmdecUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_PMDECUNC, pmdecUnc, 0.0);
  }
  void add_pmUncFlag(bool pmUncFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_PMUNCFLAG, static_cast<uint8_t>(pmUncFlag), 0);
  }
  void add_astrometryOrigin(StarCatalog_Full_astrometryOrigin_Enum astrometryOrigin) {
    fbb_.AddElement<int8_t>(StarCatalog_Full::VT_ASTROMETRYORIGIN, static_cast<int8_t>(astrometryOrigin), 0);
  }
  void add_starEpoch(double starEpoch) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_STAREPOCH, starEpoch, 0.0);
  }
  void add_gmag(double gmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_GMAG, gmag, 0.0);
  }
  void add_gmagUnc(double gmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_GMAGUNC, gmagUnc, 0.0);
  }
  void add_bpmag(double bpmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_BPMAG, bpmag, 0.0);
  }
  void add_bpmagUnc(double bpmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_BPMAGUNC, bpmagUnc, 0.0);
  }
  void add_rpmag(double rpmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_RPMAG, rpmag, 0.0);
  }
  void add_rpmagUnc(double rpmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_RPMAGUNC, rpmagUnc, 0.0);
  }
  void add_jmag(double jmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_JMAG, jmag, 0.0);
  }
  void add_jmagUnc(double jmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_JMAGUNC, jmagUnc, 0.0);
  }
  void add_kmag(double kmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_KMAG, kmag, 0.0);
  }
  void add_kmagUnc(double kmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_KMAGUNC, kmagUnc, 0.0);
  }
  void add_hmag(double hmag) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_HMAG, hmag, 0.0);
  }
  void add_hmagUnc(double hmagUnc) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_HMAGUNC, hmagUnc, 0.0);
  }
  void add_varFlag(bool varFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_VARFLAG, static_cast<uint8_t>(varFlag), 0);
  }
  void add_multFlag(bool multFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_MULTFLAG, static_cast<uint8_t>(multFlag), 0);
  }
  void add_neighborId(int32_t neighborId) {
    fbb_.AddElement<int32_t>(StarCatalog_Full::VT_NEIGHBORID, neighborId, 0);
  }
  void add_neighborFlag(bool neighborFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_NEIGHBORFLAG, static_cast<uint8_t>(neighborFlag), 0);
  }
  void add_neighborDistance(double neighborDistance) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_NEIGHBORDISTANCE, neighborDistance, 0.0);
  }
  void add_shiftFlag(bool shiftFlag) {
    fbb_.AddElement<uint8_t>(StarCatalog_Full::VT_SHIFTFLAG, static_cast<uint8_t>(shiftFlag), 0);
  }
  void add_shift(double shift) {
    fbb_.AddElement<double>(StarCatalog_Full::VT_SHIFT, shift, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(StarCatalog_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(StarCatalog_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(StarCatalog_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(StarCatalog_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(StarCatalog_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(StarCatalog_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(StarCatalog_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(StarCatalog_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(StarCatalog_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit StarCatalog_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StarCatalog_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StarCatalog_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StarCatalog_Full> CreateStarCatalog_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int64_t csId = 0,
    int32_t gncCatId = 0,
    int64_t gaiadr3CatId = 0,
    int32_t hipCatId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> catVersion = 0,
    double ra = 0.0,
    double raUnc = 0.0,
    double dec = 0.0,
    double decUnc = 0.0,
    bool posUncFlag = false,
    double parallax = 0.0,
    double parallaxUnc = 0.0,
    double pmra = 0.0,
    double pmraUnc = 0.0,
    double pmdec = 0.0,
    double pmdecUnc = 0.0,
    bool pmUncFlag = false,
    StarCatalog_Full_astrometryOrigin_Enum astrometryOrigin = StarCatalog_Full_astrometryOrigin_Enum_GAIADR3,
    double starEpoch = 0.0,
    double gmag = 0.0,
    double gmagUnc = 0.0,
    double bpmag = 0.0,
    double bpmagUnc = 0.0,
    double rpmag = 0.0,
    double rpmagUnc = 0.0,
    double jmag = 0.0,
    double jmagUnc = 0.0,
    double kmag = 0.0,
    double kmagUnc = 0.0,
    double hmag = 0.0,
    double hmagUnc = 0.0,
    bool varFlag = false,
    bool multFlag = false,
    int32_t neighborId = 0,
    bool neighborFlag = false,
    double neighborDistance = 0.0,
    bool shiftFlag = false,
    double shift = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    StarCatalog_Full_dataMode_Enum dataMode = StarCatalog_Full_dataMode_Enum_REAL) {
  StarCatalog_FullBuilder builder_(_fbb);
  builder_.add_shift(shift);
  builder_.add_neighborDistance(neighborDistance);
  builder_.add_hmagUnc(hmagUnc);
  builder_.add_hmag(hmag);
  builder_.add_kmagUnc(kmagUnc);
  builder_.add_kmag(kmag);
  builder_.add_jmagUnc(jmagUnc);
  builder_.add_jmag(jmag);
  builder_.add_rpmagUnc(rpmagUnc);
  builder_.add_rpmag(rpmag);
  builder_.add_bpmagUnc(bpmagUnc);
  builder_.add_bpmag(bpmag);
  builder_.add_gmagUnc(gmagUnc);
  builder_.add_gmag(gmag);
  builder_.add_starEpoch(starEpoch);
  builder_.add_pmdecUnc(pmdecUnc);
  builder_.add_pmdec(pmdec);
  builder_.add_pmraUnc(pmraUnc);
  builder_.add_pmra(pmra);
  builder_.add_parallaxUnc(parallaxUnc);
  builder_.add_parallax(parallax);
  builder_.add_decUnc(decUnc);
  builder_.add_dec(dec);
  builder_.add_raUnc(raUnc);
  builder_.add_ra(ra);
  builder_.add_gaiadr3CatId(gaiadr3CatId);
  builder_.add_csId(csId);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_neighborId(neighborId);
  builder_.add_catVersion(catVersion);
  builder_.add_hipCatId(hipCatId);
  builder_.add_gncCatId(gncCatId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_shiftFlag(shiftFlag);
  builder_.add_neighborFlag(neighborFlag);
  builder_.add_multFlag(multFlag);
  builder_.add_varFlag(varFlag);
  builder_.add_astrometryOrigin(astrometryOrigin);
  builder_.add_pmUncFlag(pmUncFlag);
  builder_.add_posUncFlag(posUncFlag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StarCatalog_Full> CreateStarCatalog_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    int64_t csId = 0,
    int32_t gncCatId = 0,
    int64_t gaiadr3CatId = 0,
    int32_t hipCatId = 0,
    const char *catVersion = nullptr,
    double ra = 0.0,
    double raUnc = 0.0,
    double dec = 0.0,
    double decUnc = 0.0,
    bool posUncFlag = false,
    double parallax = 0.0,
    double parallaxUnc = 0.0,
    double pmra = 0.0,
    double pmraUnc = 0.0,
    double pmdec = 0.0,
    double pmdecUnc = 0.0,
    bool pmUncFlag = false,
    StarCatalog_Full_astrometryOrigin_Enum astrometryOrigin = StarCatalog_Full_astrometryOrigin_Enum_GAIADR3,
    double starEpoch = 0.0,
    double gmag = 0.0,
    double gmagUnc = 0.0,
    double bpmag = 0.0,
    double bpmagUnc = 0.0,
    double rpmag = 0.0,
    double rpmagUnc = 0.0,
    double jmag = 0.0,
    double jmagUnc = 0.0,
    double kmag = 0.0,
    double kmagUnc = 0.0,
    double hmag = 0.0,
    double hmagUnc = 0.0,
    bool varFlag = false,
    bool multFlag = false,
    int32_t neighborId = 0,
    bool neighborFlag = false,
    double neighborDistance = 0.0,
    bool shiftFlag = false,
    double shift = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    StarCatalog_Full_dataMode_Enum dataMode = StarCatalog_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto catVersion__ = catVersion ? _fbb.CreateString(catVersion) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateStarCatalog_Full(
      _fbb,
      id__,
      classificationMarking__,
      csId,
      gncCatId,
      gaiadr3CatId,
      hipCatId,
      catVersion__,
      ra,
      raUnc,
      dec,
      decUnc,
      posUncFlag,
      parallax,
      parallaxUnc,
      pmra,
      pmraUnc,
      pmdec,
      pmdecUnc,
      pmUncFlag,
      astrometryOrigin,
      starEpoch,
      gmag,
      gmagUnc,
      bpmag,
      bpmagUnc,
      rpmag,
      rpmagUnc,
      jmag,
      jmagUnc,
      kmag,
      kmagUnc,
      hmag,
      hmagUnc,
      varFlag,
      multFlag,
      neighborId,
      neighborFlag,
      neighborDistance,
      shiftFlag,
      shift,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const StarCatalog_Full *GetStarCatalog_Full(const void *buf) {
  return ::flatbuffers::GetRoot<StarCatalog_Full>(buf);
}

inline const StarCatalog_Full *GetSizePrefixedStarCatalog_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<StarCatalog_Full>(buf);
}

inline const char *StarCatalog_FullIdentifier() {
  return "STAR";
}

inline bool StarCatalog_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, StarCatalog_FullIdentifier());
}

inline bool SizePrefixedStarCatalog_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, StarCatalog_FullIdentifier(), true);
}

inline bool VerifyStarCatalog_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StarCatalog_Full>(StarCatalog_FullIdentifier());
}

inline bool VerifySizePrefixedStarCatalog_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<StarCatalog_Full>(StarCatalog_FullIdentifier());
}

inline void FinishStarCatalog_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<StarCatalog_Full> root) {
  fbb.Finish(root, StarCatalog_FullIdentifier());
}

inline void FinishSizePrefixedStarCatalog_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<StarCatalog_Full> root) {
  fbb.FinishSizePrefixed(root, StarCatalog_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
