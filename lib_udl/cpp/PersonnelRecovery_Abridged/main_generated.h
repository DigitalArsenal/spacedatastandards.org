// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PersonnelRecovery_Abridged;
struct PersonnelRecovery_AbridgedBuilder;

enum PersonnelRecovery_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  PersonnelRecovery_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  PersonnelRecovery_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  PersonnelRecovery_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  PersonnelRecovery_Abridged_dataMode_Enum_EXERCISE = 3,
  PersonnelRecovery_Abridged_dataMode_Enum_MIN = PersonnelRecovery_Abridged_dataMode_Enum_REAL,
  PersonnelRecovery_Abridged_dataMode_Enum_MAX = PersonnelRecovery_Abridged_dataMode_Enum_EXERCISE
};

inline const PersonnelRecovery_Abridged_dataMode_Enum (&EnumValuesPersonnelRecovery_Abridged_dataMode_Enum())[4] {
  static const PersonnelRecovery_Abridged_dataMode_Enum values[] = {
    PersonnelRecovery_Abridged_dataMode_Enum_REAL,
    PersonnelRecovery_Abridged_dataMode_Enum_TEST,
    PersonnelRecovery_Abridged_dataMode_Enum_SIMULATED,
    PersonnelRecovery_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesPersonnelRecovery_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNamePersonnelRecovery_Abridged_dataMode_Enum(PersonnelRecovery_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, PersonnelRecovery_Abridged_dataMode_Enum_REAL, PersonnelRecovery_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPersonnelRecovery_Abridged_dataMode_Enum()[index];
}

/// /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
struct PersonnelRecovery_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonnelRecovery_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_TYPE = 8,
    VT_MSGTIME = 10,
    VT_RECOVID = 12,
    VT_IDWEATHERREPORT = 14,
    VT_PICKUPLAT = 16,
    VT_PICKUPLON = 18,
    VT_PICKUPALT = 20,
    VT_TERMIND = 22,
    VT_AUTHSTATUS = 24,
    VT_NUMPERSONS = 26,
    VT_MILCLASS = 28,
    VT_NATALLIANCE = 30,
    VT_NATALLIANCE1 = 32,
    VT_IDENTITY = 34,
    VT_COMMEQ1 = 36,
    VT_COMMEQ2 = 38,
    VT_COMMEQ3 = 40,
    VT_TXFREQ = 42,
    VT_RXFREQ = 44,
    VT_NUMNONAMBULATORY = 46,
    VT_NUMAMBULATORY = 48,
    VT_NUMAMBULATORYINJURED = 50,
    VT_SURVIVORRADIO = 52,
    VT_SURVIVORMESSAGES = 54,
    VT_BEACONIND = 56,
    VT_CALLSIGN = 58,
    VT_TEXTMSG = 60,
    VT_AUTHMETHOD = 62,
    VT_OBJECTIVEAREAINFO = 64,
    VT_EXECUTIONINFO = 66,
    VT_ORIGNETWORK = 68,
    VT_CREATEDAT = 70,
    VT_CREATEDBY = 72,
    VT_SOURCE = 74,
    VT_ORIGIN = 76,
    VT_DATAMODE = 78
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: PERSONNEL_RECOVERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
  /// Example: /// Example: MEDICAL
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *msgTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTIME);
  }
  /// UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
  /// Example: /// Example: RECOV-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *recovId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECOVID);
  }
  /// Unique identifier of a weather report associated with this recovery.
  /// Example: /// Example: WEATHER_REPORT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idWeatherReport() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDWEATHERREPORT);
  }
  /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 75.1234
  /// Constraints: No constraints specified.
  double pickupLat() const {
    return GetField<double>(VT_PICKUPLAT, 0.0);
  }
  /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 175.1234
  /// Constraints: No constraints specified.
  double pickupLon() const {
    return GetField<double>(VT_PICKUPLON, 0.0);
  }
  /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
  /// Example: /// Example: 30.1234
  /// Constraints: No constraints specified.
  double pickupAlt() const {
    return GetField<double>(VT_PICKUPALT, 0.0);
  }
  /// Flag indicating the cancellation of this recovery.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool termInd() const {
    return GetField<uint8_t>(VT_TERMIND, 0) != 0;
  }
  /// The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
  /// AUTHENTICATED:  Confirmed Friend
  /// NOT AUTHENTICATED: Unconfirmed status
  /// AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
  /// NOT APPLICABLE:  Authentication not required.
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *authStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHSTATUS);
  }
  /// The count of persons requiring recovery.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numPersons() const {
    return GetField<int32_t>(VT_NUMPERSONS, 0);
  }
  /// The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
  /// Example: /// Example: CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *milClass() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILCLASS);
  }
  /// The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t natAlliance() const {
    return GetField<int32_t>(VT_NATALLIANCE, 0);
  }
  /// Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t natAlliance1() const {
    return GetField<int32_t>(VT_NATALLIANCE1, 0);
  }
  /// The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  /// Example: /// Example: NEUTRAL CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *identity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  /// Example: /// Example: LL PHONE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *commEq1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMEQ1);
  }
  /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  /// Example: /// Example: LL PHONE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *commEq2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMEQ2);
  }
  /// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
  /// Example: /// Example: LL PHONE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *commEq3() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMEQ3);
  }
  /// Transmit voice frequency in 5Hz increments.
  /// Example: /// Example: 5.5
  /// Constraints: No constraints specified.
  double txFreq() const {
    return GetField<double>(VT_TXFREQ, 0.0);
  }
  /// Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
  /// Example: /// Example: 5.5
  /// Constraints: No constraints specified.
  double rxFreq() const {
    return GetField<double>(VT_RXFREQ, 0.0);
  }
  /// Number of littered personnel requiring recovery.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t numNonAmbulatory() const {
    return GetField<int32_t>(VT_NUMNONAMBULATORY, 0);
  }
  /// Number of ambulatory personnel requiring recovery.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numAmbulatory() const {
    return GetField<int32_t>(VT_NUMAMBULATORY, 0);
  }
  /// Number of injured, but ambulatory, personnel requiring recovery.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t numAmbulatoryInjured() const {
    return GetField<int32_t>(VT_NUMAMBULATORYINJURED, 0);
  }
  /// Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
  /// Example: /// Example: NO STATEMENT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *survivorRadio() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SURVIVORRADIO);
  }
  /// Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
  /// Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *survivorMessages() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SURVIVORMESSAGES);
  }
  /// Flag indicating whether a radio identifier is reported.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool beaconInd() const {
    return GetField<uint8_t>(VT_BEACONIND, 0) != 0;
  }
  /// The call sign of the personnel to be recovered.
  /// Example: /// Example: BADGER
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// Additional specific messages received from survivor.
  /// Example: /// Example: Additional message from survivor.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *textMsg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXTMSG);
  }
  /// Mechanism used to verify the survivors identity.
  /// Example: /// Example: PASSPORT
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *authMethod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHMETHOD);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *objectiveAreaInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJECTIVEAREAINFO);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *executionInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXECUTIONINFO);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  PersonnelRecovery_Abridged_dataMode_Enum dataMode() const {
    return static_cast<PersonnelRecovery_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_MSGTIME) &&
           verifier.VerifyString(msgTime()) &&
           VerifyOffset(verifier, VT_RECOVID) &&
           verifier.VerifyString(recovId()) &&
           VerifyOffset(verifier, VT_IDWEATHERREPORT) &&
           verifier.VerifyString(idWeatherReport()) &&
           VerifyField<double>(verifier, VT_PICKUPLAT, 8) &&
           VerifyField<double>(verifier, VT_PICKUPLON, 8) &&
           VerifyField<double>(verifier, VT_PICKUPALT, 8) &&
           VerifyField<uint8_t>(verifier, VT_TERMIND, 1) &&
           VerifyOffset(verifier, VT_AUTHSTATUS) &&
           verifier.VerifyString(authStatus()) &&
           VerifyField<int32_t>(verifier, VT_NUMPERSONS, 4) &&
           VerifyOffset(verifier, VT_MILCLASS) &&
           verifier.VerifyString(milClass()) &&
           VerifyField<int32_t>(verifier, VT_NATALLIANCE, 4) &&
           VerifyField<int32_t>(verifier, VT_NATALLIANCE1, 4) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(identity()) &&
           VerifyOffset(verifier, VT_COMMEQ1) &&
           verifier.VerifyString(commEq1()) &&
           VerifyOffset(verifier, VT_COMMEQ2) &&
           verifier.VerifyString(commEq2()) &&
           VerifyOffset(verifier, VT_COMMEQ3) &&
           verifier.VerifyString(commEq3()) &&
           VerifyField<double>(verifier, VT_TXFREQ, 8) &&
           VerifyField<double>(verifier, VT_RXFREQ, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMNONAMBULATORY, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMAMBULATORY, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMAMBULATORYINJURED, 4) &&
           VerifyOffset(verifier, VT_SURVIVORRADIO) &&
           verifier.VerifyString(survivorRadio()) &&
           VerifyOffset(verifier, VT_SURVIVORMESSAGES) &&
           verifier.VerifyString(survivorMessages()) &&
           VerifyField<uint8_t>(verifier, VT_BEACONIND, 1) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_TEXTMSG) &&
           verifier.VerifyString(textMsg()) &&
           VerifyOffset(verifier, VT_AUTHMETHOD) &&
           verifier.VerifyString(authMethod()) &&
           VerifyOffset(verifier, VT_OBJECTIVEAREAINFO) &&
           verifier.VerifyString(objectiveAreaInfo()) &&
           VerifyOffset(verifier, VT_EXECUTIONINFO) &&
           verifier.VerifyString(executionInfo()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct PersonnelRecovery_AbridgedBuilder {
  typedef PersonnelRecovery_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_TYPE, type);
  }
  void add_msgTime(::flatbuffers::Offset<::flatbuffers::String> msgTime) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_MSGTIME, msgTime);
  }
  void add_recovId(::flatbuffers::Offset<::flatbuffers::String> recovId) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_RECOVID, recovId);
  }
  void add_idWeatherReport(::flatbuffers::Offset<::flatbuffers::String> idWeatherReport) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_IDWEATHERREPORT, idWeatherReport);
  }
  void add_pickupLat(double pickupLat) {
    fbb_.AddElement<double>(PersonnelRecovery_Abridged::VT_PICKUPLAT, pickupLat, 0.0);
  }
  void add_pickupLon(double pickupLon) {
    fbb_.AddElement<double>(PersonnelRecovery_Abridged::VT_PICKUPLON, pickupLon, 0.0);
  }
  void add_pickupAlt(double pickupAlt) {
    fbb_.AddElement<double>(PersonnelRecovery_Abridged::VT_PICKUPALT, pickupAlt, 0.0);
  }
  void add_termInd(bool termInd) {
    fbb_.AddElement<uint8_t>(PersonnelRecovery_Abridged::VT_TERMIND, static_cast<uint8_t>(termInd), 0);
  }
  void add_authStatus(::flatbuffers::Offset<::flatbuffers::String> authStatus) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_AUTHSTATUS, authStatus);
  }
  void add_numPersons(int32_t numPersons) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NUMPERSONS, numPersons, 0);
  }
  void add_milClass(::flatbuffers::Offset<::flatbuffers::String> milClass) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_MILCLASS, milClass);
  }
  void add_natAlliance(int32_t natAlliance) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NATALLIANCE, natAlliance, 0);
  }
  void add_natAlliance1(int32_t natAlliance1) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NATALLIANCE1, natAlliance1, 0);
  }
  void add_identity(::flatbuffers::Offset<::flatbuffers::String> identity) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_IDENTITY, identity);
  }
  void add_commEq1(::flatbuffers::Offset<::flatbuffers::String> commEq1) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_COMMEQ1, commEq1);
  }
  void add_commEq2(::flatbuffers::Offset<::flatbuffers::String> commEq2) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_COMMEQ2, commEq2);
  }
  void add_commEq3(::flatbuffers::Offset<::flatbuffers::String> commEq3) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_COMMEQ3, commEq3);
  }
  void add_txFreq(double txFreq) {
    fbb_.AddElement<double>(PersonnelRecovery_Abridged::VT_TXFREQ, txFreq, 0.0);
  }
  void add_rxFreq(double rxFreq) {
    fbb_.AddElement<double>(PersonnelRecovery_Abridged::VT_RXFREQ, rxFreq, 0.0);
  }
  void add_numNonAmbulatory(int32_t numNonAmbulatory) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NUMNONAMBULATORY, numNonAmbulatory, 0);
  }
  void add_numAmbulatory(int32_t numAmbulatory) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NUMAMBULATORY, numAmbulatory, 0);
  }
  void add_numAmbulatoryInjured(int32_t numAmbulatoryInjured) {
    fbb_.AddElement<int32_t>(PersonnelRecovery_Abridged::VT_NUMAMBULATORYINJURED, numAmbulatoryInjured, 0);
  }
  void add_survivorRadio(::flatbuffers::Offset<::flatbuffers::String> survivorRadio) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_SURVIVORRADIO, survivorRadio);
  }
  void add_survivorMessages(::flatbuffers::Offset<::flatbuffers::String> survivorMessages) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_SURVIVORMESSAGES, survivorMessages);
  }
  void add_beaconInd(bool beaconInd) {
    fbb_.AddElement<uint8_t>(PersonnelRecovery_Abridged::VT_BEACONIND, static_cast<uint8_t>(beaconInd), 0);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_CALLSIGN, callSign);
  }
  void add_textMsg(::flatbuffers::Offset<::flatbuffers::String> textMsg) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_TEXTMSG, textMsg);
  }
  void add_authMethod(::flatbuffers::Offset<::flatbuffers::String> authMethod) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_AUTHMETHOD, authMethod);
  }
  void add_objectiveAreaInfo(::flatbuffers::Offset<::flatbuffers::String> objectiveAreaInfo) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_OBJECTIVEAREAINFO, objectiveAreaInfo);
  }
  void add_executionInfo(::flatbuffers::Offset<::flatbuffers::String> executionInfo) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_EXECUTIONINFO, executionInfo);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(PersonnelRecovery_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(PersonnelRecovery_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(PersonnelRecovery_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit PersonnelRecovery_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PersonnelRecovery_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PersonnelRecovery_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PersonnelRecovery_Abridged> CreatePersonnelRecovery_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> recovId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idWeatherReport = 0,
    double pickupLat = 0.0,
    double pickupLon = 0.0,
    double pickupAlt = 0.0,
    bool termInd = false,
    ::flatbuffers::Offset<::flatbuffers::String> authStatus = 0,
    int32_t numPersons = 0,
    ::flatbuffers::Offset<::flatbuffers::String> milClass = 0,
    int32_t natAlliance = 0,
    int32_t natAlliance1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> identity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commEq1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commEq2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> commEq3 = 0,
    double txFreq = 0.0,
    double rxFreq = 0.0,
    int32_t numNonAmbulatory = 0,
    int32_t numAmbulatory = 0,
    int32_t numAmbulatoryInjured = 0,
    ::flatbuffers::Offset<::flatbuffers::String> survivorRadio = 0,
    ::flatbuffers::Offset<::flatbuffers::String> survivorMessages = 0,
    bool beaconInd = false,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> textMsg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> authMethod = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objectiveAreaInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> executionInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    PersonnelRecovery_Abridged_dataMode_Enum dataMode = PersonnelRecovery_Abridged_dataMode_Enum_REAL) {
  PersonnelRecovery_AbridgedBuilder builder_(_fbb);
  builder_.add_rxFreq(rxFreq);
  builder_.add_txFreq(txFreq);
  builder_.add_pickupAlt(pickupAlt);
  builder_.add_pickupLon(pickupLon);
  builder_.add_pickupLat(pickupLat);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_executionInfo(executionInfo);
  builder_.add_objectiveAreaInfo(objectiveAreaInfo);
  builder_.add_authMethod(authMethod);
  builder_.add_textMsg(textMsg);
  builder_.add_callSign(callSign);
  builder_.add_survivorMessages(survivorMessages);
  builder_.add_survivorRadio(survivorRadio);
  builder_.add_numAmbulatoryInjured(numAmbulatoryInjured);
  builder_.add_numAmbulatory(numAmbulatory);
  builder_.add_numNonAmbulatory(numNonAmbulatory);
  builder_.add_commEq3(commEq3);
  builder_.add_commEq2(commEq2);
  builder_.add_commEq1(commEq1);
  builder_.add_identity(identity);
  builder_.add_natAlliance1(natAlliance1);
  builder_.add_natAlliance(natAlliance);
  builder_.add_milClass(milClass);
  builder_.add_numPersons(numPersons);
  builder_.add_authStatus(authStatus);
  builder_.add_idWeatherReport(idWeatherReport);
  builder_.add_recovId(recovId);
  builder_.add_msgTime(msgTime);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_beaconInd(beaconInd);
  builder_.add_termInd(termInd);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PersonnelRecovery_Abridged> CreatePersonnelRecovery_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    const char *msgTime = nullptr,
    const char *recovId = nullptr,
    const char *idWeatherReport = nullptr,
    double pickupLat = 0.0,
    double pickupLon = 0.0,
    double pickupAlt = 0.0,
    bool termInd = false,
    const char *authStatus = nullptr,
    int32_t numPersons = 0,
    const char *milClass = nullptr,
    int32_t natAlliance = 0,
    int32_t natAlliance1 = 0,
    const char *identity = nullptr,
    const char *commEq1 = nullptr,
    const char *commEq2 = nullptr,
    const char *commEq3 = nullptr,
    double txFreq = 0.0,
    double rxFreq = 0.0,
    int32_t numNonAmbulatory = 0,
    int32_t numAmbulatory = 0,
    int32_t numAmbulatoryInjured = 0,
    const char *survivorRadio = nullptr,
    const char *survivorMessages = nullptr,
    bool beaconInd = false,
    const char *callSign = nullptr,
    const char *textMsg = nullptr,
    const char *authMethod = nullptr,
    const char *objectiveAreaInfo = nullptr,
    const char *executionInfo = nullptr,
    const char *origNetwork = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    PersonnelRecovery_Abridged_dataMode_Enum dataMode = PersonnelRecovery_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto msgTime__ = msgTime ? _fbb.CreateString(msgTime) : 0;
  auto recovId__ = recovId ? _fbb.CreateString(recovId) : 0;
  auto idWeatherReport__ = idWeatherReport ? _fbb.CreateString(idWeatherReport) : 0;
  auto authStatus__ = authStatus ? _fbb.CreateString(authStatus) : 0;
  auto milClass__ = milClass ? _fbb.CreateString(milClass) : 0;
  auto identity__ = identity ? _fbb.CreateString(identity) : 0;
  auto commEq1__ = commEq1 ? _fbb.CreateString(commEq1) : 0;
  auto commEq2__ = commEq2 ? _fbb.CreateString(commEq2) : 0;
  auto commEq3__ = commEq3 ? _fbb.CreateString(commEq3) : 0;
  auto survivorRadio__ = survivorRadio ? _fbb.CreateString(survivorRadio) : 0;
  auto survivorMessages__ = survivorMessages ? _fbb.CreateString(survivorMessages) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto textMsg__ = textMsg ? _fbb.CreateString(textMsg) : 0;
  auto authMethod__ = authMethod ? _fbb.CreateString(authMethod) : 0;
  auto objectiveAreaInfo__ = objectiveAreaInfo ? _fbb.CreateString(objectiveAreaInfo) : 0;
  auto executionInfo__ = executionInfo ? _fbb.CreateString(executionInfo) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreatePersonnelRecovery_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      type__,
      msgTime__,
      recovId__,
      idWeatherReport__,
      pickupLat,
      pickupLon,
      pickupAlt,
      termInd,
      authStatus__,
      numPersons,
      milClass__,
      natAlliance,
      natAlliance1,
      identity__,
      commEq1__,
      commEq2__,
      commEq3__,
      txFreq,
      rxFreq,
      numNonAmbulatory,
      numAmbulatory,
      numAmbulatoryInjured,
      survivorRadio__,
      survivorMessages__,
      beaconInd,
      callSign__,
      textMsg__,
      authMethod__,
      objectiveAreaInfo__,
      executionInfo__,
      origNetwork__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode);
}

inline const PersonnelRecovery_Abridged *GetPersonnelRecovery_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<PersonnelRecovery_Abridged>(buf);
}

inline const PersonnelRecovery_Abridged *GetSizePrefixedPersonnelRecovery_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PersonnelRecovery_Abridged>(buf);
}

inline const char *PersonnelRecovery_AbridgedIdentifier() {
  return "PERS";
}

inline bool PersonnelRecovery_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecovery_AbridgedIdentifier());
}

inline bool SizePrefixedPersonnelRecovery_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PersonnelRecovery_AbridgedIdentifier(), true);
}

inline bool VerifyPersonnelRecovery_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PersonnelRecovery_Abridged>(PersonnelRecovery_AbridgedIdentifier());
}

inline bool VerifySizePrefixedPersonnelRecovery_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PersonnelRecovery_Abridged>(PersonnelRecovery_AbridgedIdentifier());
}

inline void FinishPersonnelRecovery_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecovery_Abridged> root) {
  fbb.Finish(root, PersonnelRecovery_AbridgedIdentifier());
}

inline void FinishSizePrefixedPersonnelRecovery_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PersonnelRecovery_Abridged> root) {
  fbb.FinishSizePrefixed(root, PersonnelRecovery_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
