// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkReferences_Full;
struct DataLinkReferences_FullBuilder;

/// /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
struct DataLinkReferences_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkReferences_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFSERIALID = 4,
    VT_REFTYPE = 6,
    VT_REFORIGINATOR = 8,
    VT_REFTS = 10,
    VT_REFSERIALNUM = 12,
    VT_REFSPECIALNOTATION = 14,
    VT_REFSICS = 16
  };
  /// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *refSerialId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSERIALID);
  }
  /// Specifies the type of document referenced.
  /// Example: /// Example: ABSTAT
  /// Constraints: Minimum length = 0, Maximum length = 56
  const ::flatbuffers::String *refType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFTYPE);
  }
  /// The originator of this reference.
  /// Example: /// Example: CENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 30
  const ::flatbuffers::String *refOriginator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFORIGINATOR);
  }
  /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *refTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFTS);
  }
  /// Serial number assigned to this reference.
  /// Example: /// Example: 1402001
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *refSerialNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSERIALNUM);
  }
  /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
  /// Example: /// Example: NOTAL
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *refSpecialNotation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSPECIALNOTATION);
  }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  /// Example: /// Example: ['RDU', 'C-123-92']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *refSICs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REFSICS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REFSERIALID) &&
           verifier.VerifyString(refSerialId()) &&
           VerifyOffset(verifier, VT_REFTYPE) &&
           verifier.VerifyString(refType()) &&
           VerifyOffset(verifier, VT_REFORIGINATOR) &&
           verifier.VerifyString(refOriginator()) &&
           VerifyOffset(verifier, VT_REFTS) &&
           verifier.VerifyString(refTs()) &&
           VerifyOffset(verifier, VT_REFSERIALNUM) &&
           verifier.VerifyString(refSerialNum()) &&
           VerifyOffset(verifier, VT_REFSPECIALNOTATION) &&
           verifier.VerifyString(refSpecialNotation()) &&
           VerifyOffset(verifier, VT_REFSICS) &&
           verifier.VerifyVector(refSICs()) &&
           verifier.VerifyVectorOfStrings(refSICs()) &&
           verifier.EndTable();
  }
};

struct DataLinkReferences_FullBuilder {
  typedef DataLinkReferences_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_refSerialId(::flatbuffers::Offset<::flatbuffers::String> refSerialId) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFSERIALID, refSerialId);
  }
  void add_refType(::flatbuffers::Offset<::flatbuffers::String> refType) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFTYPE, refType);
  }
  void add_refOriginator(::flatbuffers::Offset<::flatbuffers::String> refOriginator) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFORIGINATOR, refOriginator);
  }
  void add_refTs(::flatbuffers::Offset<::flatbuffers::String> refTs) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFTS, refTs);
  }
  void add_refSerialNum(::flatbuffers::Offset<::flatbuffers::String> refSerialNum) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFSERIALNUM, refSerialNum);
  }
  void add_refSpecialNotation(::flatbuffers::Offset<::flatbuffers::String> refSpecialNotation) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFSPECIALNOTATION, refSpecialNotation);
  }
  void add_refSICs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refSICs) {
    fbb_.AddOffset(DataLinkReferences_Full::VT_REFSICS, refSICs);
  }
  explicit DataLinkReferences_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkReferences_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkReferences_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkReferences_Full> CreateDataLinkReferences_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> refSerialId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refOriginator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refSerialNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refSpecialNotation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refSICs = 0) {
  DataLinkReferences_FullBuilder builder_(_fbb);
  builder_.add_refSICs(refSICs);
  builder_.add_refSpecialNotation(refSpecialNotation);
  builder_.add_refSerialNum(refSerialNum);
  builder_.add_refTs(refTs);
  builder_.add_refOriginator(refOriginator);
  builder_.add_refType(refType);
  builder_.add_refSerialId(refSerialId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkReferences_Full> CreateDataLinkReferences_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *refSerialId = nullptr,
    const char *refType = nullptr,
    const char *refOriginator = nullptr,
    const char *refTs = nullptr,
    const char *refSerialNum = nullptr,
    const char *refSpecialNotation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *refSICs = nullptr) {
  auto refSerialId__ = refSerialId ? _fbb.CreateString(refSerialId) : 0;
  auto refType__ = refType ? _fbb.CreateString(refType) : 0;
  auto refOriginator__ = refOriginator ? _fbb.CreateString(refOriginator) : 0;
  auto refTs__ = refTs ? _fbb.CreateString(refTs) : 0;
  auto refSerialNum__ = refSerialNum ? _fbb.CreateString(refSerialNum) : 0;
  auto refSpecialNotation__ = refSpecialNotation ? _fbb.CreateString(refSpecialNotation) : 0;
  auto refSICs__ = refSICs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*refSICs) : 0;
  return CreateDataLinkReferences_Full(
      _fbb,
      refSerialId__,
      refType__,
      refOriginator__,
      refTs__,
      refSerialNum__,
      refSpecialNotation__,
      refSICs__);
}

inline const DataLinkReferences_Full *GetDataLinkReferences_Full(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkReferences_Full>(buf);
}

inline const DataLinkReferences_Full *GetSizePrefixedDataLinkReferences_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkReferences_Full>(buf);
}

inline const char *DataLinkReferences_FullIdentifier() {
  return "DATA";
}

inline bool DataLinkReferences_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkReferences_FullIdentifier());
}

inline bool SizePrefixedDataLinkReferences_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkReferences_FullIdentifier(), true);
}

inline bool VerifyDataLinkReferences_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkReferences_Full>(DataLinkReferences_FullIdentifier());
}

inline bool VerifySizePrefixedDataLinkReferences_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkReferences_Full>(DataLinkReferences_FullIdentifier());
}

inline void FinishDataLinkReferences_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkReferences_Full> root) {
  fbb.Finish(root, DataLinkReferences_FullIdentifier());
}

inline void FinishSizePrefixedDataLinkReferences_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkReferences_Full> root) {
  fbb.FinishSizePrefixed(root, DataLinkReferences_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
