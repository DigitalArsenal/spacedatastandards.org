// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Site_Full;
struct Site_FullBuilder;

enum Site_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Site_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Site_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Site_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Site_Full_dataMode_Enum_EXERCISE = 3,
  Site_Full_dataMode_Enum_MIN = Site_Full_dataMode_Enum_REAL,
  Site_Full_dataMode_Enum_MAX = Site_Full_dataMode_Enum_EXERCISE
};

inline const Site_Full_dataMode_Enum (&EnumValuesSite_Full_dataMode_Enum())[4] {
  static const Site_Full_dataMode_Enum values[] = {
    Site_Full_dataMode_Enum_REAL,
    Site_Full_dataMode_Enum_TEST,
    Site_Full_dataMode_Enum_SIMULATED,
    Site_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSite_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSite_Full_dataMode_Enum(Site_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Site_Full_dataMode_Enum_REAL, Site_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSite_Full_dataMode_Enum()[index];
}

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
struct Site_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Site_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ENTITY = 6,
    VT_IDENTITY = 8,
    VT_IDPARENTSITE = 10,
    VT_CLASSIFICATIONMARKING = 12,
    VT_ORIGSITEID = 14,
    VT_ORIGLZID = 16,
    VT_PIN = 18,
    VT_TYPE = 20,
    VT_USAGE = 22,
    VT_LZUSAGE = 24,
    VT_NAME = 26,
    VT_COORDDATUM = 28,
    VT_COORD = 30,
    VT_COORDDERIVACC = 32,
    VT_OSUFFIX = 34,
    VT_IATA = 36,
    VT_ICAO = 38,
    VT_FAA = 40,
    VT_AIRDEFAREA = 42,
    VT_UTM = 44,
    VT_MILGRIDSYS = 46,
    VT_MILGRID = 48,
    VT_CATCODE = 50,
    VT_CATTEXT = 52,
    VT_WAC = 54,
    VT_POLSUBDIV = 56,
    VT_GEOAREA = 58,
    VT_GEOIDALMSLSEP = 60,
    VT_ALLEGIANCE = 62,
    VT_ALTALLEGIANCE = 64,
    VT_CLASSRATING = 66,
    VT_FPA = 68,
    VT_BENUMBER = 70,
    VT_RUNWAYS = 72,
    VT_MAXRUNWAYLENGTH = 74,
    VT_CONDITION = 76,
    VT_CONDITIONAVAIL = 78,
    VT_OPERSTATUS = 80,
    VT_GRADE = 82,
    VT_ACTIVITY = 84,
    VT_FUNCTPRIMARY = 86,
    VT_MSNPRIMARY = 88,
    VT_MSNPRIMARYSPEC = 90,
    VT_NUCCAP = 92,
    VT_IDENT = 94,
    VT_ELEVMSL = 96,
    VT_ELEVMSLCONFLVL = 98,
    VT_ELEVMSLDERIVACC = 100,
    VT_VEGHT = 102,
    VT_VEGTYPE = 104,
    VT_POPAREA = 106,
    VT_POPAREAPROX = 108,
    VT_NOTES = 110,
    VT_RESPROD = 112,
    VT_EVAL = 114,
    VT_REVIEWDATE = 116,
    VT_RECSTATUS = 118,
    VT_SYMCODE = 120,
    VT_REFERENCEDOC = 122,
    VT_SITEREMARKS = 124,
    VT_CREATEDAT = 126,
    VT_CREATEDBY = 128,
    VT_UPDATEDAT = 130,
    VT_UPDATEDBY = 132,
    VT_SOURCE = 134,
    VT_ORIGIN = 136,
    VT_ORIGNETWORK = 138,
    VT_DATAMODE = 140
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SITE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// Unique identifier of the Parent Site record associated with this Site record.
  /// Example: /// Example: ID-Parent-Site
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idParentSite() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDPARENTSITE);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the Site record from the originating system.
  /// Example: /// Example: ORIG-SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origSiteID() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSITEID);
  }
  /// Unique identifier of the LZ record from the originating system.
  /// Example: /// Example: ORIG-LZ-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origLzId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGLZID);
  }
  /// Site number of a specific electronic site or its associated equipment.
  /// Example: /// Example: 25200
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *pin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PIN);
  }
  /// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
  /// Example: /// Example: AIRBASE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *usage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USAGE);
  }
  /// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
  /// AF - Airfield
  /// FD - Field
  /// HC - High Crop.  1 meter and over.
  /// HY - Highway
  /// LB - Lake Bed
  /// LC - Low Crop.  0-1 meters
  /// O - Other. Explain In Remarks.
  /// PD - Paddy
  /// PK - Park
  /// PS - Pasture
  /// RB - Riverbed
  /// SP - Sport Field
  /// U - Unknown
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: AF
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *lzUsage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LZUSAGE);
  }
  /// The name of this site.
  /// Example: /// Example: Site Name
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *coordDatum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORDDATUM);
  }
  /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  const ::flatbuffers::String *coord() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORD);
  }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  double coordDerivAcc() const {
    return GetField<double>(VT_COORDDERIVACC, 0.0);
  }
  /// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
  /// Example: /// Example: BB002
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *osuffix() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OSUFFIX);
  }
  /// The International Air Transport Association (IATA) code of this site, if applicable.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *iata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IATA);
  }
  /// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
  /// Example: /// Example: ICA1
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *icao() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICAO);
  }
  /// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *faa() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAA);
  }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *airDefArea() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRDEFAREA);
  }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *utm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UTM);
  }
  /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator.
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *milGridSys() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILGRIDSYS);
  }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *milGrid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MILGRID);
  }
  /// The category code that represents the associated site purpose within the target system.
  /// Example: /// Example: 20345
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *catCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATCODE);
  }
  /// Textual Description of Site catCode.
  /// Example: /// Example: Radar Facility, General
  /// Constraints: Minimum length = 0, Maximum length = 148
  const ::flatbuffers::String *catText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATTEXT);
  }
  /// World Aeronautical Chart identifier for the area in which a designated place is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *wac() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WAC);
  }
  /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZO7
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *polSubdiv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POLSUBDIV);
  }
  /// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: E2
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *geoArea() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOAREA);
  }
  /// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  double geoidalMslSep() const {
    return GetField<double>(VT_GEOIDALMSLSEP, 0.0);
  }
  /// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *allegiance() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALLEGIANCE);
  }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *altAllegiance() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTALLEGIANCE);
  }
  /// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  /// 0 - Does not meet criteria above
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *classRating() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSRATING);
  }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: EOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *fpa() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FPA);
  }
  /// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *beNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BENUMBER);
  }
  /// The number of runways at the site, if applicable.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t runways() const {
    return GetField<int32_t>(VT_RUNWAYS, 0);
  }
  /// The length of the longest runway at this site, if applicable, in meters.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  int32_t maxRunwayLength() const {
    return GetField<int32_t>(VT_MAXRUNWAYLENGTH, 0);
  }
  /// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *condition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONDITION);
  }
  /// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *conditionAvail() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONDITIONAVAIL);
  }
  /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *operStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERSTATUS);
  }
  /// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t grade() const {
    return GetField<int32_t>(VT_GRADE, 0);
  }
  /// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OCC
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *activity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIVITY);
  }
  /// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: JG
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *functPrimary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FUNCTPRIMARY);
  }
  /// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AA
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *msnPrimary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNPRIMARY);
  }
  /// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AB
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *msnPrimarySpec() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNPRIMARYSPEC);
  }
  /// A sites ability to conduct nuclear warfare. Valid Values are:
  /// A - Nuclear Ammo Or Warheads Available
  /// N - No Nuclear Offense
  /// O - Other. Explain in Remarks
  /// U - Unknown
  /// W - Nuclear Weapons Available
  /// Y - Nuclear Warfare Offensive Capability
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *nucCap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NUCCAP);
  }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *ident() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENT);
  }
  /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  double elevMsl() const {
    return GetField<double>(VT_ELEVMSL, 0.0);
  }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  int32_t elevMslConfLvl() const {
    return GetField<int32_t>(VT_ELEVMSLCONFLVL, 0);
  }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  double elevMslDerivAcc() const {
    return GetField<double>(VT_ELEVMSLDERIVACC, 0.0);
  }
  /// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  double vegHt() const {
    return GetField<double>(VT_VEGHT, 0.0);
  }
  /// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: FR
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *vegType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VEGTYPE);
  }
  /// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool popArea() const {
    return GetField<uint8_t>(VT_POPAREA, 0) != 0;
  }
  /// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  double popAreaProx() const {
    return GetField<double>(VT_POPAREAPROX, 0.0);
  }
  /// Optional notes/comments for the site.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *resProd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESPROD);
  }
  /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t eval() const {
    return GetField<int32_t>(VT_EVAL, 0);
  }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *reviewDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REVIEWDATE);
  }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *recStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECSTATUS);
  }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *symCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMCODE);
  }
  /// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *referenceDoc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFERENCEDOC);
  }
  /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *siteRemarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SITEREMARKS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Site_Full_dataMode_Enum dataMode() const {
    return static_cast<Site_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_IDPARENTSITE) &&
           verifier.VerifyString(idParentSite()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ORIGSITEID) &&
           verifier.VerifyString(origSiteID()) &&
           VerifyOffset(verifier, VT_ORIGLZID) &&
           verifier.VerifyString(origLzId()) &&
           VerifyOffset(verifier, VT_PIN) &&
           verifier.VerifyString(pin()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_USAGE) &&
           verifier.VerifyString(usage()) &&
           VerifyOffset(verifier, VT_LZUSAGE) &&
           verifier.VerifyString(lzUsage()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_COORDDATUM) &&
           verifier.VerifyString(coordDatum()) &&
           VerifyOffset(verifier, VT_COORD) &&
           verifier.VerifyString(coord()) &&
           VerifyField<double>(verifier, VT_COORDDERIVACC, 8) &&
           VerifyOffset(verifier, VT_OSUFFIX) &&
           verifier.VerifyString(osuffix()) &&
           VerifyOffset(verifier, VT_IATA) &&
           verifier.VerifyString(iata()) &&
           VerifyOffset(verifier, VT_ICAO) &&
           verifier.VerifyString(icao()) &&
           VerifyOffset(verifier, VT_FAA) &&
           verifier.VerifyString(faa()) &&
           VerifyOffset(verifier, VT_AIRDEFAREA) &&
           verifier.VerifyString(airDefArea()) &&
           VerifyOffset(verifier, VT_UTM) &&
           verifier.VerifyString(utm()) &&
           VerifyOffset(verifier, VT_MILGRIDSYS) &&
           verifier.VerifyString(milGridSys()) &&
           VerifyOffset(verifier, VT_MILGRID) &&
           verifier.VerifyString(milGrid()) &&
           VerifyOffset(verifier, VT_CATCODE) &&
           verifier.VerifyString(catCode()) &&
           VerifyOffset(verifier, VT_CATTEXT) &&
           verifier.VerifyString(catText()) &&
           VerifyOffset(verifier, VT_WAC) &&
           verifier.VerifyString(wac()) &&
           VerifyOffset(verifier, VT_POLSUBDIV) &&
           verifier.VerifyString(polSubdiv()) &&
           VerifyOffset(verifier, VT_GEOAREA) &&
           verifier.VerifyString(geoArea()) &&
           VerifyField<double>(verifier, VT_GEOIDALMSLSEP, 8) &&
           VerifyOffset(verifier, VT_ALLEGIANCE) &&
           verifier.VerifyString(allegiance()) &&
           VerifyOffset(verifier, VT_ALTALLEGIANCE) &&
           verifier.VerifyString(altAllegiance()) &&
           VerifyOffset(verifier, VT_CLASSRATING) &&
           verifier.VerifyString(classRating()) &&
           VerifyOffset(verifier, VT_FPA) &&
           verifier.VerifyString(fpa()) &&
           VerifyOffset(verifier, VT_BENUMBER) &&
           verifier.VerifyString(beNumber()) &&
           VerifyField<int32_t>(verifier, VT_RUNWAYS, 4) &&
           VerifyField<int32_t>(verifier, VT_MAXRUNWAYLENGTH, 4) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           verifier.VerifyString(condition()) &&
           VerifyOffset(verifier, VT_CONDITIONAVAIL) &&
           verifier.VerifyString(conditionAvail()) &&
           VerifyOffset(verifier, VT_OPERSTATUS) &&
           verifier.VerifyString(operStatus()) &&
           VerifyField<int32_t>(verifier, VT_GRADE, 4) &&
           VerifyOffset(verifier, VT_ACTIVITY) &&
           verifier.VerifyString(activity()) &&
           VerifyOffset(verifier, VT_FUNCTPRIMARY) &&
           verifier.VerifyString(functPrimary()) &&
           VerifyOffset(verifier, VT_MSNPRIMARY) &&
           verifier.VerifyString(msnPrimary()) &&
           VerifyOffset(verifier, VT_MSNPRIMARYSPEC) &&
           verifier.VerifyString(msnPrimarySpec()) &&
           VerifyOffset(verifier, VT_NUCCAP) &&
           verifier.VerifyString(nucCap()) &&
           VerifyOffset(verifier, VT_IDENT) &&
           verifier.VerifyString(ident()) &&
           VerifyField<double>(verifier, VT_ELEVMSL, 8) &&
           VerifyField<int32_t>(verifier, VT_ELEVMSLCONFLVL, 4) &&
           VerifyField<double>(verifier, VT_ELEVMSLDERIVACC, 8) &&
           VerifyField<double>(verifier, VT_VEGHT, 8) &&
           VerifyOffset(verifier, VT_VEGTYPE) &&
           verifier.VerifyString(vegType()) &&
           VerifyField<uint8_t>(verifier, VT_POPAREA, 1) &&
           VerifyField<double>(verifier, VT_POPAREAPROX, 8) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_RESPROD) &&
           verifier.VerifyString(resProd()) &&
           VerifyField<int32_t>(verifier, VT_EVAL, 4) &&
           VerifyOffset(verifier, VT_REVIEWDATE) &&
           verifier.VerifyString(reviewDate()) &&
           VerifyOffset(verifier, VT_RECSTATUS) &&
           verifier.VerifyString(recStatus()) &&
           VerifyOffset(verifier, VT_SYMCODE) &&
           verifier.VerifyString(symCode()) &&
           VerifyOffset(verifier, VT_REFERENCEDOC) &&
           verifier.VerifyString(referenceDoc()) &&
           VerifyOffset(verifier, VT_SITEREMARKS) &&
           verifier.VerifyVector(siteRemarks()) &&
           verifier.VerifyVectorOfStrings(siteRemarks()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Site_FullBuilder {
  typedef Site_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Site_Full::VT_ID, id);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Site_Full::VT_ENTITY, entity);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Site_Full::VT_IDENTITY, idEntity);
  }
  void add_idParentSite(::flatbuffers::Offset<::flatbuffers::String> idParentSite) {
    fbb_.AddOffset(Site_Full::VT_IDPARENTSITE, idParentSite);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Site_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_origSiteID(::flatbuffers::Offset<::flatbuffers::String> origSiteID) {
    fbb_.AddOffset(Site_Full::VT_ORIGSITEID, origSiteID);
  }
  void add_origLzId(::flatbuffers::Offset<::flatbuffers::String> origLzId) {
    fbb_.AddOffset(Site_Full::VT_ORIGLZID, origLzId);
  }
  void add_pin(::flatbuffers::Offset<::flatbuffers::String> pin) {
    fbb_.AddOffset(Site_Full::VT_PIN, pin);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Site_Full::VT_TYPE, type);
  }
  void add_usage(::flatbuffers::Offset<::flatbuffers::String> usage) {
    fbb_.AddOffset(Site_Full::VT_USAGE, usage);
  }
  void add_lzUsage(::flatbuffers::Offset<::flatbuffers::String> lzUsage) {
    fbb_.AddOffset(Site_Full::VT_LZUSAGE, lzUsage);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Site_Full::VT_NAME, name);
  }
  void add_coordDatum(::flatbuffers::Offset<::flatbuffers::String> coordDatum) {
    fbb_.AddOffset(Site_Full::VT_COORDDATUM, coordDatum);
  }
  void add_coord(::flatbuffers::Offset<::flatbuffers::String> coord) {
    fbb_.AddOffset(Site_Full::VT_COORD, coord);
  }
  void add_coordDerivAcc(double coordDerivAcc) {
    fbb_.AddElement<double>(Site_Full::VT_COORDDERIVACC, coordDerivAcc, 0.0);
  }
  void add_osuffix(::flatbuffers::Offset<::flatbuffers::String> osuffix) {
    fbb_.AddOffset(Site_Full::VT_OSUFFIX, osuffix);
  }
  void add_iata(::flatbuffers::Offset<::flatbuffers::String> iata) {
    fbb_.AddOffset(Site_Full::VT_IATA, iata);
  }
  void add_icao(::flatbuffers::Offset<::flatbuffers::String> icao) {
    fbb_.AddOffset(Site_Full::VT_ICAO, icao);
  }
  void add_faa(::flatbuffers::Offset<::flatbuffers::String> faa) {
    fbb_.AddOffset(Site_Full::VT_FAA, faa);
  }
  void add_airDefArea(::flatbuffers::Offset<::flatbuffers::String> airDefArea) {
    fbb_.AddOffset(Site_Full::VT_AIRDEFAREA, airDefArea);
  }
  void add_utm(::flatbuffers::Offset<::flatbuffers::String> utm) {
    fbb_.AddOffset(Site_Full::VT_UTM, utm);
  }
  void add_milGridSys(::flatbuffers::Offset<::flatbuffers::String> milGridSys) {
    fbb_.AddOffset(Site_Full::VT_MILGRIDSYS, milGridSys);
  }
  void add_milGrid(::flatbuffers::Offset<::flatbuffers::String> milGrid) {
    fbb_.AddOffset(Site_Full::VT_MILGRID, milGrid);
  }
  void add_catCode(::flatbuffers::Offset<::flatbuffers::String> catCode) {
    fbb_.AddOffset(Site_Full::VT_CATCODE, catCode);
  }
  void add_catText(::flatbuffers::Offset<::flatbuffers::String> catText) {
    fbb_.AddOffset(Site_Full::VT_CATTEXT, catText);
  }
  void add_wac(::flatbuffers::Offset<::flatbuffers::String> wac) {
    fbb_.AddOffset(Site_Full::VT_WAC, wac);
  }
  void add_polSubdiv(::flatbuffers::Offset<::flatbuffers::String> polSubdiv) {
    fbb_.AddOffset(Site_Full::VT_POLSUBDIV, polSubdiv);
  }
  void add_geoArea(::flatbuffers::Offset<::flatbuffers::String> geoArea) {
    fbb_.AddOffset(Site_Full::VT_GEOAREA, geoArea);
  }
  void add_geoidalMslSep(double geoidalMslSep) {
    fbb_.AddElement<double>(Site_Full::VT_GEOIDALMSLSEP, geoidalMslSep, 0.0);
  }
  void add_allegiance(::flatbuffers::Offset<::flatbuffers::String> allegiance) {
    fbb_.AddOffset(Site_Full::VT_ALLEGIANCE, allegiance);
  }
  void add_altAllegiance(::flatbuffers::Offset<::flatbuffers::String> altAllegiance) {
    fbb_.AddOffset(Site_Full::VT_ALTALLEGIANCE, altAllegiance);
  }
  void add_classRating(::flatbuffers::Offset<::flatbuffers::String> classRating) {
    fbb_.AddOffset(Site_Full::VT_CLASSRATING, classRating);
  }
  void add_fpa(::flatbuffers::Offset<::flatbuffers::String> fpa) {
    fbb_.AddOffset(Site_Full::VT_FPA, fpa);
  }
  void add_beNumber(::flatbuffers::Offset<::flatbuffers::String> beNumber) {
    fbb_.AddOffset(Site_Full::VT_BENUMBER, beNumber);
  }
  void add_runways(int32_t runways) {
    fbb_.AddElement<int32_t>(Site_Full::VT_RUNWAYS, runways, 0);
  }
  void add_maxRunwayLength(int32_t maxRunwayLength) {
    fbb_.AddElement<int32_t>(Site_Full::VT_MAXRUNWAYLENGTH, maxRunwayLength, 0);
  }
  void add_condition(::flatbuffers::Offset<::flatbuffers::String> condition) {
    fbb_.AddOffset(Site_Full::VT_CONDITION, condition);
  }
  void add_conditionAvail(::flatbuffers::Offset<::flatbuffers::String> conditionAvail) {
    fbb_.AddOffset(Site_Full::VT_CONDITIONAVAIL, conditionAvail);
  }
  void add_operStatus(::flatbuffers::Offset<::flatbuffers::String> operStatus) {
    fbb_.AddOffset(Site_Full::VT_OPERSTATUS, operStatus);
  }
  void add_grade(int32_t grade) {
    fbb_.AddElement<int32_t>(Site_Full::VT_GRADE, grade, 0);
  }
  void add_activity(::flatbuffers::Offset<::flatbuffers::String> activity) {
    fbb_.AddOffset(Site_Full::VT_ACTIVITY, activity);
  }
  void add_functPrimary(::flatbuffers::Offset<::flatbuffers::String> functPrimary) {
    fbb_.AddOffset(Site_Full::VT_FUNCTPRIMARY, functPrimary);
  }
  void add_msnPrimary(::flatbuffers::Offset<::flatbuffers::String> msnPrimary) {
    fbb_.AddOffset(Site_Full::VT_MSNPRIMARY, msnPrimary);
  }
  void add_msnPrimarySpec(::flatbuffers::Offset<::flatbuffers::String> msnPrimarySpec) {
    fbb_.AddOffset(Site_Full::VT_MSNPRIMARYSPEC, msnPrimarySpec);
  }
  void add_nucCap(::flatbuffers::Offset<::flatbuffers::String> nucCap) {
    fbb_.AddOffset(Site_Full::VT_NUCCAP, nucCap);
  }
  void add_ident(::flatbuffers::Offset<::flatbuffers::String> ident) {
    fbb_.AddOffset(Site_Full::VT_IDENT, ident);
  }
  void add_elevMsl(double elevMsl) {
    fbb_.AddElement<double>(Site_Full::VT_ELEVMSL, elevMsl, 0.0);
  }
  void add_elevMslConfLvl(int32_t elevMslConfLvl) {
    fbb_.AddElement<int32_t>(Site_Full::VT_ELEVMSLCONFLVL, elevMslConfLvl, 0);
  }
  void add_elevMslDerivAcc(double elevMslDerivAcc) {
    fbb_.AddElement<double>(Site_Full::VT_ELEVMSLDERIVACC, elevMslDerivAcc, 0.0);
  }
  void add_vegHt(double vegHt) {
    fbb_.AddElement<double>(Site_Full::VT_VEGHT, vegHt, 0.0);
  }
  void add_vegType(::flatbuffers::Offset<::flatbuffers::String> vegType) {
    fbb_.AddOffset(Site_Full::VT_VEGTYPE, vegType);
  }
  void add_popArea(bool popArea) {
    fbb_.AddElement<uint8_t>(Site_Full::VT_POPAREA, static_cast<uint8_t>(popArea), 0);
  }
  void add_popAreaProx(double popAreaProx) {
    fbb_.AddElement<double>(Site_Full::VT_POPAREAPROX, popAreaProx, 0.0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(Site_Full::VT_NOTES, notes);
  }
  void add_resProd(::flatbuffers::Offset<::flatbuffers::String> resProd) {
    fbb_.AddOffset(Site_Full::VT_RESPROD, resProd);
  }
  void add_eval(int32_t eval) {
    fbb_.AddElement<int32_t>(Site_Full::VT_EVAL, eval, 0);
  }
  void add_reviewDate(::flatbuffers::Offset<::flatbuffers::String> reviewDate) {
    fbb_.AddOffset(Site_Full::VT_REVIEWDATE, reviewDate);
  }
  void add_recStatus(::flatbuffers::Offset<::flatbuffers::String> recStatus) {
    fbb_.AddOffset(Site_Full::VT_RECSTATUS, recStatus);
  }
  void add_symCode(::flatbuffers::Offset<::flatbuffers::String> symCode) {
    fbb_.AddOffset(Site_Full::VT_SYMCODE, symCode);
  }
  void add_referenceDoc(::flatbuffers::Offset<::flatbuffers::String> referenceDoc) {
    fbb_.AddOffset(Site_Full::VT_REFERENCEDOC, referenceDoc);
  }
  void add_siteRemarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> siteRemarks) {
    fbb_.AddOffset(Site_Full::VT_SITEREMARKS, siteRemarks);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Site_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Site_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Site_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Site_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Site_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Site_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Site_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Site_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Site_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Site_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Site_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Site_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Site_Full> CreateSite_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idParentSite = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSiteID = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origLzId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> usage = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lzUsage = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coordDatum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coord = 0,
    double coordDerivAcc = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> osuffix = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> icao = 0,
    ::flatbuffers::Offset<::flatbuffers::String> faa = 0,
    ::flatbuffers::Offset<::flatbuffers::String> airDefArea = 0,
    ::flatbuffers::Offset<::flatbuffers::String> utm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> milGridSys = 0,
    ::flatbuffers::Offset<::flatbuffers::String> milGrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> catCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> catText = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wac = 0,
    ::flatbuffers::Offset<::flatbuffers::String> polSubdiv = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoArea = 0,
    double geoidalMslSep = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> allegiance = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altAllegiance = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classRating = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fpa = 0,
    ::flatbuffers::Offset<::flatbuffers::String> beNumber = 0,
    int32_t runways = 0,
    int32_t maxRunwayLength = 0,
    ::flatbuffers::Offset<::flatbuffers::String> condition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> conditionAvail = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operStatus = 0,
    int32_t grade = 0,
    ::flatbuffers::Offset<::flatbuffers::String> activity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> functPrimary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnPrimary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnPrimarySpec = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nucCap = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ident = 0,
    double elevMsl = 0.0,
    int32_t elevMslConfLvl = 0,
    double elevMslDerivAcc = 0.0,
    double vegHt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> vegType = 0,
    bool popArea = false,
    double popAreaProx = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resProd = 0,
    int32_t eval = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reviewDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> recStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> referenceDoc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> siteRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Site_Full_dataMode_Enum dataMode = Site_Full_dataMode_Enum_REAL) {
  Site_FullBuilder builder_(_fbb);
  builder_.add_popAreaProx(popAreaProx);
  builder_.add_vegHt(vegHt);
  builder_.add_elevMslDerivAcc(elevMslDerivAcc);
  builder_.add_elevMsl(elevMsl);
  builder_.add_geoidalMslSep(geoidalMslSep);
  builder_.add_coordDerivAcc(coordDerivAcc);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_siteRemarks(siteRemarks);
  builder_.add_referenceDoc(referenceDoc);
  builder_.add_symCode(symCode);
  builder_.add_recStatus(recStatus);
  builder_.add_reviewDate(reviewDate);
  builder_.add_eval(eval);
  builder_.add_resProd(resProd);
  builder_.add_notes(notes);
  builder_.add_vegType(vegType);
  builder_.add_elevMslConfLvl(elevMslConfLvl);
  builder_.add_ident(ident);
  builder_.add_nucCap(nucCap);
  builder_.add_msnPrimarySpec(msnPrimarySpec);
  builder_.add_msnPrimary(msnPrimary);
  builder_.add_functPrimary(functPrimary);
  builder_.add_activity(activity);
  builder_.add_grade(grade);
  builder_.add_operStatus(operStatus);
  builder_.add_conditionAvail(conditionAvail);
  builder_.add_condition(condition);
  builder_.add_maxRunwayLength(maxRunwayLength);
  builder_.add_runways(runways);
  builder_.add_beNumber(beNumber);
  builder_.add_fpa(fpa);
  builder_.add_classRating(classRating);
  builder_.add_altAllegiance(altAllegiance);
  builder_.add_allegiance(allegiance);
  builder_.add_geoArea(geoArea);
  builder_.add_polSubdiv(polSubdiv);
  builder_.add_wac(wac);
  builder_.add_catText(catText);
  builder_.add_catCode(catCode);
  builder_.add_milGrid(milGrid);
  builder_.add_milGridSys(milGridSys);
  builder_.add_utm(utm);
  builder_.add_airDefArea(airDefArea);
  builder_.add_faa(faa);
  builder_.add_icao(icao);
  builder_.add_iata(iata);
  builder_.add_osuffix(osuffix);
  builder_.add_coord(coord);
  builder_.add_coordDatum(coordDatum);
  builder_.add_name(name);
  builder_.add_lzUsage(lzUsage);
  builder_.add_usage(usage);
  builder_.add_type(type);
  builder_.add_pin(pin);
  builder_.add_origLzId(origLzId);
  builder_.add_origSiteID(origSiteID);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idParentSite(idParentSite);
  builder_.add_idEntity(idEntity);
  builder_.add_entity(entity);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_popArea(popArea);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Site_Full> CreateSite_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *entity = nullptr,
    const char *idEntity = nullptr,
    const char *idParentSite = nullptr,
    const char *classificationMarking = nullptr,
    const char *origSiteID = nullptr,
    const char *origLzId = nullptr,
    const char *pin = nullptr,
    const char *type = nullptr,
    const char *usage = nullptr,
    const char *lzUsage = nullptr,
    const char *name = nullptr,
    const char *coordDatum = nullptr,
    const char *coord = nullptr,
    double coordDerivAcc = 0.0,
    const char *osuffix = nullptr,
    const char *iata = nullptr,
    const char *icao = nullptr,
    const char *faa = nullptr,
    const char *airDefArea = nullptr,
    const char *utm = nullptr,
    const char *milGridSys = nullptr,
    const char *milGrid = nullptr,
    const char *catCode = nullptr,
    const char *catText = nullptr,
    const char *wac = nullptr,
    const char *polSubdiv = nullptr,
    const char *geoArea = nullptr,
    double geoidalMslSep = 0.0,
    const char *allegiance = nullptr,
    const char *altAllegiance = nullptr,
    const char *classRating = nullptr,
    const char *fpa = nullptr,
    const char *beNumber = nullptr,
    int32_t runways = 0,
    int32_t maxRunwayLength = 0,
    const char *condition = nullptr,
    const char *conditionAvail = nullptr,
    const char *operStatus = nullptr,
    int32_t grade = 0,
    const char *activity = nullptr,
    const char *functPrimary = nullptr,
    const char *msnPrimary = nullptr,
    const char *msnPrimarySpec = nullptr,
    const char *nucCap = nullptr,
    const char *ident = nullptr,
    double elevMsl = 0.0,
    int32_t elevMslConfLvl = 0,
    double elevMslDerivAcc = 0.0,
    double vegHt = 0.0,
    const char *vegType = nullptr,
    bool popArea = false,
    double popAreaProx = 0.0,
    const char *notes = nullptr,
    const char *resProd = nullptr,
    int32_t eval = 0,
    const char *reviewDate = nullptr,
    const char *recStatus = nullptr,
    const char *symCode = nullptr,
    const char *referenceDoc = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *siteRemarks = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Site_Full_dataMode_Enum dataMode = Site_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto idParentSite__ = idParentSite ? _fbb.CreateString(idParentSite) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto origSiteID__ = origSiteID ? _fbb.CreateString(origSiteID) : 0;
  auto origLzId__ = origLzId ? _fbb.CreateString(origLzId) : 0;
  auto pin__ = pin ? _fbb.CreateString(pin) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto usage__ = usage ? _fbb.CreateString(usage) : 0;
  auto lzUsage__ = lzUsage ? _fbb.CreateString(lzUsage) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto coordDatum__ = coordDatum ? _fbb.CreateString(coordDatum) : 0;
  auto coord__ = coord ? _fbb.CreateString(coord) : 0;
  auto osuffix__ = osuffix ? _fbb.CreateString(osuffix) : 0;
  auto iata__ = iata ? _fbb.CreateString(iata) : 0;
  auto icao__ = icao ? _fbb.CreateString(icao) : 0;
  auto faa__ = faa ? _fbb.CreateString(faa) : 0;
  auto airDefArea__ = airDefArea ? _fbb.CreateString(airDefArea) : 0;
  auto utm__ = utm ? _fbb.CreateString(utm) : 0;
  auto milGridSys__ = milGridSys ? _fbb.CreateString(milGridSys) : 0;
  auto milGrid__ = milGrid ? _fbb.CreateString(milGrid) : 0;
  auto catCode__ = catCode ? _fbb.CreateString(catCode) : 0;
  auto catText__ = catText ? _fbb.CreateString(catText) : 0;
  auto wac__ = wac ? _fbb.CreateString(wac) : 0;
  auto polSubdiv__ = polSubdiv ? _fbb.CreateString(polSubdiv) : 0;
  auto geoArea__ = geoArea ? _fbb.CreateString(geoArea) : 0;
  auto allegiance__ = allegiance ? _fbb.CreateString(allegiance) : 0;
  auto altAllegiance__ = altAllegiance ? _fbb.CreateString(altAllegiance) : 0;
  auto classRating__ = classRating ? _fbb.CreateString(classRating) : 0;
  auto fpa__ = fpa ? _fbb.CreateString(fpa) : 0;
  auto beNumber__ = beNumber ? _fbb.CreateString(beNumber) : 0;
  auto condition__ = condition ? _fbb.CreateString(condition) : 0;
  auto conditionAvail__ = conditionAvail ? _fbb.CreateString(conditionAvail) : 0;
  auto operStatus__ = operStatus ? _fbb.CreateString(operStatus) : 0;
  auto activity__ = activity ? _fbb.CreateString(activity) : 0;
  auto functPrimary__ = functPrimary ? _fbb.CreateString(functPrimary) : 0;
  auto msnPrimary__ = msnPrimary ? _fbb.CreateString(msnPrimary) : 0;
  auto msnPrimarySpec__ = msnPrimarySpec ? _fbb.CreateString(msnPrimarySpec) : 0;
  auto nucCap__ = nucCap ? _fbb.CreateString(nucCap) : 0;
  auto ident__ = ident ? _fbb.CreateString(ident) : 0;
  auto vegType__ = vegType ? _fbb.CreateString(vegType) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto resProd__ = resProd ? _fbb.CreateString(resProd) : 0;
  auto reviewDate__ = reviewDate ? _fbb.CreateString(reviewDate) : 0;
  auto recStatus__ = recStatus ? _fbb.CreateString(recStatus) : 0;
  auto symCode__ = symCode ? _fbb.CreateString(symCode) : 0;
  auto referenceDoc__ = referenceDoc ? _fbb.CreateString(referenceDoc) : 0;
  auto siteRemarks__ = siteRemarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*siteRemarks) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSite_Full(
      _fbb,
      id__,
      entity__,
      idEntity__,
      idParentSite__,
      classificationMarking__,
      origSiteID__,
      origLzId__,
      pin__,
      type__,
      usage__,
      lzUsage__,
      name__,
      coordDatum__,
      coord__,
      coordDerivAcc,
      osuffix__,
      iata__,
      icao__,
      faa__,
      airDefArea__,
      utm__,
      milGridSys__,
      milGrid__,
      catCode__,
      catText__,
      wac__,
      polSubdiv__,
      geoArea__,
      geoidalMslSep,
      allegiance__,
      altAllegiance__,
      classRating__,
      fpa__,
      beNumber__,
      runways,
      maxRunwayLength,
      condition__,
      conditionAvail__,
      operStatus__,
      grade,
      activity__,
      functPrimary__,
      msnPrimary__,
      msnPrimarySpec__,
      nucCap__,
      ident__,
      elevMsl,
      elevMslConfLvl,
      elevMslDerivAcc,
      vegHt,
      vegType__,
      popArea,
      popAreaProx,
      notes__,
      resProd__,
      eval,
      reviewDate__,
      recStatus__,
      symCode__,
      referenceDoc__,
      siteRemarks__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const Site_Full *GetSite_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Site_Full>(buf);
}

inline const Site_Full *GetSizePrefixedSite_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Site_Full>(buf);
}

inline const char *Site_FullIdentifier() {
  return "SITE";
}

inline bool Site_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Site_FullIdentifier());
}

inline bool SizePrefixedSite_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Site_FullIdentifier(), true);
}

inline bool VerifySite_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Site_Full>(Site_FullIdentifier());
}

inline bool VerifySizePrefixedSite_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Site_Full>(Site_FullIdentifier());
}

inline void FinishSite_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Site_Full> root) {
  fbb.Finish(root, Site_FullIdentifier());
}

inline void FinishSizePrefixedSite_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Site_Full> root) {
  fbb.FinishSizePrefixed(root, Site_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
