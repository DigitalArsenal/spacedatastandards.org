// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitThrusterStatus_Abridged;
struct OnorbitThrusterStatus_AbridgedBuilder;

enum OnorbitThrusterStatus_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnorbitThrusterStatus_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnorbitThrusterStatus_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnorbitThrusterStatus_Abridged_dataMode_Enum_EXERCISE = 3,
  OnorbitThrusterStatus_Abridged_dataMode_Enum_MIN = OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL,
  OnorbitThrusterStatus_Abridged_dataMode_Enum_MAX = OnorbitThrusterStatus_Abridged_dataMode_Enum_EXERCISE
};

inline const OnorbitThrusterStatus_Abridged_dataMode_Enum (&EnumValuesOnorbitThrusterStatus_Abridged_dataMode_Enum())[4] {
  static const OnorbitThrusterStatus_Abridged_dataMode_Enum values[] = {
    OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL,
    OnorbitThrusterStatus_Abridged_dataMode_Enum_TEST,
    OnorbitThrusterStatus_Abridged_dataMode_Enum_SIMULATED,
    OnorbitThrusterStatus_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnorbitThrusterStatus_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnorbitThrusterStatus_Abridged_dataMode_Enum(OnorbitThrusterStatus_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL, OnorbitThrusterStatus_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnorbitThrusterStatus_Abridged_dataMode_Enum()[index];
}

/// /// Status information for OnorbitThruster objects.
struct OnorbitThrusterStatus_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitThrusterStatus_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBITTHRUSTER = 8,
    VT_NAME = 10,
    VT_STATUSTIME = 12,
    VT_PROPMASSMIN = 14,
    VT_PROPMASSAVG = 16,
    VT_PROPMASSMEDIAN = 18,
    VT_PROPMASSMAX = 20,
    VT_FUELMASS = 22,
    VT_FUELMASSUNC = 24,
    VT_TOTALDELTAV = 26,
    VT_MINDELTAV = 28,
    VT_ESTDELTAV = 30,
    VT_MAXDELTAV = 32,
    VT_THRUSTMAX = 34,
    VT_ISP = 36,
    VT_OPERATIONAL = 38,
    VT_CREATEDAT = 40,
    VT_CREATEDBY = 42,
    VT_SOURCE = 44,
    VT_ORIGIN = 46,
    VT_ORIGNETWORK = 48,
    VT_DATAMODE = 50
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: af103c-1f917dc-002c1bd
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
  /// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOnorbitThruster() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBITTHRUSTER);
  }
  /// Identifier of this thruster.
  /// Example: /// Example: REA1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *statusTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUSTIME);
  }
  /// Minimum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double propMassMin() const {
    return GetField<double>(VT_PROPMASSMIN, 0.0);
  }
  /// Average available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 907.6
  /// Constraints: No constraints specified.
  double propMassAvg() const {
    return GetField<double>(VT_PROPMASSAVG, 0.0);
  }
  /// Median available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  double propMassMedian() const {
    return GetField<double>(VT_PROPMASSMEDIAN, 0.0);
  }
  /// Maximum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 2333.3
  /// Constraints: No constraints specified.
  double propMassMax() const {
    return GetField<double>(VT_PROPMASSMAX, 0.0);
  }
  /// Total fuel mass available for this thruster's type, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double fuelMass() const {
    return GetField<double>(VT_FUELMASS, 0.0);
  }
  /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double fuelMassUnc() const {
    return GetField<double>(VT_FUELMASSUNC, 0.0);
  }
  /// Total delta-velocity available for this thruster's type, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double totalDeltaV() const {
    return GetField<double>(VT_TOTALDELTAV, 0.0);
  }
  /// Minimum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double minDeltaV() const {
    return GetField<double>(VT_MINDELTAV, 0.0);
  }
  /// Estimated available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double estDeltaV() const {
    return GetField<double>(VT_ESTDELTAV, 0.0);
  }
  /// Maximum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  double maxDeltaV() const {
    return GetField<double>(VT_MAXDELTAV, 0.0);
  }
  /// Maximum available thrust for this thruster, in newtons.
  /// Example: /// Example: 22.1
  /// Constraints: No constraints specified.
  double thrustMax() const {
    return GetField<double>(VT_THRUSTMAX, 0.0);
  }
  /// Specific impulse for this thruster, in seconds.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  double isp() const {
    return GetField<double>(VT_ISP, 0.0);
  }
  /// Flag indicating if this thruster is operational.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool operational() const {
    return GetField<uint8_t>(VT_OPERATIONAL, 0) != 0;
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OnorbitThrusterStatus_Abridged_dataMode_Enum dataMode() const {
    return static_cast<OnorbitThrusterStatus_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBITTHRUSTER) &&
           verifier.VerifyString(idOnorbitThruster()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_STATUSTIME) &&
           verifier.VerifyString(statusTime()) &&
           VerifyField<double>(verifier, VT_PROPMASSMIN, 8) &&
           VerifyField<double>(verifier, VT_PROPMASSAVG, 8) &&
           VerifyField<double>(verifier, VT_PROPMASSMEDIAN, 8) &&
           VerifyField<double>(verifier, VT_PROPMASSMAX, 8) &&
           VerifyField<double>(verifier, VT_FUELMASS, 8) &&
           VerifyField<double>(verifier, VT_FUELMASSUNC, 8) &&
           VerifyField<double>(verifier, VT_TOTALDELTAV, 8) &&
           VerifyField<double>(verifier, VT_MINDELTAV, 8) &&
           VerifyField<double>(verifier, VT_ESTDELTAV, 8) &&
           VerifyField<double>(verifier, VT_MAXDELTAV, 8) &&
           VerifyField<double>(verifier, VT_THRUSTMAX, 8) &&
           VerifyField<double>(verifier, VT_ISP, 8) &&
           VerifyField<uint8_t>(verifier, VT_OPERATIONAL, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct OnorbitThrusterStatus_AbridgedBuilder {
  typedef OnorbitThrusterStatus_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnorbitThruster(::flatbuffers::Offset<::flatbuffers::String> idOnorbitThruster) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_IDONORBITTHRUSTER, idOnorbitThruster);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_NAME, name);
  }
  void add_statusTime(::flatbuffers::Offset<::flatbuffers::String> statusTime) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_STATUSTIME, statusTime);
  }
  void add_propMassMin(double propMassMin) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_PROPMASSMIN, propMassMin, 0.0);
  }
  void add_propMassAvg(double propMassAvg) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_PROPMASSAVG, propMassAvg, 0.0);
  }
  void add_propMassMedian(double propMassMedian) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_PROPMASSMEDIAN, propMassMedian, 0.0);
  }
  void add_propMassMax(double propMassMax) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_PROPMASSMAX, propMassMax, 0.0);
  }
  void add_fuelMass(double fuelMass) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_FUELMASS, fuelMass, 0.0);
  }
  void add_fuelMassUnc(double fuelMassUnc) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_FUELMASSUNC, fuelMassUnc, 0.0);
  }
  void add_totalDeltaV(double totalDeltaV) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_TOTALDELTAV, totalDeltaV, 0.0);
  }
  void add_minDeltaV(double minDeltaV) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_MINDELTAV, minDeltaV, 0.0);
  }
  void add_estDeltaV(double estDeltaV) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_ESTDELTAV, estDeltaV, 0.0);
  }
  void add_maxDeltaV(double maxDeltaV) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_MAXDELTAV, maxDeltaV, 0.0);
  }
  void add_thrustMax(double thrustMax) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_THRUSTMAX, thrustMax, 0.0);
  }
  void add_isp(double isp) {
    fbb_.AddElement<double>(OnorbitThrusterStatus_Abridged::VT_ISP, isp, 0.0);
  }
  void add_operational(bool operational) {
    fbb_.AddElement<uint8_t>(OnorbitThrusterStatus_Abridged::VT_OPERATIONAL, static_cast<uint8_t>(operational), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OnorbitThrusterStatus_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(OnorbitThrusterStatus_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnorbitThrusterStatus_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit OnorbitThrusterStatus_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged> CreateOnorbitThrusterStatus_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnorbitThruster = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> statusTime = 0,
    double propMassMin = 0.0,
    double propMassAvg = 0.0,
    double propMassMedian = 0.0,
    double propMassMax = 0.0,
    double fuelMass = 0.0,
    double fuelMassUnc = 0.0,
    double totalDeltaV = 0.0,
    double minDeltaV = 0.0,
    double estDeltaV = 0.0,
    double maxDeltaV = 0.0,
    double thrustMax = 0.0,
    double isp = 0.0,
    bool operational = false,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    OnorbitThrusterStatus_Abridged_dataMode_Enum dataMode = OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL) {
  OnorbitThrusterStatus_AbridgedBuilder builder_(_fbb);
  builder_.add_isp(isp);
  builder_.add_thrustMax(thrustMax);
  builder_.add_maxDeltaV(maxDeltaV);
  builder_.add_estDeltaV(estDeltaV);
  builder_.add_minDeltaV(minDeltaV);
  builder_.add_totalDeltaV(totalDeltaV);
  builder_.add_fuelMassUnc(fuelMassUnc);
  builder_.add_fuelMass(fuelMass);
  builder_.add_propMassMax(propMassMax);
  builder_.add_propMassMedian(propMassMedian);
  builder_.add_propMassAvg(propMassAvg);
  builder_.add_propMassMin(propMassMin);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_statusTime(statusTime);
  builder_.add_name(name);
  builder_.add_idOnorbitThruster(idOnorbitThruster);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_operational(operational);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged> CreateOnorbitThrusterStatus_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnorbitThruster = nullptr,
    const char *name = nullptr,
    const char *statusTime = nullptr,
    double propMassMin = 0.0,
    double propMassAvg = 0.0,
    double propMassMedian = 0.0,
    double propMassMax = 0.0,
    double fuelMass = 0.0,
    double fuelMassUnc = 0.0,
    double totalDeltaV = 0.0,
    double minDeltaV = 0.0,
    double estDeltaV = 0.0,
    double maxDeltaV = 0.0,
    double thrustMax = 0.0,
    double isp = 0.0,
    bool operational = false,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    OnorbitThrusterStatus_Abridged_dataMode_Enum dataMode = OnorbitThrusterStatus_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnorbitThruster__ = idOnorbitThruster ? _fbb.CreateString(idOnorbitThruster) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto statusTime__ = statusTime ? _fbb.CreateString(statusTime) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOnorbitThrusterStatus_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idOnorbitThruster__,
      name__,
      statusTime__,
      propMassMin,
      propMassAvg,
      propMassMedian,
      propMassMax,
      fuelMass,
      fuelMassUnc,
      totalDeltaV,
      minDeltaV,
      estDeltaV,
      maxDeltaV,
      thrustMax,
      isp,
      operational,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const OnorbitThrusterStatus_Abridged *GetOnorbitThrusterStatus_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitThrusterStatus_Abridged>(buf);
}

inline const OnorbitThrusterStatus_Abridged *GetSizePrefixedOnorbitThrusterStatus_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitThrusterStatus_Abridged>(buf);
}

inline const char *OnorbitThrusterStatus_AbridgedIdentifier() {
  return "ONOR";
}

inline bool OnorbitThrusterStatus_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitThrusterStatus_AbridgedIdentifier());
}

inline bool SizePrefixedOnorbitThrusterStatus_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitThrusterStatus_AbridgedIdentifier(), true);
}

inline bool VerifyOnorbitThrusterStatus_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitThrusterStatus_Abridged>(OnorbitThrusterStatus_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOnorbitThrusterStatus_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitThrusterStatus_Abridged>(OnorbitThrusterStatus_AbridgedIdentifier());
}

inline void FinishOnorbitThrusterStatus_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged> root) {
  fbb.Finish(root, OnorbitThrusterStatus_AbridgedIdentifier());
}

inline void FinishSizePrefixedOnorbitThrusterStatus_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitThrusterStatus_Abridged> root) {
  fbb.FinishSizePrefixed(root, OnorbitThrusterStatus_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
