// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirEventReceivers_Abridged;
struct AirEventReceivers_AbridgedBuilder;

/// /// Collection of receiver aircraft associated with this Air Event.
struct AirEventReceivers_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirEventReceivers_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDRECEIVERSORTIE = 4,
    VT_IDRECEIVERMISSION = 6,
    VT_IDRECEIVERAIRFIELD = 8,
    VT_EXTERNALRECEIVERID = 10,
    VT_RECEIVERCOORD = 12,
    VT_RECEIVERMDS = 14,
    VT_AMCRECEIVERMISSIONID = 16,
    VT_ALTRECEIVERMISSIONID = 18,
    VT_RECEIVERCALLSIGN = 20,
    VT_RECEIVEROWNER = 22,
    VT_RECEIVERPOC = 24,
    VT_RECEIVERLEGNUM = 26,
    VT_RECEIVERDEPLOYEDICAO = 28,
    VT_RECEIVERDELIVERYMETHOD = 30,
    VT_FUELON = 32,
    VT_RECEIVERCELLPOSITION = 34,
    VT_SEQUENCENUM = 36,
    VT_RECORG = 38,
    VT_NUMRECAIRCRAFT = 40,
    VT_RECEIVERFUELTYPE = 42,
    VT_RECEIVEREXERCISE = 44,
    VT_PACKAGEID = 46
  };
  /// The UDL ID of the aircraft sortie this receiver is associated with for this event.
  /// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idReceiverSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRECEIVERSORTIE);
  }
  /// The UDL ID of the mission this receiver is associated with for this event.
  /// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idReceiverMission() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRECEIVERMISSION);
  }
  /// The UDL ID of the airfield this receiver is associated with for this event.
  /// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idReceiverAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRECEIVERAIRFIELD);
  }
  /// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalReceiverId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALRECEIVERID);
  }
  /// Coordination record identifier of this receiver.
  /// Example: /// Example: TTC601
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *receiverCoord() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERCOORD);
  }
  /// The Model Design Series designation of this receiver.
  /// Example: /// Example: KC135R
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *receiverMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERMDS);
  }
  /// The Air Mobility Command (AMC) mission identifier of this receiver.
  /// Example: /// Example: 8PH000B1S052
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcReceiverMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCRECEIVERMISSIONID);
  }
  /// Alternate mission identifier of this receiver provided by source.
  /// Example: /// Example: 1UN05201L121
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *altReceiverMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTRECEIVERMISSIONID);
  }
  /// The call sign assigned to this receiver.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *receiverCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERCALLSIGN);
  }
  /// The wing or unit that owns this receiver.
  /// Example: /// Example: 117ARW
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *receiverOwner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVEROWNER);
  }
  /// The name and/or number of the point of contact for this receiver.
  /// Example: /// Example: JOHN SMITH (555)555-5555
  /// Constraints: Minimum length = 0, Maximum length = 68
  const ::flatbuffers::String *receiverPOC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERPOC);
  }
  /// Identifies the itinerary point of a mission that this receiver is linked to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  int32_t receiverLegNum() const {
    return GetField<int32_t>(VT_RECEIVERLEGNUM, 0);
  }
  /// Location the receiver is deployed to for an air refueling event.
  /// Example: /// Example: KOFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *receiverDeployedICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERDEPLOYEDICAO);
  }
  /// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
  /// Example: /// Example: DROGUE
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *receiverDeliveryMethod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERDELIVERYMETHOD);
  }
  /// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
  /// Example: /// Example: 15000000.1
  /// Constraints: No constraints specified.
  double fuelOn() const {
    return GetField<double>(VT_FUELON, 0.0);
  }
  /// Position of this receiver within a group of receivers in an air refueling event.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t receiverCellPosition() const {
    return GetField<int32_t>(VT_RECEIVERCELLPOSITION, 0);
  }
  /// Indicates the unique number by Unit ID, which identifies an air refueling event.
  /// Example: /// Example: 1018
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *sequenceNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEQUENCENUM);
  }
  /// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
  /// Example: /// Example: AMC
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *recOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECORG);
  }
  /// Number of aircraft contained within one receiver coordination record for an air refueling event.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t numRecAircraft() const {
    return GetField<int32_t>(VT_NUMRECAIRCRAFT, 0);
  }
  /// Type of fuel being transferred to the receiver in an air refueling event.
  /// Example: /// Example: JP8
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *receiverFuelType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERFUELTYPE);
  }
  /// Name of the receiver exercise associated with an air refueling event.
  /// Example: /// Example: NATO19
  /// Constraints: Minimum length = 0, Maximum length = 12
  const ::flatbuffers::String *receiverExercise() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVEREXERCISE);
  }
  /// The package identifier for the receiver in an air refueling event.
  /// Example: /// Example: 135
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *packageId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PACKAGEID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDRECEIVERSORTIE) &&
           verifier.VerifyString(idReceiverSortie()) &&
           VerifyOffset(verifier, VT_IDRECEIVERMISSION) &&
           verifier.VerifyString(idReceiverMission()) &&
           VerifyOffset(verifier, VT_IDRECEIVERAIRFIELD) &&
           verifier.VerifyString(idReceiverAirfield()) &&
           VerifyOffset(verifier, VT_EXTERNALRECEIVERID) &&
           verifier.VerifyString(externalReceiverId()) &&
           VerifyOffset(verifier, VT_RECEIVERCOORD) &&
           verifier.VerifyString(receiverCoord()) &&
           VerifyOffset(verifier, VT_RECEIVERMDS) &&
           verifier.VerifyString(receiverMDS()) &&
           VerifyOffset(verifier, VT_AMCRECEIVERMISSIONID) &&
           verifier.VerifyString(amcReceiverMissionId()) &&
           VerifyOffset(verifier, VT_ALTRECEIVERMISSIONID) &&
           verifier.VerifyString(altReceiverMissionId()) &&
           VerifyOffset(verifier, VT_RECEIVERCALLSIGN) &&
           verifier.VerifyString(receiverCallSign()) &&
           VerifyOffset(verifier, VT_RECEIVEROWNER) &&
           verifier.VerifyString(receiverOwner()) &&
           VerifyOffset(verifier, VT_RECEIVERPOC) &&
           verifier.VerifyString(receiverPOC()) &&
           VerifyField<int32_t>(verifier, VT_RECEIVERLEGNUM, 4) &&
           VerifyOffset(verifier, VT_RECEIVERDEPLOYEDICAO) &&
           verifier.VerifyString(receiverDeployedICAO()) &&
           VerifyOffset(verifier, VT_RECEIVERDELIVERYMETHOD) &&
           verifier.VerifyString(receiverDeliveryMethod()) &&
           VerifyField<double>(verifier, VT_FUELON, 8) &&
           VerifyField<int32_t>(verifier, VT_RECEIVERCELLPOSITION, 4) &&
           VerifyOffset(verifier, VT_SEQUENCENUM) &&
           verifier.VerifyString(sequenceNum()) &&
           VerifyOffset(verifier, VT_RECORG) &&
           verifier.VerifyString(recOrg()) &&
           VerifyField<int32_t>(verifier, VT_NUMRECAIRCRAFT, 4) &&
           VerifyOffset(verifier, VT_RECEIVERFUELTYPE) &&
           verifier.VerifyString(receiverFuelType()) &&
           VerifyOffset(verifier, VT_RECEIVEREXERCISE) &&
           verifier.VerifyString(receiverExercise()) &&
           VerifyOffset(verifier, VT_PACKAGEID) &&
           verifier.VerifyString(packageId()) &&
           verifier.EndTable();
  }
};

struct AirEventReceivers_AbridgedBuilder {
  typedef AirEventReceivers_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idReceiverSortie(::flatbuffers::Offset<::flatbuffers::String> idReceiverSortie) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_IDRECEIVERSORTIE, idReceiverSortie);
  }
  void add_idReceiverMission(::flatbuffers::Offset<::flatbuffers::String> idReceiverMission) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_IDRECEIVERMISSION, idReceiverMission);
  }
  void add_idReceiverAirfield(::flatbuffers::Offset<::flatbuffers::String> idReceiverAirfield) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_IDRECEIVERAIRFIELD, idReceiverAirfield);
  }
  void add_externalReceiverId(::flatbuffers::Offset<::flatbuffers::String> externalReceiverId) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_EXTERNALRECEIVERID, externalReceiverId);
  }
  void add_receiverCoord(::flatbuffers::Offset<::flatbuffers::String> receiverCoord) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERCOORD, receiverCoord);
  }
  void add_receiverMDS(::flatbuffers::Offset<::flatbuffers::String> receiverMDS) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERMDS, receiverMDS);
  }
  void add_amcReceiverMissionId(::flatbuffers::Offset<::flatbuffers::String> amcReceiverMissionId) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_AMCRECEIVERMISSIONID, amcReceiverMissionId);
  }
  void add_altReceiverMissionId(::flatbuffers::Offset<::flatbuffers::String> altReceiverMissionId) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_ALTRECEIVERMISSIONID, altReceiverMissionId);
  }
  void add_receiverCallSign(::flatbuffers::Offset<::flatbuffers::String> receiverCallSign) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERCALLSIGN, receiverCallSign);
  }
  void add_receiverOwner(::flatbuffers::Offset<::flatbuffers::String> receiverOwner) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVEROWNER, receiverOwner);
  }
  void add_receiverPOC(::flatbuffers::Offset<::flatbuffers::String> receiverPOC) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERPOC, receiverPOC);
  }
  void add_receiverLegNum(int32_t receiverLegNum) {
    fbb_.AddElement<int32_t>(AirEventReceivers_Abridged::VT_RECEIVERLEGNUM, receiverLegNum, 0);
  }
  void add_receiverDeployedICAO(::flatbuffers::Offset<::flatbuffers::String> receiverDeployedICAO) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERDEPLOYEDICAO, receiverDeployedICAO);
  }
  void add_receiverDeliveryMethod(::flatbuffers::Offset<::flatbuffers::String> receiverDeliveryMethod) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERDELIVERYMETHOD, receiverDeliveryMethod);
  }
  void add_fuelOn(double fuelOn) {
    fbb_.AddElement<double>(AirEventReceivers_Abridged::VT_FUELON, fuelOn, 0.0);
  }
  void add_receiverCellPosition(int32_t receiverCellPosition) {
    fbb_.AddElement<int32_t>(AirEventReceivers_Abridged::VT_RECEIVERCELLPOSITION, receiverCellPosition, 0);
  }
  void add_sequenceNum(::flatbuffers::Offset<::flatbuffers::String> sequenceNum) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_SEQUENCENUM, sequenceNum);
  }
  void add_recOrg(::flatbuffers::Offset<::flatbuffers::String> recOrg) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECORG, recOrg);
  }
  void add_numRecAircraft(int32_t numRecAircraft) {
    fbb_.AddElement<int32_t>(AirEventReceivers_Abridged::VT_NUMRECAIRCRAFT, numRecAircraft, 0);
  }
  void add_receiverFuelType(::flatbuffers::Offset<::flatbuffers::String> receiverFuelType) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVERFUELTYPE, receiverFuelType);
  }
  void add_receiverExercise(::flatbuffers::Offset<::flatbuffers::String> receiverExercise) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_RECEIVEREXERCISE, receiverExercise);
  }
  void add_packageId(::flatbuffers::Offset<::flatbuffers::String> packageId) {
    fbb_.AddOffset(AirEventReceivers_Abridged::VT_PACKAGEID, packageId);
  }
  explicit AirEventReceivers_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirEventReceivers_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirEventReceivers_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirEventReceivers_Abridged> CreateAirEventReceivers_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idReceiverSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idReceiverMission = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idReceiverAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalReceiverId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverCoord = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcReceiverMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altReceiverMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverCallSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverOwner = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverPOC = 0,
    int32_t receiverLegNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverDeployedICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverDeliveryMethod = 0,
    double fuelOn = 0.0,
    int32_t receiverCellPosition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sequenceNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> recOrg = 0,
    int32_t numRecAircraft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverFuelType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverExercise = 0,
    ::flatbuffers::Offset<::flatbuffers::String> packageId = 0) {
  AirEventReceivers_AbridgedBuilder builder_(_fbb);
  builder_.add_fuelOn(fuelOn);
  builder_.add_packageId(packageId);
  builder_.add_receiverExercise(receiverExercise);
  builder_.add_receiverFuelType(receiverFuelType);
  builder_.add_numRecAircraft(numRecAircraft);
  builder_.add_recOrg(recOrg);
  builder_.add_sequenceNum(sequenceNum);
  builder_.add_receiverCellPosition(receiverCellPosition);
  builder_.add_receiverDeliveryMethod(receiverDeliveryMethod);
  builder_.add_receiverDeployedICAO(receiverDeployedICAO);
  builder_.add_receiverLegNum(receiverLegNum);
  builder_.add_receiverPOC(receiverPOC);
  builder_.add_receiverOwner(receiverOwner);
  builder_.add_receiverCallSign(receiverCallSign);
  builder_.add_altReceiverMissionId(altReceiverMissionId);
  builder_.add_amcReceiverMissionId(amcReceiverMissionId);
  builder_.add_receiverMDS(receiverMDS);
  builder_.add_receiverCoord(receiverCoord);
  builder_.add_externalReceiverId(externalReceiverId);
  builder_.add_idReceiverAirfield(idReceiverAirfield);
  builder_.add_idReceiverMission(idReceiverMission);
  builder_.add_idReceiverSortie(idReceiverSortie);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirEventReceivers_Abridged> CreateAirEventReceivers_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idReceiverSortie = nullptr,
    const char *idReceiverMission = nullptr,
    const char *idReceiverAirfield = nullptr,
    const char *externalReceiverId = nullptr,
    const char *receiverCoord = nullptr,
    const char *receiverMDS = nullptr,
    const char *amcReceiverMissionId = nullptr,
    const char *altReceiverMissionId = nullptr,
    const char *receiverCallSign = nullptr,
    const char *receiverOwner = nullptr,
    const char *receiverPOC = nullptr,
    int32_t receiverLegNum = 0,
    const char *receiverDeployedICAO = nullptr,
    const char *receiverDeliveryMethod = nullptr,
    double fuelOn = 0.0,
    int32_t receiverCellPosition = 0,
    const char *sequenceNum = nullptr,
    const char *recOrg = nullptr,
    int32_t numRecAircraft = 0,
    const char *receiverFuelType = nullptr,
    const char *receiverExercise = nullptr,
    const char *packageId = nullptr) {
  auto idReceiverSortie__ = idReceiverSortie ? _fbb.CreateString(idReceiverSortie) : 0;
  auto idReceiverMission__ = idReceiverMission ? _fbb.CreateString(idReceiverMission) : 0;
  auto idReceiverAirfield__ = idReceiverAirfield ? _fbb.CreateString(idReceiverAirfield) : 0;
  auto externalReceiverId__ = externalReceiverId ? _fbb.CreateString(externalReceiverId) : 0;
  auto receiverCoord__ = receiverCoord ? _fbb.CreateString(receiverCoord) : 0;
  auto receiverMDS__ = receiverMDS ? _fbb.CreateString(receiverMDS) : 0;
  auto amcReceiverMissionId__ = amcReceiverMissionId ? _fbb.CreateString(amcReceiverMissionId) : 0;
  auto altReceiverMissionId__ = altReceiverMissionId ? _fbb.CreateString(altReceiverMissionId) : 0;
  auto receiverCallSign__ = receiverCallSign ? _fbb.CreateString(receiverCallSign) : 0;
  auto receiverOwner__ = receiverOwner ? _fbb.CreateString(receiverOwner) : 0;
  auto receiverPOC__ = receiverPOC ? _fbb.CreateString(receiverPOC) : 0;
  auto receiverDeployedICAO__ = receiverDeployedICAO ? _fbb.CreateString(receiverDeployedICAO) : 0;
  auto receiverDeliveryMethod__ = receiverDeliveryMethod ? _fbb.CreateString(receiverDeliveryMethod) : 0;
  auto sequenceNum__ = sequenceNum ? _fbb.CreateString(sequenceNum) : 0;
  auto recOrg__ = recOrg ? _fbb.CreateString(recOrg) : 0;
  auto receiverFuelType__ = receiverFuelType ? _fbb.CreateString(receiverFuelType) : 0;
  auto receiverExercise__ = receiverExercise ? _fbb.CreateString(receiverExercise) : 0;
  auto packageId__ = packageId ? _fbb.CreateString(packageId) : 0;
  return CreateAirEventReceivers_Abridged(
      _fbb,
      idReceiverSortie__,
      idReceiverMission__,
      idReceiverAirfield__,
      externalReceiverId__,
      receiverCoord__,
      receiverMDS__,
      amcReceiverMissionId__,
      altReceiverMissionId__,
      receiverCallSign__,
      receiverOwner__,
      receiverPOC__,
      receiverLegNum,
      receiverDeployedICAO__,
      receiverDeliveryMethod__,
      fuelOn,
      receiverCellPosition,
      sequenceNum__,
      recOrg__,
      numRecAircraft,
      receiverFuelType__,
      receiverExercise__,
      packageId__);
}

inline const AirEventReceivers_Abridged *GetAirEventReceivers_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AirEventReceivers_Abridged>(buf);
}

inline const AirEventReceivers_Abridged *GetSizePrefixedAirEventReceivers_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirEventReceivers_Abridged>(buf);
}

inline const char *AirEventReceivers_AbridgedIdentifier() {
  return "AIRE";
}

inline bool AirEventReceivers_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEventReceivers_AbridgedIdentifier());
}

inline bool SizePrefixedAirEventReceivers_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirEventReceivers_AbridgedIdentifier(), true);
}

inline bool VerifyAirEventReceivers_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirEventReceivers_Abridged>(AirEventReceivers_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAirEventReceivers_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirEventReceivers_Abridged>(AirEventReceivers_AbridgedIdentifier());
}

inline void FinishAirEventReceivers_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEventReceivers_Abridged> root) {
  fbb.Finish(root, AirEventReceivers_AbridgedIdentifier());
}

inline void FinishSizePrefixedAirEventReceivers_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirEventReceivers_Abridged> root) {
  fbb.FinishSizePrefixed(root, AirEventReceivers_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
