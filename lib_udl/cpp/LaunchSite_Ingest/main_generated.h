// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LaunchSite_Ingest;
struct LaunchSite_IngestBuilder;

enum LaunchSite_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LaunchSite_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LaunchSite_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LaunchSite_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LaunchSite_Ingest_dataMode_Enum_EXERCISE = 3,
  LaunchSite_Ingest_dataMode_Enum_MIN = LaunchSite_Ingest_dataMode_Enum_REAL,
  LaunchSite_Ingest_dataMode_Enum_MAX = LaunchSite_Ingest_dataMode_Enum_EXERCISE
};

inline const LaunchSite_Ingest_dataMode_Enum (&EnumValuesLaunchSite_Ingest_dataMode_Enum())[4] {
  static const LaunchSite_Ingest_dataMode_Enum values[] = {
    LaunchSite_Ingest_dataMode_Enum_REAL,
    LaunchSite_Ingest_dataMode_Enum_TEST,
    LaunchSite_Ingest_dataMode_Enum_SIMULATED,
    LaunchSite_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLaunchSite_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLaunchSite_Ingest_dataMode_Enum(LaunchSite_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LaunchSite_Ingest_dataMode_Enum_REAL, LaunchSite_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLaunchSite_Ingest_dataMode_Enum()[index];
}

/// /// Model representation of known launch sites.
struct LaunchSite_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LaunchSite_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_CODE = 8,
    VT_SHORTCODE = 10,
    VT_ALTCODE = 12,
    VT_IDSITE = 14,
    VT_NAME = 16,
    VT_CREATEDAT = 18,
    VT_CREATEDBY = 20,
    VT_SOURCE = 22,
    VT_ORIGIN = 24,
    VT_ORIGNETWORK = 26,
    VT_DATAMODE = 28
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHSITE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Launch site code.
  /// Example: /// Example: SAN MARCO
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  /// Abbreviated short name for the launch site.
  /// Example: /// Example: SNMLP
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *shortCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHORTCODE);
  }
  /// Alternate launch site code.
  /// Example: /// Example: 35
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *altCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTCODE);
  }
  /// Unique identifier of the parent site associated with this launch site.
  /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSite() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSITE);
  }
  /// Launch site name.
  /// Example: /// Example: Example launch site name
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LaunchSite_Ingest_dataMode_Enum dataMode() const {
    return static_cast<LaunchSite_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffset(verifier, VT_SHORTCODE) &&
           verifier.VerifyString(shortCode()) &&
           VerifyOffset(verifier, VT_ALTCODE) &&
           verifier.VerifyString(altCode()) &&
           VerifyOffset(verifier, VT_IDSITE) &&
           verifier.VerifyString(idSite()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct LaunchSite_IngestBuilder {
  typedef LaunchSite_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_CODE, code);
  }
  void add_shortCode(::flatbuffers::Offset<::flatbuffers::String> shortCode) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_SHORTCODE, shortCode);
  }
  void add_altCode(::flatbuffers::Offset<::flatbuffers::String> altCode) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_ALTCODE, altCode);
  }
  void add_idSite(::flatbuffers::Offset<::flatbuffers::String> idSite) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_IDSITE, idSite);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_NAME, name);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LaunchSite_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(LaunchSite_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LaunchSite_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit LaunchSite_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LaunchSite_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LaunchSite_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LaunchSite_Ingest> CreateLaunchSite_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shortCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSite = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    LaunchSite_Ingest_dataMode_Enum dataMode = LaunchSite_Ingest_dataMode_Enum_REAL) {
  LaunchSite_IngestBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_name(name);
  builder_.add_idSite(idSite);
  builder_.add_altCode(altCode);
  builder_.add_shortCode(shortCode);
  builder_.add_code(code);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LaunchSite_Ingest> CreateLaunchSite_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *code = nullptr,
    const char *shortCode = nullptr,
    const char *altCode = nullptr,
    const char *idSite = nullptr,
    const char *name = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    LaunchSite_Ingest_dataMode_Enum dataMode = LaunchSite_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto shortCode__ = shortCode ? _fbb.CreateString(shortCode) : 0;
  auto altCode__ = altCode ? _fbb.CreateString(altCode) : 0;
  auto idSite__ = idSite ? _fbb.CreateString(idSite) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateLaunchSite_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      code__,
      shortCode__,
      altCode__,
      idSite__,
      name__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const LaunchSite_Ingest *GetLaunchSite_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LaunchSite_Ingest>(buf);
}

inline const LaunchSite_Ingest *GetSizePrefixedLaunchSite_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LaunchSite_Ingest>(buf);
}

inline const char *LaunchSite_IngestIdentifier() {
  return "LAUN";
}

inline bool LaunchSite_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchSite_IngestIdentifier());
}

inline bool SizePrefixedLaunchSite_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchSite_IngestIdentifier(), true);
}

inline bool VerifyLaunchSite_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LaunchSite_Ingest>(LaunchSite_IngestIdentifier());
}

inline bool VerifySizePrefixedLaunchSite_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LaunchSite_Ingest>(LaunchSite_IngestIdentifier());
}

inline void FinishLaunchSite_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchSite_Ingest> root) {
  fbb.Finish(root, LaunchSite_IngestIdentifier());
}

inline void FinishSizePrefixedLaunchSite_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchSite_Ingest> root) {
  fbb.FinishSizePrefixed(root, LaunchSite_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
