// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct CotData_Ingest;
struct CotData_IngestBuilder;

/// /// Schema for the CotData to post.
struct CotData_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CotData_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDERUID = 4,
    VT_HOW = 6,
    VT_CE = 8,
    VT_LE = 10,
    VT_STALE = 12,
    VT_START = 14,
    VT_LAT = 16,
    VT_LON = 18,
    VT_TYPE = 20,
    VT_ALT = 22,
    VT_COTPOSITIONDATA = 24,
    VT_COTCHATDATA = 26,
    VT_CALLSIGNS = 28,
    VT_UIDS = 30,
    VT_GROUPS = 32
  };
  /// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
  /// Example: /// Example: POI-ID
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *senderUid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENDERUID);
  }
  /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: h-e
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *how() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOW);
  }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double ce() const {
    return GetField<double>(VT_CE, 0.0);
  }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double le() const {
    return GetField<double>(VT_LE, 0.0);
  }
  /// Stale timestamp (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stale() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STALE);
  }
  /// Start time of event validity (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *start() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START);
  }
  /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Event type, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: a-h-G
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *cotPositionData() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COTPOSITIONDATA);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *cotChatData() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COTCHATDATA);
  }
  /// Optional list of call signs to send message to directly.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *callSigns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CALLSIGNS);
  }
  /// Optional list of TAK user ids to send message to directly.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *uids() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UIDS);
  }
  /// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *groups() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_GROUPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENDERUID) &&
           verifier.VerifyString(senderUid()) &&
           VerifyOffset(verifier, VT_HOW) &&
           verifier.VerifyString(how()) &&
           VerifyField<double>(verifier, VT_CE, 8) &&
           VerifyField<double>(verifier, VT_LE, 8) &&
           VerifyOffset(verifier, VT_STALE) &&
           verifier.VerifyString(stale()) &&
           VerifyOffset(verifier, VT_START) &&
           verifier.VerifyString(start()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyOffset(verifier, VT_COTPOSITIONDATA) &&
           verifier.VerifyString(cotPositionData()) &&
           VerifyOffset(verifier, VT_COTCHATDATA) &&
           verifier.VerifyString(cotChatData()) &&
           VerifyOffset(verifier, VT_CALLSIGNS) &&
           verifier.VerifyVector(callSigns()) &&
           verifier.VerifyVectorOfStrings(callSigns()) &&
           VerifyOffset(verifier, VT_UIDS) &&
           verifier.VerifyVector(uids()) &&
           verifier.VerifyVectorOfStrings(uids()) &&
           VerifyOffset(verifier, VT_GROUPS) &&
           verifier.VerifyVector(groups()) &&
           verifier.VerifyVectorOfStrings(groups()) &&
           verifier.EndTable();
  }
};

struct CotData_IngestBuilder {
  typedef CotData_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_senderUid(::flatbuffers::Offset<::flatbuffers::String> senderUid) {
    fbb_.AddOffset(CotData_Ingest::VT_SENDERUID, senderUid);
  }
  void add_how(::flatbuffers::Offset<::flatbuffers::String> how) {
    fbb_.AddOffset(CotData_Ingest::VT_HOW, how);
  }
  void add_ce(double ce) {
    fbb_.AddElement<double>(CotData_Ingest::VT_CE, ce, 0.0);
  }
  void add_le(double le) {
    fbb_.AddElement<double>(CotData_Ingest::VT_LE, le, 0.0);
  }
  void add_stale(::flatbuffers::Offset<::flatbuffers::String> stale) {
    fbb_.AddOffset(CotData_Ingest::VT_STALE, stale);
  }
  void add_start(::flatbuffers::Offset<::flatbuffers::String> start) {
    fbb_.AddOffset(CotData_Ingest::VT_START, start);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(CotData_Ingest::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(CotData_Ingest::VT_LON, lon, 0.0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(CotData_Ingest::VT_TYPE, type);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(CotData_Ingest::VT_ALT, alt, 0.0);
  }
  void add_cotPositionData(::flatbuffers::Offset<::flatbuffers::String> cotPositionData) {
    fbb_.AddOffset(CotData_Ingest::VT_COTPOSITIONDATA, cotPositionData);
  }
  void add_cotChatData(::flatbuffers::Offset<::flatbuffers::String> cotChatData) {
    fbb_.AddOffset(CotData_Ingest::VT_COTCHATDATA, cotChatData);
  }
  void add_callSigns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> callSigns) {
    fbb_.AddOffset(CotData_Ingest::VT_CALLSIGNS, callSigns);
  }
  void add_uids(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uids) {
    fbb_.AddOffset(CotData_Ingest::VT_UIDS, uids);
  }
  void add_groups(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> groups) {
    fbb_.AddOffset(CotData_Ingest::VT_GROUPS, groups);
  }
  explicit CotData_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CotData_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CotData_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CotData_Ingest> CreateCotData_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> senderUid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> how = 0,
    double ce = 0.0,
    double le = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> stale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> start = 0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double alt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> cotPositionData = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cotChatData = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> callSigns = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> uids = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> groups = 0) {
  CotData_IngestBuilder builder_(_fbb);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_le(le);
  builder_.add_ce(ce);
  builder_.add_groups(groups);
  builder_.add_uids(uids);
  builder_.add_callSigns(callSigns);
  builder_.add_cotChatData(cotChatData);
  builder_.add_cotPositionData(cotPositionData);
  builder_.add_type(type);
  builder_.add_start(start);
  builder_.add_stale(stale);
  builder_.add_how(how);
  builder_.add_senderUid(senderUid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CotData_Ingest> CreateCotData_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *senderUid = nullptr,
    const char *how = nullptr,
    double ce = 0.0,
    double le = 0.0,
    const char *stale = nullptr,
    const char *start = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    const char *type = nullptr,
    double alt = 0.0,
    const char *cotPositionData = nullptr,
    const char *cotChatData = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *callSigns = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *uids = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *groups = nullptr) {
  auto senderUid__ = senderUid ? _fbb.CreateString(senderUid) : 0;
  auto how__ = how ? _fbb.CreateString(how) : 0;
  auto stale__ = stale ? _fbb.CreateString(stale) : 0;
  auto start__ = start ? _fbb.CreateString(start) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto cotPositionData__ = cotPositionData ? _fbb.CreateString(cotPositionData) : 0;
  auto cotChatData__ = cotChatData ? _fbb.CreateString(cotChatData) : 0;
  auto callSigns__ = callSigns ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*callSigns) : 0;
  auto uids__ = uids ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*uids) : 0;
  auto groups__ = groups ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*groups) : 0;
  return CreateCotData_Ingest(
      _fbb,
      senderUid__,
      how__,
      ce,
      le,
      stale__,
      start__,
      lat,
      lon,
      type__,
      alt,
      cotPositionData__,
      cotChatData__,
      callSigns__,
      uids__,
      groups__);
}

inline const CotData_Ingest *GetCotData_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<CotData_Ingest>(buf);
}

inline const CotData_Ingest *GetSizePrefixedCotData_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CotData_Ingest>(buf);
}

inline const char *CotData_IngestIdentifier() {
  return "COTD";
}

inline bool CotData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotData_IngestIdentifier());
}

inline bool SizePrefixedCotData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotData_IngestIdentifier(), true);
}

inline bool VerifyCotData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CotData_Ingest>(CotData_IngestIdentifier());
}

inline bool VerifySizePrefixedCotData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CotData_Ingest>(CotData_IngestIdentifier());
}

inline void FinishCotData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotData_Ingest> root) {
  fbb.Finish(root, CotData_IngestIdentifier());
}

inline void FinishSizePrefixedCotData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotData_Ingest> root) {
  fbb.FinishSizePrefixed(root, CotData_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
