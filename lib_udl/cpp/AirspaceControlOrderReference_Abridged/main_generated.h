// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirspaceControlOrderReference_Abridged;
struct AirspaceControlOrderReference_AbridgedBuilder;

/// /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
struct AirspaceControlOrderReference_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirspaceControlOrderReference_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFSID = 4,
    VT_REFTYPE = 6,
    VT_REFORIGINATOR = 8,
    VT_REFTS = 10,
    VT_REFSERIALNUM = 12,
    VT_REFSPECIALNOTATION = 14,
    VT_REFSICS = 16
  };
  /// Specifies an alphabetic serial number identifying a reference pertaining to this message.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *refSId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSID);
  }
  /// Specifies the type for this reference.
  /// Example: /// Example: NBC1
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *refType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFTYPE);
  }
  /// The originator of this reference.
  /// Example: /// Example: SHAPE
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *refOriginator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFORIGINATOR);
  }
  /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *refTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFTS);
  }
  /// The reference serial number.
  /// Example: /// Example: 100
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *refSerialNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSERIALNUM);
  }
  /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
  /// Example: /// Example: NOTAL
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *refSpecialNotation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFSPECIALNOTATION);
  }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  /// Example: /// Example: ['RCA', 'FN:4503B']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *refSICs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REFSICS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REFSID) &&
           verifier.VerifyString(refSId()) &&
           VerifyOffset(verifier, VT_REFTYPE) &&
           verifier.VerifyString(refType()) &&
           VerifyOffset(verifier, VT_REFORIGINATOR) &&
           verifier.VerifyString(refOriginator()) &&
           VerifyOffset(verifier, VT_REFTS) &&
           verifier.VerifyString(refTs()) &&
           VerifyOffset(verifier, VT_REFSERIALNUM) &&
           verifier.VerifyString(refSerialNum()) &&
           VerifyOffset(verifier, VT_REFSPECIALNOTATION) &&
           verifier.VerifyString(refSpecialNotation()) &&
           VerifyOffset(verifier, VT_REFSICS) &&
           verifier.VerifyVector(refSICs()) &&
           verifier.VerifyVectorOfStrings(refSICs()) &&
           verifier.EndTable();
  }
};

struct AirspaceControlOrderReference_AbridgedBuilder {
  typedef AirspaceControlOrderReference_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_refSId(::flatbuffers::Offset<::flatbuffers::String> refSId) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFSID, refSId);
  }
  void add_refType(::flatbuffers::Offset<::flatbuffers::String> refType) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFTYPE, refType);
  }
  void add_refOriginator(::flatbuffers::Offset<::flatbuffers::String> refOriginator) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFORIGINATOR, refOriginator);
  }
  void add_refTs(::flatbuffers::Offset<::flatbuffers::String> refTs) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFTS, refTs);
  }
  void add_refSerialNum(::flatbuffers::Offset<::flatbuffers::String> refSerialNum) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFSERIALNUM, refSerialNum);
  }
  void add_refSpecialNotation(::flatbuffers::Offset<::flatbuffers::String> refSpecialNotation) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFSPECIALNOTATION, refSpecialNotation);
  }
  void add_refSICs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refSICs) {
    fbb_.AddOffset(AirspaceControlOrderReference_Abridged::VT_REFSICS, refSICs);
  }
  explicit AirspaceControlOrderReference_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged> CreateAirspaceControlOrderReference_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> refSId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refOriginator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refSerialNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refSpecialNotation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refSICs = 0) {
  AirspaceControlOrderReference_AbridgedBuilder builder_(_fbb);
  builder_.add_refSICs(refSICs);
  builder_.add_refSpecialNotation(refSpecialNotation);
  builder_.add_refSerialNum(refSerialNum);
  builder_.add_refTs(refTs);
  builder_.add_refOriginator(refOriginator);
  builder_.add_refType(refType);
  builder_.add_refSId(refSId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged> CreateAirspaceControlOrderReference_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *refSId = nullptr,
    const char *refType = nullptr,
    const char *refOriginator = nullptr,
    const char *refTs = nullptr,
    const char *refSerialNum = nullptr,
    const char *refSpecialNotation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *refSICs = nullptr) {
  auto refSId__ = refSId ? _fbb.CreateString(refSId) : 0;
  auto refType__ = refType ? _fbb.CreateString(refType) : 0;
  auto refOriginator__ = refOriginator ? _fbb.CreateString(refOriginator) : 0;
  auto refTs__ = refTs ? _fbb.CreateString(refTs) : 0;
  auto refSerialNum__ = refSerialNum ? _fbb.CreateString(refSerialNum) : 0;
  auto refSpecialNotation__ = refSpecialNotation ? _fbb.CreateString(refSpecialNotation) : 0;
  auto refSICs__ = refSICs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*refSICs) : 0;
  return CreateAirspaceControlOrderReference_Abridged(
      _fbb,
      refSId__,
      refType__,
      refOriginator__,
      refTs__,
      refSerialNum__,
      refSpecialNotation__,
      refSICs__);
}

inline const AirspaceControlOrderReference_Abridged *GetAirspaceControlOrderReference_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<AirspaceControlOrderReference_Abridged>(buf);
}

inline const AirspaceControlOrderReference_Abridged *GetSizePrefixedAirspaceControlOrderReference_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirspaceControlOrderReference_Abridged>(buf);
}

inline const char *AirspaceControlOrderReference_AbridgedIdentifier() {
  return "AIRS";
}

inline bool AirspaceControlOrderReference_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlOrderReference_AbridgedIdentifier());
}

inline bool SizePrefixedAirspaceControlOrderReference_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirspaceControlOrderReference_AbridgedIdentifier(), true);
}

inline bool VerifyAirspaceControlOrderReference_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirspaceControlOrderReference_Abridged>(AirspaceControlOrderReference_AbridgedIdentifier());
}

inline bool VerifySizePrefixedAirspaceControlOrderReference_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirspaceControlOrderReference_Abridged>(AirspaceControlOrderReference_AbridgedIdentifier());
}

inline void FinishAirspaceControlOrderReference_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged> root) {
  fbb.Finish(root, AirspaceControlOrderReference_AbridgedIdentifier());
}

inline void FinishSizePrefixedAirspaceControlOrderReference_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirspaceControlOrderReference_Abridged> root) {
  fbb.FinishSizePrefixed(root, AirspaceControlOrderReference_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
