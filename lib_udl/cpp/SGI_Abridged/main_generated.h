// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SGI_Abridged;
struct SGI_AbridgedBuilder;

enum SGI_Abridged_state_Enum : int8_t {
  /// No description available.
  SGI_Abridged_state_Enum_I = 0,
  /// No description available.
  SGI_Abridged_state_Enum_N = 1,
  /// No description available.
  SGI_Abridged_state_Enum_P = 2,
  SGI_Abridged_state_Enum_MIN = SGI_Abridged_state_Enum_I,
  SGI_Abridged_state_Enum_MAX = SGI_Abridged_state_Enum_P
};

inline const SGI_Abridged_state_Enum (&EnumValuesSGI_Abridged_state_Enum())[3] {
  static const SGI_Abridged_state_Enum values[] = {
    SGI_Abridged_state_Enum_I,
    SGI_Abridged_state_Enum_N,
    SGI_Abridged_state_Enum_P
  };
  return values;
}

inline const char * const *EnumNamesSGI_Abridged_state_Enum() {
  static const char * const names[4] = {
    "I",
    "N",
    "P",
    nullptr
  };
  return names;
}

inline const char *EnumNameSGI_Abridged_state_Enum(SGI_Abridged_state_Enum e) {
  if (::flatbuffers::IsOutRange(e, SGI_Abridged_state_Enum_I, SGI_Abridged_state_Enum_P)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSGI_Abridged_state_Enum()[index];
}

enum SGI_Abridged_precedence_Enum : int8_t {
  /// No description available.
  SGI_Abridged_precedence_Enum_O = 0,
  /// No description available.
  SGI_Abridged_precedence_Enum_P = 1,
  /// No description available.
  SGI_Abridged_precedence_Enum_R = 2,
  /// No description available.
  SGI_Abridged_precedence_Enum_Y = 3,
  /// No description available.
  SGI_Abridged_precedence_Enum_Z = 4,
  SGI_Abridged_precedence_Enum_MIN = SGI_Abridged_precedence_Enum_O,
  SGI_Abridged_precedence_Enum_MAX = SGI_Abridged_precedence_Enum_Z
};

inline const SGI_Abridged_precedence_Enum (&EnumValuesSGI_Abridged_precedence_Enum())[5] {
  static const SGI_Abridged_precedence_Enum values[] = {
    SGI_Abridged_precedence_Enum_O,
    SGI_Abridged_precedence_Enum_P,
    SGI_Abridged_precedence_Enum_R,
    SGI_Abridged_precedence_Enum_Y,
    SGI_Abridged_precedence_Enum_Z
  };
  return values;
}

inline const char * const *EnumNamesSGI_Abridged_precedence_Enum() {
  static const char * const names[6] = {
    "O",
    "P",
    "R",
    "Y",
    "Z",
    nullptr
  };
  return names;
}

inline const char *EnumNameSGI_Abridged_precedence_Enum(SGI_Abridged_precedence_Enum e) {
  if (::flatbuffers::IsOutRange(e, SGI_Abridged_precedence_Enum_O, SGI_Abridged_precedence_Enum_Z)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSGI_Abridged_precedence_Enum()[index];
}

enum SGI_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SGI_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SGI_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SGI_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SGI_Abridged_dataMode_Enum_EXERCISE = 3,
  SGI_Abridged_dataMode_Enum_MIN = SGI_Abridged_dataMode_Enum_REAL,
  SGI_Abridged_dataMode_Enum_MAX = SGI_Abridged_dataMode_Enum_EXERCISE
};

inline const SGI_Abridged_dataMode_Enum (&EnumValuesSGI_Abridged_dataMode_Enum())[4] {
  static const SGI_Abridged_dataMode_Enum values[] = {
    SGI_Abridged_dataMode_Enum_REAL,
    SGI_Abridged_dataMode_Enum_TEST,
    SGI_Abridged_dataMode_Enum_SIMULATED,
    SGI_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSGI_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSGI_Abridged_dataMode_Enum(SGI_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SGI_Abridged_dataMode_Enum_REAL, SGI_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSGI_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
struct SGI_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SGI_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_EFFECTIVEDATE = 8,
    VT_SGIDATE = 10,
    VT_TYPE = 12,
    VT_STATE = 14,
    VT_STATIONNAME = 16,
    VT_IDSENSOR = 18,
    VT_ORIGSENSORID = 20,
    VT_MODE = 22,
    VT_PRECEDENCE = 24,
    VT_COEFFDEGREE = 26,
    VT_COEFFORDER = 28,
    VT_CTCE = 30,
    VT_STCE = 32,
    VT_CTCI = 34,
    VT_STCI = 36,
    VT_E10 = 38,
    VT_E54 = 40,
    VT_S10 = 42,
    VT_S54 = 44,
    VT_M10 = 46,
    VT_M54 = 48,
    VT_Y10 = 50,
    VT_Y54 = 52,
    VT_F10 = 54,
    VT_F54 = 56,
    VT_F81 = 58,
    VT_AP = 60,
    VT_APDURATION = 62,
    VT_KINDEX = 64,
    VT_KP = 66,
    VT_KPDURATION = 68,
    VT_GAMMA = 70,
    VT_DST = 72,
    VT_DTC = 74,
    VT_RBREGIONCODE = 76,
    VT_RBINDEX = 78,
    VT_NORMFACTOR = 80,
    VT_RBDURATION = 82,
    VT_ANALYZERATTENUATION = 84,
    VT_RAWFILEURI = 86,
    VT_TRANSACTIONID = 88,
    VT_SOURCE = 90,
    VT_ORIGIN = 92,
    VT_ORIGNETWORK = 94,
    VT_DATAMODE = 96,
    VT_CREATEDAT = 98,
    VT_CREATEDBY = 100
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SGI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEDATE);
  }
  /// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sgiDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SGIDATE);
  }
  /// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
  /// Example: /// Example: JBH09
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  SGI_Abridged_state_Enum state() const {
    return static_cast<SGI_Abridged_state_Enum>(GetField<int8_t>(VT_STATE, 0));
  }
  /// The name/location of the station that collected the geomagnetic data for this record.
  /// Example: /// Example: Boulder
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *stationName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATIONNAME);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// The transmitted DCA mode of the record (1-3).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t mode() const {
    return GetField<int32_t>(VT_MODE, 0);
  }
  /// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 1
  SGI_Abridged_precedence_Enum precedence() const {
    return static_cast<SGI_Abridged_precedence_Enum>(GetField<int8_t>(VT_PRECEDENCE, 0));
  }
  /// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffDegree() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COEFFDEGREE);
  }
  /// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffOrder() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COEFFORDER);
  }
  /// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ctce() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CTCE);
  }
  /// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *stce() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_STCE);
  }
  /// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ctci() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CTCI);
  }
  /// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
  /// Example: /// Example: [1.23, 342.3, 1.32]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *stci() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_STCI);
  }
  /// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double e10() const {
    return GetField<double>(VT_E10, 0.0);
  }
  /// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double e54() const {
    return GetField<double>(VT_E54, 0.0);
  }
  /// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double s10() const {
    return GetField<double>(VT_S10, 0.0);
  }
  /// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double s54() const {
    return GetField<double>(VT_S54, 0.0);
  }
  /// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double m10() const {
    return GetField<double>(VT_M10, 0.0);
  }
  /// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double m54() const {
    return GetField<double>(VT_M54, 0.0);
  }
  /// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double y10() const {
    return GetField<double>(VT_Y10, 0.0);
  }
  /// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double y54() const {
    return GetField<double>(VT_Y54, 0.0);
  }
  /// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double f10() const {
    return GetField<double>(VT_F10, 0.0);
  }
  /// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double f54() const {
    return GetField<double>(VT_F54, 0.0);
  }
  /// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double f81() const {
    return GetField<double>(VT_F81, 0.0);
  }
  /// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double ap() const {
    return GetField<double>(VT_AP, 0.0);
  }
  /// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t apDuration() const {
    return GetField<int32_t>(VT_APDURATION, 0);
  }
  /// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t kIndex() const {
    return GetField<int32_t>(VT_KINDEX, 0);
  }
  /// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 4.66
  /// Constraints: No constraints specified.
  double kp() const {
    return GetField<double>(VT_KP, 0.0);
  }
  /// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t kpDuration() const {
    return GetField<int32_t>(VT_KPDURATION, 0);
  }
  /// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
  /// Example: /// Example: 25
  /// Constraints: No constraints specified.
  int32_t gamma() const {
    return GetField<int32_t>(VT_GAMMA, 0);
  }
  /// Disturbance Storm Time geomagnetic index in nT.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double dst() const {
    return GetField<double>(VT_DST, 0.0);
  }
  /// delta exospheric temperature correction in units of K.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double dtc() const {
    return GetField<double>(VT_DTC, 0.0);
  }
  /// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t rbRegionCode() const {
    return GetField<int32_t>(VT_RBREGIONCODE, 0);
  }
  /// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
  /// Example: /// Example: 1.02947164506
  /// Constraints: No constraints specified.
  double rbIndex() const {
    return GetField<double>(VT_RBINDEX, 0.0);
  }
  /// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
  /// Example: /// Example: 2.12679e-07
  /// Constraints: No constraints specified.
  double normFactor() const {
    return GetField<double>(VT_NORMFACTOR, 0.0);
  }
  /// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
  /// Example: /// Example: 24
  /// Constraints: No constraints specified.
  int32_t rbDuration() const {
    return GetField<int32_t>(VT_RBDURATION, 0);
  }
  /// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  double analyzerAttenuation() const {
    return GetField<double>(VT_ANALYZERATTENUATION, 0.0);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: rawFileURI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SGI_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SGI_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EFFECTIVEDATE) &&
           verifier.VerifyString(effectiveDate()) &&
           VerifyOffset(verifier, VT_SGIDATE) &&
           verifier.VerifyString(sgiDate()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int8_t>(verifier, VT_STATE, 1) &&
           VerifyOffset(verifier, VT_STATIONNAME) &&
           verifier.VerifyString(stationName()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyField<int32_t>(verifier, VT_MODE, 4) &&
           VerifyField<int8_t>(verifier, VT_PRECEDENCE, 1) &&
           VerifyOffset(verifier, VT_COEFFDEGREE) &&
           verifier.VerifyVector(coeffDegree()) &&
           verifier.VerifyVectorOfStrings(coeffDegree()) &&
           VerifyOffset(verifier, VT_COEFFORDER) &&
           verifier.VerifyVector(coeffOrder()) &&
           verifier.VerifyVectorOfStrings(coeffOrder()) &&
           VerifyOffset(verifier, VT_CTCE) &&
           verifier.VerifyVector(ctce()) &&
           verifier.VerifyVectorOfStrings(ctce()) &&
           VerifyOffset(verifier, VT_STCE) &&
           verifier.VerifyVector(stce()) &&
           verifier.VerifyVectorOfStrings(stce()) &&
           VerifyOffset(verifier, VT_CTCI) &&
           verifier.VerifyVector(ctci()) &&
           verifier.VerifyVectorOfStrings(ctci()) &&
           VerifyOffset(verifier, VT_STCI) &&
           verifier.VerifyVector(stci()) &&
           verifier.VerifyVectorOfStrings(stci()) &&
           VerifyField<double>(verifier, VT_E10, 8) &&
           VerifyField<double>(verifier, VT_E54, 8) &&
           VerifyField<double>(verifier, VT_S10, 8) &&
           VerifyField<double>(verifier, VT_S54, 8) &&
           VerifyField<double>(verifier, VT_M10, 8) &&
           VerifyField<double>(verifier, VT_M54, 8) &&
           VerifyField<double>(verifier, VT_Y10, 8) &&
           VerifyField<double>(verifier, VT_Y54, 8) &&
           VerifyField<double>(verifier, VT_F10, 8) &&
           VerifyField<double>(verifier, VT_F54, 8) &&
           VerifyField<double>(verifier, VT_F81, 8) &&
           VerifyField<double>(verifier, VT_AP, 8) &&
           VerifyField<int32_t>(verifier, VT_APDURATION, 4) &&
           VerifyField<int32_t>(verifier, VT_KINDEX, 4) &&
           VerifyField<double>(verifier, VT_KP, 8) &&
           VerifyField<int32_t>(verifier, VT_KPDURATION, 4) &&
           VerifyField<int32_t>(verifier, VT_GAMMA, 4) &&
           VerifyField<double>(verifier, VT_DST, 8) &&
           VerifyField<double>(verifier, VT_DTC, 8) &&
           VerifyField<int32_t>(verifier, VT_RBREGIONCODE, 4) &&
           VerifyField<double>(verifier, VT_RBINDEX, 8) &&
           VerifyField<double>(verifier, VT_NORMFACTOR, 8) &&
           VerifyField<int32_t>(verifier, VT_RBDURATION, 4) &&
           VerifyField<double>(verifier, VT_ANALYZERATTENUATION, 8) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct SGI_AbridgedBuilder {
  typedef SGI_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SGI_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SGI_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_effectiveDate(::flatbuffers::Offset<::flatbuffers::String> effectiveDate) {
    fbb_.AddOffset(SGI_Abridged::VT_EFFECTIVEDATE, effectiveDate);
  }
  void add_sgiDate(::flatbuffers::Offset<::flatbuffers::String> sgiDate) {
    fbb_.AddOffset(SGI_Abridged::VT_SGIDATE, sgiDate);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(SGI_Abridged::VT_TYPE, type);
  }
  void add_state(SGI_Abridged_state_Enum state) {
    fbb_.AddElement<int8_t>(SGI_Abridged::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_stationName(::flatbuffers::Offset<::flatbuffers::String> stationName) {
    fbb_.AddOffset(SGI_Abridged::VT_STATIONNAME, stationName);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SGI_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(SGI_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_mode(int32_t mode) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_MODE, mode, 0);
  }
  void add_precedence(SGI_Abridged_precedence_Enum precedence) {
    fbb_.AddElement<int8_t>(SGI_Abridged::VT_PRECEDENCE, static_cast<int8_t>(precedence), 0);
  }
  void add_coeffDegree(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffDegree) {
    fbb_.AddOffset(SGI_Abridged::VT_COEFFDEGREE, coeffDegree);
  }
  void add_coeffOrder(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffOrder) {
    fbb_.AddOffset(SGI_Abridged::VT_COEFFORDER, coeffOrder);
  }
  void add_ctce(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ctce) {
    fbb_.AddOffset(SGI_Abridged::VT_CTCE, ctce);
  }
  void add_stce(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> stce) {
    fbb_.AddOffset(SGI_Abridged::VT_STCE, stce);
  }
  void add_ctci(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ctci) {
    fbb_.AddOffset(SGI_Abridged::VT_CTCI, ctci);
  }
  void add_stci(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> stci) {
    fbb_.AddOffset(SGI_Abridged::VT_STCI, stci);
  }
  void add_e10(double e10) {
    fbb_.AddElement<double>(SGI_Abridged::VT_E10, e10, 0.0);
  }
  void add_e54(double e54) {
    fbb_.AddElement<double>(SGI_Abridged::VT_E54, e54, 0.0);
  }
  void add_s10(double s10) {
    fbb_.AddElement<double>(SGI_Abridged::VT_S10, s10, 0.0);
  }
  void add_s54(double s54) {
    fbb_.AddElement<double>(SGI_Abridged::VT_S54, s54, 0.0);
  }
  void add_m10(double m10) {
    fbb_.AddElement<double>(SGI_Abridged::VT_M10, m10, 0.0);
  }
  void add_m54(double m54) {
    fbb_.AddElement<double>(SGI_Abridged::VT_M54, m54, 0.0);
  }
  void add_y10(double y10) {
    fbb_.AddElement<double>(SGI_Abridged::VT_Y10, y10, 0.0);
  }
  void add_y54(double y54) {
    fbb_.AddElement<double>(SGI_Abridged::VT_Y54, y54, 0.0);
  }
  void add_f10(double f10) {
    fbb_.AddElement<double>(SGI_Abridged::VT_F10, f10, 0.0);
  }
  void add_f54(double f54) {
    fbb_.AddElement<double>(SGI_Abridged::VT_F54, f54, 0.0);
  }
  void add_f81(double f81) {
    fbb_.AddElement<double>(SGI_Abridged::VT_F81, f81, 0.0);
  }
  void add_ap(double ap) {
    fbb_.AddElement<double>(SGI_Abridged::VT_AP, ap, 0.0);
  }
  void add_apDuration(int32_t apDuration) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_APDURATION, apDuration, 0);
  }
  void add_kIndex(int32_t kIndex) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_KINDEX, kIndex, 0);
  }
  void add_kp(double kp) {
    fbb_.AddElement<double>(SGI_Abridged::VT_KP, kp, 0.0);
  }
  void add_kpDuration(int32_t kpDuration) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_KPDURATION, kpDuration, 0);
  }
  void add_gamma(int32_t gamma) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_GAMMA, gamma, 0);
  }
  void add_dst(double dst) {
    fbb_.AddElement<double>(SGI_Abridged::VT_DST, dst, 0.0);
  }
  void add_dtc(double dtc) {
    fbb_.AddElement<double>(SGI_Abridged::VT_DTC, dtc, 0.0);
  }
  void add_rbRegionCode(int32_t rbRegionCode) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_RBREGIONCODE, rbRegionCode, 0);
  }
  void add_rbIndex(double rbIndex) {
    fbb_.AddElement<double>(SGI_Abridged::VT_RBINDEX, rbIndex, 0.0);
  }
  void add_normFactor(double normFactor) {
    fbb_.AddElement<double>(SGI_Abridged::VT_NORMFACTOR, normFactor, 0.0);
  }
  void add_rbDuration(int32_t rbDuration) {
    fbb_.AddElement<int32_t>(SGI_Abridged::VT_RBDURATION, rbDuration, 0);
  }
  void add_analyzerAttenuation(double analyzerAttenuation) {
    fbb_.AddElement<double>(SGI_Abridged::VT_ANALYZERATTENUATION, analyzerAttenuation, 0.0);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(SGI_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(SGI_Abridged::VT_TRANSACTIONID, transactionId);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SGI_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SGI_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SGI_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SGI_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SGI_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SGI_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SGI_Abridged::VT_CREATEDBY, createdBy);
  }
  explicit SGI_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SGI_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SGI_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SGI_Abridged> CreateSGI_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sgiDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    SGI_Abridged_state_Enum state = SGI_Abridged_state_Enum_I,
    ::flatbuffers::Offset<::flatbuffers::String> stationName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    int32_t mode = 0,
    SGI_Abridged_precedence_Enum precedence = SGI_Abridged_precedence_Enum_O,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffDegree = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffOrder = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ctce = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> stce = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ctci = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> stci = 0,
    double e10 = 0.0,
    double e54 = 0.0,
    double s10 = 0.0,
    double s54 = 0.0,
    double m10 = 0.0,
    double m54 = 0.0,
    double y10 = 0.0,
    double y54 = 0.0,
    double f10 = 0.0,
    double f54 = 0.0,
    double f81 = 0.0,
    double ap = 0.0,
    int32_t apDuration = 0,
    int32_t kIndex = 0,
    double kp = 0.0,
    int32_t kpDuration = 0,
    int32_t gamma = 0,
    double dst = 0.0,
    double dtc = 0.0,
    int32_t rbRegionCode = 0,
    double rbIndex = 0.0,
    double normFactor = 0.0,
    int32_t rbDuration = 0,
    double analyzerAttenuation = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SGI_Abridged_dataMode_Enum dataMode = SGI_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  SGI_AbridgedBuilder builder_(_fbb);
  builder_.add_analyzerAttenuation(analyzerAttenuation);
  builder_.add_normFactor(normFactor);
  builder_.add_rbIndex(rbIndex);
  builder_.add_dtc(dtc);
  builder_.add_dst(dst);
  builder_.add_kp(kp);
  builder_.add_ap(ap);
  builder_.add_f81(f81);
  builder_.add_f54(f54);
  builder_.add_f10(f10);
  builder_.add_y54(y54);
  builder_.add_y10(y10);
  builder_.add_m54(m54);
  builder_.add_m10(m10);
  builder_.add_s54(s54);
  builder_.add_s10(s10);
  builder_.add_e54(e54);
  builder_.add_e10(e10);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_transactionId(transactionId);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_rbDuration(rbDuration);
  builder_.add_rbRegionCode(rbRegionCode);
  builder_.add_gamma(gamma);
  builder_.add_kpDuration(kpDuration);
  builder_.add_kIndex(kIndex);
  builder_.add_apDuration(apDuration);
  builder_.add_stci(stci);
  builder_.add_ctci(ctci);
  builder_.add_stce(stce);
  builder_.add_ctce(ctce);
  builder_.add_coeffOrder(coeffOrder);
  builder_.add_coeffDegree(coeffDegree);
  builder_.add_mode(mode);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_stationName(stationName);
  builder_.add_type(type);
  builder_.add_sgiDate(sgiDate);
  builder_.add_effectiveDate(effectiveDate);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_precedence(precedence);
  builder_.add_state(state);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SGI_Abridged> CreateSGI_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *effectiveDate = nullptr,
    const char *sgiDate = nullptr,
    const char *type = nullptr,
    SGI_Abridged_state_Enum state = SGI_Abridged_state_Enum_I,
    const char *stationName = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    int32_t mode = 0,
    SGI_Abridged_precedence_Enum precedence = SGI_Abridged_precedence_Enum_O,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffDegree = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffOrder = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ctce = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *stce = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ctci = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *stci = nullptr,
    double e10 = 0.0,
    double e54 = 0.0,
    double s10 = 0.0,
    double s54 = 0.0,
    double m10 = 0.0,
    double m54 = 0.0,
    double y10 = 0.0,
    double y54 = 0.0,
    double f10 = 0.0,
    double f54 = 0.0,
    double f81 = 0.0,
    double ap = 0.0,
    int32_t apDuration = 0,
    int32_t kIndex = 0,
    double kp = 0.0,
    int32_t kpDuration = 0,
    int32_t gamma = 0,
    double dst = 0.0,
    double dtc = 0.0,
    int32_t rbRegionCode = 0,
    double rbIndex = 0.0,
    double normFactor = 0.0,
    int32_t rbDuration = 0,
    double analyzerAttenuation = 0.0,
    const char *rawFileURI = nullptr,
    const char *transactionId = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SGI_Abridged_dataMode_Enum dataMode = SGI_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto effectiveDate__ = effectiveDate ? _fbb.CreateString(effectiveDate) : 0;
  auto sgiDate__ = sgiDate ? _fbb.CreateString(sgiDate) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto stationName__ = stationName ? _fbb.CreateString(stationName) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto coeffDegree__ = coeffDegree ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*coeffDegree) : 0;
  auto coeffOrder__ = coeffOrder ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*coeffOrder) : 0;
  auto ctce__ = ctce ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ctce) : 0;
  auto stce__ = stce ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*stce) : 0;
  auto ctci__ = ctci ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ctci) : 0;
  auto stci__ = stci ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*stci) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateSGI_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      effectiveDate__,
      sgiDate__,
      type__,
      state,
      stationName__,
      idSensor__,
      origSensorId__,
      mode,
      precedence,
      coeffDegree__,
      coeffOrder__,
      ctce__,
      stce__,
      ctci__,
      stci__,
      e10,
      e54,
      s10,
      s54,
      m10,
      m54,
      y10,
      y54,
      f10,
      f54,
      f81,
      ap,
      apDuration,
      kIndex,
      kp,
      kpDuration,
      gamma,
      dst,
      dtc,
      rbRegionCode,
      rbIndex,
      normFactor,
      rbDuration,
      analyzerAttenuation,
      rawFileURI__,
      transactionId__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const SGI_Abridged *GetSGI_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SGI_Abridged>(buf);
}

inline const SGI_Abridged *GetSizePrefixedSGI_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SGI_Abridged>(buf);
}

inline const char *SGI_AbridgedIdentifier() {
  return "SGIA";
}

inline bool SGI_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SGI_AbridgedIdentifier());
}

inline bool SizePrefixedSGI_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SGI_AbridgedIdentifier(), true);
}

inline bool VerifySGI_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SGI_Abridged>(SGI_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSGI_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SGI_Abridged>(SGI_AbridgedIdentifier());
}

inline void FinishSGI_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SGI_Abridged> root) {
  fbb.Finish(root, SGI_AbridgedIdentifier());
}

inline void FinishSizePrefixedSGI_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SGI_Abridged> root) {
  fbb.FinishSizePrefixed(root, SGI_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
