// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitList_Abridged;
struct OnorbitList_AbridgedBuilder;

enum OnorbitList_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnorbitList_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnorbitList_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnorbitList_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnorbitList_Abridged_dataMode_Enum_EXERCISE = 3,
  OnorbitList_Abridged_dataMode_Enum_MIN = OnorbitList_Abridged_dataMode_Enum_REAL,
  OnorbitList_Abridged_dataMode_Enum_MAX = OnorbitList_Abridged_dataMode_Enum_EXERCISE
};

inline const OnorbitList_Abridged_dataMode_Enum (&EnumValuesOnorbitList_Abridged_dataMode_Enum())[4] {
  static const OnorbitList_Abridged_dataMode_Enum values[] = {
    OnorbitList_Abridged_dataMode_Enum_REAL,
    OnorbitList_Abridged_dataMode_Enum_TEST,
    OnorbitList_Abridged_dataMode_Enum_SIMULATED,
    OnorbitList_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnorbitList_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnorbitList_Abridged_dataMode_Enum(OnorbitList_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnorbitList_Abridged_dataMode_Enum_REAL, OnorbitList_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnorbitList_Abridged_dataMode_Enum()[index];
}

/// /// Table for maintaining generic lists of OnOrbit objects (e.g.  Favorites, HIO, SHIO, HVA, etc).
struct OnorbitList_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitList_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_NAME = 8,
    VT_DESCRIPTION = 10,
    VT_ONORBITS = 12,
    VT_SOURCE = 14,
    VT_ORIGIN = 16,
    VT_DATAMODE = 18,
    VT_CREATEDAT = 20,
    VT_CREATEDBY = 22
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITLIST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique name of the list.
  /// Example: /// Example: People
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Description of the list.
  /// Example: /// Example: DESCRIPTION_OF_LIST
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Ordered array of Onorbit IDs belonging to this list.
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *onorbits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ONORBITS);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OnorbitList_Abridged_dataMode_Enum dataMode() const {
    return static_cast<OnorbitList_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_ONORBITS) &&
           verifier.VerifyVector(onorbits()) &&
           verifier.VerifyVectorOfStrings(onorbits()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct OnorbitList_AbridgedBuilder {
  typedef OnorbitList_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_NAME, name);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_DESCRIPTION, description);
  }
  void add_onorbits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> onorbits) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_ONORBITS, onorbits);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(OnorbitList_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnorbitList_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnorbitList_Abridged::VT_CREATEDBY, createdBy);
  }
  explicit OnorbitList_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitList_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitList_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitList_Abridged> CreateOnorbitList_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> onorbits = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    OnorbitList_Abridged_dataMode_Enum dataMode = OnorbitList_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  OnorbitList_AbridgedBuilder builder_(_fbb);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_onorbits(onorbits);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitList_Abridged> CreateOnorbitList_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *onorbits = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    OnorbitList_Abridged_dataMode_Enum dataMode = OnorbitList_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto onorbits__ = onorbits ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*onorbits) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateOnorbitList_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      name__,
      description__,
      onorbits__,
      source__,
      origin__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const OnorbitList_Abridged *GetOnorbitList_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitList_Abridged>(buf);
}

inline const OnorbitList_Abridged *GetSizePrefixedOnorbitList_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitList_Abridged>(buf);
}

inline const char *OnorbitList_AbridgedIdentifier() {
  return "ONOR";
}

inline bool OnorbitList_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitList_AbridgedIdentifier());
}

inline bool SizePrefixedOnorbitList_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitList_AbridgedIdentifier(), true);
}

inline bool VerifyOnorbitList_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitList_Abridged>(OnorbitList_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOnorbitList_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitList_Abridged>(OnorbitList_AbridgedIdentifier());
}

inline void FinishOnorbitList_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitList_Abridged> root) {
  fbb.Finish(root, OnorbitList_AbridgedIdentifier());
}

inline void FinishSizePrefixedOnorbitList_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitList_Abridged> root) {
  fbb.FinishSizePrefixed(root, OnorbitList_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
