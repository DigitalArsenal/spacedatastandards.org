// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DiplomaticClearanceRemarks_Abridged;
struct DiplomaticClearanceRemarks_AbridgedBuilder;

/// /// Collection of diplomatic clearance remarks.
struct DiplomaticClearanceRemarks_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DiplomaticClearanceRemarks_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GDSSREMARKID = 4,
    VT_TEXT = 6,
    VT_DATE = 8,
    VT_USER = 10
  };
  /// Global Decision Support System (GDSS) remark identifier.
  /// Example: /// Example: GDSSREMARK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *gdssRemarkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GDSSREMARKID);
  }
  /// Text of the remark.
  /// Example: /// Example: Example mission remarks.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *date() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATE);
  }
  /// User who published the remark.
  /// Example: /// Example: John Doe
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *user() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GDSSREMARKID) &&
           verifier.VerifyString(gdssRemarkId()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_DATE) &&
           verifier.VerifyString(date()) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           verifier.EndTable();
  }
};

struct DiplomaticClearanceRemarks_AbridgedBuilder {
  typedef DiplomaticClearanceRemarks_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gdssRemarkId(::flatbuffers::Offset<::flatbuffers::String> gdssRemarkId) {
    fbb_.AddOffset(DiplomaticClearanceRemarks_Abridged::VT_GDSSREMARKID, gdssRemarkId);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(DiplomaticClearanceRemarks_Abridged::VT_TEXT, text);
  }
  void add_date(::flatbuffers::Offset<::flatbuffers::String> date) {
    fbb_.AddOffset(DiplomaticClearanceRemarks_Abridged::VT_DATE, date);
  }
  void add_user(::flatbuffers::Offset<::flatbuffers::String> user) {
    fbb_.AddOffset(DiplomaticClearanceRemarks_Abridged::VT_USER, user);
  }
  explicit DiplomaticClearanceRemarks_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged> CreateDiplomaticClearanceRemarks_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> gdssRemarkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> date = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user = 0) {
  DiplomaticClearanceRemarks_AbridgedBuilder builder_(_fbb);
  builder_.add_user(user);
  builder_.add_date(date);
  builder_.add_text(text);
  builder_.add_gdssRemarkId(gdssRemarkId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged> CreateDiplomaticClearanceRemarks_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *gdssRemarkId = nullptr,
    const char *text = nullptr,
    const char *date = nullptr,
    const char *user = nullptr) {
  auto gdssRemarkId__ = gdssRemarkId ? _fbb.CreateString(gdssRemarkId) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto date__ = date ? _fbb.CreateString(date) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  return CreateDiplomaticClearanceRemarks_Abridged(
      _fbb,
      gdssRemarkId__,
      text__,
      date__,
      user__);
}

inline const DiplomaticClearanceRemarks_Abridged *GetDiplomaticClearanceRemarks_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DiplomaticClearanceRemarks_Abridged>(buf);
}

inline const DiplomaticClearanceRemarks_Abridged *GetSizePrefixedDiplomaticClearanceRemarks_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DiplomaticClearanceRemarks_Abridged>(buf);
}

inline const char *DiplomaticClearanceRemarks_AbridgedIdentifier() {
  return "DIPL";
}

inline bool DiplomaticClearanceRemarks_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DiplomaticClearanceRemarks_AbridgedIdentifier());
}

inline bool SizePrefixedDiplomaticClearanceRemarks_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DiplomaticClearanceRemarks_AbridgedIdentifier(), true);
}

inline bool VerifyDiplomaticClearanceRemarks_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DiplomaticClearanceRemarks_Abridged>(DiplomaticClearanceRemarks_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDiplomaticClearanceRemarks_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DiplomaticClearanceRemarks_Abridged>(DiplomaticClearanceRemarks_AbridgedIdentifier());
}

inline void FinishDiplomaticClearanceRemarks_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged> root) {
  fbb.Finish(root, DiplomaticClearanceRemarks_AbridgedIdentifier());
}

inline void FinishSizePrefixedDiplomaticClearanceRemarks_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DiplomaticClearanceRemarks_Abridged> root) {
  fbb.FinishSizePrefixed(root, DiplomaticClearanceRemarks_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
