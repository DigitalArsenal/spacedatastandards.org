// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationProfileDensityShiftedChebyshevEntry_Abridged;
struct IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuilder;

/// /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
struct IonoObservationProfileDensityShiftedChebyshevEntry_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LAYER = 4,
    VT_FSTART = 6,
    VT_FSTOP = 8,
    VT_PEAKHEIGHT = 10,
    VT_ZHALFNM = 12,
    VT_N = 14,
    VT_COEFFS = 16,
    VT_ERROR = 18
  };
  /// The ionospheric plasma layer.
  /// Example: /// Example: F2
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *layer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAYER);
  }
  /// Start frequency of the layer, in MHz.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  double fstart() const {
    return GetField<double>(VT_FSTART, 0.0);
  }
  /// Stop frequency of the layer, in MHz.
  /// Example: /// Example: 1.39
  /// Constraints: No constraints specified.
  double fstop() const {
    return GetField<double>(VT_FSTOP, 0.0);
  }
  /// Peak height of the layer, in kilometers.
  /// Example: /// Example: 110.1
  /// Constraints: No constraints specified.
  double peakheight() const {
    return GetField<double>(VT_PEAKHEIGHT, 0.0);
  }
  /// Height at which density is half of the peak Nm, in kilometers.
  /// Example: /// Example: 210.1
  /// Constraints: No constraints specified.
  double zhalfNm() const {
    return GetField<double>(VT_ZHALFNM, 0.0);
  }
  /// Number of coefficients in the expansion.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t n() const {
    return GetField<int32_t>(VT_N, 0);
  }
  /// Array of coefficients.
  /// Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COEFFS);
  }
  /// Best fit error.
  /// Example: /// Example: 0.02
  /// Constraints: No constraints specified.
  double error() const {
    return GetField<double>(VT_ERROR, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LAYER) &&
           verifier.VerifyString(layer()) &&
           VerifyField<double>(verifier, VT_FSTART, 8) &&
           VerifyField<double>(verifier, VT_FSTOP, 8) &&
           VerifyField<double>(verifier, VT_PEAKHEIGHT, 8) &&
           VerifyField<double>(verifier, VT_ZHALFNM, 8) &&
           VerifyField<int32_t>(verifier, VT_N, 4) &&
           VerifyOffset(verifier, VT_COEFFS) &&
           verifier.VerifyVector(coeffs()) &&
           verifier.VerifyVectorOfStrings(coeffs()) &&
           VerifyField<double>(verifier, VT_ERROR, 8) &&
           verifier.EndTable();
  }
};

struct IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuilder {
  typedef IonoObservationProfileDensityShiftedChebyshevEntry_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_layer(::flatbuffers::Offset<::flatbuffers::String> layer) {
    fbb_.AddOffset(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_LAYER, layer);
  }
  void add_fstart(double fstart) {
    fbb_.AddElement<double>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_FSTART, fstart, 0.0);
  }
  void add_fstop(double fstop) {
    fbb_.AddElement<double>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_FSTOP, fstop, 0.0);
  }
  void add_peakheight(double peakheight) {
    fbb_.AddElement<double>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_PEAKHEIGHT, peakheight, 0.0);
  }
  void add_zhalfNm(double zhalfNm) {
    fbb_.AddElement<double>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_ZHALFNM, zhalfNm, 0.0);
  }
  void add_n(int32_t n) {
    fbb_.AddElement<int32_t>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_N, n, 0);
  }
  void add_coeffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffs) {
    fbb_.AddOffset(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_COEFFS, coeffs);
  }
  void add_error(double error) {
    fbb_.AddElement<double>(IonoObservationProfileDensityShiftedChebyshevEntry_Abridged::VT_ERROR, error, 0.0);
  }
  explicit IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged> CreateIonoObservationProfileDensityShiftedChebyshevEntry_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> layer = 0,
    double fstart = 0.0,
    double fstop = 0.0,
    double peakheight = 0.0,
    double zhalfNm = 0.0,
    int32_t n = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> coeffs = 0,
    double error = 0.0) {
  IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_zhalfNm(zhalfNm);
  builder_.add_peakheight(peakheight);
  builder_.add_fstop(fstop);
  builder_.add_fstart(fstart);
  builder_.add_coeffs(coeffs);
  builder_.add_n(n);
  builder_.add_layer(layer);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged> CreateIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *layer = nullptr,
    double fstart = 0.0,
    double fstop = 0.0,
    double peakheight = 0.0,
    double zhalfNm = 0.0,
    int32_t n = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *coeffs = nullptr,
    double error = 0.0) {
  auto layer__ = layer ? _fbb.CreateString(layer) : 0;
  auto coeffs__ = coeffs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*coeffs) : 0;
  return CreateIonoObservationProfileDensityShiftedChebyshevEntry_Abridged(
      _fbb,
      layer__,
      fstart,
      fstop,
      peakheight,
      zhalfNm,
      n,
      coeffs__,
      error);
}

inline const IonoObservationProfileDensityShiftedChebyshevEntry_Abridged *GetIonoObservationProfileDensityShiftedChebyshevEntry_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged>(buf);
}

inline const IonoObservationProfileDensityShiftedChebyshevEntry_Abridged *GetSizePrefixedIonoObservationProfileDensityShiftedChebyshevEntry_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged>(buf);
}

inline const char *IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged>(IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged>(IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier());
}

inline void FinishIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged> root) {
  fbb.Finish(root, IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationProfileDensityShiftedChebyshevEntry_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationProfileDensityShiftedChebyshevEntry_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationProfileDensityShiftedChebyshevEntry_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
