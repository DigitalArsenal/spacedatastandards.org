// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Aircraft_Full;
struct Aircraft_FullBuilder;

enum Aircraft_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Aircraft_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Aircraft_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Aircraft_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Aircraft_Full_dataMode_Enum_EXERCISE = 3,
  Aircraft_Full_dataMode_Enum_MIN = Aircraft_Full_dataMode_Enum_REAL,
  Aircraft_Full_dataMode_Enum_MAX = Aircraft_Full_dataMode_Enum_EXERCISE
};

inline const Aircraft_Full_dataMode_Enum (&EnumValuesAircraft_Full_dataMode_Enum())[4] {
  static const Aircraft_Full_dataMode_Enum values[] = {
    Aircraft_Full_dataMode_Enum_REAL,
    Aircraft_Full_dataMode_Enum_TEST,
    Aircraft_Full_dataMode_Enum_SIMULATED,
    Aircraft_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAircraft_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAircraft_Full_dataMode_Enum(Aircraft_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Aircraft_Full_dataMode_Enum_REAL, Aircraft_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAircraft_Full_dataMode_Enum()[index];
}

/// /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
struct Aircraft_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Aircraft_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ENTITY = 8,
    VT_IDENTITY = 10,
    VT_AIRCRAFTMDS = 12,
    VT_TAILNUMBER = 14,
    VT_SERIALNUMBER = 16,
    VT_OWNER = 18,
    VT_COMMAND = 20,
    VT_CATEGORY = 22,
    VT_DTD = 24,
    VT_CRUISESPEED = 26,
    VT_MAXSPEED = 28,
    VT_MINREQRUNWAYM = 30,
    VT_MINREQRUNWAYFT = 32,
    VT_NOMINALTATIME = 34,
    VT_NOTES = 36,
    VT_CREATEDAT = 38,
    VT_CREATEDBY = 40,
    VT_UPDATEDAT = 42,
    VT_UPDATEDBY = 44,
    VT_SOURCEDL = 46,
    VT_SOURCE = 48,
    VT_ORIGIN = 50,
    VT_DATAMODE = 52,
    VT_ORIGNETWORK = 54
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  /// ID of the parent entity for this aircraft.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: E-2C HAWKEYE
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *aircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTMDS);
  }
  /// The tail number of this aircraft.
  /// Example: /// Example: N702JG
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *tailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAILNUMBER);
  }
  /// Full serial number of the aircraft.
  /// Example: /// Example: 7007187
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *serialNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERIALNUMBER);
  }
  /// The wing or unit that owns the aircraft.
  /// Example: /// Example: 437AW
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *owner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER);
  }
  /// The Air Force major command (MAJCOM) overseeing the aircraft.
  /// Example: /// Example: HQACC
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *command() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMAND);
  }
  /// The category of aircraft (e.g. M = Military, C = Commercial).
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  /// Military data network data transfer device ID for this aircraft.
  /// Example: /// Example: 005
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *dtd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DTD);
  }
  /// The cruise speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 915
  /// Constraints: No constraints specified.
  double cruiseSpeed() const {
    return GetField<double>(VT_CRUISESPEED, 0.0);
  }
  /// The maximum air speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 2655.1
  /// Constraints: No constraints specified.
  double maxSpeed() const {
    return GetField<double>(VT_MAXSPEED, 0.0);
  }
  /// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  int32_t minReqRunwayM() const {
    return GetField<int32_t>(VT_MINREQRUNWAYM, 0);
  }
  /// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 3000
  /// Constraints: No constraints specified.
  int32_t minReqRunwayFt() const {
    return GetField<int32_t>(VT_MINREQRUNWAYFT, 0);
  }
  /// The nominal turnaround time for this aircraft, in minutes.
  /// Example: /// Example: 500
  /// Constraints: No constraints specified.
  int32_t nominalTATime() const {
    return GetField<int32_t>(VT_NOMINALTATIME, 0);
  }
  /// Optional notes/comments for this aircraft.
  /// Example: /// Example: Notes for this aircraft
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  Aircraft_Full_dataMode_Enum dataMode() const {
    return static_cast<Aircraft_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_AIRCRAFTMDS) &&
           verifier.VerifyString(aircraftMDS()) &&
           VerifyOffset(verifier, VT_TAILNUMBER) &&
           verifier.VerifyString(tailNumber()) &&
           VerifyOffset(verifier, VT_SERIALNUMBER) &&
           verifier.VerifyString(serialNumber()) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           VerifyOffset(verifier, VT_COMMAND) &&
           verifier.VerifyString(command()) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_DTD) &&
           verifier.VerifyString(dtd()) &&
           VerifyField<double>(verifier, VT_CRUISESPEED, 8) &&
           VerifyField<double>(verifier, VT_MAXSPEED, 8) &&
           VerifyField<int32_t>(verifier, VT_MINREQRUNWAYM, 4) &&
           VerifyField<int32_t>(verifier, VT_MINREQRUNWAYFT, 4) &&
           VerifyField<int32_t>(verifier, VT_NOMINALTATIME, 4) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Aircraft_FullBuilder {
  typedef Aircraft_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Aircraft_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Aircraft_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Aircraft_Full::VT_ENTITY, entity);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Aircraft_Full::VT_IDENTITY, idEntity);
  }
  void add_aircraftMDS(::flatbuffers::Offset<::flatbuffers::String> aircraftMDS) {
    fbb_.AddOffset(Aircraft_Full::VT_AIRCRAFTMDS, aircraftMDS);
  }
  void add_tailNumber(::flatbuffers::Offset<::flatbuffers::String> tailNumber) {
    fbb_.AddOffset(Aircraft_Full::VT_TAILNUMBER, tailNumber);
  }
  void add_serialNumber(::flatbuffers::Offset<::flatbuffers::String> serialNumber) {
    fbb_.AddOffset(Aircraft_Full::VT_SERIALNUMBER, serialNumber);
  }
  void add_owner(::flatbuffers::Offset<::flatbuffers::String> owner) {
    fbb_.AddOffset(Aircraft_Full::VT_OWNER, owner);
  }
  void add_command(::flatbuffers::Offset<::flatbuffers::String> command) {
    fbb_.AddOffset(Aircraft_Full::VT_COMMAND, command);
  }
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(Aircraft_Full::VT_CATEGORY, category);
  }
  void add_dtd(::flatbuffers::Offset<::flatbuffers::String> dtd) {
    fbb_.AddOffset(Aircraft_Full::VT_DTD, dtd);
  }
  void add_cruiseSpeed(double cruiseSpeed) {
    fbb_.AddElement<double>(Aircraft_Full::VT_CRUISESPEED, cruiseSpeed, 0.0);
  }
  void add_maxSpeed(double maxSpeed) {
    fbb_.AddElement<double>(Aircraft_Full::VT_MAXSPEED, maxSpeed, 0.0);
  }
  void add_minReqRunwayM(int32_t minReqRunwayM) {
    fbb_.AddElement<int32_t>(Aircraft_Full::VT_MINREQRUNWAYM, minReqRunwayM, 0);
  }
  void add_minReqRunwayFt(int32_t minReqRunwayFt) {
    fbb_.AddElement<int32_t>(Aircraft_Full::VT_MINREQRUNWAYFT, minReqRunwayFt, 0);
  }
  void add_nominalTATime(int32_t nominalTATime) {
    fbb_.AddElement<int32_t>(Aircraft_Full::VT_NOMINALTATIME, nominalTATime, 0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(Aircraft_Full::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Aircraft_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Aircraft_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Aircraft_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Aircraft_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Aircraft_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Aircraft_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Aircraft_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(Aircraft_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Aircraft_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Aircraft_Full::VT_ORIGNETWORK, origNetwork);
  }
  explicit Aircraft_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Aircraft_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Aircraft_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Aircraft_Full> CreateAircraft_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> serialNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> owner = 0,
    ::flatbuffers::Offset<::flatbuffers::String> command = 0,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dtd = 0,
    double cruiseSpeed = 0.0,
    double maxSpeed = 0.0,
    int32_t minReqRunwayM = 0,
    int32_t minReqRunwayFt = 0,
    int32_t nominalTATime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    Aircraft_Full_dataMode_Enum dataMode = Aircraft_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Aircraft_FullBuilder builder_(_fbb);
  builder_.add_maxSpeed(maxSpeed);
  builder_.add_cruiseSpeed(cruiseSpeed);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_nominalTATime(nominalTATime);
  builder_.add_minReqRunwayFt(minReqRunwayFt);
  builder_.add_minReqRunwayM(minReqRunwayM);
  builder_.add_dtd(dtd);
  builder_.add_category(category);
  builder_.add_command(command);
  builder_.add_owner(owner);
  builder_.add_serialNumber(serialNumber);
  builder_.add_tailNumber(tailNumber);
  builder_.add_aircraftMDS(aircraftMDS);
  builder_.add_idEntity(idEntity);
  builder_.add_entity(entity);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Aircraft_Full> CreateAircraft_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *entity = nullptr,
    const char *idEntity = nullptr,
    const char *aircraftMDS = nullptr,
    const char *tailNumber = nullptr,
    const char *serialNumber = nullptr,
    const char *owner = nullptr,
    const char *command = nullptr,
    const char *category = nullptr,
    const char *dtd = nullptr,
    double cruiseSpeed = 0.0,
    double maxSpeed = 0.0,
    int32_t minReqRunwayM = 0,
    int32_t minReqRunwayFt = 0,
    int32_t nominalTATime = 0,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    Aircraft_Full_dataMode_Enum dataMode = Aircraft_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto aircraftMDS__ = aircraftMDS ? _fbb.CreateString(aircraftMDS) : 0;
  auto tailNumber__ = tailNumber ? _fbb.CreateString(tailNumber) : 0;
  auto serialNumber__ = serialNumber ? _fbb.CreateString(serialNumber) : 0;
  auto owner__ = owner ? _fbb.CreateString(owner) : 0;
  auto command__ = command ? _fbb.CreateString(command) : 0;
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto dtd__ = dtd ? _fbb.CreateString(dtd) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAircraft_Full(
      _fbb,
      id__,
      classificationMarking__,
      entity__,
      idEntity__,
      aircraftMDS__,
      tailNumber__,
      serialNumber__,
      owner__,
      command__,
      category__,
      dtd__,
      cruiseSpeed,
      maxSpeed,
      minReqRunwayM,
      minReqRunwayFt,
      nominalTATime,
      notes__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const Aircraft_Full *GetAircraft_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Aircraft_Full>(buf);
}

inline const Aircraft_Full *GetSizePrefixedAircraft_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Aircraft_Full>(buf);
}

inline const char *Aircraft_FullIdentifier() {
  return "AIRC";
}

inline bool Aircraft_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Aircraft_FullIdentifier());
}

inline bool SizePrefixedAircraft_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Aircraft_FullIdentifier(), true);
}

inline bool VerifyAircraft_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Aircraft_Full>(Aircraft_FullIdentifier());
}

inline bool VerifySizePrefixedAircraft_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Aircraft_Full>(Aircraft_FullIdentifier());
}

inline void FinishAircraft_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Aircraft_Full> root) {
  fbb.Finish(root, Aircraft_FullIdentifier());
}

inline void FinishSizePrefixedAircraft_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Aircraft_Full> root) {
  fbb.FinishSizePrefixed(root, Aircraft_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
