// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkSpecTracks_Ingest;
struct DataLinkSpecTracks_IngestBuilder;

/// /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
struct DataLinkSpecTracks_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkSpecTracks_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SPECTRACKNUM = 4,
    VT_SPECTRACKNUMDESC = 6
  };
  /// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
  /// Example: /// Example: 12345
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *specTrackNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECTRACKNUM);
  }
  /// Description of the special track number.
  /// Example: /// Example: SAM SITE CHARLIE
  /// Constraints: Minimum length = 0, Maximum length = 40
  const ::flatbuffers::String *specTrackNumDesc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECTRACKNUMDESC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SPECTRACKNUM) &&
           verifier.VerifyString(specTrackNum()) &&
           VerifyOffset(verifier, VT_SPECTRACKNUMDESC) &&
           verifier.VerifyString(specTrackNumDesc()) &&
           verifier.EndTable();
  }
};

struct DataLinkSpecTracks_IngestBuilder {
  typedef DataLinkSpecTracks_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_specTrackNum(::flatbuffers::Offset<::flatbuffers::String> specTrackNum) {
    fbb_.AddOffset(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUM, specTrackNum);
  }
  void add_specTrackNumDesc(::flatbuffers::Offset<::flatbuffers::String> specTrackNumDesc) {
    fbb_.AddOffset(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUMDESC, specTrackNumDesc);
  }
  explicit DataLinkSpecTracks_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkSpecTracks_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkSpecTracks_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkSpecTracks_Ingest> CreateDataLinkSpecTracks_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> specTrackNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> specTrackNumDesc = 0) {
  DataLinkSpecTracks_IngestBuilder builder_(_fbb);
  builder_.add_specTrackNumDesc(specTrackNumDesc);
  builder_.add_specTrackNum(specTrackNum);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkSpecTracks_Ingest> CreateDataLinkSpecTracks_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *specTrackNum = nullptr,
    const char *specTrackNumDesc = nullptr) {
  auto specTrackNum__ = specTrackNum ? _fbb.CreateString(specTrackNum) : 0;
  auto specTrackNumDesc__ = specTrackNumDesc ? _fbb.CreateString(specTrackNumDesc) : 0;
  return CreateDataLinkSpecTracks_Ingest(
      _fbb,
      specTrackNum__,
      specTrackNumDesc__);
}

inline const DataLinkSpecTracks_Ingest *GetDataLinkSpecTracks_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkSpecTracks_Ingest>(buf);
}

inline const DataLinkSpecTracks_Ingest *GetSizePrefixedDataLinkSpecTracks_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkSpecTracks_Ingest>(buf);
}

inline const char *DataLinkSpecTracks_IngestIdentifier() {
  return "DATA";
}

inline bool DataLinkSpecTracks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkSpecTracks_IngestIdentifier());
}

inline bool SizePrefixedDataLinkSpecTracks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkSpecTracks_IngestIdentifier(), true);
}

inline bool VerifyDataLinkSpecTracks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkSpecTracks_Ingest>(DataLinkSpecTracks_IngestIdentifier());
}

inline bool VerifySizePrefixedDataLinkSpecTracks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkSpecTracks_Ingest>(DataLinkSpecTracks_IngestIdentifier());
}

inline void FinishDataLinkSpecTracks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkSpecTracks_Ingest> root) {
  fbb.Finish(root, DataLinkSpecTracks_IngestIdentifier());
}

inline void FinishSizePrefixedDataLinkSpecTracks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkSpecTracks_Ingest> root) {
  fbb.FinishSizePrefixed(root, DataLinkSpecTracks_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
