// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PointOfContact_Full;
struct PointOfContact_FullBuilder;

/// /// Point of contacts for scheduling or modifying the route.
struct PointOfContact_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointOfContact_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POCSEQUENCEID = 4,
    VT_POCTYPENAME = 6,
    VT_POCNAME = 8,
    VT_OFFICE = 10,
    VT_USERNAME = 12,
    VT_RANK = 14,
    VT_POCORG = 16,
    VT_PHONE = 18,
    VT_REMARK = 20
  };
  /// Sequencing field for point of contact.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t pocSequenceId() const {
    return GetField<int32_t>(VT_POCSEQUENCEID, 0);
  }
  /// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
  /// Example: /// Example: Originator
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pocTypeName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCTYPENAME);
  }
  /// The name of the contact.
  /// Example: /// Example: Fred Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCNAME);
  }
  /// Office name for which the contact belongs.
  /// Example: /// Example: A34
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *office() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OFFICE);
  }
  /// The username of the contact.
  /// Example: /// Example: fgsmith
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  /// The rank of contact.
  /// Example: /// Example: Capt
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *rank() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANK);
  }
  /// Organization name for which the contact belongs.
  /// Example: /// Example: HQAF
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pocOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCORG);
  }
  /// Phone number of the contact.
  /// Example: /// Example: 8675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *phone() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PHONE);
  }
  /// Text of the remark.
  /// Example: /// Example: POC remark.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *remark() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMARK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_POCSEQUENCEID, 4) &&
           VerifyOffset(verifier, VT_POCTYPENAME) &&
           verifier.VerifyString(pocTypeName()) &&
           VerifyOffset(verifier, VT_POCNAME) &&
           verifier.VerifyString(pocName()) &&
           VerifyOffset(verifier, VT_OFFICE) &&
           verifier.VerifyString(office()) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_RANK) &&
           verifier.VerifyString(rank()) &&
           VerifyOffset(verifier, VT_POCORG) &&
           verifier.VerifyString(pocOrg()) &&
           VerifyOffset(verifier, VT_PHONE) &&
           verifier.VerifyString(phone()) &&
           VerifyOffset(verifier, VT_REMARK) &&
           verifier.VerifyString(remark()) &&
           verifier.EndTable();
  }
};

struct PointOfContact_FullBuilder {
  typedef PointOfContact_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pocSequenceId(int32_t pocSequenceId) {
    fbb_.AddElement<int32_t>(PointOfContact_Full::VT_POCSEQUENCEID, pocSequenceId, 0);
  }
  void add_pocTypeName(::flatbuffers::Offset<::flatbuffers::String> pocTypeName) {
    fbb_.AddOffset(PointOfContact_Full::VT_POCTYPENAME, pocTypeName);
  }
  void add_pocName(::flatbuffers::Offset<::flatbuffers::String> pocName) {
    fbb_.AddOffset(PointOfContact_Full::VT_POCNAME, pocName);
  }
  void add_office(::flatbuffers::Offset<::flatbuffers::String> office) {
    fbb_.AddOffset(PointOfContact_Full::VT_OFFICE, office);
  }
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(PointOfContact_Full::VT_USERNAME, username);
  }
  void add_rank(::flatbuffers::Offset<::flatbuffers::String> rank) {
    fbb_.AddOffset(PointOfContact_Full::VT_RANK, rank);
  }
  void add_pocOrg(::flatbuffers::Offset<::flatbuffers::String> pocOrg) {
    fbb_.AddOffset(PointOfContact_Full::VT_POCORG, pocOrg);
  }
  void add_phone(::flatbuffers::Offset<::flatbuffers::String> phone) {
    fbb_.AddOffset(PointOfContact_Full::VT_PHONE, phone);
  }
  void add_remark(::flatbuffers::Offset<::flatbuffers::String> remark) {
    fbb_.AddOffset(PointOfContact_Full::VT_REMARK, remark);
  }
  explicit PointOfContact_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointOfContact_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointOfContact_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointOfContact_Full> CreatePointOfContact_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pocSequenceId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocTypeName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> office = 0,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rank = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocOrg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> phone = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remark = 0) {
  PointOfContact_FullBuilder builder_(_fbb);
  builder_.add_remark(remark);
  builder_.add_phone(phone);
  builder_.add_pocOrg(pocOrg);
  builder_.add_rank(rank);
  builder_.add_username(username);
  builder_.add_office(office);
  builder_.add_pocName(pocName);
  builder_.add_pocTypeName(pocTypeName);
  builder_.add_pocSequenceId(pocSequenceId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PointOfContact_Full> CreatePointOfContact_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pocSequenceId = 0,
    const char *pocTypeName = nullptr,
    const char *pocName = nullptr,
    const char *office = nullptr,
    const char *username = nullptr,
    const char *rank = nullptr,
    const char *pocOrg = nullptr,
    const char *phone = nullptr,
    const char *remark = nullptr) {
  auto pocTypeName__ = pocTypeName ? _fbb.CreateString(pocTypeName) : 0;
  auto pocName__ = pocName ? _fbb.CreateString(pocName) : 0;
  auto office__ = office ? _fbb.CreateString(office) : 0;
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto rank__ = rank ? _fbb.CreateString(rank) : 0;
  auto pocOrg__ = pocOrg ? _fbb.CreateString(pocOrg) : 0;
  auto phone__ = phone ? _fbb.CreateString(phone) : 0;
  auto remark__ = remark ? _fbb.CreateString(remark) : 0;
  return CreatePointOfContact_Full(
      _fbb,
      pocSequenceId,
      pocTypeName__,
      pocName__,
      office__,
      username__,
      rank__,
      pocOrg__,
      phone__,
      remark__);
}

inline const PointOfContact_Full *GetPointOfContact_Full(const void *buf) {
  return ::flatbuffers::GetRoot<PointOfContact_Full>(buf);
}

inline const PointOfContact_Full *GetSizePrefixedPointOfContact_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PointOfContact_Full>(buf);
}

inline const char *PointOfContact_FullIdentifier() {
  return "POIN";
}

inline bool PointOfContact_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PointOfContact_FullIdentifier());
}

inline bool SizePrefixedPointOfContact_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PointOfContact_FullIdentifier(), true);
}

inline bool VerifyPointOfContact_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PointOfContact_Full>(PointOfContact_FullIdentifier());
}

inline bool VerifySizePrefixedPointOfContact_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PointOfContact_Full>(PointOfContact_FullIdentifier());
}

inline void FinishPointOfContact_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PointOfContact_Full> root) {
  fbb.Finish(root, PointOfContact_FullIdentifier());
}

inline void FinishSizePrefixedPointOfContact_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PointOfContact_Full> root) {
  fbb.FinishSizePrefixed(root, PointOfContact_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
