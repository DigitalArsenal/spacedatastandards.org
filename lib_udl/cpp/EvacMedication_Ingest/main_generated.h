// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacMedication_Ingest;
struct EvacMedication_IngestBuilder;

/// /// Medication specifics.
struct EvacMedication_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacMedication_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODYPART = 6,
    VT_DOSE = 8,
    VT_ADMINROUTE = 10,
    VT_TIME = 12,
    VT_COMMENTS = 14
  };
  /// The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
  /// Example: /// Example: TYLENOL
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: ARM LEFT BACK
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// Quantity of medicine or drug administered or recommended to be taken at a particular time.
  /// Example: /// Example: 800mg
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *dose() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOSE);
  }
  /// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
  /// Example: /// Example: ORAL
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *adminRoute() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADMINROUTE);
  }
  /// The time that the medication was administered in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// Additional comments on the patient's medication information.
  /// Example: /// Example: Comments on the patient's medication information.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_DOSE) &&
           verifier.VerifyString(dose()) &&
           VerifyOffset(verifier, VT_ADMINROUTE) &&
           verifier.VerifyString(adminRoute()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacMedication_IngestBuilder {
  typedef EvacMedication_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_TYPE, type);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_BODYPART, bodyPart);
  }
  void add_dose(::flatbuffers::Offset<::flatbuffers::String> dose) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_DOSE, dose);
  }
  void add_adminRoute(::flatbuffers::Offset<::flatbuffers::String> adminRoute) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_ADMINROUTE, adminRoute);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_TIME, time);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacMedication_Ingest::VT_COMMENTS, comments);
  }
  explicit EvacMedication_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacMedication_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacMedication_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacMedication_Ingest> CreateEvacMedication_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dose = 0,
    ::flatbuffers::Offset<::flatbuffers::String> adminRoute = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacMedication_IngestBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_time(time);
  builder_.add_adminRoute(adminRoute);
  builder_.add_dose(dose);
  builder_.add_bodyPart(bodyPart);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacMedication_Ingest> CreateEvacMedication_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *bodyPart = nullptr,
    const char *dose = nullptr,
    const char *adminRoute = nullptr,
    const char *time = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto dose__ = dose ? _fbb.CreateString(dose) : 0;
  auto adminRoute__ = adminRoute ? _fbb.CreateString(adminRoute) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacMedication_Ingest(
      _fbb,
      type__,
      bodyPart__,
      dose__,
      adminRoute__,
      time__,
      comments__);
}

inline const EvacMedication_Ingest *GetEvacMedication_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<EvacMedication_Ingest>(buf);
}

inline const EvacMedication_Ingest *GetSizePrefixedEvacMedication_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacMedication_Ingest>(buf);
}

inline const char *EvacMedication_IngestIdentifier() {
  return "EVAC";
}

inline bool EvacMedication_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacMedication_IngestIdentifier());
}

inline bool SizePrefixedEvacMedication_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacMedication_IngestIdentifier(), true);
}

inline bool VerifyEvacMedication_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacMedication_Ingest>(EvacMedication_IngestIdentifier());
}

inline bool VerifySizePrefixedEvacMedication_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacMedication_Ingest>(EvacMedication_IngestIdentifier());
}

inline void FinishEvacMedication_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacMedication_Ingest> root) {
  fbb.Finish(root, EvacMedication_IngestIdentifier());
}

inline void FinishSizePrefixedEvacMedication_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacMedication_Ingest> root) {
  fbb.FinishSizePrefixed(root, EvacMedication_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
