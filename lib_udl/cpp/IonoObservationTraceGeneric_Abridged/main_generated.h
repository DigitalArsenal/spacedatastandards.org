// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationTraceGeneric_Abridged;
struct IonoObservationTraceGeneric_AbridgedBuilder;

/// /// Multi dimensional array of trace generic data.
struct IonoObservationTraceGeneric_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationTraceGeneric_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_DIMENSIONNAME = 6,
    VT_NOTES = 8
  };
  /// Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.
  /// Example: /// Example: [[[1.23, 1.0903]]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DATA);
  }
  /// Array of dimension names for trace generic data.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DIMENSIONNAME);
  }
  /// Notes for the trace generic data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           VerifyOffset(verifier, VT_DIMENSIONNAME) &&
           verifier.VerifyVector(dimensionName()) &&
           verifier.VerifyVectorOfStrings(dimensionName()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           verifier.EndTable();
  }
};

struct IonoObservationTraceGeneric_AbridgedBuilder {
  typedef IonoObservationTraceGeneric_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data) {
    fbb_.AddOffset(IonoObservationTraceGeneric_Abridged::VT_DATA, data);
  }
  void add_dimensionName(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName) {
    fbb_.AddOffset(IonoObservationTraceGeneric_Abridged::VT_DIMENSIONNAME, dimensionName);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(IonoObservationTraceGeneric_Abridged::VT_NOTES, notes);
  }
  explicit IonoObservationTraceGeneric_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged> CreateIonoObservationTraceGeneric_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> dimensionName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0) {
  IonoObservationTraceGeneric_AbridgedBuilder builder_(_fbb);
  builder_.add_notes(notes);
  builder_.add_dimensionName(dimensionName);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged> CreateIonoObservationTraceGeneric_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *data = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *dimensionName = nullptr,
    const char *notes = nullptr) {
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*data) : 0;
  auto dimensionName__ = dimensionName ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*dimensionName) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  return CreateIonoObservationTraceGeneric_Abridged(
      _fbb,
      data__,
      dimensionName__,
      notes__);
}

inline const IonoObservationTraceGeneric_Abridged *GetIonoObservationTraceGeneric_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationTraceGeneric_Abridged>(buf);
}

inline const IonoObservationTraceGeneric_Abridged *GetSizePrefixedIonoObservationTraceGeneric_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationTraceGeneric_Abridged>(buf);
}

inline const char *IonoObservationTraceGeneric_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationTraceGeneric_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationTraceGeneric_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationTraceGeneric_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationTraceGeneric_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationTraceGeneric_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationTraceGeneric_Abridged>(IonoObservationTraceGeneric_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationTraceGeneric_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationTraceGeneric_Abridged>(IonoObservationTraceGeneric_AbridgedIdentifier());
}

inline void FinishIonoObservationTraceGeneric_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged> root) {
  fbb.Finish(root, IonoObservationTraceGeneric_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationTraceGeneric_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationTraceGeneric_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationTraceGeneric_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
