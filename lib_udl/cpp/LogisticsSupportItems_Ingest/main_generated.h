// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsSupportItems_Ingest;
struct LogisticsSupportItems_IngestBuilder;

/// /// Support items associated with this LogisticsSupport record.
struct LogisticsSupportItems_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsSupportItems_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECOVERYREQUESTTYPECODE = 4,
    VT_REQUESTNUMBER = 6,
    VT_QUANTITY = 8,
    VT_DESCRIPTION = 10,
    VT_SHIPMENTUNITID = 12,
    VT_REDEPLOYSHIPMENTUNITID = 14,
    VT_JOBCONTROLNUMBER = 16,
    VT_SOURCEICAO = 18,
    VT_DEPLOYPLANNUMBER = 20,
    VT_REDEPLOYPLANNUMBER = 22,
    VT_CANNIBALIZED = 24,
    VT_SIPOC = 26,
    VT_READYTIME = 28,
    VT_RECEIVEDTIME = 30,
    VT_RESUPPORTFLAG = 32,
    VT_ITEMLASTCHANGEDDATE = 34,
    VT_LOGISTICSPARTS = 36,
    VT_LOGISTICSSPECIALTIES = 38,
    VT_LOGISTICSREMARKS = 40
  };
  /// The type of recovery request needed. Contact the source provider for details.
  /// Example: /// Example: E
  /// Constraints: Minimum length = 1, Maximum length = 1
  const ::flatbuffers::String *recoveryRequestTypeCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECOVERYREQUESTTYPECODE);
  }
  /// The request or record number for this item type (Equipent, Part, or MRT).
  /// Example: /// Example: 89208
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *requestNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQUESTNUMBER);
  }
  /// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t quantity() const {
    return GetField<int32_t>(VT_QUANTITY, 0);
  }
  /// The technical order name of the part ordered.
  /// Example: /// Example: HOIST ADAPTER KIT
  /// Constraints: Minimum length = 0, Maximum length = 150
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
  /// Example: /// Example: FB44273196X501XXX
  /// Constraints: Minimum length = 0, Maximum length = 17
  const ::flatbuffers::String *shipmentUnitId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHIPMENTUNITID);
  }
  /// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
  /// Example: /// Example: X400LA31949108
  /// Constraints: Minimum length = 0, Maximum length = 17
  const ::flatbuffers::String *redeployShipmentUnitId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REDEPLOYSHIPMENTUNITID);
  }
  /// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
  /// Example: /// Example: 231942400
  /// Constraints: Minimum length = 0, Maximum length = 12
  const ::flatbuffers::String *jobControlNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOBCONTROLNUMBER);
  }
  /// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *sourceICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEICAO);
  }
  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89003
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *deployPlanNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPLOYPLANNUMBER);
  }
  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89003
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *redeployPlanNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REDEPLOYPLANNUMBER);
  }
  /// This element indicates whether or not the supplied item is contained within another item.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool cannibalized() const {
    return GetField<uint8_t>(VT_CANNIBALIZED, 0) != 0;
  }
  /// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
  /// Example: /// Example: SMITH, JOHN J
  /// Constraints: Minimum length = 0, Maximum length = 68
  const ::flatbuffers::String *siPOC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SIPOC);
  }
  /// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *readyTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_READYTIME);
  }
  /// The time the item is received, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *receivedTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVEDTIME);
  }
  /// This element indicates if the supplied item is characterized as additional support.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool resupportFlag() const {
    return GetField<uint8_t>(VT_RESUPPORTFLAG, 0) != 0;
  }
  /// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *itemLastChangedDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ITEMLASTCHANGEDDATE);
  }
  /// The parts associated with this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsParts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSPARTS);
  }
  /// The specialties required to implement this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSpecialties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSSPECIALTIES);
  }
  /// Remarks associated with this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsRemarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSREMARKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECOVERYREQUESTTYPECODE) &&
           verifier.VerifyString(recoveryRequestTypeCode()) &&
           VerifyOffset(verifier, VT_REQUESTNUMBER) &&
           verifier.VerifyString(requestNumber()) &&
           VerifyField<int32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_SHIPMENTUNITID) &&
           verifier.VerifyString(shipmentUnitId()) &&
           VerifyOffset(verifier, VT_REDEPLOYSHIPMENTUNITID) &&
           verifier.VerifyString(redeployShipmentUnitId()) &&
           VerifyOffset(verifier, VT_JOBCONTROLNUMBER) &&
           verifier.VerifyString(jobControlNumber()) &&
           VerifyOffset(verifier, VT_SOURCEICAO) &&
           verifier.VerifyString(sourceICAO()) &&
           VerifyOffset(verifier, VT_DEPLOYPLANNUMBER) &&
           verifier.VerifyString(deployPlanNumber()) &&
           VerifyOffset(verifier, VT_REDEPLOYPLANNUMBER) &&
           verifier.VerifyString(redeployPlanNumber()) &&
           VerifyField<uint8_t>(verifier, VT_CANNIBALIZED, 1) &&
           VerifyOffset(verifier, VT_SIPOC) &&
           verifier.VerifyString(siPOC()) &&
           VerifyOffset(verifier, VT_READYTIME) &&
           verifier.VerifyString(readyTime()) &&
           VerifyOffset(verifier, VT_RECEIVEDTIME) &&
           verifier.VerifyString(receivedTime()) &&
           VerifyField<uint8_t>(verifier, VT_RESUPPORTFLAG, 1) &&
           VerifyOffset(verifier, VT_ITEMLASTCHANGEDDATE) &&
           verifier.VerifyString(itemLastChangedDate()) &&
           VerifyOffset(verifier, VT_LOGISTICSPARTS) &&
           verifier.VerifyVector(logisticsParts()) &&
           verifier.VerifyVectorOfStrings(logisticsParts()) &&
           VerifyOffset(verifier, VT_LOGISTICSSPECIALTIES) &&
           verifier.VerifyVector(logisticsSpecialties()) &&
           verifier.VerifyVectorOfStrings(logisticsSpecialties()) &&
           VerifyOffset(verifier, VT_LOGISTICSREMARKS) &&
           verifier.VerifyVector(logisticsRemarks()) &&
           verifier.VerifyVectorOfStrings(logisticsRemarks()) &&
           verifier.EndTable();
  }
};

struct LogisticsSupportItems_IngestBuilder {
  typedef LogisticsSupportItems_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_recoveryRequestTypeCode(::flatbuffers::Offset<::flatbuffers::String> recoveryRequestTypeCode) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_RECOVERYREQUESTTYPECODE, recoveryRequestTypeCode);
  }
  void add_requestNumber(::flatbuffers::Offset<::flatbuffers::String> requestNumber) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_REQUESTNUMBER, requestNumber);
  }
  void add_quantity(int32_t quantity) {
    fbb_.AddElement<int32_t>(LogisticsSupportItems_Ingest::VT_QUANTITY, quantity, 0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_DESCRIPTION, description);
  }
  void add_shipmentUnitId(::flatbuffers::Offset<::flatbuffers::String> shipmentUnitId) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_SHIPMENTUNITID, shipmentUnitId);
  }
  void add_redeployShipmentUnitId(::flatbuffers::Offset<::flatbuffers::String> redeployShipmentUnitId) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_REDEPLOYSHIPMENTUNITID, redeployShipmentUnitId);
  }
  void add_jobControlNumber(::flatbuffers::Offset<::flatbuffers::String> jobControlNumber) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_JOBCONTROLNUMBER, jobControlNumber);
  }
  void add_sourceICAO(::flatbuffers::Offset<::flatbuffers::String> sourceICAO) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_SOURCEICAO, sourceICAO);
  }
  void add_deployPlanNumber(::flatbuffers::Offset<::flatbuffers::String> deployPlanNumber) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_DEPLOYPLANNUMBER, deployPlanNumber);
  }
  void add_redeployPlanNumber(::flatbuffers::Offset<::flatbuffers::String> redeployPlanNumber) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_REDEPLOYPLANNUMBER, redeployPlanNumber);
  }
  void add_cannibalized(bool cannibalized) {
    fbb_.AddElement<uint8_t>(LogisticsSupportItems_Ingest::VT_CANNIBALIZED, static_cast<uint8_t>(cannibalized), 0);
  }
  void add_siPOC(::flatbuffers::Offset<::flatbuffers::String> siPOC) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_SIPOC, siPOC);
  }
  void add_readyTime(::flatbuffers::Offset<::flatbuffers::String> readyTime) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_READYTIME, readyTime);
  }
  void add_receivedTime(::flatbuffers::Offset<::flatbuffers::String> receivedTime) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_RECEIVEDTIME, receivedTime);
  }
  void add_resupportFlag(bool resupportFlag) {
    fbb_.AddElement<uint8_t>(LogisticsSupportItems_Ingest::VT_RESUPPORTFLAG, static_cast<uint8_t>(resupportFlag), 0);
  }
  void add_itemLastChangedDate(::flatbuffers::Offset<::flatbuffers::String> itemLastChangedDate) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_ITEMLASTCHANGEDDATE, itemLastChangedDate);
  }
  void add_logisticsParts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsParts) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_LOGISTICSPARTS, logisticsParts);
  }
  void add_logisticsSpecialties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSpecialties) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_LOGISTICSSPECIALTIES, logisticsSpecialties);
  }
  void add_logisticsRemarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsRemarks) {
    fbb_.AddOffset(LogisticsSupportItems_Ingest::VT_LOGISTICSREMARKS, logisticsRemarks);
  }
  explicit LogisticsSupportItems_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsSupportItems_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsSupportItems_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsSupportItems_Ingest> CreateLogisticsSupportItems_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> recoveryRequestTypeCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> requestNumber = 0,
    int32_t quantity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shipmentUnitId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> redeployShipmentUnitId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jobControlNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> deployPlanNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> redeployPlanNumber = 0,
    bool cannibalized = false,
    ::flatbuffers::Offset<::flatbuffers::String> siPOC = 0,
    ::flatbuffers::Offset<::flatbuffers::String> readyTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receivedTime = 0,
    bool resupportFlag = false,
    ::flatbuffers::Offset<::flatbuffers::String> itemLastChangedDate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsParts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSpecialties = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsRemarks = 0) {
  LogisticsSupportItems_IngestBuilder builder_(_fbb);
  builder_.add_logisticsRemarks(logisticsRemarks);
  builder_.add_logisticsSpecialties(logisticsSpecialties);
  builder_.add_logisticsParts(logisticsParts);
  builder_.add_itemLastChangedDate(itemLastChangedDate);
  builder_.add_receivedTime(receivedTime);
  builder_.add_readyTime(readyTime);
  builder_.add_siPOC(siPOC);
  builder_.add_redeployPlanNumber(redeployPlanNumber);
  builder_.add_deployPlanNumber(deployPlanNumber);
  builder_.add_sourceICAO(sourceICAO);
  builder_.add_jobControlNumber(jobControlNumber);
  builder_.add_redeployShipmentUnitId(redeployShipmentUnitId);
  builder_.add_shipmentUnitId(shipmentUnitId);
  builder_.add_description(description);
  builder_.add_quantity(quantity);
  builder_.add_requestNumber(requestNumber);
  builder_.add_recoveryRequestTypeCode(recoveryRequestTypeCode);
  builder_.add_resupportFlag(resupportFlag);
  builder_.add_cannibalized(cannibalized);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsSupportItems_Ingest> CreateLogisticsSupportItems_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *recoveryRequestTypeCode = nullptr,
    const char *requestNumber = nullptr,
    int32_t quantity = 0,
    const char *description = nullptr,
    const char *shipmentUnitId = nullptr,
    const char *redeployShipmentUnitId = nullptr,
    const char *jobControlNumber = nullptr,
    const char *sourceICAO = nullptr,
    const char *deployPlanNumber = nullptr,
    const char *redeployPlanNumber = nullptr,
    bool cannibalized = false,
    const char *siPOC = nullptr,
    const char *readyTime = nullptr,
    const char *receivedTime = nullptr,
    bool resupportFlag = false,
    const char *itemLastChangedDate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsParts = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSpecialties = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsRemarks = nullptr) {
  auto recoveryRequestTypeCode__ = recoveryRequestTypeCode ? _fbb.CreateString(recoveryRequestTypeCode) : 0;
  auto requestNumber__ = requestNumber ? _fbb.CreateString(requestNumber) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto shipmentUnitId__ = shipmentUnitId ? _fbb.CreateString(shipmentUnitId) : 0;
  auto redeployShipmentUnitId__ = redeployShipmentUnitId ? _fbb.CreateString(redeployShipmentUnitId) : 0;
  auto jobControlNumber__ = jobControlNumber ? _fbb.CreateString(jobControlNumber) : 0;
  auto sourceICAO__ = sourceICAO ? _fbb.CreateString(sourceICAO) : 0;
  auto deployPlanNumber__ = deployPlanNumber ? _fbb.CreateString(deployPlanNumber) : 0;
  auto redeployPlanNumber__ = redeployPlanNumber ? _fbb.CreateString(redeployPlanNumber) : 0;
  auto siPOC__ = siPOC ? _fbb.CreateString(siPOC) : 0;
  auto readyTime__ = readyTime ? _fbb.CreateString(readyTime) : 0;
  auto receivedTime__ = receivedTime ? _fbb.CreateString(receivedTime) : 0;
  auto itemLastChangedDate__ = itemLastChangedDate ? _fbb.CreateString(itemLastChangedDate) : 0;
  auto logisticsParts__ = logisticsParts ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsParts) : 0;
  auto logisticsSpecialties__ = logisticsSpecialties ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsSpecialties) : 0;
  auto logisticsRemarks__ = logisticsRemarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsRemarks) : 0;
  return CreateLogisticsSupportItems_Ingest(
      _fbb,
      recoveryRequestTypeCode__,
      requestNumber__,
      quantity,
      description__,
      shipmentUnitId__,
      redeployShipmentUnitId__,
      jobControlNumber__,
      sourceICAO__,
      deployPlanNumber__,
      redeployPlanNumber__,
      cannibalized,
      siPOC__,
      readyTime__,
      receivedTime__,
      resupportFlag,
      itemLastChangedDate__,
      logisticsParts__,
      logisticsSpecialties__,
      logisticsRemarks__);
}

inline const LogisticsSupportItems_Ingest *GetLogisticsSupportItems_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsSupportItems_Ingest>(buf);
}

inline const LogisticsSupportItems_Ingest *GetSizePrefixedLogisticsSupportItems_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsSupportItems_Ingest>(buf);
}

inline const char *LogisticsSupportItems_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsSupportItems_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSupportItems_IngestIdentifier());
}

inline bool SizePrefixedLogisticsSupportItems_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSupportItems_IngestIdentifier(), true);
}

inline bool VerifyLogisticsSupportItems_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsSupportItems_Ingest>(LogisticsSupportItems_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsSupportItems_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsSupportItems_Ingest>(LogisticsSupportItems_IngestIdentifier());
}

inline void FinishLogisticsSupportItems_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSupportItems_Ingest> root) {
  fbb.Finish(root, LogisticsSupportItems_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsSupportItems_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSupportItems_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsSupportItems_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
