// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EquipmentRemark_Abridged;
struct EquipmentRemark_AbridgedBuilder;

enum EquipmentRemark_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EquipmentRemark_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EquipmentRemark_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EquipmentRemark_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EquipmentRemark_Abridged_dataMode_Enum_EXERCISE = 3,
  EquipmentRemark_Abridged_dataMode_Enum_MIN = EquipmentRemark_Abridged_dataMode_Enum_REAL,
  EquipmentRemark_Abridged_dataMode_Enum_MAX = EquipmentRemark_Abridged_dataMode_Enum_EXERCISE
};

inline const EquipmentRemark_Abridged_dataMode_Enum (&EnumValuesEquipmentRemark_Abridged_dataMode_Enum())[4] {
  static const EquipmentRemark_Abridged_dataMode_Enum values[] = {
    EquipmentRemark_Abridged_dataMode_Enum_REAL,
    EquipmentRemark_Abridged_dataMode_Enum_TEST,
    EquipmentRemark_Abridged_dataMode_Enum_SIMULATED,
    EquipmentRemark_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEquipmentRemark_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEquipmentRemark_Abridged_dataMode_Enum(EquipmentRemark_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EquipmentRemark_Abridged_dataMode_Enum_REAL, EquipmentRemark_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEquipmentRemark_Abridged_dataMode_Enum()[index];
}

/// /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
struct EquipmentRemark_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EquipmentRemark_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDEQUIPMENT = 8,
    VT_ALTRMKID = 10,
    VT_NAME = 12,
    VT_TYPE = 14,
    VT_TEXT = 16,
    VT_CODE = 18,
    VT_CREATEDAT = 20,
    VT_CREATEDBY = 22,
    VT_SOURCE = 24,
    VT_ORIGIN = 26,
    VT_DATAMODE = 28
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The ID of the Equipment to which this remark applies.
  /// Example: /// Example: EQUIPMENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idEquipment() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDEQUIPMENT);
  }
  /// Unique identifier of the Equipment Remark record from the originating system.
  /// Example: /// Example: 123456ABC
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altRmkId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTRMKID);
  }
  /// The name of the remark.
  /// Example: /// Example: Remark name
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
  /// Example: /// Example: Restriction
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The text of the remark.
  /// Example: /// Example: This is a remark
  /// Constraints: Minimum length = 1, Maximum length = 16384
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  /// The remark type identifier. For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CODE);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EquipmentRemark_Abridged_dataMode_Enum dataMode() const {
    return static_cast<EquipmentRemark_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDEQUIPMENT) &&
           verifier.VerifyString(idEquipment()) &&
           VerifyOffset(verifier, VT_ALTRMKID) &&
           verifier.VerifyString(altRmkId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           VerifyOffset(verifier, VT_CODE) &&
           verifier.VerifyString(code()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct EquipmentRemark_AbridgedBuilder {
  typedef EquipmentRemark_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idEquipment(::flatbuffers::Offset<::flatbuffers::String> idEquipment) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_IDEQUIPMENT, idEquipment);
  }
  void add_altRmkId(::flatbuffers::Offset<::flatbuffers::String> altRmkId) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_ALTRMKID, altRmkId);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_NAME, name);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_TYPE, type);
  }
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_TEXT, text);
  }
  void add_code(::flatbuffers::Offset<::flatbuffers::String> code) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_CODE, code);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(EquipmentRemark_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(EquipmentRemark_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EquipmentRemark_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit EquipmentRemark_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EquipmentRemark_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EquipmentRemark_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EquipmentRemark_Abridged> CreateEquipmentRemark_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEquipment = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altRmkId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0,
    ::flatbuffers::Offset<::flatbuffers::String> code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    EquipmentRemark_Abridged_dataMode_Enum dataMode = EquipmentRemark_Abridged_dataMode_Enum_REAL) {
  EquipmentRemark_AbridgedBuilder builder_(_fbb);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_code(code);
  builder_.add_text(text);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_altRmkId(altRmkId);
  builder_.add_idEquipment(idEquipment);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EquipmentRemark_Abridged> CreateEquipmentRemark_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idEquipment = nullptr,
    const char *altRmkId = nullptr,
    const char *name = nullptr,
    const char *type = nullptr,
    const char *text = nullptr,
    const char *code = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    EquipmentRemark_Abridged_dataMode_Enum dataMode = EquipmentRemark_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idEquipment__ = idEquipment ? _fbb.CreateString(idEquipment) : 0;
  auto altRmkId__ = altRmkId ? _fbb.CreateString(altRmkId) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto text__ = text ? _fbb.CreateString(text) : 0;
  auto code__ = code ? _fbb.CreateString(code) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateEquipmentRemark_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idEquipment__,
      altRmkId__,
      name__,
      type__,
      text__,
      code__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode);
}

inline const EquipmentRemark_Abridged *GetEquipmentRemark_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<EquipmentRemark_Abridged>(buf);
}

inline const EquipmentRemark_Abridged *GetSizePrefixedEquipmentRemark_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EquipmentRemark_Abridged>(buf);
}

inline const char *EquipmentRemark_AbridgedIdentifier() {
  return "EQUI";
}

inline bool EquipmentRemark_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EquipmentRemark_AbridgedIdentifier());
}

inline bool SizePrefixedEquipmentRemark_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EquipmentRemark_AbridgedIdentifier(), true);
}

inline bool VerifyEquipmentRemark_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EquipmentRemark_Abridged>(EquipmentRemark_AbridgedIdentifier());
}

inline bool VerifySizePrefixedEquipmentRemark_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EquipmentRemark_Abridged>(EquipmentRemark_AbridgedIdentifier());
}

inline void FinishEquipmentRemark_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EquipmentRemark_Abridged> root) {
  fbb.Finish(root, EquipmentRemark_AbridgedIdentifier());
}

inline void FinishSizePrefixedEquipmentRemark_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EquipmentRemark_Abridged> root) {
  fbb.FinishSizePrefixed(root, EquipmentRemark_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
