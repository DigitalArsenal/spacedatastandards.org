// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfile_Abridged;
struct IonoObservationDensityProfile_AbridgedBuilder;

/// /// Profile of electron densities in the ionosphere associated with an IonoObservation.
struct IonoObservationDensityProfile_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfile_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARABOLIC = 4,
    VT_QUASIPARABOLIC = 6,
    VT_VALLEYMODELDESCRIPTION = 8,
    VT_VALLEYMODELCOEFFS = 10,
    VT_SHIFTEDCHEBYSHEV = 12,
    VT_TOPSIDEEXTENSIONCHAPMANCONST = 14,
    VT_TOPSIDEEXTENSIONVARYCHAP = 16,
    VT_IRI = 18
  };
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *parabolic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARABOLIC);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *quasiParabolic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUASIPARABOLIC);
  }
  /// Description of the valley model and parameters.
  /// Example: /// Example: 2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *valleyModelDescription() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALLEYMODELDESCRIPTION);
  }
  /// Array of valley model coefficients.
  /// Example: /// Example: [39.597, 0.1777]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *valleyModelCoeffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VALLEYMODELCOEFFS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *shiftedChebyshev() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHIFTEDCHEBYSHEV);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *topsideExtensionChapmanConst() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOPSIDEEXTENSIONCHAPMANCONST);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *topsideExtensionVaryChap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOPSIDEEXTENSIONVARYCHAP);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *iri() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IRI);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARABOLIC) &&
           verifier.VerifyString(parabolic()) &&
           VerifyOffset(verifier, VT_QUASIPARABOLIC) &&
           verifier.VerifyString(quasiParabolic()) &&
           VerifyOffset(verifier, VT_VALLEYMODELDESCRIPTION) &&
           verifier.VerifyString(valleyModelDescription()) &&
           VerifyOffset(verifier, VT_VALLEYMODELCOEFFS) &&
           verifier.VerifyVector(valleyModelCoeffs()) &&
           verifier.VerifyVectorOfStrings(valleyModelCoeffs()) &&
           VerifyOffset(verifier, VT_SHIFTEDCHEBYSHEV) &&
           verifier.VerifyString(shiftedChebyshev()) &&
           VerifyOffset(verifier, VT_TOPSIDEEXTENSIONCHAPMANCONST) &&
           verifier.VerifyString(topsideExtensionChapmanConst()) &&
           VerifyOffset(verifier, VT_TOPSIDEEXTENSIONVARYCHAP) &&
           verifier.VerifyString(topsideExtensionVaryChap()) &&
           VerifyOffset(verifier, VT_IRI) &&
           verifier.VerifyString(iri()) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfile_AbridgedBuilder {
  typedef IonoObservationDensityProfile_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_parabolic(::flatbuffers::Offset<::flatbuffers::String> parabolic) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_PARABOLIC, parabolic);
  }
  void add_quasiParabolic(::flatbuffers::Offset<::flatbuffers::String> quasiParabolic) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_QUASIPARABOLIC, quasiParabolic);
  }
  void add_valleyModelDescription(::flatbuffers::Offset<::flatbuffers::String> valleyModelDescription) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_VALLEYMODELDESCRIPTION, valleyModelDescription);
  }
  void add_valleyModelCoeffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> valleyModelCoeffs) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_VALLEYMODELCOEFFS, valleyModelCoeffs);
  }
  void add_shiftedChebyshev(::flatbuffers::Offset<::flatbuffers::String> shiftedChebyshev) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_SHIFTEDCHEBYSHEV, shiftedChebyshev);
  }
  void add_topsideExtensionChapmanConst(::flatbuffers::Offset<::flatbuffers::String> topsideExtensionChapmanConst) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_TOPSIDEEXTENSIONCHAPMANCONST, topsideExtensionChapmanConst);
  }
  void add_topsideExtensionVaryChap(::flatbuffers::Offset<::flatbuffers::String> topsideExtensionVaryChap) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_TOPSIDEEXTENSIONVARYCHAP, topsideExtensionVaryChap);
  }
  void add_iri(::flatbuffers::Offset<::flatbuffers::String> iri) {
    fbb_.AddOffset(IonoObservationDensityProfile_Abridged::VT_IRI, iri);
  }
  explicit IonoObservationDensityProfile_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged> CreateIonoObservationDensityProfile_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> parabolic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> quasiParabolic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> valleyModelDescription = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> valleyModelCoeffs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shiftedChebyshev = 0,
    ::flatbuffers::Offset<::flatbuffers::String> topsideExtensionChapmanConst = 0,
    ::flatbuffers::Offset<::flatbuffers::String> topsideExtensionVaryChap = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iri = 0) {
  IonoObservationDensityProfile_AbridgedBuilder builder_(_fbb);
  builder_.add_iri(iri);
  builder_.add_topsideExtensionVaryChap(topsideExtensionVaryChap);
  builder_.add_topsideExtensionChapmanConst(topsideExtensionChapmanConst);
  builder_.add_shiftedChebyshev(shiftedChebyshev);
  builder_.add_valleyModelCoeffs(valleyModelCoeffs);
  builder_.add_valleyModelDescription(valleyModelDescription);
  builder_.add_quasiParabolic(quasiParabolic);
  builder_.add_parabolic(parabolic);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged> CreateIonoObservationDensityProfile_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *parabolic = nullptr,
    const char *quasiParabolic = nullptr,
    const char *valleyModelDescription = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *valleyModelCoeffs = nullptr,
    const char *shiftedChebyshev = nullptr,
    const char *topsideExtensionChapmanConst = nullptr,
    const char *topsideExtensionVaryChap = nullptr,
    const char *iri = nullptr) {
  auto parabolic__ = parabolic ? _fbb.CreateString(parabolic) : 0;
  auto quasiParabolic__ = quasiParabolic ? _fbb.CreateString(quasiParabolic) : 0;
  auto valleyModelDescription__ = valleyModelDescription ? _fbb.CreateString(valleyModelDescription) : 0;
  auto valleyModelCoeffs__ = valleyModelCoeffs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*valleyModelCoeffs) : 0;
  auto shiftedChebyshev__ = shiftedChebyshev ? _fbb.CreateString(shiftedChebyshev) : 0;
  auto topsideExtensionChapmanConst__ = topsideExtensionChapmanConst ? _fbb.CreateString(topsideExtensionChapmanConst) : 0;
  auto topsideExtensionVaryChap__ = topsideExtensionVaryChap ? _fbb.CreateString(topsideExtensionVaryChap) : 0;
  auto iri__ = iri ? _fbb.CreateString(iri) : 0;
  return CreateIonoObservationDensityProfile_Abridged(
      _fbb,
      parabolic__,
      quasiParabolic__,
      valleyModelDescription__,
      valleyModelCoeffs__,
      shiftedChebyshev__,
      topsideExtensionChapmanConst__,
      topsideExtensionVaryChap__,
      iri__);
}

inline const IonoObservationDensityProfile_Abridged *GetIonoObservationDensityProfile_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfile_Abridged>(buf);
}

inline const IonoObservationDensityProfile_Abridged *GetSizePrefixedIonoObservationDensityProfile_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfile_Abridged>(buf);
}

inline const char *IonoObservationDensityProfile_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfile_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfile_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfile_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfile_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfile_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfile_Abridged>(IonoObservationDensityProfile_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfile_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfile_Abridged>(IonoObservationDensityProfile_AbridgedIdentifier());
}

inline void FinishIonoObservationDensityProfile_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged> root) {
  fbb.Finish(root, IonoObservationDensityProfile_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfile_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfile_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfile_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
