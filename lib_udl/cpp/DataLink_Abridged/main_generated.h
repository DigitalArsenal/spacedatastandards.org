// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLink_Abridged;
struct DataLink_AbridgedBuilder;

enum DataLink_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  DataLink_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  DataLink_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  DataLink_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  DataLink_Abridged_dataMode_Enum_EXERCISE = 3,
  DataLink_Abridged_dataMode_Enum_MIN = DataLink_Abridged_dataMode_Enum_REAL,
  DataLink_Abridged_dataMode_Enum_MAX = DataLink_Abridged_dataMode_Enum_EXERCISE
};

inline const DataLink_Abridged_dataMode_Enum (&EnumValuesDataLink_Abridged_dataMode_Enum())[4] {
  static const DataLink_Abridged_dataMode_Enum values[] = {
    DataLink_Abridged_dataMode_Enum_REAL,
    DataLink_Abridged_dataMode_Enum_TEST,
    DataLink_Abridged_dataMode_Enum_SIMULATED,
    DataLink_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesDataLink_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataLink_Abridged_dataMode_Enum(DataLink_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, DataLink_Abridged_dataMode_Enum_REAL, DataLink_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDataLink_Abridged_dataMode_Enum()[index];
}

/// /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
struct DataLink_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLink_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_OPEXNAME = 8,
    VT_ORIGINATOR = 10,
    VT_STARTTIME = 12,
    VT_STOPTIME = 14,
    VT_STOPTIMEMOD = 16,
    VT_PLANORIGNUM = 18,
    VT_OPEXINFO = 20,
    VT_OPEXINFOALT = 22,
    VT_SERIALNUM = 24,
    VT_MONTH = 26,
    VT_QUALIFIER = 28,
    VT_QUALSN = 30,
    VT_REFERENCES = 32,
    VT_CANXID = 34,
    VT_CANXORIGINATOR = 36,
    VT_CANXTS = 38,
    VT_CANXSERIALNUM = 40,
    VT_CANXSPECIALNOTATION = 42,
    VT_CANXSICS = 44,
    VT_POCNAME = 46,
    VT_POCRANK = 48,
    VT_POCCALLSIGN = 50,
    VT_POCLOCNAME = 52,
    VT_POCLAT = 54,
    VT_POCLON = 56,
    VT_POCNUMS = 58,
    VT_GEODATUM = 60,
    VT_REFPOINTS = 62,
    VT_VOICECOORD = 64,
    VT_SYSDEFAULTCODE = 66,
    VT_WINSIZEMULT = 68,
    VT_WINSIZEMIN = 70,
    VT_MINTRACKQUAL = 72,
    VT_MAXTRACKQUAL = 74,
    VT_RESTRACKQUAL = 76,
    VT_COURSEDIFF = 78,
    VT_SPEEDDIFF = 80,
    VT_ALTDIFF = 82,
    VT_MINGEOPOSQUAL = 84,
    VT_MAXGEOPOSQUAL = 86,
    VT_DECORRWINMULT = 88,
    VT_CONSECDECORR = 90,
    VT_MULTIDUTY = 92,
    VT_OPS = 94,
    VT_JREUNITDES = 96,
    VT_JRECALLSIGN = 98,
    VT_JREPRIADD = 100,
    VT_JRESECADD = 102,
    VT_JREDETAILS = 104,
    VT_SPECTRACKS = 106,
    VT_NONLINKUNITDES = 108,
    VT_TRACKNUMBLOCKLLS = 110,
    VT_TRACKNUMBLOCKS = 112,
    VT_MGMTCODE = 114,
    VT_MGMTCODEMEANING = 116,
    VT_ACKREQ = 118,
    VT_ACKINSTUNITS = 120,
    VT_CLASSSOURCE = 122,
    VT_CLASSREASONS = 124,
    VT_DECINSTDATES = 126,
    VT_DECEXEMPTCODES = 128,
    VT_REMARKS = 130,
    VT_RAWFILEURI = 132,
    VT_CREATEDAT = 134,
    VT_CREATEDBY = 136,
    VT_UPDATEDAT = 138,
    VT_UPDATEDBY = 140,
    VT_SOURCEDL = 142,
    VT_SOURCE = 144,
    VT_ORIGIN = 146,
    VT_ORIGNETWORK = 148,
    VT_DATAMODE = 150
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *opExName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPEXNAME);
  }
  /// The identifier of the originator of this message.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *originator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINATOR);
  }
  /// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stopTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOPTIME);
  }
  /// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
  /// Example: /// Example: AFTER
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *stopTimeMod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOPTIMEMOD);
  }
  /// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
  /// Example: /// Example: SACEUR 106
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *planOrigNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANORIGNUM);
  }
  /// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
  /// Example: /// Example: CONTROL
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *opExInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPEXINFO);
  }
  /// The secondary nickname of the option or the alternative of the operational plan or order.
  /// Example: /// Example: ORANGE
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *opExInfoAlt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPEXINFOALT);
  }
  /// The unique message identifier assigned by the originator.
  /// Example: /// Example: 1201003
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *serialNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERIALNUM);
  }
  /// The month in which this message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 12
  const ::flatbuffers::String *month() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MONTH);
  }
  /// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *qualifier() const {
    return GetPointer<const ::flatbuffers::String *>(VT_QUALIFIER);
  }
  /// The serial number associated with the message qualifier.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t qualSN() const {
    return GetField<int32_t>(VT_QUALSN, 0);
  }
  /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *references() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REFERENCES);
  }
  /// The identifier for this data link message cancellation.
  /// Example: /// Example: ABSTAT
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *canxId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANXID);
  }
  /// The originator of this data link message cancellation.
  /// Example: /// Example: 505 AOC
  /// Constraints: Minimum length = 0, Maximum length = 30
  const ::flatbuffers::String *canxOriginator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANXORIGINATOR);
  }
  /// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *canxTs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANXTS);
  }
  /// Serial number assigned to this data link message cancellation.
  /// Example: /// Example: ABC1234567
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *canxSerialNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANXSERIALNUM);
  }
  /// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
  /// Example: /// Example: PASEP
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *canxSpecialNotation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANXSPECIALNOTATION);
  }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
  /// Example: /// Example: ['RDU', 'X234BS']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *canxSICs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CANXSICS);
  }
  /// The name of the point of contact for this data link message.
  /// Example: /// Example: F. BURNS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *pocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCNAME);
  }
  /// The rank or position of the point of contact for this data link message in a military or civilian organization.
  /// Example: /// Example: MAJ
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *pocRank() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCRANK);
  }
  /// The unit identifier or call sign of the point of contact for this data link message.
  /// Example: /// Example: 4077 MASH
  /// Constraints: Minimum length = 0, Maximum length = 38
  const ::flatbuffers::String *pocCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCCALLSIGN);
  }
  /// The location name of the point of contact for this data link message.
  /// Example: /// Example: CAMP SWAMPY
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *pocLocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POCLOCNAME);
  }
  /// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double pocLat() const {
    return GetField<double>(VT_POCLAT, 0.0);
  }
  /// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double pocLon() const {
    return GetField<double>(VT_POCLON, 0.0);
  }
  /// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *pocNums() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_POCNUMS);
  }
  /// The code for the point of reference from which the coordinates and networks are computed.
  /// Example: /// Example: EUR-T
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *geoDatum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEODATUM);
  }
  /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *refPoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REFPOINTS);
  }
  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *voiceCoord() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VOICECOORD);
  }
  /// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
  /// Example: /// Example: MAN
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *sysDefaultCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSDEFAULTCODE);
  }
  /// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  double winSizeMult() const {
    return GetField<double>(VT_WINSIZEMULT, 0.0);
  }
  /// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
  /// Example: /// Example: 1.25
  /// Constraints: No constraints specified.
  double winSizeMin() const {
    return GetField<double>(VT_WINSIZEMIN, 0.0);
  }
  /// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
  /// Example: /// Example: 6
  /// Constraints: No constraints specified.
  int32_t minTrackQual() const {
    return GetField<int32_t>(VT_MINTRACKQUAL, 0);
  }
  /// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t maxTrackQual() const {
    return GetField<int32_t>(VT_MAXTRACKQUAL, 0);
  }
  /// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t resTrackQual() const {
    return GetField<int32_t>(VT_RESTRACKQUAL, 0);
  }
  /// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
  /// Example: /// Example: 60
  /// Constraints: No constraints specified.
  int32_t courseDiff() const {
    return GetField<int32_t>(VT_COURSEDIFF, 0);
  }
  /// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  int32_t speedDiff() const {
    return GetField<int32_t>(VT_SPEEDDIFF, 0);
  }
  /// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t altDiff() const {
    return GetField<int32_t>(VT_ALTDIFF, 0);
  }
  /// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t minGeoPosQual() const {
    return GetField<int32_t>(VT_MINGEOPOSQUAL, 0);
  }
  /// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t maxGeoPosQual() const {
    return GetField<int32_t>(VT_MAXGEOPOSQUAL, 0);
  }
  /// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
  /// Example: /// Example: 1.7
  /// Constraints: No constraints specified.
  double decorrWinMult() const {
    return GetField<double>(VT_DECORRWINMULT, 0.0);
  }
  /// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t consecDecorr() const {
    return GetField<int32_t>(VT_CONSECDECORR, 0);
  }
  /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *multiDuty() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MULTIDUTY);
  }
  /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ops() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OPS);
  }
  /// Designator of the unit for Joint Range Extension (JRE).
  /// Example: /// Example: CVN-72
  /// Constraints: Minimum length = 0, Maximum length = 30
  const ::flatbuffers::String *jreUnitDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JREUNITDES);
  }
  /// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
  /// Example: /// Example: CHARLIE ONE
  /// Constraints: Minimum length = 0, Maximum length = 38
  const ::flatbuffers::String *jreCallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JRECALLSIGN);
  }
  /// Link-16 octal track number assigned as the primary JTIDS unit address.
  /// Example: /// Example: 71777
  /// Constraints: No constraints specified.
  int32_t jrePriAdd() const {
    return GetField<int32_t>(VT_JREPRIADD, 0);
  }
  /// Link-16 octal track number assigned as the secondary JTIDS unit address.
  /// Example: /// Example: 77771
  /// Constraints: No constraints specified.
  int32_t jreSecAdd() const {
    return GetField<int32_t>(VT_JRESECADD, 0);
  }
  /// Joint Range Extension (JRE) unit details.
  /// Example: /// Example: JRE details
  /// Constraints: Minimum length = 0, Maximum length = 3000
  const ::flatbuffers::String *jreDetails() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JREDETAILS);
  }
  /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *specTracks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECTRACKS);
  }
  /// Array of non-link specific data unit designators.
  /// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *nonLinkUnitDes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NONLINKUNITDES);
  }
  /// Array of Link-16 octal track numbers used as the lower limit of a track block.
  /// Example: /// Example: [1234, 2345]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *trackNumBlockLLs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRACKNUMBLOCKLLS);
  }
  /// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
  /// Example: /// Example: ['0200-0300', '0400-4412']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *trackNumBlocks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRACKNUMBLOCKS);
  }
  /// Data link management code word.
  /// Example: /// Example: VICTOR
  /// Constraints: Minimum length = 0, Maximum length = 15
  const ::flatbuffers::String *mgmtCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MGMTCODE);
  }
  /// Data link management code word meaning.
  /// Example: /// Example: ORBIT AT POINT BRAVO
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *mgmtCodeMeaning() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MGMTCODEMEANING);
  }
  /// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool ackReq() const {
    return GetField<uint8_t>(VT_ACKREQ, 0) != 0;
  }
  /// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
  /// Example: /// Example: ['AOC EXT 2345', '317 AW']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ackInstUnits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACKINSTUNITS);
  }
  /// Markings that define the source material or the original classification authority for this data link message.
  /// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
  /// Constraints: Minimum length = 0, Maximum length = 55
  const ::flatbuffers::String *classSource() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSSOURCE);
  }
  /// Array of codes that indicate the reasons material is classified.
  /// Example: /// Example: ['15C', '15D']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *classReasons() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CLASSREASONS);
  }
  /// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
  /// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *decInstDates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DECINSTDATES);
  }
  /// Array of codes that provide justification for exemption from automatic downgrading or declassification.
  /// Example: /// Example: ['X1', 'X2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *decExemptCodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DECEXEMPTCODES);
  }
  /// Collection of remarks associated with this data link message.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REMARKS);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  DataLink_Abridged_dataMode_Enum dataMode() const {
    return static_cast<DataLink_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_OPEXNAME) &&
           verifier.VerifyString(opExName()) &&
           VerifyOffset(verifier, VT_ORIGINATOR) &&
           verifier.VerifyString(originator()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_STOPTIME) &&
           verifier.VerifyString(stopTime()) &&
           VerifyOffset(verifier, VT_STOPTIMEMOD) &&
           verifier.VerifyString(stopTimeMod()) &&
           VerifyOffset(verifier, VT_PLANORIGNUM) &&
           verifier.VerifyString(planOrigNum()) &&
           VerifyOffset(verifier, VT_OPEXINFO) &&
           verifier.VerifyString(opExInfo()) &&
           VerifyOffset(verifier, VT_OPEXINFOALT) &&
           verifier.VerifyString(opExInfoAlt()) &&
           VerifyOffset(verifier, VT_SERIALNUM) &&
           verifier.VerifyString(serialNum()) &&
           VerifyOffset(verifier, VT_MONTH) &&
           verifier.VerifyString(month()) &&
           VerifyOffset(verifier, VT_QUALIFIER) &&
           verifier.VerifyString(qualifier()) &&
           VerifyField<int32_t>(verifier, VT_QUALSN, 4) &&
           VerifyOffset(verifier, VT_REFERENCES) &&
           verifier.VerifyVector(references()) &&
           verifier.VerifyVectorOfStrings(references()) &&
           VerifyOffset(verifier, VT_CANXID) &&
           verifier.VerifyString(canxId()) &&
           VerifyOffset(verifier, VT_CANXORIGINATOR) &&
           verifier.VerifyString(canxOriginator()) &&
           VerifyOffset(verifier, VT_CANXTS) &&
           verifier.VerifyString(canxTs()) &&
           VerifyOffset(verifier, VT_CANXSERIALNUM) &&
           verifier.VerifyString(canxSerialNum()) &&
           VerifyOffset(verifier, VT_CANXSPECIALNOTATION) &&
           verifier.VerifyString(canxSpecialNotation()) &&
           VerifyOffset(verifier, VT_CANXSICS) &&
           verifier.VerifyVector(canxSICs()) &&
           verifier.VerifyVectorOfStrings(canxSICs()) &&
           VerifyOffset(verifier, VT_POCNAME) &&
           verifier.VerifyString(pocName()) &&
           VerifyOffset(verifier, VT_POCRANK) &&
           verifier.VerifyString(pocRank()) &&
           VerifyOffset(verifier, VT_POCCALLSIGN) &&
           verifier.VerifyString(pocCallSign()) &&
           VerifyOffset(verifier, VT_POCLOCNAME) &&
           verifier.VerifyString(pocLocName()) &&
           VerifyField<double>(verifier, VT_POCLAT, 8) &&
           VerifyField<double>(verifier, VT_POCLON, 8) &&
           VerifyOffset(verifier, VT_POCNUMS) &&
           verifier.VerifyVector(pocNums()) &&
           verifier.VerifyVectorOfStrings(pocNums()) &&
           VerifyOffset(verifier, VT_GEODATUM) &&
           verifier.VerifyString(geoDatum()) &&
           VerifyOffset(verifier, VT_REFPOINTS) &&
           verifier.VerifyVector(refPoints()) &&
           verifier.VerifyVectorOfStrings(refPoints()) &&
           VerifyOffset(verifier, VT_VOICECOORD) &&
           verifier.VerifyVector(voiceCoord()) &&
           verifier.VerifyVectorOfStrings(voiceCoord()) &&
           VerifyOffset(verifier, VT_SYSDEFAULTCODE) &&
           verifier.VerifyString(sysDefaultCode()) &&
           VerifyField<double>(verifier, VT_WINSIZEMULT, 8) &&
           VerifyField<double>(verifier, VT_WINSIZEMIN, 8) &&
           VerifyField<int32_t>(verifier, VT_MINTRACKQUAL, 4) &&
           VerifyField<int32_t>(verifier, VT_MAXTRACKQUAL, 4) &&
           VerifyField<int32_t>(verifier, VT_RESTRACKQUAL, 4) &&
           VerifyField<int32_t>(verifier, VT_COURSEDIFF, 4) &&
           VerifyField<int32_t>(verifier, VT_SPEEDDIFF, 4) &&
           VerifyField<int32_t>(verifier, VT_ALTDIFF, 4) &&
           VerifyField<int32_t>(verifier, VT_MINGEOPOSQUAL, 4) &&
           VerifyField<int32_t>(verifier, VT_MAXGEOPOSQUAL, 4) &&
           VerifyField<double>(verifier, VT_DECORRWINMULT, 8) &&
           VerifyField<int32_t>(verifier, VT_CONSECDECORR, 4) &&
           VerifyOffset(verifier, VT_MULTIDUTY) &&
           verifier.VerifyVector(multiDuty()) &&
           verifier.VerifyVectorOfStrings(multiDuty()) &&
           VerifyOffset(verifier, VT_OPS) &&
           verifier.VerifyVector(ops()) &&
           verifier.VerifyVectorOfStrings(ops()) &&
           VerifyOffset(verifier, VT_JREUNITDES) &&
           verifier.VerifyString(jreUnitDes()) &&
           VerifyOffset(verifier, VT_JRECALLSIGN) &&
           verifier.VerifyString(jreCallSign()) &&
           VerifyField<int32_t>(verifier, VT_JREPRIADD, 4) &&
           VerifyField<int32_t>(verifier, VT_JRESECADD, 4) &&
           VerifyOffset(verifier, VT_JREDETAILS) &&
           verifier.VerifyString(jreDetails()) &&
           VerifyOffset(verifier, VT_SPECTRACKS) &&
           verifier.VerifyVector(specTracks()) &&
           verifier.VerifyVectorOfStrings(specTracks()) &&
           VerifyOffset(verifier, VT_NONLINKUNITDES) &&
           verifier.VerifyVector(nonLinkUnitDes()) &&
           verifier.VerifyVectorOfStrings(nonLinkUnitDes()) &&
           VerifyOffset(verifier, VT_TRACKNUMBLOCKLLS) &&
           verifier.VerifyVector(trackNumBlockLLs()) &&
           verifier.VerifyVectorOfStrings(trackNumBlockLLs()) &&
           VerifyOffset(verifier, VT_TRACKNUMBLOCKS) &&
           verifier.VerifyVector(trackNumBlocks()) &&
           verifier.VerifyVectorOfStrings(trackNumBlocks()) &&
           VerifyOffset(verifier, VT_MGMTCODE) &&
           verifier.VerifyString(mgmtCode()) &&
           VerifyOffset(verifier, VT_MGMTCODEMEANING) &&
           verifier.VerifyString(mgmtCodeMeaning()) &&
           VerifyField<uint8_t>(verifier, VT_ACKREQ, 1) &&
           VerifyOffset(verifier, VT_ACKINSTUNITS) &&
           verifier.VerifyVector(ackInstUnits()) &&
           verifier.VerifyVectorOfStrings(ackInstUnits()) &&
           VerifyOffset(verifier, VT_CLASSSOURCE) &&
           verifier.VerifyString(classSource()) &&
           VerifyOffset(verifier, VT_CLASSREASONS) &&
           verifier.VerifyVector(classReasons()) &&
           verifier.VerifyVectorOfStrings(classReasons()) &&
           VerifyOffset(verifier, VT_DECINSTDATES) &&
           verifier.VerifyVector(decInstDates()) &&
           verifier.VerifyVectorOfStrings(decInstDates()) &&
           VerifyOffset(verifier, VT_DECEXEMPTCODES) &&
           verifier.VerifyVector(decExemptCodes()) &&
           verifier.VerifyVectorOfStrings(decExemptCodes()) &&
           VerifyOffset(verifier, VT_REMARKS) &&
           verifier.VerifyVector(remarks()) &&
           verifier.VerifyVectorOfStrings(remarks()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct DataLink_AbridgedBuilder {
  typedef DataLink_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DataLink_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(DataLink_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_opExName(::flatbuffers::Offset<::flatbuffers::String> opExName) {
    fbb_.AddOffset(DataLink_Abridged::VT_OPEXNAME, opExName);
  }
  void add_originator(::flatbuffers::Offset<::flatbuffers::String> originator) {
    fbb_.AddOffset(DataLink_Abridged::VT_ORIGINATOR, originator);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(DataLink_Abridged::VT_STARTTIME, startTime);
  }
  void add_stopTime(::flatbuffers::Offset<::flatbuffers::String> stopTime) {
    fbb_.AddOffset(DataLink_Abridged::VT_STOPTIME, stopTime);
  }
  void add_stopTimeMod(::flatbuffers::Offset<::flatbuffers::String> stopTimeMod) {
    fbb_.AddOffset(DataLink_Abridged::VT_STOPTIMEMOD, stopTimeMod);
  }
  void add_planOrigNum(::flatbuffers::Offset<::flatbuffers::String> planOrigNum) {
    fbb_.AddOffset(DataLink_Abridged::VT_PLANORIGNUM, planOrigNum);
  }
  void add_opExInfo(::flatbuffers::Offset<::flatbuffers::String> opExInfo) {
    fbb_.AddOffset(DataLink_Abridged::VT_OPEXINFO, opExInfo);
  }
  void add_opExInfoAlt(::flatbuffers::Offset<::flatbuffers::String> opExInfoAlt) {
    fbb_.AddOffset(DataLink_Abridged::VT_OPEXINFOALT, opExInfoAlt);
  }
  void add_serialNum(::flatbuffers::Offset<::flatbuffers::String> serialNum) {
    fbb_.AddOffset(DataLink_Abridged::VT_SERIALNUM, serialNum);
  }
  void add_month(::flatbuffers::Offset<::flatbuffers::String> month) {
    fbb_.AddOffset(DataLink_Abridged::VT_MONTH, month);
  }
  void add_qualifier(::flatbuffers::Offset<::flatbuffers::String> qualifier) {
    fbb_.AddOffset(DataLink_Abridged::VT_QUALIFIER, qualifier);
  }
  void add_qualSN(int32_t qualSN) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_QUALSN, qualSN, 0);
  }
  void add_references(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> references) {
    fbb_.AddOffset(DataLink_Abridged::VT_REFERENCES, references);
  }
  void add_canxId(::flatbuffers::Offset<::flatbuffers::String> canxId) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXID, canxId);
  }
  void add_canxOriginator(::flatbuffers::Offset<::flatbuffers::String> canxOriginator) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXORIGINATOR, canxOriginator);
  }
  void add_canxTs(::flatbuffers::Offset<::flatbuffers::String> canxTs) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXTS, canxTs);
  }
  void add_canxSerialNum(::flatbuffers::Offset<::flatbuffers::String> canxSerialNum) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXSERIALNUM, canxSerialNum);
  }
  void add_canxSpecialNotation(::flatbuffers::Offset<::flatbuffers::String> canxSpecialNotation) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXSPECIALNOTATION, canxSpecialNotation);
  }
  void add_canxSICs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> canxSICs) {
    fbb_.AddOffset(DataLink_Abridged::VT_CANXSICS, canxSICs);
  }
  void add_pocName(::flatbuffers::Offset<::flatbuffers::String> pocName) {
    fbb_.AddOffset(DataLink_Abridged::VT_POCNAME, pocName);
  }
  void add_pocRank(::flatbuffers::Offset<::flatbuffers::String> pocRank) {
    fbb_.AddOffset(DataLink_Abridged::VT_POCRANK, pocRank);
  }
  void add_pocCallSign(::flatbuffers::Offset<::flatbuffers::String> pocCallSign) {
    fbb_.AddOffset(DataLink_Abridged::VT_POCCALLSIGN, pocCallSign);
  }
  void add_pocLocName(::flatbuffers::Offset<::flatbuffers::String> pocLocName) {
    fbb_.AddOffset(DataLink_Abridged::VT_POCLOCNAME, pocLocName);
  }
  void add_pocLat(double pocLat) {
    fbb_.AddElement<double>(DataLink_Abridged::VT_POCLAT, pocLat, 0.0);
  }
  void add_pocLon(double pocLon) {
    fbb_.AddElement<double>(DataLink_Abridged::VT_POCLON, pocLon, 0.0);
  }
  void add_pocNums(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> pocNums) {
    fbb_.AddOffset(DataLink_Abridged::VT_POCNUMS, pocNums);
  }
  void add_geoDatum(::flatbuffers::Offset<::flatbuffers::String> geoDatum) {
    fbb_.AddOffset(DataLink_Abridged::VT_GEODATUM, geoDatum);
  }
  void add_refPoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refPoints) {
    fbb_.AddOffset(DataLink_Abridged::VT_REFPOINTS, refPoints);
  }
  void add_voiceCoord(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> voiceCoord) {
    fbb_.AddOffset(DataLink_Abridged::VT_VOICECOORD, voiceCoord);
  }
  void add_sysDefaultCode(::flatbuffers::Offset<::flatbuffers::String> sysDefaultCode) {
    fbb_.AddOffset(DataLink_Abridged::VT_SYSDEFAULTCODE, sysDefaultCode);
  }
  void add_winSizeMult(double winSizeMult) {
    fbb_.AddElement<double>(DataLink_Abridged::VT_WINSIZEMULT, winSizeMult, 0.0);
  }
  void add_winSizeMin(double winSizeMin) {
    fbb_.AddElement<double>(DataLink_Abridged::VT_WINSIZEMIN, winSizeMin, 0.0);
  }
  void add_minTrackQual(int32_t minTrackQual) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_MINTRACKQUAL, minTrackQual, 0);
  }
  void add_maxTrackQual(int32_t maxTrackQual) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_MAXTRACKQUAL, maxTrackQual, 0);
  }
  void add_resTrackQual(int32_t resTrackQual) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_RESTRACKQUAL, resTrackQual, 0);
  }
  void add_courseDiff(int32_t courseDiff) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_COURSEDIFF, courseDiff, 0);
  }
  void add_speedDiff(int32_t speedDiff) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_SPEEDDIFF, speedDiff, 0);
  }
  void add_altDiff(int32_t altDiff) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_ALTDIFF, altDiff, 0);
  }
  void add_minGeoPosQual(int32_t minGeoPosQual) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_MINGEOPOSQUAL, minGeoPosQual, 0);
  }
  void add_maxGeoPosQual(int32_t maxGeoPosQual) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_MAXGEOPOSQUAL, maxGeoPosQual, 0);
  }
  void add_decorrWinMult(double decorrWinMult) {
    fbb_.AddElement<double>(DataLink_Abridged::VT_DECORRWINMULT, decorrWinMult, 0.0);
  }
  void add_consecDecorr(int32_t consecDecorr) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_CONSECDECORR, consecDecorr, 0);
  }
  void add_multiDuty(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiDuty) {
    fbb_.AddOffset(DataLink_Abridged::VT_MULTIDUTY, multiDuty);
  }
  void add_ops(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ops) {
    fbb_.AddOffset(DataLink_Abridged::VT_OPS, ops);
  }
  void add_jreUnitDes(::flatbuffers::Offset<::flatbuffers::String> jreUnitDes) {
    fbb_.AddOffset(DataLink_Abridged::VT_JREUNITDES, jreUnitDes);
  }
  void add_jreCallSign(::flatbuffers::Offset<::flatbuffers::String> jreCallSign) {
    fbb_.AddOffset(DataLink_Abridged::VT_JRECALLSIGN, jreCallSign);
  }
  void add_jrePriAdd(int32_t jrePriAdd) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_JREPRIADD, jrePriAdd, 0);
  }
  void add_jreSecAdd(int32_t jreSecAdd) {
    fbb_.AddElement<int32_t>(DataLink_Abridged::VT_JRESECADD, jreSecAdd, 0);
  }
  void add_jreDetails(::flatbuffers::Offset<::flatbuffers::String> jreDetails) {
    fbb_.AddOffset(DataLink_Abridged::VT_JREDETAILS, jreDetails);
  }
  void add_specTracks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specTracks) {
    fbb_.AddOffset(DataLink_Abridged::VT_SPECTRACKS, specTracks);
  }
  void add_nonLinkUnitDes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nonLinkUnitDes) {
    fbb_.AddOffset(DataLink_Abridged::VT_NONLINKUNITDES, nonLinkUnitDes);
  }
  void add_trackNumBlockLLs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trackNumBlockLLs) {
    fbb_.AddOffset(DataLink_Abridged::VT_TRACKNUMBLOCKLLS, trackNumBlockLLs);
  }
  void add_trackNumBlocks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trackNumBlocks) {
    fbb_.AddOffset(DataLink_Abridged::VT_TRACKNUMBLOCKS, trackNumBlocks);
  }
  void add_mgmtCode(::flatbuffers::Offset<::flatbuffers::String> mgmtCode) {
    fbb_.AddOffset(DataLink_Abridged::VT_MGMTCODE, mgmtCode);
  }
  void add_mgmtCodeMeaning(::flatbuffers::Offset<::flatbuffers::String> mgmtCodeMeaning) {
    fbb_.AddOffset(DataLink_Abridged::VT_MGMTCODEMEANING, mgmtCodeMeaning);
  }
  void add_ackReq(bool ackReq) {
    fbb_.AddElement<uint8_t>(DataLink_Abridged::VT_ACKREQ, static_cast<uint8_t>(ackReq), 0);
  }
  void add_ackInstUnits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ackInstUnits) {
    fbb_.AddOffset(DataLink_Abridged::VT_ACKINSTUNITS, ackInstUnits);
  }
  void add_classSource(::flatbuffers::Offset<::flatbuffers::String> classSource) {
    fbb_.AddOffset(DataLink_Abridged::VT_CLASSSOURCE, classSource);
  }
  void add_classReasons(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> classReasons) {
    fbb_.AddOffset(DataLink_Abridged::VT_CLASSREASONS, classReasons);
  }
  void add_decInstDates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> decInstDates) {
    fbb_.AddOffset(DataLink_Abridged::VT_DECINSTDATES, decInstDates);
  }
  void add_decExemptCodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> decExemptCodes) {
    fbb_.AddOffset(DataLink_Abridged::VT_DECEXEMPTCODES, decExemptCodes);
  }
  void add_remarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks) {
    fbb_.AddOffset(DataLink_Abridged::VT_REMARKS, remarks);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(DataLink_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(DataLink_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(DataLink_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(DataLink_Abridged::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(DataLink_Abridged::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(DataLink_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(DataLink_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(DataLink_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(DataLink_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(DataLink_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(DataLink_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit DataLink_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLink_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLink_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLink_Abridged> CreateDataLink_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> opExName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> originator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stopTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stopTimeMod = 0,
    ::flatbuffers::Offset<::flatbuffers::String> planOrigNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> opExInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> opExInfoAlt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> serialNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> month = 0,
    ::flatbuffers::Offset<::flatbuffers::String> qualifier = 0,
    int32_t qualSN = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> references = 0,
    ::flatbuffers::Offset<::flatbuffers::String> canxId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> canxOriginator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> canxTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> canxSerialNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> canxSpecialNotation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> canxSICs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocRank = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocCallSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pocLocName = 0,
    double pocLat = 0.0,
    double pocLon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> pocNums = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoDatum = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> refPoints = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> voiceCoord = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sysDefaultCode = 0,
    double winSizeMult = 0.0,
    double winSizeMin = 0.0,
    int32_t minTrackQual = 0,
    int32_t maxTrackQual = 0,
    int32_t resTrackQual = 0,
    int32_t courseDiff = 0,
    int32_t speedDiff = 0,
    int32_t altDiff = 0,
    int32_t minGeoPosQual = 0,
    int32_t maxGeoPosQual = 0,
    double decorrWinMult = 0.0,
    int32_t consecDecorr = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> multiDuty = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ops = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jreUnitDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jreCallSign = 0,
    int32_t jrePriAdd = 0,
    int32_t jreSecAdd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jreDetails = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specTracks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nonLinkUnitDes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trackNumBlockLLs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> trackNumBlocks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mgmtCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mgmtCodeMeaning = 0,
    bool ackReq = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ackInstUnits = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classSource = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> classReasons = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> decInstDates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> decExemptCodes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    DataLink_Abridged_dataMode_Enum dataMode = DataLink_Abridged_dataMode_Enum_REAL) {
  DataLink_AbridgedBuilder builder_(_fbb);
  builder_.add_decorrWinMult(decorrWinMult);
  builder_.add_winSizeMin(winSizeMin);
  builder_.add_winSizeMult(winSizeMult);
  builder_.add_pocLon(pocLon);
  builder_.add_pocLat(pocLat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_remarks(remarks);
  builder_.add_decExemptCodes(decExemptCodes);
  builder_.add_decInstDates(decInstDates);
  builder_.add_classReasons(classReasons);
  builder_.add_classSource(classSource);
  builder_.add_ackInstUnits(ackInstUnits);
  builder_.add_mgmtCodeMeaning(mgmtCodeMeaning);
  builder_.add_mgmtCode(mgmtCode);
  builder_.add_trackNumBlocks(trackNumBlocks);
  builder_.add_trackNumBlockLLs(trackNumBlockLLs);
  builder_.add_nonLinkUnitDes(nonLinkUnitDes);
  builder_.add_specTracks(specTracks);
  builder_.add_jreDetails(jreDetails);
  builder_.add_jreSecAdd(jreSecAdd);
  builder_.add_jrePriAdd(jrePriAdd);
  builder_.add_jreCallSign(jreCallSign);
  builder_.add_jreUnitDes(jreUnitDes);
  builder_.add_ops(ops);
  builder_.add_multiDuty(multiDuty);
  builder_.add_consecDecorr(consecDecorr);
  builder_.add_maxGeoPosQual(maxGeoPosQual);
  builder_.add_minGeoPosQual(minGeoPosQual);
  builder_.add_altDiff(altDiff);
  builder_.add_speedDiff(speedDiff);
  builder_.add_courseDiff(courseDiff);
  builder_.add_resTrackQual(resTrackQual);
  builder_.add_maxTrackQual(maxTrackQual);
  builder_.add_minTrackQual(minTrackQual);
  builder_.add_sysDefaultCode(sysDefaultCode);
  builder_.add_voiceCoord(voiceCoord);
  builder_.add_refPoints(refPoints);
  builder_.add_geoDatum(geoDatum);
  builder_.add_pocNums(pocNums);
  builder_.add_pocLocName(pocLocName);
  builder_.add_pocCallSign(pocCallSign);
  builder_.add_pocRank(pocRank);
  builder_.add_pocName(pocName);
  builder_.add_canxSICs(canxSICs);
  builder_.add_canxSpecialNotation(canxSpecialNotation);
  builder_.add_canxSerialNum(canxSerialNum);
  builder_.add_canxTs(canxTs);
  builder_.add_canxOriginator(canxOriginator);
  builder_.add_canxId(canxId);
  builder_.add_references(references);
  builder_.add_qualSN(qualSN);
  builder_.add_qualifier(qualifier);
  builder_.add_month(month);
  builder_.add_serialNum(serialNum);
  builder_.add_opExInfoAlt(opExInfoAlt);
  builder_.add_opExInfo(opExInfo);
  builder_.add_planOrigNum(planOrigNum);
  builder_.add_stopTimeMod(stopTimeMod);
  builder_.add_stopTime(stopTime);
  builder_.add_startTime(startTime);
  builder_.add_originator(originator);
  builder_.add_opExName(opExName);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_ackReq(ackReq);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLink_Abridged> CreateDataLink_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *opExName = nullptr,
    const char *originator = nullptr,
    const char *startTime = nullptr,
    const char *stopTime = nullptr,
    const char *stopTimeMod = nullptr,
    const char *planOrigNum = nullptr,
    const char *opExInfo = nullptr,
    const char *opExInfoAlt = nullptr,
    const char *serialNum = nullptr,
    const char *month = nullptr,
    const char *qualifier = nullptr,
    int32_t qualSN = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *references = nullptr,
    const char *canxId = nullptr,
    const char *canxOriginator = nullptr,
    const char *canxTs = nullptr,
    const char *canxSerialNum = nullptr,
    const char *canxSpecialNotation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *canxSICs = nullptr,
    const char *pocName = nullptr,
    const char *pocRank = nullptr,
    const char *pocCallSign = nullptr,
    const char *pocLocName = nullptr,
    double pocLat = 0.0,
    double pocLon = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *pocNums = nullptr,
    const char *geoDatum = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *refPoints = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *voiceCoord = nullptr,
    const char *sysDefaultCode = nullptr,
    double winSizeMult = 0.0,
    double winSizeMin = 0.0,
    int32_t minTrackQual = 0,
    int32_t maxTrackQual = 0,
    int32_t resTrackQual = 0,
    int32_t courseDiff = 0,
    int32_t speedDiff = 0,
    int32_t altDiff = 0,
    int32_t minGeoPosQual = 0,
    int32_t maxGeoPosQual = 0,
    double decorrWinMult = 0.0,
    int32_t consecDecorr = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *multiDuty = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ops = nullptr,
    const char *jreUnitDes = nullptr,
    const char *jreCallSign = nullptr,
    int32_t jrePriAdd = 0,
    int32_t jreSecAdd = 0,
    const char *jreDetails = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *specTracks = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *nonLinkUnitDes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *trackNumBlockLLs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *trackNumBlocks = nullptr,
    const char *mgmtCode = nullptr,
    const char *mgmtCodeMeaning = nullptr,
    bool ackReq = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ackInstUnits = nullptr,
    const char *classSource = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *classReasons = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *decInstDates = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *decExemptCodes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks = nullptr,
    const char *rawFileURI = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    DataLink_Abridged_dataMode_Enum dataMode = DataLink_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto opExName__ = opExName ? _fbb.CreateString(opExName) : 0;
  auto originator__ = originator ? _fbb.CreateString(originator) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto stopTime__ = stopTime ? _fbb.CreateString(stopTime) : 0;
  auto stopTimeMod__ = stopTimeMod ? _fbb.CreateString(stopTimeMod) : 0;
  auto planOrigNum__ = planOrigNum ? _fbb.CreateString(planOrigNum) : 0;
  auto opExInfo__ = opExInfo ? _fbb.CreateString(opExInfo) : 0;
  auto opExInfoAlt__ = opExInfoAlt ? _fbb.CreateString(opExInfoAlt) : 0;
  auto serialNum__ = serialNum ? _fbb.CreateString(serialNum) : 0;
  auto month__ = month ? _fbb.CreateString(month) : 0;
  auto qualifier__ = qualifier ? _fbb.CreateString(qualifier) : 0;
  auto references__ = references ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*references) : 0;
  auto canxId__ = canxId ? _fbb.CreateString(canxId) : 0;
  auto canxOriginator__ = canxOriginator ? _fbb.CreateString(canxOriginator) : 0;
  auto canxTs__ = canxTs ? _fbb.CreateString(canxTs) : 0;
  auto canxSerialNum__ = canxSerialNum ? _fbb.CreateString(canxSerialNum) : 0;
  auto canxSpecialNotation__ = canxSpecialNotation ? _fbb.CreateString(canxSpecialNotation) : 0;
  auto canxSICs__ = canxSICs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*canxSICs) : 0;
  auto pocName__ = pocName ? _fbb.CreateString(pocName) : 0;
  auto pocRank__ = pocRank ? _fbb.CreateString(pocRank) : 0;
  auto pocCallSign__ = pocCallSign ? _fbb.CreateString(pocCallSign) : 0;
  auto pocLocName__ = pocLocName ? _fbb.CreateString(pocLocName) : 0;
  auto pocNums__ = pocNums ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*pocNums) : 0;
  auto geoDatum__ = geoDatum ? _fbb.CreateString(geoDatum) : 0;
  auto refPoints__ = refPoints ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*refPoints) : 0;
  auto voiceCoord__ = voiceCoord ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*voiceCoord) : 0;
  auto sysDefaultCode__ = sysDefaultCode ? _fbb.CreateString(sysDefaultCode) : 0;
  auto multiDuty__ = multiDuty ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*multiDuty) : 0;
  auto ops__ = ops ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ops) : 0;
  auto jreUnitDes__ = jreUnitDes ? _fbb.CreateString(jreUnitDes) : 0;
  auto jreCallSign__ = jreCallSign ? _fbb.CreateString(jreCallSign) : 0;
  auto jreDetails__ = jreDetails ? _fbb.CreateString(jreDetails) : 0;
  auto specTracks__ = specTracks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*specTracks) : 0;
  auto nonLinkUnitDes__ = nonLinkUnitDes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*nonLinkUnitDes) : 0;
  auto trackNumBlockLLs__ = trackNumBlockLLs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*trackNumBlockLLs) : 0;
  auto trackNumBlocks__ = trackNumBlocks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*trackNumBlocks) : 0;
  auto mgmtCode__ = mgmtCode ? _fbb.CreateString(mgmtCode) : 0;
  auto mgmtCodeMeaning__ = mgmtCodeMeaning ? _fbb.CreateString(mgmtCodeMeaning) : 0;
  auto ackInstUnits__ = ackInstUnits ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ackInstUnits) : 0;
  auto classSource__ = classSource ? _fbb.CreateString(classSource) : 0;
  auto classReasons__ = classReasons ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*classReasons) : 0;
  auto decInstDates__ = decInstDates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*decInstDates) : 0;
  auto decExemptCodes__ = decExemptCodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*decExemptCodes) : 0;
  auto remarks__ = remarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*remarks) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateDataLink_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      opExName__,
      originator__,
      startTime__,
      stopTime__,
      stopTimeMod__,
      planOrigNum__,
      opExInfo__,
      opExInfoAlt__,
      serialNum__,
      month__,
      qualifier__,
      qualSN,
      references__,
      canxId__,
      canxOriginator__,
      canxTs__,
      canxSerialNum__,
      canxSpecialNotation__,
      canxSICs__,
      pocName__,
      pocRank__,
      pocCallSign__,
      pocLocName__,
      pocLat,
      pocLon,
      pocNums__,
      geoDatum__,
      refPoints__,
      voiceCoord__,
      sysDefaultCode__,
      winSizeMult,
      winSizeMin,
      minTrackQual,
      maxTrackQual,
      resTrackQual,
      courseDiff,
      speedDiff,
      altDiff,
      minGeoPosQual,
      maxGeoPosQual,
      decorrWinMult,
      consecDecorr,
      multiDuty__,
      ops__,
      jreUnitDes__,
      jreCallSign__,
      jrePriAdd,
      jreSecAdd,
      jreDetails__,
      specTracks__,
      nonLinkUnitDes__,
      trackNumBlockLLs__,
      trackNumBlocks__,
      mgmtCode__,
      mgmtCodeMeaning__,
      ackReq,
      ackInstUnits__,
      classSource__,
      classReasons__,
      decInstDates__,
      decExemptCodes__,
      remarks__,
      rawFileURI__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const DataLink_Abridged *GetDataLink_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<DataLink_Abridged>(buf);
}

inline const DataLink_Abridged *GetSizePrefixedDataLink_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLink_Abridged>(buf);
}

inline const char *DataLink_AbridgedIdentifier() {
  return "DATA";
}

inline bool DataLink_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLink_AbridgedIdentifier());
}

inline bool SizePrefixedDataLink_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLink_AbridgedIdentifier(), true);
}

inline bool VerifyDataLink_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLink_Abridged>(DataLink_AbridgedIdentifier());
}

inline bool VerifySizePrefixedDataLink_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLink_Abridged>(DataLink_AbridgedIdentifier());
}

inline void FinishDataLink_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLink_Abridged> root) {
  fbb.Finish(root, DataLink_AbridgedIdentifier());
}

inline void FinishSizePrefixedDataLink_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLink_Abridged> root) {
  fbb.FinishSizePrefixed(root, DataLink_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
