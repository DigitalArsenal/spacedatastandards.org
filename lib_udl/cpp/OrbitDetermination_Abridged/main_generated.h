// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OrbitDetermination_Abridged;
struct OrbitDetermination_AbridgedBuilder;

enum OrbitDetermination_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OrbitDetermination_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OrbitDetermination_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OrbitDetermination_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OrbitDetermination_Abridged_dataMode_Enum_EXERCISE = 3,
  OrbitDetermination_Abridged_dataMode_Enum_MIN = OrbitDetermination_Abridged_dataMode_Enum_REAL,
  OrbitDetermination_Abridged_dataMode_Enum_MAX = OrbitDetermination_Abridged_dataMode_Enum_EXERCISE
};

inline const OrbitDetermination_Abridged_dataMode_Enum (&EnumValuesOrbitDetermination_Abridged_dataMode_Enum())[4] {
  static const OrbitDetermination_Abridged_dataMode_Enum values[] = {
    OrbitDetermination_Abridged_dataMode_Enum_REAL,
    OrbitDetermination_Abridged_dataMode_Enum_TEST,
    OrbitDetermination_Abridged_dataMode_Enum_SIMULATED,
    OrbitDetermination_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOrbitDetermination_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrbitDetermination_Abridged_dataMode_Enum(OrbitDetermination_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OrbitDetermination_Abridged_dataMode_Enum_REAL, OrbitDetermination_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrbitDetermination_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
struct OrbitDetermination_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrbitDetermination_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_STARTTIME = 8,
    VT_ENDTIME = 10,
    VT_IDONORBIT = 12,
    VT_ORIGOBJECTID = 14,
    VT_SATNO = 16,
    VT_APRIORIIDELSET = 18,
    VT_APRIORIELSET = 20,
    VT_APRIORIIDSTATEVECTOR = 22,
    VT_APRIORISTATEVECTOR = 24,
    VT_INITIALOD = 26,
    VT_LASTOBSTART = 28,
    VT_LASTOBEND = 30,
    VT_TIMESPAN = 32,
    VT_EFFECTIVEFROM = 34,
    VT_EFFECTIVEUNTIL = 36,
    VT_WRMS = 38,
    VT_PREVIOUSWRMS = 40,
    VT_FIRSTPASSWRMS = 42,
    VT_BESTPASSWRMS = 44,
    VT_ERRORGROWTHRATE = 46,
    VT_EDR = 48,
    VT_METHOD = 50,
    VT_METHODSOURCE = 52,
    VT_FITSPAN = 54,
    VT_BALLISTICCOEFFEST = 56,
    VT_BALLISTICCOEFFMODEL = 58,
    VT_AGOMEST = 60,
    VT_AGOMMODEL = 62,
    VT_RMSCONVERGENCECRITERIA = 64,
    VT_NUMITERATIONS = 66,
    VT_ACCEPTEDOBTYPS = 68,
    VT_ACCEPTEDOBIDS = 70,
    VT_REJECTEDOBTYPS = 72,
    VT_REJECTEDOBIDS = 74,
    VT_SENSORIDS = 76,
    VT_CREATEDAT = 78,
    VT_CREATEDBY = 80,
    VT_SOURCEDL = 82,
    VT_SOURCE = 84,
    VT_ORIGIN = 86,
    VT_ORIGNETWORK = 88,
    VT_DATAMODE = 90
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  /// Example: /// Example: 2023-08-28T15:20:21.247192Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  /// Example: /// Example: 54741
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 54741
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
  /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *aprioriIdElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APRIORIIDELSET);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *aprioriElset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APRIORIELSET);
  }
  /// Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
  /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *aprioriIdStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APRIORIIDSTATEVECTOR);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *aprioriStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APRIORISTATEVECTOR);
  }
  /// Flag indicating whether this is an initial orbit determination.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool initialOD() const {
    return GetField<uint8_t>(VT_INITIALOD, 0) != 0;
  }
  /// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastObStart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBSTART);
  }
  /// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastObEnd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBEND);
  }
  /// The time span used for the OD of the object, in days.
  /// Example: /// Example: 3.5
  /// Constraints: No constraints specified.
  double timeSpan() const {
    return GetField<double>(VT_TIMESPAN, 0.0);
  }
  /// Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveFrom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEFROM);
  }
  /// Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2023-08-30T08:15:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effectiveUntil() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTIVEUNTIL);
  }
  /// The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
  /// Example: /// Example: 0.991
  /// Constraints: No constraints specified.
  double wrms() const {
    return GetField<double>(VT_WRMS, 0.0);
  }
  /// The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
  /// Example: /// Example: 1.02
  /// Constraints: No constraints specified.
  double previousWrms() const {
    return GetField<double>(VT_PREVIOUSWRMS, 0.0);
  }
  /// The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
  /// Example: /// Example: 0.985
  /// Constraints: No constraints specified.
  double firstPassWrms() const {
    return GetField<double>(VT_FIRSTPASSWRMS, 0.0);
  }
  /// Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
  /// Example: /// Example: 0.975
  /// Constraints: No constraints specified.
  double bestPassWrms() const {
    return GetField<double>(VT_BESTPASSWRMS, 0.0);
  }
  /// Error growth rate of the OD solution in kilometers per day.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double errorGrowthRate() const {
    return GetField<double>(VT_ERRORGROWTHRATE, 0.0);
  }
  /// Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double edr() const {
    return GetField<double>(VT_EDR, 0.0);
  }
  /// Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
  /// Example: /// Example: BLS
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *method() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METHOD);
  }
  /// Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
  /// Example: /// Example: ASW
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *methodSource() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METHODSOURCE);
  }
  /// The fit span, in days, used in a Batch Least Squares (BLS) OD.
  /// Example: /// Example: 0.6
  /// Constraints: No constraints specified.
  double fitSpan() const {
    return GetField<double>(VT_FITSPAN, 0.0);
  }
  /// Flag indicating whether the ballistic coefficient was estimated during this OD solution.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool ballisticCoeffEst() const {
    return GetField<uint8_t>(VT_BALLISTICCOEFFEST, 0) != 0;
  }
  /// Model used to estimate the ballistic coefficient.
  /// Example: /// Example: GaussMarkov
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *ballisticCoeffModel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BALLISTICCOEFFMODEL);
  }
  /// Flag indicating whether the AGOM was estimated during this OD solution.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool agomEst() const {
    return GetField<uint8_t>(VT_AGOMEST, 0) != 0;
  }
  /// Model used to estimate the AGOM.
  /// Example: /// Example: RandomWalk
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *agomModel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AGOMMODEL);
  }
  /// OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
  /// Example: /// Example: 0.001
  /// Constraints: No constraints specified.
  double rmsConvergenceCriteria() const {
    return GetField<double>(VT_RMSCONVERGENCECRITERIA, 0.0);
  }
  /// The number of iterations taken for the algorithm to converge on an OD solution.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  int32_t numIterations() const {
    return GetField<int32_t>(VT_NUMITERATIONS, 0);
  }
  /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
  /// Example: /// Example: ['EO', 'RADAR']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *acceptedObTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACCEPTEDOBTYPS);
  }
  /// Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *acceptedObIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACCEPTEDOBIDS);
  }
  /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
  /// Example: /// Example: ['DOA', 'RF']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedObTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REJECTEDOBTYPS);
  }
  /// Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedObIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REJECTEDOBIDS);
  }
  /// Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
  /// Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENSORIDS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OrbitDetermination_Abridged_dataMode_Enum dataMode() const {
    return static_cast<OrbitDetermination_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_APRIORIIDELSET) &&
           verifier.VerifyString(aprioriIdElset()) &&
           VerifyOffset(verifier, VT_APRIORIELSET) &&
           verifier.VerifyString(aprioriElset()) &&
           VerifyOffset(verifier, VT_APRIORIIDSTATEVECTOR) &&
           verifier.VerifyString(aprioriIdStateVector()) &&
           VerifyOffset(verifier, VT_APRIORISTATEVECTOR) &&
           verifier.VerifyString(aprioriStateVector()) &&
           VerifyField<uint8_t>(verifier, VT_INITIALOD, 1) &&
           VerifyOffset(verifier, VT_LASTOBSTART) &&
           verifier.VerifyString(lastObStart()) &&
           VerifyOffset(verifier, VT_LASTOBEND) &&
           verifier.VerifyString(lastObEnd()) &&
           VerifyField<double>(verifier, VT_TIMESPAN, 8) &&
           VerifyOffset(verifier, VT_EFFECTIVEFROM) &&
           verifier.VerifyString(effectiveFrom()) &&
           VerifyOffset(verifier, VT_EFFECTIVEUNTIL) &&
           verifier.VerifyString(effectiveUntil()) &&
           VerifyField<double>(verifier, VT_WRMS, 8) &&
           VerifyField<double>(verifier, VT_PREVIOUSWRMS, 8) &&
           VerifyField<double>(verifier, VT_FIRSTPASSWRMS, 8) &&
           VerifyField<double>(verifier, VT_BESTPASSWRMS, 8) &&
           VerifyField<double>(verifier, VT_ERRORGROWTHRATE, 8) &&
           VerifyField<double>(verifier, VT_EDR, 8) &&
           VerifyOffset(verifier, VT_METHOD) &&
           verifier.VerifyString(method()) &&
           VerifyOffset(verifier, VT_METHODSOURCE) &&
           verifier.VerifyString(methodSource()) &&
           VerifyField<double>(verifier, VT_FITSPAN, 8) &&
           VerifyField<uint8_t>(verifier, VT_BALLISTICCOEFFEST, 1) &&
           VerifyOffset(verifier, VT_BALLISTICCOEFFMODEL) &&
           verifier.VerifyString(ballisticCoeffModel()) &&
           VerifyField<uint8_t>(verifier, VT_AGOMEST, 1) &&
           VerifyOffset(verifier, VT_AGOMMODEL) &&
           verifier.VerifyString(agomModel()) &&
           VerifyField<double>(verifier, VT_RMSCONVERGENCECRITERIA, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMITERATIONS, 4) &&
           VerifyOffset(verifier, VT_ACCEPTEDOBTYPS) &&
           verifier.VerifyVector(acceptedObTyps()) &&
           verifier.VerifyVectorOfStrings(acceptedObTyps()) &&
           VerifyOffset(verifier, VT_ACCEPTEDOBIDS) &&
           verifier.VerifyVector(acceptedObIds()) &&
           verifier.VerifyVectorOfStrings(acceptedObIds()) &&
           VerifyOffset(verifier, VT_REJECTEDOBTYPS) &&
           verifier.VerifyVector(rejectedObTyps()) &&
           verifier.VerifyVectorOfStrings(rejectedObTyps()) &&
           VerifyOffset(verifier, VT_REJECTEDOBIDS) &&
           verifier.VerifyVector(rejectedObIds()) &&
           verifier.VerifyVectorOfStrings(rejectedObIds()) &&
           VerifyOffset(verifier, VT_SENSORIDS) &&
           verifier.VerifyVector(sensorIds()) &&
           verifier.VerifyVectorOfStrings(sensorIds()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct OrbitDetermination_AbridgedBuilder {
  typedef OrbitDetermination_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ENDTIME, endTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(OrbitDetermination_Abridged::VT_SATNO, satNo, 0);
  }
  void add_aprioriIdElset(::flatbuffers::Offset<::flatbuffers::String> aprioriIdElset) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_APRIORIIDELSET, aprioriIdElset);
  }
  void add_aprioriElset(::flatbuffers::Offset<::flatbuffers::String> aprioriElset) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_APRIORIELSET, aprioriElset);
  }
  void add_aprioriIdStateVector(::flatbuffers::Offset<::flatbuffers::String> aprioriIdStateVector) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_APRIORIIDSTATEVECTOR, aprioriIdStateVector);
  }
  void add_aprioriStateVector(::flatbuffers::Offset<::flatbuffers::String> aprioriStateVector) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_APRIORISTATEVECTOR, aprioriStateVector);
  }
  void add_initialOD(bool initialOD) {
    fbb_.AddElement<uint8_t>(OrbitDetermination_Abridged::VT_INITIALOD, static_cast<uint8_t>(initialOD), 0);
  }
  void add_lastObStart(::flatbuffers::Offset<::flatbuffers::String> lastObStart) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_LASTOBSTART, lastObStart);
  }
  void add_lastObEnd(::flatbuffers::Offset<::flatbuffers::String> lastObEnd) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_LASTOBEND, lastObEnd);
  }
  void add_timeSpan(double timeSpan) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_TIMESPAN, timeSpan, 0.0);
  }
  void add_effectiveFrom(::flatbuffers::Offset<::flatbuffers::String> effectiveFrom) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_EFFECTIVEFROM, effectiveFrom);
  }
  void add_effectiveUntil(::flatbuffers::Offset<::flatbuffers::String> effectiveUntil) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_EFFECTIVEUNTIL, effectiveUntil);
  }
  void add_wrms(double wrms) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_WRMS, wrms, 0.0);
  }
  void add_previousWrms(double previousWrms) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_PREVIOUSWRMS, previousWrms, 0.0);
  }
  void add_firstPassWrms(double firstPassWrms) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_FIRSTPASSWRMS, firstPassWrms, 0.0);
  }
  void add_bestPassWrms(double bestPassWrms) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_BESTPASSWRMS, bestPassWrms, 0.0);
  }
  void add_errorGrowthRate(double errorGrowthRate) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_ERRORGROWTHRATE, errorGrowthRate, 0.0);
  }
  void add_edr(double edr) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_EDR, edr, 0.0);
  }
  void add_method(::flatbuffers::Offset<::flatbuffers::String> method) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_METHOD, method);
  }
  void add_methodSource(::flatbuffers::Offset<::flatbuffers::String> methodSource) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_METHODSOURCE, methodSource);
  }
  void add_fitSpan(double fitSpan) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_FITSPAN, fitSpan, 0.0);
  }
  void add_ballisticCoeffEst(bool ballisticCoeffEst) {
    fbb_.AddElement<uint8_t>(OrbitDetermination_Abridged::VT_BALLISTICCOEFFEST, static_cast<uint8_t>(ballisticCoeffEst), 0);
  }
  void add_ballisticCoeffModel(::flatbuffers::Offset<::flatbuffers::String> ballisticCoeffModel) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_BALLISTICCOEFFMODEL, ballisticCoeffModel);
  }
  void add_agomEst(bool agomEst) {
    fbb_.AddElement<uint8_t>(OrbitDetermination_Abridged::VT_AGOMEST, static_cast<uint8_t>(agomEst), 0);
  }
  void add_agomModel(::flatbuffers::Offset<::flatbuffers::String> agomModel) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_AGOMMODEL, agomModel);
  }
  void add_rmsConvergenceCriteria(double rmsConvergenceCriteria) {
    fbb_.AddElement<double>(OrbitDetermination_Abridged::VT_RMSCONVERGENCECRITERIA, rmsConvergenceCriteria, 0.0);
  }
  void add_numIterations(int32_t numIterations) {
    fbb_.AddElement<int32_t>(OrbitDetermination_Abridged::VT_NUMITERATIONS, numIterations, 0);
  }
  void add_acceptedObTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acceptedObTyps) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ACCEPTEDOBTYPS, acceptedObTyps);
  }
  void add_acceptedObIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acceptedObIds) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ACCEPTEDOBIDS, acceptedObIds);
  }
  void add_rejectedObTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedObTyps) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_REJECTEDOBTYPS, rejectedObTyps);
  }
  void add_rejectedObIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedObIds) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_REJECTEDOBIDS, rejectedObIds);
  }
  void add_sensorIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorIds) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_SENSORIDS, sensorIds);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OrbitDetermination_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(OrbitDetermination_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OrbitDetermination_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit OrbitDetermination_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrbitDetermination_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrbitDetermination_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrbitDetermination_Abridged> CreateOrbitDetermination_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aprioriIdElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aprioriElset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aprioriIdStateVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aprioriStateVector = 0,
    bool initialOD = false,
    ::flatbuffers::Offset<::flatbuffers::String> lastObStart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastObEnd = 0,
    double timeSpan = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveFrom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectiveUntil = 0,
    double wrms = 0.0,
    double previousWrms = 0.0,
    double firstPassWrms = 0.0,
    double bestPassWrms = 0.0,
    double errorGrowthRate = 0.0,
    double edr = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> method = 0,
    ::flatbuffers::Offset<::flatbuffers::String> methodSource = 0,
    double fitSpan = 0.0,
    bool ballisticCoeffEst = false,
    ::flatbuffers::Offset<::flatbuffers::String> ballisticCoeffModel = 0,
    bool agomEst = false,
    ::flatbuffers::Offset<::flatbuffers::String> agomModel = 0,
    double rmsConvergenceCriteria = 0.0,
    int32_t numIterations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acceptedObTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acceptedObIds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedObTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedObIds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    OrbitDetermination_Abridged_dataMode_Enum dataMode = OrbitDetermination_Abridged_dataMode_Enum_REAL) {
  OrbitDetermination_AbridgedBuilder builder_(_fbb);
  builder_.add_rmsConvergenceCriteria(rmsConvergenceCriteria);
  builder_.add_fitSpan(fitSpan);
  builder_.add_edr(edr);
  builder_.add_errorGrowthRate(errorGrowthRate);
  builder_.add_bestPassWrms(bestPassWrms);
  builder_.add_firstPassWrms(firstPassWrms);
  builder_.add_previousWrms(previousWrms);
  builder_.add_wrms(wrms);
  builder_.add_timeSpan(timeSpan);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_sensorIds(sensorIds);
  builder_.add_rejectedObIds(rejectedObIds);
  builder_.add_rejectedObTyps(rejectedObTyps);
  builder_.add_acceptedObIds(acceptedObIds);
  builder_.add_acceptedObTyps(acceptedObTyps);
  builder_.add_numIterations(numIterations);
  builder_.add_agomModel(agomModel);
  builder_.add_ballisticCoeffModel(ballisticCoeffModel);
  builder_.add_methodSource(methodSource);
  builder_.add_method(method);
  builder_.add_effectiveUntil(effectiveUntil);
  builder_.add_effectiveFrom(effectiveFrom);
  builder_.add_lastObEnd(lastObEnd);
  builder_.add_lastObStart(lastObStart);
  builder_.add_aprioriStateVector(aprioriStateVector);
  builder_.add_aprioriIdStateVector(aprioriIdStateVector);
  builder_.add_aprioriElset(aprioriElset);
  builder_.add_aprioriIdElset(aprioriIdElset);
  builder_.add_satNo(satNo);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_agomEst(agomEst);
  builder_.add_ballisticCoeffEst(ballisticCoeffEst);
  builder_.add_initialOD(initialOD);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrbitDetermination_Abridged> CreateOrbitDetermination_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    int32_t satNo = 0,
    const char *aprioriIdElset = nullptr,
    const char *aprioriElset = nullptr,
    const char *aprioriIdStateVector = nullptr,
    const char *aprioriStateVector = nullptr,
    bool initialOD = false,
    const char *lastObStart = nullptr,
    const char *lastObEnd = nullptr,
    double timeSpan = 0.0,
    const char *effectiveFrom = nullptr,
    const char *effectiveUntil = nullptr,
    double wrms = 0.0,
    double previousWrms = 0.0,
    double firstPassWrms = 0.0,
    double bestPassWrms = 0.0,
    double errorGrowthRate = 0.0,
    double edr = 0.0,
    const char *method = nullptr,
    const char *methodSource = nullptr,
    double fitSpan = 0.0,
    bool ballisticCoeffEst = false,
    const char *ballisticCoeffModel = nullptr,
    bool agomEst = false,
    const char *agomModel = nullptr,
    double rmsConvergenceCriteria = 0.0,
    int32_t numIterations = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *acceptedObTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *acceptedObIds = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedObTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedObIds = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorIds = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    OrbitDetermination_Abridged_dataMode_Enum dataMode = OrbitDetermination_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto aprioriIdElset__ = aprioriIdElset ? _fbb.CreateString(aprioriIdElset) : 0;
  auto aprioriElset__ = aprioriElset ? _fbb.CreateString(aprioriElset) : 0;
  auto aprioriIdStateVector__ = aprioriIdStateVector ? _fbb.CreateString(aprioriIdStateVector) : 0;
  auto aprioriStateVector__ = aprioriStateVector ? _fbb.CreateString(aprioriStateVector) : 0;
  auto lastObStart__ = lastObStart ? _fbb.CreateString(lastObStart) : 0;
  auto lastObEnd__ = lastObEnd ? _fbb.CreateString(lastObEnd) : 0;
  auto effectiveFrom__ = effectiveFrom ? _fbb.CreateString(effectiveFrom) : 0;
  auto effectiveUntil__ = effectiveUntil ? _fbb.CreateString(effectiveUntil) : 0;
  auto method__ = method ? _fbb.CreateString(method) : 0;
  auto methodSource__ = methodSource ? _fbb.CreateString(methodSource) : 0;
  auto ballisticCoeffModel__ = ballisticCoeffModel ? _fbb.CreateString(ballisticCoeffModel) : 0;
  auto agomModel__ = agomModel ? _fbb.CreateString(agomModel) : 0;
  auto acceptedObTyps__ = acceptedObTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*acceptedObTyps) : 0;
  auto acceptedObIds__ = acceptedObIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*acceptedObIds) : 0;
  auto rejectedObTyps__ = rejectedObTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rejectedObTyps) : 0;
  auto rejectedObIds__ = rejectedObIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rejectedObIds) : 0;
  auto sensorIds__ = sensorIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sensorIds) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOrbitDetermination_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      startTime__,
      endTime__,
      idOnOrbit__,
      origObjectId__,
      satNo,
      aprioriIdElset__,
      aprioriElset__,
      aprioriIdStateVector__,
      aprioriStateVector__,
      initialOD,
      lastObStart__,
      lastObEnd__,
      timeSpan,
      effectiveFrom__,
      effectiveUntil__,
      wrms,
      previousWrms,
      firstPassWrms,
      bestPassWrms,
      errorGrowthRate,
      edr,
      method__,
      methodSource__,
      fitSpan,
      ballisticCoeffEst,
      ballisticCoeffModel__,
      agomEst,
      agomModel__,
      rmsConvergenceCriteria,
      numIterations,
      acceptedObTyps__,
      acceptedObIds__,
      rejectedObTyps__,
      rejectedObIds__,
      sensorIds__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const OrbitDetermination_Abridged *GetOrbitDetermination_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OrbitDetermination_Abridged>(buf);
}

inline const OrbitDetermination_Abridged *GetSizePrefixedOrbitDetermination_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OrbitDetermination_Abridged>(buf);
}

inline const char *OrbitDetermination_AbridgedIdentifier() {
  return "ORBI";
}

inline bool OrbitDetermination_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OrbitDetermination_AbridgedIdentifier());
}

inline bool SizePrefixedOrbitDetermination_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OrbitDetermination_AbridgedIdentifier(), true);
}

inline bool VerifyOrbitDetermination_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OrbitDetermination_Abridged>(OrbitDetermination_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOrbitDetermination_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OrbitDetermination_Abridged>(OrbitDetermination_AbridgedIdentifier());
}

inline void FinishOrbitDetermination_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrbitDetermination_Abridged> root) {
  fbb.Finish(root, OrbitDetermination_AbridgedIdentifier());
}

inline void FinishSizePrefixedOrbitDetermination_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OrbitDetermination_Abridged> root) {
  fbb.FinishSizePrefixed(root, OrbitDetermination_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
