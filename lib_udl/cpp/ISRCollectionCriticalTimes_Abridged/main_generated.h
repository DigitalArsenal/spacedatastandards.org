// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionCriticalTimes_Abridged;
struct ISRCollectionCriticalTimes_AbridgedBuilder;

/// /// High priority time windows.
struct ISRCollectionCriticalTimes_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionCriticalTimes_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EARLIESTIMAGINGTIME = 4,
    VT_LATESTIMAGINGTIME = 6
  };
  /// Critical start time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *earliestImagingTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EARLIESTIMAGINGTIME);
  }
  /// Critical stop time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:11:15.001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *latestImagingTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LATESTIMAGINGTIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EARLIESTIMAGINGTIME) &&
           verifier.VerifyString(earliestImagingTime()) &&
           VerifyOffset(verifier, VT_LATESTIMAGINGTIME) &&
           verifier.VerifyString(latestImagingTime()) &&
           verifier.EndTable();
  }
};

struct ISRCollectionCriticalTimes_AbridgedBuilder {
  typedef ISRCollectionCriticalTimes_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_earliestImagingTime(::flatbuffers::Offset<::flatbuffers::String> earliestImagingTime) {
    fbb_.AddOffset(ISRCollectionCriticalTimes_Abridged::VT_EARLIESTIMAGINGTIME, earliestImagingTime);
  }
  void add_latestImagingTime(::flatbuffers::Offset<::flatbuffers::String> latestImagingTime) {
    fbb_.AddOffset(ISRCollectionCriticalTimes_Abridged::VT_LATESTIMAGINGTIME, latestImagingTime);
  }
  explicit ISRCollectionCriticalTimes_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged> CreateISRCollectionCriticalTimes_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> earliestImagingTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> latestImagingTime = 0) {
  ISRCollectionCriticalTimes_AbridgedBuilder builder_(_fbb);
  builder_.add_latestImagingTime(latestImagingTime);
  builder_.add_earliestImagingTime(earliestImagingTime);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged> CreateISRCollectionCriticalTimes_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *earliestImagingTime = nullptr,
    const char *latestImagingTime = nullptr) {
  auto earliestImagingTime__ = earliestImagingTime ? _fbb.CreateString(earliestImagingTime) : 0;
  auto latestImagingTime__ = latestImagingTime ? _fbb.CreateString(latestImagingTime) : 0;
  return CreateISRCollectionCriticalTimes_Abridged(
      _fbb,
      earliestImagingTime__,
      latestImagingTime__);
}

inline const ISRCollectionCriticalTimes_Abridged *GetISRCollectionCriticalTimes_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionCriticalTimes_Abridged>(buf);
}

inline const ISRCollectionCriticalTimes_Abridged *GetSizePrefixedISRCollectionCriticalTimes_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionCriticalTimes_Abridged>(buf);
}

inline const char *ISRCollectionCriticalTimes_AbridgedIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionCriticalTimes_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionCriticalTimes_AbridgedIdentifier());
}

inline bool SizePrefixedISRCollectionCriticalTimes_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionCriticalTimes_AbridgedIdentifier(), true);
}

inline bool VerifyISRCollectionCriticalTimes_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionCriticalTimes_Abridged>(ISRCollectionCriticalTimes_AbridgedIdentifier());
}

inline bool VerifySizePrefixedISRCollectionCriticalTimes_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionCriticalTimes_Abridged>(ISRCollectionCriticalTimes_AbridgedIdentifier());
}

inline void FinishISRCollectionCriticalTimes_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged> root) {
  fbb.Finish(root, ISRCollectionCriticalTimes_AbridgedIdentifier());
}

inline void FinishSizePrefixedISRCollectionCriticalTimes_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionCriticalTimes_Abridged> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionCriticalTimes_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
