// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirfieldSlotConsumption_Full;
struct AirfieldSlotConsumption_FullBuilder;

enum AirfieldSlotConsumption_Full_status_Enum : int8_t {
  /// No description available.
  AirfieldSlotConsumption_Full_status_Enum_REQUESTED = 0,
  /// No description available.
  AirfieldSlotConsumption_Full_status_Enum_APPROVED = 1,
  /// No description available.
  AirfieldSlotConsumption_Full_status_Enum_DENIED = 2,
  /// No description available.
  AirfieldSlotConsumption_Full_status_Enum_BLOCKED = 3,
  /// No description available.
  AirfieldSlotConsumption_Full_status_Enum_OTHER = 4,
  AirfieldSlotConsumption_Full_status_Enum_MIN = AirfieldSlotConsumption_Full_status_Enum_REQUESTED,
  AirfieldSlotConsumption_Full_status_Enum_MAX = AirfieldSlotConsumption_Full_status_Enum_OTHER
};

inline const AirfieldSlotConsumption_Full_status_Enum (&EnumValuesAirfieldSlotConsumption_Full_status_Enum())[5] {
  static const AirfieldSlotConsumption_Full_status_Enum values[] = {
    AirfieldSlotConsumption_Full_status_Enum_REQUESTED,
    AirfieldSlotConsumption_Full_status_Enum_APPROVED,
    AirfieldSlotConsumption_Full_status_Enum_DENIED,
    AirfieldSlotConsumption_Full_status_Enum_BLOCKED,
    AirfieldSlotConsumption_Full_status_Enum_OTHER
  };
  return values;
}

inline const char * const *EnumNamesAirfieldSlotConsumption_Full_status_Enum() {
  static const char * const names[6] = {
    "REQUESTED",
    "APPROVED",
    "DENIED",
    "BLOCKED",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfieldSlotConsumption_Full_status_Enum(AirfieldSlotConsumption_Full_status_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirfieldSlotConsumption_Full_status_Enum_REQUESTED, AirfieldSlotConsumption_Full_status_Enum_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfieldSlotConsumption_Full_status_Enum()[index];
}

enum AirfieldSlotConsumption_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirfieldSlotConsumption_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirfieldSlotConsumption_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirfieldSlotConsumption_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirfieldSlotConsumption_Full_dataMode_Enum_EXERCISE = 3,
  AirfieldSlotConsumption_Full_dataMode_Enum_MIN = AirfieldSlotConsumption_Full_dataMode_Enum_REAL,
  AirfieldSlotConsumption_Full_dataMode_Enum_MAX = AirfieldSlotConsumption_Full_dataMode_Enum_EXERCISE
};

inline const AirfieldSlotConsumption_Full_dataMode_Enum (&EnumValuesAirfieldSlotConsumption_Full_dataMode_Enum())[4] {
  static const AirfieldSlotConsumption_Full_dataMode_Enum values[] = {
    AirfieldSlotConsumption_Full_dataMode_Enum_REAL,
    AirfieldSlotConsumption_Full_dataMode_Enum_TEST,
    AirfieldSlotConsumption_Full_dataMode_Enum_SIMULATED,
    AirfieldSlotConsumption_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirfieldSlotConsumption_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfieldSlotConsumption_Full_dataMode_Enum(AirfieldSlotConsumption_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirfieldSlotConsumption_Full_dataMode_Enum_REAL, AirfieldSlotConsumption_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfieldSlotConsumption_Full_dataMode_Enum()[index];
}

/// /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
struct AirfieldSlotConsumption_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirfieldSlotConsumption_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDAIRFIELDSLOT = 8,
    VT_STATUS = 10,
    VT_OCCUPIED = 12,
    VT_CONSUMER = 14,
    VT_OCCAIRCRAFTMDS = 16,
    VT_OCCTAILNUMBER = 18,
    VT_CALLSIGNS = 20,
    VT_MISSIONID = 22,
    VT_NUMAIRCRAFT = 24,
    VT_OCCSTARTTIME = 26,
    VT_RESAIRCRAFTMDS = 28,
    VT_RESTAILNUMBER = 30,
    VT_RESTYPE = 32,
    VT_RESREASON = 34,
    VT_RESMISSIONID = 36,
    VT_STARTTIME = 38,
    VT_ENDTIME = 40,
    VT_TARGETTIME = 42,
    VT_IDARRSORTIE = 44,
    VT_IDDEPSORTIE = 46,
    VT_ALTARRSORTIEID = 48,
    VT_ALTDEPSORTIEID = 50,
    VT_REQCOMMENT = 52,
    VT_APPCOMMENT = 54,
    VT_REQORG = 56,
    VT_REQINITIALS = 58,
    VT_APPORG = 60,
    VT_APPINITIALS = 62,
    VT_CREATEDAT = 64,
    VT_CREATEDBY = 66,
    VT_UPDATEDAT = 68,
    VT_UPDATEDBY = 70,
    VT_SOURCEDL = 72,
    VT_SOURCE = 74,
    VT_ORIGIN = 76,
    VT_ORIGNETWORK = 78,
    VT_DATAMODE = 80
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the airfield slot for which this slot consumption record is referencing.
  /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idAirfieldSlot() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRFIELDSLOT);
  }
  /// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
  /// Example: /// Example: APPROVED
  /// Constraints: Minimum length = 0, Maximum length = 9
  AirfieldSlotConsumption_Full_status_Enum status() const {
    return static_cast<AirfieldSlotConsumption_Full_status_Enum>(GetField<int8_t>(VT_STATUS, 0));
  }
  /// Flag indicating if the slot is occupied.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool occupied() const {
    return GetField<uint8_t>(VT_OCCUPIED, 0) != 0;
  }
  /// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
  /// Example: /// Example: APRON1-230401001
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *consumer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSUMER);
  }
  /// The aircraft Model Design Series designation of the aircraft occupying this slot.
  /// Example: /// Example: C017A
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *occAircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCAIRCRAFTMDS);
  }
  /// The tail number of the aircraft occupying this slot.
  /// Example: /// Example: N702JG
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *occTailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCTAILNUMBER);
  }
  /// Array of call signs of the aircraft using this slot.
  /// Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *callSigns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CALLSIGNS);
  }
  /// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  /// Example: /// Example: AJM123456123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *missionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSIONID);
  }
  /// Number of aircraft using this slot for this time.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t numAircraft() const {
    return GetField<int32_t>(VT_NUMAIRCRAFT, 0);
  }
  /// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-01-01T01:01:03.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *occStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCSTARTTIME);
  }
  /// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
  /// Example: /// Example: C017A
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *resAircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESAIRCRAFTMDS);
  }
  /// The tail number of the aircraft this slot is reserved for.
  /// Example: /// Example: N702JG
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *resTailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESTAILNUMBER);
  }
  /// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 2
  const ::flatbuffers::String *resType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESTYPE);
  }
  /// The reason the slot reservation was made.
  /// Example: /// Example: Maintenance needed
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *resReason() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESREASON);
  }
  /// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
  /// Example: /// Example: AJM123456123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *resMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESMISSIONID);
  }
  /// The start of the slot window, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The end of the slot window, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *targetTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETTIME);
  }
  /// Unique identifier of the sortie arriving at the slot start time.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idArrSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDARRSORTIE);
  }
  /// Unique identifier of the sortie departing at the slot end time.
  /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idDepSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDDEPSORTIE);
  }
  /// Alternate identifier of the sortie arriving at the slot start time provided by the source.
  /// Example: /// Example: ALT-SORTIE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altArrSortieId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTARRSORTIEID);
  }
  /// Alternate identifier of the sortie departing at the slot end time provided by the source.
  /// Example: /// Example: ALT-SORTIE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altDepSortieId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTDEPSORTIEID);
  }
  /// Comments from the requester.
  /// Example: /// Example: Sorry for the late notice.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *reqComment() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQCOMMENT);
  }
  /// Comments from the approver.
  /// Example: /// Example: The request was denied due to inoperable fuel pumps.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *appComment() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPCOMMENT);
  }
  /// Short name of the organization requesting use of this slot.
  /// Example: /// Example: TACC
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *reqOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQORG);
  }
  /// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
  /// Example: /// Example: CB
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *reqInitials() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQINITIALS);
  }
  /// Short name of the organization approving the use of this slot.
  /// Example: /// Example: KCHS/BOPS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *appOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPORG);
  }
  /// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
  /// Example: /// Example: CB
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *appInitials() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPINITIALS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirfieldSlotConsumption_Full_dataMode_Enum dataMode() const {
    return static_cast<AirfieldSlotConsumption_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDAIRFIELDSLOT) &&
           verifier.VerifyString(idAirfieldSlot()) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<uint8_t>(verifier, VT_OCCUPIED, 1) &&
           VerifyOffset(verifier, VT_CONSUMER) &&
           verifier.VerifyString(consumer()) &&
           VerifyOffset(verifier, VT_OCCAIRCRAFTMDS) &&
           verifier.VerifyString(occAircraftMDS()) &&
           VerifyOffset(verifier, VT_OCCTAILNUMBER) &&
           verifier.VerifyString(occTailNumber()) &&
           VerifyOffset(verifier, VT_CALLSIGNS) &&
           verifier.VerifyVector(callSigns()) &&
           verifier.VerifyVectorOfStrings(callSigns()) &&
           VerifyOffset(verifier, VT_MISSIONID) &&
           verifier.VerifyString(missionId()) &&
           VerifyField<int32_t>(verifier, VT_NUMAIRCRAFT, 4) &&
           VerifyOffset(verifier, VT_OCCSTARTTIME) &&
           verifier.VerifyString(occStartTime()) &&
           VerifyOffset(verifier, VT_RESAIRCRAFTMDS) &&
           verifier.VerifyString(resAircraftMDS()) &&
           VerifyOffset(verifier, VT_RESTAILNUMBER) &&
           verifier.VerifyString(resTailNumber()) &&
           VerifyOffset(verifier, VT_RESTYPE) &&
           verifier.VerifyString(resType()) &&
           VerifyOffset(verifier, VT_RESREASON) &&
           verifier.VerifyString(resReason()) &&
           VerifyOffset(verifier, VT_RESMISSIONID) &&
           verifier.VerifyString(resMissionId()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_TARGETTIME) &&
           verifier.VerifyString(targetTime()) &&
           VerifyOffset(verifier, VT_IDARRSORTIE) &&
           verifier.VerifyString(idArrSortie()) &&
           VerifyOffset(verifier, VT_IDDEPSORTIE) &&
           verifier.VerifyString(idDepSortie()) &&
           VerifyOffset(verifier, VT_ALTARRSORTIEID) &&
           verifier.VerifyString(altArrSortieId()) &&
           VerifyOffset(verifier, VT_ALTDEPSORTIEID) &&
           verifier.VerifyString(altDepSortieId()) &&
           VerifyOffset(verifier, VT_REQCOMMENT) &&
           verifier.VerifyString(reqComment()) &&
           VerifyOffset(verifier, VT_APPCOMMENT) &&
           verifier.VerifyString(appComment()) &&
           VerifyOffset(verifier, VT_REQORG) &&
           verifier.VerifyString(reqOrg()) &&
           VerifyOffset(verifier, VT_REQINITIALS) &&
           verifier.VerifyString(reqInitials()) &&
           VerifyOffset(verifier, VT_APPORG) &&
           verifier.VerifyString(appOrg()) &&
           VerifyOffset(verifier, VT_APPINITIALS) &&
           verifier.VerifyString(appInitials()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AirfieldSlotConsumption_FullBuilder {
  typedef AirfieldSlotConsumption_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idAirfieldSlot(::flatbuffers::Offset<::flatbuffers::String> idAirfieldSlot) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_IDAIRFIELDSLOT, idAirfieldSlot);
  }
  void add_status(AirfieldSlotConsumption_Full_status_Enum status) {
    fbb_.AddElement<int8_t>(AirfieldSlotConsumption_Full::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_occupied(bool occupied) {
    fbb_.AddElement<uint8_t>(AirfieldSlotConsumption_Full::VT_OCCUPIED, static_cast<uint8_t>(occupied), 0);
  }
  void add_consumer(::flatbuffers::Offset<::flatbuffers::String> consumer) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_CONSUMER, consumer);
  }
  void add_occAircraftMDS(::flatbuffers::Offset<::flatbuffers::String> occAircraftMDS) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_OCCAIRCRAFTMDS, occAircraftMDS);
  }
  void add_occTailNumber(::flatbuffers::Offset<::flatbuffers::String> occTailNumber) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_OCCTAILNUMBER, occTailNumber);
  }
  void add_callSigns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> callSigns) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_CALLSIGNS, callSigns);
  }
  void add_missionId(::flatbuffers::Offset<::flatbuffers::String> missionId) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_MISSIONID, missionId);
  }
  void add_numAircraft(int32_t numAircraft) {
    fbb_.AddElement<int32_t>(AirfieldSlotConsumption_Full::VT_NUMAIRCRAFT, numAircraft, 0);
  }
  void add_occStartTime(::flatbuffers::Offset<::flatbuffers::String> occStartTime) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_OCCSTARTTIME, occStartTime);
  }
  void add_resAircraftMDS(::flatbuffers::Offset<::flatbuffers::String> resAircraftMDS) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_RESAIRCRAFTMDS, resAircraftMDS);
  }
  void add_resTailNumber(::flatbuffers::Offset<::flatbuffers::String> resTailNumber) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_RESTAILNUMBER, resTailNumber);
  }
  void add_resType(::flatbuffers::Offset<::flatbuffers::String> resType) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_RESTYPE, resType);
  }
  void add_resReason(::flatbuffers::Offset<::flatbuffers::String> resReason) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_RESREASON, resReason);
  }
  void add_resMissionId(::flatbuffers::Offset<::flatbuffers::String> resMissionId) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_RESMISSIONID, resMissionId);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ENDTIME, endTime);
  }
  void add_targetTime(::flatbuffers::Offset<::flatbuffers::String> targetTime) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_TARGETTIME, targetTime);
  }
  void add_idArrSortie(::flatbuffers::Offset<::flatbuffers::String> idArrSortie) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_IDARRSORTIE, idArrSortie);
  }
  void add_idDepSortie(::flatbuffers::Offset<::flatbuffers::String> idDepSortie) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_IDDEPSORTIE, idDepSortie);
  }
  void add_altArrSortieId(::flatbuffers::Offset<::flatbuffers::String> altArrSortieId) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ALTARRSORTIEID, altArrSortieId);
  }
  void add_altDepSortieId(::flatbuffers::Offset<::flatbuffers::String> altDepSortieId) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ALTDEPSORTIEID, altDepSortieId);
  }
  void add_reqComment(::flatbuffers::Offset<::flatbuffers::String> reqComment) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_REQCOMMENT, reqComment);
  }
  void add_appComment(::flatbuffers::Offset<::flatbuffers::String> appComment) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_APPCOMMENT, appComment);
  }
  void add_reqOrg(::flatbuffers::Offset<::flatbuffers::String> reqOrg) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_REQORG, reqOrg);
  }
  void add_reqInitials(::flatbuffers::Offset<::flatbuffers::String> reqInitials) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_REQINITIALS, reqInitials);
  }
  void add_appOrg(::flatbuffers::Offset<::flatbuffers::String> appOrg) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_APPORG, appOrg);
  }
  void add_appInitials(::flatbuffers::Offset<::flatbuffers::String> appInitials) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_APPINITIALS, appInitials);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirfieldSlotConsumption_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AirfieldSlotConsumption_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirfieldSlotConsumption_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AirfieldSlotConsumption_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirfieldSlotConsumption_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirfieldSlotConsumption_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirfieldSlotConsumption_Full> CreateAirfieldSlotConsumption_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAirfieldSlot = 0,
    AirfieldSlotConsumption_Full_status_Enum status = AirfieldSlotConsumption_Full_status_Enum_REQUESTED,
    bool occupied = false,
    ::flatbuffers::Offset<::flatbuffers::String> consumer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> occAircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> occTailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> callSigns = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missionId = 0,
    int32_t numAircraft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> occStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resAircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resTailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resReason = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idArrSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idDepSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altArrSortieId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altDepSortieId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reqComment = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appComment = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reqOrg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reqInitials = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appOrg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> appInitials = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AirfieldSlotConsumption_Full_dataMode_Enum dataMode = AirfieldSlotConsumption_Full_dataMode_Enum_REAL) {
  AirfieldSlotConsumption_FullBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_appInitials(appInitials);
  builder_.add_appOrg(appOrg);
  builder_.add_reqInitials(reqInitials);
  builder_.add_reqOrg(reqOrg);
  builder_.add_appComment(appComment);
  builder_.add_reqComment(reqComment);
  builder_.add_altDepSortieId(altDepSortieId);
  builder_.add_altArrSortieId(altArrSortieId);
  builder_.add_idDepSortie(idDepSortie);
  builder_.add_idArrSortie(idArrSortie);
  builder_.add_targetTime(targetTime);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_resMissionId(resMissionId);
  builder_.add_resReason(resReason);
  builder_.add_resType(resType);
  builder_.add_resTailNumber(resTailNumber);
  builder_.add_resAircraftMDS(resAircraftMDS);
  builder_.add_occStartTime(occStartTime);
  builder_.add_numAircraft(numAircraft);
  builder_.add_missionId(missionId);
  builder_.add_callSigns(callSigns);
  builder_.add_occTailNumber(occTailNumber);
  builder_.add_occAircraftMDS(occAircraftMDS);
  builder_.add_consumer(consumer);
  builder_.add_idAirfieldSlot(idAirfieldSlot);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_occupied(occupied);
  builder_.add_status(status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirfieldSlotConsumption_Full> CreateAirfieldSlotConsumption_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idAirfieldSlot = nullptr,
    AirfieldSlotConsumption_Full_status_Enum status = AirfieldSlotConsumption_Full_status_Enum_REQUESTED,
    bool occupied = false,
    const char *consumer = nullptr,
    const char *occAircraftMDS = nullptr,
    const char *occTailNumber = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *callSigns = nullptr,
    const char *missionId = nullptr,
    int32_t numAircraft = 0,
    const char *occStartTime = nullptr,
    const char *resAircraftMDS = nullptr,
    const char *resTailNumber = nullptr,
    const char *resType = nullptr,
    const char *resReason = nullptr,
    const char *resMissionId = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *targetTime = nullptr,
    const char *idArrSortie = nullptr,
    const char *idDepSortie = nullptr,
    const char *altArrSortieId = nullptr,
    const char *altDepSortieId = nullptr,
    const char *reqComment = nullptr,
    const char *appComment = nullptr,
    const char *reqOrg = nullptr,
    const char *reqInitials = nullptr,
    const char *appOrg = nullptr,
    const char *appInitials = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AirfieldSlotConsumption_Full_dataMode_Enum dataMode = AirfieldSlotConsumption_Full_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idAirfieldSlot__ = idAirfieldSlot ? _fbb.CreateString(idAirfieldSlot) : 0;
  auto consumer__ = consumer ? _fbb.CreateString(consumer) : 0;
  auto occAircraftMDS__ = occAircraftMDS ? _fbb.CreateString(occAircraftMDS) : 0;
  auto occTailNumber__ = occTailNumber ? _fbb.CreateString(occTailNumber) : 0;
  auto callSigns__ = callSigns ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*callSigns) : 0;
  auto missionId__ = missionId ? _fbb.CreateString(missionId) : 0;
  auto occStartTime__ = occStartTime ? _fbb.CreateString(occStartTime) : 0;
  auto resAircraftMDS__ = resAircraftMDS ? _fbb.CreateString(resAircraftMDS) : 0;
  auto resTailNumber__ = resTailNumber ? _fbb.CreateString(resTailNumber) : 0;
  auto resType__ = resType ? _fbb.CreateString(resType) : 0;
  auto resReason__ = resReason ? _fbb.CreateString(resReason) : 0;
  auto resMissionId__ = resMissionId ? _fbb.CreateString(resMissionId) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto targetTime__ = targetTime ? _fbb.CreateString(targetTime) : 0;
  auto idArrSortie__ = idArrSortie ? _fbb.CreateString(idArrSortie) : 0;
  auto idDepSortie__ = idDepSortie ? _fbb.CreateString(idDepSortie) : 0;
  auto altArrSortieId__ = altArrSortieId ? _fbb.CreateString(altArrSortieId) : 0;
  auto altDepSortieId__ = altDepSortieId ? _fbb.CreateString(altDepSortieId) : 0;
  auto reqComment__ = reqComment ? _fbb.CreateString(reqComment) : 0;
  auto appComment__ = appComment ? _fbb.CreateString(appComment) : 0;
  auto reqOrg__ = reqOrg ? _fbb.CreateString(reqOrg) : 0;
  auto reqInitials__ = reqInitials ? _fbb.CreateString(reqInitials) : 0;
  auto appOrg__ = appOrg ? _fbb.CreateString(appOrg) : 0;
  auto appInitials__ = appInitials ? _fbb.CreateString(appInitials) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirfieldSlotConsumption_Full(
      _fbb,
      id__,
      classificationMarking__,
      idAirfieldSlot__,
      status,
      occupied,
      consumer__,
      occAircraftMDS__,
      occTailNumber__,
      callSigns__,
      missionId__,
      numAircraft,
      occStartTime__,
      resAircraftMDS__,
      resTailNumber__,
      resType__,
      resReason__,
      resMissionId__,
      startTime__,
      endTime__,
      targetTime__,
      idArrSortie__,
      idDepSortie__,
      altArrSortieId__,
      altDepSortieId__,
      reqComment__,
      appComment__,
      reqOrg__,
      reqInitials__,
      appOrg__,
      appInitials__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AirfieldSlotConsumption_Full *GetAirfieldSlotConsumption_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AirfieldSlotConsumption_Full>(buf);
}

inline const AirfieldSlotConsumption_Full *GetSizePrefixedAirfieldSlotConsumption_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirfieldSlotConsumption_Full>(buf);
}

inline const char *AirfieldSlotConsumption_FullIdentifier() {
  return "AIRF";
}

inline bool AirfieldSlotConsumption_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirfieldSlotConsumption_FullIdentifier());
}

inline bool SizePrefixedAirfieldSlotConsumption_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirfieldSlotConsumption_FullIdentifier(), true);
}

inline bool VerifyAirfieldSlotConsumption_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirfieldSlotConsumption_Full>(AirfieldSlotConsumption_FullIdentifier());
}

inline bool VerifySizePrefixedAirfieldSlotConsumption_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirfieldSlotConsumption_Full>(AirfieldSlotConsumption_FullIdentifier());
}

inline void FinishAirfieldSlotConsumption_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirfieldSlotConsumption_Full> root) {
  fbb.Finish(root, AirfieldSlotConsumption_FullIdentifier());
}

inline void FinishSizePrefixedAirfieldSlotConsumption_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirfieldSlotConsumption_Full> root) {
  fbb.FinishSizePrefixed(root, AirfieldSlotConsumption_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
