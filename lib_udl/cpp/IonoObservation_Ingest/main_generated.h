// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservation_Ingest;
struct IonoObservation_IngestBuilder;

enum IonoObservation_Ingest_transmitSensorType_Enum : int8_t {
  /// No description available.
  IonoObservation_Ingest_transmitSensorType_Enum_MOBILE = 0,
  /// No description available.
  IonoObservation_Ingest_transmitSensorType_Enum_STATIC = 1,
  IonoObservation_Ingest_transmitSensorType_Enum_MIN = IonoObservation_Ingest_transmitSensorType_Enum_MOBILE,
  IonoObservation_Ingest_transmitSensorType_Enum_MAX = IonoObservation_Ingest_transmitSensorType_Enum_STATIC
};

inline const IonoObservation_Ingest_transmitSensorType_Enum (&EnumValuesIonoObservation_Ingest_transmitSensorType_Enum())[2] {
  static const IonoObservation_Ingest_transmitSensorType_Enum values[] = {
    IonoObservation_Ingest_transmitSensorType_Enum_MOBILE,
    IonoObservation_Ingest_transmitSensorType_Enum_STATIC
  };
  return values;
}

inline const char * const *EnumNamesIonoObservation_Ingest_transmitSensorType_Enum() {
  static const char * const names[3] = {
    "MOBILE",
    "STATIC",
    nullptr
  };
  return names;
}

inline const char *EnumNameIonoObservation_Ingest_transmitSensorType_Enum(IonoObservation_Ingest_transmitSensorType_Enum e) {
  if (::flatbuffers::IsOutRange(e, IonoObservation_Ingest_transmitSensorType_Enum_MOBILE, IonoObservation_Ingest_transmitSensorType_Enum_STATIC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIonoObservation_Ingest_transmitSensorType_Enum()[index];
}

enum IonoObservation_Ingest_receiveSensorType_Enum : int8_t {
  /// No description available.
  IonoObservation_Ingest_receiveSensorType_Enum_MOBILE = 0,
  /// No description available.
  IonoObservation_Ingest_receiveSensorType_Enum_STATIC = 1,
  IonoObservation_Ingest_receiveSensorType_Enum_MIN = IonoObservation_Ingest_receiveSensorType_Enum_MOBILE,
  IonoObservation_Ingest_receiveSensorType_Enum_MAX = IonoObservation_Ingest_receiveSensorType_Enum_STATIC
};

inline const IonoObservation_Ingest_receiveSensorType_Enum (&EnumValuesIonoObservation_Ingest_receiveSensorType_Enum())[2] {
  static const IonoObservation_Ingest_receiveSensorType_Enum values[] = {
    IonoObservation_Ingest_receiveSensorType_Enum_MOBILE,
    IonoObservation_Ingest_receiveSensorType_Enum_STATIC
  };
  return values;
}

inline const char * const *EnumNamesIonoObservation_Ingest_receiveSensorType_Enum() {
  static const char * const names[3] = {
    "MOBILE",
    "STATIC",
    nullptr
  };
  return names;
}

inline const char *EnumNameIonoObservation_Ingest_receiveSensorType_Enum(IonoObservation_Ingest_receiveSensorType_Enum e) {
  if (::flatbuffers::IsOutRange(e, IonoObservation_Ingest_receiveSensorType_Enum_MOBILE, IonoObservation_Ingest_receiveSensorType_Enum_STATIC)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIonoObservation_Ingest_receiveSensorType_Enum()[index];
}

enum IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum : int8_t {
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000 = 0,
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_ECR_ECEF = 1,
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_TEME = 2,
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GCRF = 3,
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_WGS84__GEODETIC_LAT__LONG__ALT_ = 4,
  /// No description available.
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GEOCENTRIC__LAT__LONG__RADII_ = 5,
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_MIN = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000,
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_MAX = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GEOCENTRIC__LAT__LONG__RADII_
};

inline const IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum (&EnumValuesIonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum())[6] {
  static const IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum values[] = {
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_ECR_ECEF,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_TEME,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GCRF,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_WGS84__GEODETIC_LAT__LONG__ALT_,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GEOCENTRIC__LAT__LONG__RADII_
  };
  return values;
}

inline const char * const *EnumNamesIonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum() {
  static const char * const names[7] = {
    "J2000",
    "ECR_ECEF",
    "TEME",
    "GCRF",
    "WGS84__GEODETIC_LAT__LONG__ALT_",
    "GEOCENTRIC__LAT__LONG__RADII_",
    nullptr
  };
  return names;
}

inline const char *EnumNameIonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum(IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum e) {
  if (::flatbuffers::IsOutRange(e, IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000, IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_GEOCENTRIC__LAT__LONG__RADII_)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum()[index];
}

enum IonoObservation_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  IonoObservation_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  IonoObservation_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  IonoObservation_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  IonoObservation_Ingest_dataMode_Enum_EXERCISE = 3,
  IonoObservation_Ingest_dataMode_Enum_MIN = IonoObservation_Ingest_dataMode_Enum_REAL,
  IonoObservation_Ingest_dataMode_Enum_MAX = IonoObservation_Ingest_dataMode_Enum_EXERCISE
};

inline const IonoObservation_Ingest_dataMode_Enum (&EnumValuesIonoObservation_Ingest_dataMode_Enum())[4] {
  static const IonoObservation_Ingest_dataMode_Enum values[] = {
    IonoObservation_Ingest_dataMode_Enum_REAL,
    IonoObservation_Ingest_dataMode_Enum_TEST,
    IonoObservation_Ingest_dataMode_Enum_SIMULATED,
    IonoObservation_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesIonoObservation_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameIonoObservation_Ingest_dataMode_Enum(IonoObservation_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, IonoObservation_Ingest_dataMode_Enum_REAL, IonoObservation_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIonoObservation_Ingest_dataMode_Enum()[index];
}

/// /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
struct IonoObservation_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservation_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDSENSOR = 8,
    VT_ORIGSENSORID = 10,
    VT_SYSTEM = 12,
    VT_NEPROFILENAME = 14,
    VT_NEPROFILEVERSION = 16,
    VT_SCALERINFO = 18,
    VT_DENSITYPROFILE = 20,
    VT_STATIONID = 22,
    VT_STARTTIMEUTC = 24,
    VT_SYSTEMINFO = 26,
    VT_SYSTEMNOTES = 28,
    VT_TRANSMITCOORDINATES = 30,
    VT_TRANSMITSENSORTYPE = 32,
    VT_RECEIVECOORDINATES = 34,
    VT_RECEIVESENSORTYPE = 36,
    VT_ANTENNAELEMENTPOSITION = 38,
    VT_ANTENNAELEMENTPOSITIONCOORDINATESYSTEM = 40,
    VT_POWER = 42,
    VT_RANGE = 44,
    VT_FREQUENCY = 46,
    VT_POLARIZATION = 48,
    VT_AZIMUTH = 50,
    VT_ELEVATION = 52,
    VT_RESTRICTEDFREQUENCY = 54,
    VT_RESTRICTEDFREQUENCYNOTES = 56,
    VT_DOPPLER = 58,
    VT_TIME = 60,
    VT_STOKES = 62,
    VT_AMPLITUDE = 64,
    VT_PHASE = 66,
    VT_FOF2 = 68,
    VT_FOF1 = 70,
    VT_FXF2 = 72,
    VT_FXF1 = 74,
    VT_MD = 76,
    VT_LUF = 78,
    VT_MUFD = 80,
    VT_FMIN = 82,
    VT_FOES = 84,
    VT_FMINF = 86,
    VT_FMINE = 88,
    VT_FOE = 90,
    VT_FXE = 92,
    VT_FXI = 94,
    VT_HPRIMEF = 96,
    VT_HPRIMEF2 = 98,
    VT_HPRIMEF1 = 100,
    VT_HPRIMEE = 102,
    VT_HPRIMEES = 104,
    VT_ZME = 106,
    VT_YE = 108,
    VT_QF = 110,
    VT_QE = 112,
    VT_DOWNF = 114,
    VT_DOWNE = 116,
    VT_DOWNES = 118,
    VT_FF = 120,
    VT_FE = 122,
    VT_D = 124,
    VT_FMUF = 126,
    VT_HPRIMEFMUF = 128,
    VT_DELTAFOF2 = 130,
    VT_FOEP = 132,
    VT_FHPRIMEF = 134,
    VT_FHPRIMEF2 = 136,
    VT_FOF1P = 138,
    VT_FOF2P = 140,
    VT_HMF2 = 142,
    VT_HMF1 = 144,
    VT_HME = 146,
    VT_ZHALFNM = 148,
    VT_FMINES = 150,
    VT_YF2 = 152,
    VT_YF1 = 154,
    VT_TEC = 156,
    VT_SCALEHEIGHTF2PEAK = 158,
    VT_B0 = 160,
    VT_B1 = 162,
    VT_D1 = 164,
    VT_FOEA = 166,
    VT_HPRIMEEA = 168,
    VT_FOP = 170,
    VT_HPRIMEP = 172,
    VT_FBES = 174,
    VT_TYPEES = 176,
    VT_CHARATTS = 178,
    VT_HEIGHT = 180,
    VT_PLASMAFREQUENCY = 182,
    VT_PLASMAFREQUENCYUNCERTAINTY = 184,
    VT_ELECTRONDENSITY = 186,
    VT_ELECTRONDENSITYUNCERTAINTY = 188,
    VT_ARTISTFLAGS = 190,
    VT_TRACEGENERIC = 192,
    VT_TIDPHASESPEEDS = 194,
    VT_TIDAZIMUTH = 196,
    VT_TIDPERIODS = 198,
    VT_DATUM = 200,
    VT_PLATFORMNAME = 202,
    VT_CREATEDAT = 204,
    VT_CREATEDBY = 206,
    VT_UPDATEDAT = 208,
    VT_UPDATEDBY = 210,
    VT_SOURCE = 212,
    VT_ORIGIN = 214,
    VT_DATAMODE = 216,
    VT_ORIGNETWORK = 218
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: IONOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Ionosonde hardware type or data collection type together with possible additional descriptors.
  /// Example: /// Example: Example hardware type
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *system() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSTEM);
  }
  /// Name of the algorithm used for the electron density profile.
  /// Example: /// Example: NH
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *neProfileName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NEPROFILENAME);
  }
  /// Version of the algorithm used for the electron density profile.
  /// Example: /// Example: 4.32
  /// Constraints: No constraints specified.
  double neProfileVersion() const {
    return GetField<double>(VT_NEPROFILEVERSION, 0.0);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *scalerInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCALERINFO);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *densityProfile() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DENSITYPROFILE);
  }
  /// URSI code for station or stations producing the ionosonde.
  /// Example: /// Example: STATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *stationId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATIONID);
  }
  /// Sounding Start time in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTimeUTC() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIMEUTC);
  }
  /// Names of settings.
  /// Example: /// Example: Example settings
  /// Constraints: Minimum length = 1, Maximum length = 1024
  const ::flatbuffers::String *systemInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSTEMINFO);
  }
  /// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *systemNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSTEMNOTES);
  }
  /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *transmitCoordinates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRANSMITCOORDINATES);
  }
  /// Enums: Mobile, Static.
  /// Example: /// Example: Mobile
  /// Constraints: Minimum length = 0, Maximum length = 16
  IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType() const {
    return static_cast<IonoObservation_Ingest_transmitSensorType_Enum>(GetField<int8_t>(VT_TRANSMITSENSORTYPE, 0));
  }
  /// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
  /// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *receiveCoordinates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RECEIVECOORDINATES);
  }
  /// Enums: Mobile, Static.
  /// Example: /// Example: Mobile
  /// Constraints: Minimum length = 0, Maximum length = 16
  IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType() const {
    return static_cast<IonoObservation_Ingest_receiveSensorType_Enum>(GetField<int8_t>(VT_RECEIVESENSORTYPE, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *antennaElementPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANTENNAELEMENTPOSITION);
  }
  /// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 32
  IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem() const {
    return static_cast<IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum>(GetField<int8_t>(VT_ANTENNAELEMENTPOSITIONCOORDINATESYSTEM, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *power() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POWER);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *range() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RANGE);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *frequency() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREQUENCY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *polarization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POLARIZATION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *azimuth() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AZIMUTH);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *elevation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ELEVATION);
  }
  /// Array of restricted frequencies.
  /// Example: /// Example: [12.5, 34.5, 45.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *restrictedFrequency() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RESTRICTEDFREQUENCY);
  }
  /// Notes for the restrictedFrequency data.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *restrictedFrequencyNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESTRICTEDFREQUENCYNOTES);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *doppler() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DOPPLER);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stokes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOKES);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *amplitude() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMPLITUDE);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *phase() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PHASE);
  }
  /// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
  /// Example: /// Example: 6.75
  /// Constraints: No constraints specified.
  double foF2() const {
    return GetField<double>(VT_FOF2, 0.0);
  }
  /// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
  /// Example: /// Example: 8.2
  /// Constraints: No constraints specified.
  double foF1() const {
    return GetField<double>(VT_FOF1, 0.0);
  }
  /// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
  /// Example: /// Example: 4.5
  /// Constraints: No constraints specified.
  double fxF2() const {
    return GetField<double>(VT_FXF2, 0.0);
  }
  /// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
  /// Example: /// Example: 4.2
  /// Constraints: No constraints specified.
  double fxF1() const {
    return GetField<double>(VT_FXF1, 0.0);
  }
  /// MUF(D)/foF2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double md() const {
    return GetField<double>(VT_MD, 0.0);
  }
  /// Lowest usable frequency.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double luf() const {
    return GetField<double>(VT_LUF, 0.0);
  }
  /// Maximum Usable Frequency for ground distance D in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double mufd() const {
    return GetField<double>(VT_MUFD, 0.0);
  }
  /// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
  /// Example: /// Example: 2.025
  /// Constraints: No constraints specified.
  double fmin() const {
    return GetField<double>(VT_FMIN, 0.0);
  }
  /// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
  /// Example: /// Example: 2.35
  /// Constraints: No constraints specified.
  double foEs() const {
    return GetField<double>(VT_FOES, 0.0);
  }
  /// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
  /// Example: /// Example: 2.7
  /// Constraints: No constraints specified.
  double fminF() const {
    return GetField<double>(VT_FMINF, 0.0);
  }
  /// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
  /// Example: /// Example: 2.025
  /// Constraints: No constraints specified.
  double fminE() const {
    return GetField<double>(VT_FMINE, 0.0);
  }
  /// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double foE() const {
    return GetField<double>(VT_FOE, 0.0);
  }
  /// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double fxE() const {
    return GetField<double>(VT_FXE, 0.0);
  }
  /// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
  /// Example: /// Example: 7.525
  /// Constraints: No constraints specified.
  double fxI() const {
    return GetField<double>(VT_FXI, 0.0);
  }
  /// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
  /// Example: /// Example: 238.5
  /// Constraints: No constraints specified.
  double hprimeF() const {
    return GetField<double>(VT_HPRIMEF, 0.0);
  }
  /// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
  /// Example: /// Example: 238.5
  /// Constraints: No constraints specified.
  double hprimeF2() const {
    return GetField<double>(VT_HPRIMEF2, 0.0);
  }
  /// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
  /// Example: /// Example: 230.1
  /// Constraints: No constraints specified.
  double hprimeF1() const {
    return GetField<double>(VT_HPRIMEF1, 0.0);
  }
  /// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
  /// Example: /// Example: 98.47
  /// Constraints: No constraints specified.
  double hprimeE() const {
    return GetField<double>(VT_HPRIMEE, 0.0);
  }
  /// The minimum height of the trace used to give foEs in km. URSI ID: 34.
  /// Example: /// Example: 95
  /// Constraints: No constraints specified.
  double hprimeEs() const {
    return GetField<double>(VT_HPRIMEES, 0.0);
  }
  /// Peak height of E-layer in km. URSI ID: 90.
  /// Example: /// Example: 91.744
  /// Constraints: No constraints specified.
  double zmE() const {
    return GetField<double>(VT_ZME, 0.0);
  }
  /// Parabolic E layer semi-thickness in km. URSI ID: 83.
  /// Example: /// Example: 1.722
  /// Constraints: No constraints specified.
  double yE() const {
    return GetField<double>(VT_YE, 0.0);
  }
  /// Average range spread of F layer in km. URSI ID: 84.
  /// Example: /// Example: 1.83
  /// Constraints: No constraints specified.
  double qf() const {
    return GetField<double>(VT_QF, 0.0);
  }
  /// Average range spread of E layer in km. URSI ID: 85.
  /// Example: /// Example: 0.95
  /// Constraints: No constraints specified.
  double qe() const {
    return GetField<double>(VT_QE, 0.0);
  }
  /// Lowering of F trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double downF() const {
    return GetField<double>(VT_DOWNF, 0.0);
  }
  /// Lowering of E trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double downE() const {
    return GetField<double>(VT_DOWNE, 0.0);
  }
  /// Lowering of Es trace to the leading edge in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double downEs() const {
    return GetField<double>(VT_DOWNES, 0.0);
  }
  /// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
  /// Example: /// Example: 0.075
  /// Constraints: No constraints specified.
  double ff() const {
    return GetField<double>(VT_FF, 0.0);
  }
  /// Frequency spread beyond foE in MHz. URSI ID: 87.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double fe() const {
    return GetField<double>(VT_FE, 0.0);
  }
  /// Distance for MUF calculation in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double d() const {
    return GetField<double>(VT_D, 0.0);
  }
  /// MUF/OblFactor in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double fmuf() const {
    return GetField<double>(VT_FMUF, 0.0);
  }
  /// Virtual height at MUF/OblFactor frequency in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double hprimefMUF() const {
    return GetField<double>(VT_HPRIMEFMUF, 0.0);
  }
  /// Adjustment to the scaled foF2 during profile inversion in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double deltafoF2() const {
    return GetField<double>(VT_DELTAFOF2, 0.0);
  }
  /// Predicted value of foE in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double foEp() const {
    return GetField<double>(VT_FOEP, 0.0);
  }
  /// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  double fhprimeF() const {
    return GetField<double>(VT_FHPRIMEF, 0.0);
  }
  /// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
  /// Example: /// Example: 2.5
  /// Constraints: No constraints specified.
  double fhprimeF2() const {
    return GetField<double>(VT_FHPRIMEF2, 0.0);
  }
  /// Predicted value of foF1 in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double foF1p() const {
    return GetField<double>(VT_FOF1P, 0.0);
  }
  /// Predicted value of foF2 in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double foF2p() const {
    return GetField<double>(VT_FOF2P, 0.0);
  }
  /// True height of the F2 peak in km. URSI ID: AE.
  /// Example: /// Example: 240.498
  /// Constraints: No constraints specified.
  double hmF2() const {
    return GetField<double>(VT_HMF2, 0.0);
  }
  /// True height of the F1 peak in km. URSI ID: BE.
  /// Example: /// Example: 230.128
  /// Constraints: No constraints specified.
  double hmF1() const {
    return GetField<double>(VT_HMF1, 0.0);
  }
  /// True height of the E peak in km. URSI ID: CE.
  /// Example: /// Example: 215.643
  /// Constraints: No constraints specified.
  double hmE() const {
    return GetField<double>(VT_HME, 0.0);
  }
  /// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
  /// Example: /// Example: 240.498
  /// Constraints: No constraints specified.
  double zhalfNm() const {
    return GetField<double>(VT_ZHALFNM, 0.0);
  }
  /// Minimum frequency of Es layer in MHz.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double fminEs() const {
    return GetField<double>(VT_FMINES, 0.0);
  }
  /// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
  /// Example: /// Example: 62.178
  /// Constraints: No constraints specified.
  double yF2() const {
    return GetField<double>(VT_YF2, 0.0);
  }
  /// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
  /// Example: /// Example: 55.645
  /// Constraints: No constraints specified.
  double yF1() const {
    return GetField<double>(VT_YF1, 0.0);
  }
  /// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
  /// Example: /// Example: 24.673
  /// Constraints: No constraints specified.
  double tec() const {
    return GetField<double>(VT_TEC, 0.0);
  }
  /// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
  /// Example: /// Example: 35.613
  /// Constraints: No constraints specified.
  double scaleHeightF2Peak() const {
    return GetField<double>(VT_SCALEHEIGHTF2PEAK, 0.0);
  }
  /// IRI thickness parameter in km. URSI ID: D0.
  /// Example: /// Example: 68.07
  /// Constraints: No constraints specified.
  double b0() const {
    return GetField<double>(VT_B0, 0.0);
  }
  /// IRI profile shape parameter. URSI ID: D1.
  /// Example: /// Example: 1.87
  /// Constraints: No constraints specified.
  double b1() const {
    return GetField<double>(VT_B1, 0.0);
  }
  /// IRI profile shape parameter, F1 layer. URSI ID: D2.
  /// Example: /// Example: 1.94
  /// Constraints: No constraints specified.
  double d1() const {
    return GetField<double>(VT_D1, 0.0);
  }
  /// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
  /// Example: /// Example: 45.764
  /// Constraints: No constraints specified.
  double foEa() const {
    return GetField<double>(VT_FOEA, 0.0);
  }
  /// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
  /// Example: /// Example: 102.6
  /// Constraints: No constraints specified.
  double hprimeEa() const {
    return GetField<double>(VT_HPRIMEEA, 0.0);
  }
  /// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
  /// Example: /// Example: 87.21
  /// Constraints: No constraints specified.
  double foP() const {
    return GetField<double>(VT_FOP, 0.0);
  }
  /// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
  /// Example: /// Example: 89.45
  /// Constraints: No constraints specified.
  double hprimeP() const {
    return GetField<double>(VT_HPRIMEP, 0.0);
  }
  /// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
  /// Example: /// Example: 34.867
  /// Constraints: No constraints specified.
  double fbEs() const {
    return GetField<double>(VT_FBES, 0.0);
  }
  /// Characterization of the shape of Es trace. URSI ID: 36.
  /// Example: /// Example: Auroral
  /// Constraints: Minimum length = 0, Maximum length = 25
  const ::flatbuffers::String *typeEs() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPEES);
  }
  /// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
  /// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *charAtts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CHARATTS);
  }
  /// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *height() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HEIGHT);
  }
  /// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *plasmaFrequency() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PLASMAFREQUENCY);
  }
  /// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
  /// Example: /// Example: [0.8, 0.2, 0.5]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *plasmaFrequencyUncertainty() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PLASMAFREQUENCYUNCERTAINTY);
  }
  /// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *electronDensity() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELECTRONDENSITY);
  }
  /// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
  /// Example: /// Example: [0.8, 0.2, 0.5]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *electronDensityUncertainty() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELECTRONDENSITYUNCERTAINTY);
  }
  /// Array of Legacy Artist Flags.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *artistFlags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ARTISTFLAGS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *traceGeneric() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRACEGENERIC);
  }
  /// Array of speed in m/s at which the disturbance travels through the ionosphere.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tidPhaseSpeeds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TIDPHASESPEEDS);
  }
  /// Array of degrees clockwise from true North of the TID.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tidAzimuth() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TIDAZIMUTH);
  }
  /// Array of 1/frequency of the TID wave.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tidPeriods() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TIDPERIODS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *datum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATUM);
  }
  /// Equipment location.
  /// Example: /// Example: Millstone Hill
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *platformName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLATFORMNAME);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  IonoObservation_Ingest_dataMode_Enum dataMode() const {
    return static_cast<IonoObservation_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_SYSTEM) &&
           verifier.VerifyString(system()) &&
           VerifyOffset(verifier, VT_NEPROFILENAME) &&
           verifier.VerifyString(neProfileName()) &&
           VerifyField<double>(verifier, VT_NEPROFILEVERSION, 8) &&
           VerifyOffset(verifier, VT_SCALERINFO) &&
           verifier.VerifyString(scalerInfo()) &&
           VerifyOffset(verifier, VT_DENSITYPROFILE) &&
           verifier.VerifyString(densityProfile()) &&
           VerifyOffset(verifier, VT_STATIONID) &&
           verifier.VerifyString(stationId()) &&
           VerifyOffset(verifier, VT_STARTTIMEUTC) &&
           verifier.VerifyString(startTimeUTC()) &&
           VerifyOffset(verifier, VT_SYSTEMINFO) &&
           verifier.VerifyString(systemInfo()) &&
           VerifyOffset(verifier, VT_SYSTEMNOTES) &&
           verifier.VerifyString(systemNotes()) &&
           VerifyOffset(verifier, VT_TRANSMITCOORDINATES) &&
           verifier.VerifyVector(transmitCoordinates()) &&
           verifier.VerifyVectorOfStrings(transmitCoordinates()) &&
           VerifyField<int8_t>(verifier, VT_TRANSMITSENSORTYPE, 1) &&
           VerifyOffset(verifier, VT_RECEIVECOORDINATES) &&
           verifier.VerifyVector(receiveCoordinates()) &&
           verifier.VerifyVectorOfStrings(receiveCoordinates()) &&
           VerifyField<int8_t>(verifier, VT_RECEIVESENSORTYPE, 1) &&
           VerifyOffset(verifier, VT_ANTENNAELEMENTPOSITION) &&
           verifier.VerifyString(antennaElementPosition()) &&
           VerifyField<int8_t>(verifier, VT_ANTENNAELEMENTPOSITIONCOORDINATESYSTEM, 1) &&
           VerifyOffset(verifier, VT_POWER) &&
           verifier.VerifyString(power()) &&
           VerifyOffset(verifier, VT_RANGE) &&
           verifier.VerifyString(range()) &&
           VerifyOffset(verifier, VT_FREQUENCY) &&
           verifier.VerifyString(frequency()) &&
           VerifyOffset(verifier, VT_POLARIZATION) &&
           verifier.VerifyString(polarization()) &&
           VerifyOffset(verifier, VT_AZIMUTH) &&
           verifier.VerifyString(azimuth()) &&
           VerifyOffset(verifier, VT_ELEVATION) &&
           verifier.VerifyString(elevation()) &&
           VerifyOffset(verifier, VT_RESTRICTEDFREQUENCY) &&
           verifier.VerifyVector(restrictedFrequency()) &&
           verifier.VerifyVectorOfStrings(restrictedFrequency()) &&
           VerifyOffset(verifier, VT_RESTRICTEDFREQUENCYNOTES) &&
           verifier.VerifyString(restrictedFrequencyNotes()) &&
           VerifyOffset(verifier, VT_DOPPLER) &&
           verifier.VerifyString(doppler()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_STOKES) &&
           verifier.VerifyString(stokes()) &&
           VerifyOffset(verifier, VT_AMPLITUDE) &&
           verifier.VerifyString(amplitude()) &&
           VerifyOffset(verifier, VT_PHASE) &&
           verifier.VerifyString(phase()) &&
           VerifyField<double>(verifier, VT_FOF2, 8) &&
           VerifyField<double>(verifier, VT_FOF1, 8) &&
           VerifyField<double>(verifier, VT_FXF2, 8) &&
           VerifyField<double>(verifier, VT_FXF1, 8) &&
           VerifyField<double>(verifier, VT_MD, 8) &&
           VerifyField<double>(verifier, VT_LUF, 8) &&
           VerifyField<double>(verifier, VT_MUFD, 8) &&
           VerifyField<double>(verifier, VT_FMIN, 8) &&
           VerifyField<double>(verifier, VT_FOES, 8) &&
           VerifyField<double>(verifier, VT_FMINF, 8) &&
           VerifyField<double>(verifier, VT_FMINE, 8) &&
           VerifyField<double>(verifier, VT_FOE, 8) &&
           VerifyField<double>(verifier, VT_FXE, 8) &&
           VerifyField<double>(verifier, VT_FXI, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEF, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEF2, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEF1, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEE, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEES, 8) &&
           VerifyField<double>(verifier, VT_ZME, 8) &&
           VerifyField<double>(verifier, VT_YE, 8) &&
           VerifyField<double>(verifier, VT_QF, 8) &&
           VerifyField<double>(verifier, VT_QE, 8) &&
           VerifyField<double>(verifier, VT_DOWNF, 8) &&
           VerifyField<double>(verifier, VT_DOWNE, 8) &&
           VerifyField<double>(verifier, VT_DOWNES, 8) &&
           VerifyField<double>(verifier, VT_FF, 8) &&
           VerifyField<double>(verifier, VT_FE, 8) &&
           VerifyField<double>(verifier, VT_D, 8) &&
           VerifyField<double>(verifier, VT_FMUF, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEFMUF, 8) &&
           VerifyField<double>(verifier, VT_DELTAFOF2, 8) &&
           VerifyField<double>(verifier, VT_FOEP, 8) &&
           VerifyField<double>(verifier, VT_FHPRIMEF, 8) &&
           VerifyField<double>(verifier, VT_FHPRIMEF2, 8) &&
           VerifyField<double>(verifier, VT_FOF1P, 8) &&
           VerifyField<double>(verifier, VT_FOF2P, 8) &&
           VerifyField<double>(verifier, VT_HMF2, 8) &&
           VerifyField<double>(verifier, VT_HMF1, 8) &&
           VerifyField<double>(verifier, VT_HME, 8) &&
           VerifyField<double>(verifier, VT_ZHALFNM, 8) &&
           VerifyField<double>(verifier, VT_FMINES, 8) &&
           VerifyField<double>(verifier, VT_YF2, 8) &&
           VerifyField<double>(verifier, VT_YF1, 8) &&
           VerifyField<double>(verifier, VT_TEC, 8) &&
           VerifyField<double>(verifier, VT_SCALEHEIGHTF2PEAK, 8) &&
           VerifyField<double>(verifier, VT_B0, 8) &&
           VerifyField<double>(verifier, VT_B1, 8) &&
           VerifyField<double>(verifier, VT_D1, 8) &&
           VerifyField<double>(verifier, VT_FOEA, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEEA, 8) &&
           VerifyField<double>(verifier, VT_FOP, 8) &&
           VerifyField<double>(verifier, VT_HPRIMEP, 8) &&
           VerifyField<double>(verifier, VT_FBES, 8) &&
           VerifyOffset(verifier, VT_TYPEES) &&
           verifier.VerifyString(typeEs()) &&
           VerifyOffset(verifier, VT_CHARATTS) &&
           verifier.VerifyVector(charAtts()) &&
           verifier.VerifyVectorOfStrings(charAtts()) &&
           VerifyOffset(verifier, VT_HEIGHT) &&
           verifier.VerifyVector(height()) &&
           verifier.VerifyVectorOfStrings(height()) &&
           VerifyOffset(verifier, VT_PLASMAFREQUENCY) &&
           verifier.VerifyVector(plasmaFrequency()) &&
           verifier.VerifyVectorOfStrings(plasmaFrequency()) &&
           VerifyOffset(verifier, VT_PLASMAFREQUENCYUNCERTAINTY) &&
           verifier.VerifyVector(plasmaFrequencyUncertainty()) &&
           verifier.VerifyVectorOfStrings(plasmaFrequencyUncertainty()) &&
           VerifyOffset(verifier, VT_ELECTRONDENSITY) &&
           verifier.VerifyVector(electronDensity()) &&
           verifier.VerifyVectorOfStrings(electronDensity()) &&
           VerifyOffset(verifier, VT_ELECTRONDENSITYUNCERTAINTY) &&
           verifier.VerifyVector(electronDensityUncertainty()) &&
           verifier.VerifyVectorOfStrings(electronDensityUncertainty()) &&
           VerifyOffset(verifier, VT_ARTISTFLAGS) &&
           verifier.VerifyVector(artistFlags()) &&
           verifier.VerifyVectorOfStrings(artistFlags()) &&
           VerifyOffset(verifier, VT_TRACEGENERIC) &&
           verifier.VerifyString(traceGeneric()) &&
           VerifyOffset(verifier, VT_TIDPHASESPEEDS) &&
           verifier.VerifyVector(tidPhaseSpeeds()) &&
           verifier.VerifyVectorOfStrings(tidPhaseSpeeds()) &&
           VerifyOffset(verifier, VT_TIDAZIMUTH) &&
           verifier.VerifyVector(tidAzimuth()) &&
           verifier.VerifyVectorOfStrings(tidAzimuth()) &&
           VerifyOffset(verifier, VT_TIDPERIODS) &&
           verifier.VerifyVector(tidPeriods()) &&
           verifier.VerifyVectorOfStrings(tidPeriods()) &&
           VerifyOffset(verifier, VT_DATUM) &&
           verifier.VerifyString(datum()) &&
           VerifyOffset(verifier, VT_PLATFORMNAME) &&
           verifier.VerifyString(platformName()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct IonoObservation_IngestBuilder {
  typedef IonoObservation_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  void add_system(::flatbuffers::Offset<::flatbuffers::String> system) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_SYSTEM, system);
  }
  void add_neProfileName(::flatbuffers::Offset<::flatbuffers::String> neProfileName) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_NEPROFILENAME, neProfileName);
  }
  void add_neProfileVersion(double neProfileVersion) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_NEPROFILEVERSION, neProfileVersion, 0.0);
  }
  void add_scalerInfo(::flatbuffers::Offset<::flatbuffers::String> scalerInfo) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_SCALERINFO, scalerInfo);
  }
  void add_densityProfile(::flatbuffers::Offset<::flatbuffers::String> densityProfile) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_DENSITYPROFILE, densityProfile);
  }
  void add_stationId(::flatbuffers::Offset<::flatbuffers::String> stationId) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_STATIONID, stationId);
  }
  void add_startTimeUTC(::flatbuffers::Offset<::flatbuffers::String> startTimeUTC) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_STARTTIMEUTC, startTimeUTC);
  }
  void add_systemInfo(::flatbuffers::Offset<::flatbuffers::String> systemInfo) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_SYSTEMINFO, systemInfo);
  }
  void add_systemNotes(::flatbuffers::Offset<::flatbuffers::String> systemNotes) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_SYSTEMNOTES, systemNotes);
  }
  void add_transmitCoordinates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transmitCoordinates) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TRANSMITCOORDINATES, transmitCoordinates);
  }
  void add_transmitSensorType(IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType) {
    fbb_.AddElement<int8_t>(IonoObservation_Ingest::VT_TRANSMITSENSORTYPE, static_cast<int8_t>(transmitSensorType), 0);
  }
  void add_receiveCoordinates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> receiveCoordinates) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_RECEIVECOORDINATES, receiveCoordinates);
  }
  void add_receiveSensorType(IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType) {
    fbb_.AddElement<int8_t>(IonoObservation_Ingest::VT_RECEIVESENSORTYPE, static_cast<int8_t>(receiveSensorType), 0);
  }
  void add_antennaElementPosition(::flatbuffers::Offset<::flatbuffers::String> antennaElementPosition) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ANTENNAELEMENTPOSITION, antennaElementPosition);
  }
  void add_antennaElementPositionCoordinateSystem(IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem) {
    fbb_.AddElement<int8_t>(IonoObservation_Ingest::VT_ANTENNAELEMENTPOSITIONCOORDINATESYSTEM, static_cast<int8_t>(antennaElementPositionCoordinateSystem), 0);
  }
  void add_power(::flatbuffers::Offset<::flatbuffers::String> power) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_POWER, power);
  }
  void add_range(::flatbuffers::Offset<::flatbuffers::String> range) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_RANGE, range);
  }
  void add_frequency(::flatbuffers::Offset<::flatbuffers::String> frequency) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_FREQUENCY, frequency);
  }
  void add_polarization(::flatbuffers::Offset<::flatbuffers::String> polarization) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_POLARIZATION, polarization);
  }
  void add_azimuth(::flatbuffers::Offset<::flatbuffers::String> azimuth) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_AZIMUTH, azimuth);
  }
  void add_elevation(::flatbuffers::Offset<::flatbuffers::String> elevation) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ELEVATION, elevation);
  }
  void add_restrictedFrequency(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> restrictedFrequency) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_RESTRICTEDFREQUENCY, restrictedFrequency);
  }
  void add_restrictedFrequencyNotes(::flatbuffers::Offset<::flatbuffers::String> restrictedFrequencyNotes) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_RESTRICTEDFREQUENCYNOTES, restrictedFrequencyNotes);
  }
  void add_doppler(::flatbuffers::Offset<::flatbuffers::String> doppler) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_DOPPLER, doppler);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TIME, time);
  }
  void add_stokes(::flatbuffers::Offset<::flatbuffers::String> stokes) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_STOKES, stokes);
  }
  void add_amplitude(::flatbuffers::Offset<::flatbuffers::String> amplitude) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_AMPLITUDE, amplitude);
  }
  void add_phase(::flatbuffers::Offset<::flatbuffers::String> phase) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_PHASE, phase);
  }
  void add_foF2(double foF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOF2, foF2, 0.0);
  }
  void add_foF1(double foF1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOF1, foF1, 0.0);
  }
  void add_fxF2(double fxF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FXF2, fxF2, 0.0);
  }
  void add_fxF1(double fxF1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FXF1, fxF1, 0.0);
  }
  void add_md(double md) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_MD, md, 0.0);
  }
  void add_luf(double luf) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_LUF, luf, 0.0);
  }
  void add_mufd(double mufd) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_MUFD, mufd, 0.0);
  }
  void add_fmin(double fmin) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FMIN, fmin, 0.0);
  }
  void add_foEs(double foEs) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOES, foEs, 0.0);
  }
  void add_fminF(double fminF) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FMINF, fminF, 0.0);
  }
  void add_fminE(double fminE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FMINE, fminE, 0.0);
  }
  void add_foE(double foE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOE, foE, 0.0);
  }
  void add_fxE(double fxE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FXE, fxE, 0.0);
  }
  void add_fxI(double fxI) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FXI, fxI, 0.0);
  }
  void add_hprimeF(double hprimeF) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEF, hprimeF, 0.0);
  }
  void add_hprimeF2(double hprimeF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEF2, hprimeF2, 0.0);
  }
  void add_hprimeF1(double hprimeF1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEF1, hprimeF1, 0.0);
  }
  void add_hprimeE(double hprimeE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEE, hprimeE, 0.0);
  }
  void add_hprimeEs(double hprimeEs) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEES, hprimeEs, 0.0);
  }
  void add_zmE(double zmE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_ZME, zmE, 0.0);
  }
  void add_yE(double yE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_YE, yE, 0.0);
  }
  void add_qf(double qf) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_QF, qf, 0.0);
  }
  void add_qe(double qe) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_QE, qe, 0.0);
  }
  void add_downF(double downF) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_DOWNF, downF, 0.0);
  }
  void add_downE(double downE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_DOWNE, downE, 0.0);
  }
  void add_downEs(double downEs) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_DOWNES, downEs, 0.0);
  }
  void add_ff(double ff) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FF, ff, 0.0);
  }
  void add_fe(double fe) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FE, fe, 0.0);
  }
  void add_d(double d) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_D, d, 0.0);
  }
  void add_fmuf(double fmuf) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FMUF, fmuf, 0.0);
  }
  void add_hprimefMUF(double hprimefMUF) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEFMUF, hprimefMUF, 0.0);
  }
  void add_deltafoF2(double deltafoF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_DELTAFOF2, deltafoF2, 0.0);
  }
  void add_foEp(double foEp) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOEP, foEp, 0.0);
  }
  void add_fhprimeF(double fhprimeF) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FHPRIMEF, fhprimeF, 0.0);
  }
  void add_fhprimeF2(double fhprimeF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FHPRIMEF2, fhprimeF2, 0.0);
  }
  void add_foF1p(double foF1p) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOF1P, foF1p, 0.0);
  }
  void add_foF2p(double foF2p) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOF2P, foF2p, 0.0);
  }
  void add_hmF2(double hmF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HMF2, hmF2, 0.0);
  }
  void add_hmF1(double hmF1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HMF1, hmF1, 0.0);
  }
  void add_hmE(double hmE) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HME, hmE, 0.0);
  }
  void add_zhalfNm(double zhalfNm) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_ZHALFNM, zhalfNm, 0.0);
  }
  void add_fminEs(double fminEs) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FMINES, fminEs, 0.0);
  }
  void add_yF2(double yF2) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_YF2, yF2, 0.0);
  }
  void add_yF1(double yF1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_YF1, yF1, 0.0);
  }
  void add_tec(double tec) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_TEC, tec, 0.0);
  }
  void add_scaleHeightF2Peak(double scaleHeightF2Peak) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_SCALEHEIGHTF2PEAK, scaleHeightF2Peak, 0.0);
  }
  void add_b0(double b0) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_B0, b0, 0.0);
  }
  void add_b1(double b1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_B1, b1, 0.0);
  }
  void add_d1(double d1) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_D1, d1, 0.0);
  }
  void add_foEa(double foEa) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOEA, foEa, 0.0);
  }
  void add_hprimeEa(double hprimeEa) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEEA, hprimeEa, 0.0);
  }
  void add_foP(double foP) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FOP, foP, 0.0);
  }
  void add_hprimeP(double hprimeP) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_HPRIMEP, hprimeP, 0.0);
  }
  void add_fbEs(double fbEs) {
    fbb_.AddElement<double>(IonoObservation_Ingest::VT_FBES, fbEs, 0.0);
  }
  void add_typeEs(::flatbuffers::Offset<::flatbuffers::String> typeEs) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TYPEES, typeEs);
  }
  void add_charAtts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> charAtts) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_CHARATTS, charAtts);
  }
  void add_height(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> height) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_HEIGHT, height);
  }
  void add_plasmaFrequency(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> plasmaFrequency) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_PLASMAFREQUENCY, plasmaFrequency);
  }
  void add_plasmaFrequencyUncertainty(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> plasmaFrequencyUncertainty) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_PLASMAFREQUENCYUNCERTAINTY, plasmaFrequencyUncertainty);
  }
  void add_electronDensity(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> electronDensity) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ELECTRONDENSITY, electronDensity);
  }
  void add_electronDensityUncertainty(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> electronDensityUncertainty) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ELECTRONDENSITYUNCERTAINTY, electronDensityUncertainty);
  }
  void add_artistFlags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> artistFlags) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ARTISTFLAGS, artistFlags);
  }
  void add_traceGeneric(::flatbuffers::Offset<::flatbuffers::String> traceGeneric) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TRACEGENERIC, traceGeneric);
  }
  void add_tidPhaseSpeeds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidPhaseSpeeds) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TIDPHASESPEEDS, tidPhaseSpeeds);
  }
  void add_tidAzimuth(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidAzimuth) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TIDAZIMUTH, tidAzimuth);
  }
  void add_tidPeriods(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidPeriods) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_TIDPERIODS, tidPeriods);
  }
  void add_datum(::flatbuffers::Offset<::flatbuffers::String> datum) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_DATUM, datum);
  }
  void add_platformName(::flatbuffers::Offset<::flatbuffers::String> platformName) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_PLATFORMNAME, platformName);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(IonoObservation_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(IonoObservation_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(IonoObservation_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit IonoObservation_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservation_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservation_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservation_Ingest> CreateIonoObservation_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> system = 0,
    ::flatbuffers::Offset<::flatbuffers::String> neProfileName = 0,
    double neProfileVersion = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> scalerInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> densityProfile = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stationId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTimeUTC = 0,
    ::flatbuffers::Offset<::flatbuffers::String> systemInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> systemNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transmitCoordinates = 0,
    IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType = IonoObservation_Ingest_transmitSensorType_Enum_MOBILE,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> receiveCoordinates = 0,
    IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType = IonoObservation_Ingest_receiveSensorType_Enum_MOBILE,
    ::flatbuffers::Offset<::flatbuffers::String> antennaElementPosition = 0,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000,
    ::flatbuffers::Offset<::flatbuffers::String> power = 0,
    ::flatbuffers::Offset<::flatbuffers::String> range = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frequency = 0,
    ::flatbuffers::Offset<::flatbuffers::String> polarization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> azimuth = 0,
    ::flatbuffers::Offset<::flatbuffers::String> elevation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> restrictedFrequency = 0,
    ::flatbuffers::Offset<::flatbuffers::String> restrictedFrequencyNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> doppler = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stokes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amplitude = 0,
    ::flatbuffers::Offset<::flatbuffers::String> phase = 0,
    double foF2 = 0.0,
    double foF1 = 0.0,
    double fxF2 = 0.0,
    double fxF1 = 0.0,
    double md = 0.0,
    double luf = 0.0,
    double mufd = 0.0,
    double fmin = 0.0,
    double foEs = 0.0,
    double fminF = 0.0,
    double fminE = 0.0,
    double foE = 0.0,
    double fxE = 0.0,
    double fxI = 0.0,
    double hprimeF = 0.0,
    double hprimeF2 = 0.0,
    double hprimeF1 = 0.0,
    double hprimeE = 0.0,
    double hprimeEs = 0.0,
    double zmE = 0.0,
    double yE = 0.0,
    double qf = 0.0,
    double qe = 0.0,
    double downF = 0.0,
    double downE = 0.0,
    double downEs = 0.0,
    double ff = 0.0,
    double fe = 0.0,
    double d = 0.0,
    double fmuf = 0.0,
    double hprimefMUF = 0.0,
    double deltafoF2 = 0.0,
    double foEp = 0.0,
    double fhprimeF = 0.0,
    double fhprimeF2 = 0.0,
    double foF1p = 0.0,
    double foF2p = 0.0,
    double hmF2 = 0.0,
    double hmF1 = 0.0,
    double hmE = 0.0,
    double zhalfNm = 0.0,
    double fminEs = 0.0,
    double yF2 = 0.0,
    double yF1 = 0.0,
    double tec = 0.0,
    double scaleHeightF2Peak = 0.0,
    double b0 = 0.0,
    double b1 = 0.0,
    double d1 = 0.0,
    double foEa = 0.0,
    double hprimeEa = 0.0,
    double foP = 0.0,
    double hprimeP = 0.0,
    double fbEs = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> typeEs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> charAtts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> height = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> plasmaFrequency = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> plasmaFrequencyUncertainty = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> electronDensity = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> electronDensityUncertainty = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> artistFlags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> traceGeneric = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidPhaseSpeeds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidAzimuth = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tidPeriods = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> platformName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    IonoObservation_Ingest_dataMode_Enum dataMode = IonoObservation_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  IonoObservation_IngestBuilder builder_(_fbb);
  builder_.add_fbEs(fbEs);
  builder_.add_hprimeP(hprimeP);
  builder_.add_foP(foP);
  builder_.add_hprimeEa(hprimeEa);
  builder_.add_foEa(foEa);
  builder_.add_d1(d1);
  builder_.add_b1(b1);
  builder_.add_b0(b0);
  builder_.add_scaleHeightF2Peak(scaleHeightF2Peak);
  builder_.add_tec(tec);
  builder_.add_yF1(yF1);
  builder_.add_yF2(yF2);
  builder_.add_fminEs(fminEs);
  builder_.add_zhalfNm(zhalfNm);
  builder_.add_hmE(hmE);
  builder_.add_hmF1(hmF1);
  builder_.add_hmF2(hmF2);
  builder_.add_foF2p(foF2p);
  builder_.add_foF1p(foF1p);
  builder_.add_fhprimeF2(fhprimeF2);
  builder_.add_fhprimeF(fhprimeF);
  builder_.add_foEp(foEp);
  builder_.add_deltafoF2(deltafoF2);
  builder_.add_hprimefMUF(hprimefMUF);
  builder_.add_fmuf(fmuf);
  builder_.add_d(d);
  builder_.add_fe(fe);
  builder_.add_ff(ff);
  builder_.add_downEs(downEs);
  builder_.add_downE(downE);
  builder_.add_downF(downF);
  builder_.add_qe(qe);
  builder_.add_qf(qf);
  builder_.add_yE(yE);
  builder_.add_zmE(zmE);
  builder_.add_hprimeEs(hprimeEs);
  builder_.add_hprimeE(hprimeE);
  builder_.add_hprimeF1(hprimeF1);
  builder_.add_hprimeF2(hprimeF2);
  builder_.add_hprimeF(hprimeF);
  builder_.add_fxI(fxI);
  builder_.add_fxE(fxE);
  builder_.add_foE(foE);
  builder_.add_fminE(fminE);
  builder_.add_fminF(fminF);
  builder_.add_foEs(foEs);
  builder_.add_fmin(fmin);
  builder_.add_mufd(mufd);
  builder_.add_luf(luf);
  builder_.add_md(md);
  builder_.add_fxF1(fxF1);
  builder_.add_fxF2(fxF2);
  builder_.add_foF1(foF1);
  builder_.add_foF2(foF2);
  builder_.add_neProfileVersion(neProfileVersion);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_platformName(platformName);
  builder_.add_datum(datum);
  builder_.add_tidPeriods(tidPeriods);
  builder_.add_tidAzimuth(tidAzimuth);
  builder_.add_tidPhaseSpeeds(tidPhaseSpeeds);
  builder_.add_traceGeneric(traceGeneric);
  builder_.add_artistFlags(artistFlags);
  builder_.add_electronDensityUncertainty(electronDensityUncertainty);
  builder_.add_electronDensity(electronDensity);
  builder_.add_plasmaFrequencyUncertainty(plasmaFrequencyUncertainty);
  builder_.add_plasmaFrequency(plasmaFrequency);
  builder_.add_height(height);
  builder_.add_charAtts(charAtts);
  builder_.add_typeEs(typeEs);
  builder_.add_phase(phase);
  builder_.add_amplitude(amplitude);
  builder_.add_stokes(stokes);
  builder_.add_time(time);
  builder_.add_doppler(doppler);
  builder_.add_restrictedFrequencyNotes(restrictedFrequencyNotes);
  builder_.add_restrictedFrequency(restrictedFrequency);
  builder_.add_elevation(elevation);
  builder_.add_azimuth(azimuth);
  builder_.add_polarization(polarization);
  builder_.add_frequency(frequency);
  builder_.add_range(range);
  builder_.add_power(power);
  builder_.add_antennaElementPosition(antennaElementPosition);
  builder_.add_receiveCoordinates(receiveCoordinates);
  builder_.add_transmitCoordinates(transmitCoordinates);
  builder_.add_systemNotes(systemNotes);
  builder_.add_systemInfo(systemInfo);
  builder_.add_startTimeUTC(startTimeUTC);
  builder_.add_stationId(stationId);
  builder_.add_densityProfile(densityProfile);
  builder_.add_scalerInfo(scalerInfo);
  builder_.add_neProfileName(neProfileName);
  builder_.add_system(system);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_antennaElementPositionCoordinateSystem(antennaElementPositionCoordinateSystem);
  builder_.add_receiveSensorType(receiveSensorType);
  builder_.add_transmitSensorType(transmitSensorType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservation_Ingest> CreateIonoObservation_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *system = nullptr,
    const char *neProfileName = nullptr,
    double neProfileVersion = 0.0,
    const char *scalerInfo = nullptr,
    const char *densityProfile = nullptr,
    const char *stationId = nullptr,
    const char *startTimeUTC = nullptr,
    const char *systemInfo = nullptr,
    const char *systemNotes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *transmitCoordinates = nullptr,
    IonoObservation_Ingest_transmitSensorType_Enum transmitSensorType = IonoObservation_Ingest_transmitSensorType_Enum_MOBILE,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *receiveCoordinates = nullptr,
    IonoObservation_Ingest_receiveSensorType_Enum receiveSensorType = IonoObservation_Ingest_receiveSensorType_Enum_MOBILE,
    const char *antennaElementPosition = nullptr,
    IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum antennaElementPositionCoordinateSystem = IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum_J2000,
    const char *power = nullptr,
    const char *range = nullptr,
    const char *frequency = nullptr,
    const char *polarization = nullptr,
    const char *azimuth = nullptr,
    const char *elevation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *restrictedFrequency = nullptr,
    const char *restrictedFrequencyNotes = nullptr,
    const char *doppler = nullptr,
    const char *time = nullptr,
    const char *stokes = nullptr,
    const char *amplitude = nullptr,
    const char *phase = nullptr,
    double foF2 = 0.0,
    double foF1 = 0.0,
    double fxF2 = 0.0,
    double fxF1 = 0.0,
    double md = 0.0,
    double luf = 0.0,
    double mufd = 0.0,
    double fmin = 0.0,
    double foEs = 0.0,
    double fminF = 0.0,
    double fminE = 0.0,
    double foE = 0.0,
    double fxE = 0.0,
    double fxI = 0.0,
    double hprimeF = 0.0,
    double hprimeF2 = 0.0,
    double hprimeF1 = 0.0,
    double hprimeE = 0.0,
    double hprimeEs = 0.0,
    double zmE = 0.0,
    double yE = 0.0,
    double qf = 0.0,
    double qe = 0.0,
    double downF = 0.0,
    double downE = 0.0,
    double downEs = 0.0,
    double ff = 0.0,
    double fe = 0.0,
    double d = 0.0,
    double fmuf = 0.0,
    double hprimefMUF = 0.0,
    double deltafoF2 = 0.0,
    double foEp = 0.0,
    double fhprimeF = 0.0,
    double fhprimeF2 = 0.0,
    double foF1p = 0.0,
    double foF2p = 0.0,
    double hmF2 = 0.0,
    double hmF1 = 0.0,
    double hmE = 0.0,
    double zhalfNm = 0.0,
    double fminEs = 0.0,
    double yF2 = 0.0,
    double yF1 = 0.0,
    double tec = 0.0,
    double scaleHeightF2Peak = 0.0,
    double b0 = 0.0,
    double b1 = 0.0,
    double d1 = 0.0,
    double foEa = 0.0,
    double hprimeEa = 0.0,
    double foP = 0.0,
    double hprimeP = 0.0,
    double fbEs = 0.0,
    const char *typeEs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *charAtts = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *height = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *plasmaFrequency = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *plasmaFrequencyUncertainty = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *electronDensity = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *electronDensityUncertainty = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *artistFlags = nullptr,
    const char *traceGeneric = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tidPhaseSpeeds = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tidAzimuth = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tidPeriods = nullptr,
    const char *datum = nullptr,
    const char *platformName = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    IonoObservation_Ingest_dataMode_Enum dataMode = IonoObservation_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto system__ = system ? _fbb.CreateString(system) : 0;
  auto neProfileName__ = neProfileName ? _fbb.CreateString(neProfileName) : 0;
  auto scalerInfo__ = scalerInfo ? _fbb.CreateString(scalerInfo) : 0;
  auto densityProfile__ = densityProfile ? _fbb.CreateString(densityProfile) : 0;
  auto stationId__ = stationId ? _fbb.CreateString(stationId) : 0;
  auto startTimeUTC__ = startTimeUTC ? _fbb.CreateString(startTimeUTC) : 0;
  auto systemInfo__ = systemInfo ? _fbb.CreateString(systemInfo) : 0;
  auto systemNotes__ = systemNotes ? _fbb.CreateString(systemNotes) : 0;
  auto transmitCoordinates__ = transmitCoordinates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*transmitCoordinates) : 0;
  auto receiveCoordinates__ = receiveCoordinates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*receiveCoordinates) : 0;
  auto antennaElementPosition__ = antennaElementPosition ? _fbb.CreateString(antennaElementPosition) : 0;
  auto power__ = power ? _fbb.CreateString(power) : 0;
  auto range__ = range ? _fbb.CreateString(range) : 0;
  auto frequency__ = frequency ? _fbb.CreateString(frequency) : 0;
  auto polarization__ = polarization ? _fbb.CreateString(polarization) : 0;
  auto azimuth__ = azimuth ? _fbb.CreateString(azimuth) : 0;
  auto elevation__ = elevation ? _fbb.CreateString(elevation) : 0;
  auto restrictedFrequency__ = restrictedFrequency ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*restrictedFrequency) : 0;
  auto restrictedFrequencyNotes__ = restrictedFrequencyNotes ? _fbb.CreateString(restrictedFrequencyNotes) : 0;
  auto doppler__ = doppler ? _fbb.CreateString(doppler) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto stokes__ = stokes ? _fbb.CreateString(stokes) : 0;
  auto amplitude__ = amplitude ? _fbb.CreateString(amplitude) : 0;
  auto phase__ = phase ? _fbb.CreateString(phase) : 0;
  auto typeEs__ = typeEs ? _fbb.CreateString(typeEs) : 0;
  auto charAtts__ = charAtts ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*charAtts) : 0;
  auto height__ = height ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*height) : 0;
  auto plasmaFrequency__ = plasmaFrequency ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*plasmaFrequency) : 0;
  auto plasmaFrequencyUncertainty__ = plasmaFrequencyUncertainty ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*plasmaFrequencyUncertainty) : 0;
  auto electronDensity__ = electronDensity ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*electronDensity) : 0;
  auto electronDensityUncertainty__ = electronDensityUncertainty ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*electronDensityUncertainty) : 0;
  auto artistFlags__ = artistFlags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*artistFlags) : 0;
  auto traceGeneric__ = traceGeneric ? _fbb.CreateString(traceGeneric) : 0;
  auto tidPhaseSpeeds__ = tidPhaseSpeeds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tidPhaseSpeeds) : 0;
  auto tidAzimuth__ = tidAzimuth ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tidAzimuth) : 0;
  auto tidPeriods__ = tidPeriods ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tidPeriods) : 0;
  auto datum__ = datum ? _fbb.CreateString(datum) : 0;
  auto platformName__ = platformName ? _fbb.CreateString(platformName) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateIonoObservation_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idSensor__,
      origSensorId__,
      system__,
      neProfileName__,
      neProfileVersion,
      scalerInfo__,
      densityProfile__,
      stationId__,
      startTimeUTC__,
      systemInfo__,
      systemNotes__,
      transmitCoordinates__,
      transmitSensorType,
      receiveCoordinates__,
      receiveSensorType,
      antennaElementPosition__,
      antennaElementPositionCoordinateSystem,
      power__,
      range__,
      frequency__,
      polarization__,
      azimuth__,
      elevation__,
      restrictedFrequency__,
      restrictedFrequencyNotes__,
      doppler__,
      time__,
      stokes__,
      amplitude__,
      phase__,
      foF2,
      foF1,
      fxF2,
      fxF1,
      md,
      luf,
      mufd,
      fmin,
      foEs,
      fminF,
      fminE,
      foE,
      fxE,
      fxI,
      hprimeF,
      hprimeF2,
      hprimeF1,
      hprimeE,
      hprimeEs,
      zmE,
      yE,
      qf,
      qe,
      downF,
      downE,
      downEs,
      ff,
      fe,
      d,
      fmuf,
      hprimefMUF,
      deltafoF2,
      foEp,
      fhprimeF,
      fhprimeF2,
      foF1p,
      foF2p,
      hmF2,
      hmF1,
      hmE,
      zhalfNm,
      fminEs,
      yF2,
      yF1,
      tec,
      scaleHeightF2Peak,
      b0,
      b1,
      d1,
      foEa,
      hprimeEa,
      foP,
      hprimeP,
      fbEs,
      typeEs__,
      charAtts__,
      height__,
      plasmaFrequency__,
      plasmaFrequencyUncertainty__,
      electronDensity__,
      electronDensityUncertainty__,
      artistFlags__,
      traceGeneric__,
      tidPhaseSpeeds__,
      tidAzimuth__,
      tidPeriods__,
      datum__,
      platformName__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const IonoObservation_Ingest *GetIonoObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservation_Ingest>(buf);
}

inline const IonoObservation_Ingest *GetSizePrefixedIonoObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservation_Ingest>(buf);
}

inline const char *IonoObservation_IngestIdentifier() {
  return "IONO";
}

inline bool IonoObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservation_IngestIdentifier());
}

inline bool SizePrefixedIonoObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservation_IngestIdentifier(), true);
}

inline bool VerifyIonoObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservation_Ingest>(IonoObservation_IngestIdentifier());
}

inline bool VerifySizePrefixedIonoObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservation_Ingest>(IonoObservation_IngestIdentifier());
}

inline void FinishIonoObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservation_Ingest> root) {
  fbb.Finish(root, IonoObservation_IngestIdentifier());
}

inline void FinishSizePrefixedIonoObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservation_Ingest> root) {
  fbb.FinishSizePrefixed(root, IonoObservation_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
