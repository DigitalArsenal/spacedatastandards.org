// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LaunchDetection_Abridged;
struct LaunchDetection_AbridgedBuilder;

enum LaunchDetection_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LaunchDetection_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LaunchDetection_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LaunchDetection_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LaunchDetection_Abridged_dataMode_Enum_EXERCISE = 3,
  LaunchDetection_Abridged_dataMode_Enum_MIN = LaunchDetection_Abridged_dataMode_Enum_REAL,
  LaunchDetection_Abridged_dataMode_Enum_MAX = LaunchDetection_Abridged_dataMode_Enum_EXERCISE
};

inline const LaunchDetection_Abridged_dataMode_Enum (&EnumValuesLaunchDetection_Abridged_dataMode_Enum())[4] {
  static const LaunchDetection_Abridged_dataMode_Enum values[] = {
    LaunchDetection_Abridged_dataMode_Enum_REAL,
    LaunchDetection_Abridged_dataMode_Enum_TEST,
    LaunchDetection_Abridged_dataMode_Enum_SIMULATED,
    LaunchDetection_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLaunchDetection_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLaunchDetection_Abridged_dataMode_Enum(LaunchDetection_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LaunchDetection_Abridged_dataMode_Enum_REAL, LaunchDetection_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLaunchDetection_Abridged_dataMode_Enum()[index];
}

/// /// Data to analyze launch detections.
struct LaunchDetection_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LaunchDetection_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_LAUNCHTIME = 8,
    VT_MESSAGETYPE = 10,
    VT_LAUNCHLATITUDE = 12,
    VT_LAUNCHLONGITUDE = 14,
    VT_LAUNCHAZIMUTH = 16,
    VT_RAAN = 18,
    VT_INCLINATION = 20,
    VT_OBSERVATIONTIME = 22,
    VT_OBSERVATIONLATITUDE = 24,
    VT_OBSERVATIONLONGITUDE = 26,
    VT_OBSERVATIONALTITUDE = 28,
    VT_STEREOFLAG = 30,
    VT_HIGHZENITHAZIMUTH = 32,
    VT_SEQUENCENUMBER = 34,
    VT_EVENTID = 36,
    VT_SOURCE = 38,
    VT_ORIGIN = 40,
    VT_DESCRIPTOR = 42,
    VT_ORIGNETWORK = 44,
    VT_DATAMODE = 46,
    VT_CREATEDAT = 48,
    VT_CREATEDBY = 50,
    VT_UPDATEDAT = 52,
    VT_UPDATEDBY = 54
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHDETECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Time of Launch.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *launchTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAUNCHTIME);
  }
  /// Type of message for the data.
  /// Example: /// Example: Example-Msg-Type
  /// Constraints: Minimum length = 1, Maximum length = 16
  const ::flatbuffers::String *messageType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGETYPE);
  }
  /// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double launchLatitude() const {
    return GetField<double>(VT_LAUNCHLATITUDE, 0.0);
  }
  /// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double launchLongitude() const {
    return GetField<double>(VT_LAUNCHLONGITUDE, 0.0);
  }
  /// Angle measured clockwise from North for the launch heading (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double launchAzimuth() const {
    return GetField<double>(VT_LAUNCHAZIMUTH, 0.0);
  }
  /// Orbit Right Ascension of Ascending Node (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double raan() const {
    return GetField<double>(VT_RAAN, 0.0);
  }
  /// Orbit Inclination (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double inclination() const {
    return GetField<double>(VT_INCLINATION, 0.0);
  }
  /// Time of observation.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *observationTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSERVATIONTIME);
  }
  /// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double observationLatitude() const {
    return GetField<double>(VT_OBSERVATIONLATITUDE, 0.0);
  }
  /// Longitude of launch vehicle at observation time (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double observationLongitude() const {
    return GetField<double>(VT_OBSERVATIONLONGITUDE, 0.0);
  }
  /// Altitude of launch vehicle at observation time (in KM).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double observationAltitude() const {
    return GetField<double>(VT_OBSERVATIONALTITUDE, 0.0);
  }
  /// Flag indicating multiple observers were used.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool stereoFlag() const {
    return GetField<uint8_t>(VT_STEREOFLAG, 0) != 0;
  }
  /// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool highZenithAzimuth() const {
    return GetField<uint8_t>(VT_HIGHZENITHAZIMUTH, 0) != 0;
  }
  /// Integer indicating how messages should be sequenced for a specific event.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t sequenceNumber() const {
    return GetField<int32_t>(VT_SEQUENCENUMBER, 0);
  }
  /// Id to be able to correlate different messages to a specific event.
  /// Example: /// Example: EVENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *eventId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTID);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LaunchDetection_Abridged_dataMode_Enum dataMode() const {
    return static_cast<LaunchDetection_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_LAUNCHTIME) &&
           verifier.VerifyString(launchTime()) &&
           VerifyOffset(verifier, VT_MESSAGETYPE) &&
           verifier.VerifyString(messageType()) &&
           VerifyField<double>(verifier, VT_LAUNCHLATITUDE, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHLONGITUDE, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHAZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_RAAN, 8) &&
           VerifyField<double>(verifier, VT_INCLINATION, 8) &&
           VerifyOffset(verifier, VT_OBSERVATIONTIME) &&
           verifier.VerifyString(observationTime()) &&
           VerifyField<double>(verifier, VT_OBSERVATIONLATITUDE, 8) &&
           VerifyField<double>(verifier, VT_OBSERVATIONLONGITUDE, 8) &&
           VerifyField<double>(verifier, VT_OBSERVATIONALTITUDE, 8) &&
           VerifyField<uint8_t>(verifier, VT_STEREOFLAG, 1) &&
           VerifyField<uint8_t>(verifier, VT_HIGHZENITHAZIMUTH, 1) &&
           VerifyField<int32_t>(verifier, VT_SEQUENCENUMBER, 4) &&
           VerifyOffset(verifier, VT_EVENTID) &&
           verifier.VerifyString(eventId()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           verifier.EndTable();
  }
};

struct LaunchDetection_AbridgedBuilder {
  typedef LaunchDetection_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_launchTime(::flatbuffers::Offset<::flatbuffers::String> launchTime) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_LAUNCHTIME, launchTime);
  }
  void add_messageType(::flatbuffers::Offset<::flatbuffers::String> messageType) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_MESSAGETYPE, messageType);
  }
  void add_launchLatitude(double launchLatitude) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_LAUNCHLATITUDE, launchLatitude, 0.0);
  }
  void add_launchLongitude(double launchLongitude) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_LAUNCHLONGITUDE, launchLongitude, 0.0);
  }
  void add_launchAzimuth(double launchAzimuth) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_LAUNCHAZIMUTH, launchAzimuth, 0.0);
  }
  void add_raan(double raan) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_RAAN, raan, 0.0);
  }
  void add_inclination(double inclination) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_INCLINATION, inclination, 0.0);
  }
  void add_observationTime(::flatbuffers::Offset<::flatbuffers::String> observationTime) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_OBSERVATIONTIME, observationTime);
  }
  void add_observationLatitude(double observationLatitude) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_OBSERVATIONLATITUDE, observationLatitude, 0.0);
  }
  void add_observationLongitude(double observationLongitude) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_OBSERVATIONLONGITUDE, observationLongitude, 0.0);
  }
  void add_observationAltitude(double observationAltitude) {
    fbb_.AddElement<double>(LaunchDetection_Abridged::VT_OBSERVATIONALTITUDE, observationAltitude, 0.0);
  }
  void add_stereoFlag(bool stereoFlag) {
    fbb_.AddElement<uint8_t>(LaunchDetection_Abridged::VT_STEREOFLAG, static_cast<uint8_t>(stereoFlag), 0);
  }
  void add_highZenithAzimuth(bool highZenithAzimuth) {
    fbb_.AddElement<uint8_t>(LaunchDetection_Abridged::VT_HIGHZENITHAZIMUTH, static_cast<uint8_t>(highZenithAzimuth), 0);
  }
  void add_sequenceNumber(int32_t sequenceNumber) {
    fbb_.AddElement<int32_t>(LaunchDetection_Abridged::VT_SEQUENCENUMBER, sequenceNumber, 0);
  }
  void add_eventId(::flatbuffers::Offset<::flatbuffers::String> eventId) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_EVENTID, eventId);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_ORIGIN, origin);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_DESCRIPTOR, descriptor);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(LaunchDetection_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LaunchDetection_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(LaunchDetection_Abridged::VT_UPDATEDBY, updatedBy);
  }
  explicit LaunchDetection_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LaunchDetection_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LaunchDetection_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LaunchDetection_Abridged> CreateLaunchDetection_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> launchTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> messageType = 0,
    double launchLatitude = 0.0,
    double launchLongitude = 0.0,
    double launchAzimuth = 0.0,
    double raan = 0.0,
    double inclination = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> observationTime = 0,
    double observationLatitude = 0.0,
    double observationLongitude = 0.0,
    double observationAltitude = 0.0,
    bool stereoFlag = false,
    bool highZenithAzimuth = false,
    int32_t sequenceNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eventId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    LaunchDetection_Abridged_dataMode_Enum dataMode = LaunchDetection_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0) {
  LaunchDetection_AbridgedBuilder builder_(_fbb);
  builder_.add_observationAltitude(observationAltitude);
  builder_.add_observationLongitude(observationLongitude);
  builder_.add_observationLatitude(observationLatitude);
  builder_.add_inclination(inclination);
  builder_.add_raan(raan);
  builder_.add_launchAzimuth(launchAzimuth);
  builder_.add_launchLongitude(launchLongitude);
  builder_.add_launchLatitude(launchLatitude);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_descriptor(descriptor);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_eventId(eventId);
  builder_.add_sequenceNumber(sequenceNumber);
  builder_.add_observationTime(observationTime);
  builder_.add_messageType(messageType);
  builder_.add_launchTime(launchTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_highZenithAzimuth(highZenithAzimuth);
  builder_.add_stereoFlag(stereoFlag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LaunchDetection_Abridged> CreateLaunchDetection_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *launchTime = nullptr,
    const char *messageType = nullptr,
    double launchLatitude = 0.0,
    double launchLongitude = 0.0,
    double launchAzimuth = 0.0,
    double raan = 0.0,
    double inclination = 0.0,
    const char *observationTime = nullptr,
    double observationLatitude = 0.0,
    double observationLongitude = 0.0,
    double observationAltitude = 0.0,
    bool stereoFlag = false,
    bool highZenithAzimuth = false,
    int32_t sequenceNumber = 0,
    const char *eventId = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *descriptor = nullptr,
    const char *origNetwork = nullptr,
    LaunchDetection_Abridged_dataMode_Enum dataMode = LaunchDetection_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto launchTime__ = launchTime ? _fbb.CreateString(launchTime) : 0;
  auto messageType__ = messageType ? _fbb.CreateString(messageType) : 0;
  auto observationTime__ = observationTime ? _fbb.CreateString(observationTime) : 0;
  auto eventId__ = eventId ? _fbb.CreateString(eventId) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  return CreateLaunchDetection_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      launchTime__,
      messageType__,
      launchLatitude,
      launchLongitude,
      launchAzimuth,
      raan,
      inclination,
      observationTime__,
      observationLatitude,
      observationLongitude,
      observationAltitude,
      stereoFlag,
      highZenithAzimuth,
      sequenceNumber,
      eventId__,
      source__,
      origin__,
      descriptor__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__);
}

inline const LaunchDetection_Abridged *GetLaunchDetection_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<LaunchDetection_Abridged>(buf);
}

inline const LaunchDetection_Abridged *GetSizePrefixedLaunchDetection_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LaunchDetection_Abridged>(buf);
}

inline const char *LaunchDetection_AbridgedIdentifier() {
  return "LAUN";
}

inline bool LaunchDetection_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchDetection_AbridgedIdentifier());
}

inline bool SizePrefixedLaunchDetection_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LaunchDetection_AbridgedIdentifier(), true);
}

inline bool VerifyLaunchDetection_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LaunchDetection_Abridged>(LaunchDetection_AbridgedIdentifier());
}

inline bool VerifySizePrefixedLaunchDetection_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LaunchDetection_Abridged>(LaunchDetection_AbridgedIdentifier());
}

inline void FinishLaunchDetection_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchDetection_Abridged> root) {
  fbb.Finish(root, LaunchDetection_AbridgedIdentifier());
}

inline void FinishSizePrefixedLaunchDetection_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LaunchDetection_Abridged> root) {
  fbb.FinishSizePrefixed(root, LaunchDetection_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
