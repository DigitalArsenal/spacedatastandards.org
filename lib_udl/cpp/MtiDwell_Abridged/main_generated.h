// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiDwell_Abridged;
struct MtiDwell_AbridgedBuilder;

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
struct MtiDwell_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiDwell_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_D2 = 4,
    VT_D3 = 6,
    VT_D4 = 8,
    VT_D5 = 10,
    VT_D6 = 12,
    VT_D7 = 14,
    VT_D8 = 16,
    VT_D9 = 18,
    VT_D10 = 20,
    VT_D11 = 22,
    VT_D12 = 24,
    VT_D13 = 26,
    VT_D14 = 28,
    VT_D15 = 30,
    VT_D16 = 32,
    VT_D17 = 34,
    VT_D18 = 36,
    VT_D19 = 38,
    VT_D20 = 40,
    VT_D21 = 42,
    VT_D22 = 44,
    VT_D23 = 46,
    VT_D24 = 48,
    VT_D25 = 50,
    VT_D26 = 52,
    VT_D27 = 54,
    VT_D28 = 56,
    VT_D29 = 58,
    VT_D30 = 60,
    VT_D31 = 62,
    VT_D32 = 64,
    VT_DWELLTS = 66
  };
  /// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d2() const {
    return GetField<int32_t>(VT_D2, 0);
  }
  /// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d3() const {
    return GetField<int32_t>(VT_D3, 0);
  }
  /// Flag indicating the last dwell of the revisit.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool d4() const {
    return GetField<uint8_t>(VT_D4, 0) != 0;
  }
  /// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d5() const {
    return GetField<int32_t>(VT_D5, 0);
  }
  /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  int64_t d6() const {
    return GetField<int64_t>(VT_D6, 0);
  }
  /// North-South position of the sensor at the temporal center of the dwell, in degrees.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double d7() const {
    return GetField<double>(VT_D7, 0.0);
  }
  /// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  double d8() const {
    return GetField<double>(VT_D8, 0.0);
  }
  /// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d9() const {
    return GetField<int32_t>(VT_D9, 0);
  }
  /// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double d10() const {
    return GetField<double>(VT_D10, 0.0);
  }
  /// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double d11() const {
    return GetField<double>(VT_D11, 0.0);
  }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d12() const {
    return GetField<int32_t>(VT_D12, 0);
  }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d13() const {
    return GetField<int32_t>(VT_D13, 0);
  }
  /// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d14() const {
    return GetField<int32_t>(VT_D14, 0);
  }
  /// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double d15() const {
    return GetField<double>(VT_D15, 0.0);
  }
  /// Ground speed of the sensor at the time of the dwell, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d16() const {
    return GetField<int32_t>(VT_D16, 0);
  }
  /// Velocity of the sensor in the vertical direction, in decimeters per second.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t d17() const {
    return GetField<int32_t>(VT_D17, 0);
  }
  /// Standard deviation of the estimate of the sensor track, in degrees.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t d18() const {
    return GetField<int32_t>(VT_D18, 0);
  }
  /// Standard deviation of estimate of the sensor speed, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d19() const {
    return GetField<int32_t>(VT_D19, 0);
  }
  /// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t d20() const {
    return GetField<int32_t>(VT_D20, 0);
  }
  /// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  double d21() const {
    return GetField<double>(VT_D21, 0.0);
  }
  /// Pitch angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d22() const {
    return GetField<double>(VT_D22, 0.0);
  }
  /// Roll angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d23() const {
    return GetField<double>(VT_D23, 0.0);
  }
  /// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d24() const {
    return GetField<double>(VT_D24, 0.0);
  }
  /// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d25() const {
    return GetField<double>(VT_D25, 0.0);
  }
  /// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d26() const {
    return GetField<double>(VT_D26, 0.0);
  }
  /// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d27() const {
    return GetField<double>(VT_D27, 0.0);
  }
  /// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d28() const {
    return GetField<double>(VT_D28, 0.0);
  }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d29() const {
    return GetField<double>(VT_D29, 0.0);
  }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  double d30() const {
    return GetField<double>(VT_D30, 0.0);
  }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t d31() const {
    return GetField<int32_t>(VT_D31, 0);
  }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *d32() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_D32);
  }
  /// Dwell timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *dwellts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DWELLTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_D2, 4) &&
           VerifyField<int32_t>(verifier, VT_D3, 4) &&
           VerifyField<uint8_t>(verifier, VT_D4, 1) &&
           VerifyField<int32_t>(verifier, VT_D5, 4) &&
           VerifyField<int64_t>(verifier, VT_D6, 8) &&
           VerifyField<double>(verifier, VT_D7, 8) &&
           VerifyField<double>(verifier, VT_D8, 8) &&
           VerifyField<int32_t>(verifier, VT_D9, 4) &&
           VerifyField<double>(verifier, VT_D10, 8) &&
           VerifyField<double>(verifier, VT_D11, 8) &&
           VerifyField<int32_t>(verifier, VT_D12, 4) &&
           VerifyField<int32_t>(verifier, VT_D13, 4) &&
           VerifyField<int32_t>(verifier, VT_D14, 4) &&
           VerifyField<double>(verifier, VT_D15, 8) &&
           VerifyField<int32_t>(verifier, VT_D16, 4) &&
           VerifyField<int32_t>(verifier, VT_D17, 4) &&
           VerifyField<int32_t>(verifier, VT_D18, 4) &&
           VerifyField<int32_t>(verifier, VT_D19, 4) &&
           VerifyField<int32_t>(verifier, VT_D20, 4) &&
           VerifyField<double>(verifier, VT_D21, 8) &&
           VerifyField<double>(verifier, VT_D22, 8) &&
           VerifyField<double>(verifier, VT_D23, 8) &&
           VerifyField<double>(verifier, VT_D24, 8) &&
           VerifyField<double>(verifier, VT_D25, 8) &&
           VerifyField<double>(verifier, VT_D26, 8) &&
           VerifyField<double>(verifier, VT_D27, 8) &&
           VerifyField<double>(verifier, VT_D28, 8) &&
           VerifyField<double>(verifier, VT_D29, 8) &&
           VerifyField<double>(verifier, VT_D30, 8) &&
           VerifyField<int32_t>(verifier, VT_D31, 4) &&
           VerifyOffset(verifier, VT_D32) &&
           verifier.VerifyVector(d32()) &&
           verifier.VerifyVectorOfStrings(d32()) &&
           VerifyOffset(verifier, VT_DWELLTS) &&
           verifier.VerifyString(dwellts()) &&
           verifier.EndTable();
  }
};

struct MtiDwell_AbridgedBuilder {
  typedef MtiDwell_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_d2(int32_t d2) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D2, d2, 0);
  }
  void add_d3(int32_t d3) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D3, d3, 0);
  }
  void add_d4(bool d4) {
    fbb_.AddElement<uint8_t>(MtiDwell_Abridged::VT_D4, static_cast<uint8_t>(d4), 0);
  }
  void add_d5(int32_t d5) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D5, d5, 0);
  }
  void add_d6(int64_t d6) {
    fbb_.AddElement<int64_t>(MtiDwell_Abridged::VT_D6, d6, 0);
  }
  void add_d7(double d7) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D7, d7, 0.0);
  }
  void add_d8(double d8) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D8, d8, 0.0);
  }
  void add_d9(int32_t d9) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D9, d9, 0);
  }
  void add_d10(double d10) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D10, d10, 0.0);
  }
  void add_d11(double d11) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D11, d11, 0.0);
  }
  void add_d12(int32_t d12) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D12, d12, 0);
  }
  void add_d13(int32_t d13) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D13, d13, 0);
  }
  void add_d14(int32_t d14) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D14, d14, 0);
  }
  void add_d15(double d15) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D15, d15, 0.0);
  }
  void add_d16(int32_t d16) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D16, d16, 0);
  }
  void add_d17(int32_t d17) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D17, d17, 0);
  }
  void add_d18(int32_t d18) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D18, d18, 0);
  }
  void add_d19(int32_t d19) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D19, d19, 0);
  }
  void add_d20(int32_t d20) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D20, d20, 0);
  }
  void add_d21(double d21) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D21, d21, 0.0);
  }
  void add_d22(double d22) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D22, d22, 0.0);
  }
  void add_d23(double d23) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D23, d23, 0.0);
  }
  void add_d24(double d24) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D24, d24, 0.0);
  }
  void add_d25(double d25) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D25, d25, 0.0);
  }
  void add_d26(double d26) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D26, d26, 0.0);
  }
  void add_d27(double d27) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D27, d27, 0.0);
  }
  void add_d28(double d28) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D28, d28, 0.0);
  }
  void add_d29(double d29) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D29, d29, 0.0);
  }
  void add_d30(double d30) {
    fbb_.AddElement<double>(MtiDwell_Abridged::VT_D30, d30, 0.0);
  }
  void add_d31(int32_t d31) {
    fbb_.AddElement<int32_t>(MtiDwell_Abridged::VT_D31, d31, 0);
  }
  void add_d32(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> d32) {
    fbb_.AddOffset(MtiDwell_Abridged::VT_D32, d32);
  }
  void add_dwellts(::flatbuffers::Offset<::flatbuffers::String> dwellts) {
    fbb_.AddOffset(MtiDwell_Abridged::VT_DWELLTS, dwellts);
  }
  explicit MtiDwell_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiDwell_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiDwell_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiDwell_Abridged> CreateMtiDwell_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t d2 = 0,
    int32_t d3 = 0,
    bool d4 = false,
    int32_t d5 = 0,
    int64_t d6 = 0,
    double d7 = 0.0,
    double d8 = 0.0,
    int32_t d9 = 0,
    double d10 = 0.0,
    double d11 = 0.0,
    int32_t d12 = 0,
    int32_t d13 = 0,
    int32_t d14 = 0,
    double d15 = 0.0,
    int32_t d16 = 0,
    int32_t d17 = 0,
    int32_t d18 = 0,
    int32_t d19 = 0,
    int32_t d20 = 0,
    double d21 = 0.0,
    double d22 = 0.0,
    double d23 = 0.0,
    double d24 = 0.0,
    double d25 = 0.0,
    double d26 = 0.0,
    double d27 = 0.0,
    double d28 = 0.0,
    double d29 = 0.0,
    double d30 = 0.0,
    int32_t d31 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> d32 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dwellts = 0) {
  MtiDwell_AbridgedBuilder builder_(_fbb);
  builder_.add_d30(d30);
  builder_.add_d29(d29);
  builder_.add_d28(d28);
  builder_.add_d27(d27);
  builder_.add_d26(d26);
  builder_.add_d25(d25);
  builder_.add_d24(d24);
  builder_.add_d23(d23);
  builder_.add_d22(d22);
  builder_.add_d21(d21);
  builder_.add_d15(d15);
  builder_.add_d11(d11);
  builder_.add_d10(d10);
  builder_.add_d8(d8);
  builder_.add_d7(d7);
  builder_.add_d6(d6);
  builder_.add_dwellts(dwellts);
  builder_.add_d32(d32);
  builder_.add_d31(d31);
  builder_.add_d20(d20);
  builder_.add_d19(d19);
  builder_.add_d18(d18);
  builder_.add_d17(d17);
  builder_.add_d16(d16);
  builder_.add_d14(d14);
  builder_.add_d13(d13);
  builder_.add_d12(d12);
  builder_.add_d9(d9);
  builder_.add_d5(d5);
  builder_.add_d3(d3);
  builder_.add_d2(d2);
  builder_.add_d4(d4);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MtiDwell_Abridged> CreateMtiDwell_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t d2 = 0,
    int32_t d3 = 0,
    bool d4 = false,
    int32_t d5 = 0,
    int64_t d6 = 0,
    double d7 = 0.0,
    double d8 = 0.0,
    int32_t d9 = 0,
    double d10 = 0.0,
    double d11 = 0.0,
    int32_t d12 = 0,
    int32_t d13 = 0,
    int32_t d14 = 0,
    double d15 = 0.0,
    int32_t d16 = 0,
    int32_t d17 = 0,
    int32_t d18 = 0,
    int32_t d19 = 0,
    int32_t d20 = 0,
    double d21 = 0.0,
    double d22 = 0.0,
    double d23 = 0.0,
    double d24 = 0.0,
    double d25 = 0.0,
    double d26 = 0.0,
    double d27 = 0.0,
    double d28 = 0.0,
    double d29 = 0.0,
    double d30 = 0.0,
    int32_t d31 = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *d32 = nullptr,
    const char *dwellts = nullptr) {
  auto d32__ = d32 ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*d32) : 0;
  auto dwellts__ = dwellts ? _fbb.CreateString(dwellts) : 0;
  return CreateMtiDwell_Abridged(
      _fbb,
      d2,
      d3,
      d4,
      d5,
      d6,
      d7,
      d8,
      d9,
      d10,
      d11,
      d12,
      d13,
      d14,
      d15,
      d16,
      d17,
      d18,
      d19,
      d20,
      d21,
      d22,
      d23,
      d24,
      d25,
      d26,
      d27,
      d28,
      d29,
      d30,
      d31,
      d32__,
      dwellts__);
}

inline const MtiDwell_Abridged *GetMtiDwell_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<MtiDwell_Abridged>(buf);
}

inline const MtiDwell_Abridged *GetSizePrefixedMtiDwell_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiDwell_Abridged>(buf);
}

inline const char *MtiDwell_AbridgedIdentifier() {
  return "MTID";
}

inline bool MtiDwell_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiDwell_AbridgedIdentifier());
}

inline bool SizePrefixedMtiDwell_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiDwell_AbridgedIdentifier(), true);
}

inline bool VerifyMtiDwell_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiDwell_Abridged>(MtiDwell_AbridgedIdentifier());
}

inline bool VerifySizePrefixedMtiDwell_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiDwell_Abridged>(MtiDwell_AbridgedIdentifier());
}

inline void FinishMtiDwell_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiDwell_Abridged> root) {
  fbb.Finish(root, MtiDwell_AbridgedIdentifier());
}

inline void FinishSizePrefixedMtiDwell_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiDwell_Abridged> root) {
  fbb.FinishSizePrefixed(root, MtiDwell_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
