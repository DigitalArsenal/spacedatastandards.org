// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SensorStats_Abridged;
struct SensorStats_AbridgedBuilder;

enum SensorStats_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SensorStats_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SensorStats_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SensorStats_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SensorStats_Abridged_dataMode_Enum_EXERCISE = 3,
  SensorStats_Abridged_dataMode_Enum_MIN = SensorStats_Abridged_dataMode_Enum_REAL,
  SensorStats_Abridged_dataMode_Enum_MAX = SensorStats_Abridged_dataMode_Enum_EXERCISE
};

inline const SensorStats_Abridged_dataMode_Enum (&EnumValuesSensorStats_Abridged_dataMode_Enum())[4] {
  static const SensorStats_Abridged_dataMode_Enum values[] = {
    SensorStats_Abridged_dataMode_Enum_REAL,
    SensorStats_Abridged_dataMode_Enum_TEST,
    SensorStats_Abridged_dataMode_Enum_SIMULATED,
    SensorStats_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSensorStats_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSensorStats_Abridged_dataMode_Enum(SensorStats_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SensorStats_Abridged_dataMode_Enum_REAL, SensorStats_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSensorStats_Abridged_dataMode_Enum()[index];
}

/// /// SensorStats contain statistics on sensors related to observation production such as last reported observation time.
struct SensorStats_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SensorStats_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDSENSOR = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_LASTOBTIME = 10,
    VT_CREATEDAT = 12,
    VT_CREATEDBY = 14,
    VT_UPDATEDAT = 16,
    VT_UPDATEDBY = 18,
    VT_SOURCE = 20,
    VT_DATAMODE = 22
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORSTATS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique ID of the parent sensor.
  /// Example: /// Example: idSensor
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Time of last reported observation in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastObTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBTIME);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SensorStats_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SensorStats_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_LASTOBTIME) &&
           verifier.VerifyString(lastObTime()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SensorStats_AbridgedBuilder {
  typedef SensorStats_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SensorStats_Abridged::VT_ID, id);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SensorStats_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SensorStats_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_lastObTime(::flatbuffers::Offset<::flatbuffers::String> lastObTime) {
    fbb_.AddOffset(SensorStats_Abridged::VT_LASTOBTIME, lastObTime);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SensorStats_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SensorStats_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(SensorStats_Abridged::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(SensorStats_Abridged::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SensorStats_Abridged::VT_SOURCE, source);
  }
  void add_dataMode(SensorStats_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SensorStats_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SensorStats_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SensorStats_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SensorStats_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SensorStats_Abridged> CreateSensorStats_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastObTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    SensorStats_Abridged_dataMode_Enum dataMode = SensorStats_Abridged_dataMode_Enum_REAL) {
  SensorStats_AbridgedBuilder builder_(_fbb);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_lastObTime(lastObTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idSensor(idSensor);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SensorStats_Abridged> CreateSensorStats_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idSensor = nullptr,
    const char *classificationMarking = nullptr,
    const char *lastObTime = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    SensorStats_Abridged_dataMode_Enum dataMode = SensorStats_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto lastObTime__ = lastObTime ? _fbb.CreateString(lastObTime) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  return CreateSensorStats_Abridged(
      _fbb,
      id__,
      idSensor__,
      classificationMarking__,
      lastObTime__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      dataMode);
}

inline const SensorStats_Abridged *GetSensorStats_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SensorStats_Abridged>(buf);
}

inline const SensorStats_Abridged *GetSizePrefixedSensorStats_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SensorStats_Abridged>(buf);
}

inline const char *SensorStats_AbridgedIdentifier() {
  return "SENS";
}

inline bool SensorStats_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SensorStats_AbridgedIdentifier());
}

inline bool SizePrefixedSensorStats_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SensorStats_AbridgedIdentifier(), true);
}

inline bool VerifySensorStats_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SensorStats_Abridged>(SensorStats_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSensorStats_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SensorStats_Abridged>(SensorStats_AbridgedIdentifier());
}

inline void FinishSensorStats_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SensorStats_Abridged> root) {
  fbb.Finish(root, SensorStats_AbridgedIdentifier());
}

inline void FinishSizePrefixedSensorStats_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SensorStats_Abridged> root) {
  fbb.FinishSizePrefixed(root, SensorStats_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
