// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsSupport_Ingest;
struct LogisticsSupport_IngestBuilder;

enum LogisticsSupport_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LogisticsSupport_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LogisticsSupport_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LogisticsSupport_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LogisticsSupport_Ingest_dataMode_Enum_EXERCISE = 3,
  LogisticsSupport_Ingest_dataMode_Enum_MIN = LogisticsSupport_Ingest_dataMode_Enum_REAL,
  LogisticsSupport_Ingest_dataMode_Enum_MAX = LogisticsSupport_Ingest_dataMode_Enum_EXERCISE
};

inline const LogisticsSupport_Ingest_dataMode_Enum (&EnumValuesLogisticsSupport_Ingest_dataMode_Enum())[4] {
  static const LogisticsSupport_Ingest_dataMode_Enum values[] = {
    LogisticsSupport_Ingest_dataMode_Enum_REAL,
    LogisticsSupport_Ingest_dataMode_Enum_TEST,
    LogisticsSupport_Ingest_dataMode_Enum_SIMULATED,
    LogisticsSupport_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLogisticsSupport_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogisticsSupport_Ingest_dataMode_Enum(LogisticsSupport_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LogisticsSupport_Ingest_dataMode_Enum_REAL, LogisticsSupport_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLogisticsSupport_Ingest_dataMode_Enum()[index];
}

/// /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
struct LogisticsSupport_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsSupport_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_EXTSYSTEMID = 8,
    VT_TAILNUMBER = 10,
    VT_AIRCRAFTMDS = 12,
    VT_CURRICAO = 14,
    VT_SUPPICAO = 16,
    VT_RPTCREATEDTIME = 18,
    VT_RPTCLOSEDTIME = 20,
    VT_METIME = 22,
    VT_MCTIME = 24,
    VT_LOGISTICACTION = 26,
    VT_LOGISTICSRECORDID = 28,
    VT_ETIC = 30,
    VT_ETMC = 32,
    VT_MAINTSTATUSCODE = 34,
    VT_REOPENFLAG = 36,
    VT_OWNER = 38,
    VT_LOGISTICSREMARKS = 40,
    VT_LOGISTICSDISCREPANCYINFOS = 42,
    VT_LOGISTICSTRANSPORTATIONPLANS = 44,
    VT_LOGISTICSSUPPORTITEMS = 46,
    VT_ORIGNETWORK = 48,
    VT_CREATEDAT = 50,
    VT_CREATEDBY = 52,
    VT_UPDATEDAT = 54,
    VT_UPDATEDBY = 56,
    VT_SOURCE = 58,
    VT_ORIGIN = 60,
    VT_DATAMODE = 62
  };
  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: GDSSBL012307131347070165
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *extSystemId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTSYSTEMID);
  }
  /// The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
  /// Example: /// Example: 99290
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *tailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAILNUMBER);
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: CO17A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *aircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTMDS);
  }
  /// The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *currICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CURRICAO);
  }
  /// The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *suppICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUPPICAO);
  }
  /// The time this report was created, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *rptCreatedTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RPTCREATEDTIME);
  }
  /// The time this report was closed, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *rptClosedTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RPTCLOSEDTIME);
  }
  /// The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *meTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METIME);
  }
  /// The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *mcTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MCTIME);
  }
  /// This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
  /// Example: /// Example: WA
  /// Constraints: Minimum length = 0, Maximum length = 9
  const ::flatbuffers::String *logisticAction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGISTICACTION);
  }
  /// The identifier that represents a Logistics Master Record.
  /// Example: /// Example: L62017
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *logisticsRecordId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGISTICSRECORDID);
  }
  /// The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *etic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETIC);
  }
  /// Logistics estimated time mission capable.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *etmc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ETMC);
  }
  /// The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
  /// Example: /// Example: NMCMU
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *maintStatusCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAINTSTATUSCODE);
  }
  /// This is used to indicate whether a closed master record has been reopened.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool reopenFlag() const {
    return GetField<uint8_t>(VT_REOPENFLAG, 0) != 0;
  }
  /// The organization that owns this logistics record.
  /// Example: /// Example: EXAMPLE_OWNER
  /// Constraints: Minimum length = 0, Maximum length = 250
  const ::flatbuffers::String *owner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER);
  }
  /// Remarks associated with this LogisticsSupport record.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsRemarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSREMARKS);
  }
  /// Discrepancy information associated with this LogisticsSupport record.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsDiscrepancyInfos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSDISCREPANCYINFOS);
  }
  /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsTransportationPlans() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSTRANSPORTATIONPLANS);
  }
  /// Support items associated with this LogisticsSupport record.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSupportItems() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSSUPPORTITEMS);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LogisticsSupport_Ingest_dataMode_Enum dataMode() const {
    return static_cast<LogisticsSupport_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EXTSYSTEMID) &&
           verifier.VerifyString(extSystemId()) &&
           VerifyOffset(verifier, VT_TAILNUMBER) &&
           verifier.VerifyString(tailNumber()) &&
           VerifyOffset(verifier, VT_AIRCRAFTMDS) &&
           verifier.VerifyString(aircraftMDS()) &&
           VerifyOffset(verifier, VT_CURRICAO) &&
           verifier.VerifyString(currICAO()) &&
           VerifyOffset(verifier, VT_SUPPICAO) &&
           verifier.VerifyString(suppICAO()) &&
           VerifyOffset(verifier, VT_RPTCREATEDTIME) &&
           verifier.VerifyString(rptCreatedTime()) &&
           VerifyOffset(verifier, VT_RPTCLOSEDTIME) &&
           verifier.VerifyString(rptClosedTime()) &&
           VerifyOffset(verifier, VT_METIME) &&
           verifier.VerifyString(meTime()) &&
           VerifyOffset(verifier, VT_MCTIME) &&
           verifier.VerifyString(mcTime()) &&
           VerifyOffset(verifier, VT_LOGISTICACTION) &&
           verifier.VerifyString(logisticAction()) &&
           VerifyOffset(verifier, VT_LOGISTICSRECORDID) &&
           verifier.VerifyString(logisticsRecordId()) &&
           VerifyOffset(verifier, VT_ETIC) &&
           verifier.VerifyString(etic()) &&
           VerifyOffset(verifier, VT_ETMC) &&
           verifier.VerifyString(etmc()) &&
           VerifyOffset(verifier, VT_MAINTSTATUSCODE) &&
           verifier.VerifyString(maintStatusCode()) &&
           VerifyField<uint8_t>(verifier, VT_REOPENFLAG, 1) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           VerifyOffset(verifier, VT_LOGISTICSREMARKS) &&
           verifier.VerifyVector(logisticsRemarks()) &&
           verifier.VerifyVectorOfStrings(logisticsRemarks()) &&
           VerifyOffset(verifier, VT_LOGISTICSDISCREPANCYINFOS) &&
           verifier.VerifyVector(logisticsDiscrepancyInfos()) &&
           verifier.VerifyVectorOfStrings(logisticsDiscrepancyInfos()) &&
           VerifyOffset(verifier, VT_LOGISTICSTRANSPORTATIONPLANS) &&
           verifier.VerifyVector(logisticsTransportationPlans()) &&
           verifier.VerifyVectorOfStrings(logisticsTransportationPlans()) &&
           VerifyOffset(verifier, VT_LOGISTICSSUPPORTITEMS) &&
           verifier.VerifyVector(logisticsSupportItems()) &&
           verifier.VerifyVectorOfStrings(logisticsSupportItems()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct LogisticsSupport_IngestBuilder {
  typedef LogisticsSupport_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_extSystemId(::flatbuffers::Offset<::flatbuffers::String> extSystemId) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_EXTSYSTEMID, extSystemId);
  }
  void add_tailNumber(::flatbuffers::Offset<::flatbuffers::String> tailNumber) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_TAILNUMBER, tailNumber);
  }
  void add_aircraftMDS(::flatbuffers::Offset<::flatbuffers::String> aircraftMDS) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_AIRCRAFTMDS, aircraftMDS);
  }
  void add_currICAO(::flatbuffers::Offset<::flatbuffers::String> currICAO) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_CURRICAO, currICAO);
  }
  void add_suppICAO(::flatbuffers::Offset<::flatbuffers::String> suppICAO) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_SUPPICAO, suppICAO);
  }
  void add_rptCreatedTime(::flatbuffers::Offset<::flatbuffers::String> rptCreatedTime) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_RPTCREATEDTIME, rptCreatedTime);
  }
  void add_rptClosedTime(::flatbuffers::Offset<::flatbuffers::String> rptClosedTime) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_RPTCLOSEDTIME, rptClosedTime);
  }
  void add_meTime(::flatbuffers::Offset<::flatbuffers::String> meTime) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_METIME, meTime);
  }
  void add_mcTime(::flatbuffers::Offset<::flatbuffers::String> mcTime) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_MCTIME, mcTime);
  }
  void add_logisticAction(::flatbuffers::Offset<::flatbuffers::String> logisticAction) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICACTION, logisticAction);
  }
  void add_logisticsRecordId(::flatbuffers::Offset<::flatbuffers::String> logisticsRecordId) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICSRECORDID, logisticsRecordId);
  }
  void add_etic(::flatbuffers::Offset<::flatbuffers::String> etic) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_ETIC, etic);
  }
  void add_etmc(::flatbuffers::Offset<::flatbuffers::String> etmc) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_ETMC, etmc);
  }
  void add_maintStatusCode(::flatbuffers::Offset<::flatbuffers::String> maintStatusCode) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_MAINTSTATUSCODE, maintStatusCode);
  }
  void add_reopenFlag(bool reopenFlag) {
    fbb_.AddElement<uint8_t>(LogisticsSupport_Ingest::VT_REOPENFLAG, static_cast<uint8_t>(reopenFlag), 0);
  }
  void add_owner(::flatbuffers::Offset<::flatbuffers::String> owner) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_OWNER, owner);
  }
  void add_logisticsRemarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsRemarks) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICSREMARKS, logisticsRemarks);
  }
  void add_logisticsDiscrepancyInfos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsDiscrepancyInfos) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICSDISCREPANCYINFOS, logisticsDiscrepancyInfos);
  }
  void add_logisticsTransportationPlans(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsTransportationPlans) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICSTRANSPORTATIONPLANS, logisticsTransportationPlans);
  }
  void add_logisticsSupportItems(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSupportItems) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_LOGISTICSSUPPORTITEMS, logisticsSupportItems);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LogisticsSupport_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(LogisticsSupport_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LogisticsSupport_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit LogisticsSupport_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsSupport_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsSupport_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsSupport_Ingest> CreateLogisticsSupport_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> extSystemId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> currICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> suppICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rptCreatedTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rptClosedTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> meTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mcTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> logisticAction = 0,
    ::flatbuffers::Offset<::flatbuffers::String> logisticsRecordId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> etic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> etmc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> maintStatusCode = 0,
    bool reopenFlag = false,
    ::flatbuffers::Offset<::flatbuffers::String> owner = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsRemarks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsDiscrepancyInfos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsTransportationPlans = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSupportItems = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    LogisticsSupport_Ingest_dataMode_Enum dataMode = LogisticsSupport_Ingest_dataMode_Enum_REAL) {
  LogisticsSupport_IngestBuilder builder_(_fbb);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_logisticsSupportItems(logisticsSupportItems);
  builder_.add_logisticsTransportationPlans(logisticsTransportationPlans);
  builder_.add_logisticsDiscrepancyInfos(logisticsDiscrepancyInfos);
  builder_.add_logisticsRemarks(logisticsRemarks);
  builder_.add_owner(owner);
  builder_.add_maintStatusCode(maintStatusCode);
  builder_.add_etmc(etmc);
  builder_.add_etic(etic);
  builder_.add_logisticsRecordId(logisticsRecordId);
  builder_.add_logisticAction(logisticAction);
  builder_.add_mcTime(mcTime);
  builder_.add_meTime(meTime);
  builder_.add_rptClosedTime(rptClosedTime);
  builder_.add_rptCreatedTime(rptCreatedTime);
  builder_.add_suppICAO(suppICAO);
  builder_.add_currICAO(currICAO);
  builder_.add_aircraftMDS(aircraftMDS);
  builder_.add_tailNumber(tailNumber);
  builder_.add_extSystemId(extSystemId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_reopenFlag(reopenFlag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsSupport_Ingest> CreateLogisticsSupport_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *extSystemId = nullptr,
    const char *tailNumber = nullptr,
    const char *aircraftMDS = nullptr,
    const char *currICAO = nullptr,
    const char *suppICAO = nullptr,
    const char *rptCreatedTime = nullptr,
    const char *rptClosedTime = nullptr,
    const char *meTime = nullptr,
    const char *mcTime = nullptr,
    const char *logisticAction = nullptr,
    const char *logisticsRecordId = nullptr,
    const char *etic = nullptr,
    const char *etmc = nullptr,
    const char *maintStatusCode = nullptr,
    bool reopenFlag = false,
    const char *owner = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsRemarks = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsDiscrepancyInfos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsTransportationPlans = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSupportItems = nullptr,
    const char *origNetwork = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    LogisticsSupport_Ingest_dataMode_Enum dataMode = LogisticsSupport_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto extSystemId__ = extSystemId ? _fbb.CreateString(extSystemId) : 0;
  auto tailNumber__ = tailNumber ? _fbb.CreateString(tailNumber) : 0;
  auto aircraftMDS__ = aircraftMDS ? _fbb.CreateString(aircraftMDS) : 0;
  auto currICAO__ = currICAO ? _fbb.CreateString(currICAO) : 0;
  auto suppICAO__ = suppICAO ? _fbb.CreateString(suppICAO) : 0;
  auto rptCreatedTime__ = rptCreatedTime ? _fbb.CreateString(rptCreatedTime) : 0;
  auto rptClosedTime__ = rptClosedTime ? _fbb.CreateString(rptClosedTime) : 0;
  auto meTime__ = meTime ? _fbb.CreateString(meTime) : 0;
  auto mcTime__ = mcTime ? _fbb.CreateString(mcTime) : 0;
  auto logisticAction__ = logisticAction ? _fbb.CreateString(logisticAction) : 0;
  auto logisticsRecordId__ = logisticsRecordId ? _fbb.CreateString(logisticsRecordId) : 0;
  auto etic__ = etic ? _fbb.CreateString(etic) : 0;
  auto etmc__ = etmc ? _fbb.CreateString(etmc) : 0;
  auto maintStatusCode__ = maintStatusCode ? _fbb.CreateString(maintStatusCode) : 0;
  auto owner__ = owner ? _fbb.CreateString(owner) : 0;
  auto logisticsRemarks__ = logisticsRemarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsRemarks) : 0;
  auto logisticsDiscrepancyInfos__ = logisticsDiscrepancyInfos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsDiscrepancyInfos) : 0;
  auto logisticsTransportationPlans__ = logisticsTransportationPlans ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsTransportationPlans) : 0;
  auto logisticsSupportItems__ = logisticsSupportItems ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsSupportItems) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateLogisticsSupport_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      extSystemId__,
      tailNumber__,
      aircraftMDS__,
      currICAO__,
      suppICAO__,
      rptCreatedTime__,
      rptClosedTime__,
      meTime__,
      mcTime__,
      logisticAction__,
      logisticsRecordId__,
      etic__,
      etmc__,
      maintStatusCode__,
      reopenFlag,
      owner__,
      logisticsRemarks__,
      logisticsDiscrepancyInfos__,
      logisticsTransportationPlans__,
      logisticsSupportItems__,
      origNetwork__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      dataMode);
}

inline const LogisticsSupport_Ingest *GetLogisticsSupport_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsSupport_Ingest>(buf);
}

inline const LogisticsSupport_Ingest *GetSizePrefixedLogisticsSupport_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsSupport_Ingest>(buf);
}

inline const char *LogisticsSupport_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsSupport_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSupport_IngestIdentifier());
}

inline bool SizePrefixedLogisticsSupport_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsSupport_IngestIdentifier(), true);
}

inline bool VerifyLogisticsSupport_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsSupport_Ingest>(LogisticsSupport_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsSupport_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsSupport_Ingest>(LogisticsSupport_IngestIdentifier());
}

inline void FinishLogisticsSupport_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSupport_Ingest> root) {
  fbb.Finish(root, LogisticsSupport_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsSupport_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsSupport_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsSupport_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
