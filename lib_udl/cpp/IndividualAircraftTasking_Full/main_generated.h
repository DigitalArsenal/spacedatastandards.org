// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IndividualAircraftTasking_Full;
struct IndividualAircraftTasking_FullBuilder;

/// /// Collection that specifies the naval flight operations for this ATO.
struct IndividualAircraftTasking_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IndividualAircraftTasking_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMACFT = 4,
    VT_ACFTTYPE = 6,
    VT_CALLSIGN = 8,
    VT_PRICONFIGCODE = 10,
    VT_SECCONFIGCODE = 12,
    VT_LINK16CALLSIGN = 14,
    VT_TACANCHAN = 16,
    VT_JUADDRESS = 18,
    VT_IFFSIFMODE1CODE = 20,
    VT_IFFSIFMODE2CODE = 22,
    VT_IFFSIFMODE3CODE = 24
  };
  /// The number of aircraft participating in this mission.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t numAcft() const {
    return GetField<int32_t>(VT_NUMACFT, 0);
  }
  /// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
  /// Example: /// Example: F35A
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *acftType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACFTTYPE);
  }
  /// The call sign assigned to this mission aircraft.
  /// Example: /// Example: EAGLE47
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The code that indicates the ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 6A2W3
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *priConfigCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRICONFIGCODE);
  }
  /// The code for the secondary ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 2S2WG
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *secConfigCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECCONFIGCODE);
  }
  /// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
  /// Example: /// Example: EE47
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *link16CallSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINK16CALLSIGN);
  }
  /// The TACAN channel assigned to this mission aircraft.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t tacanChan() const {
    return GetField<int32_t>(VT_TACANCHAN, 0);
  }
  /// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *juAddress() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_JUADDRESS);
  }
  /// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 111
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *iffSifMode1Code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IFFSIFMODE1CODE);
  }
  /// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 20147
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *iffSifMode2Code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IFFSIFMODE2CODE);
  }
  /// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 30147
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *iffSifMode3Code() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IFFSIFMODE3CODE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUMACFT, 4) &&
           VerifyOffset(verifier, VT_ACFTTYPE) &&
           verifier.VerifyString(acftType()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_PRICONFIGCODE) &&
           verifier.VerifyString(priConfigCode()) &&
           VerifyOffset(verifier, VT_SECCONFIGCODE) &&
           verifier.VerifyString(secConfigCode()) &&
           VerifyOffset(verifier, VT_LINK16CALLSIGN) &&
           verifier.VerifyString(link16CallSign()) &&
           VerifyField<int32_t>(verifier, VT_TACANCHAN, 4) &&
           VerifyOffset(verifier, VT_JUADDRESS) &&
           verifier.VerifyVector(juAddress()) &&
           verifier.VerifyVectorOfStrings(juAddress()) &&
           VerifyOffset(verifier, VT_IFFSIFMODE1CODE) &&
           verifier.VerifyString(iffSifMode1Code()) &&
           VerifyOffset(verifier, VT_IFFSIFMODE2CODE) &&
           verifier.VerifyString(iffSifMode2Code()) &&
           VerifyOffset(verifier, VT_IFFSIFMODE3CODE) &&
           verifier.VerifyString(iffSifMode3Code()) &&
           verifier.EndTable();
  }
};

struct IndividualAircraftTasking_FullBuilder {
  typedef IndividualAircraftTasking_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_numAcft(int32_t numAcft) {
    fbb_.AddElement<int32_t>(IndividualAircraftTasking_Full::VT_NUMACFT, numAcft, 0);
  }
  void add_acftType(::flatbuffers::Offset<::flatbuffers::String> acftType) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_ACFTTYPE, acftType);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_CALLSIGN, callSign);
  }
  void add_priConfigCode(::flatbuffers::Offset<::flatbuffers::String> priConfigCode) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_PRICONFIGCODE, priConfigCode);
  }
  void add_secConfigCode(::flatbuffers::Offset<::flatbuffers::String> secConfigCode) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_SECCONFIGCODE, secConfigCode);
  }
  void add_link16CallSign(::flatbuffers::Offset<::flatbuffers::String> link16CallSign) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_LINK16CALLSIGN, link16CallSign);
  }
  void add_tacanChan(int32_t tacanChan) {
    fbb_.AddElement<int32_t>(IndividualAircraftTasking_Full::VT_TACANCHAN, tacanChan, 0);
  }
  void add_juAddress(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> juAddress) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_JUADDRESS, juAddress);
  }
  void add_iffSifMode1Code(::flatbuffers::Offset<::flatbuffers::String> iffSifMode1Code) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_IFFSIFMODE1CODE, iffSifMode1Code);
  }
  void add_iffSifMode2Code(::flatbuffers::Offset<::flatbuffers::String> iffSifMode2Code) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_IFFSIFMODE2CODE, iffSifMode2Code);
  }
  void add_iffSifMode3Code(::flatbuffers::Offset<::flatbuffers::String> iffSifMode3Code) {
    fbb_.AddOffset(IndividualAircraftTasking_Full::VT_IFFSIFMODE3CODE, iffSifMode3Code);
  }
  explicit IndividualAircraftTasking_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IndividualAircraftTasking_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IndividualAircraftTasking_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IndividualAircraftTasking_Full> CreateIndividualAircraftTasking_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t numAcft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> acftType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> priConfigCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> secConfigCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> link16CallSign = 0,
    int32_t tacanChan = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> juAddress = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iffSifMode1Code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iffSifMode2Code = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iffSifMode3Code = 0) {
  IndividualAircraftTasking_FullBuilder builder_(_fbb);
  builder_.add_iffSifMode3Code(iffSifMode3Code);
  builder_.add_iffSifMode2Code(iffSifMode2Code);
  builder_.add_iffSifMode1Code(iffSifMode1Code);
  builder_.add_juAddress(juAddress);
  builder_.add_tacanChan(tacanChan);
  builder_.add_link16CallSign(link16CallSign);
  builder_.add_secConfigCode(secConfigCode);
  builder_.add_priConfigCode(priConfigCode);
  builder_.add_callSign(callSign);
  builder_.add_acftType(acftType);
  builder_.add_numAcft(numAcft);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IndividualAircraftTasking_Full> CreateIndividualAircraftTasking_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t numAcft = 0,
    const char *acftType = nullptr,
    const char *callSign = nullptr,
    const char *priConfigCode = nullptr,
    const char *secConfigCode = nullptr,
    const char *link16CallSign = nullptr,
    int32_t tacanChan = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *juAddress = nullptr,
    const char *iffSifMode1Code = nullptr,
    const char *iffSifMode2Code = nullptr,
    const char *iffSifMode3Code = nullptr) {
  auto acftType__ = acftType ? _fbb.CreateString(acftType) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto priConfigCode__ = priConfigCode ? _fbb.CreateString(priConfigCode) : 0;
  auto secConfigCode__ = secConfigCode ? _fbb.CreateString(secConfigCode) : 0;
  auto link16CallSign__ = link16CallSign ? _fbb.CreateString(link16CallSign) : 0;
  auto juAddress__ = juAddress ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*juAddress) : 0;
  auto iffSifMode1Code__ = iffSifMode1Code ? _fbb.CreateString(iffSifMode1Code) : 0;
  auto iffSifMode2Code__ = iffSifMode2Code ? _fbb.CreateString(iffSifMode2Code) : 0;
  auto iffSifMode3Code__ = iffSifMode3Code ? _fbb.CreateString(iffSifMode3Code) : 0;
  return CreateIndividualAircraftTasking_Full(
      _fbb,
      numAcft,
      acftType__,
      callSign__,
      priConfigCode__,
      secConfigCode__,
      link16CallSign__,
      tacanChan,
      juAddress__,
      iffSifMode1Code__,
      iffSifMode2Code__,
      iffSifMode3Code__);
}

inline const IndividualAircraftTasking_Full *GetIndividualAircraftTasking_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IndividualAircraftTasking_Full>(buf);
}

inline const IndividualAircraftTasking_Full *GetSizePrefixedIndividualAircraftTasking_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IndividualAircraftTasking_Full>(buf);
}

inline const char *IndividualAircraftTasking_FullIdentifier() {
  return "INDI";
}

inline bool IndividualAircraftTasking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IndividualAircraftTasking_FullIdentifier());
}

inline bool SizePrefixedIndividualAircraftTasking_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IndividualAircraftTasking_FullIdentifier(), true);
}

inline bool VerifyIndividualAircraftTasking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IndividualAircraftTasking_Full>(IndividualAircraftTasking_FullIdentifier());
}

inline bool VerifySizePrefixedIndividualAircraftTasking_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IndividualAircraftTasking_Full>(IndividualAircraftTasking_FullIdentifier());
}

inline void FinishIndividualAircraftTasking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IndividualAircraftTasking_Full> root) {
  fbb.Finish(root, IndividualAircraftTasking_FullIdentifier());
}

inline void FinishSizePrefixedIndividualAircraftTasking_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IndividualAircraftTasking_Full> root) {
  fbb.FinishSizePrefixed(root, IndividualAircraftTasking_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
