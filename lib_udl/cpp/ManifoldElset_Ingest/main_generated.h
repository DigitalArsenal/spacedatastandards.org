// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ManifoldElset_Ingest;
struct ManifoldElset_IngestBuilder;

enum ManifoldElset_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  ManifoldElset_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ManifoldElset_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  ManifoldElset_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ManifoldElset_Ingest_dataMode_Enum_EXERCISE = 3,
  ManifoldElset_Ingest_dataMode_Enum_MIN = ManifoldElset_Ingest_dataMode_Enum_REAL,
  ManifoldElset_Ingest_dataMode_Enum_MAX = ManifoldElset_Ingest_dataMode_Enum_EXERCISE
};

inline const ManifoldElset_Ingest_dataMode_Enum (&EnumValuesManifoldElset_Ingest_dataMode_Enum())[4] {
  static const ManifoldElset_Ingest_dataMode_Enum values[] = {
    ManifoldElset_Ingest_dataMode_Enum_REAL,
    ManifoldElset_Ingest_dataMode_Enum_TEST,
    ManifoldElset_Ingest_dataMode_Enum_SIMULATED,
    ManifoldElset_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesManifoldElset_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameManifoldElset_Ingest_dataMode_Enum(ManifoldElset_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, ManifoldElset_Ingest_dataMode_Enum_REAL, ManifoldElset_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesManifoldElset_Ingest_dataMode_Enum()[index];
}

/// /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
struct ManifoldElset_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ManifoldElset_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDMANIFOLD = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_TMPSATNO = 10,
    VT_EPOCH = 12,
    VT_MEANMOTION = 14,
    VT_ECCENTRICITY = 16,
    VT_INCLINATION = 18,
    VT_RAAN = 20,
    VT_ARGOFPERIGEE = 22,
    VT_MEANANOMALY = 24,
    VT_REVNO = 26,
    VT_BSTAR = 28,
    VT_MEANMOTIONDOT = 30,
    VT_MEANMOTIONDDOT = 32,
    VT_SEMIMAJORAXIS = 34,
    VT_PERIOD = 36,
    VT_APOGEE = 38,
    VT_PERIGEE = 40,
    VT_LINE1 = 42,
    VT_LINE2 = 44,
    VT_CREATEDAT = 46,
    VT_CREATEDBY = 48,
    VT_SOURCE = 50,
    VT_ORIGIN = 52,
    VT_DATAMODE = 54,
    VT_ORIGNETWORK = 56
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MANIFOLDELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Identifier of the parent Manifold record.
  /// Example: /// Example: REF-MANIFOLD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idManifold() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDMANIFOLD);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// A placeholder satellite number and not a true NORAD catalog number.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t tmpSatNo() const {
    return GetField<int32_t>(VT_TMPSATNO, 0);
  }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *epoch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EPOCH);
  }
  /// The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double meanMotion() const {
    return GetField<double>(VT_MEANMOTION, 0.0);
  }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double eccentricity() const {
    return GetField<double>(VT_ECCENTRICITY, 0.0);
  }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  double inclination() const {
    return GetField<double>(VT_INCLINATION, 0.0);
  }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double raan() const {
    return GetField<double>(VT_RAAN, 0.0);
  }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double argOfPerigee() const {
    return GetField<double>(VT_ARGOFPERIGEE, 0.0);
  }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double meanAnomaly() const {
    return GetField<double>(VT_MEANANOMALY, 0.0);
  }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t revNo() const {
    return GetField<int32_t>(VT_REVNO, 0);
  }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double bStar() const {
    return GetField<double>(VT_BSTAR, 0.0);
  }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double meanMotionDot() const {
    return GetField<double>(VT_MEANMOTIONDOT, 0.0);
  }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double meanMotionDDot() const {
    return GetField<double>(VT_MEANMOTIONDDOT, 0.0);
  }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double semiMajorAxis() const {
    return GetField<double>(VT_SEMIMAJORAXIS, 0.0);
  }
  /// Period of the orbit equal to inverse of mean motion.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double period() const {
    return GetField<double>(VT_PERIOD, 0.0);
  }
  /// The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double apogee() const {
    return GetField<double>(VT_APOGEE, 0.0);
  }
  /// The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double perigee() const {
    return GetField<double>(VT_PERIGEE, 0.0);
  }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  const ::flatbuffers::String *line1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINE1);
  }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  const ::flatbuffers::String *line2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINE2);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  ManifoldElset_Ingest_dataMode_Enum dataMode() const {
    return static_cast<ManifoldElset_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDMANIFOLD) &&
           verifier.VerifyString(idManifold()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int32_t>(verifier, VT_TMPSATNO, 4) &&
           VerifyOffset(verifier, VT_EPOCH) &&
           verifier.VerifyString(epoch()) &&
           VerifyField<double>(verifier, VT_MEANMOTION, 8) &&
           VerifyField<double>(verifier, VT_ECCENTRICITY, 8) &&
           VerifyField<double>(verifier, VT_INCLINATION, 8) &&
           VerifyField<double>(verifier, VT_RAAN, 8) &&
           VerifyField<double>(verifier, VT_ARGOFPERIGEE, 8) &&
           VerifyField<double>(verifier, VT_MEANANOMALY, 8) &&
           VerifyField<int32_t>(verifier, VT_REVNO, 4) &&
           VerifyField<double>(verifier, VT_BSTAR, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDOT, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDDOT, 8) &&
           VerifyField<double>(verifier, VT_SEMIMAJORAXIS, 8) &&
           VerifyField<double>(verifier, VT_PERIOD, 8) &&
           VerifyField<double>(verifier, VT_APOGEE, 8) &&
           VerifyField<double>(verifier, VT_PERIGEE, 8) &&
           VerifyOffset(verifier, VT_LINE1) &&
           verifier.VerifyString(line1()) &&
           VerifyOffset(verifier, VT_LINE2) &&
           verifier.VerifyString(line2()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct ManifoldElset_IngestBuilder {
  typedef ManifoldElset_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_ID, id);
  }
  void add_idManifold(::flatbuffers::Offset<::flatbuffers::String> idManifold) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_IDMANIFOLD, idManifold);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_tmpSatNo(int32_t tmpSatNo) {
    fbb_.AddElement<int32_t>(ManifoldElset_Ingest::VT_TMPSATNO, tmpSatNo, 0);
  }
  void add_epoch(::flatbuffers::Offset<::flatbuffers::String> epoch) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_EPOCH, epoch);
  }
  void add_meanMotion(double meanMotion) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_MEANMOTION, meanMotion, 0.0);
  }
  void add_eccentricity(double eccentricity) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  void add_inclination(double inclination) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_INCLINATION, inclination, 0.0);
  }
  void add_raan(double raan) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_RAAN, raan, 0.0);
  }
  void add_argOfPerigee(double argOfPerigee) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  void add_meanAnomaly(double meanAnomaly) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  void add_revNo(int32_t revNo) {
    fbb_.AddElement<int32_t>(ManifoldElset_Ingest::VT_REVNO, revNo, 0);
  }
  void add_bStar(double bStar) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_BSTAR, bStar, 0.0);
  }
  void add_meanMotionDot(double meanMotionDot) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  void add_meanMotionDDot(double meanMotionDDot) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  void add_semiMajorAxis(double semiMajorAxis) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  void add_period(double period) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_PERIOD, period, 0.0);
  }
  void add_apogee(double apogee) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_APOGEE, apogee, 0.0);
  }
  void add_perigee(double perigee) {
    fbb_.AddElement<double>(ManifoldElset_Ingest::VT_PERIGEE, perigee, 0.0);
  }
  void add_line1(::flatbuffers::Offset<::flatbuffers::String> line1) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_LINE1, line1);
  }
  void add_line2(::flatbuffers::Offset<::flatbuffers::String> line2) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_LINE2, line2);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(ManifoldElset_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(ManifoldElset_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(ManifoldElset_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit ManifoldElset_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ManifoldElset_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ManifoldElset_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ManifoldElset_Ingest> CreateManifoldElset_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idManifold = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int32_t tmpSatNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> epoch = 0,
    double meanMotion = 0.0,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> line1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> line2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ManifoldElset_Ingest_dataMode_Enum dataMode = ManifoldElset_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  ManifoldElset_IngestBuilder builder_(_fbb);
  builder_.add_perigee(perigee);
  builder_.add_apogee(apogee);
  builder_.add_period(period);
  builder_.add_semiMajorAxis(semiMajorAxis);
  builder_.add_meanMotionDDot(meanMotionDDot);
  builder_.add_meanMotionDot(meanMotionDot);
  builder_.add_bStar(bStar);
  builder_.add_meanAnomaly(meanAnomaly);
  builder_.add_argOfPerigee(argOfPerigee);
  builder_.add_raan(raan);
  builder_.add_inclination(inclination);
  builder_.add_eccentricity(eccentricity);
  builder_.add_meanMotion(meanMotion);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_line2(line2);
  builder_.add_line1(line1);
  builder_.add_revNo(revNo);
  builder_.add_epoch(epoch);
  builder_.add_tmpSatNo(tmpSatNo);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idManifold(idManifold);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ManifoldElset_Ingest> CreateManifoldElset_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idManifold = nullptr,
    const char *classificationMarking = nullptr,
    int32_t tmpSatNo = 0,
    const char *epoch = nullptr,
    double meanMotion = 0.0,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    const char *line1 = nullptr,
    const char *line2 = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    ManifoldElset_Ingest_dataMode_Enum dataMode = ManifoldElset_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idManifold__ = idManifold ? _fbb.CreateString(idManifold) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto epoch__ = epoch ? _fbb.CreateString(epoch) : 0;
  auto line1__ = line1 ? _fbb.CreateString(line1) : 0;
  auto line2__ = line2 ? _fbb.CreateString(line2) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateManifoldElset_Ingest(
      _fbb,
      id__,
      idManifold__,
      classificationMarking__,
      tmpSatNo,
      epoch__,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      line1__,
      line2__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const ManifoldElset_Ingest *GetManifoldElset_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<ManifoldElset_Ingest>(buf);
}

inline const ManifoldElset_Ingest *GetSizePrefixedManifoldElset_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ManifoldElset_Ingest>(buf);
}

inline const char *ManifoldElset_IngestIdentifier() {
  return "MANI";
}

inline bool ManifoldElset_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ManifoldElset_IngestIdentifier());
}

inline bool SizePrefixedManifoldElset_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ManifoldElset_IngestIdentifier(), true);
}

inline bool VerifyManifoldElset_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ManifoldElset_Ingest>(ManifoldElset_IngestIdentifier());
}

inline bool VerifySizePrefixedManifoldElset_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ManifoldElset_Ingest>(ManifoldElset_IngestIdentifier());
}

inline void FinishManifoldElset_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ManifoldElset_Ingest> root) {
  fbb.Finish(root, ManifoldElset_IngestIdentifier());
}

inline void FinishSizePrefixedManifoldElset_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ManifoldElset_Ingest> root) {
  fbb.FinishSizePrefixed(root, ManifoldElset_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
