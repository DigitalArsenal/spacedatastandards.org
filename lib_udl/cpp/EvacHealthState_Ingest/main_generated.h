// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacHealthState_Ingest;
struct EvacHealthState_IngestBuilder;

/// /// Health state information.
struct EvacHealthState_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacHealthState_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_HEALTHSTATECODE = 6,
    VT_MEDCONFFACTOR = 8,
    VT_TIME = 10
  };
  /// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
  /// Example: /// Example: COGNITIVE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
  /// Example: /// Example: BLUE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *healthStateCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HEALTHSTATECODE);
  }
  /// Medical confidence factor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t medConfFactor() const {
    return GetField<int32_t>(VT_MEDCONFFACTOR, 0);
  }
  /// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_HEALTHSTATECODE) &&
           verifier.VerifyString(healthStateCode()) &&
           VerifyField<int32_t>(verifier, VT_MEDCONFFACTOR, 4) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           verifier.EndTable();
  }
};

struct EvacHealthState_IngestBuilder {
  typedef EvacHealthState_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacHealthState_Ingest::VT_TYPE, type);
  }
  void add_healthStateCode(::flatbuffers::Offset<::flatbuffers::String> healthStateCode) {
    fbb_.AddOffset(EvacHealthState_Ingest::VT_HEALTHSTATECODE, healthStateCode);
  }
  void add_medConfFactor(int32_t medConfFactor) {
    fbb_.AddElement<int32_t>(EvacHealthState_Ingest::VT_MEDCONFFACTOR, medConfFactor, 0);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacHealthState_Ingest::VT_TIME, time);
  }
  explicit EvacHealthState_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacHealthState_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacHealthState_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacHealthState_Ingest> CreateEvacHealthState_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> healthStateCode = 0,
    int32_t medConfFactor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0) {
  EvacHealthState_IngestBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_medConfFactor(medConfFactor);
  builder_.add_healthStateCode(healthStateCode);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacHealthState_Ingest> CreateEvacHealthState_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *healthStateCode = nullptr,
    int32_t medConfFactor = 0,
    const char *time = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto healthStateCode__ = healthStateCode ? _fbb.CreateString(healthStateCode) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  return CreateEvacHealthState_Ingest(
      _fbb,
      type__,
      healthStateCode__,
      medConfFactor,
      time__);
}

inline const EvacHealthState_Ingest *GetEvacHealthState_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<EvacHealthState_Ingest>(buf);
}

inline const EvacHealthState_Ingest *GetSizePrefixedEvacHealthState_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacHealthState_Ingest>(buf);
}

inline const char *EvacHealthState_IngestIdentifier() {
  return "EVAC";
}

inline bool EvacHealthState_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacHealthState_IngestIdentifier());
}

inline bool SizePrefixedEvacHealthState_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacHealthState_IngestIdentifier(), true);
}

inline bool VerifyEvacHealthState_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacHealthState_Ingest>(EvacHealthState_IngestIdentifier());
}

inline bool VerifySizePrefixedEvacHealthState_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacHealthState_Ingest>(EvacHealthState_IngestIdentifier());
}

inline void FinishEvacHealthState_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacHealthState_Ingest> root) {
  fbb.Finish(root, EvacHealthState_IngestIdentifier());
}

inline void FinishSizePrefixedEvacHealthState_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacHealthState_Ingest> root) {
  fbb.FinishSizePrefixed(root, EvacHealthState_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
