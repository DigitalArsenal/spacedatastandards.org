// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Sensorobservationtype_Abridged;
struct Sensorobservationtype_AbridgedBuilder;

/// /// No description available.
struct Sensorobservationtype_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Sensorobservationtype_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_CREATEDAT = 8,
    VT_CREATEDBY = 10,
    VT_ORIGNETWORK = 12
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSOROBSERVATIONTYPE-ID
  /// Constraints: Minimum length = 1, Maximum length = 2
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// The observation measurement type produced by a sensor.
  /// Example: /// Example: 5
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct Sensorobservationtype_AbridgedBuilder {
  typedef Sensorobservationtype_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Sensorobservationtype_Abridged::VT_ID, id);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Sensorobservationtype_Abridged::VT_TYPE, type);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Sensorobservationtype_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Sensorobservationtype_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Sensorobservationtype_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit Sensorobservationtype_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sensorobservationtype_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sensorobservationtype_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sensorobservationtype_Abridged> CreateSensorobservationtype_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  Sensorobservationtype_AbridgedBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_type(type);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Sensorobservationtype_Abridged> CreateSensorobservationtype_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *type = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSensorobservationtype_Abridged(
      _fbb,
      id__,
      type__,
      createdAt__,
      createdBy__,
      origNetwork__);
}

inline const Sensorobservationtype_Abridged *GetSensorobservationtype_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<Sensorobservationtype_Abridged>(buf);
}

inline const Sensorobservationtype_Abridged *GetSizePrefixedSensorobservationtype_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Sensorobservationtype_Abridged>(buf);
}

inline const char *Sensorobservationtype_AbridgedIdentifier() {
  return "SENS";
}

inline bool Sensorobservationtype_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensorobservationtype_AbridgedIdentifier());
}

inline bool SizePrefixedSensorobservationtype_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensorobservationtype_AbridgedIdentifier(), true);
}

inline bool VerifySensorobservationtype_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensorobservationtype_Abridged>(Sensorobservationtype_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSensorobservationtype_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensorobservationtype_Abridged>(Sensorobservationtype_AbridgedIdentifier());
}

inline void FinishSensorobservationtype_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensorobservationtype_Abridged> root) {
  fbb.Finish(root, Sensorobservationtype_AbridgedIdentifier());
}

inline void FinishSizePrefixedSensorobservationtype_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensorobservationtype_Abridged> root) {
  fbb.FinishSizePrefixed(root, Sensorobservationtype_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
